uint64_t sub_1D1416674(uint64_t a1, uint64_t a2, void *aBlock)
{
  void (*v4)(uint64_t, uint64_t (*)(_QWORD *), uint64_t);
  void *v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t, uint64_t (*)(_QWORD *), uint64_t))(a1 + 32);
  v5 = _Block_copy(aBlock);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  swift_retain();
  v4(a2, sub_1D141B43C, v6);
  swift_release();
  return swift_release();
}

void sub_1D1416798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 aBlock;
  __int128 v14;
  uint64_t (*v15)();
  uint64_t v16;

  v7 = objc_msgSend((id)objc_opt_self(), sel_currentConnection);
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, sel_auditToken);
    v11 = v14;
    v12 = aBlock;

  }
  else
  {
    v11 = 0u;
    v12 = 0u;
  }
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v3;
  *(_QWORD *)(v9 + 24) = a1;
  *(_OWORD *)(v9 + 32) = v12;
  *(_OWORD *)(v9 + 48) = v11;
  *(_QWORD *)(v9 + 64) = a2;
  *(_QWORD *)(v9 + 72) = a3;
  v15 = sub_1D141C758;
  v16 = v9;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v14 = sub_1D141BC88;
  *((_QWORD *)&v14 + 1) = &unk_1E92331B8;
  v10 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  IMDSynchronouslyPerformBlockOnMainQueueWithDependency(v10);
  _Block_release(v10);
}

uint64_t sub_1D1416C2C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t *i;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _OWORD v22[2];
  uint64_t v23[4];

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 16);
  if (!v3)
  {
    if (qword_1ED935748 != -1)
      swift_once();
    v10 = sub_1D166D964();
    sub_1D141AC1C(v10, (uint64_t)qword_1ED936548);
    v11 = sub_1D166D94C();
    v12 = sub_1D166DD6C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1D1413000, v11, v12, "No required entitlements have been specified, allowing all clients", v13, 2u);
      MEMORY[0x1D17EB0AC](v13, -1, -1);
    }

    return 1;
  }
  for (i = (unint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    v6 = *(i - 1);
    v5 = *i;
    swift_bridgeObjectRetain();
    v7 = (void *)sub_1D166DAA8();
    v8 = objc_msgSend(a1, sel_valueForEntitlement_, v7);

    if (v8)
    {
      sub_1D166DF70();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v22, 0, sizeof(v22));
    }
    sub_1D141B3F4((uint64_t)v22, (uint64_t)v23);
    if (!v23[3])
    {
      swift_bridgeObjectRelease();
      sub_1D1608CC4((uint64_t)v23);
      goto LABEL_4;
    }
    sub_1D15FD3C0(0, (unint64_t *)&qword_1ED935800);
    if ((swift_dynamicCast() & 1) != 0)
      break;
LABEL_3:
    swift_bridgeObjectRelease();
LABEL_4:
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (!objc_msgSend(v21, sel_BOOLValue))
  {

    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (qword_1ED935748 != -1)
    swift_once();
  v15 = sub_1D166D964();
  sub_1D141AC1C(v15, (uint64_t)qword_1ED936548);
  swift_bridgeObjectRetain();
  v16 = a1;
  v17 = sub_1D166D94C();
  v18 = sub_1D166DD6C();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v23[0] = v20;
    *(_DWORD *)v19 = 67109378;
    LODWORD(v22[0]) = objc_msgSend(v16, sel_processIdentifier);
    sub_1D166DF28();

    *(_WORD *)(v19 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v22[0] = sub_1D141BCB4(v6, v5, v23);
    sub_1D166DF28();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D1413000, v17, v18, "Client %d has entitlement %s", (uint8_t *)v19, 0x12u);
    v9 = 1;
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v20, -1, -1);
    MEMORY[0x1D17EB0AC](v19, -1, -1);

    return v9;
  }

  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_1D1417000(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(a2, "unreadCount");
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1D14170E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  unsigned __int8 v22;
  _QWORD *v24;
  id v25;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (a4)
  {
    swift_retain();
    v15 = objc_msgSend(a4, sel_internalName);
    v16 = sub_1D166DACC();
    v18 = v17;

    objc_opt_self();
    v19 = swift_dynamicCastObjCClass();
    if (v19)
    {
      v20 = (void *)v19;
      v21 = a4;
      if (objc_msgSend(v20, sel_isSubService))
      {
        v22 = objc_msgSend(v20, sel_demandsBroadcasting);

        if ((v22 & 1) == 0)
        {
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {

      }
    }
  }
  else
  {
    swift_retain();
    v16 = 0;
    v18 = 0;
  }
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = a5;
  v24[3] = sub_1D141B388;
  v24[4] = v14;
  v24[5] = v16;
  v24[6] = v18;
  v24[7] = a6;
  v24[8] = a7;
  v24[9] = a1;
  v25 = a5;
  swift_retain();
  sub_1D166D850();
  swift_release();
  return swift_release();
}

id sub_1D14172EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v3 = a2;
  +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "accountID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "accountForAccountID:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_BYTE *)(a1 + 40)
    && (!v6
     || (objc_msgSend(v6, "service"),
         v7 = (void *)objc_claimAutoreleasedReturnValue(),
         v8 = objc_msgSend(v7, "supportsDatabase"),
         v7,
         (v8 & 1) != 0)
     || (v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8),
         v10 = *(_QWORD *)(v9 + 24),
         *(_QWORD *)(v9 + 24) = v10 + 1,
         v10 > 24)))
  {
    v11 = 0;
  }
  else
  {
    objc_msgSend(v3, "_dictionaryRepresentation");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

void sub_1D1417418(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "serializedRepresentation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "logHandle");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v13 = 138412290;
    v14 = v2;
    _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "broadcasting sync state changed event: %@", (uint8_t *)&v13, 0xCu);
  }

  v4 = *MEMORY[0x1E0D37BA0];
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D37BA0]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "logHandle");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v7)
    {
      objc_msgSend(v2, "objectForKey:", v4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "unsignedIntValue");
      IMStringFromIMCloudKitSyncJobState();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "broadcasting sync job state: %@", (uint8_t *)&v13, 0xCu);

    }
  }
  else if (v7)
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "broadcasting sync job state: nil", (uint8_t *)&v13, 2u);
  }

  +[IMDBroadcastController sharedProvider](IMDBroadcastController, "sharedProvider");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "broadcasterForCloudSyncListeners");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "updateCloudKitStateWithDictionary:", v2);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "__mainThreadPostNotificationName:object:", CFSTR("com.apple.IMCore.IMCloudKitHooks.ValuesChanged"), 0);

}

uint64_t sub_1D141760C(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v2 = a2;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3 = (void *)MEMORY[0x1D17EA968]();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1D1417000;
  v6[3] = &unk_1E922C880;
  v6[4] = &v7;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v6);
  objc_autoreleasePoolPop(v3);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1D14176BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1D14176D4(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E20]), "initWithCapacity:", objc_msgSend(v1, "count"));
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v14;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v14 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
          objc_msgSend(v8, "ID", (_QWORD)v13);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_msgSend(v9, "length");

          if (v10)
          {
            objc_msgSend(v8, "ID");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v2, "addObject:", v11);

          }
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v5);
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t sub_1D1417848(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, void (*a7)(unint64_t *))
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  NSString *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  os_log_type_t type;
  NSObject *log;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v57;
  const char *aSelector;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  sub_1D166D7CC();
  v13 = v60;
  v12 = v61;
  v66 = 0;
  v67 = MEMORY[0x1E0DEE9D8];
  v65 = 0;
  v14 = swift_allocObject();
  strcpy((char *)(v14 + 16), "uninitialized");
  *(_WORD *)(v14 + 30) = -4864;
  v57 = v13;
  sub_1D166D7CC();
  v15 = *(_QWORD *)(v67 + 16);
  if (v15)
  {
    v59 = v12;
    v51 = HIDWORD(a3);
    v52 = a3;
    v53 = a4;
    v54 = a5;
    v49 = HIDWORD(a5);
    v50 = HIDWORD(a4);
    v55 = a6;
    v48 = HIDWORD(a6);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v16 = (uint64_t *)(v67 + 40);
    v17 = &selRef_setStore_;
    aSelector = a2;
    do
    {
      v18 = *(v16 - 1);
      v19 = *v16;
      ObjectType = swift_getObjectType();
      if ((objc_msgSend((id)swift_unknownObjectRetain(), v17[110], a2) & 1) != 0)
      {
        v21 = v66;
        if (((*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v19 + 24))(v66, a2, ObjectType, v19) & 1) != 0)
        {
          v22 = v65;
          v23 = objc_allocWithZone((Class)IMDClientRequestContext);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          v24 = (void *)sub_1D166DAA8();
          swift_bridgeObjectRelease();
          v60 = __PAIR64__(v51, v52);
          v61 = __PAIR64__(v50, v53);
          v62 = v54;
          v63 = v49;
          v64 = __PAIR64__(v48, v55);
          v25 = objc_msgSend(v23, sel_initWithListenerID_auditToken_capabilities_replyProxy_, v24, &v60, v21, v22);

          a2 = aSelector;
          swift_unknownObjectRelease();
          v26 = (void *)objc_opt_self();
          objc_msgSend(v26, sel_setCurrentContext_, v25);
          v64 = ObjectType;
          v60 = v18;
          swift_unknownObjectRetain();
          a7(&v60);
          sub_1D141AC98((uint64_t)&v60);
          objc_msgSend(v26, sel_setCurrentContext_, 0);
          swift_unknownObjectRelease();

          v17 = &selRef_setStore_;
        }
        else
        {
          if (qword_1ED935748 != -1)
            swift_once();
          v27 = sub_1D166D964();
          sub_1D141AC1C(v27, (uint64_t)qword_1ED936548);
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain_n();
          v28 = sub_1D166D94C();
          v29 = sub_1D166DD6C();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = swift_slowAlloc();
            v47 = swift_slowAlloc();
            v60 = v47;
            *(_DWORD *)v30 = 136315906;
            log = v28;
            v31 = NSStringFromSelector(aSelector);
            type = v29;
            v32 = sub_1D166DACC();
            v34 = v33;

            *(_QWORD *)(v30 + 4) = sub_1D141BCB4(v32, v34, (uint64_t *)&v60);
            swift_bridgeObjectRelease();
            *(_WORD *)(v30 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v30 + 14) = sub_1D141BCB4(v57, v59, (uint64_t *)&v60);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v30 + 22) = 2080;
            v35 = (id)IMStringFromClientCapabilities();
            v36 = sub_1D166DACC();
            v38 = v37;

            *(_QWORD *)(v30 + 24) = sub_1D141BCB4(v36, v38, (uint64_t *)&v60);
            swift_bridgeObjectRelease();
            *(_WORD *)(v30 + 32) = 2080;
            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(ObjectType, v19);
            v39 = (id)IMStringFromClientCapabilities();
            v40 = sub_1D166DACC();
            v42 = v41;

            *(_QWORD *)(v30 + 34) = sub_1D141BCB4(v40, v42, (uint64_t *)&v60);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1D1413000, log, type, "Rejecting %s for client %s as it has insufficient capabilities %s, needs %s", (uint8_t *)v30, 0x2Au);
            swift_arrayDestroy();
            MEMORY[0x1D17EB0AC](v47, -1, -1);
            v43 = v30;
            a2 = aSelector;
            MEMORY[0x1D17EB0AC](v43, -1, -1);
            swift_unknownObjectRelease();

          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease_n();
          }
          v17 = &selRef_setStore_;
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1D1417DE0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  objc_msgSend(a3, "sortedArrayUsingComparator:", &unk_1E922C8A0);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKey:", v6, v5);

}

BOOL sub_1D1417E48(uint64_t a1, void *a2)
{
  return *(unsigned __int8 *)(a1 + 32) == objc_msgSend(a2, "isBlackholed");
}

uint64_t sub_1D1417EAC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;

  v5 = a2;
  v6 = a3;
  v7 = (void *)MEMORY[0x1D17EA968]();
  objc_msgSend(v5, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(void **)(a1 + 32);
  objc_msgSend(v8, "pinningIdentifier");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v10, "containsObject:", v11);

  v13 = *(void **)(a1 + 32);
  objc_msgSend(v9, "pinningIdentifier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v13, "containsObject:", v14);

  if (!v12 || v15)
  {
    if ((v12 | v15 ^ 1) == 1)
      v16 = objc_msgSend(v8, "compareBySequenceNumberAndDateDescending:", v9);
    else
      v16 = 1;
  }
  else
  {
    v16 = -1;
  }

  objc_autoreleasePoolPop(v7);
  return v16;
}

void IMDSynchronouslyPerformBlockOnMainQueueWithDependency(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD v4[4];
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v1 = a1;
  v2 = MEMORY[0x1E0C80D38];
  dispatch_assert_queue_not_V2(MEMORY[0x1E0C80D38]);
  v7[0] = 0;
  v7[1] = 0;
  pthread_main_thread_np();
  pthread_dependency_init_np();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1D141ACB8;
  v4[3] = &unk_1E922DA08;
  v5 = v1;
  v6 = v7;
  v3 = v1;
  dispatch_async(v2, v4);

  pthread_dependency_wait_np();
}

void sub_1D14186CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(*(id *)(a1 + 32), "repairInconsistentMergedChatsIfNecessary:", v5);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v16;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v16 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v11);
        v13 = (void *)MEMORY[0x1D17EA968](v8);
        v14 = (void *)objc_msgSend(v12, "copyDictionaryRepresentation:", 1, (_QWORD)v15);
        if (v14)
        {
          if (objc_msgSend(v6, "count"))
            objc_msgSend(v14, "setObject:forKeyedSubscript:", v6, CFSTR("mergedPinningIdentifiers"));
          objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "addObject:", v14);
        }

        objc_autoreleasePoolPop(v13);
        ++v11;
      }
      while (v9 != v11);
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v9 = v8;
    }
    while (v8);
  }

}

void sub_1D141A718(_Unwind_Exception *a1, int a2)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  id v6;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      v3 = OSLogHandleForIMFoundationCategory("Chat");
      v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = 138412290;
        v6 = v2;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "*********** Caught exception while fixing up chat participants on client connection %@ **********", (uint8_t *)&v5, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D141A6D0);
  }
  _Unwind_Resume(a1);
}

void sub_1D141A734()
{
  JUMPOUT(0x1D141A73CLL);
}

uint64_t sub_1D141A994()
{
  return swift_release();
}

uint64_t sub_1D141A99C()
{
  return swift_release();
}

uint64_t sub_1D141A9A4()
{
  return swift_release();
}

uint64_t sub_1D141A9AC()
{
  return swift_release();
}

uint64_t sub_1D141A9B4()
{
  return swift_release();
}

uint64_t sub_1D141A9BC()
{
  return swift_release();
}

uint64_t sub_1D141A9C4()
{
  return swift_release();
}

uint64_t sub_1D141A9CC()
{
  return swift_release();
}

uint64_t sub_1D141A9D4()
{
  return swift_release();
}

uint64_t sub_1D141A9DC()
{
  return swift_release();
}

uint64_t sub_1D141A9E4()
{
  return swift_release();
}

uint64_t sub_1D141A9EC()
{
  return swift_release();
}

uint64_t sub_1D141A9F4()
{
  return swift_release();
}

uint64_t sub_1D141A9FC()
{
  return swift_release();
}

uint64_t sub_1D141AA04()
{
  return swift_release();
}

uint64_t sub_1D141AA0C()
{
  return swift_release();
}

uint64_t sub_1D141AA14()
{
  return swift_release();
}

uint64_t sub_1D141AA1C()
{
  return swift_release();
}

uint64_t sub_1D141AA24()
{
  return swift_release();
}

uint64_t sub_1D141AA2C()
{
  return swift_release();
}

uint64_t sub_1D141AA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AA9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D141AB7C(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Clear failure badge notification", v5, 2u);
    }

  }
  objc_msgSend(a2, "clearFailureBadge");
  return objc_msgSend(a2, "checkIfUnexpectedlyLoggedOut");
}

uint64_t sub_1D141AC1C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

_QWORD *sub_1D141AC34(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1D141AC58(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17EAFC8]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D141AC98(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1D141ACB8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return pthread_dependency_fulfill_np();
}

void sub_1D141ACE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Not checking account for needed repair because fetching account status returned an error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "syncState");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_startBatchChange");
    objc_msgSend(v8, "setAccountStatus:", a2);
    objc_msgSend(v8, "setEligibleForTruthZone:", a2 == 4);
    objc_msgSend(*(id *)(a1 + 32), "_setEligibleToToggleMiCSwitch:", a2 == 4);
    if (objc_msgSend(*(id *)(a1 + 32), "shouldRepairAccountWithAccountStatus:securityLevel:", a2, *(_QWORD *)(a1 + 48)))
    {
      objc_msgSend(*(id *)(a1 + 32), "syncState");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "setErrorToAccountNeedsRepair");

    }
    objc_msgSend(v8, "_finishBatchChange");
    objc_msgSend(v8, "broadcastSyncState");

  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, uint64_t, void *))(v10 + 16))(v10, a2, v6);

}

void sub_1D141AED0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1D141AEE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4 && IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v9 = 138412290;
      v10 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "fetchCloudKitAccountStatusAndCheckForAccountNeedsRepairWithCompletion failed with error: %@", (uint8_t *)&v9, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "syncState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_startBatchChange");
  objc_msgSend(*(id *)(a1 + 32), "syncStateWillUpdate:", v7);
  objc_msgSend(v7, "_finishBatchChange");
  objc_msgSend(*(id *)(a1 + 32), "logHandle");
  v8 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_1D1665D50(v7);

  objc_msgSend(v7, "broadcastSyncState");
}

void sub_1D141B07C(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  int v11;
  __CFString *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = IMOSLoggingEnabled(v5);
  if (v5)
  {
    if (!v6)
      goto LABEL_16;
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      if (a2 > 4)
        v8 = 0;
      else
        v8 = off_1E9228548[a2];
      v11 = 138412546;
      v12 = v8;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Fetched cloud kit account status: %@, error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    if (!v6)
      goto LABEL_16;
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      if (a2 > 4)
        v9 = 0;
      else
        v9 = off_1E9228548[a2];
      v11 = 138412290;
      v12 = v9;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Fetched cloud kit account status: %@", (uint8_t *)&v11, 0xCu);
    }
  }

LABEL_16:
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    (*(void (**)(uint64_t, unint64_t, id))(v10 + 16))(v10, a2, v5);

}

uint64_t sub_1D141B220(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkIfUnexpectedlyLoggedOut");
}

BOOL sub_1D141B228(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t sub_1D141B264(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareBySequenceNumberAndDateDescending:");
}

BOOL sub_1D141B26C(uint64_t a1, void *a2)
{
  void *v3;
  _BOOL8 v4;

  objc_msgSend(a2, "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t sub_1D141B2A8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__clearFailureBadge);
}

void sub_1D141B2B0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Notification Center post badge number with error: [%@]", (uint8_t *)&v4, 0xCu);
    }

  }
}

uint64_t sub_1D141B380(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isActive");
}

uint64_t sub_1D141B388()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D141B3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_1D141B3E4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1D141B3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1D141AC58(&qword_1ED935840);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D141B43C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1D141B444(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1D141B444(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  sub_1D141AC34(a1, a1[3]);
  v3 = sub_1D166E1D4();
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v3);
  return swift_unknownObjectRelease();
}

unint64_t sub_1D141B48C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1D166E030();
  return sub_1D141B4BC(a1, v2);
}

unint64_t sub_1D141B4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1D1617BD4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1D17E8F4C](v9, a1);
      sub_1D1607C44((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1D141B580(unint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  unint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;

  v8 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_16:
    v2 = sub_1D166E15C();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1D17E8FD0](i, a1);
          v4 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v8;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          swift_retain();
          v4 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_13;
        }
        v5 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
        MEMORY[0x1E0C80A78](v5);
        sub_1D166D7CC();
        if (v7 == 1)
        {
          sub_1D166E0E4();
          sub_1D166E108();
          sub_1D166E114();
          sub_1D166E0F0();
        }
        else
        {
          swift_release();
        }
        if (v4 == v2)
          return v8;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1D141B768(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D166DF34();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1D15FC134(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1D166E0D8();
  if (!v8)
  {
    sub_1D166E144();
    __break(1u);
LABEL_17:
    result = sub_1D166E18C();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1D141BA80(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1D141AC58(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D141BABC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1D141AC58(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D141BB00(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1D141AC58(&qword_1ED9356A8);
  v2 = sub_1D166E180();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D141BABC(v6, (uint64_t)v15, &qword_1ED935690);
    result = sub_1D141B48C((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_1D141B3E4(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D141BC40()
{
  uint64_t v0;

  return sub_1D141BC48(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1D141BC48(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1D141BC68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1D141BC88(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1D141BCB4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1D141B768(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1D141B3A8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1D141B3A8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1D141AC98((uint64_t)v12);
  return v7;
}

uint64_t sub_1D141BD84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  swift_beginAccess();
  v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_1D141BDD4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = *v0;
  return swift_task_switch();
}

uint64_t sub_1D141BE4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  sub_1D141AC58((uint64_t *)&unk_1ED935780);
  MEMORY[0x1E0C80A78]();
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED935748 != -1)
    swift_once();
  v6 = sub_1D166D964();
  sub_1D141AC1C(v6, (uint64_t)qword_1ED936548);
  swift_retain();
  v7 = sub_1D166D94C();
  v8 = sub_1D166DD6C();
  if (os_log_type_enabled(v7, v8))
  {
    v30 = a1;
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v32 = v10;
    *(_DWORD *)v9 = 136315138;
    v29 = v9 + 4;
    v11 = v5;
    v13 = *(_QWORD *)(v2 + 112);
    v12 = *(_QWORD *)(v2 + 120);
    swift_bridgeObjectRetain();
    v14 = v13;
    v5 = v11;
    v31 = sub_1D141BCB4(v14, v12, &v32);
    sub_1D166DF28();
    swift_release();
    a1 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D1413000, v7, v8, "Incoming XPC connection for %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v10, -1, -1);
    MEMORY[0x1D17EB0AC](v9, -1, -1);

  }
  else
  {

    swift_release();
  }
  v15 = sub_1D1416C2C(a1);
  if ((v15 & 1) != 0)
  {
    v16 = sub_1D166DCB8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v5, 1, 1, v16);
    v17 = (_QWORD *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v2;
    v17[5] = a1;
    swift_retain();
    v18 = a1;
    sub_1D1641B5C((uint64_t)v5, (uint64_t)&unk_1EFC62380, (uint64_t)v17);
    swift_release();
  }
  else
  {
    swift_retain_n();
    v19 = a1;
    v20 = sub_1D166D94C();
    v21 = sub_1D166DD84();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v32 = v23;
      *(_DWORD *)v22 = 67109378;
      LODWORD(v31) = objc_msgSend(v19, sel_processIdentifier);
      sub_1D166DF28();

      *(_WORD *)(v22 + 8) = 2080;
      v24 = swift_bridgeObjectRetain();
      v25 = MEMORY[0x1D17E8B08](v24, MEMORY[0x1E0DEA968]);
      v27 = v26;
      swift_bridgeObjectRelease();
      v31 = sub_1D141BCB4(v25, v27, &v32);
      sub_1D166DF28();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D1413000, v20, v21, "Client %d does not have any of allowed entitlements %s, invalidating connection", (uint8_t *)v22, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v23, -1, -1);
      MEMORY[0x1D17EB0AC](v22, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  return v15 & 1;
}

uint64_t sub_1D141C488()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1D141C4D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v9 = v0[8];
  v8 = v0[9];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_1D141C488;
  return sub_1D1653980(v2, v3, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1D141C55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1D14170E4(a1, a2, a3, *(void **)(v3 + 16), *(void **)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t ClientRequestHandling.requiredEntitlements.getter()
{
  return MEMORY[0x1E0DEE9D8];
}

BOOL sub_1D141C574(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  char v13;

  v6 = a3[2](a2, (uint64_t)a3);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = a3[4];
    v9 = v6 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      v10 = v8(a2, (uint64_t)a3);
      MEMORY[0x1E0C80A78](v10);
      sub_1D166D7CC();
      swift_release();
      swift_bridgeObjectRelease();
      if (v13 != 1)
        break;
      v9 += 16;
      if (!--v7)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v11 = a3[1];
    return (v11(a2, (uint64_t)a3) & ~a1) == 0 || ((v11(a2, (uint64_t)a3) & 0xFFFFFFFFFBFFFFFBLL | 0x4000000) & ~a1) == 0;
  }
}

BOOL ClientRequestHandling.requirementsMet(by:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  return sub_1D141C574(a1, a3, a4);
}

uint64_t type metadata accessor for ClientConnection()
{
  return objc_opt_self();
}

uint64_t ClientConnection.set(id:capabilities:)()
{
  return sub_1D166D7CC();
}

uint64_t sub_1D141C758()
{
  uint64_t v0;

  return sub_1D1417848(*(_QWORD *)(v0 + 16), *(const char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void (**)(unint64_t *))(v0 + 64));
}

void sub_1D141CE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D141D11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D141DA10(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D141D9A8);
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(exc_buf);
}

__CFString *sub_1D142304C(unint64_t a1)
{
  if (a1 < 5)
    return off_1E9227CE0[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Invalid Ingestion State: %ld"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

uint64_t sub_1D1425500()
{
  void *v0;
  void *v1;
  char v2;
  void *v4;
  uint64_t v5;

  objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("read-receipt-tracking"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "BOOLValue");

  if ((v2 & 1) != 0)
    return 0;
  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isInternalInstall");

  return v5;
}

void sub_1D14257E4()
{
  IMDAccountController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDAccountController);
  v1 = (void *)qword_1ED935D60;
  qword_1ED935D60 = (uint64_t)v0;

}

BOOL sub_1D1428548(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  void *v6;

  v3 = a2;
  objc_msgSend(v3, "service");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 == *(void **)(a1 + 32))
  {
    objc_msgSend(v3, "loginID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v6, "caseInsensitiveCompare:", *(_QWORD *)(a1 + 40)) == 0;

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t sub_1D14288B0(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "supportsCapability:", *(_QWORD *)(a1 + 32));

  return v4;
}

BOOL sub_1D1428930(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "loginStatus") == 4;
}

BOOL sub_1D1428990(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "loginStatus") == 4;
}

BOOL sub_1D14289F0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "loginStatus") == 3;
}

BOOL sub_1D1428A50(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "loginStatus") == 3;
}

uint64_t sub_1D1428CFC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "session");
}

BOOL sub_1D1428D04(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  _BOOL8 v4;

  v2 = a2;
  v4 = 0;
  if (objc_msgSend(v2, "isActive"))
  {
    objc_msgSend(v2, "createSessionIfNecessary");
    objc_msgSend(v2, "session");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
      v4 = 1;
  }

  return v4;
}

void sub_1D142A67C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D142A634);
  }
  _Unwind_Resume(a1);
}

void sub_1D142AE34()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "IMDCKUtilities");
  v1 = (void *)qword_1ED935E90;
  qword_1ED935E90 = (uint64_t)v0;

}

void sub_1D142AFB8()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ED935D68;
  qword_1ED935D68 = (uint64_t)v0;

}

void sub_1D142B138(uint64_t a1, int a2)
{
  NSObject *v4;
  const __CFString *v5;
  NSObject *v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = CFSTR("NO");
      if (a2)
        v5 = CFSTR("YES");
      v7 = 138412290;
      v8 = v5;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "key roll pending check returned: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  if (a2 && IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "setErrorToKeyRollingError")))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7) = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Added key roll pending error to sync state", (uint8_t *)&v7, 2u);
    }

  }
}

uint64_t sub_1D142B654(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, a2 ^ 1u);
  return result;
}

void sub_1D142BCF4(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  const __CFString *v18;
  uint8_t buf[4];
  const __CFString *v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if (a2)
        v7 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v20 = v7;
      v21 = 2112;
      v22 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "isFirstSyncWithCompletion for checking account storage: %@, error: %@", buf, 0x16u);
    }

  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v8)
    {
      v9 = (void *)MEMORY[0x1E0CB35C8];
      objc_msgSend(v5, "domain");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v5, "code");
      v17 = *MEMORY[0x1E0CB2D50];
      v18 = CFSTR("Is first sync check failed");
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "errorWithDomain:code:userInfo:", v10, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, _QWORD, void *))(v8 + 16))(v8, 0, 0, v13);

    }
  }
  else if (a2)
  {
    if (v8)
    {
      +[IMDCKUtilities sharedInstance](IMDCKUtilities, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = sub_1D142BF44;
      v15[3] = &unk_1E9227FD0;
      v16 = *(id *)(a1 + 32);
      objc_msgSend(v14, "checkiCloudQuota:", v15);

    }
  }
  else if (v8)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v8 + 16))(*(_QWORD *)(a1 + 32), 0, 0, 0);
  }

}

uint64_t sub_1D142BF44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D142C0A4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v11 = 134218242;
      v12 = a2;
      v13 = 2112;
      v14 = (unint64_t)v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "User quota completion block return with available Quota %llu, and Error: %@", (uint8_t *)&v11, 0x16u);
    }

  }
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      (*(void (**)(uint64_t, _QWORD, _QWORD, id))(v7 + 16))(v7, 0, 0, v5);
  }
  else
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "currentStorageOnDevice");
    if (IMOSLoggingEnabled(v8))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v11 = 134218240;
        v12 = a2;
        v13 = 2048;
        v14 = v8;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Available Quota in bytes:  and message database size: %llu, %llu", (uint8_t *)&v11, 0x16u);
      }

    }
    v10 = *(_QWORD *)(a1 + 40);
    if (v8 <= a2)
    {
      if (v10)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v10 + 16))(v10, 0, 0, 0);
    }
    else if (v10)
    {
      (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD))(v10 + 16))(v10, v8 - a2, 0, 0);
    }
  }

}

void sub_1D142C56C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D142C4BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D142D760()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.private.IMDCKUtilitiesInternal", 0);
  v1 = (void *)qword_1ED936100;
  qword_1ED936100 = (uint64_t)v0;

}

void sub_1D142DAA4(uint64_t a1)
{
  void *v1;
  id v2;
  __int128 v3;
  _QWORD v4[4];
  __int128 v5;

  v1 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1D142DB20;
  v4[3] = &unk_1E9228058;
  v3 = *(_OWORD *)(a1 + 40);
  v2 = (id)v3;
  v5 = v3;
  objc_msgSend(v1, "fetchCloudKitAccountStatusWithCompletion:", v4);

}

void sub_1D142DB20(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  int v8;
  id v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138412546;
      v9 = v5;
      v10 = 2112;
      v11 = v7;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Return account validForCD with error: %@ accountStatus: %@", (uint8_t *)&v8, 0x16u);

    }
  }
  if (!v5)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 == 4;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D142DC98()
{
  objc_class *v0;
  id v1;
  void *v2;

  v0 = (objc_class *)MEMORY[0x1D17EA3EC](CFSTR("AKAppleIDAuthenticationController"), CFSTR("AuthKit"));
  if (v0)
  {
    v1 = objc_alloc_init(v0);
    v2 = (void *)qword_1ED935F08;
    qword_1ED935F08 = (uint64_t)v1;

  }
}

__CFString *NSStringFromIMDCKAccountStatus(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E9228548[a1];
}

void sub_1D142DDC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  __CFString *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  const __CFString *v19;
  const __CFString *v20;
  _BOOL4 v21;
  void *v22;
  void *v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  const __CFString *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = IMOSLoggingEnabled(v6);
  if ((_DWORD)v7)
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v35 = (uint64_t)v5;
      v36 = 2112;
      v37 = v6;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "accountInfoWithCompletionHandler called with accountInfo %@, error %@", buf, 0x16u);
    }

  }
  if (v6)
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v35 = (uint64_t)v6;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Checking for cloudkit account info failed with error: %@ ", buf, 0xCu);
      }

    }
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D397E8], "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "getBoolFromDomain:forKey:", *MEMORY[0x1E0D37950], CFSTR("ForceInvalidCredentials"));

    objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "isInternalInstall");

    if ((v13 & v11) != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "syncState");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "removeObjectFromAnalyticSyncDatesDictionaryForKey:", *MEMORY[0x1E0D37A28]);

      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    else
    {
      v15 = objc_msgSend(v5, "accountStatus");
      switch(v15)
      {
        case 0:
          objc_msgSend(*(id *)(a1 + 32), "_createAccountError:", CFSTR("failed fetching account status"));
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

          break;
        case 1:
        case 2:
        case 4:
          v16 = objc_msgSend(*(id *)(a1 + 32), "_checkEligibilityWithAccountInfo:", v5);
          v17 = objc_msgSend(v5, "accountPartition");
          if (IMOSLoggingEnabled(v17))
          {
            OSLogHandleForIMFoundationCategory();
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
            {
              v19 = CFSTR("NO");
              if (v16)
                v20 = CFSTR("YES");
              else
                v20 = CFSTR("NO");
              if (v17 == 2)
                v19 = CFSTR("YES");
              *(_DWORD *)buf = 138412546;
              v35 = (uint64_t)v20;
              v36 = 2112;
              v37 = v19;
              _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Checking for cloudkit eligibility returned: %@ inCarry: %@", buf, 0x16u);
            }

          }
          v21 = v17 == 2;
          objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v22;
          if (v21)
            v24 = &unk_1E9270F60;
          else
            v24 = &unk_1E9270F30;
          objc_msgSend(v22, "trackEvent:withCount:", *MEMORY[0x1E0D384F8], v24);

          v25 = objc_msgSend(v5, "hasValidCredentials");
          v26 = *(_QWORD *)(a1 + 40);
          if ((v25 & 1) != 0)
          {
            if (v16)
              v27 = 4;
            else
              v27 = 3;
            (*(void (**)(uint64_t, uint64_t, _QWORD))(v26 + 16))(v26, v27, 0);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD))(v26 + 16))(v26, 2, 0);
          }
          break;
        case 3:
          goto LABEL_10;
        default:
          if (IMOSLoggingEnabled(v15))
          {
            OSLogHandleForIMFoundationCategory();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              v30 = objc_msgSend(v5, "accountStatus");
              *(_DWORD *)buf = 134217984;
              v35 = v30;
              _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "Unrecognized account status %ld", buf, 0xCu);
            }

          }
          v31 = *(void **)(a1 + 32);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unrecognized account status %ld"), objc_msgSend(v5, "accountStatus"));
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v31, "_createAccountError:", v32);
          v33 = (void *)objc_claimAutoreleasedReturnValue();

          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
          break;
      }
    }
  }

}

void sub_1D142E28C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("ck-account-repair-override"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    v2 = objc_msgSend(v1, "BOOLValue");
    if ((_DWORD)v2)
      byte_1EFC63BD0 = 1;
  }
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if (byte_1EFC63BD0)
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "account needs repair override is: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

uint64_t sub_1D142ED2C()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("LSApplicationWorkspace"), CFSTR("CoreServices"));
  qword_1EFC63BD8 = result;
  return result;
}

void sub_1D142ED58(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend(v3, "response"))
  {
    v4 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "productBuildVersion");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringWithFormat:", CFSTR("TTR:%@ MoIC Sync Fail %@"), v6, *(_QWORD *)(a1 + 32));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("tap-to-radar://new?Title=%@&ComponentID=644010&ComponentName=Messages Frameworks&ComponentVersion=iOS&Classification=Serious Bug&Description=%@&Reproducibility=I Didn't Try"), v7, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringByAddingURLEscapes");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v10))
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "User tapped file a radar. Opening URL %@", buf, 0xCu);
      }

    }
    objc_msgSend((id)qword_1EFC63BD8, "defaultWorkspace");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "openURL:configuration:completionHandler:", v10, 0, 0);

  }
}

void sub_1D142F32C()
{
  objc_class *v0;
  id v1;
  void *v2;

  v0 = (objc_class *)MEMORY[0x1D17EA3EC](CFSTR("ACAccountStore"), CFSTR("AppleAccount"));
  if (v0)
  {
    v1 = objc_alloc_init(v0);
    v2 = (void *)qword_1ED935F20;
    qword_1ED935F20 = (uint64_t)v1;

  }
}

void sub_1D142F718(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;

  v3 = a3;
  v4 = IMOSLoggingEnabled(v3);
  if (v3)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v9 = 0;
        v6 = "Error saving enabling for kAccountDataclassMessages.";
        v7 = (uint8_t *)&v9;
LABEL_8:
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, v6, v7, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v8 = 0;
      v6 = "Success saving enabling for kAccountDataclassMessages.";
      v7 = (uint8_t *)&v8;
      goto LABEL_8;
    }
LABEL_9:

  }
}

void sub_1D142F888(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v10;
  id v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v6, "localizedDescription");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138412546;
      v11 = v5;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Found primary account: %@ error: %@", (uint8_t *)&v10, 0x16u);

    }
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);

}

void sub_1D142FA30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v7, "localizedDescription");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = 138412290;
        v15 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "fetchiCloudAccountPersonID returning with error: %@", (uint8_t *)&v14, 0xCu);

      }
    }
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      (*(void (**)(uint64_t, _QWORD, void *))(v10 + 16))(v10, 0, v7);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_personIdFromAccount:", v5);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v11))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v14 = 138412290;
        v15 = v11;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Found DSID: %@", (uint8_t *)&v14, 0xCu);
      }

    }
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
      (*(void (**)(uint64_t, void *, _QWORD))(v13 + 16))(v13, v11, 0);

  }
}

void sub_1D142FC80(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  NSObject *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    v8 = 0;
  }
  else
  {
    v6 = (id)objc_msgSend(v5, "isEnabledForDataclass:", *MEMORY[0x1E0C8F360]);
    v8 = (int)v6;
  }
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = CFSTR("NO");
      if (v8)
        v10 = CFSTR("YES");
      v11 = 138412290;
      v12 = v10;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Account has backup enabled: %@", (uint8_t *)&v11, 0xCu);
    }

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1D142FDC4()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", CFSTR("ck-sync-paused"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    v2 = objc_msgSend(v1, "BOOLValue");
    if ((_DWORD)v2)
      byte_1EFC63BE8 = 1;
  }
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if (byte_1EFC63BE8)
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Is syncing paused override: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1D1430890(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v3 = a2;
  v4 = objc_msgSend(v3, "response");
  v5 = IMOSLoggingEnabled(v4);
  if (v4)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "User chose to show pop up before sending logs", v9, 2u);
      }

    }
  }
  else if (v5)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "User chose to always auto send logs", buf, 2u);
    }

  }
  IMSetDomainIntForKey();
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(void))(v8 + 16))();

}

void *sub_1D1431644()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("PLLogRegisteredEvent", CFSTR("PowerLog"));
  off_1EFC63BF0 = result;
  return result;
}

void *sub_1D1431884()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("PLLogRegisteredEvent", CFSTR("PowerLog"));
  off_1EFC63C00 = result;
  return result;
}

void *sub_1D1431BB8()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("PLLogRegisteredEvent", CFSTR("PowerLog"));
  off_1EFC63C10 = result;
  return result;
}

void sub_1D1431FD8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1431EF0);
  }
  _Unwind_Resume(a1);
}

void sub_1D1432110(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  int v18;
  char v19;

  v5 = a2;
  v6 = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D143221C;
  v10[3] = &unk_1E9228378;
  v11 = v5;
  v12 = *(id *)(a1 + 32);
  v13 = v6;
  v7 = *(void **)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = v7;
  v19 = *(_BYTE *)(a1 + 76);
  v18 = *(_DWORD *)(a1 + 72);
  v17 = *(id *)(a1 + 64);
  v16 = *(id *)(a1 + 56);
  v8 = v6;
  v9 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v10);

}

void sub_1D143221C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  id v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  unsigned int v30;
  void *v31;
  void *v32;
  void *v33;
  _QWORD v35[4];
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  char v43;
  id v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = objc_msgSend(*(id *)(a1 + 32), "length");
  v2 = IMOSLoggingEnabled(v1);
  if (v1)
  {
    if (!v2)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(void **)(a1 + 32);
      v5 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v46 = v4;
      v47 = 2112;
      v48 = v5;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "<StartDeviceID> Device ID: %@ <EndDeviceID> logDumpGuid %@", buf, 0x16u);
    }
  }
  else
  {
    if (!v2)
      goto LABEL_10;
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v6 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v46 = v6;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "We didn't get a device ID back from cloudkit error: %@", buf, 0xCu);
    }
  }

LABEL_10:
  v7 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v7, "setDateFormat:", CFSTR("dd-MM-yyyy_HH:mm"));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringFromDate:", v8);
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "anySessionForServiceName:", *MEMORY[0x1E0D38F68]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 56), "deviceActiveString");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v10, "loginID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_msgSend(v10, "loginID");
    v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = CFSTR("Unknown");
  }
  if (*(_BYTE *)(a1 + 92))
    v14 = CFSTR("RestoreFailure");
  else
    v14 = CFSTR("_");
  objc_msgSend(v11, "stringWithFormat:", CFSTR("%@_MT_%@_%@_%@_%@_Messages"), v13, *(_QWORD *)(a1 + 64), v14, v33, v32);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)

  IMSafeTemporaryDirectory();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "path");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 92))
  {
    v17 = v16;
LABEL_26:
    objc_msgSend(*(id *)(a1 + 56), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 40), 0, 0, 0, 0, *(_QWORD *)(a1 + 64));
    objc_msgSend(MEMORY[0x1E0D398D8], "sharedInstance");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = *(_DWORD *)(a1 + 88);
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = sub_1D14327E0;
    v35[3] = &unk_1E9228350;
    v26 = v31;
    v27 = *(_QWORD *)(a1 + 56);
    v36 = v26;
    v37 = v27;
    v42 = *(id *)(a1 + 80);
    v38 = *(id *)(a1 + 40);
    v39 = *(id *)(a1 + 64);
    v40 = v10;
    v41 = *(id *)(a1 + 72);
    v43 = *(_BYTE *)(a1 + 92);
    objc_msgSend(v25, "dumpLogsToFolderAtPath:withFileName:lastHours:predicate:includeCKDebug:withCompletion:", v17, v26, v30, CFSTR("subsystem CONTAINS[cd] \"com.apple.messages\""), 1, v35);

    v20 = v36;
    goto LABEL_27;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/CKMessagesLogDump/"), v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = 0;
  v19 = objc_msgSend(v18, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v17, 1, 0, &v44);
  v20 = v44;

  v22 = IMOSLoggingEnabled(v21);
  if ((v19 & 1) != 0)
  {
    if (v22)
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v46 = v17;
        v47 = 2112;
        v48 = v24;
        _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "Succeeded creating dir at path %@ for logDumpGuid %@", buf, 0x16u);
      }

    }
    goto LABEL_26;
  }
  if (v22)
  {
    OSLogHandleForIMFoundationCategory();
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      v29 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v46 = v17;
      v47 = 2112;
      v48 = v20;
      v49 = 2112;
      v50 = v29;
      _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "Could not create dir at path %@, failed with error %@. Aborting log dump with logDumpGuid %@", buf, 0x20u);
    }

  }
LABEL_27:

}

void sub_1D14327E0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id *v16;
  id *v17;
  void *v18;
  uint64_t v19;
  _BOOL8 v20;
  _QWORD v21[5];
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  char v33;
  uint8_t buf[4];
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = IMOSLoggingEnabled(v6);
  if (v6)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v35 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Error occurred trying to log dump messages logs: %@", buf, 0xCu);
      }
LABEL_9:

    }
  }
  else if (v7)
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v35 = v5;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Succeeded logging messages log to file at path %@", buf, 0xCu);
    }
    goto LABEL_9;
  }
  if (IMGetDomainBoolForKey() && IMGetDomainIntForKey() == 1)
  {
    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 40), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 48), 1, 0, 0, 0, *(_QWORD *)(a1 + 56));
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 80);
      if (v14)
        (*(void (**)(void))(v14 + 16))();
      v15 = (_QWORD *)(a1 + 40);
      v16 = (id *)(a1 + 48);
      v17 = (id *)(a1 + 56);
      objc_msgSend(*(id *)(a1 + 40), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 48), 1, 1, 0, 0, *(_QWORD *)(a1 + 56));
      v18 = *(void **)(a1 + 64);
      v19 = *(_QWORD *)(a1 + 72);
      v20 = *(_BYTE *)(a1 + 88) == 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_1D1432CC4;
      v21[3] = &unk_1E9228300;
      v21[4] = *v15;
      v22 = *v16;
      v23 = *v17;
      objc_msgSend(v18, "sendLogDumpMessageAtFilePath:toRecipient:shouldDeleteFile:withCompletion:", v5, v19, v20, v21);

    }
  }
  else
  {
    IMSetDomainBoolForKey();
    v10 = *(void **)(a1 + 40);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = sub_1D1432B88;
    v24[3] = &unk_1E9228328;
    v25 = v6;
    v11 = *(id *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(void **)(a1 + 48);
    v32 = v11;
    v26 = v12;
    v27 = v13;
    v28 = *(id *)(a1 + 56);
    v29 = *(id *)(a1 + 64);
    v30 = v5;
    v31 = *(id *)(a1 + 72);
    v33 = *(_BYTE *)(a1 + 88);
    objc_msgSend(v10, "_showCKLogNotificationWithCompletion:", v24);

  }
}

void sub_1D1432B88(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  id v11;

  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 48), 1, 0, 0, 0, *(_QWORD *)(a1 + 56));
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
      (*(void (**)(void))(v2 + 16))();
    objc_msgSend(*(id *)(a1 + 40), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 48), 1, 1, 0, 0, *(_QWORD *)(a1 + 56));
    v3 = *(void **)(a1 + 64);
    v4 = *(_QWORD *)(a1 + 72);
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(_BYTE *)(a1 + 96) == 0;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[2] = sub_1D1432CA4;
    v9[3] = &unk_1E9228300;
    v7 = *(void **)(a1 + 48);
    v9[4] = *(_QWORD *)(a1 + 40);
    v8 = v6;
    v9[1] = 3221225472;
    v10 = v7;
    v11 = *(id *)(a1 + 56);
    objc_msgSend(v3, "sendLogDumpMessageAtFilePath:toRecipient:shouldDeleteFile:withCompletion:", v4, v5, v8, v9);

  }
}

uint64_t sub_1D1432CA4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 40), 1, 1, 1, a2, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D1432CC4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 40), 1, 1, 1, a2, *(_QWORD *)(a1 + 48));
}

void sub_1D1433704()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  off_1ED936470 = (uint64_t (*)(_QWORD))MEMORY[0x1D17EA3F8]("PCSReportKeyRollPending", CFSTR("ProtectedCloudStorage"));
  if (IMOSLoggingEnabled(off_1ED936470))
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1ED936470)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_1D1413000, v0, OS_LOG_TYPE_INFO, "Linked linkedPCSReportKeyRollPending ok: %@", (uint8_t *)&v2, 0xCu);
    }

  }
}

void sub_1D1433958(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1433970(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    if (*(_QWORD *)(result + 32))
    {
      *(_BYTE *)(v1 + 24) = 1;
      return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
    }
  }
  return result;
}

void sub_1D14339A4(uint64_t a1)
{
  char v2;
  id v3;
  __int128 v4;
  _QWORD block[4];
  __int128 v6;
  char v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "PCSKeyRollPending");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D1433A34;
  block[3] = &unk_1E9228410;
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v6 = v4;
  v7 = v2;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_1D1433A34(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    if (*(_QWORD *)(result + 32))
    {
      *(_BYTE *)(v1 + 24) = 1;
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), *(unsigned __int8 *)(result + 48));
    }
  }
  return result;
}

void sub_1D1433B48()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  off_1EFC63C20 = (uint64_t (*)(_QWORD))MEMORY[0x1D17EA3F8]("PCSReportManateeStatus", CFSTR("ProtectedCloudStorage"));
  if (IMOSLoggingEnabled(off_1EFC63C20))
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1EFC63C20)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_1D1413000, v0, OS_LOG_TYPE_INFO, "Linked linkedPCSReportManateeStatus ok: %@", (uint8_t *)&v2, 0xCu);
    }

  }
}

void sub_1D1433D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1433DB4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    if (*(_QWORD *)(result + 32))
    {
      *(_BYTE *)(v1 + 24) = 1;
      return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
    }
  }
  return result;
}

void sub_1D1433DE8(uint64_t a1)
{
  int v2;
  id v3;
  __int128 v4;
  _QWORD block[4];
  __int128 v6;
  int v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "PCSReportManateeStatus");
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D1433E78;
  block[3] = &unk_1E9228480;
  v4 = *(_OWORD *)(a1 + 40);
  v3 = (id)v4;
  v6 = v4;
  v7 = v2;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_1D1433E78(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
  if (!*(_BYTE *)(v1 + 24))
  {
    if (*(_QWORD *)(result + 32))
    {
      *(_BYTE *)(v1 + 24) = 1;
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), *(unsigned int *)(result + 48));
    }
  }
  return result;
}

void sub_1D1433EF0()
{
  void *v0;
  uint64_t v1;
  void *v2;

  v0 = (void *)MEMORY[0x1D17EA3EC](CFSTR("AKAccountManager"), CFSTR("AuthKit"));
  if (v0)
  {
    objc_msgSend(v0, "sharedInstance");
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)qword_1ED935F38;
    qword_1ED935F38 = v1;

  }
}

void sub_1D1434C20(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint8_t v8[16];

  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 == 4;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Not eligible for truth zone", v8, 2u);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1D1434D34()
{
  uint64_t result;

  result = IMGetDomainBoolForKey();
  byte_1EFC63C30 = result;
  return result;
}

void sub_1D1434EA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if ((_DWORD)a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCloudKitSyncingEnabled:", 1);
    +[IMDCKBackupController sharedInstance](IMDCKBackupController, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setICloudBackupsDisabled:", 0);

  }
  else
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Unable to request exit record when trying to disable all devices. Error: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "autoBugCaptureWithSubType:errorPayload:", CFSTR("DisableAllDevices"), v6);

  }
  IMSetDomainBoolForKey();
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v10, a2);

}

void sub_1D1435050()
{
  void **v0;
  void *v1;

  if (!qword_1EFC63C40)
  {
    v0 = (void **)MEMORY[0x1D17EA3F8]("AKAuthenticationSecurityLevelKey", CFSTR("AuthKit"));
    if (v0)
      v1 = *v0;
    else
      v1 = 0;
    objc_storeStrong((id *)&qword_1EFC63C40, v1);
  }
}

void sub_1D14350E0()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D342A0]);
  v1 = objc_msgSend(v0, "initWithService:", *MEMORY[0x1E0D34240]);
  v2 = (void *)qword_1ED9360E8;
  qword_1ED9360E8 = v1;

}

void sub_1D14357A0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_1D1435D98(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[7];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t v18[128];
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      *(_DWORD *)buf = 138412546;
      v20 = v7;
      v21 = 2048;
      v22 = objc_msgSend(a2, "count");
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "%@:Received a batch of %lu messages to process.", buf, 0x16u);
    }
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  v9 = result;
  if (result)
  {
    v10 = *(_QWORD *)v15;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v15 != v10)
          objc_enumerationMutation(a2);
        objc_msgSend(*(id *)(a1 + 40), "replayMessage:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v11++));
      }
      while (v9 != v11);
      result = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      v9 = result;
    }
    while (result);
  }
  if (a3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1D1435F64;
    v13[3] = &unk_1E92285D8;
    v12 = *(void **)(a1 + 40);
    v13[4] = *(_QWORD *)(a1 + 32);
    v13[5] = a2;
    v13[6] = a3;
    return objc_msgSend(v12, "enqueReplayMessageCallback:", v13);
  }
  return result;
}

uint64_t sub_1D1435F64(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v4 = objc_msgSend(*(id *)(a1 + 40), "count");
      v6 = 138412546;
      v7 = v3;
      v8 = 2048;
      v9 = v4;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "%@: Finished processing batch of %lu messages.", (uint8_t *)&v6, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_1D1436064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a3 + 16))(a3, MEMORY[0x1E0C9AA60]);
  return result;
}

uint64_t sub_1D14360D0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "service"), "internalName");
      v12 = 138412802;
      v13 = v5;
      v14 = 2112;
      v15 = v6;
      v16 = 2112;
      v17 = a2;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "%@: Finished sync task for %@ service. Error: %@", (uint8_t *)&v12, 0x20u);
    }
  }
  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count");
  v8 = *(_QWORD *)(a1 + 32);
  if (v7 == 1 && *(_QWORD *)(v8 + 32))
  {
    if (IMOSLoggingEnabled(1))
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v12 = 138412290;
        v13 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "%@: Finished Syncing all services for task", (uint8_t *)&v12, 0xCu);
      }
    }
    (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 16))();
    v8 = *(_QWORD *)(a1 + 32);
  }
  return objc_msgSend(*(id *)(v8 + 24), "removeObjectForKey:", objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "service"), "internalName"));
}

uint64_t sub_1D1436A7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 16))();
}

id sub_1D1436AA0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  objc_super v14;

  v4 = a3;
  v14.receiver = a1;
  v14.super_class = (Class)&off_1EFCA80F0;
  v5 = objc_msgSendSuper2(&v14, sel_init);
  if (v5)
  {
    objc_msgSend(v4, "chatIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setChatIdentifier:", v6);

    if (objc_msgSend(v4, "chatStyle"))
    {
      if (objc_msgSend(v4, "chatStyle") == 1)
        v7 = 45;
      else
        v7 = 43;
      objc_msgSend(v5, "setChatStyle:", v7);
    }
    objc_msgSend(v4, "senderLastAddressedHandle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setSenderLastAddressedHandle:", v8);

    objc_msgSend(v4, "senderLastAddressedSIMID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setSenderLastAddressedSIMID:", v10);

    objc_msgSend(v4, "lastUsedServiceName");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setLastUsedServiceName:", v11);

    objc_msgSend(v4, "serviceOfLastMessage");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setServiceOfLastMessage:", v12);

    objc_msgSend(v5, "setConversationWasDowngraded:", objc_msgSend(v4, "conversationWasDowngraded"));
    objc_msgSend(v5, "setHasConversationHistory:", objc_msgSend(v4, "hasConversationHistory"));
    objc_msgSend(v5, "setShouldForceServerStatusRefresh:", objc_msgSend(v4, "shouldForceServerStatusRefresh"));
    objc_msgSend(v5, "setForceMMS:", objc_msgSend(v4, "forceMMS"));
    objc_msgSend(v5, "setIsForPendingConversation:", objc_msgSend(v4, "isForPendingConversation"));
  }

  return v5;
}

void sub_1D1438384()
{
  IMPendingReplicatedMessageCache *v0;
  void *v1;

  v0 = objc_alloc_init(IMPendingReplicatedMessageCache);
  v1 = (void *)qword_1EFC63C50;
  qword_1EFC63C50 = (uint64_t)v0;

}

void sub_1D1438548(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  IMPendingReplicatedMessage *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t v25[128];
  uint8_t buf[4];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "pendingMessages");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3 && IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v27 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Attempting to cache pending replicated message %@ but one is already present", buf, 0xCu);
    }

  }
  v7 = objc_alloc_init(IMPendingReplicatedMessage);
  -[IMPendingReplicatedMessage setMessageGUID:](v7, "setMessageGUID:", *(_QWORD *)(a1 + 40));
  -[IMPendingReplicatedMessage setReplicatedFallbackGUIDs:](v7, "setReplicatedFallbackGUIDs:", *(_QWORD *)(a1 + 48));
  -[IMPendingReplicatedMessage setReleaseBlock:](v7, "setReleaseBlock:", *(_QWORD *)(a1 + 56));
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[IMPendingReplicatedMessage setDate:](v7, "setDate:", v8);

  objc_msgSend(*(id *)(a1 + 32), "pendingMessages");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v7, *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "replicatedFallbackHistory");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 40));

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = *(id *)(a1 + 48);
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v22;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v22 != v13)
          objc_enumerationMutation(v11);
        v15 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v14);
        objc_msgSend(*(id *)(a1 + 32), "pendingMessages", (_QWORD)v21);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "setObject:forKeyedSubscript:", v7, v15);

        objc_msgSend(*(id *)(a1 + 32), "replicatedFallbackHistory");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "setObject:forKey:", *(_QWORD *)(a1 + 40), v15);

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v12);
  }

  if (IMOSLoggingEnabled(v18))
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v27 = v20;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Caching pending replicated message %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "_enforceCacheLimit", (_QWORD)v21);
  objc_msgSend(*(id *)(a1 + 32), "_scheduleTimeout");

}

void sub_1D1438964(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void (**v10)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "pendingMessages");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = IMOSLoggingEnabled(v4);
  if (v3)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v19 = v7;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Releasing pending replicated message %@", buf, 0xCu);
      }

    }
    v8 = *(void **)(a1 + 32);
    objc_msgSend(v3, "messageGUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_removePendingMessageWithGUID:", v9);

    objc_msgSend(v3, "releaseBlock");
    v10 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1D1438B94;
    v16[3] = &unk_1E9228700;
    v17 = *(id *)(a1 + 64);
    ((void (**)(_QWORD, uint64_t, uint64_t, _QWORD *))v10)[2](v10, v11, v12, v16);

  }
  else
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        v19 = v14;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Attempted to release pending replicated message %@ but no message pending", buf, 0xCu);
      }

    }
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
      (*(void (**)(uint64_t, _QWORD))(v15 + 16))(v15, 0);
  }

}

uint64_t sub_1D1438B94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D1438C3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_removePendingMessageWithGUID:", *(_QWORD *)(a1 + 40));
}

void sub_1D1438D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1438D50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1438D60(uint64_t a1)
{

}

void sub_1D1438D68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "replicatedFallbackHistory");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D1439164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1439180(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  _QWORD block[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "queue");
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D14391F8;
  block[3] = &unk_1E92287A0;
  block[4] = WeakRetained;
  dispatch_async(v2, block);

}

uint64_t sub_1D14391F8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__enforceTimeout);
}

void sub_1D14394C8(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  double v5;
  double v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  objc_msgSend(v9, "date");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "timeIntervalSinceNow");
  v6 = v5;

  if (v6 < -7200.0)
  {
    v7 = *(void **)(a1 + 32);
    objc_msgSend(v9, "messageGUID");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v8);

  }
}

void sub_1D143C71C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_handleDeleteCommandWithMessageDictionary:", *(_QWORD *)(a1 + 40));
  v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    v3 = v4;
  }

}

void sub_1D143CAB8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "recoverChatsForCommandDictionary:", *(_QWORD *)(a1 + 40));
  v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    v3 = v4;
  }

}

void sub_1D143D2B4(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v3 = (void *)MEMORY[0x1E0C99D20];
  v4 = a2;
  objc_msgSend(v3, "arrayWithObjects:count:", &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "permanentlyDeletedRecoverableMessagesForChatsWithGUIDs:deletedChatGUIDs:", v5, v4, v6, v7);

}

void sub_1D143DE24(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint8_t v10[16];

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsIndex:", objc_msgSend(v3, "messagePartIndex")))
  {
    objc_msgSend(v3, "messagePartBody");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0D360F0], "database");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "messagePartBody");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "storeRecoverableMessagePartWithBody:forMessageWithGUID:deleteDate:", v7, v8, *(_QWORD *)(a1 + 48));

    }
    else if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Recently Deleted | Mardid: deleting message part: found no message-part body-text to store for recovery", v10, 2u);
      }

    }
  }

}

void sub_1D143E49C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  v5 = a2;
  +[IMDServiceController sharedController](IMDServiceController, "sharedController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "serviceWithName:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListenersForService:withBlackholeStatus:", v7, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "recoveredMessagesFromRecentlyDeletedForChatsWithGUIDs:", v9);

  }
}

uint64_t sub_1D143EB7C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "groupsMergeDisplayNames") & 1) != 0
    || (objc_msgSend(v3, "displayName"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = objc_msgSend(v4, "length"),
        v4,
        !v5))
  {
    v9 = 1;
  }
  else
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v3, "guid");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Rejecting chat %@ as it has a display name and service does not merge display names", (uint8_t *)&v11, 0xCu);

      }
    }
    v9 = 0;
  }

  return v9;
}

uint64_t sub_1D143F06C(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "guid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "containsObject:", v3);

  return v4;
}

void sub_1D143F0B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a3;
  v5 = a2;
  +[IMDServiceController sharedController](IMDServiceController, "sharedController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "serviceWithName:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListenersForService:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "historicalMessageGUIDsDeleted:chatGUIDs:queryID:", v9, 0, 0);

  }
}

void sub_1D143FFE8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1D144042C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14403B0);
  }
  _Unwind_Resume(a1);
}

IMDOneTimeCodeManager *sub_1D1440CB8()
{
  IMDOneTimeCodeManager *result;

  result = objc_alloc_init(IMDOneTimeCodeManager);
  qword_1ED935D70 = (uint64_t)result;
  return result;
}

void sub_1D1440DD4(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1D17EA968]();
  if (a2)
    objc_msgSend(a2, "setAutoDeletionPreference:", 1);
  objc_autoreleasePoolPop(v3);
}

void sub_1D1440E0C(uint64_t a1, void *a2)
{
  void *v3;

  v3 = (void *)MEMORY[0x1D17EA968]();
  if (a2)
    objc_msgSend(a2, "setAutoDeletionPreference:", 0);
  objc_autoreleasePoolPop(v3);
}

void sub_1D14413F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  _DWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v4)
  {
    v5 = OSLogHandleForIMFoundationCategory();
    v4 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if ((_DWORD)v4)
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Delete Verification Codes | Onboarding completed.", (uint8_t *)v14, 2u);
    }
  }
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2)
      {
        if (IMOSLoggingEnabled(v4))
        {
          v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            LOWORD(v14[0]) = 0;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Delete Verification Codes | Undefined response for onboarding. No action will be taken", (uint8_t *)v14, 2u);
          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled(v4))
        {
          v6 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
            LOWORD(v14[0]) = 0;
            _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Delete Verification Codes | Keeping auto-filled verification codes", (uint8_t *)v14, 2u);
          }
        }
        objc_msgSend(*(id *)(a1 + 32), "setAutoDeletionPreference:", 0);
      }
      return;
    }
    if (IMOSLoggingEnabled(v4))
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Delete Verification Codes | Moving auto-filled verification codes to Recently Deleted", (uint8_t *)v14, 2u);
      }
    }
    v9 = objc_msgSend(*(id *)(a1 + 32), "setAutoDeletionPreference:", 1);
    goto LABEL_20;
  }
  v7 = objc_msgSend(*(id *)(a1 + 32), "autoDeletionPreference");
  v8 = v7;
  v9 = IMOSLoggingEnabled(v7);
  if ((_DWORD)v9)
  {
    v10 = OSLogHandleForIMFoundationCategory();
    v9 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
    if ((_DWORD)v9)
    {
      v14[0] = 67109120;
      v14[1] = v8;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Delete Verification Codes | Onboarding already presented before. Reading current deletion preference: %{BOOL}d", (uint8_t *)v14, 8u);
    }
  }
  if (v8)
  {
LABEL_20:
    if (IMOSLoggingEnabled(v9))
    {
      v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14[0]) = 0;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Delete Verification Codes | Delete Verification Codes is enabled", (uint8_t *)v14, 2u);
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "moveOneTimeCodeToRecentlyDeleted:", *(_QWORD *)(a1 + 40));
  }
}

void sub_1D1441E0C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;

  objc_msgSend(*(id *)(a1 + 32), "setInteger:forKey:", 1, *MEMORY[0x1E0D38C20]);
  v4 = objc_msgSend(a2, "response");
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4 == 0);

}

uint64_t sub_1D14427CC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Timer fired to clear code with GUID: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "consumeCodeWithGuid:codeExpired:", *(_QWORD *)(a1 + 32), 1);
}

void sub_1D1443174(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D144312CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D1443458()
{
  uint64_t result;

  result = +[IMDSoundUtilities _installSystemSound:](IMDSoundUtilities, "_installSystemSound:", CFSTR("Sent Scheduled Message.caf"));
  dword_1EFC63C68 = result;
  return result;
}

__CFString *sub_1D14435A8(int a1)
{
  __CFString **v1;

  switch(a1)
  {
    case '#':
      v1 = &IMDRelayMessageDictionaryChatStyleRoom;
      break;
    case '-':
      v1 = &IMDRelayMessageDictionaryChatStyleInstantMessage;
      break;
    case '+':
      v1 = &IMDRelayMessageDictionaryChatStyleGroup;
      break;
    default:
      return (__CFString *)0;
  }
  return *v1;
}

void sub_1D144461C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1444580);
  }
  _Unwind_Resume(a1);
}

void sub_1D1444BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1444BD8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1444BE8(uint64_t a1)
{

}

void sub_1D1444BF0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

id sub_1D1445438(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v7 = 134217984;
      v8 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Setting timer to evaluate deferred message processing in: %f", (uint8_t *)&v7, 0xCu);
    }
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  if (v5)
  {
    objc_msgSend(v5, "invalidate");

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
    v4 = *(_QWORD *)(a1 + 32);
  }
  result = (id)objc_msgSend(MEMORY[0x1E0C99E88], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v4, sel__processingTimerFired, 0, 0, *(double *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = result;
  return result;
}

void sub_1D14459C0()
{
  IMDCollaborationNoticeTypeGenerator *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCollaborationNoticeTypeGenerator);
  v1 = (void *)qword_1EFC63C70;
  qword_1EFC63C70 = (uint64_t)v0;

}

void sub_1D1446214(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D1445EDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14462A4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  objc_msgSend(v8, "rootHash");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "rootHash");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "isEqual:", v10);

  if (v11)
  {
    v12 = objc_msgSend(*(id *)(a1 + 40), "containsObject:", v7);
    v13 = v12;
    v14 = IMOSLoggingEnabled(v12);
    if (v13)
    {
      if (v14)
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v18 = 138412290;
          v19 = v7;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Found a matching handle for the mentioned identity, and it is a valid alias: %@", (uint8_t *)&v18, 0xCu);
        }

      }
      v16 = 3;
    }
    else
    {
      if (v14)
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v18 = 138412290;
          v19 = v7;
          _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Found a matching handle for mentioned identity, but it does not match any of the user's aliases: %@", (uint8_t *)&v18, 0xCu);
        }

      }
      v16 = -1;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v16;
    *a4 = 1;
  }

}

void *sub_1D1447CB4()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("PKPeerPaymentMessageTypeFromDataURL", CFSTR("PassKitCore"));
  off_1EFC63C80 = result;
  return result;
}

void *sub_1D1447D58()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("PKPeerPaymentMessageDictionaryRepresentationFromDataURL", CFSTR("PassKitCore"));
  off_1EFC63C90 = result;
  return result;
}

uint64_t sub_1D1447F78()
{
  return IDSReportiMessageSpam();
}

void sub_1D1448024(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 32), "reportSpamMessage:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++));
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_1D1448564()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v1 = (void *)qword_1ED935F50;
  qword_1ED935F50 = (uint64_t)v0;

}

void sub_1D144858C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;

  v4 = a2;
  objc_msgSend(v4, "object");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

}

uint64_t sub_1D144865C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "object");
}

void sub_1D1448750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1448768(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1448778(uint64_t a1)
{

}

void sub_1D1448780(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  char v8;
  id v9;

  v9 = a2;
  objc_msgSend(v9, "service");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32)))
  {
    v8 = objc_msgSend(v9, "isReplicating");

    if ((v8 & 1) == 0)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }
  else
  {

  }
}

void sub_1D14494D0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1449480);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D144A180(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Forcing an invocation of networkMonitorDidUpdate 10 seconds after setting it up.", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "networkMonitorDidUpdate:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
}

uint64_t sub_1D144B484(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(result + 140))
    return MEMORY[0x1E0DE7D20](result, sel__processPotentialNetworkChange);
  return result;
}

uint64_t sub_1D144B4F4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(result + 140))
    return MEMORY[0x1E0DE7D20](result, sel__processPotentialNetworkChange);
  return result;
}

void sub_1D144CAB4(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v3 = (void *)MEMORY[0x1E0C99D20];
  v4 = a2;
  objc_msgSend(v3, "arrayWithObjects:count:", &v6, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "permanentlyDeletedRecoverableMessagesForChatsWithGUIDs:deletedChatGUIDs:", v5, v4, v6, v7);

}

void sub_1D144D8C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint8_t v10[16];

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsIndex:", objc_msgSend(v3, "messagePartIndex")))
  {
    objc_msgSend(v3, "messagePartBody");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      objc_msgSend(MEMORY[0x1E0D360F0], "database");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "messagePartBody");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "storeRecoverableMessagePartWithBody:forMessageWithGUID:deleteDate:", v7, v8, *(_QWORD *)(a1 + 48));

    }
    else if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Recently Deleted | Mardid: deleting message part: found no message-part body-text to store for recovery", v10, 2u);
      }

    }
  }

}

uint64_t sub_1D144E028(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "service");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "groupsMergeDisplayNames"))
  {

LABEL_9:
    v10 = 1;
    goto LABEL_10;
  }
  objc_msgSend(v3, "displayName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "length");

  if (!v6)
    goto LABEL_9;
  if (IMOSLoggingEnabled(v7))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v3, "guid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138412290;
      v13 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Rejecting chat %@ as it has a display name and service does not merge display names", (uint8_t *)&v12, 0xCu);

    }
  }
  v10 = 0;
LABEL_10:

  return v10;
}

void sub_1D144EDBC()
{
  IMDSpamController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDSpamController);
  v1 = (void *)qword_1ED935D78;
  qword_1ED935D78 = (uint64_t)v0;

}

void sub_1D144F0A0(uint64_t a1, uint64_t a2, int a3, void *a4, double a5)
{
  id v9;
  NSObject *v10;
  const __CFString *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const __CFString *v15;
  __int16 v16;
  double v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = CFSTR("NO");
      v12 = 134218754;
      v13 = a2;
      if (a3)
        v11 = CFSTR("YES");
      v14 = 2112;
      v15 = v11;
      v16 = 2048;
      v17 = a5;
      v18 = 2112;
      v19 = v9;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Server request returned status: %ld, abusive: %@, delay: %f, error: %@", (uint8_t *)&v12, 0x2Au);
    }

  }
  (*(void (**)(double))(*(_QWORD *)(a1 + 32) + 16))(a5);

}

void sub_1D144F4EC(uint64_t a1)
{
  id v2;

  IMComponentsFromChatGUID();
  v2 = 0;
  if (objc_msgSend(v2, "length"))
    objc_msgSend(*(id *)(a1 + 40), "detectSpam:chatGUID:", v2, *(_QWORD *)(a1 + 32));

}

void sub_1D144F994(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  id v9;
  int v10;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint8_t buf[4];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v9 = a4;
  v10 = IMOSLoggingEnabled(v9);
  if ((a2 == 6002 || a2 == 0) && v9 == 0)
  {
    if (v10)
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v17 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v31 = v17;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "detectSpam for Chat Identifier: %@", buf, 0xCu);
      }

    }
    v18 = *(void **)(a1 + 40);
    if (v18)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3, CFSTR("wasAutoDetectedForSpam"));
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v19;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "updateProperties:", v20);

      +[IMDBroadcastController sharedProvider](IMDBroadcastController, "sharedProvider");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "broadcasterForChatListenersUsingBlackholeRegistry:", objc_msgSend(*(id *)(a1 + 40), "isBlackholed"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "properties");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "chat:propertiesUpdated:", v23, v24);

      if ((_DWORD)a3)
      {
        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "databaseChatSpamUpdated:", *(_QWORD *)(a1 + 32));

      }
    }
    v26 = *(void **)(a1 + 48);
    if (a5 >= 0.0)
    {
      objc_msgSend(v26, "_updateSpamCheckTimerWithInterval:forChatGUID:", *(_QWORD *)(a1 + 32), a5);
    }
    else
    {
      objc_msgSend(v26, "chatGUIDToCountMap");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

    }
  }
  else
  {
    if (v10)
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v31 = v14;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "shouldn't retry again: %@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 48), "chatGUIDToCountMap");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "removeObjectForKey:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1D1450A14(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1450AA4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1450AB4(uint64_t a1)
{

}

uint64_t sub_1D1450ABC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "transferForGUID:", a2);
}

void sub_1D1450AC8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  __CFDictionary *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  const __CFString *v33;
  void *v34;
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  id v40;
  _QWORD v41[2];
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:", a3, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "string");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (_IMWillLog())
  {
    v32 = v7;
    _IMAlwaysLog();
  }
  if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0D362F8], v32))
  {
    v41[0] = 0;
    v41[1] = 0;
    objc_msgSend(*(id *)(a1 + 32), "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0D36430], a3, v41);
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (_IMWillLog())
    {
      v33 = v10;
      _IMAlwaysLog();
    }
    if (-[__CFString length](v10, "length", v33))
    {
      v11 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count");
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "addObject:", MEMORY[0x1E0C9AA70]);
      v12 = *(void **)(a1 + 40);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v11);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v13);

      objc_msgSend(*(id *)(a1 + 48), "addObject:", v10);
    }

  }
  else
  {
    if (_IMWillLog())
    {
      if (*(_BYTE *)(a1 + 72))
        v14 = CFSTR("YES");
      else
        v14 = CFSTR("NO");
      v33 = v14;
      _IMAlwaysLog();
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v34 = v8;
      v35 = v7;
      if (objc_msgSend(v8, "__im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider:", *(_QWORD *)(a1 + 56)))
      {
        objc_msgSend(v8, "__im_transferGUIDsInAttributedString");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "array");
        v16 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 56);
        v40 = 0;
        objc_msgSend(v8, "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:replacementTextProvider:removedTransferGUIDsOut:", v17, &unk_1E9228C60, &v40);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v40;
        objc_msgSend(v15, "string");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "dataUsingEncoding:", 4);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
        CFDictionarySetValue(v20, CFSTR("Type"), CFSTR("text/plain"));
        if (v19)
          CFDictionarySetValue(v20, CFSTR("Data"), v19);
        if (CFSTR("text"))
          CFDictionarySetValue(v20, CFSTR("Tag"), CFSTR("text"));
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("text_%d.txt"), objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count", v33));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21)
          CFDictionarySetValue(v20, CFSTR("Path"), v21);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "addObject:", v20);

      }
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v22 = v16;
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
      if (v23)
      {
        v24 = v23;
        v25 = *(_QWORD *)v37;
        v26 = MEMORY[0x1E0C9AA70];
        do
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v37 != v25)
              objc_enumerationMutation(v22);
            v28 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * i);
            v29 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count", v33);
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "addObject:", v26);
            v30 = *(void **)(a1 + 40);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v29);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "addObject:", v31);

            objc_msgSend(*(id *)(a1 + 48), "addObject:", v28);
          }
          v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
        }
        while (v24);
      }

      v8 = v34;
      v7 = v35;
    }
  }

}

const __CFString *sub_1D1450F38()
{
  return CFSTR("\uFFFD");
}

void sub_1D1450F44(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(a2, "guid");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "addObject:", MEMORY[0x1E0C9AA70]);
  v4 = *(void **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
}

void sub_1D1450FE8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, uint64_t a7)
{
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  const __CFString *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  int v32;
  void *v33;
  id v34;
  _BOOL4 v35;
  id v36;
  __CFDictionary *v37;
  void *v38;
  double v39;
  double v40;
  void *v41;
  int v42;
  int v43;
  int v44;
  __CFString *v45;
  __CFString **v46;
  __CFString *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  id v56;
  __CFString *v57;
  __CFString *v58;
  uint64_t v59;
  const __CFString *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  char v70;
  id v71;
  const __CFString *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  id v82;
  __CFString *v83;
  void *v84;
  id v85;
  void *v86;
  void *v87;
  void *v88;
  __CFString *v89;
  void *v90;
  void *value;
  id v92;
  id v93;
  id v94;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  if (_IMWillLog())
  {
    v15 = CFSTR("NO");
    if (a6)
      v15 = CFSTR("YES");
    v72 = v15;
    _IMAlwaysLog();
  }
  if (_IMWillLog())
  {
    v72 = v14;
    _IMAlwaysLog();
  }
  if (_IMWillLog())
  {
    v72 = v12;
    _IMAlwaysLog();
  }
  if (_IMWillLog())
  {
    v72 = v13;
    _IMAlwaysLog();
  }
  if (!a6)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 1;
    v73 = *(_QWORD *)(a1 + 56);
    _IMWarn();
    objc_msgSend(*(id *)(a1 + 64), "failTransfer:error:", *(_QWORD *)(a1 + 72), v14, v73, v14);
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "trackMMSTranscodeFailureWithReason:sourceFile:sizeLimits:lowQualityModeEnabled:", 2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

    goto LABEL_79;
  }
  -[__CFString __imFirstObject](v12, "__imFirstObject");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "path");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  -[__CFString __imFirstObject](v13, "__imFirstObject");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    -[__CFString firstObject](v12, "firstObject");
    v19 = objc_claimAutoreleasedReturnValue();
    if ((unint64_t)-[__CFString count](v12, "count") < 2)
    {
      v20 = 0;
    }
    else
    {
      -[__CFString objectAtIndex:](v12, "objectAtIndex:", 1);
      v20 = objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance", v72);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v75) = 0;
    v87 = (void *)v20;
    objc_msgSend(v23, "trackMMSTranscodeWithReason:sourceFile:highQualityFile:lowQualityFile:sizeLimits:transcoded:lowQualityModeEnabled:", 2, *(_QWORD *)(a1 + 32), v19, v20, *(_QWORD *)(a1 + 40), a7, v75);

    objc_msgSend(v17, "lastPathComponent");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "stringByDeletingPathExtension");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    v89 = v13;
    v90 = v18;
    v88 = (void *)v19;
    v86 = v25;
    if ((unint64_t)objc_msgSend(v25, "length") < 0xB)
    {
      v35 = 0;
    }
    else
    {
      if (_IMWillLog())
      {
        v76 = v25;
        _IMAlwaysLog();
      }
      objc_msgSend(v17, "stringByDeletingLastPathComponent", v76);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "substringToIndex:", 9);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "stringByAppendingPathComponent:", v27);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "pathExtension");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "stringByAppendingPathExtension:", v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      v31 = objc_msgSend(v30, "length");
      v32 = _IMWillLog();
      if (v31)
      {
        if (v32)
        {
          v76 = v30;
          v79 = v17;
          _IMAlwaysLog();
        }
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", v76, v79);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        v94 = 0;
        objc_msgSend(v33, "moveItemAtPath:toPath:error:", v17, v30, &v94);
        v34 = v94;

        v35 = v34 == 0;
        if (v34)
        {
          if (_IMWillLog())
          {
            v79 = v30;
            v82 = v34;
            v76 = v17;
            _IMAlwaysLog();
          }
        }
        else
        {
          v36 = v30;

          v17 = v36;
        }
        v18 = v90;

      }
      else
      {
        v18 = v90;
        if (v32)
          _IMAlwaysLog();
        v35 = 0;
      }

    }
    v37 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v18, "objectForKey:", *MEMORY[0x1E0D39CB0]);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "doubleValue");
    v40 = v39;

    objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "MIMETypeOfPath:", v17);
    value = (void *)objc_claimAutoreleasedReturnValue();

    v42 = UTTypeConformsTo(*(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E0CA5AC8]);
    v43 = UTTypeConformsTo(*(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E0CA5B90]);
    v44 = UTTypeConformsTo(*(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E0CA5AD8]);
    v45 = CFSTR("ref");
    if (v42)
    {
      v46 = SMILPieceAudioTag;
    }
    else
    {
      v46 = SMILPieceVideoTag;
      if (v43)
        v46 = SMILPieceImageTag;
      if (!(v43 | v44))
        goto LABEL_40;
    }
    v47 = *v46;

    v45 = v47;
LABEL_40:
    objc_msgSend(*(id *)(a1 + 56), "localPath", v76, v79, v82);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "lastPathComponent");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v49, "stringByDeletingPathExtension");
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    if (v35)
    {
      if (_IMWillLog())
      {
        v77 = v50;
        _IMAlwaysLog();
      }
      objc_msgSend(v17, "lastPathComponent", v77);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "stringByDeletingPathExtension");
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      if (_IMWillLog())
      {
        v77 = v17;
        v80 = v52;
        _IMAlwaysLog();
      }
    }
    else
    {
      v52 = v50;
    }
    objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager", v77, v80);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v93 = 0;
    objc_msgSend(v53, "attributesOfItemAtPath:error:", v17, &v93);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v85 = v93;

    v84 = v54;
    v55 = objc_msgSend(v54, "fileSize");
    objc_msgSend(v17, "pathExtension");
    v56 = (id)objc_claimAutoreleasedReturnValue();
    v57 = v12;
    v58 = v14;
    v59 = v55;
    if ((objc_msgSend(v56, "isEqualToString:", CFSTR("jpeg")) & 1) != 0)
      v60 = CFSTR("jpg");
    else
      v60 = (const __CFString *)v56;

    v83 = (__CFString *)v60;
    objc_msgSend(v52, "stringByAppendingPathExtension:", v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();

    if (value)
      CFDictionarySetValue(v37, CFSTR("Type"), value);
    v62 = (void *)v59;
    if (v45)
      CFDictionarySetValue(v37, CFSTR("Tag"), v45);
    v14 = v58;
    if (v17)
      CFDictionarySetValue(v37, CFSTR("Filename"), v17);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v40);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v57;
    if (v63)
      CFDictionarySetValue(v37, CFSTR("Duration"), v63);

    if (v61)
      CFDictionarySetValue(v37, CFSTR("Path"), v61);
    if (_IMWillLog())
      _IMAlwaysLog();
    if (_IMWillLog())
    {
      v78 = v17;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = *(void **)(a1 + 48);
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v45;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v61;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = value;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v62;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v37;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v37;
      v81 = *(_QWORD *)(a1 + 120);
      _IMAlwaysLog();
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "replaceObjectAtIndex:withObject:", *(_QWORD *)(a1 + 120), v37, v78, v81);
    objc_msgSend(*(id *)(a1 + 64), "transferForGUID:", *(_QWORD *)(a1 + 72));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 80), "guid");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "setMessageGUID:", v65);

    objc_msgSend(*(id *)(a1 + 64), "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 72), v62, v62);
    v66 = *(void **)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 56), "guid");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "startFinalizingTransfer:", v67);

    v13 = v89;
    v18 = v90;
    goto LABEL_78;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 24) = 1;
  v74 = *(_QWORD *)(a1 + 56);
  _IMWarn();
  objc_msgSend(*(id *)(a1 + 64), "failTransfer:error:", *(_QWORD *)(a1 + 72), v14, v74);
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "trackMMSTranscodeFailureWithReason:sourceFile:sizeLimits:lowQualityModeEnabled:", 2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

LABEL_78:
LABEL_79:
  if (*(_QWORD *)(a1 + 88))
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v69 = *(_QWORD *)(a1 + 88);
    v92 = 0;
    v70 = objc_msgSend(v68, "removeItemAtURL:error:", v69, &v92);
    v71 = v92;

    if ((v70 & 1) == 0 && _IMWillLog())
      _IMAlwaysLog();
  }
  else
  {
    v71 = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));

}

uint64_t sub_1D1451A70(uint64_t a1)
{
  void *v2;
  uint64_t result;

  if (_IMWillLog())
  {
    objc_msgSend(*(id *)(a1 + 32), "fileTransferGUIDs");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    _IMAlwaysLog();

  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, BOOL, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), 0);
  return result;
}

void sub_1D14521DC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D145214CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D1455D64()
{
  IMDBackwardCompatibilityMessageIdentifier *v0;
  void *v1;

  v0 = objc_alloc_init(IMDBackwardCompatibilityMessageIdentifier);
  v1 = (void *)qword_1EFC63CA0;
  qword_1EFC63CA0 = (uint64_t)v0;

}

void sub_1D14566EC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1456134);
  }
  _Unwind_Resume(a1);
}

void sub_1D1456D5C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D027B8], "readMessageStream");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "source");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D02700]), "initWithIDSHandle:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v3, "sendEvent:", v4);

  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138412290;
      v9 = v7;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Donating Read Message Event to Stream for %@", (uint8_t *)&v8, 0xCu);
    }

  }
}

__CFDictionary *sub_1D14581B8(uint64_t a1, void *a2)
{
  id v2;
  __CFDictionary *Mutable;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  __CFDictionary *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v2 = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  objc_msgSend(v2, "accessibilityStickerName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F10], v4);

  if (objc_msgSend(v2, "has_adamID"))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v2, "adamID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      v6 = v5;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F18], v5);

    }
  }
  objc_msgSend(v2, "bundleID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F30], v7);

  objc_msgSend(v2, "packName");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F20], v8);

  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (objc_msgSend(v2, "has_previewGenerationSizeHeight"))
    {
      v9 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v2, "previewGenerationSizeHeight");
      objc_msgSend(v9, "numberWithDouble:");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v10)
      {
        v11 = v10;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F50], v10);

      }
    }
    if (objc_msgSend(v2, "has_previewGenerationSizeWidth"))
    {
      v12 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v2, "previewGenerationSizeWidth");
      objc_msgSend(v12, "numberWithDouble:");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (v13)
      {
        v14 = v13;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F58], v13);

      }
    }
  }
  objc_msgSend(v2, "previewGenerationConstraints");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v15)
  {
    v16 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (objc_msgSend(v15, "has_maxPixelWidth"))
      {
        v17 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v15, "maxPixelWidth");
        objc_msgSend(v17, "numberWithDouble:");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        if (v18)
        {
          v19 = v18;
          CFDictionarySetValue(v16, CFSTR("mpw"), v18);

        }
      }
      if (objc_msgSend(v15, "has_minThumbSizeHeight"))
      {
        v20 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v15, "minThumbSizeHeight");
        objc_msgSend(v20, "numberWithDouble:");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21)
        {
          v22 = v21;
          CFDictionarySetValue(v16, CFSTR("mth"), v21);

        }
      }
      if (objc_msgSend(v15, "has_minThumbSizeWidth"))
      {
        v23 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v15, "minThumbSizeWidth");
        objc_msgSend(v23, "numberWithDouble:");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
        {
          v25 = v24;
          CFDictionarySetValue(v16, CFSTR("mtw"), v24);

        }
      }
      if (objc_msgSend(v15, "has_scale"))
      {
        v26 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(v15, "scale");
        objc_msgSend(v26, "numberWithDouble:");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        if (v27)
        {
          v28 = v27;
          CFDictionarySetValue(v16, CFSTR("s"), v27);

        }
      }
    }
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v15, "isSticker"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    if (v29)
      CFDictionarySetValue(v16, CFSTR("st"), v29);

    if (v16)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D37F48], v16);

  }
  return Mutable;
}

uint64_t sub_1D14590EC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "expectedFileSize");
  if (v6 == objc_msgSend(v5, "expectedFileSize"))
  {
    v7 = 0;
  }
  else
  {
    v8 = objc_msgSend(v4, "expectedFileSize");
    if (v8 < objc_msgSend(v5, "expectedFileSize"))
      v7 = 1;
    else
      v7 = -1;
  }

  return v7;
}

void sub_1D1459170(uint64_t a1, void *a2, uint64_t a3)
{
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  const void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = a2;
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("-%d"), a3);
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = &stru_1E92346B0;
  }
  objc_msgSend(CFSTR("mmcs-signature-hex"), "stringByAppendingString:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("mmcs-owner"), "stringByAppendingString:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("mmcs-url"), "stringByAppendingString:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("decryption-key"), "stringByAppendingString:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("file-size"), "stringByAppendingString:", v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "encryptionKey");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v9, v11);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v20, "expectedFileSize"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v10, v12);

  objc_msgSend(v20, "ownerID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v7, v13);

  objc_msgSend(v20, "signature");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v6, v14);

  objc_msgSend(v20, "attachmentURL");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "absoluteString");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v8, v16);

  v17 = *(const void **)(a1 + 40);
  if (v17)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("name"), v17);
  objc_msgSend(*(id *)(a1 + 48), "mimeType");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  if (v18)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("mime-type"), v18);

  objc_msgSend(*(id *)(a1 + 48), "utiType");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), CFSTR("uti-type"), v19);

}

void sub_1D1459FD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char isKindOfClass;
  void *v10;
  void *v11;
  void *v12;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  void *v15;
  int v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  void *v24;
  void *v25;
  const void *v26;
  void *v27;
  char v28;
  void *v29;
  __CFDictionary *v30;
  void *v31;
  const void *v32;
  void *v33;
  char v34;
  void *v35;
  __CFDictionary *v36;
  void *v37;
  const void *v38;
  void *v39;
  char v40;
  void *v41;
  __CFDictionary *v42;
  void *v43;
  const void *v44;
  void *v45;
  char v46;
  void *v47;
  __CFDictionary *v48;
  void *v49;
  const void *v50;
  void *v51;
  char v52;
  void *v53;
  __CFDictionary *v54;
  void *v55;
  const void *v56;
  void *v57;
  char v58;
  void *v59;
  __CFDictionary *v60;
  void *v61;
  void *v62;
  int v63;
  const void *v64;
  void *v65;
  char v66;
  void *v67;
  __CFDictionary *v68;
  void *v69;
  const void *v70;
  void *v71;
  char v72;
  __CFDictionary *v73;
  const void *v74;
  void *v75;
  char v76;
  __CFDictionary *v77;
  const void *v78;
  void *v79;
  char v80;
  __CFDictionary *v81;
  const void *v82;
  void *v83;
  char v84;
  __CFDictionary *v85;
  void *v86;
  int v87;
  const void *v88;
  void *v89;
  char v90;
  void *v91;
  __CFDictionary *v92;
  uint64_t v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  id v102;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint8_t buf[4];
  uint64_t v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v102 = a2;
  objc_msgSend(v102, "allKeys");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v5, "mutableCopy");

  v7 = *MEMORY[0x1E0D032E8];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D032E8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();

  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "_fileTransferMatchingAttribute:inFileTransfers:", v10, *(_QWORD *)(a1 + 32));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v11)
    {
      objc_msgSend(*(id *)(a1 + 64), "_fileTransferMatchingAttribute:inFileTransfers:", v10, *(_QWORD *)(a1 + 40));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v11)
      {
        objc_msgSend(*(id *)(a1 + 64), "fileTransferForBlastDoorFileTransferAttribute:fileTransferGUIDs:supportingStickerAttributes:", v10, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        if (v11)
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v11);
      }
    }
    objc_msgSend(v11, "guid");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = Mutable;
    if (v12)
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0D36430], v12);
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v15, "isAudioTranscriptionEnabled");

    if (v16)
    {
      objc_msgSend(v10, "attachmentSubtype");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "audioMessage");
      v18 = (void *)objc_claimAutoreleasedReturnValue();

      if (v18)
      {
        objc_msgSend(v18, "audioTranscription");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
          CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E0D37490], v19);

      }
    }
    if (objc_msgSend(v11, "isAdaptiveImageGlyph"))
      CFDictionarySetValue(v14, (const void *)*MEMORY[0x1E0D36408], MEMORY[0x1E0C9AAB0]);
    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v7, a3, a4);
    objc_msgSend(v6, "removeObject:", v7);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v14, a3, a4);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v12);

  }
  v20 = *MEMORY[0x1E0D032F0];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D032F0]);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v22 = objc_opt_isKindOfClass();

  if ((v22 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v20);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "_fileTransferMatchingAttribute:inFileTransfers:", v23, *(_QWORD *)(a1 + 32));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
      objc_msgSend(*(id *)(a1 + 64), "_fileTransferMatchingAttribute:inFileTransfers:", v23, *(_QWORD *)(a1 + 40));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v24)
      {
        objc_msgSend(*(id *)(a1 + 64), "fileTransferForBlastDoorFileTransferAttribute:fileTransferGUIDs:supportingStickerAttributes:", v23, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
          objc_msgSend(*(id *)(a1 + 40), "addObject:", v24);
      }
    }
    objc_msgSend(v24, "guid");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v20, a3, a4);
    objc_msgSend(v6, "removeObject:", v20);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v25);

  }
  v26 = (const void *)*MEMORY[0x1E0D36308];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D36308]);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v28 = objc_opt_isKindOfClass();

  if ((v28 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v26);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v29, "direction"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
      CFDictionarySetValue(v30, v26, v31);

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v26, a3, a4);
    objc_msgSend(v6, "removeObject:", v26);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v30, a3, a4);

  }
  v32 = (const void *)*MEMORY[0x1E0D366B8];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D366B8]);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v34 = objc_opt_isKindOfClass();

  if ((v34 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v32);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v35, "partNumber"));
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    if (v37)
      CFDictionarySetValue(v36, v32, v37);

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v32, a3, a4);
    objc_msgSend(v6, "removeObject:", v32);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v36, a3, a4);

  }
  v38 = (const void *)*MEMORY[0x1E0D36328];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D36328]);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v40 = objc_opt_isKindOfClass();

  if ((v40 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v38);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v41, "optionFlags"));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    if (v43)
      CFDictionarySetValue(v42, v38, v43);

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v38, a3, a4);
    objc_msgSend(v6, "removeObject:", v38);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v42, a3, a4);

  }
  v44 = (const void *)*MEMORY[0x1E0D36320];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D36320]);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v46 = objc_opt_isKindOfClass();

  if ((v46 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v44);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(v47, "breadcrumbText");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if (v49)
      CFDictionarySetValue(v48, v44, v49);

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v44, a3, a4);
    objc_msgSend(v6, "removeObject:", v44);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v48, a3, a4);

  }
  v50 = (const void *)*MEMORY[0x1E0D381F0];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D381F0]);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v52 = objc_opt_isKindOfClass();

  if ((v52 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v50);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(v53, "uri");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    if (v55)
      CFDictionarySetValue(v54, v50, v55);

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v50, a3, a4);
    objc_msgSend(v6, "removeObject:", v50);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v54, a3, a4);

  }
  v56 = (const void *)*MEMORY[0x1E0D365F0];
  objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D365F0]);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v58 = objc_opt_isKindOfClass();

  if ((v58 & 1) != 0)
  {
    objc_msgSend(v102, "objectForKeyedSubscript:", v56);
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    objc_msgSend(v59, "link");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    if (v61)
      CFDictionarySetValue(v60, v56, v61);

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v56, a3, a4);
    objc_msgSend(v6, "removeObject:", v56);
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v60, a3, a4);

  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = objc_msgSend(v62, "isExpressiveTextEnabled");

  if (v63)
  {
    v64 = (const void *)*MEMORY[0x1E0D393F0];
    objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D393F0]);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v66 = objc_opt_isKindOfClass();

    if ((v66 & 1) != 0)
    {
      objc_msgSend(v102, "objectForKeyedSubscript:", v64);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v67, "type"));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      if (v69)
        CFDictionarySetValue(v68, v64, v69);

      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v64, a3, a4);
      objc_msgSend(v6, "removeObject:", v64);
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v68, a3, a4);

    }
    v70 = (const void *)*MEMORY[0x1E0D393E8];
    objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D393E8]);
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v72 = objc_opt_isKindOfClass();

    if ((v72 & 1) != 0)
    {
      v73 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v73, v70, &unk_1E9270FC0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v70, a3, a4);
      objc_msgSend(v6, "removeObject:", v70);
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v73, a3, a4);

    }
    v74 = (const void *)*MEMORY[0x1E0D39420];
    objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D39420]);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v76 = objc_opt_isKindOfClass();

    if ((v76 & 1) != 0)
    {
      v77 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v77, v74, &unk_1E9270FC0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v74, a3, a4);
      objc_msgSend(v6, "removeObject:", v74);
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v77, a3, a4);

    }
    v78 = (const void *)*MEMORY[0x1E0D39440];
    objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D39440]);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v80 = objc_opt_isKindOfClass();

    if ((v80 & 1) != 0)
    {
      v81 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v81, v78, &unk_1E9270FC0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v78, a3, a4);
      objc_msgSend(v6, "removeObject:", v78);
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v81, a3, a4);

    }
    v82 = (const void *)*MEMORY[0x1E0D39428];
    objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D39428]);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v84 = objc_opt_isKindOfClass();

    if ((v84 & 1) != 0)
    {
      v85 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionarySetValue(v85, v82, &unk_1E9270FC0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v82, a3, a4);
      objc_msgSend(v6, "removeObject:", v82);
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v85, a3, a4);

    }
  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v86 = (void *)objc_claimAutoreleasedReturnValue();
  v87 = objc_msgSend(v86, "isRichLinkImprovementsEnabled");

  if (v87)
  {
    v88 = (const void *)*MEMORY[0x1E0D381A0];
    objc_msgSend(v102, "objectForKeyedSubscript:", *MEMORY[0x1E0D381A0]);
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    v90 = objc_opt_isKindOfClass();

    if ((v90 & 1) != 0)
    {
      objc_msgSend(v102, "objectForKeyedSubscript:", v88);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      v92 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v93 = objc_msgSend(v91, "isRichLink");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v93);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      if (v94)
        CFDictionarySetValue(v92, v88, v94);

      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v88, a3, a4);
      objc_msgSend(v6, "removeObject:", v88);
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v92, a3, a4);

    }
  }
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v95 = v6;
  v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v105, v111, 16);
  v97 = v96;
  if (v96)
  {
    v98 = *(_QWORD *)v106;
    do
    {
      v99 = 0;
      do
      {
        if (*(_QWORD *)v106 != v98)
          objc_enumerationMutation(v95);
        v100 = *(_QWORD *)(*((_QWORD *)&v105 + 1) + 8 * v99);
        if (IMOSLoggingEnabled(v96))
        {
          OSLogHandleForIMFoundationCategory();
          v101 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v110 = v100;
            _os_log_impl(&dword_1D1413000, v101, OS_LOG_TYPE_INFO, "<WARNING> Unhandled attribute, removing it: %@", buf, 0xCu);
          }

        }
        v96 = objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v100, a3, a4);
        ++v99;
      }
      while (v97 != v99);
      v96 = objc_msgSend(v95, "countByEnumeratingWithState:objects:count:", &v105, v111, 16);
      v97 = v96;
    }
    while (v96);
  }

}

uint64_t sub_1D145B838(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  int v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "toIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5 ^ 1u;
}

uint64_t sub_1D145BEC4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  int v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "toIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5 ^ 1u;
}

void sub_1D145C6CC()
{
  IMDCKExitManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKExitManager);
  v1 = (void *)qword_1ED935D80;
  qword_1ED935D80 = (uint64_t)v0;

}

void sub_1D145C894(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "createSubscriptionIfNeededOnDeDupeZoneForSubscription:recordType:completionBlock:", CFSTR("ExitRecordKeyManateeZoneSubscription"), CFSTR("Exit"), 0);

}

void sub_1D145D02C(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[5];
  id v17;
  id v18;
  uint8_t buf[16];
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1[4], "_saltZoneCreated");
  if ((_DWORD)v2)
  {
    v3 = objc_msgSend(a1[4], "_subscriptionCreated");
    if ((v3 & 1) == 0 && IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "We were not able to create the subscription, we'll still try to write the exit record as we'll retry updating the subscription on imagent launch", buf, 2u);
      }

    }
    v5 = objc_alloc(MEMORY[0x1E0C95048]);
    objc_msgSend(a1[4], "exitRecordID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v5, "initWithRecordType:recordID:", CFSTR("Exit"), v6);

    objc_msgSend(v7, "setObject:forKey:", a1[5], CFSTR("CloudKitExitOnDate"));
    v8 = objc_alloc(MEMORY[0x1E0C94F10]);
    v20[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(v8, "initWithRecordsToSave:recordIDsToDelete:", v9, 0);

    objc_msgSend(a1[4], "exitConfiguration");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setConfiguration:", v11);

    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1D145D374;
    v16[3] = &unk_1E92290D0;
    v16[4] = a1[4];
    v17 = a1[5];
    v18 = a1[6];
    if (IMOSLoggingEnabled(objc_msgSend(v10, "setModifyRecordsCompletionBlock:", v16)))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "writeExitRecordWithDate scheduling opperation", buf, 2u);
      }

    }
    objc_msgSend(a1[4], "_scheduleOperation:", v10);

    goto LABEL_18;
  }
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "******* Failed writeExitRecordWithDate salt zone was not present *********", buf, 2u);
    }

  }
  if (a1[6])
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1D145D524;
    v14[3] = &unk_1E9228700;
    v15 = a1[6];
    dispatch_async(MEMORY[0x1E0C80D38], v14);
    v7 = v15;
LABEL_18:

  }
}

void sub_1D145D374(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "writeExitRecordWithDate returned with error: %@", buf, 0xCu);
    }

  }
  if (!v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "setExitRecordDate:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setErrorFetchingExitDate:", 0);
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1D145D500;
  v13[3] = &unk_1E92290A8;
  v11 = *(id *)(a1 + 48);
  v14 = v9;
  v15 = v11;
  v12 = v9;
  dispatch_async(MEMORY[0x1E0C80D38], v13);

}

uint64_t sub_1D145D500(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, *(_QWORD *)(a1 + 32) == 0);
  return result;
}

void sub_1D145D524(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.Messages.IMDCKExitManagerErrorDomain"), 1, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

}

void sub_1D145D8C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  _BYTE v15[22];
  __int16 v16;
  const __CFString *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = objc_msgSend(*(id *)(a1 + 32), "fetchedExitDateOnLaunch");
      objc_msgSend(*(id *)(a1 + 32), "errorFetchingExitDate");
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = (void *)v9;
      v11 = CFSTR("NO");
      *(_DWORD *)v15 = 138413058;
      *(_QWORD *)&v15[4] = v5;
      *(_WORD *)&v15[12] = 2112;
      if (v8)
        v11 = CFSTR("YES");
      *(_QWORD *)&v15[14] = v6;
      v16 = 2112;
      v17 = v11;
      v18 = 2112;
      v19 = v9;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Updating our exit date to %@  with error %@. fetchedExitDateOnLaunch [%@] or previous errorFetchingDate [%@]", v15, 0x2Au);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setFetchedExitDateOnLaunch:", 1, *(_OWORD *)v15);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "exitRecordDate");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "errorFetchingExitDate");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void *, void *))(v12 + 16))(v12, v13, v14);

  }
}

void sub_1D145DA68(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  id v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "exitRecordDate");
      v3 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "errorFetchingExitDate");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138412546;
      v9 = v3;
      v10 = 2112;
      v11 = v4;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Dispatching back to main queue exitDate: %@ error: %@", (uint8_t *)&v8, 0x16u);

    }
  }
  v5 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "exitRecordDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "errorFetchingExitDate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);

}

void sub_1D145DC84(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void *, void *);
  void *v12;
  uint64_t v13;
  id v14;
  uint8_t buf[4];
  void *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 1)))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Calling _fetchExitRecordDateWithCompletion", buf, 2u);
    }

  }
  v3 = objc_alloc(MEMORY[0x1E0C94E18]);
  objc_msgSend(*(id *)(a1 + 32), "exitRecordID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v17[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v3, "initWithRecordIDs:", v5);

  objc_msgSend(*(id *)(a1 + 32), "exitConfiguration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setConfiguration:", v7);

  v9 = MEMORY[0x1E0C809B0];
  v10 = 3221225472;
  v11 = sub_1D145DEB0;
  v12 = &unk_1E9229198;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(id *)(a1 + 40);
  if (IMOSLoggingEnabled(objc_msgSend(v6, "setFetchRecordsCompletionBlock:", &v9)))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v6;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "_fetchExitRecordDateWithCompletion scheduling opperation %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "_scheduleOperation:", v6, v9, v10, v11, v12, v13);

}

void sub_1D145DEB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  id *v10;
  void *v11;
  int v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  _QWORD block[4];
  id v26;
  uint8_t buf[4];
  id v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = IMOSLoggingEnabled(v6);
  v8 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v28 = v6;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "** Error fetching exit record %@", buf, 0xCu);
      }

    }
    v10 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
    if (objc_msgSend(v6, "code") == 2)
    {
      objc_msgSend(*v10, "errorAnalyzer");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "CKPartialError:onlyHasErrorCodes:", v6, &unk_1E92718B0);

      if (v12)
      {

        v13 = 0;
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Done fetching exit record successfully", buf, 2u);
      }

    }
    v10 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
  }
  objc_msgSend(*v10, "exitRecordID");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKeyedSubscript:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v16, "valueForKey:", CFSTR("CloudKitExitOnDate"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    block[0] = v8;
    block[1] = 3221225472;
    block[2] = sub_1D145E268;
    block[3] = &unk_1E92287A0;
    v17 = v6;
    v26 = v17;
    dispatch_async(MEMORY[0x1E0C80D38], block);
    v18 = v26;
    goto LABEL_23;
  }
LABEL_16:
  objc_msgSend(*v10, "exitRecordDate");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*v10, "setExitRecordDate:", v13);
  v19 = objc_msgSend(v13, "isEqualToDate:", v18);
  if ((v19 & 1) == 0)
  {
    if (IMOSLoggingEnabled(v19))
    {
      OSLogHandleForIMFoundationCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v28 = v18;
        v29 = 2112;
        v30 = v13;
        _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Exit date has been modified from %@ to %@, attempting to toggle icloud settings toggle", buf, 0x16u);
      }

    }
    objc_msgSend(*v10, "_evalToggleiCloudSettingsSwitch");
  }
  v17 = 0;
LABEL_23:

  objc_msgSend(*(id *)(a1 + 32), "setErrorFetchingExitDate:", v17);
  if (*(_QWORD *)(a1 + 40))
  {
    v21[0] = v8;
    v21[1] = 3221225472;
    v21[2] = sub_1D145E35C;
    v21[3] = &unk_1E9229170;
    v24 = *(id *)(a1 + 40);
    v22 = v13;
    v23 = v17;
    dispatch_async(MEMORY[0x1E0C80D38], v21);

  }
}

void sub_1D145E268(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v5 = 138412290;
      v6 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Unable to fetch exit zone record Error: %@", (uint8_t *)&v5, 0xCu);
    }

  }
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "autoBugCaptureWithSubType:errorPayload:", CFSTR("ExitRecord"), *(_QWORD *)(a1 + 32));

}

uint64_t sub_1D145E35C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1D145E474(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint8_t v8[16];
  _QWORD v9[5];
  id v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C94F10]);
  objc_msgSend(*(id *)(a1 + 32), "exitRecordID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v2, "initWithRecordsToSave:recordIDsToDelete:", 0, v4);

  objc_msgSend(v5, "setAtomic:", 1);
  objc_msgSend(v5, "setSavePolicy:", 2);
  objc_msgSend(*(id *)(a1 + 32), "exitConfiguration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setConfiguration:", v6);

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D145E63C;
  v9[3] = &unk_1E92291C0;
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  if (IMOSLoggingEnabled(objc_msgSend(v5, "setModifyRecordsCompletionBlock:", v9)))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "deleteExitRecordWithCompletion scheduling opperation", v8, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "_scheduleOperation:", v5);

}

void sub_1D145E63C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  NSObject *v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v9)
  {
    v9 = (id)objc_msgSend(v9, "code");
    if (v9 == (id)2)
    {
      objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "CKPartialError:onlyHasErrorCodes:", v10, &unk_1E92718C8);

      if (v12)
      {

        v10 = 0;
      }
    }
  }
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v10;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "deleteExitRecordWithCompletion returned with error: %@", buf, 0xCu);
    }

  }
  if (!v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "setExitRecordDate:", 0);
    objc_msgSend(*(id *)(a1 + 32), "setErrorFetchingExitDate:", 0);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1D145E814;
  v16[3] = &unk_1E92290A8;
  v14 = *(id *)(a1 + 40);
  v17 = v10;
  v18 = v14;
  v15 = v10;
  dispatch_async(MEMORY[0x1E0C80D38], v16);

}

uint64_t sub_1D145E814(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, *(_QWORD *)(a1 + 32) == 0);
  return result;
}

void sub_1D145EDE8(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating salt zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D145F118(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating exit zone subscription %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D145F5EC(uint64_t a1, int a2, void *a3)
{
  id v4;
  NSObject *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (a2)
        v6 = CFSTR("YES");
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v4;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Wrote last sync date to CK first time, success %@, error %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_1D145F8C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "errorIndicatesZoneNotCreated:", v4);

  if (v6)
  {

    v4 = 0;
  }
  if (IMOSLoggingEnabled(v7))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = 138412546;
      v11 = v9;
      v12 = 2112;
      v13 = v4;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Submitted metric with opGroupName %@ Error %@", (uint8_t *)&v10, 0x16u);
    }

  }
}

void sub_1D145FB68(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating analytic zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D145FE98(id *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  _QWORD block[5];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(a1[4], "errorAnalyzer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "errorIndicatesZoneNotCreated:", v4);

  if (v6)
  {
    objc_msgSend(a1[4], "ckQueue");
    v8 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D14600D4;
    block[3] = &unk_1E9229280;
    block[4] = a1[4];
    v16 = a1[5];
    v17 = a1[6];
    dispatch_async(v8, block);

  }
  else
  {
    v9 = IMOSLoggingEnabled(v7);
    if ((_DWORD)v9)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v12 = a1[5];
        v11 = a1[6];
        *(_DWORD *)buf = 138412546;
        v19 = v11;
        v20 = 2112;
        v21 = v12;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Submitted metric with opName %@, dict: %@", buf, 0x16u);
      }

    }
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(a1[5], "objectForKeyedSubscript:", CFSTR("syncErrors"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v19 = v14;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Reporting errors: %@", buf, 0xCu);

      }
    }
  }

}

void sub_1D14600D4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Analytic zone does not exist, so creating it before resubmitting metric.", buf, 2u);
    }

  }
  v3 = objc_msgSend(*(id *)(a1 + 32), "_analyticZoneCreated");
  v4 = v3;
  v5 = IMOSLoggingEnabled(v3);
  if (v4)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Successfully created analytic zone so trying to submit metric again.", buf, 2u);
      }

    }
    v7 = *(void **)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(a1 + 48);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1D14602C0;
    v11[3] = &unk_1E9229258;
    v11[4] = v7;
    v12 = v9;
    v13 = *(id *)(a1 + 40);
    objc_msgSend(v7, "submitCloudKitAnalyticWithDictionary:operationGroupName:completion:", v8, v12, v11);

  }
  else if (v5)
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Failed to create analytic zone.", buf, 2u);
    }

  }
}

void sub_1D14602C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "errorIndicatesZoneNotCreated:", v4);

  v8 = IMOSLoggingEnabled(v7);
  if (v6)
  {
    if ((_DWORD)v8)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Issue, we created the zone and we got back same error again.", (uint8_t *)&v15, 2u);
      }

    }
  }
  else
  {
    if ((_DWORD)v8)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(void **)(a1 + 40);
        v12 = *(_QWORD *)(a1 + 48);
        v15 = 138412546;
        v16 = v11;
        v17 = 2112;
        v18 = v12;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Submitted metric with opName %@, dict: %@", (uint8_t *)&v15, 0x16u);
      }

    }
    if (IMOSLoggingEnabled(v8))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", CFSTR("syncErrors"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138412290;
        v16 = v14;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Reporting errors: %@", (uint8_t *)&v15, 0xCu);

      }
    }
  }

}

void sub_1D1460488(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1460454);
  }
  _Unwind_Resume(a1);
}

void sub_1D1460798(_QWORD *a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *, void *, void *);
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  char v19;
  uint8_t buf[4];
  void *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C94F10]);
  v22[0] = a1[4];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithRecordsToSave:recordIDsToDelete:", v3, 0);

  v5 = objc_alloc_init(MEMORY[0x1E0C94F80]);
  objc_msgSend(v5, "setAllowsCellularAccess:", 1);
  objc_msgSend(v5, "setQualityOfService:", 17);
  v6 = objc_alloc_init(MEMORY[0x1E0C94F88]);
  objc_msgSend(v6, "setName:", a1[5]);
  objc_msgSend(v4, "setSavePolicy:", 2);
  objc_msgSend(v4, "setGroup:", v6);
  objc_msgSend(v4, "setConfiguration:", v5);
  objc_msgSend(v4, "operationID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled(v7))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v7;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Trying to submit CK metric operation with ID %@", buf, 0xCu);
    }

  }
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = sub_1D14609C0;
  v15 = &unk_1E92292A8;
  v10 = a1[6];
  v9 = a1 + 6;
  v19 = *((_BYTE *)v9 + 16);
  v16 = v10;
  v17 = v7;
  v18 = (id)v9[1];
  v11 = v7;
  objc_msgSend(v4, "setModifyRecordsCompletionBlock:", &v12);
  objc_msgSend((id)*v9, "_scheduleMetricOperation:", v4, v12, v13, v14, v15, v16);

}

void sub_1D14609C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  const __CFString *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  const __CFString *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "CKPartialError:onlyHasErrorCodes:", v10, &unk_1E92718E0);

    if (v12)
    {

      v10 = 0;
    }
  }
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(a1 + 56))
        v15 = CFSTR("YES");
      else
        v15 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      v20 = v14;
      v21 = 2112;
      v22 = v15;
      v23 = 2112;
      v24 = v10;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Completion called for submittion metric operation with ID %@. ignoreZoneNotFoundError %@ OperationError %@", buf, 0x20u);
    }

  }
  if (*(_QWORD *)(a1 + 48))
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1D1460BA4;
    v16[3] = &unk_1E92290A8;
    v18 = *(id *)(a1 + 48);
    v17 = v10;
    dispatch_async(MEMORY[0x1E0C80D38], v16);

  }
}

uint64_t sub_1D1460BA4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32) == 0);
}

void sub_1D1461554(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C95098]);
  v3 = (void *)objc_msgSend(v2, "initWithZoneName:ownerName:", CFSTR("Messages_Enabled"), *MEMORY[0x1E0C94730]);
  v4 = objc_alloc(MEMORY[0x1E0C94E08]);
  v13[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v13, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithRecordZoneIDs:", v5);

  v7 = objc_alloc_init(MEMORY[0x1E0C94F80]);
  objc_msgSend(v7, "setQualityOfService:", objc_msgSend(*(id *)(a1 + 32), "derivedQualityOfService"));
  objc_msgSend(v7, "setAllowsCellularAccess:", 1);
  v8 = objc_alloc_init(MEMORY[0x1E0C94F88]);
  objc_msgSend(v8, "setDefaultConfiguration:", v7);
  objc_msgSend(v8, "setName:", CFSTR("Messages Enabled Ping"));
  objc_msgSend(v8, "setQuantity:", 1);
  objc_msgSend(v6, "setGroup:", v8);
  if (IMOSLoggingEnabled(objc_msgSend(v6, "setFetchRecordZonesCompletionBlock:", &unk_1E9229310)))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v6, "operationID");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412290;
      v12 = v10;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Scheduling ping cloudkit fetch zone operation %@", (uint8_t *)&v11, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_scheduleOperation:", v6);

}

void sub_1D1461754(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = 138412290;
      v8 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "sendCloudKitZoneFetchRequestToNoteFeatureIsOn: Fetch zone operation error %@", (uint8_t *)&v7, 0xCu);
    }

  }
}

void sub_1D1462190()
{
  IMDCKSyncTokenStore *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKSyncTokenStore);
  v1 = (void *)qword_1EFC63CB0;
  qword_1EFC63CB0 = (uint64_t)v0;

}

IMDRecordZoneManager *sub_1D1464014()
{
  IMDRecordZoneManager *result;

  result = objc_alloc_init(IMDRecordZoneManager);
  qword_1ED935D88 = (uint64_t)result;
  return result;
}

uint64_t sub_1D1464AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = IMOSLoggingEnabled(a1);
  if (a3)
  {
    if (!v6)
      goto LABEL_9;
    v7 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v13 = 138412546;
    v14 = a2;
    v15 = 2112;
    v16 = a3;
    v8 = "We failed to create the subscription: %@  with error: %@";
    v9 = v7;
    v10 = 22;
  }
  else
  {
    if (!v6)
      goto LABEL_9;
    v11 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      goto LABEL_9;
    v13 = 138412290;
    v14 = a2;
    v8 = "We successfully created subscription: %@";
    v9 = v11;
    v10 = 12;
  }
  _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v13, v10);
LABEL_9:
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 != 0, a3);
  return result;
}

uint64_t sub_1D1464CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t result;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = IMOSLoggingEnabled(a1);
  if (a2)
  {
    if (v6)
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v12 = 138412290;
        v13 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "We are already subscribed to: %@", (uint8_t *)&v12, 0xCu);
      }
    }
    result = *(_QWORD *)(a1 + 64);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, 1, a3);
  }
  else
  {
    if (v6)
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = 138412290;
        v13 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "We are not subscribed to subscriptionID: %@ so let's create it", (uint8_t *)&v12, 0xCu);
      }
    }
    return objc_msgSend(*(id *)(a1 + 40), "_createSubscriptionForZoneID:subscriptionID:recordType:completionBlock:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  return result;
}

uint64_t sub_1D1465138(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend(a2, "count");
  if (a3 || !v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v14 = 138412290;
        v15 = v12;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Did not get back a zone for recordZoneID %@", (uint8_t *)&v14, 0xCu);
      }
    }
    goto LABEL_10;
  }
  v7 = objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
  if (!v7)
  {
LABEL_10:
    v9 = 0;
    goto LABEL_11;
  }
  if (IMOSLoggingEnabled(v7))
  {
    v8 = OSLogHandleForIMFoundationCategory();
    v9 = 1;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend(a2, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32));
      v14 = 138412290;
      v15 = v10;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Found zone %@", (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    v9 = 1;
  }
LABEL_11:
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v9, a3);
  return result;
}

uint64_t sub_1D146540C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  uint64_t result;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend(a2, "containsObject:", *(_QWORD *)(a1 + 32));
  if (a4)
    v8 = 0;
  else
    v8 = v7;
  v9 = IMOSLoggingEnabled(v7);
  if ((_DWORD)v8 == 1)
  {
    if (!v9)
      goto LABEL_12;
    v10 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    v16 = 138412290;
    v17 = a2;
    v11 = "Successfully created zone %@ ";
    v12 = v10;
    v13 = 12;
  }
  else
  {
    if (!v9)
      goto LABEL_12;
    v14 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      goto LABEL_12;
    v16 = 138412546;
    v17 = a2;
    v18 = 2112;
    v19 = a4;
    v11 = "***** Failed to createzone %@ %@ ";
    v12 = v14;
    v13 = 22;
  }
  _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v16, v13);
LABEL_12:
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v8, a4);
  return result;
}

void sub_1D14655FC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  const __CFString *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  const __CFString *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = IMOSLoggingEnabled(a1);
  if (a3 || !a2)
  {
    if ((_DWORD)v6)
    {
      v10 = OSLogHandleForIMFoundationCategory();
      v6 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
      if ((_DWORD)v6)
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = CFSTR("NO");
        *(_DWORD *)buf = 138412802;
        if (a2)
          v12 = CFSTR("YES");
        v23 = v11;
        v24 = 2112;
        v25 = v12;
        v26 = 2112;
        v27 = a3;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "createRecordZoneIfNeededWithCompletionBlock zone %@ exists %@ error %@", buf, 0x20u);
      }
    }
    if (IMOSLoggingEnabled(v6))
    {
      v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = objc_msgSend(*(id *)(a1 + 40), "zoneID");
        *(_DWORD *)buf = 138412290;
        v23 = v14;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Attempting to create zone %@", buf, 0xCu);
      }
    }
    v15 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1D1465860;
    v18[3] = &unk_1E9229418;
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 56);
    v19 = *(id *)(a1 + 48);
    v20 = v16;
    v21 = v17;
    objc_msgSend(v19, "_createRecordZone:completionBlock:", v15, v18);

  }
  else
  {
    if ((_DWORD)v6)
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v23 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Zone %@ already exists", buf, 0xCu);
      }
    }
    v9 = *(_QWORD *)(a1 + 56);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
}

uint64_t sub_1D1465860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if ((_DWORD)a2)
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "ckUtilities"), "reportZoneCreation:", objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "zoneID"), "zoneName"));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

void sub_1D14659CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = IMOSLoggingEnabled(a1);
  if (a4)
  {
    if (v6)
    {
      v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v12 = 138412546;
        v13 = a3;
        v14 = 2112;
        v15 = a4;
        v8 = "Failed to delete zone IDs%@ error %@";
        v9 = v7;
        v10 = 22;
LABEL_8:
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
      }
    }
  }
  else if (v6)
  {
    v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = 138412290;
      v13 = a3;
      v8 = "Successfully deleted zone IDs%@";
      v9 = v11;
      v10 = 12;
      goto LABEL_8;
    }
  }
}

void sub_1D1466114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v7)
  {
    v8 = OSLogHandleForIMFoundationCategory();
    v7 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if ((_DWORD)v7)
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Result of deleting all zones", (uint8_t *)&v17, 2u);
    }
  }
  v9 = IMOSLoggingEnabled(v7);
  if (a4)
  {
    if (v9)
    {
      v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v17 = 138412802;
        v18 = a3;
        v19 = 2112;
        v20 = a4;
        v21 = 2112;
        v22 = v11;
        v12 = "Failed to delete zone IDs%@ error %@ DB %@";
        v13 = v10;
        v14 = 32;
LABEL_11:
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, v12, (uint8_t *)&v17, v14);
      }
    }
  }
  else if (v9)
  {
    v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = 138412546;
      v18 = a3;
      v19 = 2112;
      v20 = v16;
      v12 = "Successfully deleted zone IDs%@ DB %@";
      v13 = v15;
      v14 = 22;
      goto LABEL_11;
    }
  }
}

void sub_1D1466570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD block[6];
  char v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v3 = a3;
  v17 = *MEMORY[0x1E0C80C00];
  if (!a3)
    goto LABEL_15;
  if (IMOSLoggingEnabled(a1))
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v3;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Error obtaining zones %@", buf, 0xCu);
    }
  }
  v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer"), "errorIndicatesDeviceDoesNotHaveKeysToSync:", v3);
  v7 = v6;
  v8 = IMOSLoggingEnabled(v6);
  if (v7)
  {
    if (v8)
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "******* Error indicates device does not have keys to sync *****", buf, 2u);
      }
    }
    v10 = 0;
    goto LABEL_16;
  }
  if (!v8)
  {
    v3 = 0;
LABEL_15:
    v10 = 1;
    goto LABEL_16;
  }
  v11 = OSLogHandleForIMFoundationCategory();
  v10 = 1;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v16 = v3;
    _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Not a fatal manatee error %@. Proceeding", buf, 0xCu);
  }
  v3 = 0;
LABEL_16:
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1466784;
    block[3] = &unk_1E92294D0;
    v14 = v10;
    block[4] = v3;
    block[5] = v12;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t sub_1D1466784(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D1467BEC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64)) ^ 1;
}

void sub_1D1467FEC()
{
  IMDAvailabilityVerificationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDAvailabilityVerificationManager);
  v1 = (void *)qword_1ED936120;
  qword_1ED936120 = (uint64_t)v0;

}

void sub_1D1468504(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  IMDAvailabilityVerificationTokens *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1D1666738();
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(a1 + 32);
        v14 = 138412546;
        v15 = v5;
        v16 = 2112;
        v17 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Caching subscription validation tokens \"%@\" for handle handleID: %@", (uint8_t *)&v14, 0x16u);
      }

    }
    v10 = [IMDAvailabilityVerificationTokens alloc];
    objc_msgSend(v5, "subscriptionValidationToken");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "encryptionValidationToken");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = -[IMDAvailabilityVerificationTokens initWithSubscriptionValidationToken:encryptionValidationToken:](v10, "initWithSubscriptionValidationToken:encryptionValidationToken:", v11, v12);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKey:", v13, *(_QWORD *)(a1 + 32));
  }

}

void sub_1D14686A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  IMDAvailabilityVerificationTokens *v10;
  int v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v10 = (IMDAvailabilityVerificationTokens *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v10->super, OS_LOG_TYPE_ERROR))
      sub_1D16667A4();
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(a1 + 32);
        v11 = 138412546;
        v12 = v5;
        v13 = 2112;
        v14 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Caching subscription validation token \"%@\" and no encryption token for handle handleID: %@", (uint8_t *)&v11, 0x16u);
      }

    }
    v10 = -[IMDAvailabilityVerificationTokens initWithSubscriptionValidationToken:encryptionValidationToken:]([IMDAvailabilityVerificationTokens alloc], "initWithSubscriptionValidationToken:encryptionValidationToken:", v5, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "setObject:forKey:", v10, *(_QWORD *)(a1 + 32));
  }

}

void sub_1D1468BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1468C38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = WeakRetained;
  if (v5)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1D16668E0((uint64_t)v5, v8);

  }
  else
  {
    v9 = IMOSLoggingEnabled(WeakRetained);
    if ((_DWORD)v9)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        v16 = 134218498;
        v17 = a2;
        v18 = 2112;
        v19 = v11;
        v20 = 2112;
        v21 = v12;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Received validity response of %ld for validation token \"%@\" from senderHandleID \"%@\"", (uint8_t *)&v16, 0x20u);
      }

    }
    if (a2 != 2)
    {
      if (a2 == 1)
      {
        if (!IMOSLoggingEnabled(v9))
          goto LABEL_5;
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          LOWORD(v16) = 0;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Received a valid validity response, no further action needed.", (uint8_t *)&v16, 2u);
        }
      }
      else
      {
        if (a2)
          goto LABEL_5;
        IMLogHandleForCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          sub_1D166683C();
      }

      goto LABEL_5;
    }
    IMLogHandleForCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_1D1666868(a1, v14, v15);

    objc_msgSend(v7, "_inviteSenderHandleID:fromHandleID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
LABEL_5:

}

void sub_1D1468FBC(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  id v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 134218498;
      v9 = a2;
      v10 = 2048;
      v11 = a3;
      v12 = 2112;
      v13 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Completed invitation. CanShare: %ld, DidShare: %ld, Error: %@", (uint8_t *)&v8, 0x20u);
    }

  }
}

void sub_1D1469768(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1D146A328(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D146A2BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D146A408()
{
  IMDDistributedNotificationXPCEventStreamHandler *v0;
  void *v1;

  v0 = objc_alloc_init(IMDDistributedNotificationXPCEventStreamHandler);
  v1 = (void *)qword_1ED935F58;
  qword_1ED935F58 = (uint64_t)v0;

}

void sub_1D146AF38(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D146AE10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D146AFAC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_stripFZIDPrefix");
}

uint64_t sub_1D146B810(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_stripFZIDPrefix");
}

uint64_t sub_1D146B818(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "isEqualToString:", *(_QWORD *)(a1 + 32)) ^ 1;
}

uint64_t sub_1D146BCC4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(a1, "fileTransferGUIDs");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(a1, "threadOriginator");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "fileTransferGUIDs");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "arrayByAddingObjectsFromArray:", v8);
    v9 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v9;
  }
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v10 = v5;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v20;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v20 != v13)
          objc_enumerationMutation(v10);
        objc_msgSend(v4, "transferForGUID:", *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v14), (_QWORD)v19);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "_dictionaryRepresentation");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (v16)
          objc_msgSend(v6, "addObject:", v16);

        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
    }
    while (v12);
  }

  v17 = objc_msgSend(v6, "copy");
  return v17;
}

void sub_1D146BF00()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc((Class)objc_opt_class()), "initWithChatRegistry:vocabulary:", 0, 0);
  v1 = (void *)qword_1ED935D90;
  qword_1ED935D90 = v0;

}

uint64_t sub_1D146C8BC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareBySequenceNumberAndDateDescending:");
}

uint64_t sub_1D146C8C4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "setVocabulary:ofType:", *(_QWORD *)(a1 + 40), 2)))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = objc_msgSend(*(id *)(a1 + 40), "count");
      v5 = 134217984;
      v6 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Updated the SiriKit group names vocabulary with %lu named group chats", (uint8_t *)&v5, 0xCu);
    }

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1D146CB38()
{
  IMDaemonCoreSpotlightManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDaemonCoreSpotlightManager);
  v1 = (void *)qword_1ED9362C0;
  qword_1ED9362C0 = (uint64_t)v0;

}

void sub_1D146CED0(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  void *v5;
  xpc_object_t v6;
  void *v7;
  _BOOL8 v8;
  NSObject *v9;
  NSObject *v10;
  const __CFString *v11;
  uint64_t v12;
  NSObject *v13;
  __CFString *v14;
  _BOOL8 v15;
  NSObject *v16;
  _BOOL8 v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  void *v24;
  _BOOL8 v25;
  _BOOL4 v26;
  const __CFString *v27;
  _BOOL8 v28;
  _BOOL4 v29;
  const __CFString *v30;
  int v31;
  const __CFString *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  state = xpc_activity_get_state(v3);
  if (state != 2)
  {
    if (!state)
    {
      v5 = (void *)objc_msgSend(*(id *)(a1 + 32), "_newSpotlightBatchIndexingXPCCriteria");
      v6 = xpc_activity_copy_criteria(v3);
      v7 = v6;
      if (!v6 || !(v8 = xpc_equal(v6, v5)))
        xpc_activity_set_criteria(v3, v5);
      if (IMOSLoggingEnabled(v8))
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          LOWORD(v31) = 0;
          _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Got called to index CS in check in state", (uint8_t *)&v31, 2u);
        }

      }
    }
    goto LABEL_11;
  }
  if (IMOSLoggingEnabled(2))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = CFSTR("YES");
      if (!v3)
        v11 = CFSTR("NO");
      v31 = 138412290;
      v32 = v11;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Got called to index CS in run state with non null activity %@", (uint8_t *)&v31, 0xCu);
    }

  }
  v12 = objc_msgSend(MEMORY[0x1E0D397C8], "reindexingSuspended");
  if (!(_DWORD)v12)
  {
    v17 = xpc_activity_set_state(v3, 4);
    if (!v17 && IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LOWORD(v31) = 0;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "We did not set the state of xpc_activity from core duet to continue successfully for CS indexing", (uint8_t *)&v31, 2u);
      }

    }
    v19 = objc_msgSend(*(id *)(a1 + 32), "_needsReindexingDueToVersionMismatch");
    if ((_DWORD)v19)
    {
      if (IMOSLoggingEnabled(v19))
      {
        OSLogHandleForIMFoundationCategory();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          LOWORD(v31) = 0;
          _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Initiating reindex!", (uint8_t *)&v31, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "_needsDeferredIndexing");
      IMSetDomainIntForKey();
      objc_msgSend(MEMORY[0x1E0D397C8], "reindexReason");
      IMCoreSpotlightIndexReasonFromReindexReason();
      IMDCoreSpotlightSetNeedsMessageReindex();
      if (!v3)
        goto LABEL_11;
      if (objc_msgSend(MEMORY[0x1E0D397C8], "needsIndexing"))
      {
        v21 = objc_msgSend(*(id *)(a1 + 32), "_deviceConditionsAllowsSpotlightIndexingForActivity:", v3);
        if ((_DWORD)v21)
        {
          if (IMOSLoggingEnabled(v21))
          {
            OSLogHandleForIMFoundationCategory();
            v22 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              LOWORD(v31) = 0;
              _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Starting batch indexing after initial index complete, device state is good", (uint8_t *)&v31, 2u);
            }

          }
          objc_msgSend(*(id *)(a1 + 32), "_indexNextBatchIfNecessaryForActivity:", v3);
        }
        goto LABEL_11;
      }
      v28 = xpc_activity_set_state(v3, 5);
      v29 = v28;
      if (!IMOSLoggingEnabled(v28))
        goto LABEL_11;
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v30 = CFSTR("NO");
        if (v29)
          v30 = CFSTR("YES");
        v31 = 138412290;
        v32 = v30;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Setting CS xpc_activity state to done, no additional batch indexes required after initial indexing. Success: %@", (uint8_t *)&v31, 0xCu);
      }
    }
    else
    {
      v23 = objc_msgSend(MEMORY[0x1E0D397C8], "needsIndexing");
      v24 = *(void **)(a1 + 32);
      if (v23)
      {
        if (objc_msgSend(v24, "_deviceConditionsAllowsSpotlightIndexingForActivity:", v3))
        {
          objc_msgSend(*(id *)(a1 + 32), "_reindexResumed");
          objc_msgSend(*(id *)(a1 + 32), "_indexNextBatchIfNecessaryForActivity:", v3);
        }
        goto LABEL_11;
      }
      objc_msgSend(v24, "_checkSpotlightClientStateForReindexIfNeeded");
      objc_msgSend(*(id *)(a1 + 32), "_checkSpotlightIndexCountForReindexIfNeeded");
      if (!v3)
        goto LABEL_11;
      v25 = xpc_activity_set_state(v3, 5);
      v26 = v25;
      if (!IMOSLoggingEnabled(v25))
        goto LABEL_11;
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v27 = CFSTR("NO");
        if (v26)
          v27 = CFSTR("YES");
        v31 = 138412290;
        v32 = v27;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Setting CS xpc_activity state to done. Success: %@", (uint8_t *)&v31, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_11;
  }
  if (IMOSLoggingEnabled(v12))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0D397C8], "reindexingSuspendedUntilDate");
      v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v31 = 138412290;
      v32 = v14;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Reindexing is suspended until %@, not proceeding", (uint8_t *)&v31, 0xCu);

    }
  }
  v15 = xpc_activity_set_state(v3, 5);
  if (!v15 && IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v31) = 0;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "We did not set the state of xpc_activity from core duet to continue successfully for CS indexing", (uint8_t *)&v31, 2u);
    }
    goto LABEL_61;
  }
LABEL_11:

}

void sub_1D146D4C0(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Reindex request complete", v2, 2u);
    }

  }
}

void sub_1D146D624(uint64_t a1, void *a2)
{
  _xpc_activity_s *v2;
  xpc_activity_state_t state;
  uint64_t v4;
  char v5;
  int v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  _BOOL8 v14;
  __int16 v15;
  uint8_t buf[2];
  __int16 v17;
  uint8_t v18[16];
  __int16 v19;

  v2 = a2;
  state = xpc_activity_get_state(v2);
  if (state == 2)
  {
    if (qword_1ED936490 != -1)
      dispatch_once(&qword_1ED936490, &unk_1E9229778);
    if (off_1ED936488)
    {
      v4 = off_1ED936488();
      v5 = v4;
      v6 = IMOSLoggingEnabled(v4);
      if ((v5 & 4) != 0)
      {
        if (v6)
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v18 = 0;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Clearing IMCoreSpotlight index state due to restore from backup", v18, 2u);
          }

        }
        objc_msgSend(MEMORY[0x1E0D360F0], "synchronousDatabase");
        v7 = objc_claimAutoreleasedReturnValue();
        -[NSObject invalidateSpotlightClientStateVersioningWithCompletion:](v7, "invalidateSpotlightClientStateVersioningWithCompletion:", &unk_1E92297B8);
        goto LABEL_21;
      }
      if (v6)
      {
        OSLogHandleForIMFoundationCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v17 = 0;
          v8 = "Not clearing IMCoreSpotlight index state, erase or upgrade install";
          v9 = (uint8_t *)&v17;
LABEL_15:
          _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, v8, v9, 2u);
          goto LABEL_21;
        }
        goto LABEL_21;
      }
    }
    else if (IMOSLoggingEnabled(state))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        v8 = "IMDaemon_CoreSpotlight - Failed to weak link DataMigration";
        v9 = buf;
        goto LABEL_15;
      }
LABEL_21:

    }
    v14 = xpc_activity_set_state(v2, 5);
    if (!v14 && IMOSLoggingEnabled(v14))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v15 = 0;
        v11 = "IMDaemon_CoreSpotlight - Failed to mark migration activity done";
        v12 = (uint8_t *)&v15;
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (IMOSLoggingEnabled(state))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v19 = 0;
      v11 = "IMDaemon_CoreSpotlight - Migration activity not in runs state";
      v12 = (uint8_t *)&v19;
LABEL_26:
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, v11, v12, 2u);
    }
LABEL_27:

  }
LABEL_28:

}

void *sub_1D146D898()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("DMGetUserDataDisposition", CFSTR("DataMigration"));
  off_1ED936488 = result;
  return result;
}

void sub_1D146D8C4(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  if (v2)
  {
    IMLogHandleForCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1D1666950((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);

  }
}

void sub_1D146DD14(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  int v5;
  const __CFString *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "_currentClientState");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = objc_msgSend(v3, "lastIndexedRowID");
      v5 = objc_msgSend(MEMORY[0x1E0D397C8], "needsIndexing");
      v6 = CFSTR("NO");
      if (v5)
        v6 = CFSTR("YES");
      v7 = 134218242;
      v8 = v4;
      v9 = 2112;
      v10 = v6;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Index next batch request complete. New lastIndexedRowID %llu needsIndexing %@", (uint8_t *)&v7, 0x16u);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D146DE20(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D146DDE8);
  }
  _Unwind_Resume(a1);
}

void sub_1D146DE3C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  const __CFString *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = objc_msgSend(MEMORY[0x1E0D397C8], "lastDonatedRowID");
      v4 = objc_msgSend(MEMORY[0x1E0D397C8], "needsDonation");
      v5 = CFSTR("NO");
      if (v4)
        v5 = CFSTR("YES");
      v6 = 134218242;
      v7 = v3;
      v8 = 2112;
      v9 = v5;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Donation next batch request complete. New lastDonatedRowID %lu needsDonation %@", (uint8_t *)&v6, 0x16u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1D146DF54()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend(MEMORY[0x1E0D397C8], "reindexSupplementalBatchSize");
  if (IMOSLoggingEnabled(v0))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v3 = 134217984;
      v4 = v0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Running batch request with size %lu", (uint8_t *)&v3, 0xCu);
    }

  }
  if (objc_msgSend(MEMORY[0x1E0D397C8], "needsIndexing")
    || (result = objc_msgSend(MEMORY[0x1E0D397C8], "needsDonation"), (_DWORD)result))
  {
    objc_msgSend(MEMORY[0x1E0D397C8], "reindexReason");
    IMCoreSpotlightIndexReasonFromReindexReason();
    return IMDCoreSpotlightIndexNextMessageBatchIfNeeded();
  }
  return result;
}

void sub_1D146E084(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  dispatch_time_t v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  const __CFString *v13;
  const __CFString *v14;
  _xpc_activity_s *v15;
  _BOOL8 v16;
  _BOOL4 v17;
  NSObject *v18;
  const __CFString *v19;
  _QWORD v20[5];
  id v21;
  uint8_t buf[4];
  const __CFString *v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend(MEMORY[0x1E0D397C8], "needsIndexing") & 1) != 0
    || (v2 = objc_msgSend(MEMORY[0x1E0D397C8], "needsDonation"), (_DWORD)v2))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "_deviceConditionsAllowsSpotlightIndexingForActivity:", *(_QWORD *)(a1 + 40));
    v4 = v3;
    v5 = IMOSLoggingEnabled(v3);
    if (v4)
    {
      if (v5)
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "needsIndexing = YES and device conditions are good, starting next batch request", buf, 2u);
        }

      }
      v7 = dispatch_time(0, 500000000);
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = sub_1D146E3AC;
      v20[3] = &unk_1E9228750;
      v8 = *(void **)(a1 + 40);
      v20[4] = *(_QWORD *)(a1 + 32);
      v21 = v8;
      dispatch_after(v7, MEMORY[0x1E0C80D38], v20);

    }
    else
    {
      if (v5)
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "needsIndexing = YES but device conditions are not good, activity should be in defer state", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "_reindexPaused");
    }
  }
  else
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = objc_msgSend(MEMORY[0x1E0D397C8], "needsIndexing");
        v12 = objc_msgSend(*(id *)(a1 + 32), "_deviceConditionsAllowsSpotlightIndexingForActivity:", *(_QWORD *)(a1 + 40));
        v13 = CFSTR("NO");
        if (v11)
          v14 = CFSTR("YES");
        else
          v14 = CFSTR("NO");
        if (v12)
          v13 = CFSTR("YES");
        *(_DWORD *)buf = 138412546;
        v23 = v14;
        v24 = 2112;
        v25 = v13;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "needsIndexing %@ deviceConditions %@ not kicking off next batch", buf, 0x16u);
      }

    }
    v15 = *(_xpc_activity_s **)(a1 + 40);
    if (v15)
    {
      v16 = xpc_activity_set_state(v15, 5);
      v17 = v16;
      if (IMOSLoggingEnabled(v16))
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = CFSTR("NO");
          if (v17)
            v19 = CFSTR("YES");
          *(_DWORD *)buf = 138412290;
          v23 = v19;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Setting CS xpc_activity state to done. Success: %@", buf, 0xCu);
        }

      }
    }
  }
}

uint64_t sub_1D146E3AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_indexNextBatchIfNecessaryForActivity:", *(_QWORD *)(a1 + 40));
}

void sub_1D146E87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D146E894(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D146E8A4(uint64_t a1)
{

}

void sub_1D146E8AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1D16669B4((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);

  }
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v5;

}

void sub_1D146EAB4(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t buf[16];

  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
      sub_1D1666A94((uint64_t)v5, v6);
LABEL_13:

    goto LABEL_14;
  }
  v7 = IMOSLoggingEnabled(0);
  if (!a2)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Client state is invalid, initiating reindex event", v9, 2u);
      }

    }
    IMSetDomainIntForKey();
    objc_msgSend(*(id *)(a1 + 32), "spotlightIndexQueue");
    v6 = objc_claimAutoreleasedReturnValue();
    dispatch_async(v6, &unk_1E9229828);
    goto LABEL_13;
  }
  if (v7)
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "IMDP does not think we need reindexing based on client state", buf, 2u);
    }
    goto LABEL_13;
  }
LABEL_14:

}

uint64_t sub_1D146EC30()
{
  objc_msgSend(MEMORY[0x1E0D397C8], "reindexReason");
  IMCoreSpotlightIndexReasonFromReindexReason();
  return IMDCoreSpotlightSetNeedsMessageReindex();
}

void sub_1D146EC58(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Reindex request for lost client state complete", v2, 2u);
    }

  }
}

void sub_1D146EF1C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD block[5];

  objc_msgSend(*(id *)(a1 + 32), "spotlightIndexQueue");
  v3 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D146EF8C;
  block[3] = &unk_1E9227F30;
  block[4] = a2;
  dispatch_async(v3, block);

}

void sub_1D146EF8C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  double v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  objc_msgSend(MEMORY[0x1E0D360F0], "synchronousDatabase");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1D146F270;
  v11[3] = &unk_1E9229898;
  v11[4] = &v12;
  objc_msgSend(v2, "fetchCountOfRecordType:completionHandler:", 0, v11);

  v4 = v13[3];
  if (v4 < 1)
  {
    if (!IMOSLoggingEnabled(v3))
      goto LABEL_16;
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "IMDaemon_CoreSpotlight - [IMDDatabase.synchronousDatabase rowCountForTableName:@\"message\"] returned 0 total messages", buf, 2u);
    }
LABEL_15:

    goto LABEL_16;
  }
  v5 = (float)*(uint64_t *)(a1 + 32) / (float)v4;
  v6 = v5;
  if (v5 >= 0.25)
  {
    if (!IMOSLoggingEnabled(v3))
      goto LABEL_16;
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = v13[3];
      *(_DWORD *)buf = 134218240;
      v17 = v6;
      v18 = 2048;
      v19 = v10;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "%f of total messages (%lld) indexed, not initiating reindex event", buf, 0x16u);
    }
    goto LABEL_15;
  }
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = v13[3];
      *(_DWORD *)buf = 134218240;
      v17 = v6;
      v18 = 2048;
      v19 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "%f of total messages (%lld) indexed, initiating reindex event!", buf, 0x16u);
    }

  }
  IMSetDomainIntForKey();
  objc_msgSend(MEMORY[0x1E0D397C8], "reindexReason");
  IMCoreSpotlightIndexReasonFromReindexReason();
  IMDCoreSpotlightSetNeedsMessageReindex();
LABEL_16:
  _Block_object_dispose(&v12, 8);
}

void sub_1D146F20C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D146F1CCLL);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D146F270(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1D146F280(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Reindex request for mismatched record count complete", v2, 2u);
    }

  }
}

void sub_1D146F354(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1D146FCF0(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  _QWORD v36[4];
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  __int128 v45;
  uint8_t buf[4];
  id v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v35 = a2;
  objc_msgSend(v35, "pathExtension");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "length");
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "type");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "pathExtensionForUTIType:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = v7;
    if (!objc_msgSend(v7, "length"))
    {
      objc_msgSend(MEMORY[0x1E0D36A38], "defaultHFSFileManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "mimeType");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "pathExtensionForMIMEType:", v9);
      v10 = objc_claimAutoreleasedReturnValue();

      v3 = (void *)v10;
    }
    v4 = objc_msgSend(v3, "length");
    if (v4)
    {
      v11 = v3;
      objc_msgSend(v35, "absoluteString");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "stringByDeletingPathExtension");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v13, "stringByAppendingPathExtension:", v11);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(v14, "length"))
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v14);
        v15 = objc_claimAutoreleasedReturnValue();

        v35 = (id)v15;
      }

      v3 = v11;
    }
  }
  v30 = v3;
  if (v35)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "im_generateCopyForURL:", v35);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v17 = 0;
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v47 = v35;
      v48 = 2112;
      v49 = v17;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Source URL: %@  Link: %@", buf, 0x16u);
    }

  }
  +[IMDRelayTranscodeController sharedInstance](IMDRelayTranscodeController, "sharedInstance");
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = v35;
  if (v17)
    v19 = v17;
  v32 = v19;
  objc_msgSend(*(id *)(a1 + 32), "type");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "session");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "service");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = objc_msgSend(v21, "transcodeTarget");
  objc_msgSend(*(id *)(a1 + 32), "transcoderUserInfo");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(*(id *)(a1 + 32), "isSticker");
  v24 = *(_QWORD *)(a1 + 112);
  v25 = objc_msgSend(*(id *)(a1 + 40), "shouldSendLowResolutionOnly") ^ 1;
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 3221225472;
  v36[2] = sub_1D1470110;
  v36[3] = &unk_1E9229980;
  v26 = *(id *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 56);
  v28 = *(void **)(a1 + 64);
  v37 = v26;
  v38 = v27;
  v45 = *(_OWORD *)(a1 + 96);
  v39 = v28;
  v40 = v17;
  v44 = *(id *)(a1 + 88);
  v41 = *(id *)(a1 + 72);
  v42 = *(id *)(a1 + 32);
  v43 = *(id *)(a1 + 80);
  v29 = v17;
  objc_msgSend(v34, "transcodeFileTransferContents:utiType:target:transcoderUserInfo:isSticker:highQualityMaxByteSize:lowQualityMaxByteSize:representations:completionBlock:", v32, v33, v31, v22, v23, v24, v24, v25, v36);

}

void sub_1D1470110(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  id v14;
  uint64_t v15;
  NSObject *v16;
  const __CFString *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  id v62;
  void *v63;
  int8x16_t v64;
  _QWORD block[4];
  id v66;
  id v67;
  uint64_t v68;
  _QWORD v69[4];
  id v70;
  int8x16_t v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  NSObject *v78;
  id v79;
  int8x16_t v80;
  uint64_t v81;
  char v82;
  id v83;
  uint8_t buf[4];
  id v85;
  __int16 v86;
  void *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v56 = a2;
  v14 = a3;
  v58 = a4;
  v62 = a5;
  v60 = a8;
  objc_msgSend(*(id *)(a1 + 32), "transferForGUID:", *(_QWORD *)(a1 + 40));
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = IMOSLoggingEnabled(v63);
  if ((_DWORD)v15)
  {
    OSLogHandleForIMEventCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = CFSTR("NO");
      if (a7)
        v17 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v85 = v63;
      v86 = 2112;
      v87 = (void *)v17;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }

  }
  if (a6)
  {
    if (IMOSLoggingEnabled(v15))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v85 = v14;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }

    }
    objc_msgSend(v63, "localPath", v56, v58);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "lastPathComponent");
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "__imFirstObject");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "path");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "lastPathComponent");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v20, "pathExtension");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "pathExtension");
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = (void *)v25;
    if (v24)
    {
      if (v25)
      {
        if ((objc_msgSend(v24, "isEqualToString:", v25) & 1) == 0)
        {
          objc_msgSend(v20, "stringByAppendingPathExtension:", v26);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "setTransferredFilename:", v27);

          if (IMOSLoggingEnabled(v28))
          {
            OSLogHandleForIMFoundationCategory();
            v29 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v20, "stringByAppendingPathExtension:", v26);
              v30 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v85 = v30;
              _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", buf, 0xCu);

            }
          }
        }
      }
    }

    if ((IMOSLoggingEnabled(v31) & 1) != 0)
    {
      OSLogHandleForIMFoundationCategory();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v85 = v14;
        _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "All URLs: %@", buf, 0xCu);
      }

    }
    v33 = dispatch_group_create();
    dispatch_group_enter(v33);
    v34 = objc_msgSend(v14, "count");
    v35 = MEMORY[0x1E0C809B0];
    if (v34)
    {
      v36 = 0;
      while (1)
      {
        objc_msgSend(v14, "objectAtIndex:", v36);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = v37;
        if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24))
          break;
        dispatch_group_enter(v33);
        objc_msgSend(MEMORY[0x1E0D39CD0], "sharedInstance");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v69[0] = v35;
        v69[1] = 3221225472;
        v69[2] = sub_1D1470954;
        v69[3] = &unk_1E9229958;
        v70 = v63;
        v64 = *(int8x16_t *)(a1 + 32);
        v40 = (id)v64.i64[0];
        v71 = vextq_s8(v64, v64, 8uLL);
        v79 = *(id *)(a1 + 88);
        v72 = v62;
        v81 = v36;
        v73 = *(id *)(a1 + 64);
        v74 = *(id *)(a1 + 72);
        v41 = *(id *)(a1 + 80);
        v80 = vextq_s8(*(int8x16_t *)(a1 + 96), *(int8x16_t *)(a1 + 96), 8uLL);
        v82 = a7;
        v75 = v41;
        v76 = v38;
        v77 = *(id *)(a1 + 56);
        v78 = v33;
        v42 = v38;
        objc_msgSend(v39, "compressFileTransfer:completionBlock:", v42, v69);

        if (++v36 >= (unint64_t)objc_msgSend(v14, "count"))
          goto LABEL_29;
      }

    }
LABEL_29:
    block[0] = v35;
    block[1] = 3221225472;
    block[2] = sub_1D1471B70;
    block[3] = &unk_1E9228080;
    v43 = v14;
    v44 = *(_QWORD *)(a1 + 104);
    v66 = v43;
    v68 = v44;
    v67 = *(id *)(a1 + 48);
    dispatch_group_notify(v33, MEMORY[0x1E0C80D38], block);
    dispatch_group_leave(v33);

  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) = 25;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 0;
    v45 = IMOSLoggingEnabled(v15);
    if ((_DWORD)v45)
    {
      OSLogHandleForIMFoundationCategory();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v85 = v62;
        _os_log_impl(&dword_1D1413000, v46, OS_LOG_TYPE_INFO, "Transcoding failed with error: %@", buf, 0xCu);
      }

    }
    if (IMOSLoggingEnabled(v45))
    {
      OSLogHandleForIMEventCategory();
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v85 = v63;
        _os_log_impl(&dword_1D1413000, v47, OS_LOG_TYPE_INFO, "Failed transcoding transfer: %@", buf, 0xCu);
      }

    }
    v48 = *(void **)(a1 + 32);
    objc_msgSend(v63, "guid", v56, v58);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "failTransfer:reason:", v49, 15);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    if (*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = *(_QWORD *)(a1 + 56);
      v83 = 0;
      v52 = objc_msgSend(v50, "removeItemAtURL:error:", v51, &v83);
      v33 = v83;

      if ((v52 & 1) == 0 && IMOSLoggingEnabled(v53))
      {
        OSLogHandleForIMFoundationCategory();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          v55 = *(void **)(a1 + 56);
          *(_DWORD *)buf = 138412546;
          v85 = v55;
          v86 = 2112;
          v87 = v33;
          _os_log_impl(&dword_1D1413000, v54, OS_LOG_TYPE_INFO, "Error cleaning up linked path: %@  error: %@", buf, 0x16u);
        }

      }
    }
    else
    {
      v33 = 0;
    }
  }

}

void sub_1D1470954(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  __CFString *v11;
  __CFString *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  const __CFString *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  const __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  __CFString *v46;
  _QWORD v47[4];
  id v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  __CFString *v56;
  id v57;
  id v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _QWORD v63[4];
  uint64_t v64;
  uint8_t buf[4];
  const __CFString *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = IMOSLoggingEnabled(v13);
  if ((_DWORD)v14)
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = CFSTR("NO");
      if (a6)
        v16 = CFSTR("YES");
      *(_DWORD *)buf = 138412290;
      v66 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Compressed attachment: %@", buf, 0xCu);
    }

  }
  v17 = IMOSLoggingEnabled(v14);
  if ((_DWORD)v17)
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v66 = v11;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "           Input Path: %@", buf, 0xCu);
    }

  }
  v19 = IMOSLoggingEnabled(v17);
  if ((_DWORD)v19)
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v66 = v12;
      _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "          Output Path: %@", buf, 0xCu);
    }

  }
  if (IMOSLoggingEnabled(v19))
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = CFSTR("NO");
      if (a5)
        v22 = CFSTR("YES");
      *(_DWORD *)buf = 138412290;
      v66 = v22;
      _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "              Success: %@", buf, 0xCu);
    }

  }
  if (a6)
  {
    objc_msgSend(*(id *)(a1 + 32), "localPath");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "lastPathComponent");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    -[__CFString path](v12, "path");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "lastPathComponent");
    v26 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v24, "pathExtension");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "pathExtension");
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)v28;
    if (v27)
    {
      if (v28)
      {
        if ((objc_msgSend(v27, "isEqualToString:", v28) & 1) == 0)
        {
          v30 = *(void **)(a1 + 32);
          objc_msgSend(v24, "stringByAppendingPathExtension:", v29);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "setTransferredFilename:", v31);

          if (IMOSLoggingEnabled(v32))
          {
            OSLogHandleForIMFoundationCategory();
            v33 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(*(id *)(a1 + 32), "transferredFilename");
              v34 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v66 = v34;
              _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", buf, 0xCu);

            }
          }
        }
      }
    }

  }
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v36 = v35;
  objc_msgSend(MEMORY[0x1E0D39CD8], "sharedInstance");
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString path](v12, "path");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v38, "stringByResolvingAndStandardizingPath");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = *MEMORY[0x1E0D34230];
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = sub_1D1470F34;
  v63[3] = &unk_1E9229908;
  v41 = *(void **)(a1 + 48);
  v64 = *(_QWORD *)(a1 + 40);
  v47[0] = MEMORY[0x1E0C809B0];
  v47[2] = sub_1D1471054;
  v47[3] = &unk_1E9229930;
  v47[1] = 3221225472;
  v42 = v41;
  v43 = *(_QWORD *)(a1 + 40);
  v48 = v42;
  v49 = v43;
  v60 = v36;
  v58 = *(id *)(a1 + 112);
  v44 = *(id *)(a1 + 56);
  v45 = *(_QWORD *)(a1 + 136);
  v50 = v44;
  v61 = v45;
  v51 = *(id *)(a1 + 64);
  v52 = *(id *)(a1 + 72);
  v53 = *(id *)(a1 + 80);
  v59 = *(_OWORD *)(a1 + 120);
  v62 = *(_BYTE *)(a1 + 144);
  v54 = *(id *)(a1 + 88);
  v55 = *(id *)(a1 + 96);
  v56 = v12;
  v57 = *(id *)(a1 + 104);
  v46 = v12;
  objc_msgSend(v37, "sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:", v39, v40, 0, v64, 1, v63, v47);

}

void sub_1D1470F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = 134218496;
      v11 = a2;
      v12 = 2048;
      v13 = a3;
      v14 = 2048;
      v15 = a4;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Send progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }

  }
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 32), a2, a3);

}

void sub_1D1471054(uint64_t a1, void *a2, char a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  double v20;
  double v21;
  void *v22;
  __CFDictionary *v23;
  __CFString *v24;
  uint64_t v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  double v42;
  NSObject *v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  char v52;
  __CFString *v53;
  uint64_t v54;
  NSObject *v55;
  double v56;
  void *v57;
  uint64_t v58;
  char v59;
  __CFString *v60;
  uint64_t v61;
  NSObject *v62;
  double v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  int v70;
  __CFString *v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  double v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id value;
  id v81;
  double v82;
  __CFString *v83;
  __CFString *v84;
  id v85;
  id v86;
  uint8_t buf[4];
  double v88;
  __int16 v89;
  const __CFString *v90;
  __int16 v91;
  double v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v76 = a2;
  v82 = COERCE_DOUBLE(a4);
  v77 = a5;
  value = a6;
  v79 = a7;
  v81 = a8;
  v78 = a9;
  objc_msgSend(*(id *)(a1 + 32), "transferForGUID:", *(_QWORD *)(a1 + 40));
  *(double *)&v83 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
  v17 = IMOSLoggingEnabled(v83);
  if ((a3 & 1) != 0)
  {
    if ((_DWORD)v17)
    {
      OSLogHandleForIMEventCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        v88 = *(double *)&v83;
        v89 = 2112;
        v90 = CFSTR("YES");
        v91 = 2112;
        v92 = v82;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Finished uploading transfer: %@   success: %@  error: %@", buf, 0x20u);
      }

    }
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        v21 = v20 - *(double *)(a1 + 136);
        *(_DWORD *)buf = 134217984;
        v88 = v21;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }

    }
    -[__CFString userInfo](v83, "userInfo");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(double *)&v23 = COERCE_DOUBLE(objc_msgSend(v22, "mutableCopy"));

    if (*(double *)&v23 == 0.0)
      *(double *)&v23 = COERCE_DOUBLE(CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]));
    v24 = CFSTR("file-size");
    v25 = *(_QWORD *)(a1 + 144);
    v26 = CFSTR("decryption-key");
    v27 = CFSTR("mmcs-url");
    v28 = CFSTR("mmcs-owner");
    v29 = CFSTR("mmcs-signature-hex");
    if (v25)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("mmcs-signature-hex"), v25);
      v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("mmcs-owner"), *(_QWORD *)(a1 + 144));
      v28 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("mmcs-url"), *(_QWORD *)(a1 + 144));
      v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("decryption-key"), *(_QWORD *)(a1 + 144));
      v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("file-size"), *(_QWORD *)(a1 + 144));
      v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v79, "__imHexString");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    if (v30)
      CFDictionarySetValue(v23, v29, v30);

    if (value)
      CFDictionarySetValue(v23, v28, value);
    if (v81)
      CFDictionarySetValue(v23, v27, v81);
    objc_msgSend(v78, "__imHexString");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if (v31)
      CFDictionarySetValue(v23, v26, v31);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a10);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "stringValue");
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
      CFDictionarySetValue(v23, v24, v33);

    if (IMOSLoggingEnabled(v34))
    {
      OSLogHandleForIMFoundationCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v88 = *(double *)&v23;
        v89 = 2112;
        v90 = v83;
        _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "  setting userinfo: %@  on transfer: %@", buf, 0x16u);
      }

    }
    -[__CFString setUserInfo:](v83, "setUserInfo:", v23);
    objc_msgSend(*(id *)(a1 + 56), "guid");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString setMessageGUID:](v83, "setMessageGUID:", v36);

    objc_msgSend(*(id *)(a1 + 32), "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 40), a10, a10);
    objc_msgSend(*(id *)(a1 + 32), "endTransfer:", *(_QWORD *)(a1 + 40));
    -[__CFDictionary setObject:forKey:](v23, "setObject:forKey:", *(_QWORD *)(a1 + 40), qword_1EFC606D0);
    objc_msgSend(*(id *)(a1 + 64), "filename");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFDictionary setObject:forKey:](v23, "setObject:forKey:", v37, qword_1EFC606D8);

    objc_msgSend(*(id *)(a1 + 64), "type");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFDictionary setObject:forKey:](v23, "setObject:forKey:", v38, qword_1EFC606E0);

    objc_msgSend(*(id *)(a1 + 72), "addObject:", v23);
  }
  else
  {
    if ((_DWORD)v17)
    {
      OSLogHandleForIMEventCategory();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        v88 = *(double *)&v83;
        v89 = 2112;
        v90 = CFSTR("NO");
        v91 = 2112;
        v92 = v82;
        _os_log_impl(&dword_1D1413000, v39, OS_LOG_TYPE_INFO, "Failed uploading transfer: %@   success: %@  error: %@", buf, 0x20u);
      }

    }
    v40 = IMOSLoggingEnabled(v17);
    if ((_DWORD)v40)
    {
      OSLogHandleForIMFoundationCategory();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        -[__CFString transferDataURL](v83, "transferDataURL");
        v42 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        *(_DWORD *)buf = 138412290;
        v88 = v42;
        _os_log_impl(&dword_1D1413000, v41, OS_LOG_TYPE_INFO, "transfer data url: %@", buf, 0xCu);

      }
    }
    if (IMOSLoggingEnabled(v40))
    {
      OSLogHandleForIMFoundationCategory();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
        v45 = v44 - *(double *)(a1 + 136);
        *(_DWORD *)buf = 134217984;
        v88 = v45;
        _os_log_impl(&dword_1D1413000, v43, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }

    }
    v46 = *(_QWORD *)(a1 + 112);
    if (v46)
      (*(void (**)(uint64_t, double, id, uint64_t))(v46 + 16))(v46, COERCE_DOUBLE(*(_QWORD *)&v82), v81, a10);
    v47 = objc_msgSend(*(id *)(a1 + 48), "code");
    if (v47 == -6)
    {
      v48 = objc_msgSend(*(id *)(a1 + 32), "failTransfer:reason:", *(_QWORD *)(a1 + 40), 23);
    }
    else if (v47 == -5)
    {
      v48 = objc_msgSend(*(id *)(a1 + 32), "failTransfer:reason:", *(_QWORD *)(a1 + 40), 22);
    }
    else
    {
      v48 = objc_msgSend(*(id *)(a1 + 32), "failTransfer:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)&v82);
    }
    if (IMOSLoggingEnabled(v48))
    {
      OSLogHandleForIMFoundationCategory();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v88 = v82;
        _os_log_impl(&dword_1D1413000, v49, OS_LOG_TYPE_INFO, "  setting complete success to NO because of attachment send result. (Error: %@)", buf, 0xCu);
      }

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 24) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) = _FZErrorTypeFromNSError();
  }
  if (*(_BYTE *)(a1 + 152))
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = *(_QWORD *)(a1 + 80);
    v86 = 0;
    v52 = objc_msgSend(v50, "removeItemAtURL:error:", v51, &v86);
    v53 = (__CFString *)v86;

    if ((v52 & 1) == 0 && IMOSLoggingEnabled(v54))
    {
      OSLogHandleForIMFoundationCategory();
      v55 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
      {
        v56 = *(double *)(a1 + 80);
        *(_DWORD *)buf = 138412546;
        v88 = v56;
        v89 = 2112;
        v90 = v53;
        _os_log_impl(&dword_1D1413000, v55, OS_LOG_TYPE_INFO, "Error cleaning up transcoded path: %@  error: %@", buf, 0x16u);
      }

    }
  }
  if (*(_QWORD *)(a1 + 88))
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = *(_QWORD *)(a1 + 88);
    v85 = 0;
    v59 = objc_msgSend(v57, "removeItemAtURL:error:", v58, &v85);
    v60 = (__CFString *)v85;

    if ((v59 & 1) == 0 && IMOSLoggingEnabled(v61))
    {
      OSLogHandleForIMFoundationCategory();
      v62 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
      {
        v63 = *(double *)(a1 + 88);
        *(_DWORD *)buf = 138412546;
        v88 = v63;
        v89 = 2112;
        v90 = v60;
        _os_log_impl(&dword_1D1413000, v62, OS_LOG_TYPE_INFO, "Error cleaning up linked path: %@  error: %@", buf, 0x16u);
      }

    }
  }
  else
  {
    v60 = 0;
  }
  objc_msgSend(*(id *)(a1 + 96), "path");
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  if (v64)
  {
    objc_msgSend(*(id *)(a1 + 96), "path");
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    IMSafeTemporaryDirectory();
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "path");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v65, "hasPrefix:", v67))
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 96), "path");
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = v60;
      v70 = objc_msgSend(v68, "removeItemAtPath:error:", v69, &v84);
      v71 = v84;

      v72 = v70 ^ 1;
      v60 = v71;
    }
    else
    {
      v72 = 0;
    }

    if (v72)
    {
      if (IMOSLoggingEnabled(v73))
      {
        OSLogHandleForIMFoundationCategory();
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 96), "path");
          v75 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138412546;
          v88 = v75;
          v89 = 2112;
          v90 = v60;
          _os_log_impl(&dword_1D1413000, v74, OS_LOG_TYPE_INFO, "Error cleaning up output path: %@  error: %@", buf, 0x16u);

        }
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));

}

void sub_1D1471A94(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1471A0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D1471B70(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const __CFString *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      v5 = 138412546;
      v6 = v3;
      v7 = 2112;
      v8 = v4;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "  All done url set for: %@   success: %@", (uint8_t *)&v5, 0x16u);
    }

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1D1471C74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1471C84(uint64_t a1)
{

}

void sub_1D1471C8C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = a1[4];
      if (*(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24))
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      v8 = 138412546;
      v9 = v3;
      v10 = 2112;
      v11 = v4;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", (uint8_t *)&v8, 0x16u);
    }

  }
  v5 = a1[6];
  if (v5)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v5 + 16))(v5, a1[5], *(unsigned __int8 *)(*(_QWORD *)(a1[7] + 8) + 24), *(unsigned int *)(*(_QWORD *)(a1[8] + 8) + 24));
  v6 = *(_QWORD *)(a1[9] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

void sub_1D1472124(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D1471F94);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D1472198(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;
  const __CFString *v5;
  uint64_t v6;
  NSObject *v7;
  const __CFString *v8;
  NSObject *v9;
  const __CFString *v10;
  NSObject *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  char v15;
  const __CFString *v16;
  __CFString *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __CFString *v23;
  __CFString *v24;
  uint64_t v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  const __CFString *v38;
  __CFString *v39;
  int v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id obj;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSObject *group;
  void *v61;
  void *v62;
  void *v63;
  __CFString *v64;
  void *v65;
  __CFString *v66;
  void *v67;
  uint64_t i;
  _QWORD block[4];
  id v71;
  id v72;
  id v73;
  uint64_t *v74;
  uint64_t *v75;
  _QWORD v76[4];
  __CFString *v77;
  id v78;
  id v79;
  id v80;
  const __CFString *v81;
  NSObject *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD v86[5];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  uint8_t buf[4];
  const __CFString *v100;
  __int16 v101;
  void *v102;
  __int16 v103;
  __CFString *v104;
  __int16 v105;
  void *v106;
  __int16 v107;
  void *v108;
  _BYTE v109[128];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v3 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v3)
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = *(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v100 = v5;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Network availability check complete: %@", buf, 0xCu);
    }

  }
  v6 = IMOSLoggingEnabled(v3);
  if ((_DWORD)v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = CFSTR("YES");
      if ((a2 & 2) == 0)
        v8 = CFSTR("NO");
      *(_DWORD *)buf = 138412290;
      v100 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "   Cell available: %@", buf, 0xCu);
    }

  }
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = CFSTR("YES");
      if ((a2 & 1) == 0)
        v10 = CFSTR("NO");
      *(_DWORD *)buf = 138412290;
      v100 = v10;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "   WiFi available: %@", buf, 0xCu);
    }

  }
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  v95 = 0;
  v96 = &v95;
  v97 = 0x2020000000;
  v98 = 1;
  v91 = 0;
  v92 = &v91;
  v93 = 0x2020000000;
  v94 = 0;
  group = dispatch_group_create();
  if (IMOSLoggingEnabled(group))
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "fileTransferGUIDs");
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v100 = v12;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Checking message file tranfers: %@", buf, 0xCu);

    }
  }
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "fileTransferGUIDs");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v87, v109, 16);
  if (!v14)
    goto LABEL_66;
  v58 = v14;
  obj = v13;
  v15 = 0;
  v57 = *(_QWORD *)v88;
  v55 = *MEMORY[0x1E0D34230];
  do
  {
    for (i = 0; i != v58; ++i)
    {
      if (*(_QWORD *)v88 != v57)
        objc_enumerationMutation(obj);
      v16 = *(const __CFString **)(*((_QWORD *)&v87 + 1) + 8 * i);
      objc_msgSend(v67, "transferForGUID:", v16);
      v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (v17)
      {
        dispatch_group_enter(group);
        -[__CFString filename](v17, "filename");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "lastPathComponent");
        v65 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "im_randomTemporaryFileURLWithFileName:", v65);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "path");
        v63 = (void *)objc_claimAutoreleasedReturnValue();

        -[__CFString _setNeedsWrapper:](v17, "_setNeedsWrapper:", 0);
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString setMessageGUID:](v17, "setMessageGUID:", v21);

        objc_msgSend(*(id *)(a1 + 32), "accountID");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v67, "assignTransfer:toAccount:otherPerson:", v16, v22, *(_QWORD *)(a1 + 40));

        -[__CFString userInfo](v17, "userInfo");
        v23 = (__CFString *)objc_claimAutoreleasedReturnValue();
        -[__CFString _stringForKey:](v23, "_stringForKey:", CFSTR("mmcs-url"));
        v24 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v66 = v23;
        -[__CFString _stringForKey:](v23, "_stringForKey:", CFSTR("mmcs-signature-hex"));
        v25 = objc_claimAutoreleasedReturnValue();
        v64 = (__CFString *)v25;
        if (v24)
        {
          if (IMOSLoggingEnabled(v25))
          {
            OSLogHandleForIMFoundationCategory();
            v26 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v100 = v64;
              _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, " => Settled on signature: %@", buf, 0xCu);
            }

          }
          -[__CFString _stringForKey:](v66, "_stringForKey:", CFSTR("mmcs-owner"));
          v61 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString objectForKey:](v66, "objectForKey:", CFSTR("file-size"));
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v27, "stringValue");
          v28 = (void *)objc_claimAutoreleasedReturnValue();

          -[__CFString _stringForKey:](v66, "_stringForKey:", CFSTR("decryption-key"));
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = IMOSLoggingEnabled(v62);
          if ((_DWORD)v29)
          {
            OSLogHandleForIMFoundationCategory();
            v30 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v100 = v17;
              _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, " transfer: %@", buf, 0xCu);
            }

          }
          v31 = IMOSLoggingEnabled(v29);
          if ((_DWORD)v31)
          {
            OSLogHandleForIMFoundationCategory();
            v32 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v100 = v66;
              _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "    user info: %@", buf, 0xCu);
            }

          }
          v33 = IMOSLoggingEnabled(v31);
          if ((_DWORD)v33)
          {
            OSLogHandleForIMFoundationCategory();
            v34 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138413314;
              v100 = v24;
              v101 = 2112;
              v102 = v61;
              v103 = 2112;
              v104 = v64;
              v105 = 2112;
              v106 = v62;
              v107 = 2112;
              v108 = v28;
              _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, " urlString: %@   owner: %@    signature: %@  key: %@  fileSizeString: %@", buf, 0x34u);
            }

          }
          if (IMOSLoggingEnabled(v33))
          {
            OSLogHandleForIMFoundationCategory();
            v35 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, " ** Auto downloading file!", buf, 2u);
            }

          }
          objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
          v37 = v36;
          v38 = v16;
          v39 = v17;
          v40 = objc_msgSend(*(id *)(a1 + 32), "isFromMe");
          v41 = (void *)MEMORY[0x1E0D39A10];
          v42 = *(void **)(a1 + 32);
          if (v40)
          {
            objc_msgSend(v42, "service");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "fromMeContextWithServiceName:", v43);
          }
          else
          {
            objc_msgSend(v42, "service");
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v41, "untrustedContextWithServiceName:", v43);
          }
          v59 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0D39CD8], "sharedInstance");
          v47 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v63, "stringByResolvingAndStandardizingPath");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          -[__CFString _FTDataFromHexString](v64, "_FTDataFromHexString");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v62, "_FTDataFromHexString");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v51 = objc_msgSend(v28, "integerValue");
          objc_msgSend(*(id *)(a1 + 32), "balloonBundleID");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          v86[0] = MEMORY[0x1E0C809B0];
          v86[1] = 3221225472;
          v86[2] = sub_1D1472E50;
          v86[3] = &unk_1E9229908;
          v86[4] = v38;
          v76[0] = MEMORY[0x1E0C809B0];
          v76[1] = 3221225472;
          v76[2] = sub_1D1472F70;
          v76[3] = &unk_1E92299F8;
          v77 = v39;
          v85 = v37;
          v78 = *(id *)(a1 + 32);
          v53 = v28;
          v79 = v53;
          v80 = v67;
          v81 = v38;
          v83 = &v95;
          v84 = &v91;
          v82 = group;
          LOBYTE(v54) = 1;
          objc_msgSend(v47, "receiveFileTransfer:transferGUID:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:generatePreview:balloonBundleID:senderContext:progressBlock:completionBlock:", v38, v38, v55, v48, v24, v61, v49, v50, v51, v54, v52, v59, v86, v76);

          v17 = v39;
        }
        else
        {
          if (IMOSLoggingEnabled(v25))
          {
            OSLogHandleForIMFoundationCategory();
            v45 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v45, OS_LOG_TYPE_INFO, " => No signature found, nothing to download here", buf, 2u);
            }

          }
          -[__CFString guid](v17, "guid");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v67, "failTransfer:error:", v46, 0);

          *((_BYTE *)v96 + 24) = 0;
          *((_DWORD *)v92 + 6) = 35;
          dispatch_group_leave(group);
        }

        v15 = 1;
      }
      else if (IMOSLoggingEnabled(0))
      {
        OSLogHandleForIMFoundationCategory();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v100 = v16;
          _os_log_impl(&dword_1D1413000, v44, OS_LOG_TYPE_INFO, "No transfer found for guid: %@", buf, 0xCu);
        }

      }
    }
    v58 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v87, v109, 16);
  }
  while (v58);

  if ((v15 & 1) != 0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1473544;
    block[3] = &unk_1E9229A20;
    v71 = *(id *)(a1 + 32);
    v74 = &v95;
    v73 = *(id *)(a1 + 48);
    v72 = *(id *)(a1 + 40);
    v75 = &v91;
    dispatch_group_notify(group, MEMORY[0x1E0C80D38], block);

    v13 = v71;
LABEL_66:

  }
  _Block_object_dispose(&v91, 8);
  _Block_object_dispose(&v95, 8);

}

void sub_1D1472D74(void *exc_buf, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14723FCLL);
  }
  _Block_object_dispose(&v2, 8);
  _Block_object_dispose(&v3, 8);
  JUMPOUT(0x1D1472E48);
}

void sub_1D1472E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = 134218496;
      v11 = a2;
      v12 = 2048;
      v13 = a3;
      v14 = 2048;
      v15 = a4;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Receive progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }

  }
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 32), a2, a3);

}

void sub_1D1472F70(uint64_t a1, void *a2, void *a3, int a4, char a5, void *a6, void *a7, double a8, double a9)
{
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  NSObject *v25;
  double v26;
  double v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  _OWORD v51[2];
  uint64_t v52;
  uint8_t buf[32];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  v17 = a3;
  v18 = a6;
  v19 = a7;
  v20 = IMOSLoggingEnabled(v19);
  if ((_DWORD)v20)
  {
    OSLogHandleForIMEventCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = *(_QWORD *)(a1 + 32);
      v23 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      if (a4)
        v23 = CFSTR("YES");
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v23;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = v18;
      _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Finished downloading transfer: %@   success: %@  error: %@", buf, 0x20u);
    }

  }
  v24 = IMOSLoggingEnabled(v20);
  if ((_DWORD)v24)
  {
    OSLogHandleForIMFoundationCategory();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      v27 = v26 - *(double *)(a1 + 96);
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v27;
      _os_log_impl(&dword_1D1413000, v25, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
    }

  }
  if (a4)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v17);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(*(id *)(a1 + 32), "setUserInfo:", 0);
    if (v28
      && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v30 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v28, "path"),
          v31 = (void *)objc_claimAutoreleasedReturnValue(),
          v32 = objc_msgSend(v30, "fileExistsAtPath:", v31),
          v31,
          v30,
          v32))
    {
      if (IMOSLoggingEnabled(v29))
      {
        OSLogHandleForIMFoundationCategory();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v17;
          _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
        }

      }
      +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "addDefaultGatekeeperPropertiesToDirectory:", v17);

      v35 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "setMessageGUID:", v36);

      objc_msgSend(*(id *)(a1 + 32), "_setLocalURL:", v28);
      v37 = objc_msgSend(*(id *)(a1 + 48), "integerValue");
      objc_msgSend(*(id *)(a1 + 56), "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 64), v37, v37);
      objc_msgSend(*(id *)(a1 + 56), "endTransfer:", *(_QWORD *)(a1 + 64));
      if ((a5 & 1) != 0)
      {
        v54 = 0;
        memset(buf, 0, sizeof(buf));
        IMClientPreviewConstraints();
        *(double *)v51 = a8;
        *((double *)v51 + 1) = a9;
        objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v51, "{CGSize=dd}");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = *(_QWORD *)(a1 + 64);
        v51[0] = *(_OWORD *)buf;
        v51[1] = *(_OWORD *)&buf[16];
        v52 = v54;
        objc_msgSend(v39, "updateTransfer:withPreviewSize:forConstraints:", v40, v38, v51);

      }
      else
      {
        +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "failTransferPreviewGeneration:", *(_QWORD *)(a1 + 64));

      }
      if (IMOSLoggingEnabled(v41))
      {
        OSLogHandleForIMFoundationCategory();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v28;
          _os_log_impl(&dword_1D1413000, v45, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled(v29))
      {
        OSLogHandleForIMFoundationCategory();
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          v43 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v43;
          _os_log_impl(&dword_1D1413000, v42, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", buf, 0xCu);
        }

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 35;
    }

  }
  else
  {
    if (IMOSLoggingEnabled(v24))
    {
      OSLogHandleForIMFoundationCategory();
      v46 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        v47 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v47;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v18;
        _os_log_impl(&dword_1D1413000, v46, OS_LOG_TYPE_INFO, "Failed retreiving file transfer: %@   error: %@", buf, 0x16u);
      }

    }
    v48 = *(void **)(a1 + 56);
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "failTransfer:error:", v49, v18);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 35;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));

}

uint64_t sub_1D1473544(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  __int16 v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "fileTransferGUIDs");
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = (void *)v3;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
        v5 = CFSTR("YES");
      else
        v5 = CFSTR("NO");
      v7 = 138412546;
      v8 = v3;
      v9 = 2112;
      v10 = v5;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", (uint8_t *)&v7, 0x16u);

    }
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
  return result;
}

uint64_t sub_1D1474F48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "remotefileRequest:attempts:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_1D1474F5C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = IMOSLoggingEnabled(v7);
  if (!v6 || v7)
  {
    if (v8)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v13 = 138412290;
        v14 = v7;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "File safe render failed for Peer Relay: %@", (uint8_t *)&v13, 0xCu);
      }

    }
  }
  else if (v8)
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v13 = 138412290;
      v14 = v6;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "File safe render success with output URLs: %@", (uint8_t *)&v13, 0xCu);
    }

  }
  v11 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "guid");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "_sendFileURL:forMessageGUID:attachmentIndex:", v6, v12, *(_QWORD *)(a1 + 48));

}

void sub_1D1475118(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  __CFString *v15;
  __CFString *v16;
  uint64_t v17;
  NSObject *v18;
  const __CFString *v19;
  int v20;
  NSObject *v21;
  __CFString *v22;
  void *v23;
  NSObject *v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  const __CFString *v36;
  NSObject *v37;
  id v38;
  id v39;
  id v40;
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[3];
  _QWORD v44[3];
  uint8_t buf[4];
  const __CFString *v46;
  __int16 v47;
  const __CFString *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  v16 = a3;
  v38 = a4;
  v39 = a5;
  v40 = a8;
  v17 = IMOSLoggingEnabled(v40);
  if ((_DWORD)v17)
  {
    OSLogHandleForIMEventCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = CFSTR("NO");
      if (a7)
        v19 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v46 = v15;
      v47 = 2112;
      v48 = v19;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }

  }
  v20 = IMOSLoggingEnabled(v17);
  if (a6)
  {
    if (v20)
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v46 = v16;
        _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }

    }
    -[__CFString lastObject](v16, "lastObject");
    v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:", v22);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v23))
    {
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        v25 = *(const __CFString **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v46 = v25;
        v47 = 2112;
        v48 = v22;
        _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Forwarding Attachment with guid %@ to local peer. Filepath %@", buf, 0x16u);
      }

    }
    v43[0] = IMDRelayLocalMessageDictionaryGUIDKey;
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v44[0] = v26;
    v43[1] = IMDRelayLocalMessageDictionaryAttachmentIndexKey;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 48));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v44[1] = v27;
    v43[2] = IMDRelayLocalMessageDictionaryFileDataKey;
    v44[2] = v23;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44, v43, 3);
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    JWEncodeDictionary();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = (void *)objc_msgSend(v29, "_FTCopyGzippedData");
    v41[0] = IMDRelayLocalMessageDictionaryDictKey;
    v41[1] = IMDRelayLocalMessageDictionaryTypeKey;
    v42[0] = v30;
    v42[1] = IMDRelayLocalMessageTypeRemoteFileResponse;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, v41, 2);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMDRelayServiceController sharedInstance](IMDRelayServiceController, "sharedInstance");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend(v32, "sendToLocalPeers:", v31);

    if (IMOSLoggingEnabled(v34))
    {
      OSLogHandleForIMFoundationCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        v36 = CFSTR("NO");
        if (v33)
          v36 = CFSTR("YES");
        *(_DWORD *)buf = 138412290;
        v46 = v36;
        _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "Got success? %@", buf, 0xCu);
      }

    }
  }
  else if (v20)
  {
    OSLogHandleForIMFoundationCategory();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Transcoding Failed for Peer Relay:", buf, 2u);
    }

  }
}

uint64_t sub_1D14755C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "remotefileRequest:attempts:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48) + 1);
}

void sub_1D1475A78()
{
  IMDMessageFromStorageController *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = [IMDMessageFromStorageController alloc];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v1 = -[IMDMessageFromStorageController initWithMessageStore:](v0, "initWithMessageStore:", v3);
  v2 = (void *)qword_1ED935F60;
  qword_1ED935F60 = v1;

}

void sub_1D1475B38()
{
  IMDMessageFromStorageController *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = [IMDMessageFromStorageController alloc];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v1 = -[IMDMessageFromStorageController initWithMessageStore:](v0, "initWithMessageStore:", v3);
  v2 = (void *)qword_1ED9360E0;
  qword_1ED9360E0 = v1;

}

void sub_1D1476A4C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "objectForKey:", a2);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "broadcaster");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "lastObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "accountID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "chatIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v16, "style");
  objc_msgSend(v16, "chatProperties");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "groupID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "personCentricID");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v15) = 1;
  objc_msgSend(v7, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messagesReceived:removed:messagesComingFromStorage:", v9, v10, v11, v12, v13, v14, v6, MEMORY[0x1E0C9AA60], v15);

}

id sub_1D1476CBC(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "accountRegisteredURIs");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "__imArrayByApplyingBlock:", &unk_1E9229BF0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t sub_1D1476CFC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](a2, sel_unprefixedURI);
}

void sub_1D147710C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1477090);
  }
  _Unwind_Resume(a1);
}

void sub_1D147726C()
{
  IMDMomentShareManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDMomentShareManager);
  v1 = (void *)qword_1ED935D98;
  qword_1ED935D98 = (uint64_t)v0;

}

void sub_1D1477398(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "shareURLsToContexts");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D1477434;
  v5[3] = &unk_1E9229C38;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

}

void sub_1D1477434(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 32), "_updateContext:withChange:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8++), *(_QWORD *)(a1 + 40));
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_1D14777AC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1477730);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D14778F4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleMomentShareFetchForContext_momentShare_error_);
}

void sub_1D1478364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D14781C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14783A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  if (v5)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v17 = v5;
        v18 = 2112;
        v19 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Fetched moment share %@ for message %@", buf, 0x16u);

      }
    }
  }
  else
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1D1666DD8(a1, v10);

    if (v7)
    {
      IMLogHandleForCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1D1666D5C(a1, (uint64_t)v7, v11);

    }
  }
  if (*(_QWORD *)(a1 + 48))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D14785C0;
    block[3] = &unk_1E9229170;
    v15 = *(id *)(a1 + 48);
    v13 = v5;
    v14 = v7;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

uint64_t sub_1D14785C0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1D14785D4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) && IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = 138412546;
      v6 = v3;
      v7 = 2112;
      v8 = v4;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "IMDMomentShareManager - Request for moment share %@ for message %@ has not completed after 5 seconds", (uint8_t *)&v5, 0x16u);

    }
  }
}

void sub_1D1478774(uint64_t a1, char a2, void *a3)
{
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  char v9;

  v5 = a3;
  if (*(_QWORD *)(a1 + 32))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D147881C;
    block[3] = &unk_1E9229CB0;
    v8 = *(id *)(a1 + 32);
    v9 = a2;
    v7 = v5;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

uint64_t sub_1D147881C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
}

void sub_1D1478AE0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "shareURL");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "shareURLsToContexts");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "removeObject:", *(_QWORD *)(a1 + 32));
  if (!objc_msgSend(v3, "count"))
    objc_msgSend(v2, "removeObjectForKey:", v4);

}

void sub_1D14794D4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14791ECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14797E8(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const __CFString *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  BOOL v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  double v18;
  dispatch_time_t v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      v10 = CFSTR("NO");
      *(_DWORD *)buf = 138413058;
      v24 = v7;
      v25 = 2112;
      if (a2)
        v10 = CFSTR("YES");
      v26 = v10;
      v27 = 2112;
      v28 = v5;
      v29 = 2112;
      v30 = v8;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Moment share %@ accepted success %@ error %@ for message %@", buf, 0x2Au);

    }
  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 48), "_fetchAssetsForAcceptedMomentShareWithContext:", *(_QWORD *)(a1 + 56));
  }
  else
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1D1667124(a1, (uint64_t)v5, v11);

    objc_msgSend(v5, "userInfo");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0C94808]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_BYTE *)(a1 + 64))
      v14 = 1;
    else
      v14 = v13 == 0;
    v15 = !v14;
    IMLogHandleForCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v17)
        sub_1D1667038();

      objc_msgSend(v13, "doubleValue");
      v19 = dispatch_time(0, (uint64_t)(v18 * 1000000000.0));
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_1D1479A70;
      v21[3] = &unk_1E9228750;
      v20 = *(void **)(a1 + 56);
      v21[4] = *(_QWORD *)(a1 + 48);
      v22 = v20;
      dispatch_after(v19, MEMORY[0x1E0C80D38], v21);

    }
    else
    {
      if (v17)
        sub_1D166709C(a1, v16);

      objc_msgSend(*(id *)(a1 + 48), "_handleIngestionFailureForContext:", *(_QWORD *)(a1 + 56));
    }

  }
}

uint64_t sub_1D1479A70(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_acceptMomentShareIfNecessaryForContext:isRetry:", *(_QWORD *)(a1 + 40), 1);
}

void sub_1D147A11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D147A134(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(a2, "isFinished");
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1D147A4F0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleResourceRequestForContext_asset_transfer_didCompleteWithFileURL_error_);
}

void sub_1D147AA24(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CD13B0], "changeRequestForAsset:", *(_QWORD *)(a1 + 32));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "guid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setSyndicationIdentifierOnMomentSharedAsset:", v2);

}

void sub_1D147AA84(uint64_t a1, char a2, void *a3)
{
  id v4;
  NSObject *v5;

  v4 = a3;
  if ((a2 & 1) == 0)
  {
    IMLogHandleForCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1D1667224();

  }
}

void sub_1D147B3C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void (*v12)(void);
  NSObject *v13;
  void *v14;
  NSObject *v15;
  id v16;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 64));

    v8 = *(void **)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    objc_msgSend(v8, "_copiedFileURLFromAssetExportFileURLs:transferGUID:error:", v5, v9, &v16);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v16;

    if (v10)
    {
      v12 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
    }
    else
    {
      IMLogHandleForCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        sub_1D16676A0();

      v12 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
    }
    v12();

  }
  else
  {
    IMLogHandleForCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_1D1667620();

    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 32), 0, 0);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1D147C260(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D147C1C4);
  }
  _Unwind_Resume(a1);
}

void sub_1D147C2C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  void *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  objc_msgSend(*(id *)(a1 + 64), "_fileTransferForAssetUUID:forMessage:momentShare:atIndex:ofTotal:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72) + a3, *(_QWORD *)(a1 + 80));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v6);
  v7 = *(void **)(a1 + 56);
  objc_msgSend(v6, "guid");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "addObject:", v8);

  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMEventCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = 138412546;
      v12 = v6;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Generated transfer %@ for asset %@", (uint8_t *)&v11, 0x16u);
    }

  }
}

void sub_1D147C93C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1D147C948(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1D147C9C8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

uint64_t sub_1D147C9E0(void *a1, const char *a2)
{
  return objc_msgSend(a1, "state");
}

void sub_1D147F458(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  __CFNotificationCenter *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t isKindOfClass;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  int v38;
  id v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v38 = 138412290;
      v39 = v3;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "User Notificaion has been completed with information %@", (uint8_t *)&v38, 0xCu);
    }

  }
  v5 = objc_msgSend(v3, "response");
  if (!v5)
  {
    objc_msgSend(v3, "responseInformation");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectForKey:", *MEMORY[0x1E0D36950]);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) == 0)
    {
      if (IMOSLoggingEnabled(isKindOfClass))
      {
        OSLogHandleForIMFoundationCategory();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          LOWORD(v38) = 0;
          _os_log_impl(&dword_1D1413000, v27, OS_LOG_TYPE_INFO, "The user entered no code... or the code entered was not an NSString", (uint8_t *)&v38, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:", *(_QWORD *)(a1 + 40), 0, 0);
      goto LABEL_38;
    }
    v17 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
    v18 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    objc_msgSend(*(id *)(a1 + 40), "uniqueID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_numberForKey:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v17, "numberFromString:", v15);
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)v21;
    if (v21 && v20)
    {
      v23 = objc_msgSend(v20, "isEqualToNumber:", v21);
      v24 = v23;
      v25 = IMOSLoggingEnabled(v23);
      if (v24)
      {
        if (v25)
        {
          OSLogHandleForIMFoundationCategory();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            LOWORD(v38) = 0;
            _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "The Code Is Correct, Welcome", (uint8_t *)&v38, 2u);
          }

        }
        objc_msgSend(*(id *)(a1 + 32), "_addDeviceToAllowedSMSRelay:shouldSendApproval:", *(_QWORD *)(a1 + 40), 1);
        goto LABEL_37;
      }
      if (v25)
      {
        OSLogHandleForIMFoundationCategory();
        v29 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          LOWORD(v38) = 0;
          _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "The Code Is Incorrect, Goodbye", (uint8_t *)&v38, 2u);
        }

      }
    }
    else if (IMOSLoggingEnabled(v21))
    {
      OSLogHandleForIMFoundationCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LOWORD(v38) = 0;
        _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "Unable to create a code number from the user inputed information or we have no pin to compare against, this will fail validation", (uint8_t *)&v38, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:", *(_QWORD *)(a1 + 40), 0, 0);
LABEL_37:

LABEL_38:
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.sms.smsRelayDevices.changed"), 0, 0, 0);
    v31 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    objc_msgSend(*(id *)(a1 + 40), "uniqueID");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "objectForKey:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    if (v33)
    {
      v34 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
      objc_msgSend(*(id *)(a1 + 40), "uniqueID");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "removeObjectForKey:", v35);

      if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"))
      {
        v36 = *(_QWORD *)(a1 + 32);
        v37 = *(void **)(v36 + 24);
        *(_QWORD *)(v36 + 24) = 0;

      }
    }

    goto LABEL_42;
  }
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v38) = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "You Tapped Cancel, Goodbye!!", (uint8_t *)&v38, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:", *(_QWORD *)(a1 + 40), 0, 1);
  v7 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(v7, CFSTR("com.apple.sms.smsRelayDevices.changed"), 0, 0, 0);
  v8 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  objc_msgSend(*(id *)(a1 + 40), "uniqueID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = *(void **)(*(_QWORD *)(a1 + 32) + 24);
    objc_msgSend(*(id *)(a1 + 40), "uniqueID");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "removeObjectForKey:", v12);

    if (!objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "count"))
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(void **)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
LABEL_42:

    }
  }

}

void sub_1D1481090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;

  if (a2 != 4 || a3)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    +[IMDCKUtilities sharedInstance](IMDCKUtilities, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = sub_1D1481144;
    v6[3] = &unk_1E9229DF0;
    v5 = *(void **)(a1 + 40);
    v6[4] = *(_QWORD *)(a1 + 32);
    v7 = v5;
    objc_msgSend(v4, "fetchiCloudAccountPersonID:", v6);

  }
}

void sub_1D1481144(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void (*v9)(void);
  uint8_t v10[16];

  v5 = a2;
  v6 = a3;
  if (v6 || (v7 = objc_msgSend(*(id *)(a1 + 32), "_areiMessageAndiCloudAccountTheSame:", v5), !(_DWORD)v7))
  {
    v9 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMEventCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "iCloud and iMessage account is the same, and icloud is HSA2 trusted, auto enabling devices for sms relay", v10, 2u);
      }

    }
    v9 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v9();

}

void sub_1D1481300(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t v17[128];
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5 && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMEventCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "_shouldAutoEnableDevicesforSMSRelay received error %@", buf, 0xCu);
    }

  }
  if (a2)
  {
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "serviceDelegate", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "peerDevices");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v14;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v14 != v11)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(a1 + 32), "_enableSMSRelayForDevice:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v12++));
        }
        while (v10 != v12);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v10);
    }

  }
}

void sub_1D1481B40(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "User tapped cancel on the Pin Display Alert, This will not dismiss the entry field on the iPhone", v4, 2u);
    }

  }
}

void sub_1D1482E2C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void (*v5)(void);
  NSObject *v6;
  uint8_t v7[16];

  v3 = a2;
  if (v3)
  {
    IMLogHandleForCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1D1667A50(v3, v4);

    v5 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Successfully updated Safety Monitor about the Notification response", v7, 2u);
      }

    }
    v5 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v5();

}

id sub_1D1482F2C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "allObjects");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "__imArrayByFilteringWithBlock:", &unk_1E9229EA0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "sortedArrayUsingComparator:", &unk_1E9229EE0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t sub_1D1482FAC(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v3 = objc_msgSend(v2, "isEqualToNumber:", &unk_1E9271038) ^ 1;
  else
    v3 = 0;

  return v3;
}

uint64_t sub_1D148300C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a3;
  v5 = objc_msgSend(a2, "unsignedIntegerValue");
  v6 = objc_msgSend(v4, "unsignedIntegerValue");

  if (v5 < v6)
    return 1;
  else
    return -1;
}

void *sub_1D14837C0()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("IMiMessageSizeLimitsForTransferTypeDisableLargeSizeNetworkRestriction", CFSTR("IMFoundation"));
  off_1EFC63CC0 = result;
  return result;
}

id _ClampDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  int v10;
  id v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1)
  {
    v4 = objc_msgSend(v2, "compare:", v1);
    if (v4 != -1)
    {
      if (v4 == 1)
      {
        if (!IMOSLoggingEnabled(1))
        {
LABEL_19:
          v6 = v1;
          goto LABEL_20;
        }
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v10 = 138412546;
          v11 = v1;
          v12 = 2112;
          v13 = v3;
          _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, " * Date descending vs current (%@ vs %@)", (uint8_t *)&v10, 0x16u);
        }
      }
      else
      {
        if (v4 || !IMOSLoggingEnabled(0))
          goto LABEL_19;
        OSLogHandleForIMFoundationCategory();
        v5 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          v10 = 138412546;
          v11 = v1;
          v12 = 2112;
          v13 = v3;
          _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, " * Date is the same as current (%@ vs %@)", (uint8_t *)&v10, 0x16u);
        }
      }

      goto LABEL_19;
    }
    if (IMOSLoggingEnabled(-1))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v10 = 138412546;
        v11 = v1;
        v12 = 2112;
        v13 = v3;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, " * Clamping date %@ to current date (%@)", (uint8_t *)&v10, 0x16u);
      }

    }
    v6 = v3;

    v1 = v6;
  }
  else
  {
    v6 = 0;
    v1 = v2;
  }
LABEL_20:
  v8 = v1;

  return v8;
}

uint64_t sub_1D1484B10(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "transferForGUID:", a2);
}

const __CFString *sub_1D1484B1C()
{
  return CFSTR("\uFFFD");
}

void sub_1D1488240(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  objc_super v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled(v3);
  if ((_DWORD)v4)
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v26 = v3;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Processed message, result: %@", buf, 0xCu);
    }

  }
  if (v3)
  {
    v6 = *(void **)(a1 + 32);
    objc_msgSend(v3, "guid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_addOriginatedMessage:", v7);

    objc_msgSend(v3, "setUseStandalone:", *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24));
    objc_msgSend(*(id *)(a1 + 40), "notificationIDSTokenURI");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v6) = objc_msgSend(v8, "length") == 0;

    if ((v6 & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 40), "notificationIDSTokenURI");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setNotificationIDSTokenURI:", v9);

    }
    if (IMOSLoggingEnabled(objc_msgSend(v3, "setDestinationCallerID:", *(_QWORD *)(a1 + 48))))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "destinationCallerID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        v26 = v11;
        v27 = 2112;
        v28 = v12;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "sendMessage destinationCallerID: %@ mycallerID: %@", buf, 0x16u);

      }
    }
    v13 = *(_QWORD *)(a1 + 88);
    v14 = objc_msgSend(*(id *)(a1 + 32), "_sendMessageOverAlternatePath:toChat:", v3, *(_QWORD *)(a1 + 56));
    v15 = v14;
    if (v14 & 1 | ((v13 & 1) == 0))
    {
      if ((v13 & 2) != 0)
        v16 = v14;
      else
        v16 = 1;
      if ((v16 & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "didSendMessage:forChat:style:", v3, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 96));
        v17 = *(void **)(a1 + 32);
        objc_msgSend(v3, "guid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "_setTimeoutTimerForRelayMessageID:timeout:", v18, 180.0);

        v15 = 0;
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "sendMessageFromIMMessageItem:forChat:chat:style:", v3, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 96), v14);
      v15 = 1;
    }
    BYTE2(v23) = (v13 & 4) != 0;
    BYTE1(v23) = *(_BYTE *)(a1 + 98);
    LOBYTE(v23) = (v13 & 8) != 0;
    objc_msgSend(*(id *)(a1 + 32), "_finishSendingMessageItem:chatIdentifier:chatStyle:foundChat:didSendSMS:attemptingReplication:shouldForceFail:watchSendsOverCellular:forceReflection:callerID:", v3, *(_QWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 56), v15, *(unsigned __int8 *)(a1 + 97), v23, *(_QWORD *)(a1 + 48));
    v19 = *(_QWORD *)(a1 + 64);
    v20 = *(unsigned __int8 *)(a1 + 96);
    v21 = *(_QWORD *)(a1 + 72);
    v24.receiver = *(id *)(a1 + 32);
    v24.super_class = (Class)IMDTelephonyServiceSession;
    objc_msgSendSuper2(&v24, sel_sendMessage_toChat_style_account_, v3, v19, v20, v21);
  }
  else if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "No message, cannot continue sending!", buf, 2u);
    }

  }
}

uint64_t sub_1D14886C4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setServiceCompatibleContentOn_forChat_style_from_completionBlock_);
}

id sub_1D1488D18(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "transferForGUID:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "localPath");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1D1488D88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v26 = a3;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 32);
  IMBalloonExtensionIDWithSuffix();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "isEqualToString:", v8);

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v10 = v5;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v28 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        if (v9)
        {
          objc_msgSend(v10, "lastObject");
          v16 = (void *)objc_claimAutoreleasedReturnValue();

          if (v15 == v16)
            continue;
        }
        +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "createNewOutgoingTransferWithLocalFileURL:", v15);
        v18 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v6, "addObject:", v18);
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v31, 16);
    }
    while (v12);
  }

  if (objc_msgSend(v6, "count"))
  {
    v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E92346B0);
    v20 = (void *)IMCreateSuperFormatStringWithAppendedFileTransfers();
    v21 = (void *)objc_msgSend(v20, "mutableCopy");
    objc_msgSend(*(id *)(a1 + 40), "setBody:", v21);
    objc_msgSend(*(id *)(a1 + 40), "setFileTransferGUIDs:", v6);

  }
  if (v26)
  {
    v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v26);
    objc_msgSend(*(id *)(a1 + 40), "body");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (v23)
    {
      v24 = v23;
      v25 = (id)objc_msgSend(v23, "mutableCopy");
      objc_msgSend(v25, "appendAttributedString:", v22);

    }
    else
    {
      v25 = v22;
    }
    objc_msgSend(*(id *)(a1 + 40), "setBody:", v25);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_1D1489008(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "im_generateCopyForURL:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v3;
    if (v5)
    {
      v6 = v5;

    }
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(MEMORY[0x1E0D39CC0], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "type");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "service");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "transcodeTarget");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", *(_QWORD *)(a1 + 64));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "transcoderUserInfo");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D148921C;
  v18[3] = &unk_1E922A000;
  v19 = v6;
  v14 = *(id *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  v20 = v14;
  v21 = v15;
  v22 = *(id *)(a1 + 56);
  v16 = v6;
  LOBYTE(v17) = 0;
  objc_msgSend(v7, "transcodeFallbackFileTransferContents:utiType:allowUnfilteredUTIs:target:sizes:commonCapabilities:maxDimension:transcoderUserInfo:representations:isLQMEnabled:completionBlock:", v16, v8, MEMORY[0x1E0C9AA60], v10, v12, 0, -1, v13, 0, v17, v18);

}

void sub_1D148921C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a8;
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v23 = 138412546;
      v24 = v19;
      v25 = 2112;
      v26 = v14;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "fallback transcoded %@ to %@", (uint8_t *)&v23, 0x16u);
    }

  }
  if (objc_msgSend(v14, "count"))
  {
    v20 = *(void **)(a1 + 40);
    objc_msgSend(v14, "lastObject");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "guid");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v21, v22);

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));

}

void sub_1D14893B0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "fileTransferGUIDs");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "mutableCopy");
  v4 = v3;
  if (v3)
    v5 = v3;
  else
    v5 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6 = v5;

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = *(id *)(a1 + 40);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v21 != v9)
          objc_enumerationMutation(obj);
        v11 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
        +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "objectForKey:", v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "createNewOutgoingTransferWithLocalFileURL:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();

        v15 = objc_msgSend(v6, "indexOfObject:", v11);
        if (v15 == 0x7FFFFFFFFFFFFFFFLL)
          objc_msgSend(v6, "addObject:", v14);
        else
          objc_msgSend(v6, "replaceObjectAtIndex:withObject:", v15, v14);

      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v8);
  }

  if (objc_msgSend(v6, "count"))
  {
    v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", &stru_1E92346B0);
    v17 = (void *)IMCreateSuperFormatStringWithAppendedFileTransfers();
    v18 = (void *)objc_msgSend(*(id *)(a1 + 48), "copyForBackwardsCompatibility");
    objc_msgSend(v18, "setFileTransferGUIDs:", v6);
    objc_msgSend(v18, "setBody:", v17);
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1D14898F8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v7);
        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "messageWithGUID:", v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListeners");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "accountID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "account:chat:style:chatProperties:messageUpdated:", v12, 0, 0, 0, v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

}

void sub_1D1489FE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1489E6CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D148A02C(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[5];
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  int v21;
  char v22;
  uint8_t buf[4];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = IMOSLoggingEnabled(v5);
  if ((_DWORD)v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v24 = v5;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Message Transcode and Upload complete, Parts: %@", buf, 0xCu);
    }

  }
  if (a3)
  {
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1D148A26C;
    v16[3] = &unk_1E922A078;
    v16[4] = v8;
    v17 = *(id *)(a1 + 48);
    v18 = *(id *)(a1 + 40);
    v21 = *(_DWORD *)(a1 + 72);
    v22 = *(_BYTE *)(a1 + 76);
    v10 = *(id *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    v19 = v10;
    v20 = v11;
    objc_msgSend(v8, "waitForChatRelayReadiness:withBlock:", v9, v16);

  }
  else
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        v24 = v13;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Failed to process and upload attachments for peer relay: %@", buf, 0xCu);
      }

    }
    if (!*(_BYTE *)(a1 + 72))
    {
      v14 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 48), "guid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "didReceiveError:forMessageID:forceError:", 4, v15, 1);

    }
  }

}

void sub_1D148A26C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "relayController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = *(_BYTE *)(a1 + 76);
  objc_msgSend(v3, "relayMessage:chat:didSendSMS:attemptingReplication:forceReflection:relayToWatchOnly:shouldDisableScreenTimeRestrictions:callerID:iMessageCapability:requiredCapabilities:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), v2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0);

}

void sub_1D148A2D0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v5;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Message Failed To Transcode and upload, error: %@", (uint8_t *)&v10, 0xCu);
    }

  }
  v8 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "guid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "didReceiveError:forMessageID:forceError:", 4, v9, 1);

}

void sub_1D148A3E4(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "relayController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v2) = *(_BYTE *)(a1 + 76);
  objc_msgSend(v3, "relayMessage:chat:didSendSMS:attemptingReplication:forceReflection:relayToWatchOnly:shouldDisableScreenTimeRestrictions:callerID:iMessageCapability:requiredCapabilities:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), v2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), 0);

}

void sub_1D148BA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D148BA54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D148BA64(uint64_t a1)
{

}

void sub_1D148BA6C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1D148BF70(uint64_t a1, void *a2, int a3, void *a4, int a5)
{
  id v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint8_t v14[8];
  _QWORD v15[4];
  id v16;
  id v17;
  int v18;

  v9 = a2;
  v10 = a4;
  v11 = v10;
  if (a3)
  {
    v12 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1D148C0C4;
    v15[3] = &unk_1E922A130;
    v16 = v12;
    v18 = a5;
    v17 = v11;
    objc_msgSend(v16, "buildWith:parts:completion:", v9, v17, v15);

  }
  else
  {
    if (IMOSLoggingEnabled(v10))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Message prepare failed, not sending", v14, 2u);
      }

    }
    objc_msgSend(v9, "setErrorCode:", 25);
    objc_msgSend(*(id *)(a1 + 40), "didSendMessage:forChat:style:", v9, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  }

}

uint64_t sub_1D148C0C4(uint64_t a1, int a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if (a2)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_sendWithCompletion_);
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Message build failed, not sending, cleaning up", v5, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "cleanupFailedBuildWithError:forParts:", *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 40));
}

void sub_1D148C180(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = CFSTR("NO");
      if (a2)
        v4 = CFSTR("YES");
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Message send success %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1D148D524(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v5;
  id v6;
  id v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v9 = a3;
    _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_DEFAULT, "SMSCTPhoneNumberChangedNotification: %@", buf, 0xCu);
  }

  v7 = a2;
  v6 = v7;
  im_dispatch_after();

}

uint64_t sub_1D148D6EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updatePhoneNumberCallerID");
}

uint64_t sub_1D148E66C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t v15[128];
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v17 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "handleOperation : %@", buf, 0xCu);
    }
  }
  if (objc_msgSend(*(id *)(a1 + 32), "isMemberOfClass:", objc_opt_class()))
  {
    v4 = *(void **)(a1 + 32);
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v5 = (void *)objc_msgSend(v4, "recordIDs", 0);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v12;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v12 != v7)
            objc_enumerationMutation(v5);
          if (objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * i), "recordName"), "isEqualToString:", CFSTR("CloudKitExitRecord")))objc_msgSend(*(id *)(a1 + 40), "_handleFetchingExitRecordOperation:", v4);
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v6);
    }
  }
  result = objc_msgSend(*(id *)(a1 + 32), "isMemberOfClass:", objc_opt_class());
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a1 + 32);
    result = objc_msgSend(*(id *)(a1 + 40), "_operationIsCloudKitMetricsOperation:", v10);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(a1 + 40), "_handleWritingCloudKitMetrics:", v10);
  }
  return result;
}

uint64_t sub_1D148E9E8(void *a1)
{
  objc_msgSend(MEMORY[0x1E0DE7910], "cancelPreviousPerformRequestsWithTarget:selector:object:", a1, sel_synchronize, 0);
  objc_msgSend(a1, "performSelector:withObject:afterDelay:", sel_synchronize, 0, 5.0);
  return 1;
}

void sub_1D148EA7C()
{
  IMDCKAttachmentSyncController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKAttachmentSyncController);
  v1 = (void *)qword_1ED935DA0;
  qword_1ED935DA0 = (uint64_t)v0;

}

void sub_1D148EC80()
{
  uint64_t v0;
  void *v1;

  +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EFC63CD0;
  qword_1EFC63CD0 = v0;

}

void sub_1D148F738(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 48);
      v10 = 134217984;
      v11 = v7;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "syncAttachmentsWithSyncType with type %ld finished", (uint8_t *)&v10, 0xCu);
    }

  }
  if ((_DWORD)a2
    && *(_QWORD *)(a1 + 48) == 1
    && (objc_msgSend(*(id *)(a1 + 32), "_hasCompletedRecoveryResync") & 1) == 0
    && IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_markResyncForDeleteRecoveryAs:", 2)))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Completed Delete Recovery Resync!", (uint8_t *)&v10, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "setIsDoingDeleteRecoverySync:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setDeviceConditionsToCheck:", 0);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);

}

void sub_1D148F8F0(uint64_t a1, int a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint8_t v12[16];
  uint8_t buf[16];

  v5 = a3;
  v6 = IMOSLoggingEnabled(v5);
  if (v5 || !a2)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Initial attachment sync failed. skipping metadata only sync.", v12, 2u);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Initial attachment sync succeeded. Proceeding with metadata only sync.", buf, 2u);
      }

    }
    v8 = *(void **)(a1 + 32);
    v9 = objc_msgSend(v8, "_numberOfMetadataBatchesOfAttachmentsToFetchInInitialSync");
    objc_msgSend(*(id *)(a1 + 32), "latestSyncTokenForSyncType:", 5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:", 0, 0, 5, 0, v9, v10, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1D148FA74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  id v19;
  uint8_t buf[16];

  if (objc_msgSend(*(id *)(a1 + 32), "_fetchedAllChangesFromCloudKit")
    && (*(_QWORD *)(a1 + 64) | 4) == 5
    && (objc_msgSend(*(id *)(a1 + 32), "_hasCompletedRecoveryResync") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_initResyncForDeleteRecovery");
  }
  if (objc_msgSend(*(id *)(a1 + 32), "_shouldMarkAllAttachmentsAsNeedingSync"))
  {
    objc_msgSend(*(id *)(a1 + 32), "clearLocalSyncState:", 3);
    objc_msgSend(*(id *)(a1 + 32), "_hasMarkedAllAttachmentsAsNeedingSync");
  }
  objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 1);
  v2 = objc_msgSend(*(id *)(a1 + 32), "setDeviceConditionsToCheck:", *(_QWORD *)(a1 + 72));
  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "*** Called into to do initial sync ****", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:forSyncType:", 0, *(_QWORD *)(a1 + 64));
    v3 = *(_QWORD *)(a1 + 64);
  }
  switch(v3)
  {
    case 0:
      v5 = *(void **)(a1 + 32);
      v6 = objc_msgSend(v5, "_numberOfBatchesOfAttachmentsToFetchInInitialSync");
      objc_msgSend(*(id *)(a1 + 32), "latestSyncTokenForSyncType:", *(_QWORD *)(a1 + 64));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:", 0, 1, 0, 0, v6, v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
      break;
    case 1:
      objc_msgSend(*(id *)(a1 + 32), "_markAllFailedAttachmentsAsNeedingSync");
      v10 = *(void **)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 64);
      objc_msgSend(v10, "latestSyncTokenForSyncType:", v11);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(_QWORD *)(a1 + 48);
      v12 = v10;
      v13 = 1;
      v14 = v11;
      goto LABEL_18;
    case 2:
      v8 = *(void **)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 40);
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = sub_1D148FD14;
      v18[3] = &unk_1E922A238;
      v19 = *(id *)(a1 + 48);
      objc_msgSend(v8, "_writeAttachmentsToCloudKitWithActivity:completionBlock:", v9, v18);
      v7 = v19;
      break;
    case 5:
      v15 = *(void **)(a1 + 32);
      objc_msgSend(v15, "latestSyncTokenForSyncType:", 5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = *(_QWORD *)(a1 + 40);
      v17 = *(_QWORD *)(a1 + 48);
      v12 = v15;
      v13 = 0;
      v14 = 5;
LABEL_18:
      objc_msgSend(v12, "_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:", v13, 0, v14, 0, -1, v7, v16, v17);
      break;
    default:
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CB8], 1, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
      break;
  }

}

void sub_1D148FD14(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1D148FDA4;
  v6[3] = &unk_1E92290A8;
  v4 = *(id *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v6);

}

uint64_t sub_1D148FDA4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32) == 0);
}

void sub_1D148FFAC(uint64_t a1)
{
  const __CFString *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  id v15;
  void *v16;
  uint64_t v17;
  const __CFString *v18;
  void *v19;
  __int128 v20;
  id obj;
  id v22;
  _QWORD aBlock[4];
  id v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  const __CFString *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = 0;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v27;
    *(_QWORD *)&v4 = 138412546;
    v20 = v4;
    do
    {
      v6 = 0;
      v7 = v2;
      do
      {
        if (*(_QWORD *)v27 != v5)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v6);
        objc_msgSend(*(id *)(a1 + 40), "_attachmentZoneID", v20);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "_attachmentZoneSalt");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "recordIDWithZoneID:salt:", v9, v10);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (v11)
        {
          objc_msgSend(*(id *)(a1 + 40), "recordIDToTransferMap");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "setObject:forKey:", v8, v11);

          objc_msgSend(v22, "addObject:", v11);
        }
        else if (IMOSLoggingEnabled(v12))
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v8, "cloudKitSyncState");
            IMStringFromCKSyncState();
            v15 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 40), "_attachmentZoneSalt");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = objc_msgSend(v16, "length");
            *(_DWORD *)buf = v20;
            v18 = CFSTR("YES");
            if (!v17)
              v18 = CFSTR("NO");
            v31 = v15;
            v32 = 2112;
            v33 = v18;
            _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "fetchAttachmentDataForTransfers: we weren't able to get a CKRecordID from a transfer; transfer sync state "
              "%@, non-empty salt %@",
              buf,
              0x16u);

          }
        }
        v2 = CFSTR(".UserInit");
        if ((objc_msgSend(v8, "fetchOptions") & 4) == 0)
        {
          if ((objc_msgSend(v8, "fetchOptions") & 8) != 0)
            v2 = CFSTR(".Compute");
          else
            v2 = v7;
        }

        ++v6;
        v7 = v2;
      }
      while (v3 != v6);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v3);
  }

  if (*(_QWORD *)(a1 + 56))
    objc_msgSend(*(id *)(a1 + 40), "setPerTransferProgress:");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D14902F4;
  aBlock[3] = &unk_1E922A2C8;
  v24 = *(id *)(a1 + 32);
  v25 = *(id *)(a1 + 64);
  v19 = _Block_copy(aBlock);
  objc_msgSend(*(id *)(a1 + 40), "_fetchAttachmentZoneRecords:desiredKeys:ognSuffix:removeTombstones:activity:completion:", v22, 1, v2, 0, *(_QWORD *)(a1 + 48), v19);

}

void sub_1D14902F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  objc_msgSend(*(id *)(a1 + 32), "__imArrayByApplyingBlock:", &unk_1E922A2A0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "__imSetFromArray");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v8, "count"))
  {
    objc_msgSend(v8, "allObjects");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = *(id *)(a1 + 40);
    v11 = v5;
    v12 = v6;
    IMDCoreSpotlightReindexMessagesWhileBlocking();

  }
  else
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
  }

}

id sub_1D1490420(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "guid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  IMMessageGuidFromIMFileTransferGuid();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t sub_1D149045C(_QWORD *a1)
{
  uint64_t result;

  result = a1[6];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, a1[4], a1[5]);
  return result;
}

void sub_1D1490670(uint64_t a1, void *a2, float a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  unint64_t v10;
  NSObject *v11;
  void *v12;
  float v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  double v19;
  __int16 v20;
  unint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a5;
  v10 = objc_msgSend(*(id *)(a1 + 32), "totalBytes");
  if (IMOSLoggingEnabled(v10))
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v8, "guid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = 138412802;
      v17 = v12;
      v18 = 2048;
      v19 = a3;
      v20 = 2048;
      v21 = v10;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Transfer %@ - %f complete of %llu bytes", (uint8_t *)&v16, 0x20u);

    }
  }
  if ((float)((float)v10 * a3) >= (float)v10)
    v13 = (float)v10;
  else
    v13 = (float)v10 * a3;
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "guid");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "updateTransfer:currentBytes:totalBytes:", v15, (unint64_t)v13, v10);

}

void sub_1D14907FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;

  if (*(_QWORD *)(a1 + 40))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = a2;
    objc_msgSend(a3, "containsObject:", v5);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

uint64_t sub_1D14909E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

void sub_1D1490BAC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1490B8CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D149100C(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  void *v22;
  unint64_t v23;
  int v24;
  void *v25;
  int v26;
  double v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t k;
  void *v40;
  uint64_t v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  BOOL v47;
  NSObject *v48;
  dispatch_time_t v49;
  void *v50;
  id v51;
  NSObject *v52;
  uint64_t v53;
  __int128 v54;
  id v55;
  id v56;
  _QWORD block[5];
  id v58;
  id v59;
  __int128 v60;
  unint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t buf[4];
  double v76;
  __int16 v77;
  id v78;
  _BYTE v79[128];
  _BYTE v80[128];
  _BYTE v81[128];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v56 = a2;
  v55 = a3;
  if (IMOSLoggingEnabled(v55))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v76 = *(double *)&v56;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Finished download of assets with Error: %@", buf, 0xCu);
    }

  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) += objc_msgSend(*(id *)(a1 + 32), "count");
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_QWORD *)(a1 + 40))
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v8 = v55;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v72;
      do
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v72 != v10)
            objc_enumerationMutation(v8);
          objc_msgSend(*(id *)(*((_QWORD *)&v71 + 1) + 8 * i), "guid");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v12);

        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v71, v81, 16);
      }
      while (v9);
    }

  }
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v13 = *(id *)(a1 + 32);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v67, v80, 16);
  if (v14)
  {
    v15 = *(_QWORD *)v68;
    do
    {
      for (j = 0; j != v14; ++j)
      {
        if (*(_QWORD *)v68 != v15)
          objc_enumerationMutation(v13);
        if (*(_QWORD *)(a1 + 40))
        {
          v17 = *(void **)(*((_QWORD *)&v67 + 1) + 8 * j);
          objc_msgSend(v17, "guid");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_msgSend(v6, "containsObject:", v18);

          if ((v19 & 1) == 0)
          {
            objc_msgSend(v17, "guid");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "addObject:", v20);

            objc_msgSend(*(id *)(a1 + 48), "fileTransferCenter");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "guid");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "removeTransferForGUID:", v22);

          }
        }
      }
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v67, v80, 16);
    }
    while (v14);
  }

  if (!v56)
  {
    v43 = objc_msgSend(v55, "count") == 0;
    v23 = *(_QWORD *)(a1 + 80);
    v44 = objc_msgSend(*(id *)(a1 + 48), "setAssetDownloadInProgress:", 0);
    if (!v43)
      goto LABEL_61;
    v27 = (double)v23 * 0.5 + 0.5;
LABEL_55:
    if (v23 <= 3)
      goto LABEL_56;
LABEL_61:
    if (IMOSLoggingEnabled(v44))
    {
      OSLogHandleForIMFoundationCategory();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218242;
        v76 = *(double *)&v23;
        v77 = 2112;
        v78 = v56;
        _os_log_impl(&dword_1D1413000, v52, OS_LOG_TYPE_INFO, "Failed downloading batch of assets, not kicking off another batch. (number of retries: %lu) Error was %@", buf, 0x16u);
      }

    }
    v53 = *(_QWORD *)(a1 + 64);
    if (v53)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v53 + 16))(v53, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), 0);
    goto LABEL_67;
  }
  v23 = *(_QWORD *)(a1 + 80);
  v24 = CKCanRetryForError();
  objc_msgSend(v56, "domain");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "isEqualToString:", *MEMORY[0x1E0C947D8]);

  v27 = (double)v23 * 0.5 + 0.5;
  if (v26)
  {
    objc_msgSend(v56, "userInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = *MEMORY[0x1E0C94808];
    objc_msgSend(v28, "objectForKey:", *MEMORY[0x1E0C94808]);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    if (v30)
    {
      objc_msgSend(v56, "userInfo");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "objectForKey:", v29);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "doubleValue");
      v27 = v33;

      v24 = 1;
    }
    if (objc_msgSend(v56, "code") == 2)
    {
      v66 = 0u;
      v64 = 0u;
      v65 = 0u;
      v63 = 0u;
      objc_msgSend(v56, "userInfo");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "objectForKeyedSubscript:", *MEMORY[0x1E0C94940]);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "allValues");
      v36 = (void *)objc_claimAutoreleasedReturnValue();

      v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v63, v79, 16);
      if (v37)
      {
        v38 = *(_QWORD *)v64;
        while (2)
        {
          for (k = 0; k != v37; ++k)
          {
            if (*(_QWORD *)v64 != v38)
              objc_enumerationMutation(v36);
            v40 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * k);
            if ((CKCanRetryForError() & 1) == 0)
            {
              v41 = objc_msgSend(v40, "code");
              if (v41 != 11)
              {
                if (IMOSLoggingEnabled(v41))
                {
                  OSLogHandleForIMFoundationCategory();
                  v46 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    v76 = *(double *)&v40;
                    _os_log_impl(&dword_1D1413000, v46, OS_LOG_TYPE_INFO, "Found a fatal partial error: %@", buf, 0xCu);
                  }

                }
                v42 = 0;
                goto LABEL_52;
              }
            }
          }
          v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v63, v79, 16);
          if (v37)
            continue;
          break;
        }
      }
      v42 = 1;
LABEL_52:

      v44 = objc_msgSend(*(id *)(a1 + 48), "setAssetDownloadInProgress:", 0);
      if ((v42 & 1) == 0)
        goto LABEL_61;
      goto LABEL_55;
    }
    v45 = objc_msgSend(v56, "code");
    if (!v24 || v45 == 11)
    {
      v47 = v45 != 11;
      v44 = objc_msgSend(*(id *)(a1 + 48), "setAssetDownloadInProgress:", 0);
      if (v47)
        goto LABEL_61;
      goto LABEL_55;
    }
  }
  else if ((v24 & 1) == 0)
  {
    v44 = objc_msgSend(*(id *)(a1 + 48), "setAssetDownloadInProgress:", 0);
    goto LABEL_61;
  }
  v44 = objc_msgSend(*(id *)(a1 + 48), "setAssetDownloadInProgress:", 0);
  if (++v23 >= 4)
    goto LABEL_61;
LABEL_56:
  if (IMOSLoggingEnabled(v44))
  {
    OSLogHandleForIMFoundationCategory();
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v76 = v27;
      _os_log_impl(&dword_1D1413000, v48, OS_LOG_TYPE_INFO, "Kicking off another asset download batch in %f seconds", buf, 0xCu);
    }

  }
  v49 = dispatch_time(0, (uint64_t)(v27 * 1000000000.0));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D14917F0;
  block[3] = &unk_1E922A390;
  v50 = *(void **)(a1 + 56);
  block[4] = *(_QWORD *)(a1 + 48);
  v62 = *(_BYTE *)(a1 + 88);
  v58 = v50;
  v61 = v23;
  v54 = *(_OWORD *)(a1 + 64);
  v51 = (id)v54;
  v60 = v54;
  v59 = v7;
  dispatch_after(v49, MEMORY[0x1E0C80D38], block);

LABEL_67:
}

uint64_t sub_1D14917F0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "_attachmentDownloadCanStart:withActivity:", *(unsigned __int8 *)(a1 + 80), *(_QWORD *)(a1 + 40));
  if ((_DWORD)v2)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__downloadAttachmentAssetsWithActivity_restoringAttachments_retryCount_numAttachmentsDownloaded_completion_);
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Attachment download can't start at this time, so stopping attachment sync", v5, 2u);
    }

  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), *(_QWORD *)(a1 + 48));
  return result;
}

uint64_t sub_1D14919D4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1D1491D3C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1491B8CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14922E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a4;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v12 = v7;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Done downloading purged attachments for chat %@", buf, 0xCu);
    }

  }
  if (*(_QWORD *)(a1 + 40))
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1D1492430;
    v8[3] = &unk_1E92290A8;
    v10 = *(id *)(a1 + 40);
    v9 = v5;
    dispatch_async(MEMORY[0x1E0C80D38], v8);

  }
}

uint64_t sub_1D1492430(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1D1492838(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14927F8);
  }
  _Unwind_Resume(a1);
}

void sub_1D14936B8(void *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1493210);
  }
  JUMPOUT(0x1D1493748);
}

uint64_t sub_1D1493754(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1493764(uint64_t a1)
{

}

void sub_1D149376C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_updateAttachmentGUIDIfNeededAndReturnTransfersToForceMarkAsSync:transfersToSyncRowIDs:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D1493BB4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1493B58);
  }
  _Unwind_Resume(a1);
}

void sub_1D1493C30(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  uint8_t buf[4];
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled(v3);
  if (v3)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v20 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Got error %@ writing attachment records. Stopping further writes", buf, 0xCu);
      }

    }
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
  else
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "NO error writing attachment records.", buf, 2u);
      }

    }
    v8 = IMIsRunningInAutomation();
    if ((_DWORD)v8)
    {
      objc_msgSend(MEMORY[0x1E0D397B8], "sharedInstance");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addNewAttachmentsSyncedCount:", objc_msgSend(*(id *)(a1 + 32), "count"));

    }
    v10 = *(_BYTE *)(a1 + 64) == 0;
    v11 = IMOSLoggingEnabled(v8);
    if (v10)
    {
      if (v11)
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Kicking off another batch of attachments to write", buf, 2u);
        }

      }
      v15 = *(void **)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = sub_1D1493F18;
      v17[3] = &unk_1E9227FA8;
      v18 = *(id *)(a1 + 56);
      objc_msgSend(v15, "_kickOffWriteOnCKQueueWithActivity:completion:", v16, v17);

    }
    else
    {
      if (v11)
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "** This was the last batch of attachment writes as the number of attachments to write up was less than max batch size Not writing more.", buf, 2u);
        }

      }
      v13 = *(_QWORD *)(a1 + 56);
      if (v13)
        (*(void (**)(uint64_t, _QWORD))(v13 + 16))(v13, 0);
    }
  }

}

uint64_t sub_1D1493F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

uint64_t sub_1D1493F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  return result;
}

uint64_t sub_1D1494234(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processAssetFetchPerRecordProgressBlock_progress_);
}

uint64_t sub_1D1494240(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processAssetFetchPerRecordCompletionBlock_recordID_error_);
}

uint64_t sub_1D1494254(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processAssetFetchOperationCompletionBlock_removeTombstones_operationID_error_);
}

uint64_t sub_1D1494BB8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordChanged_);
}

void sub_1D1494BC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  uint8_t v10[16];

  v6 = a2;
  v7 = a3;
  v8 = a4;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "recordZoneChangeTokensUpdatedBlock should not get called", v10, 2u);
    }

  }
}

uint64_t sub_1D1494C84(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordDeletion_);
}

uint64_t sub_1D1494C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:shouldWriteBackChanges:desiredKeys:syncType:error:currentBatchCount:maxBatchCount:activity:completionBlock:", a3, a2, a4, a5, *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), a6, *(_QWORD *)(a1 + 72) + 1, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D1494CE4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processFetchRecordChangesCompleted_completionBlock_);
}

uint64_t sub_1D1494F58(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processModifyPerRecordCallBack_error_);
}

uint64_t sub_1D1494F68(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processModifyRecordCompletion_deletedRecordIDs_error_completionBlock_);
}

void sub_1D1495108(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating attachment zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D14953C8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1D149543C;
  v3[3] = &unk_1E922A238;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_writeAttachmentsToCloudKitWithActivity:completionBlock:", v2, v3);

}

uint64_t sub_1D149543C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, a2);
  return result;
}

void sub_1D1495C7C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  __int128 v8;
  id v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int8x16_t v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  _QWORD block[4];
  int8x16_t v24;
  id v25;
  id v26;
  int8x16_t v27;
  __int128 v28;
  char v29;
  uint8_t buf[4];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v31 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Saving sync token %@", buf, 0xCu);
    }

  }
  v4 = objc_msgSend(*(id *)(a1 + 40), "setLatestSyncToken:forSyncType:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64));
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "_kickOffAssetFetchForTransfersIfNeededWithActivity:", *(_QWORD *)(a1 + 48));
    if (*(_BYTE *)(a1 + 96))
    {
      if (IMOSLoggingEnabled(v5))
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Kicking off another fetch of attachments", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 40), "syncBatchCompleted:", *(_QWORD *)(a1 + 80));
      objc_msgSend(*(id *)(a1 + 40), "_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:", *(unsigned __int8 *)(a1 + 97), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v10 = *(_BYTE *)(a1 + 97) == 0;
      v11 = IMOSLoggingEnabled(v5);
      if (v10)
      {
        if (v11)
        {
          OSLogHandleForIMFoundationCategory();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "No more attachments to pull down. Should write back changes was no *****", buf, 2u);
          }

        }
        objc_msgSend(*(id *)(a1 + 40), "ckQueue");
        v17 = objc_claimAutoreleasedReturnValue();
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = sub_1D149619C;
        v19[3] = &unk_1E9228700;
        v20 = *(id *)(a1 + 56);
        dispatch_async(v17, v19);

      }
      else
      {
        if (v11)
        {
          OSLogHandleForIMFoundationCategory();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "No more attachments to pull down. Setting IMCKFinishedFetchingAttachmentsFromCloudKit and kicking off a write", buf, 2u);
          }

        }
        objc_msgSend(MEMORY[0x1E0D397E8], "sharedInstance");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "setBool:forDomain:forKey:", 1, *MEMORY[0x1E0D37950], *MEMORY[0x1E0D37670]);

        objc_msgSend(*(id *)(a1 + 40), "_kickOffWriteIfNeededForSyncType:activity:completion:", *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
    }
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    objc_msgSend(*(id *)(a1 + 40), "ckQueue");
    v7 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1496148;
    block[3] = &unk_1E922A640;
    v29 = *(_BYTE *)(a1 + 97);
    v8 = *(_OWORD *)(a1 + 80);
    v27 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    v28 = v8;
    v18 = *(int8x16_t *)(a1 + 32);
    v9 = (id)v18.i64[0];
    v24 = vextq_s8(v18, v18, 8uLL);
    v25 = *(id *)(a1 + 48);
    v26 = *(id *)(a1 + 56);
    dispatch_async(v7, block);

  }
  else
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Done fetching attachments in initial fetch", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "ckQueue");
    v15 = objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = sub_1D1496180;
    v21[3] = &unk_1E9228700;
    v22 = *(id *)(a1 + 56);
    dispatch_async(v15, v21);

  }
}

uint64_t sub_1D1496148(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:", *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t sub_1D1496180(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

uint64_t sub_1D149619C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 16))(result, 1, 0);
  return result;
}

void sub_1D14961B8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint8_t buf[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "_attachmentZoneCreated");
  if ((_DWORD)v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:", *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "****** Failed creating attachment zone", buf, 2u);
      }

    }
    v4 = *(_QWORD *)(a1 + 48);
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CB8], 1, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

  }
}

uint64_t sub_1D14969D0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

uint64_t sub_1D14969E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateTransferUsingCKRecord:wasFetched:dispatchToMain:", *(_QWORD *)(a1 + 40), 0, 1);
}

uint64_t sub_1D14969F4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

void sub_1D1496A04(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  int v20;
  void *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "recordID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "recordName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "recordID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "recordName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v3, "isEqualToString:", v5);

  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0D39848], "transferGUIDOfRecord:", a1[4]);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D39848], "transferGUIDOfRecord:", a1[5]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "isEqualToString:", v9);
    v11 = v10;
    v12 = IMOSLoggingEnabled(v10);
    if (v11)
    {
      if (v12)
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          LOWORD(v20) = 0;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Server's GUID was different than we expected; aligning with the server's data",
            (uint8_t *)&v20,
            2u);
        }

      }
      objc_msgSend(a1[6], "_updateTransferUsingCKRecord:wasFetched:dispatchToMain:", a1[5], 0, 1);
    }
    else
    {
      if (v12)
      {
        OSLogHandleForIMFoundationCategory();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v20 = 138412546;
          v21 = v9;
          v22 = 2112;
          v23 = v8;
          _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "On conflict, the server record's GUID (%@) was different than the record we tried to update with GUID (%@); "
            "marking local attachment as synced, to skip it",
            (uint8_t *)&v20,
            0x16u);
        }

      }
      objc_msgSend(a1[6], "_markAttachmentWithROWID:withSyncState:", IMDAttachmentRecordRowIDForGUID(), 1);
    }

  }
  else
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(a1[5], "recordID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "recordName");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1[4], "recordID");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "recordName");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138412546;
        v21 = v16;
        v22 = 2112;
        v23 = v18;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Conflicting serverRecord was different than the one being updated (server: %@, local: %@)", (uint8_t *)&v20, 0x16u);

      }
    }
    objc_msgSend(a1[6], "_resetAttachmentSyncStateForRecord:toState:", a1[4], 2);
  }
}

uint64_t sub_1D1496CFC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__markTransferAsNotBeingAbleToSyncUsingCKRecord_);
}

uint64_t sub_1D1496D08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resetAttachmentSyncStateForRecord:toState:", *(_QWORD *)(a1 + 40), 2);
}

uint64_t sub_1D1496D18(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resetAttachmentSyncStateForRecord:toState:", *(_QWORD *)(a1 + 40), 0);
}

uint64_t sub_1D1496D28(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__markTransferAsNotBeingAbleToSyncUsingCKRecord_);
}

uint64_t sub_1D1496ED4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D1497184(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

uint64_t sub_1D1497194(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateTransferUsingCKRecord:wasFetched:dispatchToMain:", *(_QWORD *)(a1 + 40), 1, 1);
}

uint64_t sub_1D1497338(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:forSyncType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D14976DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D14977D4(uint64_t a1)
{
  float v1;

  v1 = *(double *)(a1 + 48);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0, 0, v1);
}

uint64_t sub_1D1497A10(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, float))(a1[6] + 16))(a1[6], a1[4], 1, a1[5], 100.0);
}

void sub_1D1497B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1497B74(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id obj;
  id v56;
  _QWORD v57[4];
  id v58;
  uint64_t v59;
  uint64_t *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD block[5];
  id v66;
  id v67;
  uint64_t v68;
  uint64_t *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  void (*v78)(uint64_t);
  id v79;
  uint8_t buf[4];
  void *v81;
  __int16 v82;
  uint64_t v83;
  _BYTE v84[128];
  _BYTE v85[128];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  v75 = &v74;
  v76 = 0x3032000000;
  v77 = sub_1D1493754;
  v78 = sub_1D1493764;
  v79 = 0;
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v81 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Attachment batch fetch complete with error %@", buf, 0xCu);
    }

  }
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v4)
  {
    if (objc_msgSend(v4, "code") != 2)
      goto LABEL_56;
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  }
  else
  {
    v5 = 0;
  }
  v6 = (void *)objc_msgSend(*(id *)(a1 + 32), "_recordsToProcessWithError:error:", *(_QWORD *)(a1 + 40), v5);
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v81 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Attachments to process %@", buf, 0xCu);
    }

  }
  v56 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  obj = v6;
  v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v85, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v71;
    v10 = MEMORY[0x1E0C80D38];
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v71 != v9)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 32), "recordIDToTransferMap");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "recordID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKey:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v15)
        {
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = sub_1D1498478;
          block[3] = &unk_1E922A6E0;
          block[4] = v12;
          v66 = v15;
          v17 = *(id *)(a1 + 40);
          v18 = *(_QWORD *)(a1 + 56);
          v67 = v17;
          v68 = v18;
          v69 = &v74;
          dispatch_sync(v10, block);

        }
        else if (IMOSLoggingEnabled(v16))
        {
          OSLogHandleForIMFoundationCategory();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v12, "recordID");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v81 = v20;
            _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Can't find transfer in pre-transfer map, for a CKRecord we fetched an asset for, recordID %@. CAN'T UPDATE!", buf, 0xCu);

          }
        }
        objc_msgSend(*(id *)(a1 + 32), "recordIDToTransferMap");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "recordID");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "removeObjectForKey:", v22);

        objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAssetsOnDiskForRecord:", v12);
        if (*(_BYTE *)(a1 + 64))
        {
          objc_msgSend(v12, "recordID");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "recordName");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v56, "addObject:", v24);

        }
      }
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v70, v85, 16);
    }
    while (v8);
  }

  if (*(_BYTE *)(a1 + 64))
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
    {
      objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "extractRecordIDsNotFoundFromCKPartialError:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v56, "addObjectsFromArray:", v26);
    }
    IMDAttachmentRecordDeleteTombStonedAttachmentsWithRecordIDs();
  }
  v27 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  if (v27)
  {
    objc_msgSend(v27, "userInfo");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "objectForKey:", *MEMORY[0x1E0C94940]);
    v54 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v54, "count"))
    {
      if (!v75[5])
      {
        v29 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v30 = (void *)v75[5];
        v75[5] = (uint64_t)v29;

      }
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      objc_msgSend(v54, "allKeys");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v61, v84, 16);
      if (v32)
      {
        v33 = *(_QWORD *)v62;
        do
        {
          for (j = 0; j != v32; ++j)
          {
            if (*(_QWORD *)v62 != v33)
              objc_enumerationMutation(v31);
            v35 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * j);
            objc_msgSend(*(id *)(a1 + 32), "recordIDToTransferMap");
            v36 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v36, "objectForKey:", v35);
            v37 = (void *)objc_claimAutoreleasedReturnValue();

            v39 = IMOSLoggingEnabled(v38);
            if ((_DWORD)v39)
            {
              OSLogHandleForIMFoundationCategory();
              v40 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v37, "guid");
                v41 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                v81 = v41;
                _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "We failed to fetch asset from CloudKit -- failing the transfer: %@", buf, 0xCu);

              }
            }
            if (v37)
            {
              objc_msgSend(v37, "_setFetchOptions:", 0);
              +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "updateTransferAsWaitingForAccept:", v37);

              objc_msgSend((id)v75[5], "addObject:", v37);
              objc_msgSend(*(id *)(a1 + 32), "recordIDToTransferMap");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "removeObjectForKey:", v35);

            }
            else if (IMOSLoggingEnabled(v39))
            {
              OSLogHandleForIMFoundationCategory();
              v44 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
              {
                v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
                *(_DWORD *)buf = 138412546;
                v81 = v35;
                v82 = 2112;
                v83 = v45;
                _os_log_impl(&dword_1D1413000, v44, OS_LOG_TYPE_INFO, "Can't find transfer in pre-transfer map, for a CKRecord we failed to fetch asset for, recordID %@, error %@", buf, 0x16u);
              }

            }
            objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v35);
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAssetsOnDiskForRecord:", v46);

          }
          v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v61, v84, 16);
        }
        while (v32);
      }

      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CB8], 5, 0);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "autoBugCaptureWithSubType:errorPayload:", qword_1EFC60748, v47);

    }
  }

LABEL_56:
  objc_msgSend(*(id *)(a1 + 32), "completionBlocksForAssetFetchOperations");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "objectForKey:", *(_QWORD *)(a1 + 48));
  v50 = (void *)objc_claimAutoreleasedReturnValue();

  if (v50)
  {
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 3221225472;
    v57[2] = sub_1D1498774;
    v57[3] = &unk_1E922A708;
    v51 = v50;
    v52 = *(_QWORD *)(a1 + 56);
    v58 = v51;
    v59 = v52;
    v60 = &v74;
    dispatch_sync(MEMORY[0x1E0C80D38], v57);
    objc_msgSend(*(id *)(a1 + 32), "completionBlocksForAssetFetchOperations");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "removeObjectForKey:", *(_QWORD *)(a1 + 48));

  }
  _Block_object_dispose(&v74, 8);

}

void sub_1D1498478(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("lqa"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2
    && (objc_msgSend(v2, "fileURL"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v4, "path"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v5, "length"),
        v5,
        v4,
        v6))
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = *(_QWORD *)(a1 + 40);
        v25 = 138412290;
        v26 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finalizing asset download for transfer %@", (uint8_t *)&v25, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "moveAssetFromRecord:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 40), "_setFetchOptions:", 0);
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "endTransfer:", v10);

    if (objc_msgSend(*(id *)(a1 + 48), "count"))
    {
      +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "removeTransferForGUID:", v12);

    }
  }
  else
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 40);
        v25 = 138412290;
        v26 = v14;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Asset not found in record, must not be synced to the cloud transfer %@", (uint8_t *)&v25, 0xCu);
      }

    }
    v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v16 = objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D37CB8], 6, 0);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "failTransfer:reason:", v20, 29);

    v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (!v21)
    {
      v22 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      v24 = *(void **)(v23 + 40);
      *(_QWORD *)(v23 + 40) = v22;

      v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    }
    objc_msgSend(v21, "addObject:", *(_QWORD *)(a1 + 40));
  }

}

uint64_t sub_1D1498774(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[4] + 16))(a1[4], *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
}

void sub_1D1498E04(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateTransfersWithCKRecord:recordWasFetched:downloadAsset:", *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  if (*(_BYTE *)(a1 + 64))
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "length"))
      objc_msgSend(*(id *)(a1 + 40), "_removeTransferFromiCloudBackupWithGuid:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  }
}

void sub_1D1498F4C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(*(id *)(a1 + 32), "downloadAssetsForTransferGUIDs");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1D1499030;
  v6[3] = &unk_1E922A780;
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v2;
  v5 = v2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v6);

  objc_msgSend(*(id *)(a1 + 32), "fetchAttachmentDataForTransfers:highQuality:perTransferProgress:activity:completion:", v5, 0, &unk_1E922A7C0, *(_QWORD *)(a1 + 40), 0);
  objc_msgSend(*(id *)(a1 + 32), "downloadAssetsForTransferGUIDs");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "removeAllObjects");

  objc_msgSend(*(id *)(a1 + 32), "setDownloadAssetsForTransferGUIDs:", 0);
}

void sub_1D1499030(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "fileTransferCenter");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "transferForGUID:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v5);
    objc_msgSend(*(id *)(a1 + 32), "fileTransferCenter");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "localPath");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "acceptTransfer:path:", v3, v8);

  }
  else if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "** No IMFileTransfer found for GUID %@", (uint8_t *)&v10, 0xCu);
    }

  }
}

void sub_1D1499180(float a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  unint64_t v9;
  NSObject *v10;
  void *v11;
  float v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  double v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a5;
  v9 = objc_msgSend(v7, "totalBytes");
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v7, "guid");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138412802;
      v16 = v11;
      v17 = 2048;
      v18 = a1;
      v19 = 2048;
      v20 = v9;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Transfer %@ - %f complete of %llu bytes", (uint8_t *)&v15, 0x20u);

    }
  }
  if ((float)((float)v9 * a1) >= (float)v9)
    v12 = (float)v9;
  else
    v12 = (float)v9 * a1;
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "guid");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "updateTransfer:currentBytes:totalBytes:", v14, (unint64_t)v12, v9);

}

void sub_1D1499384(uint64_t a1)
{
  id v2;

  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "markTransferAsNotSyncedSuccessfully:", *(_QWORD *)(a1 + 32));

}

void sub_1D1499444(uint64_t a1)
{
  id v2;

  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "markTransferAsNotSyncedSuccessfully:", *(_QWORD *)(a1 + 32));

}

void sub_1D1499504(uint64_t a1)
{
  id v2;

  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "resetSyncStateForRecord:toState:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

uint64_t sub_1D14996DC(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteAttachmentZone");

  return objc_msgSend(*(id *)(a1 + 32), "clearLocalSyncState:", 3);
}

void sub_1D14999C4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  _QWORD v14[3];
  char v15;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = *(_BYTE *)(a1 + 64);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1499ADC;
  v7[3] = &unk_1E922A860;
  v3 = *(void **)(a1 + 32);
  v8 = *(id *)(a1 + 40);
  v13 = v14;
  v9 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 48);
  v12 = v4;
  v10 = v5;
  v6 = v2;
  v11 = v6;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);

  _Block_object_dispose(v14, 8);
}

void sub_1D1499AC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D1499ADC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  _QWORD block[4];
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a2;
  objc_msgSend(v5, "recordID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "recordName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D1499C10;
  block[3] = &unk_1E922A838;
  v14 = v8;
  v15 = v7;
  v21 = *(_QWORD *)(a1 + 72);
  v22 = a3;
  v16 = *(id *)(a1 + 40);
  v20 = *(id *)(a1 + 64);
  v9 = *(void **)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = v5;
  v19 = v9;
  v10 = v5;
  v11 = v7;
  v12 = v8;
  dispatch_sync(MEMORY[0x1E0C80D38], block);

}

void sub_1D1499C10(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(void **)(a1 + 56);
    v4 = *(_QWORD *)(a1 + 64);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1D1499EDC;
    v17[3] = &unk_1E922A810;
    v18 = *(id *)(a1 + 72);
    v5 = *(id *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    v19 = v5;
    v22 = v6;
    v23 = v7;
    v20 = *(id *)(a1 + 48);
    v21 = *(id *)(a1 + 80);
    objc_msgSend(v3, "_validateTransferFromCloudKit:localTransfer:validateCompletion:", v4, v2, v17);

    v8 = v18;
  }
  else
  {
    if (IMOSLoggingEnabled(a1))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v25 = v10;
        v26 = 2112;
        v27 = v11;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "We fetched a record that we didn't try to fetch!! we wanted (guid %@) for recordName: %@", buf, 0x16u);

      }
    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CB8], 2, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24))
    {
      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "autoBugCaptureWithSubType:errorPayload:", IMDCKCacheDeleteAutoCaptureSubtype, v8);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
    }
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "domain");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v8, "code"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:", 0, 0, 0, 0, v14, v15);

    v16 = *(_QWORD *)(a1 + 96);
    if (v16 == objc_msgSend(*(id *)(a1 + 48), "count") - 1)
      (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  }

}

void sub_1D1499EDC(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5 || !a2)
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "guid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412290;
        v23 = v12;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "We failed to validate that we can delete transfer with guid: %@", (uint8_t *)&v22, 0xCu);

      }
    }
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "totalBytes"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "domain");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v6, "code"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:", 0, v14, 0, 0, v15, v16);

    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "autoBugCaptureWithSubType:errorPayload:", IMDCKCacheDeleteAutoCaptureSubtype, v6);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
    }
  }
  else
  {
    if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40))))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "guid");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412290;
        v23 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "We successfully fetched and validated that we can delete the transfer with guid: %@", (uint8_t *)&v22, 0xCu);

      }
    }
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "totalBytes"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:", 1, v10, 0, 0, 0, 0);

  }
  v18 = *(_QWORD *)(a1 + 72);
  v19 = objc_msgSend(*(id *)(a1 + 48), "count");
  if (v18 == v19 - 1)
  {
    if (IMOSLoggingEnabled(v19))
    {
      OSLogHandleForIMFoundationCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count"));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412290;
        v23 = v21;
        _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "We got to the last object in the array so we will call our completion block with transfers to delete count: %@", (uint8_t *)&v22, 0xCu);

      }
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1D149A244(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D149A074);
  }
  _Unwind_Resume(a1);
}

void sub_1D149A40C(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  __CFString *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v25;
  _QWORD v26[5];
  id v27;
  id v28;
  _BYTE *v29;
  _QWORD v30[4];
  id v31;
  _BYTE *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE buf[24];
  char v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2 = objc_msgSend(*(id *)(a1 + 32), "count");
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v3;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Validating %lu attachment downloads %@", buf, 0x16u);
    }

  }
  v25 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v5 = *(id *)(a1 + 32);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v34;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v34 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v9, "ckRecordIDFromExistingMetadata");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          objc_msgSend(v25, "addObject:", v10);
          objc_msgSend(v10, "recordName");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "setObject:forKey:", v9, v11);

          if (!IMOSLoggingEnabled(v12))
            goto LABEL_19;
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v9, "guid");
            v14 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "recordName");
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v14;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v15;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Adding transfer to fetch: %@ with record name: %@", buf, 0x16u);

          }
        }
        else
        {
          if (!IMOSLoggingEnabled(0))
            goto LABEL_19;
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v9;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Couldn't retrieve CKRecordID from file transfer %@", buf, 0xCu);
          }
        }

LABEL_19:
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
    }
    while (v6);
  }

  objc_msgSend(*(id *)(a1 + 40), "_attachmentZoneID");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (v16)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "isDoingDeleteRecoverySync"))
    {
      objc_msgSend(CFSTR("AttachmentSync"), "stringByAppendingString:", CFSTR("-DRR"));
      v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v18 = CFSTR("AttachmentSync");
    }
    objc_msgSend(*(id *)(a1 + 40), "CKOperationFactory");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "fetchAttachmentZoneRecords:desiredKeys:operationGroupName:activity:", v25, 1, v18, *(_QWORD *)(a1 + 48));
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v38 = *(_BYTE *)(a1 + 64);
    v22 = MEMORY[0x1E0C809B0];
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = sub_1D149A984;
    v30[3] = &unk_1E922A8B0;
    v23 = v4;
    v31 = v23;
    v32 = buf;
    objc_msgSend(v21, "setPerRecordCompletionBlock:", v30);
    v26[0] = v22;
    v26[1] = 3221225472;
    v26[2] = sub_1D149ABF4;
    v26[3] = &unk_1E922A900;
    v26[4] = *(_QWORD *)(a1 + 40);
    v27 = v23;
    v29 = buf;
    v28 = *(id *)(a1 + 56);
    objc_msgSend(v21, "setFetchRecordsCompletionBlock:", v26);
    objc_msgSend(*(id *)(a1 + 40), "_scheduleOperation:", v21);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Attachment zone ID is nil", buf, 2u);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1D149A984(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = v9;
  if (v9 && objc_msgSend(v9, "code") != 2)
  {
    v11 = *(void **)(a1 + 32);
    objc_msgSend(v8, "recordName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKey:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v14))
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v8, "recordName");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = 138412802;
        v23 = v16;
        v24 = 2112;
        v25 = v10;
        v26 = 2112;
        v27 = v13;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "We got an error back from CloudKit trying to fetch recordID: %@ with error: %@ transfer: %@", (uint8_t *)&v22, 0x20u);

      }
    }
    if (v13)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v13, "totalBytes"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v17 = 0;
    }
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "domain");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", objc_msgSend(v10, "code"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:", 0, v17, v19, v20, 0, 0);

    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "autoBugCaptureWithSubType:errorPayload:", IMDCKCacheDeleteAutoCaptureSubtype, v10);

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    }

  }
}

void sub_1D149ABF4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;

  v3 = *(void **)(a1 + 32);
  objc_msgSend(a2, "allValues");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D149ACA4;
  v7[3] = &unk_1E922A8D8;
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  objc_msgSend(v3, "_processAndValidateAttachmentRecordsEligibleForPurge:recordIDsToTransfers:capturedWithABC:completion:", v4, v6, v5, v7);

}

uint64_t sub_1D149ACA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D149B2DC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  uint64_t v14;
  id v15;

  v6 = a3;
  v7 = a4;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D149B39C;
  block[3] = &unk_1E92286D8;
  v12 = v6;
  v13 = v7;
  v8 = *(void **)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v8;
  v9 = v7;
  v10 = v6;
  dispatch_sync(MEMORY[0x1E0C80D38], block);

}

void sub_1D149B39C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v11 = 138412290;
      v12 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Deleting attachment operation deletedRecordIDs %@", (uint8_t *)&v11, 0xCu);
    }

  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(*(id *)(a1 + 32), "__imArrayByApplyingBlock:", &unk_1E922A940);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObjectsFromArray:", v5);

  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "errorAnalyzer");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "extractRecordIDsDeletedFromCKPartialError:", *(_QWORD *)(a1 + 40));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_msgSend(v7, "count");
    if (v8)
    {
      if (IMOSLoggingEnabled(v8))
      {
        OSLogHandleForIMFoundationCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          LOWORD(v11) = 0;
          _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Adding additional deleted record IDs from error", (uint8_t *)&v11, 2u);
        }

      }
      objc_msgSend(v4, "addObjectsFromArray:", v7);
    }

  }
  IMDAttachmentRecordDeleteTombStonedAttachmentsWithRecordIDs();
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
    (*(void (**)(uint64_t, _QWORD))(v10 + 16))(v10, *(_QWORD *)(a1 + 40));

}

uint64_t sub_1D149B578(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "recordName");
}

uint64_t sub_1D149BA98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D149BAAC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1D149BB68;
  v6[3] = &unk_1E922A9D0;
  v4 = *(id *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v6[4] = v5;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v2, "_deleteAttachmentsWithRecordIDs:completion:", v3, v6);

}

void sub_1D149BB68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  id *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD v14[5];
  id v15;
  id v16;
  _QWORD block[4];
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = IMOSLoggingEnabled(v3);
    if ((_DWORD)v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v4;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "********* Error while deleting attachments %@", buf, 0xCu);
      }

    }
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Rate limited while deleting", buf, 2u);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D149BDB8;
    block[3] = &unk_1E92290A8;
    v19 = *(id *)(a1 + 56);
    v18 = v4;
    dispatch_async(MEMORY[0x1E0C80D38], block);

    v8 = &v19;
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_msgSend(*(id *)(a1 + 40), "copy");
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1D149BDD8;
    v14[3] = &unk_1E922A9A8;
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(id *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 32);
    v16 = v12;
    v14[4] = v13;
    v15 = *(id *)(a1 + 48);
    objc_msgSend(v9, "_fetchAttachmentZoneRecords:desiredKeys:ognSuffix:removeTombstones:activity:completion:", v10, 1, CFSTR("DeleteRecovery"), 1, v11, v14);

    v8 = &v16;
  }

}

uint64_t sub_1D149BDB8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1D149BDD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  _QWORD v11[5];
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  uint8_t buf[4];
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = IMOSLoggingEnabled(v6);
  if (v5)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v18 = v5;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "********* Error while fetching non-orphaned deleted attachments %@", buf, 0xCu);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D149C008;
    block[3] = &unk_1E92290A8;
    v16 = *(id *)(a1 + 48);
    v15 = v5;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Kicking off another batch delete to cloudKit", buf, 2u);
      }

    }
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1D149C028;
    v11[3] = &unk_1E92290F8;
    v10 = *(void **)(a1 + 40);
    v11[4] = *(_QWORD *)(a1 + 32);
    v12 = v10;
    v13 = *(id *)(a1 + 48);
    dispatch_async(MEMORY[0x1E0C80D38], v11);

  }
}

uint64_t sub_1D149C008(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_1D149C028(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "syncAttachmentDeletesToCloudKitWithActivity:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D149CA48(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  int v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  objc_msgSend(v2, "toIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5 ^ 1u;
}

void sub_1D149CDFC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "IMDCKSyncState");
  v1 = (void *)qword_1ED935E98;
  qword_1ED935E98 = (uint64_t)v0;

}

void sub_1D149EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D149EF14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D149EF24(uint64_t a1)
{

}

uint64_t sub_1D149EF2C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t result;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Received PCSReportManateeStatus from PCS %u", (uint8_t *)v8, 8u);
    }

  }
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setObject:forKey:", v6, CFSTR("pcsStatus"));

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

void sub_1D149F3F8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D149F418(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1D149F3D4);
}

void sub_1D149F550(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D149F570(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1D149F52CLL);
}

void sub_1D149F678(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D149F698(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1D149F650);
}

void sub_1D149F75C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D149F77C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1D149F734);
}

void sub_1D149F8C4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1D149F8F0(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1D149F87CLL);
  }
  JUMPOUT(0x1D149F8E8);
}

void sub_1D149FE8C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1D14A0230(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  id v50;
  _QWORD v51[4];
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  _QWORD v56[4];
  id v57;
  _QWORD aBlock[4];
  id v59;
  id v60;
  id v61;
  id v62;
  uint8_t buf[4];
  id v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v50 = a3;
  if (v5
    && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "fileExistsAtPath:isDirectory:", v5, 0),
        v6,
        v7))
  {
    if (IMOSLoggingEnabled(v8))
    {
      OSLogHandleForIMEventCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v64 = v5;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Sticker found in cache %@", buf, 0xCu);
      }

    }
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(*(id *)(a1 + 32), "setUserInfo:", 0);
    if (v10
      && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v12 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v10, "path"),
          v13 = (void *)objc_claimAutoreleasedReturnValue(),
          v14 = objc_msgSend(v12, "fileExistsAtPath:", v13),
          v13,
          v12,
          v14))
    {
      if (IMOSLoggingEnabled(v11))
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v64 = v5;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
        }

      }
      +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "addDefaultGatekeeperPropertiesToDirectory:", v5);

      if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_setLocalURL:", v10)))
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v64 = v10;
          _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
        }

      }
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "messageGUID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "messageWithGUID:", v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0D39798], "sharedManager");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "checkExistingAttachmentSensitivityIfNeededFor:attachmentURL:isFromMe:", *(_QWORD *)(a1 + 32), v10, objc_msgSend(v20, "isFromMe"));
      v22 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "guid");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "endTransfer:", v23);

    }
    else if (IMOSLoggingEnabled(v11))
    {
      OSLogHandleForIMEventCategory();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v38, OS_LOG_TYPE_INFO, "Sticker not in cache. Attempting to download sticker ", buf, 2u);
      }

    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1D14A09A0;
    aBlock[3] = &unk_1E922AAA0;
    v59 = *(id *)(a1 + 48);
    v60 = *(id *)(a1 + 32);
    v61 = *(id *)(a1 + 40);
    v62 = *(id *)(a1 + 56);
    v24 = _Block_copy(aBlock);
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "messageGUID");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "messageWithGUID:", v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v27, "fileTransferGUIDs");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = objc_msgSend(v28, "indexOfObject:", *(_QWORD *)(a1 + 56));

    v30 = *(void **)(a1 + 64);
    objc_msgSend(v27, "guid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "retrieveLocalFileTransfer:attachmentIndex:path:requestURLString:ownerID:signature:decryptionKey:requestedSize:fileSize:progressBlock:completionBlock:", v31, v29, 0, 0, 0, 0, 0, CFSTR("Small"), 0, 0, v24);

    v10 = v59;
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "acceptTransfer:path:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
    objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
    v33 = v32;
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "messageGUID");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "messageWithGUID:", v35);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v10, "isFromMe"))
    {
      v36 = (void *)MEMORY[0x1E0D39A10];
      objc_msgSend(v10, "service");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "fromMeContextWithServiceName:", v37);
    }
    else
    {
      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "sender");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v39, "hasKnownSenderChatWithChatIdentifier:", v40);

      v42 = (void *)MEMORY[0x1E0D39A10];
      objc_msgSend(v10, "service");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "contextWithKnownSender:serviceName:", v41, v37);
    }
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    v43 = *(_QWORD *)(a1 + 32);
    v44 = *(void **)(a1 + 64);
    objc_msgSend(v44, "session");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v45, "sessionSpecificTransferIDForTransferID:", *(_QWORD *)(a1 + 56));
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "balloonBundleID");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = MEMORY[0x1E0C809B0];
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3221225472;
    v56[2] = sub_1D14A1084;
    v56[3] = &unk_1E9229908;
    v57 = *(id *)(a1 + 56);
    v51[0] = v48;
    v51[1] = 3221225472;
    v51[2] = sub_1D14A11A4;
    v51[3] = &unk_1E922AAC8;
    v52 = *(id *)(a1 + 32);
    v55 = v33;
    v53 = *(id *)(a1 + 40);
    v54 = *(id *)(a1 + 56);
    objc_msgSend(v44, "_receiveFileTransfer:transferID:balloonBundleID:senderContext:progressBlock:completionBlock:", v43, v46, v47, v49, v56, v51);

  }
}

void sub_1D14A09A0(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, int a6, void *a7)
{
  id v13;
  id v14;
  id v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  _QWORD aBlock[4];
  id v45;
  uint8_t buf[4];
  id v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v42 = a4;
  v14 = a5;
  v15 = a7;
  v16 = IMOSLoggingEnabled(v15);
  if (a6)
  {
    if (v16)
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v47 = v13;
        v48 = 2048;
        v49 = a3;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Received response for request message GUID %@ attachment index: %lu", buf, 0x16u);
      }

    }
    if (IMOSLoggingEnabled(objc_msgSend(v14, "writeToFile:atomically:", *(_QWORD *)(a1 + 32), 1, v42)))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "guid");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v47 = v19;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Located transfer with GUID: %@", buf, 0xCu);

      }
    }
    objc_msgSend(*(id *)(a1 + 40), "setUserInfo:", 0);
    v20 = *(void **)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", *(_QWORD *)(a1 + 32));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "_setLocalURL:", v21);

    objc_msgSend(*(id *)(a1 + 48), "endTransfer:", *(_QWORD *)(a1 + 56));
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "updateFileTransfer:", *(_QWORD *)(a1 + 40));

    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "transferForGUID:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1D14A0EA4;
    aBlock[3] = &unk_1E922AA78;
    v45 = *(id *)(a1 + 40);
    v26 = _Block_copy(aBlock);
    if (IMOSLoggingEnabled(v26))
    {
      OSLogHandleForIMFoundationCategory();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v27, OS_LOG_TYPE_INFO, "Generating preview for attachment fetched from content after failing fetch from CK", buf, 2u);
      }

    }
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "messageGUID");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "messageWithGUID:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v30, "isFromMe"))
    {
      v31 = (void *)MEMORY[0x1E0D39A10];
      objc_msgSend(v30, "service");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "fromMeContextWithServiceName:", v32);
    }
    else
    {
      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "sender");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend(v34, "hasKnownSenderChatWithChatIdentifier:", v35);

      v37 = (void *)MEMORY[0x1E0D39A10];
      objc_msgSend(v30, "service");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "contextWithKnownSender:serviceName:", v36, v32);
    }
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D39CD8], "sharedInstance");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = *(_QWORD *)(a1 + 32);
    objc_msgSend(v30, "balloonBundleID");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "generatePreviewForTransfer:attachmentPath:balloonBundleID:senderContext:completionBlock:", v25, v40, v41, v38, v26);

  }
  else
  {
    if (v16)
    {
      OSLogHandleForIMFoundationCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Message has failed to be retrieved from peer for our request", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 48), "resetTransfer:andPostError:", *(_QWORD *)(a1 + 56), v15, v42);
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "updateFileTransfer:", *(_QWORD *)(a1 + 40));
  }

}

void sub_1D14A0EA4(uint64_t a1, void *a2, int a3, void *a4, double a5, double a6)
{
  id v11;
  id v12;
  NSObject *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _OWORD v19[2];
  uint64_t v20;
  uint8_t buf[32];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a4;
  if (IMOSLoggingEnabled(v12))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = CFSTR("NO");
      if (a3)
        v14 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v12;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Generated preview, success %@ error %@", buf, 0x16u);
    }

  }
  if ((a3 & 1) != 0)
  {
    v22 = 0;
    memset(buf, 0, sizeof(buf));
    IMClientPreviewConstraints();
    *(double *)v19 = a5;
    *((double *)v19 + 1) = a6;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v19, "{CGSize=dd}");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = *(_OWORD *)buf;
    v19[1] = *(_OWORD *)&buf[16];
    v20 = v22;
    objc_msgSend(v16, "updateTransfer:withPreviewSize:forConstraints:", v11, v15, v19);

  }
  else
  {
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "failTransferPreviewGeneration:", v18);

  }
}

void sub_1D14A1084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = 134218496;
      v11 = a2;
      v12 = 2048;
      v13 = a3;
      v14 = 2048;
      v15 = a4;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Receive progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }

  }
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "updateTransfer:currentBytes:totalBytes:", *(_QWORD *)(a1 + 32), a2, a3);

}

void sub_1D14A11A4(uint64_t a1, void *a2, void *a3, int a4, char a5, void *a6, void *a7, double a8, double a9)
{
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;
  NSObject *v26;
  double v27;
  double v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  int v33;
  NSObject *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _OWORD v55[2];
  uint64_t v56;
  uint8_t buf[32];
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  v18 = a3;
  v19 = a6;
  v20 = a7;
  v21 = IMOSLoggingEnabled(v20);
  if ((_DWORD)v21)
  {
    OSLogHandleForIMEventCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = *(_QWORD *)(a1 + 32);
      v24 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      if (a4)
        v24 = CFSTR("YES");
      *(_QWORD *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v24;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = v19;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Finished accepting/downloading transfer: %@   success: %@  error: %@", buf, 0x20u);
    }

  }
  v25 = IMOSLoggingEnabled(v21);
  if ((_DWORD)v25)
  {
    OSLogHandleForIMFoundationCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
      v28 = v27 - *(double *)(a1 + 56);
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v28;
      _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
    }

  }
  if (a4)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v18);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = objc_msgSend(*(id *)(a1 + 32), "setUserInfo:", 0);
    if (v29
      && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v31 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v29, "path"),
          v32 = (void *)objc_claimAutoreleasedReturnValue(),
          v33 = objc_msgSend(v31, "fileExistsAtPath:", v32),
          v32,
          v31,
          v33))
    {
      if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_setLocalURL:", v29)))
      {
        OSLogHandleForIMFoundationCategory();
        v34 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v29;
          _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
        }

      }
      v35 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "guid");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "endTransfer:", v36);

    }
    else if (IMOSLoggingEnabled(v30))
    {
      OSLogHandleForIMFoundationCategory();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v38 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v38;
        _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", buf, 0xCu);
      }

    }
  }
  else
  {
    if (IMOSLoggingEnabled(v25))
    {
      OSLogHandleForIMFoundationCategory();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        v41 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v41;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "Failed retreiving file transfer: %@   error: %@", buf, 0x16u);
      }

    }
    v42 = v19;
    v43 = objc_msgSend(v42, "code");
    if (IMOSLoggingEnabled(v43))
    {
      OSLogHandleForIMFoundationCategory();
      v44 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v42;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v43 != 8;
        _os_log_impl(&dword_1D1413000, v44, OS_LOG_TYPE_INFO, "Checking _IsFileTransferErrorRecoverable %@, (%d)", buf, 0x12u);
      }

    }
    v45 = *(void **)(a1 + 40);
    v46 = *(_QWORD *)(a1 + 48);
    if (v43 != 8)
    {
      objc_msgSend(v45, "resetTransfer:andPostError:", v46, v42);
      goto LABEL_42;
    }
    v39 = objc_msgSend(v45, "failTransfer:error:", v46, v42);
  }
  if (IMOSLoggingEnabled(v39))
  {
    OSLogHandleForIMFoundationCategory();
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      v48 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v48;
      _os_log_impl(&dword_1D1413000, v47, OS_LOG_TYPE_INFO, "Updating clients with final transfer: %@", buf, 0xCu);
    }

  }
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v49, "updateFileTransfer:", *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(a1 + 40), "postHubbleDownloadFinishedIfNeededForTransfer:", *(_QWORD *)(a1 + 32));
  if ((a5 & 1) != 0)
  {
    v58 = 0;
    memset(buf, 0, sizeof(buf));
    IMClientPreviewConstraints();
    *(double *)v55 = a8;
    *((double *)v55 + 1) = a9;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v55, "{CGSize=dd}");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = *(_QWORD *)(a1 + 48);
    v55[0] = *(_OWORD *)buf;
    v55[1] = *(_OWORD *)&buf[16];
    v56 = v58;
    objc_msgSend(v51, "updateTransfer:withPreviewSize:forConstraints:", v52, v50, v55);

  }
  else
  {
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v53, "failTransferPreviewGeneration:", v54);

  }
LABEL_42:

}

void sub_1D14A2288(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  int v27;
  NSObject *v28;
  __CFString *v29;
  __CFString *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  uint64_t v43;
  void *v44;
  const __CFString *v45;
  const __CFString *v46;
  void *v47;
  void *v48;
  _QWORD v49[4];
  __CFString *v50;
  id v51;
  uint8_t buf[4];
  const __CFString *v53;
  __int16 v54;
  const __CFString *v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(v3, "objectForKey:", CFSTR("result"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(v4, "objectForKey:", CFSTR("fileURL"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "URLWithString:", v7);
    v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "objectForKey:", CFSTR("utType"));
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKey:", CFSTR("mimeType"));
    v9 = objc_claimAutoreleasedReturnValue();
    v47 = (void *)v9;
    if (v8)
    {
      objc_msgSend(*(id *)(a1 + 32), "_setLocalURL:", v8);
      objc_msgSend(*(id *)(a1 + 32), "setType:", v48);
      objc_msgSend(*(id *)(a1 + 32), "setMimeType:", v47);
      objc_msgSend(*(id *)(a1 + 32), "setThumbnailMode:", 0);
      +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "storeAttachment:associateWithMessageWithGUID:", *(_QWORD *)(a1 + 32), 0);

      objc_msgSend(MEMORY[0x1E0D39CD8], "sharedInstance");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 32);
      -[__CFString path](v8, "path");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *(_QWORD *)(a1 + 40);
      v15 = *(_QWORD *)(a1 + 48);
      v49[0] = MEMORY[0x1E0C809B0];
      v49[1] = 3221225472;
      v49[2] = sub_1D14A292C;
      v49[3] = &unk_1E922AB18;
      v51 = *(id *)(a1 + 72);
      v50 = v8;
      objc_msgSend(v11, "generatePreviewForTransfer:attachmentPath:balloonBundleID:senderContext:completionBlock:", v12, v13, v14, v15, v49);

      if (*(_QWORD *)(a1 + 80))
      {
        if (IMOSLoggingEnabled(v16))
        {
          OSLogHandleForIMFoundationCategory();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(*(id *)(a1 + 32), "guid");
            v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v53 = v18;
            _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Attempting to relay message after tap to download of %@", buf, 0xCu);

          }
        }
        +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance", v47);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "messageForTransferGUID:shouldLoadAttachments:", v20, 1);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "chatForMessage:", v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue();

        if (v21)
          v25 = v23 == 0;
        else
          v25 = 1;
        v26 = !v25;
        v27 = IMOSLoggingEnabled(v24);
        if (v26)
        {
          if (v27)
          {
            OSLogHandleForIMFoundationCategory();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v21, "guid");
              v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v23, "guid");
              v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(a1 + 32), "guid");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412802;
              v53 = v29;
              v54 = 2112;
              v55 = v30;
              v56 = 2112;
              v57 = (uint64_t)v31;
              _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "Relaying message %@ for chat %@ after tap to download of %@", buf, 0x20u);

            }
          }
          +[IMDRelayServiceController sharedInstance](IMDRelayServiceController, "sharedInstance");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 56), "session");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "service");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v34, "internalName");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "relayMessageToPeers:forChat:serviceName:reflectOnly:requiredCapabilities:", v21, v23, v35, 0, 0);

        }
        else if (v27)
        {
          OSLogHandleForIMFoundationCategory();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(*(id *)(a1 + 32), "guid");
            v43 = objc_claimAutoreleasedReturnValue();
            v44 = (void *)v43;
            v45 = CFSTR("NO");
            if (v23)
              v46 = CFSTR("YES");
            else
              v46 = CFSTR("NO");
            *(_DWORD *)buf = 138412802;
            if (v21)
              v45 = CFSTR("YES");
            v53 = v45;
            v54 = 2112;
            v55 = v46;
            v56 = 2112;
            v57 = v43;
            _os_log_impl(&dword_1D1413000, v42, OS_LOG_TYPE_INFO, "Relay after TapToDownload failed, couldn't find msg (%@) or chat (%@) for transfer %@", buf, 0x20u);

          }
        }

      }
      v41 = v51;
    }
    else
    {
      if (IMOSLoggingEnabled(v9))
      {
        OSLogHandleForIMFoundationCategory();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v38, OS_LOG_TYPE_INFO, "No file found after download from RCS", buf, 2u);
        }

      }
      v39 = *(_QWORD *)(a1 + 72);
      if (!v39)
        goto LABEL_44;
      v40 = *(_QWORD *)(a1 + 64);
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.Messages.AttachmentControllerErrorDomain"), 4, 0);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, void *, _QWORD, double, double))(v39 + 16))(v39, v40, 0, 0, 0, v41, 0, 0.0, 0.0);
    }

LABEL_44:
    goto LABEL_45;
  }
  objc_msgSend(v3, "objectForKey:", CFSTR("error"));
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v53 = v8;
      _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Failed to download from RCS, error %@", buf, 0xCu);
    }

  }
  v37 = *(_QWORD *)(a1 + 72);
  if (v37)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __CFString *, _QWORD, double, double))(v37 + 16))(v37, *(_QWORD *)(a1 + 64), 0, 0, 0, v8, 0, 0.0, 0.0);
LABEL_45:

}

void sub_1D14A292C(uint64_t a1, void *a2, uint64_t a3, void *a4, double a5, double a6)
{
  uint64_t v6;
  void *v11;
  id v12;
  id v13;
  id v14;

  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v11 = *(void **)(a1 + 32);
    v12 = a4;
    v13 = a2;
    objc_msgSend(v11, "path");
    v14 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, id, uint64_t, uint64_t, id, _QWORD, double, double))(v6 + 16))(v6, v13, v14, 1, a3, v12, 0, a5, a6);

  }
}

uint64_t sub_1D14A29F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14A2A04(uint64_t a1)
{

}

void sub_1D14A2A0C(_QWORD *a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v23 = a3;
  v24 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = v16;
  if (a2)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1[4] + 8) + 40), a3);
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a4);
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a5);
    objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), a7);
    objc_storeStrong((id *)(*(_QWORD *)(a1[8] + 8) + 40), a6);
    if (IMOSLoggingEnabled(v18))
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
        v21 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40);
        *(_DWORD *)buf = 138412546;
        v26 = v20;
        v27 = 2112;
        v28 = v21;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "For default file transfer download, using signature %@ file size %@", buf, 0x16u);
      }

    }
  }
  else if (IMOSLoggingEnabled(v16))
  {
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Unable to find default file transfer info to download", buf, 2u);
    }

  }
}

void sub_1D14A3104(_QWORD *a1)
{
  uint64_t v2;
  void (**v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend((id)qword_1EFC63CE0, "objectForKey:", a1[4]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v2;
  if (v2)
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = a1[4];
        v7 = 138412290;
        v8 = v5;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Timed out waiting for peer attachment completion for attachment: %@", (uint8_t *)&v7, 0xCu);
      }

    }
    v3[2](v3, a1[5], a1[6], 0, 0, 0, 0);
    objc_msgSend((id)qword_1EFC63CE0, "removeObjectForKey:", a1[4]);
    if (!objc_msgSend((id)qword_1EFC63CE0, "count"))
    {
      v6 = (void *)qword_1EFC63CE0;
      qword_1EFC63CE0 = 0;

    }
  }

}

uint64_t sub_1D14A4ED4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_remotefileRequest_attempts_shouldRetry_);
}

void sub_1D14A4EEC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  __CFString *v15;
  id v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  const __CFString *v20;
  const __CFString *v21;
  int v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  BOOL v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  NSObject *v39;
  int v40;
  uint64_t v41;
  const __CFString *v42;
  NSObject *v43;
  const __CFString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  uint8_t buf[4];
  const __CFString *v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v15 = a3;
  v51 = a4;
  v16 = a5;
  v17 = a8;
  v18 = IMOSLoggingEnabled(v17);
  if ((_DWORD)v18)
  {
    OSLogHandleForIMEventCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = CFSTR("NO");
      v21 = *(const __CFString **)(a1 + 32);
      if (a7)
        v20 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v54 = v21;
      v55 = 2112;
      v56 = (unint64_t)v20;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }

  }
  v22 = IMOSLoggingEnabled(v18);
  if (a6)
  {
    if (v22)
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v54 = v15;
        _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }

    }
    -[__CFString lastObject](v15, "lastObject", v49, v51);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v25;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (*(_BYTE *)(v27 + 24))
    {
      v28 = 1;
    }
    else
    {
      v25 = (void *)objc_msgSend(v25, "length");
      v28 = (unint64_t)v25 > 0x100000;
      v27 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    }
    *(_BYTE *)(v27 + 24) = v28;
    if (IMOSLoggingEnabled(v25))
    {
      OSLogHandleForIMFoundationCategory();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        v40 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
        v41 = objc_msgSend(v26, "length");
        v42 = CFSTR("YES");
        if (!v40)
          v42 = CFSTR("NO");
        *(_DWORD *)buf = 138412546;
        v54 = v42;
        v55 = 2048;
        v56 = v41;
        _os_log_impl(&dword_1D1413000, v39, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%lu", buf, 0x16u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "_sendAttachmentToPeerDevice:fileTransferGUID:messageGuid:fileURL:useLocalPeersFileAPI:error:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v24, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), 0);
  }
  else
  {
    if (v22)
    {
      OSLogHandleForIMFoundationCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "Transcoding Failed for Peer Relay:", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "localURL", v49, v51);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "path");
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    if (v24)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "attributesOfItemAtPath:error:", v24, 0);
      v33 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v33, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2AF0]);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "longValue");

      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      if (*(_BYTE *)(v36 + 24))
        v37 = 1;
      else
        v37 = v35 > 0x100000;
      v38 = v37;
      *(_BYTE *)(v36 + 24) = v38;

    }
    else
    {
      v35 = 0;
    }
    if (IMOSLoggingEnabled(v31))
    {
      OSLogHandleForIMFoundationCategory();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
          v44 = CFSTR("YES");
        else
          v44 = CFSTR("NO");
        *(_DWORD *)buf = 138412546;
        v54 = v44;
        v55 = 2048;
        v56 = v35;
        _os_log_impl(&dword_1D1413000, v43, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%ld", buf, 0x16u);
      }

    }
    v45 = *(_QWORD *)(a1 + 72);
    v47 = *(_QWORD *)(a1 + 48);
    v46 = *(_QWORD *)(a1 + 56);
    v48 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "localURL");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "_sendAttachmentToPeerDevice:fileTransferGUID:messageGuid:fileURL:useLocalPeersFileAPI:error:", v45, v47, v46, v26, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), 5);
  }

}

void sub_1D14A53F4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = IMOSLoggingEnabled(v7);
  if (!v6 || v7)
  {
    if (v8)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v16 = 138412290;
        v17 = v7;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "File safe render failed for Peer Relay: %@", (uint8_t *)&v16, 0xCu);
      }

    }
    v11 = *(_QWORD *)(a1 + 72);
    v13 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    objc_msgSend(*(id *)(a1 + 56), "localURL");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "_sendAttachmentToPeerDevice:fileTransferGUID:messageGuid:fileURL:useLocalPeersFileAPI:error:", v11, v12, v14, v15, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), 5);

  }
  else
  {
    if (v8)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "File safe render success.", (uint8_t *)&v16, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_sendAttachmentToPeerDevice:fileTransferGUID:messageGuid:fileURL:useLocalPeersFileAPI:error:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v6, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), 0);
  }

}

uint64_t sub_1D14A55C4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_remotefileRequest_attempts_shouldRetry_);
}

uint64_t sub_1D14A55DC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_remotefileRequest_attempts_shouldRetry_);
}

void sub_1D14A5668(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1D14A57B8(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "_runIndividuallyWithInput:", *(_QWORD *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1D14A5840;
  v3[3] = &unk_1E922ABE0;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v2, "registerCompletionBlock:", v3);

}

void sub_1D14A5840(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = objc_msgSend(v3, "state");
  v5 = *(void **)(a1 + 32);
  if (v4 == 1)
  {
    objc_msgSend(v3, "error");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "failWithError:", v6);
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "fullfillWithValue:", v6);
  }

}

void sub_1D14A5ED8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14A5ECCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D14A6640(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a3;
  objc_msgSend(v4, "handleID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v4, "isReachable");

  v8 = objc_msgSend(a1, "initWithHandleID:service:isReachable:", v5, v6, v7);
  return v8;
}

uint64_t sub_1D14A66C4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (void *)MEMORY[0x1E0C99E08];
  objc_msgSend(v4, "handleResults");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryWithCapacity:", objc_msgSend(v6, "count"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  objc_msgSend(v4, "handleResults", 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v12);
        v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D39A38]), "initWithBlastDoorResult:", v13);
        objc_msgSend(v13, "handleID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v14, v15);

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }

  objc_msgSend(v4, "service");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v4, "error");
  if (v17 >= 7)
    v18 = -1;
  else
    v18 = v17;
  v19 = (void *)objc_msgSend(v7, "copy");
  v20 = objc_msgSend(a1, "initWithService:error:handleResults:isFinal:allAreReachable:didCheckServer:", v16, v18, v19, objc_msgSend(v4, "isFinal"), objc_msgSend(v4, "allAreReachable"), objc_msgSend(v4, "didCheckServer"));

  return v20;
}

void sub_1D14A6DB8()
{
  IMDFileTransferCenter *v0;
  void *v1;

  v0 = objc_alloc_init(IMDFileTransferCenter);
  v1 = (void *)qword_1ED935DA8;
  qword_1ED935DA8 = (uint64_t)v0;

}

uint64_t sub_1D14A87BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateTransferGUID:toGUID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1D14AD034(uint64_t a1, void *a2)
{
  char isKindOfClass;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = v8;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = v8;
    if (objc_msgSend(v5, "isFinished"))
    {
      v6 = *(void **)(a1 + 32);
      objc_msgSend(v5, "guid");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v7);

    }
    v4 = v8;
  }

}

void sub_1D14AD2CC(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void sub_1D14ADDA4()
{
  IMDExposureNotificationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDExposureNotificationManager);
  v1 = (void *)qword_1ED935DB0;
  qword_1ED935DB0 = (uint64_t)v0;

}

id sub_1D14ADDCC()
{
  return (id)objc_msgSend((id)qword_1ED935DB0, "_enManager");
}

uint64_t sub_1D14ADE30()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CAA370]);
  v1 = (void *)qword_1ED935F70;
  qword_1ED935F70 = (uint64_t)v0;

  return MEMORY[0x1E0DE7D20](qword_1ED935F70, sel_activateWithCompletionHandler_);
}

void sub_1D14ADE70(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = CFSTR("NO");
      if (!v2)
        v4 = CFSTR("YES");
      v5 = 138412290;
      v6 = v4;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Activated ENManager: %@", (uint8_t *)&v5, 0xCu);
    }

  }
}

void sub_1D14AE17C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "_allowedDomains", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v4);
          if (objc_msgSend(v3, "__im_conformsToDomain:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v8)))
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
          ++v8;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      }
      while (v6);
    }

  }
}

uint64_t sub_1D14AE360()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("ENTextMessage"), CFSTR("ExposureNotification"));
  qword_1EFC63CE8 = result;
  return result;
}

void sub_1D14AE544(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D14AE5D8;
  v5[3] = &unk_1E9229148;
  v6 = v3;
  v7 = *(id *)(a1 + 32);
  v4 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v5);

}

uint64_t sub_1D14AE5D8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = IMOSLoggingEnabled(a1);
  if (v2)
  {
    if (v3)
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v8 = 138412290;
        v9 = v5;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Error: %@", (uint8_t *)&v8, 0xCu);
      }

    }
  }
  else if (v3)
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Verified success", (uint8_t *)&v8, 2u);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1D14AE774()
{
  IMDOffGridAvailabilityVerificationManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDOffGridAvailabilityVerificationManager);
  v1 = (void *)qword_1ED936128;
  qword_1ED936128 = (uint64_t)v0;

}

void sub_1D14AE924(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  IMDAvailabilityVerificationTokens *v8;
  void *v9;
  void *v10;
  NSObject *v11;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_1D1668044(a1, (uint64_t)v7, v11);
  }
  else
  {
    v8 = [IMDAvailabilityVerificationTokens alloc];
    objc_msgSend(v5, "subscriptionValidationToken");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "encryptionValidationToken");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[IMDAvailabilityVerificationTokens initWithSubscriptionValidationToken:encryptionValidationToken:](v8, "initWithSubscriptionValidationToken:encryptionValidationToken:", v9, v10);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "setObject:forKey:", v11, *(_QWORD *)(a1 + 32));
  }

}

void sub_1D14AEBCC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  switch(a2)
  {
    case 2:
      if (IMOSLoggingEnabled(v5))
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v9 = *(_QWORD *)(a1 + 32);
          v10 = *(_QWORD *)(a1 + 40);
          v13 = 138412546;
          v14 = v9;
          v15 = 2112;
          v16 = v10;
          _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Received an invalid response when validating tokens, attempting to fix by potentially re-inviting senderHandleID %@ fromHandleID %@", (uint8_t *)&v13, 0x16u);
        }

      }
      objc_msgSend(MEMORY[0x1E0D39998], "sharedInstance");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "repairOffGridStatusWithHandleID:fromHandleID:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), &unk_1E922ADF8);

      break;
    case 1:
      if (IMOSLoggingEnabled(v5))
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Received a valid response when validating tokens, no further action needed.", (uint8_t *)&v13, 2u);
        }

      }
      break;
    case 0:
      IMLogHandleForCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1D1668140(v7);

      break;
  }

}

void sub_1D14AED94(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  id v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = 134218754;
      v11 = a2;
      v12 = 2048;
      v13 = a3;
      v14 = 2048;
      v15 = a4;
      v16 = 2112;
      v17 = v8;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Completed invitation. didAttemptInvitation: %ld, wasAlreadyInvited: %ld, didShare: %ld Error: %@", (uint8_t *)&v10, 0x2Au);
    }

  }
}

void sub_1D14AEF40()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  NSObject *v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  NSObject *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  qword_1ED935F88 = MEMORY[0x1D17EA3EC](CFSTR("PSYSyncCoordinator"), CFSTR("PairedSync"));
  v0 = MEMORY[0x1D17EA3EC](CFSTR("PSYServiceSyncSession"), CFSTR("PairedSync"));
  qword_1ED935F90 = v0;
  if (qword_1ED935F88)
  {
    if (v0)
      return;
    goto LABEL_10;
  }
  v1 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMPSYSyncCoordinator"), "void _IMDPairedSyncAPIInit(void)_block_invoke", IMFileLocationTrimFileName(), 67, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E92346B0));
  v2 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
  if (v2)
  {
    v2(v1);
  }
  else if (IMOSLoggingEnabled(0))
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v8 = v1;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
    }
  }
  if (!qword_1ED935F90)
  {
LABEL_10:
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unexpected nil '%@' in %s at %s:%d. %@"), CFSTR("IMPSYServiceSyncSession"), "void _IMDPairedSyncAPIInit(void)_block_invoke", IMFileLocationTrimFileName(), 68, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", &stru_1E92346B0));
    v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled(0))
    {
      v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v4;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

IMDQuickSwitchController *sub_1D14AF218()
{
  IMDQuickSwitchController *result;

  result = objc_alloc_init(IMDQuickSwitchController);
  qword_1ED935DB8 = (uint64_t)result;
  return result;
}

uint64_t sub_1D14B0000(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  uint8_t v7[16];

  IMTimingStopTimingForKey();

  v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", *(_QWORD *)(a1 + 32));
  if ((v4 & 1) == 0)
  {
    if (IMOSLoggingEnabled(v4))
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "QuickSwitch Could not create zipped DB", v7, 2u);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 40), "_getFileSizeAtPath:", *(_QWORD *)(a1 + 32));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1D14B031C(uint64_t a1, void *a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t result;
  uint8_t v7[16];

  IMTimingStopTimingForKey();

  v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", *(_QWORD *)(a1 + 32));
  if ((v4 & 1) == 0)
  {
    if (IMOSLoggingEnabled(v4))
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "QuickSwitch Could not create unzipped DB", v7, 2u);
      }
    }
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1D14B0F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];
  __int16 v10;

  v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", objc_msgSend(*(id *)(a1 + 32), "_getZippedDBPath"));
  if ((v2 & 1) == 0)
  {
    if (!IMOSLoggingEnabled(v2))
      goto LABEL_13;
    v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_13;
    v10 = 0;
    v6 = "We could not create zip file for QuickSwitch";
    v7 = (uint8_t *)&v10;
    goto LABEL_12;
  }
  v3 = objc_msgSend(*(id *)(a1 + 32), "_sendZippedFileAtPath:withCommand:", objc_msgSend(*(id *)(a1 + 32), "_getZippedDBPath"), 3);
  if (!(_DWORD)v3)
  {
    if (!IMOSLoggingEnabled(v3))
      goto LABEL_13;
    v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      goto LABEL_13;
    LOWORD(v8) = 0;
    v6 = "Database QuickSwitch: Could not send file over to gizmo. Bailing";
    v7 = (uint8_t *)&v8;
LABEL_12:
    _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, v6, v7, 2u);
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "_quickSwitchCompleted:", 0, v8);
    return;
  }
  if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_notifyPSYDataSent")))
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Sent zipped file to watch", buf, 2u);
    }
  }
}

uint64_t sub_1D14B130C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  __int16 v9;

  v2 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", *(_QWORD *)(a1 + 32));
  if ((v2 & 1) == 0)
  {
    if (!IMOSLoggingEnabled(v2))
      return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v8);
    v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v8);
    v9 = 0;
    v6 = "QuickSwitch we could not create zip file";
    v7 = (uint8_t *)&v9;
    goto LABEL_10;
  }
  v3 = objc_msgSend(*(id *)(a1 + 40), "_sendZippedFileAtPath:withCommand:", *(_QWORD *)(a1 + 32), 6);
  if ((_DWORD)v3)
    return objc_msgSend(*(id *)(a1 + 40), "_notifyPSYDataSent");
  if (IMOSLoggingEnabled(v3))
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8) = 0;
      v6 = "QuickSwitch could not send file over to gizmo. Bailing";
      v7 = (uint8_t *)&v8;
LABEL_10:
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, v6, v7, 2u);
    }
  }
  return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v8);
}

void sub_1D14B2BA8()
{
  IMDCKSyncTokenStore *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKSyncTokenStore);
  v1 = (void *)qword_1EFC63CF8;
  qword_1EFC63CF8 = (uint64_t)v0;

}

void sub_1D14B3D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D14B3D68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14B3D78(uint64_t a1)
{

}

void sub_1D14B3D80(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

uint64_t sub_1D14B4D7C()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("SWCollaborationNoticeTransmissionMessage"), CFSTR("SharedWithYouCore"));
  qword_1EFC63D08 = result;
  return result;
}

uint64_t sub_1D14B4DE8()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("SWCollaborationClearNoticeTransmissionMessage"), CFSTR("SharedWithYouCore"));
  qword_1EFC63D18 = result;
  return result;
}

void sub_1D14B59DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v20;
  _QWORD block[5];
  char *v22;
  id v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v7;
  if (v6)
  {
    IMLogHandleForCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1D1668534();
  }
  else
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 136315650;
        v25 = "-[IMDCollaborationNoticeDispatcher sendClearNotice:toHandles:]_block_invoke";
        v26 = 2112;
        v27 = v11;
        v28 = 2112;
        v29 = v8;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "%s Blastdoor completed processing Clear Collaboration Notice protobuf fromHandle: %@, notice: %@", buf, 0x20u);
      }

    }
    if (objc_msgSend(v8, "version") < 3)
    {
      v12 = objc_alloc(MEMORY[0x1E0D39778]);
      objc_msgSend(v8, "collaborationId");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "date");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "guidString");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (char *)objc_msgSend(v12, "initWithCollaborationId:date:guidString:", v13, v14, v15);

      if (IMOSLoggingEnabled(v17))
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 40), "delegate");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v25 = v16;
          v26 = 2112;
          v27 = v19;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Passing notice %@ to delegate %@", buf, 0x16u);

        }
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D14B5CE4;
      block[3] = &unk_1E9229280;
      v20 = *(void **)(a1 + 32);
      block[4] = *(_QWORD *)(a1 + 40);
      v22 = v16;
      v23 = v20;
      v9 = v16;
      dispatch_async(MEMORY[0x1E0C80D38], block);

    }
    else
    {
      IMLogHandleForCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1D166848C(v8);
    }
  }

}

void sub_1D14B5CE4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dispatcher:didReceiveDismissalRequest:fromID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1D14B6224(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  _QWORD block[5];
  char *v21;
  id v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  void *v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1D1668724();
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 136315650;
        v24 = "-[IMDCollaborationNoticeDispatcher handleIncomingNoticeProtobuf:service:account:fromID:context:]_block_invoke";
        v25 = 2112;
        v26 = v9;
        v27 = 2112;
        v28 = v5;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "%s Blastdoor completed processing Collaboration Notice protobuf fromHandle: %@, notice: %@", buf, 0x20u);
      }

    }
    if (objc_msgSend(v5, "version") < 2)
    {
      v10 = objc_alloc(MEMORY[0x1E0D39790]);
      objc_msgSend(v5, "highlightEvent");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v5, "highlightEventType");
      objc_msgSend(v5, "guidString");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "noticeDate");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (char *)objc_msgSend(v10, "initWithEventData:eventType:guidString:date:", v11, v12, v13, v14);

      if (IMOSLoggingEnabled(v16))
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 40), "delegate");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v24 = v15;
          v25 = 2112;
          v26 = v18;
          _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Passing notice %@ to delegate %@", buf, 0x16u);

        }
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D14B6530;
      block[3] = &unk_1E9229280;
      v19 = *(void **)(a1 + 32);
      block[4] = *(_QWORD *)(a1 + 40);
      v21 = v15;
      v22 = v19;
      v7 = v15;
      dispatch_async(MEMORY[0x1E0C80D38], block);

    }
    else
    {
      IMLogHandleForCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        sub_1D166867C(v5);
    }
  }

}

void sub_1D14B6530(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegate");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "dispatcher:didReceiveNotice:fromID:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1D14B67A0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (v8)
  {
    IMLogHandleForCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1D16688A0();
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 136315650;
        v13 = "-[IMDCollaborationNoticeDispatcher service:account:incomingMessage:fromID:context:]_block_invoke";
        v14 = 2112;
        v15 = v11;
        v16 = 2112;
        v17 = v7;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "%s Blastdoor completed processing Collaboration Notice Action, actionType: %@, guids: %@", (uint8_t *)&v12, 0x20u);

      }
    }
    if (a2)
    {
      IMLogHandleForCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        sub_1D1668800(a2, v9);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "delegate");
      v9 = objc_claimAutoreleasedReturnValue();
      -[NSObject dispatcher:didReceiveDismissalReflectionForNoticeGUIDs:](v9, "dispatcher:didReceiveDismissalReflectionForNoticeGUIDs:", *(_QWORD *)(a1 + 32), v7);
    }
  }

}

id sub_1D14B6E64()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EFC63D28;
  v7 = qword_1EFC63D28;
  if (!qword_1EFC63D28)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1D14B6FC0;
    v3[3] = &unk_1E922B000;
    v3[4] = &v4;
    sub_1D14B6FC0((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D14B6F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1D14B6FC0(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EFC63D30)
  {
    v4 = xmmword_1E922B020;
    v5 = 0;
    qword_1EFC63D30 = _sl_dlopen();
  }
  if (!qword_1EFC63D30)
    sub_1D1668A38(&v3);
  result = objc_getClass("_SWHighlightEventAllowList");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1D1668AB4();
  qword_1EFC63D28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1D14B709C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1D14B70C4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_1D14B7108(void *a1, const char *a2)
{
  return objc_msgSend(a1, "count");
}

double IMItemFuzzDateForUnencryptedTime(double a1)
{
  return floor(a1 / 86400.0) * 86400.0;
}

const __CFString *sub_1D14B7144()
{
  return CFSTR("MessageEncryptedV3");
}

const __CFString *sub_1D14B7150()
{
  return CFSTR("messageUpdateV1");
}

IMDAccountController *sub_1D14B715C()
{
  return +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance");
}

id sub_1D14B7168(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a3;
  objc_msgSend(v3, "data");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "length"))
  {
    v5 = (void *)objc_msgSend(v4, "_FTCopyGzippedData");
    objc_msgSend(MEMORY[0x1E0D39718], "paddingForMessageOfSize:", objc_msgSend(v5, "length"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setPadding:", v6);
    v7 = (void *)objc_msgSend(v4, "_FTCopyGzippedData");

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id sub_1D14B720C(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  NSObject *v23;
  void *v24;
  int v25;
  void *v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0D39A98]);
    v4 = a1;
    objc_msgSend(v3, "setVersion:", 1);
    objc_msgSend(v4, "timeExpressiveSendPlayed");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setTimeExpressiveSentPlayed:", objc_msgSend(v5, "__im_nanosecondTimeInterval"));

    objc_msgSend(v4, "timePlayed");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setTimePlayed:", objc_msgSend(v6, "__im_nanosecondTimeInterval"));

    objc_msgSend(v4, "timeRead");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setTimeRead:", objc_msgSend(v7, "__im_nanosecondTimeInterval"));

    objc_msgSend(v4, "timeDelivered");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setTimeDelivered:", objc_msgSend(v8, "__im_nanosecondTimeInterval"));

    objc_msgSend(v4, "balloonBundleID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setBaloonBundleId:", v9);

    objc_msgSend(v4, "expressiveSendStyleID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setExpressiveSendId:", v10);

    objc_msgSend(v4, "body");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "string");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setMessageBody:", v12);

    objc_msgSend(v4, "bodyData");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setMessageBodyData:", v13);

    objc_msgSend(v4, "subject");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setMessageSubject:", v14);

    objc_msgSend(v4, "messageSummaryInfo");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    JWEncodeDictionary();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setMessageSummaryInfo:", v16);

    objc_msgSend(v4, "payloadData");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setPayloadData:", v17);

    objc_msgSend(v3, "setExpireState:", objc_msgSend(v4, "expireState"));
    objc_msgSend(v4, "associatedMessageGUID");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setAssociatedMessageGuid:", v18);

    objc_msgSend(v3, "setAssociatedMessageType:", objc_msgSend(v4, "associatedMessageType"));
    objc_msgSend(v3, "setAssociatedMessageRangeLocation:", objc_msgSend(v4, "associatedMessageRange"));
    objc_msgSend(v4, "associatedMessageRange");
    objc_msgSend(v3, "setAssociatedMessageRangeLength:", v19);
    v20 = (void *)objc_opt_class();

    objc_msgSend(v20, "compressedProtobufDataWithPadding:", v3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    return v21;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = 138412546;
        v26 = a1;
        v27 = 2112;
        v28 = v24;
        _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMMessageItemFields called on object %@ %@", (uint8_t *)&v25, 0x16u);

      }
    }
    return 0;
  }
}

id sub_1D14B7578(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = a1;
    v4 = objc_alloc((Class)objc_opt_class());
    objc_msgSend(v3, "threadIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setThreadIdentifier:", v5);

    v6 = (void *)objc_opt_class();
    objc_msgSend(v6, "compressedProtobufDataWithPadding:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    return v7;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412546;
        v12 = a1;
        v13 = 2112;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMMessageItemFields (reply data) called on object %@ %@", (uint8_t *)&v11, 0x16u);

      }
    }
    return 0;
  }
}

id sub_1D14B7700(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = a1;
    v4 = objc_alloc((Class)objc_opt_class());
    objc_msgSend(v4, "setCmmState:", objc_msgSend(v3, "getCMMState"));
    objc_msgSend(v4, "setCmmAssetOffset:", objc_msgSend(v3, "getCMMAssetOffset"));
    v5 = (void *)objc_opt_class();

    objc_msgSend(v5, "compressedProtobufDataWithPadding:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    return v6;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 138412546;
        v11 = a1;
        v12 = 2112;
        v13 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMMessageItemFields (reply data) called on object %@ %@", (uint8_t *)&v10, 0x16u);

      }
    }
    return 0;
  }
}

id sub_1D14B7890(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = a1;
    v4 = objc_alloc((Class)objc_opt_class());
    objc_msgSend(v3, "associatedMessageEmoji");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setAssociatedMessageEmoji:", v5);

    objc_msgSend(v3, "service");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setActualService:", v6);

    objc_msgSend(v4, "setScheduleType:", objc_msgSend(v3, "scheduleType"));
    objc_msgSend(v4, "setScheduleState:", objc_msgSend(v3, "scheduleState"));
    objc_msgSend(v3, "parentChatID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setActualParentChatId:", v7);

    v8 = (void *)objc_opt_class();
    objc_msgSend(v8, "compressedProtobufDataWithPadding:", v4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    return v9;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = a1;
        v15 = 2112;
        v16 = v12;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMMessageItemFields (reply data) called on object %@ %@", (uint8_t *)&v13, 0x16u);

      }
    }
    return 0;
  }
}

id sub_1D14B7A80(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;

  v4 = a3;
  objc_msgSend(v4, "objectForKey:", CFSTR("MID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("TOID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("TOPart"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = objc_alloc((Class)objc_opt_class());
  objc_msgSend(v8, "setMsgid:", v5);
  objc_msgSend(v8, "setThreadGuid:", v6);
  objc_msgSend(v8, "setThreadPart:", v7);
  objc_msgSend(a1, "compressedProtobufDataWithPadding:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id sub_1D14B7B58(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v4 = a3;
  objc_msgSend(v4, "objectForKey:", CFSTR("MID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("SR"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_alloc((Class)objc_opt_class());
  objc_msgSend(v7, "setMsgid:", v5);
  objc_msgSend(v7, "setSr:", v6);
  objc_msgSend(a1, "compressedProtobufDataWithPadding:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id sub_1D14B7C00(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v4 = a3;
  objc_msgSend(v4, "objectForKey:", CFSTR("MID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", CFSTR("CHATID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = objc_alloc((Class)objc_opt_class());
  objc_msgSend(v7, "setMsgid:", v5);
  objc_msgSend(v7, "setChatid:", v6);
  objc_msgSend(a1, "compressedProtobufDataWithPadding:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id sub_1D14B7CA8(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39A98];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7D10(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AA8];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7D78(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AB0];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7DE0(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AB8];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7E48(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AC8];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7EB0(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AD0];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7F18(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AD8];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B7F80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "protobufForCompressedData:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = v5;
  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timeExpressiveSentPlayed"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTimeExpressiveSendPlayed:", v9);

  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timePlayed"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTimePlayed:", v10);

  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timeRead"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTimeRead:", v11);

  objc_msgSend(v7, "baloonBundleId");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setBalloonBundleID:", v12);

  objc_msgSend(v7, "expressiveSendId");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setExpressiveSendStyleID:", v13);

  objc_msgSend(v7, "messageBodyData");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setBodyData:", v14);

  objc_msgSend(v7, "messageSubject");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setSubject:", v15);

  objc_msgSend(v7, "messageSummaryInfo");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  JWDecodeDictionary();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setMessageSummaryInfo:", v17);

  objc_msgSend(v7, "payloadData");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setPayloadData:", v18);

  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timeDelivered"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setTimeDelivered:", v19);

  objc_msgSend(v8, "setExpireState:", objc_msgSend(v7, "expireState"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v20 = v8;
    objc_msgSend(v7, "associatedMessageGuid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setAssociatedMessageGUID:", v21);

    objc_msgSend(v20, "setAssociatedMessageType:", objc_msgSend(v7, "associatedMessageType"));
    objc_msgSend(v20, "setAssociatedMessageRange:", objc_msgSend(v7, "associatedMessageRangeLocation"), objc_msgSend(v7, "associatedMessageRangeLength"));

  }
  return v8;
}

id sub_1D14B8218(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "protobufForCompressedDataP2:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "threadIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setThreadIdentifier:", v8);

  return v5;
}

id sub_1D14B8294(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "protobufForCompressedDataP3:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setCMMState:", objc_msgSend(v7, "cmmState"));
  objc_msgSend(v5, "setCMMAssetOffset:", objc_msgSend(v7, "cmmAssetOffset"));

  return v5;
}

id sub_1D14B8318(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  int v24;
  int v26;
  void *v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "protobufForCompressedDataP4:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEmojiTapbacksEnabled");

  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = v5;
      objc_msgSend(v7, "associatedMessageEmoji");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setAssociatedMessageEmoji:", v11);

    }
  }
  if (objc_msgSend(v7, "hasActualService"))
  {
    objc_msgSend(v7, "actualService");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "service");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v12, "isEqualToString:", v13);

    if ((v14 & 1) == 0)
    {
      v15 = (void *)*MEMORY[0x1E0D38F58];
      objc_msgSend(v5, "service");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v15) = objc_msgSend(v15, "isEqualToString:", v16);

      if ((_DWORD)v15)
      {
        IMLogHandleForCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          sub_1D1668B2C(v5, v7, v18);

        objc_msgSend(v7, "actualService");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "setService:", v19);

      }
      else if (IMOSLoggingEnabled(v17))
      {
        OSLogHandleForIMFoundationCategory();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v5, "service");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "actualService");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v26 = 138412546;
          v27 = v21;
          v28 = 2112;
          v29 = v22;
          _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Protobuf4 provides an actualService override but current service is not SMS (current %@, override %@), ignoring!", (uint8_t *)&v26, 0x16u);

        }
      }
    }
  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "isScheduledMessagesCoreEnabled");

  if (v24)
  {
    objc_msgSend(v5, "setScheduleType:", objc_msgSend(v7, "scheduleType"));
    objc_msgSend(v5, "setScheduleState:", objc_msgSend(v7, "scheduleState"));
  }

  return v5;
}

id sub_1D14B85F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  id v5;

  v3 = a3;
  if (objc_msgSend((id)*MEMORY[0x1E0D38F38], "containsObject:", v3))
    v4 = v3;
  else
    v4 = (void *)*MEMORY[0x1E0D38F58];
  v5 = v4;

  return v5;
}

id sub_1D14B8648(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "parentChatID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (!v2 || !objc_msgSend(v2, "length"))
  {
    v6 = 0;
    goto LABEL_6;
  }
  v4 = (void *)*MEMORY[0x1E0D38F38];
  objc_msgSend(a1, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((_DWORD)v4)
  {
    objc_msgSend(a1, "parentChatID");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (!objc_msgSend(v3, "im_isWellFormedChatGUID"))
  {
LABEL_17:
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "service");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "_lookupChatUsingParentChatID:service:", v3, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (v19)
    {
      +[IMDChatStore sharedInstance](IMDChatStore, "sharedInstance");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v19, "groupID");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "newestChatWithGroupID:onService:", v22, *MEMORY[0x1E0D38F58]);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v25 = IMOSLoggingEnabled(v24);
      if (v23)
      {
        if (v25)
        {
          OSLogHandleForIMFoundationCategory();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v19, "groupID");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "guid");
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "cloudKitChatID");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138413058;
            v35 = v3;
            v36 = 2112;
            v37 = v27;
            v38 = 2112;
            v39 = v28;
            v40 = 2112;
            v41 = v29;
            _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "For backcompat version of parentChatID %@, using groupID %@, found SMS chat %@, with cloudKitChatID %@", buf, 0x2Au);

          }
        }
        objc_msgSend(v23, "cloudKitChatID");
        v6 = (id)objc_claimAutoreleasedReturnValue();

        goto LABEL_33;
      }
      if (v25)
      {
        OSLogHandleForIMFoundationCategory();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v19, "groupID");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v35 = v3;
          v36 = 2112;
          v37 = v32;
          _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "For backcompat version of parentChatID %@, using groupID %@, could NOT find SMS chat, message may be lost on older devices", buf, 0x16u);

        }
LABEL_31:

      }
    }
    else if (IMOSLoggingEnabled(v20))
    {
      OSLogHandleForIMFoundationCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(a1, "guid");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v35 = v3;
        v36 = 2112;
        v37 = v31;
        _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "Can't find parent chat from %@ for message %@, message may be lost if restored to older devices", buf, 0x16u);

      }
      goto LABEL_31;
    }
    v6 = v3;
LABEL_33:

    goto LABEL_6;
  }
  objc_msgSend(a1, "parentChatID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  IMComponentsFromChatGUID();
  v9 = 0;
  v10 = 0;

  if (!v9 || !v10)
  {

    goto LABEL_17;
  }
  +[IMDChatStore sharedInstance](IMDChatStore, "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "chatsWithIdentifier:onServiceNamed:", v9, *MEMORY[0x1E0D38F58]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v12, "count"))
  {
    objc_msgSend(v12, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v13))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v13, "guid");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "cloudKitChatID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v35 = v3;
        v36 = 2112;
        v37 = v15;
        v38 = 2112;
        v39 = v16;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "For backcompat version of parentChatID %@, found SMS chat %@, with cloudKitChatID %@", buf, 0x20u);

      }
    }
    objc_msgSend(v13, "cloudKitChatID");
    v6 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Couldn't find the SMS chat, message may be lost if restored to older devices", buf, 2u);
      }

    }
    v6 = v3;
  }

LABEL_6:
  return v6;
}

void sub_1D14B8BDC(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  id v21;

  v21 = a3;
  objc_msgSend(a1, "guid");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordString:forKey:", v4, CFSTR("guid"));

  objc_msgSend(a1, "service");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "backCompatServiceFor:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordString:forKey:", v6, CFSTR("svc"));

  objc_msgSend(a1, "time");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordDate:forKey:", v7, CFSTR("time"));

  objc_msgSend(a1, "sender");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordString:forKey:", v8, CFSTR("sender"));

  objc_msgSend(a1, "backCompatParentChatID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordString:forKey:", v9, CFSTR("chatID"));
  objc_msgSend(a1, "destinationCallerID");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordString:forKey:", v10, CFSTR("dcId"));

  if (IMSharedHelperSortUsingReplyToGUIDAlgorithm())
  {
    objc_msgSend(a1, "replyToGUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "_setCKRecordString:forKey:", v11, CFSTR("rGuid"));

  }
  objc_msgSend(a1, "time");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "timeIntervalSinceReferenceDate");
  v14 = floor(v13 / 86400.0) * 86400.0;

  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setValue:forKey:", v15, CFSTR("utm"));
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v16, "isEmojiTapbacksEnabled") & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v17, "isScheduledMessagesCoreEnabled"))
    {
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "isLazuliEnabled");

      if ((v20 & 1) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }

  }
LABEL_7:
  objc_msgSend(a1, "compressedProtobufDataForMessageP4");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "_setCKRecordData:forKey:", v18, CFSTR("msgProto4"));

LABEL_8:
}

void sub_1D14B8E50(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t isKindOfClass;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  void *v16;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v6 = a1;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v7 = &unk_1E9271170;
    else
      v7 = &unk_1E9271188;
    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", v7, CFSTR("msgType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", objc_msgSend(v6, "flags"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordNumber:forKey:", v8, CFSTR("flags"));

    objc_msgSend(v6, "compressedProtobufDataForMessage");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v9, CFSTR("msgProto"));

    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "messageSyncP2Enabled");

    if (v11)
    {
      objc_msgSend(v6, "compressedProtobufDataForMessageP2");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "_setCKRecordData:forKey:", v12, CFSTR("msgProto2"));

    }
    objc_msgSend(v6, "compressedProtobufDataForMessageP3");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v13, CFSTR("msgProto3"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", objc_msgSend(v6, "errorCode"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", v14, CFSTR("eCode"));

  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = 138412546;
      v18 = a1;
      v19 = 2112;
      v20 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMMessageItemFields called on object %@ %@", (uint8_t *)&v17, 0x16u);

    }
  }

}

id sub_1D14B90D8(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39A88];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B9140(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "groupTitleChangeProtobufForCompressedData:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "groupTitle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setTitle:", v8);

  objc_msgSend(v7, "otherHandle");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setOtherHandle:", v9);

  return v5;
}

id sub_1D14B91DC(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0D39A88]);
    v4 = a1;
    objc_msgSend(v3, "setVersion:", 1);
    objc_msgSend(v4, "title");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setGroupTitle:", v5);

    objc_msgSend(v4, "otherHandle");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOtherHandle:", v6);

    v7 = (void *)objc_opt_class();
    objc_msgSend(v7, "compressedProtobufDataWithPadding:", v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    return v8;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412546;
        v13 = a1;
        v14 = 2112;
        v15 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForGroupTitleChangeItem called on object %@ %@", (uint8_t *)&v12, 0x16u);

      }
    }
    return 0;
  }
}

void sub_1D14B9388(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t isKindOfClass;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1, "compressedProtobufDataForGroupTitleChangeItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v6, CFSTR("msgProto"));

    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", &unk_1E92711A0, CFSTR("msgType"));
  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412546;
      v10 = a1;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMGroupTitleChangeItemFields called on object %@ %@", (uint8_t *)&v9, 0x16u);

    }
  }

}

id sub_1D14B94EC(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AE0];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B9554(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AC0];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B95BC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v7 = a3;
  v8 = a5;
  v9 = a4;
  objc_msgSend((id)objc_opt_class(), "participantChangeProtobufForCompressedData:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)objc_opt_class(), "messageSummaryInfoProtobufForCompressedData:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "setChangeType:", objc_msgSend(v10, "participantChangeType"));
  objc_msgSend(v10, "otherHandle");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setOtherHandle:", v12);

  objc_msgSend(v11, "messageSummaryInfo");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  JWDecodeDictionary();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setMessageSummaryInfo:", v14);

  return v7;
}

id sub_1D14B96B0(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0D39AE0]);
    v4 = a1;
    objc_msgSend(v3, "setVersion:", 1);
    objc_msgSend(v3, "setParticipantChangeType:", objc_msgSend(v4, "changeType"));
    objc_msgSend(v4, "otherHandle");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOtherHandle:", v5);

    v6 = (void *)objc_opt_class();
    objc_msgSend(v6, "compressedProtobufDataWithPadding:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    return v7;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412546;
        v12 = a1;
        v13 = 2112;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForParticipantChangeItem called on object %@ %@", (uint8_t *)&v11, 0x16u);

      }
    }
    return 0;
  }
}

id sub_1D14B9850(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = a1;
    objc_msgSend(v3, "messageSummaryInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "count");

    if (v5)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0D39AC0]);
      objc_msgSend(v3, "messageSummaryInfo");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      JWEncodeDictionary();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setMessageSummaryInfo:", v8);

      objc_msgSend((id)objc_opt_class(), "compressedProtobufDataWithPadding:", v6);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412546;
        v13 = a1;
        v14 = 2112;
        v15 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "***Error compressedProtobuf2DataForParticipantChangeItem called on object %@ %@", (uint8_t *)&v12, 0x16u);

      }
    }
    v5 = 0;
  }
  return v5;
}

void sub_1D14B99F4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t isKindOfClass;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1, "compressedProtobufDataForParticipantChangeItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v6, CFSTR("msgProto"));

    objc_msgSend(a1, "compressedProtobuf2DataForParticipantChangeItem");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "length"))
      objc_msgSend(v4, "_setCKRecordData:forKey:", v7, CFSTR("msgProto2"));
    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", &unk_1E92711B8, CFSTR("msgType"));

  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138412546;
      v11 = a1;
      v12 = 2112;
      v13 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v10, 0x16u);

    }
  }

}

id sub_1D14B9B88(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39A90];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14B9BF0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "locationShareStatusChangeProtobufForCompressedData:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "otherHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "length");

  if (v9)
  {
    objc_msgSend(v7, "otherHandle");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setOtherHandle:", v10);

  }
  objc_msgSend(v5, "setDirection:", objc_msgSend(v7, "shareDirection"));
  objc_msgSend(v5, "setStatus:", objc_msgSend(v7, "shareStatus"));

  return v5;
}

id sub_1D14B9CB4(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0D39A90]);
    v4 = a1;
    objc_msgSend(v3, "setVersion:", 1);
    objc_msgSend(v3, "setShareStatus:", objc_msgSend(v4, "status"));
    objc_msgSend(v3, "setShareDirection:", objc_msgSend(v4, "direction"));
    objc_msgSend(v4, "otherHandle");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOtherHandle:", v5);

    v6 = (void *)objc_opt_class();
    objc_msgSend(v6, "compressedProtobufDataWithPadding:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    return v7;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412546;
        v12 = a1;
        v13 = 2112;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForLocationShareStatusChangeItem called on object %@ %@", (uint8_t *)&v11, 0x16u);

      }
    }
    return 0;
  }
}

void sub_1D14B9E68(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t isKindOfClass;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1, "compressedProtobufDataForLocationShareStatusChangeItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v6, CFSTR("msgProto"));

    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", &unk_1E92711D0, CFSTR("msgType"));
  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412546;
      v10 = a1;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v9, 0x16u);

    }
  }

}

id sub_1D14B9FCC(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39A80];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14BA034(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "groupActionProtobufForCompressedData:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setActionType:", objc_msgSend(v7, "groupActionType"));
  objc_msgSend(v7, "otherHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setOtherHandle:", v8);

  return v5;
}

id sub_1D14BA0C4(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0D39A80]);
    v4 = a1;
    objc_msgSend(v3, "setVersion:", 1);
    objc_msgSend(v3, "setGroupActionType:", objc_msgSend(v4, "actionType"));
    objc_msgSend(v4, "otherHandle");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOtherHandle:", v5);

    v6 = (void *)objc_opt_class();
    objc_msgSend(v6, "compressedProtobufDataWithPadding:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    return v7;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412546;
        v12 = a1;
        v13 = 2112;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForGroupActionItem called on object %@ %@", (uint8_t *)&v11, 0x16u);

      }
    }
    return 0;
  }
}

void sub_1D14BA264(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t isKindOfClass;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1, "compressedProtobufDataForGroupActionItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v6, CFSTR("msgProto"));

    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", &unk_1E92711E8, CFSTR("msgType"));
  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412546;
      v10 = a1;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v9, 0x16u);

    }
  }

}

id sub_1D14BA3C8(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0D39AA0];
  v4 = a3;
  v5 = [v3 alloc];
  objc_msgSend(v4, "_FTOptionallyDecompressData");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);
  return v7;
}

id sub_1D14BA430(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v5 = a3;
  v6 = a4;
  objc_msgSend((id)objc_opt_class(), "messageActionChangeProtobufForCompressedData:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setActionType:", objc_msgSend(v7, "messageActionType"));
  objc_msgSend(v7, "otherHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setOtherHandle:", v8);

  objc_msgSend(v7, "originalMessageGuid");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "setOriginalMessageGUID:", v9);

  return v5;
}

id sub_1D14BA4E0(void *a1)
{
  uint64_t isKindOfClass;
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0D39AA0]);
    v4 = a1;
    objc_msgSend(v3, "setVersion:", 1);
    objc_msgSend(v3, "setMessageActionType:", objc_msgSend(v4, "actionType"));
    objc_msgSend(v4, "otherHandle");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOtherHandle:", v5);

    objc_msgSend(v4, "originalMessageGUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setOriginalMessageGuid:", v6);

    v7 = (void *)objc_opt_class();
    objc_msgSend(v7, "compressedProtobufDataWithPadding:", v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    return v8;
  }
  else
  {
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412546;
        v13 = a1;
        v14 = 2112;
        v15 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForMessageActionItem called on object %@ %@", (uint8_t *)&v12, 0x16u);

      }
    }
    return 0;
  }
}

void sub_1D14BA6A0(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t isKindOfClass;
  void *v6;
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend(a1, "compressedProtobufDataForMessageActionItem");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "_setCKRecordData:forKey:", v6, CFSTR("msgProto"));

    objc_msgSend(v4, "_setUnencryptedCKRecordNumber:forKey:", &unk_1E9271200, CFSTR("msgType"));
  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412546;
      v10 = a1;
      v11 = 2112;
      v12 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v9, 0x16u);

    }
  }

}

id sub_1D14BA804(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  objc_msgSend(v10, "objectForKey:", CFSTR("MID"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingString:", CFSTR("-UpT1"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKRecordUtilities recordNameForRecordChangeTag:ckRecordID:salt:guid:](CKRecordUtilities, "recordNameForRecordChangeTag:ckRecordID:salt:guid:", 0, 0, v8, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x1E0C95048]);
  objc_msgSend(a1, "_updateV1RecordType");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKRecordUtilities recordIDUsingName:zoneID:](CKRecordUtilities, "recordIDUsingName:zoneID:", v13, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)objc_msgSend(v14, "initWithRecordType:recordID:", v15, v16);
  objc_msgSend(a1, "compressedProtobufDataForUpdateT1:", v10);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v17, "_setCKRecordString:forKey:", CFSTR("UT1"), CFSTR("ut"));
    objc_msgSend(v17, "_setCKRecordData:forKey:", v18, CFSTR("up"));
    v19 = v17;
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

BOOL sub_1D14BA980(void *a1)
{
  void *v1;
  _BOOL8 v2;

  objc_msgSend(a1, "destinationCallerID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "length") != 0;

  return v2;
}

id sub_1D14BA9B8(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  objc_msgSend(v10, "objectForKey:", CFSTR("MID"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingString:", CFSTR("-UpT2"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKRecordUtilities recordNameForRecordChangeTag:ckRecordID:salt:guid:](CKRecordUtilities, "recordNameForRecordChangeTag:ckRecordID:salt:guid:", 0, 0, v8, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x1E0C95048]);
  objc_msgSend(a1, "_updateV1RecordType");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKRecordUtilities recordIDUsingName:zoneID:](CKRecordUtilities, "recordIDUsingName:zoneID:", v13, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)objc_msgSend(v14, "initWithRecordType:recordID:", v15, v16);
  objc_msgSend(a1, "compressedProtobufDataForUpdateT2:", v10);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v17, "_setCKRecordString:forKey:", CFSTR("UT2"), CFSTR("ut"));
    objc_msgSend(v17, "_setCKRecordData:forKey:", v18, CFSTR("up"));
    v19 = v17;
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

id sub_1D14BAB34(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  objc_msgSend(v10, "objectForKey:", CFSTR("MID"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingString:", CFSTR("-UpT3"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKRecordUtilities recordNameForRecordChangeTag:ckRecordID:salt:guid:](CKRecordUtilities, "recordNameForRecordChangeTag:ckRecordID:salt:guid:", 0, 0, v8, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = objc_alloc(MEMORY[0x1E0C95048]);
  objc_msgSend(a1, "_updateV1RecordType");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  +[CKRecordUtilities recordIDUsingName:zoneID:](CKRecordUtilities, "recordIDUsingName:zoneID:", v13, v9);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  v17 = (void *)objc_msgSend(v14, "initWithRecordType:recordID:", v15, v16);
  objc_msgSend(a1, "compressedProtobufDataForUpdateT2:", v10);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(v17, "_setCKRecordString:forKey:", CFSTR("UT3"), CFSTR("ut"));
    objc_msgSend(v17, "_setCKRecordData:forKey:", v18, CFSTR("up"));
    v19 = v17;
  }
  else
  {
    v19 = 0;
  }

  return v19;
}

uint64_t sub_1D14BACB0(void *a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  id v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0CB3710]);
  objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  v4 = (void *)objc_msgSend(v2, "initForReadingFromData:error:", v3, &v10);
  v5 = v10;

  v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0C95048]), "initWithCoder:", v4);
  v7 = v6;
  if (v5 && IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v5;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Failed to unarchive ckrecord. Error: %@", buf, 0xCu);
    }

  }
  return v7;
}

uint64_t sub_1D14BADF0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  id v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t isKindOfClass;
  NSObject *v34;
  id v35;
  uint8_t buf[4];
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chatForMessageIdentifier:", objc_msgSend(a1, "messageID"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "stewieEnabled");

  if (v11)
    v12 = objc_msgSend(v9, "isStewieChat");
  else
    v12 = 0;
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "isTranscriptSharingEnabled");

  if (((v14 ^ 1 | v12) & 1) != 0)
  {
    if (!v12)
      goto LABEL_6;
  }
  else
  {
    v15 = objc_msgSend(v9, "isStewieSharingChat");
    if ((v15 & 1) == 0)
    {
LABEL_6:
      objc_msgSend(a1, "cloudKitRecordChangeTag");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "cloudKitRecordID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "guid");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKRecordUtilities recordNameForRecordChangeTag:ckRecordID:salt:guid:](CKRecordUtilities, "recordNameForRecordChangeTag:ckRecordID:salt:guid:", v16, v17, v7, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend(v19, "length"))
      {
        if (IMOSLoggingEnabled(0))
        {
          OSLogHandleForIMFoundationCategory();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v37 = v19;
            _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "Cannot create record from recordID because it is nil %@", buf, 0xCu);
          }

        }
        v27 = 0;
        goto LABEL_30;
      }
      v20 = objc_alloc(MEMORY[0x1E0C95048]);
      objc_msgSend(a1, "_recordType");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKRecordUtilities recordIDUsingName:zoneID:](CKRecordUtilities, "recordIDUsingName:zoneID:", v19, v6);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = (void *)objc_msgSend(v20, "initWithRecordType:recordID:", v21, v22);

      objc_msgSend(a1, "cloudKitRecordChangeTag");
      v24 = (void *)objc_claimAutoreleasedReturnValue();

      if (v24)
      {
        objc_msgSend(a1, "cloudKitRecordChangeTag");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "setEtag:", v25);

        objc_msgSend(v23, "setKnownToServer:", 1);
      }
      objc_msgSend(a1, "_populateCKRecordWithIMItemFields:", v23);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(a1, "_populateCKRecordWithIMMessageItemFields:", v23);
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(a1, "_populateCKRecordWithIMGroupTitleChangeItemFields:", v23);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(a1, "_populateCKRecordWithIMParticipantChangeItemFields:", v23);
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                v30 = a1;
                v31 = objc_msgSend(v30, "actionType");
                if (!v31)
                {
                  objc_msgSend(v30, "_populateCKRecordWithIMGroupActionItemFields:", v23);

                  goto LABEL_28;
                }
                if (IMOSLoggingEnabled(v31))
                {
                  OSLogHandleForIMFoundationCategory();
                  v32 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 134217984;
                    v37 = (id)objc_msgSend(v30, "actionType");
                    _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "Cannot sync item because it is an incompatible action type %lld", buf, 0xCu);
                  }

                }
              }
              else
              {
                objc_opt_class();
                isKindOfClass = objc_opt_isKindOfClass();
                if ((isKindOfClass & 1) != 0)
                {
                  objc_msgSend(a1, "_populateCKRecordWithIMMessageActionItemFields:", v23);
                  goto LABEL_28;
                }
                if (IMOSLoggingEnabled(isKindOfClass))
                {
                  OSLogHandleForIMFoundationCategory();
                  v34 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    v37 = (id)objc_opt_class();
                    v35 = v37;
                    _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, "***** Error Tried to generate a CKRecord from class %@ ******", buf, 0xCu);

                  }
                }
              }
              v27 = 0;
              goto LABEL_29;
            }
            objc_msgSend(a1, "_populateCKRecordWithIMLocationShareStatusChangeItemFields:", v23);
          }
        }
      }
LABEL_28:
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:", v23, 0);
      v27 = objc_claimAutoreleasedReturnValue();
LABEL_29:

LABEL_30:
      goto LABEL_31;
    }
  }
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "Do not create record for stewie chats", buf, 2u);
    }

  }
  v27 = 0;
LABEL_31:

  return v27;
}

void sub_1D14BB328(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14BB308);
  }
  _Unwind_Resume(a1);
}

id sub_1D14BB384(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  int v16;
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  int v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  int v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  int v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  int v45;
  void *v46;
  id v47;
  void *v48;
  int v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  _BOOL4 v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint8_t buf[4];
  void *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "_stringForKey:", CFSTR("SubType"));
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("msgType"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "integerValue");

  if (objc_msgSend(v77, "isEqualToString:", CFSTR("SubTypeMsg")))
    v6 = 1;
  else
    v6 = v5;
  objc_msgSend(v3, "_stringForKey:", CFSTR("sender"));
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_dateForKey:", CFSTR("time"));
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_stringForKey:", CFSTR("dcId"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_stringForKey:", CFSTR("guid"));
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_stringForKey:", CFSTR("svc"));
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_stringForKey:", CFSTR("sender"));
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_stringForKey:", CFSTR("rGuid"));
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)v8;
  switch(v6)
  {
    case 1:
    case 2:
      objc_msgSend(v3, "_dateForKey:", CFSTR("tRead"));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "_dateForKey:", CFSTR("tDelivered"));
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "_dateForKey:", CFSTR("tPlayed"));
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "_stringForKey:", CFSTR("subject"));
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v71, "stringByRemovingCharactersFromSet:", v10);
      v70 = (void *)objc_claimAutoreleasedReturnValue();

      if (!objc_msgSend(v70, "length"))
      {

        v71 = 0;
      }
      objc_msgSend(v3, "_dataForKey:", CFSTR("body"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "length"))
      {
        JWDecodeCodableObjectWithStandardAllowlist();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v13 = objc_msgSend(v12, "__im_countMessageParts");
        else
          v13 = 0;

      }
      else
      {
        v13 = 0;
      }
      objc_msgSend(v3, "_numberForKey:", CFSTR("flags"));
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = objc_msgSend(v37, "integerValue");

      objc_msgSend(v3, "_stringForKey:", CFSTR("BID"));
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "_dataForKey:", CFSTR("pdata"));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "_stringForKey:", CFSTR("esid"));
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("eCode"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = objc_msgSend(v39, "unsignedIntValue");

      v41 = objc_alloc((Class)objc_opt_class());
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v74, *MEMORY[0x1E0D36D90]);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v63) = v40;
      v14 = (id)objc_msgSend(v41, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:biaReferenceID:errorType:threadIdentifier:syndicationRanges:syncedSyndicationRanges:partCount:dateEdited:scheduleType:scheduleState:", v42, v76, v69, v68, v67, v71, 0, v11, 0, 0, v38, v75, 0,
                  0,
                  0,
                  v73,
                  v72,
                  0,
                  0,
                  0,
                  0,
                  v66,
                  v65,
                  v64,
                  v43,
                  0,
                  0,
                  0,
                  v63,
                  0,
                  0,
                  0,
                  v13,
                  0,
                  0,
                  0);

      objc_msgSend(v3, "recordType");
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      v45 = objc_msgSend(v44, "isEqualToIgnoringCase:", CFSTR("MessageEncryptedV3"));

      if (v45)
      {
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v47 = (id)objc_msgSend((id)objc_opt_class(), "populateIMMessageItemWithProtobufFields:withProtobufData:", v14, v46);
        objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend(v48, "messageSyncP2Enabled");

        if (v49)
        {
          objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto2"));
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v50, "length"))
            v51 = (id)objc_msgSend((id)objc_opt_class(), "populateIMMessageItemWithProtobufFields:withProtobufDataP2:", v14, v50);

        }
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto3"));
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v52, "length"))
          v53 = (id)objc_msgSend((id)objc_opt_class(), "populateIMMessageItemWithProtobufFields:withProtobufDataP3:", v14, v52);
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto4"));
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v54, "length"))
          v55 = (id)objc_msgSend((id)objc_opt_class(), "populateIMMessageItemWithProtobufFields:withProtobufDataP4:", v14, v54);

      }
      break;
    case 3:
      v21 = objc_alloc(MEMORY[0x1E0D39870]);
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v74, *MEMORY[0x1E0D36D90]);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (id)objc_msgSend(v21, "initWithSenderInfo:time:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:type:", v22, v76, v75, 0, 0, 0, v73, v72, 0, 0, 0, 2);

      objc_msgSend(v3, "recordType");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v22) = objc_msgSend(v23, "isEqualToIgnoringCase:", CFSTR("MessageEncryptedV3"));

      if ((_DWORD)v22)
      {
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = (id)objc_msgSend((id)objc_opt_class(), "populateIMGroupTitleChangeItem:withProtobufData:", v14, v17);
        goto LABEL_27;
      }
      break;
    case 4:
      v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D398C8]), "initWithSender:time:guid:type:", 0, v76, v75, 4);
      objc_msgSend(v3, "recordType");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "isEqualToIgnoringCase:", CFSTR("MessageEncryptedV3"));

      if (v16)
      {
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = (id)objc_msgSend((id)objc_opt_class(), "populateIMLocationShareStatusChangeItem:withProtobufData:", v14, v17);
        if (objc_msgSend(v74, "length"))
          objc_msgSend(v14, "setSender:", v74);
        goto LABEL_27;
      }
      break;
    case 5:
      v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D398F0]), "initWithSender:time:guid:type:", v74, v76, v75, 5);
      objc_msgSend(v3, "recordType");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = objc_msgSend(v25, "isEqualToIgnoringCase:", CFSTR("MessageEncryptedV3"));

      if (v26)
      {
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = (id)objc_msgSend((id)objc_opt_class(), "populateIMMessageActionItem:withProtobufData:", v14, v17);
        goto LABEL_27;
      }
      break;
    case 6:
      v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D399A8]), "initWithSender:time:guid:type:", v74, v76, v75, 1);
      objc_msgSend(v3, "_dateForKey:", CFSTR("tRead"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "setTimeRead:", v29);

      v14 = v28;
      objc_msgSend(v3, "recordType");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v29) = objc_msgSend(v30, "isEqualToIgnoringCase:", CFSTR("MessageEncryptedV3"));

      if ((_DWORD)v29)
      {
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto"));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto2"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = (id)objc_msgSend((id)objc_opt_class(), "populateIMParticipantChangeItem:withProtobufData:protobuf2Data:", v14, v31, v32);

      }
      break;
    case 7:
      v14 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0D39860]), "initWithSender:time:guid:type:", v74, v76, v75, 3);
      objc_msgSend(v3, "recordType");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "isEqualToIgnoringCase:", CFSTR("MessageEncryptedV3"));

      if (v35)
      {
        objc_msgSend(v3, "_dataForKey:", CFSTR("msgProto"));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = (id)objc_msgSend((id)objc_opt_class(), "populateIMGroupActionItem:withProtobufData:", v14, v17);
LABEL_27:

      }
      break;
    default:
      if (IMOSLoggingEnabled(v8))
      {
        OSLogHandleForIMFoundationCategory();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v6);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v79 = v20;
          _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "****** initiWithCKRecord called with unsupported message type %@ *****", buf, 0xCu);

        }
      }
      v14 = 0;
      break;
  }
  objc_msgSend(v14, "service");
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = objc_msgSend(v56, "length") == 0;

  if (v57)
    objc_msgSend(v14, "setService:", v73);
  if (objc_msgSend(v7, "length"))
    objc_msgSend(v14, "setDestinationCallerID:", v7);
  if (objc_msgSend(v9, "length"))
    objc_msgSend(v14, "setReplyToGUID:", v9);
  objc_msgSend(v3, "_stringForKey:", CFSTR("chatID"));
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setParentChatID:", v58);

  objc_msgSend(v3, "recordID");
  v59 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v59, "recordName");
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCloudKitRecordID:", v60);

  objc_msgSend(v3, "recordChangeTag");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setCloudKitRecordChangeTag:", v61);

  objc_msgSend(v14, "setCloudKitSyncState:", 1);
  objc_msgSend(v14, "setCloudKitServerChangeTokenBlob:", 0);

  return v14;
}

void sub_1D14BBE4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v13;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(v5, "_stringForKey:", CFSTR("guid"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v7 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v7, "itemWithGUID:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "setCloudKitRecordID:", 0);
    objc_msgSend(v8, "setCloudKitRecordChangeTag:", 0);
    objc_msgSend(v8, "setCloudKitSyncState:", a4);
    objc_msgSend(v8, "setCloudKitServerChangeTokenBlob:", 0);
    objc_opt_class();
    LOBYTE(v7) = objc_opt_isKindOfClass();
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if ((v7 & 1) != 0)
      v11 = (id)objc_msgSend(v9, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", v8, 0, 0, 0, 0x2000);
    else
      v13 = (id)objc_msgSend(v9, "storeItem:forceReplace:", v8, 0);

  }
  else if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      v14 = 138412290;
      v15 = v5;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "We don't have a valid guid for the message record we want to reset sync state: %@", (uint8_t *)&v14, 0xCu);
    }

  }
}

uint64_t sub_1D14BC024(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;
  id v10;
  void *v11;
  int v12;
  id v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!MEMORY[0x1D17EA35C]())
    goto LABEL_5;
  objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "deviceType") != 2 || (v6 = objc_msgSend(v5, "SIMInserted"), (v6 & 1) != 0))
  {

LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(a1, "guid");
      v10 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "destinationCallerID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138412546;
      v13 = v10;
      v14 = 2112;
      v15 = v11;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Phone number destination callerID [%@] is unselected on phone but phone does not have SIM inserted and caller ID is a phone number so will store message [%@] anyways", (uint8_t *)&v12, 0x16u);

    }
  }

  v7 = 1;
LABEL_6:

  return v7;
}

BOOL sub_1D14BC194(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  id v13;
  void *v14;
  _BOOL8 v15;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  char v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "destinationCallerID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[IMDCKUtilities readAliasesFromDefaults](IMDCKUtilities, "readAliasesFromDefaults");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x2020000000;
  v23 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 1;
  v4 = objc_msgSend(a1, "callerIDShouldBeCheckedForRegistration:", v2);
  if ((_DWORD)v4)
  {
    objc_msgSend(a1, "_accountControllerSharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "activeAccounts");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1D14BC508;
    v17[3] = &unk_1E922B170;
    v17[4] = a1;
    v17[5] = v22;
    v17[6] = &v18;
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v17);

    v7 = v19;
    if (*((_BYTE *)v19 + 24) || !v3)
    {
      if (*((_BYTE *)v19 + 24))
      {
        v10 = 1;
      }
      else
      {
        v10 = objc_msgSend(a1, "_shouldDownloadIfPhoneNumberAndNoSIM:", v2);
        v7 = v19;
      }
      *((_BYTE *)v7 + 24) = v10;
    }
    else
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("selectedAliases"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("allAliases"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "containsObject:", v2)
        && objc_msgSend(v9, "containsObject:", v2))
      {
        *((_BYTE *)v19 + 24) = 1;
      }

    }
  }
  else
  {
    v10 = IMOSLoggingEnabled(v4);
    if ((_DWORD)v10)
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v25 = v2;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Skipping shouldStore check, destinationCallerID: %@", buf, 0xCu);
      }

    }
  }
  if (!*((_BYTE *)v19 + 24) && IMOSLoggingEnabled(v10))
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(a1, "guid");
      v13 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "destinationCallerID");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v25 = v13;
      v26 = 2112;
      v27 = v14;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "We should not store the message [%@] because our destination callerID [%@] has been unselected from list of available aliases", buf, 0x16u);

    }
  }
  v15 = *((_BYTE *)v19 + 24) != 0;
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(v22, 8);

  return v15;
}

void sub_1D14BC498(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14BC430);
  }
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1D14BC508(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t isKindOfClass;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  objc_msgSend(v6, "service");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "internalName");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D38F68]);

  if (v9)
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(v6, "idsAccount");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      objc_msgSend(v11, "im_registeredURIs");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v47;
        while (2)
        {
          for (i = 0; i != v13; ++i)
          {
            if (*(_QWORD *)v47 != v14)
              objc_enumerationMutation(v12);
            v16 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
            objc_msgSend(*(id *)(a1 + 32), "destinationCallerID");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v16) = objc_msgSend(v16, "isEqualToString:", v17);

            if ((_DWORD)v16)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
              *a4 = 1;
              goto LABEL_26;
            }
          }
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v46, v52, 16);
          if (v13)
            continue;
          break;
        }
      }

      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      objc_msgSend(v11, "vettedAliases");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v43;
        while (2)
        {
          for (j = 0; j != v18; ++j)
          {
            if (*(_QWORD *)v43 != v19)
              objc_enumerationMutation(v12);
            v21 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * j);
            objc_msgSend(*(id *)(a1 + 32), "destinationCallerID");
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v21) = objc_msgSend(v21, "isEqualToString:", v22);

            if ((_DWORD)v21)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
              goto LABEL_26;
            }
          }
          v18 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
          if (v18)
            continue;
          break;
        }
      }
LABEL_26:

    }
    else if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "We have an iMessage account that is not backed by an ids account ---- please file a radar", buf, 2u);
      }

    }
  }
  objc_msgSend(v6, "service");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "internalName");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "isEqualToString:", *MEMORY[0x1E0D38F58]);

  if (v26)
  {
    if (IMSharedHelperDeviceHasMultipleSubscriptions())
    {
      objc_msgSend(MEMORY[0x1E0D39730], "IMPhoneNumbersEnabledForMultipleSubscriptionDevice");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v37, v50, 16);
      if (v28)
      {
        v29 = *(_QWORD *)v38;
        do
        {
          for (k = 0; k != v28; ++k)
          {
            if (*(_QWORD *)v38 != v29)
              objc_enumerationMutation(v27);
            v31 = *(void **)(*((_QWORD *)&v37 + 1) + 8 * k);
            objc_msgSend(*(id *)(a1 + 32), "destinationCallerID");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v31) = objc_msgSend(v31, "isEqualToString:", v32);

            if ((_DWORD)v31)
            {
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
              *a4 = 1;
            }
          }
          v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v37, v50, 16);
        }
        while (v28);
      }

    }
    else
    {
      objc_msgSend(v6, "loginID");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "_stripFZIDPrefix");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "destinationCallerID");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend(v34, "isEqualToString:", v35);

      if (v36)
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }

}

uint64_t sub_1D14BC984()
{
  return 1;
}

void sub_1D14BC98C(void *a1, uint64_t a2, void *a3)
{
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void (**v17)(id, void *, void *, void *, void *, void *, _BYTE *);
  char v18;

  v17 = a3;
  if (v17)
  {
    v4 = 0;
    v18 = 0;
    while (1)
    {
      if (v4)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("mmcs-url"), v4);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "_stringForKey:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("mmcs-signature-hex"), v4);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "_stringForKey:", v7);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("mmcs-owner"), v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "_stringForKey:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("decryption-key"), v4);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "_stringForKey:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%d"), CFSTR("file-size"), v4);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "objectForKey:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "stringValue");
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        if (v6)
          goto LABEL_7;
      }
      else
      {
        objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("mmcs-url"));
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("mmcs-signature-hex"));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("mmcs-owner"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("decryption-key"));
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("file-size"));
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        if (v6)
        {
LABEL_7:
          if (v8 && v10 && v12)
            v17[2](v17, v6, v8, v10, v12, v15, &v18);
        }
      }

      if (!v18 && v4++ < 9)
        continue;
      break;
    }
  }

}

void sub_1D14BCC04(void *a1, uint64_t a2, char a3, void *a4)
{
  void (**v6)(id, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v7[10];
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;

  v6 = a4;
  if (v6)
  {
    v39 = 0;
    v40 = &v39;
    v41 = 0x2020000000;
    v42 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x3032000000;
    v36 = sub_1D14BCE20;
    v37 = sub_1D14BCE30;
    v38 = 0;
    v27 = 0;
    v28 = &v27;
    v29 = 0x3032000000;
    v30 = sub_1D14BCE20;
    v31 = sub_1D14BCE30;
    v32 = 0;
    v21 = 0;
    v22 = &v21;
    v23 = 0x3032000000;
    v24 = sub_1D14BCE20;
    v25 = sub_1D14BCE30;
    v26 = 0;
    v15 = 0;
    v16 = &v15;
    v17 = 0x3032000000;
    v18 = sub_1D14BCE20;
    v19 = sub_1D14BCE30;
    v20 = 0;
    v9 = 0;
    v10 = &v9;
    v11 = 0x3032000000;
    v12 = sub_1D14BCE20;
    v13 = sub_1D14BCE30;
    v14 = 0;
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1D14BCE38;
    v7[3] = &unk_1E922B198;
    v8 = a3;
    v7[4] = &v39;
    v7[5] = &v9;
    v7[6] = &v33;
    v7[7] = &v27;
    v7[8] = &v21;
    v7[9] = &v15;
    objc_msgSend(a1, "__message_iterateFileTransferUserInfoWithCompletion:", v7);
    v6[2](v6, *((unsigned __int8 *)v40 + 24), v34[5], v28[5], v22[5], v16[5], v10[5]);
    _Block_object_dispose(&v9, 8);

    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(&v21, 8);

    _Block_object_dispose(&v27, 8);
    _Block_object_dispose(&v33, 8);

    _Block_object_dispose(&v39, 8);
  }

}

void sub_1D14BCDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Block_object_dispose((const void *)(v33 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D14BCE20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14BCE30(uint64_t a1)
{

}

void sub_1D14BCE38(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;

  v19 = a2;
  v18 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v15 = objc_msgSend(v14, "longLongValue");
  v16 = v15;
  if (!*(_BYTE *)(a1 + 80) || v15 <= 104857600)
  {
    v17 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (!v17 || v16 < objc_msgSend(v17, "longLongValue", v18, v19))
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a4);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a5);
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a6);
    }
  }

}

void sub_1D14BD340()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "BlastdoorReceivePipeline");
  v1 = (void *)qword_1ED935F98;
  qword_1ED935F98 = (uint64_t)v0;

}

void sub_1D14BD5DC()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D4D8A0]);
  v1 = objc_msgSend(v0, "initWithBlastDoorInstanceType:", *MEMORY[0x1E0D032D8]);
  v2 = (void *)qword_1ED936260;
  qword_1ED936260 = v1;

}

void sub_1D14BD614()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D4D8A0]);
  v1 = objc_msgSend(v0, "initWithBlastDoorInstanceType:", *MEMORY[0x1E0D032E0]);
  v2 = (void *)qword_1ED936268;
  qword_1ED936268 = v1;

}

void sub_1D14BD64C()
{
  id v0;
  uint64_t v1;
  void *v2;

  v0 = objc_alloc(MEMORY[0x1E0D4D8A0]);
  v1 = objc_msgSend(v0, "initWithBlastDoorInstanceType:", *MEMORY[0x1E0D032D0]);
  v2 = (void *)qword_1EFC63D40;
  qword_1EFC63D40 = v1;

}

uint64_t sub_1D14BDD5C()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("LSApplicationWorkspace"), CFSTR("CoreServices"));
  qword_1EFC63D48 = result;
  return result;
}

void sub_1D14BDD88(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;

  if (!objc_msgSend(a2, "response"))
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "productBuildVersion");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringWithFormat:", CFSTR("TTR:%@ iMessage BlastDoor Failure: %@"), v5, *(_QWORD *)(a1 + 32));
    v28 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("An incoming message failed validation inside of BlastDoor.\n\nMessage type: %@\nGUID: %@\n\nError: %@"), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "URLHostAllowedCharacterSet");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v28, "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v6;
    objc_msgSend(v6, "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("Crash/Hang/Data Loss"), "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("I Didn't Try"), "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("450305"), "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("Messages"), "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(CFSTR("all"), "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR("tap-to-radar://new?Title=%@&Description=%@&Classification=%@&Reproducibility=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&"), v9, v10, v11, v12, v13, v14, v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(a1 + 56))
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 56), "path");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v17, "fileExistsAtPath:", v18);

      v20 = v27;
      if (v19)
      {
        v21 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(*(id *)(a1 + 56), "path");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "stringWithFormat:", CFSTR("%@&Attachments=%@"), v16, v23);
        v24 = objc_claimAutoreleasedReturnValue();

        v16 = (void *)v24;
      }
    }
    else
    {
      v20 = v27;
    }
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v16);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)qword_1EFC63D48, "defaultWorkspace");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "openURL:configuration:completionHandler:", v25, 0, 0);

  }
}

void sub_1D14BE6B8()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v1 = (void *)qword_1EFC63D58;
  qword_1EFC63D58 = (uint64_t)v0;

}

uint64_t sub_1D14BE6E0()
{
  return MEMORY[0x1E0DE7D20](IMBlastdoor, sel__askToTapToRadarForGUID_messageTypeString_sender_errorString_payloadAttachmentURL_);
}

void sub_1D14BEABC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  id v19;
  NSObject *v20;

  if (a2 == 1)
  {
    v19 = objc_begin_catch(a1);
    +[IMBlastdoor logger](IMBlastdoor, "logger");
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a10;
      _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_DEFAULT, "Failed processing command through BlastDoor: %ld", (uint8_t *)&buf, 0xCu);
    }

    objc_end_catch();
    JUMPOUT(0x1D14BEA64);
  }
  _Unwind_Resume(a1);
}

void sub_1D14BEB64(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  char v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  +[IMBlastdoor logger](IMBlastdoor, "logger");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218498;
    v20 = v7;
    v21 = 1024;
    v22 = a2;
    v23 = 2112;
    v24 = v10;
    _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_DEFAULT, "Blastdoor response %p received (command: %hhu, guid: %@)", buf, 0x1Cu);
  }

  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1D14BECD0;
  v14[3] = &unk_1E922B2D0;
  v11 = *(id *)(a1 + 40);
  v16 = v8;
  v17 = v11;
  v18 = a2;
  v15 = v7;
  v12 = v8;
  v13 = v7;
  dispatch_async(MEMORY[0x1E0C80D38], v14);

}

uint64_t sub_1D14BECD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1D14BEF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t block, uint64_t a17, uint64_t (*a18)(uint64_t a1), void *a19, void *a20,id a21)
{
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;

  if (a2 == 1)
  {
    v25 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v23 + 904), "logger");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v25, "name");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "reason");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(v24 - 112) = 138412546;
      *(_QWORD *)(v22 + 4) = v27;
      *(_WORD *)(v24 - 100) = 2112;
      *(_QWORD *)(v22 + 14) = v28;
      _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_DEFAULT, "Failed processing SMS/MMS dictionary through BlastDoor name=(%@); reason=(%@)",
        (uint8_t *)(v24 - 112),
        0x16u);

    }
    v29 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v30 = (void *)objc_msgSend(v29, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 3, 0);
    block = MEMORY[0x1E0C809B0];
    a17 = 3221225472;
    a18 = sub_1D14BF258;
    a19 = &unk_1E92290A8;
    v31 = v21;
    a20 = v30;
    a21 = v31;
    v32 = v30;
    dispatch_async(MEMORY[0x1E0C80D38], &block);

    objc_end_catch();
    JUMPOUT(0x1D14BEF44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14BF0F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[IMBlastdoor logger](IMBlastdoor, "logger");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    v17 = v5;
    v18 = 2112;
    v19 = v8;
    _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_DEFAULT, "Blastdoor response %p received (guid: %@)", buf, 0x16u);
  }

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D14BF244;
  block[3] = &unk_1E9229170;
  v9 = *(id *)(a1 + 40);
  v14 = v6;
  v15 = v9;
  v13 = v5;
  v10 = v6;
  v11 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_1D14BF244(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1D14BF258(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D14BF26C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14BF45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, void *a14, id a15)
{
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v16 + 904), "logger");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v18, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "reason");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(v17 - 96) = 138412546;
      v22 = v17 - 96;
      *(_QWORD *)(v22 + 4) = v20;
      *(_WORD *)(v17 - 84) = 2112;
      *(_QWORD *)(v22 + 14) = v21;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_DEFAULT, "Failed processing Clear Notice through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)(v17 - 96),
        0x16u);

    }
    v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v24 = (void *)objc_msgSend(v23, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 9, 0);
    block = MEMORY[0x1E0C809B0];
    a11 = 3221225472;
    a12 = sub_1D14BF72C;
    a13 = &unk_1E92290A8;
    v25 = v15;
    a14 = v24;
    a15 = v25;
    v26 = v24;
    dispatch_async(MEMORY[0x1E0C80D38], &block);

    objc_end_catch();
    JUMPOUT(0x1D14BF418);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D14BF5C4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14BF5D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[IMBlastdoor logger](IMBlastdoor, "logger");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v16 = v5;
    _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_DEFAULT, "Blastdoor defuseClearNoticePayload, notice: %p", buf, 0xCu);
  }

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D14BF718;
  block[3] = &unk_1E9229170;
  v8 = *(id *)(a1 + 32);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_1D14BF718(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1D14BF72C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14BF91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, void *a14, id a15)
{
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v16 + 904), "logger");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v18, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "reason");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(v17 - 96) = 138412546;
      v22 = v17 - 96;
      *(_QWORD *)(v22 + 4) = v20;
      *(_WORD *)(v17 - 84) = 2112;
      *(_QWORD *)(v22 + 14) = v21;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_DEFAULT, "Failed processing Collaboration Notice through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)(v17 - 96),
        0x16u);

    }
    v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v24 = (void *)objc_msgSend(v23, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 5, 0);
    block = MEMORY[0x1E0C809B0];
    a11 = 3221225472;
    a12 = sub_1D14BFBEC;
    a13 = &unk_1E92290A8;
    v25 = v15;
    a14 = v24;
    a15 = v25;
    v26 = v24;
    dispatch_async(MEMORY[0x1E0C80D38], &block);

    objc_end_catch();
    JUMPOUT(0x1D14BF8D8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D14BFA84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14BFA98(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  id v10;
  _QWORD block[4];
  id v12;
  id v13;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  +[IMBlastdoor logger](IMBlastdoor, "logger");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v16 = v5;
    _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_DEFAULT, "Blastdoor defuseCollaborationNoticePayload, notice: %p", buf, 0xCu);
  }

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D14BFBD8;
  block[3] = &unk_1E9229170;
  v8 = *(id *)(a1 + 32);
  v13 = v6;
  v14 = v8;
  v12 = v5;
  v9 = v6;
  v10 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_1D14BFBD8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1D14BFBEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14BFDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, void *a14, id a15)
{
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v16 + 904), "logger");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v18, "name");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "reason");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)(v17 - 96) = 138412546;
      v22 = v17 - 96;
      *(_QWORD *)(v22 + 4) = v20;
      *(_WORD *)(v17 - 84) = 2112;
      *(_QWORD *)(v22 + 14) = v21;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_DEFAULT, "Failed processing Collaboration Notice Action through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)(v17 - 96),
        0x16u);

    }
    v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v24 = (void *)objc_msgSend(v23, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 5, 0);
    block = MEMORY[0x1E0C809B0];
    a11 = 3221225472;
    a12 = sub_1D14C00E4;
    a13 = &unk_1E92290A8;
    v25 = v15;
    a14 = v24;
    a15 = v25;
    v26 = v24;
    dispatch_async(MEMORY[0x1E0C80D38], &block);

    objc_end_catch();
    JUMPOUT(0x1D14BFD98);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D14BFF44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), -1, 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14BFF5C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  +[IMBlastdoor logger](IMBlastdoor, "logger");
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412546;
    v19 = v10;
    v20 = 2112;
    v21 = v7;
    _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_DEFAULT, "Blastdoor defuseCollaborationNoticeActionDictionary, actionType: %@, guids: %@", buf, 0x16u);

  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1D14C00D0;
  v13[3] = &unk_1E922B398;
  v16 = *(id *)(a1 + 32);
  v17 = a2;
  v14 = v7;
  v15 = v8;
  v11 = v8;
  v12 = v7;
  dispatch_async(MEMORY[0x1E0C80D38], v13);

}

uint64_t sub_1D14C00D0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[7], a1[4], a1[5]);
}

uint64_t sub_1D14C00E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), -1, 0, *(_QWORD *)(a1 + 32));
}

void sub_1D14C0254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v10 + 904), "logger");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "reason");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(a9) = 138412546;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(_QWORD *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing lite message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);

    }
    if (v9)
    {
      v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
      *v9 = (id)objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 10, 0);
    }

    objc_end_catch();
    JUMPOUT(0x1D14C0210);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14C04B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v10 + 904), "logger");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "reason");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(a9) = 138412546;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(_QWORD *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing satellite SMS message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);

    }
    if (v9)
    {
      v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
      *v9 = (id)objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 11, 0);
    }

    objc_end_catch();
    JUMPOUT(0x1D14C0470);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14C072C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v10 + 904), "logger");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "reason");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(a9) = 138412546;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(_QWORD *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing group relay message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);

    }
    if (v9)
    {
      v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
      *v9 = (id)objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 12, 0);
    }

    objc_end_catch();
    JUMPOUT(0x1D14C06E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14C09A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v10 + 904), "logger");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "reason");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(a9) = 138412546;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(_QWORD *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing relay reachability request message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);

    }
    if (v9)
    {
      v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
      *v9 = (id)objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 13, 0);
    }

    objc_end_catch();
    JUMPOUT(0x1D14C0960);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14C0C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  id v15;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    objc_msgSend(*(id *)(v10 + 904), "logger");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v11, "name");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "reason");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(a9) = 138412546;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(_QWORD *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing relay reachability response message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);

    }
    if (v9)
    {
      v15 = objc_alloc(MEMORY[0x1E0CB35C8]);
      *v9 = (id)objc_msgSend(v15, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D359F8], 14, 0);
    }

    objc_end_catch();
    JUMPOUT(0x1D14C0BD8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14C188C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14C1614);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D14C195C(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[128];
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v40 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Family IDS lookup result had %lu elements", buf, 0xCu);
    }

  }
  v4 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v5 = v2;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v35;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v35 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * i);
        objc_msgSend(v5, "objectForKey:", v9);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled(v10))
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v12 = objc_msgSend(v10, "count");
            *(_DWORD *)buf = 134218242;
            v40 = v12;
            v41 = 2112;
            v42 = v9;
            _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Found %lu IDS endpoints for Family member with handle %@", buf, 0x16u);
          }

        }
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v13 = v10;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
        if (v14)
        {
          v15 = *(_QWORD *)v31;
          while (2)
          {
            for (j = 0; j != v14; ++j)
            {
              if (*(_QWORD *)v31 != v15)
                objc_enumerationMutation(v13);
              objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * j), "senderCorrelationIdentifier");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              if (v17)
              {
                objc_msgSend(v4, "addObject:", v17);

                goto LABEL_24;
              }
            }
            v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
            if (v14)
              continue;
            break;
          }
        }
LABEL_24:

      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
    }
    while (v6);
  }

  if (IMOSLoggingEnabled(v18))
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = objc_msgSend(v4, "count");
      *(_DWORD *)buf = 134217984;
      v40 = v20;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "There were %lu SCIs in allFamilyMemberSCIs", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "idsTrustedData");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "senderCorrelationIdentifier");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v4, "containsObject:", v22);

  if (v23)
  {
    if (IMOSLoggingEnabled(v24))
    {
      OSLogHandleForIMFoundationCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v25, OS_LOG_TYPE_INFO, "Found family member relation using SCI", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "fullfillWithValue:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    IMLogHandleForCategory();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_1D1668D98(a1);

    v27 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "_generateError:", CFSTR("Could not find sender correlation identifier in SCI list derived from Family"));
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "failWithError:", v28);

  }
}

Class sub_1D14C22E8(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1EFC63D70)
  {
    v4 = xmmword_1E922B408;
    v5 = 0;
    qword_1EFC63D70 = _sl_dlopen();
  }
  if (!qword_1EFC63D70)
    sub_1D1668E18(&v3);
  result = objc_getClass("FAFetchFamilyCircleRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1D1668E94();
  qword_1EFC63D68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1D14C23C4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1D14C2418()
{
  IMDCKCacheDeleteManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKCacheDeleteManager);
  v1 = (void *)qword_1ED935DC0;
  qword_1ED935DC0 = (uint64_t)v0;

}

uint64_t sub_1D14C2CD4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Registering with cache delete upon launch", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_cacheDeleteSetUp");
}

void sub_1D14C3010(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_1D14C3054(uint64_t a1)
{
  id v1;

  objc_copyWeak(&v1, (id *)(a1 + 32));
  CacheDeleteEnumerateRemovedFiles();
  objc_destroyWeak(&v1);
}

void sub_1D14C30D4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1D14C30E8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  __int128 v16;
  _QWORD block[5];
  id v18;
  _QWORD v19[4];
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  void *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  v6 = v4;
  if (v4)
  {
    v7 = *(_QWORD *)v22;
    v8 = (id *)(a1 + 32);
    *(_QWORD *)&v5 = 138412290;
    v16 = v5;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v22 != v7)
        objc_enumerationMutation(v3);
      v10 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v9);
      if (IMOSLoggingEnabled(v4))
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v16;
          v26 = v10;
          _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Purge event: %@", buf, 0xCu);
        }

      }
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("rescan"), v16);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (v12)
        break;
      objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("historyDone"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (v13)
      {
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = sub_1D14C3414;
        v19[3] = &unk_1E922B448;
        objc_copyWeak(&v20, v8);
        dispatch_async(MEMORY[0x1E0C80D38], v19);
        if (IMOSLoggingEnabled(v14))
        {
          OSLogHandleForIMFoundationCategory();
          v15 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Purge notification - All done", buf, 2u);
          }

        }
        CacheDeleteSyncDone();
        objc_destroyWeak(&v20);
        break;
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D14C3458;
      block[3] = &unk_1E922B470;
      objc_copyWeak(&v18, v8);
      block[4] = v10;
      dispatch_async(MEMORY[0x1E0C80D38], block);
      objc_destroyWeak(&v18);
      if (v6 == ++v9)
      {
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
        v6 = v4;
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }

}

void sub_1D14C3414(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "purgedAttachmentHandler");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "complete");

}

void sub_1D14C3458(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "purgedAttachmentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("path"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerPurgedAttachmentAtPath:", v3);

}

uint64_t sub_1D14C34C4(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  const __CFString *v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t (**v14)(_QWORD);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD block[4];
  uint64_t (**v21)(_QWORD);
  _QWORD aBlock[5];
  id v23;
  uint8_t *v24;
  int v25;
  char v26;
  uint8_t v27[4];
  uint64_t v28;
  uint8_t buf[8];
  _BYTE v30[24];
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread");
      v8 = CFSTR("NO");
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)v30 = 2112;
      if (v7)
        v8 = CFSTR("YES");
      *(_QWORD *)&v30[2] = v5;
      *(_WORD *)&v30[10] = 2112;
      *(_QWORD *)&v30[12] = v8;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "CacheDelete -- purgeable block called with urgency: %d info: %@ isMainThread: %@", buf, 0x1Cu);
    }

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v30 = buf;
  *(_QWORD *)&v30[8] = 0x3032000000;
  *(_QWORD *)&v30[16] = sub_1D14C37CC;
  v31 = sub_1D14C37DC;
  v32 = 0;
  objc_msgSend(*(id *)(a1 + 32), "_ckUtilitiesSharedInstance");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "accountIsVerifiedForMOCAndSafeForCacheDelete");

  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D14C37E4;
  aBlock[3] = &unk_1E922B4E8;
  v26 = v10;
  v12 = *(_QWORD *)(a1 + 32);
  v24 = buf;
  aBlock[4] = v12;
  v13 = v5;
  v23 = v13;
  v25 = a2;
  v14 = (uint64_t (**)(_QWORD))_Block_copy(aBlock);
  if ((objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread") & 1) != 0)
  {
    v15 = v14[2](v14);
  }
  else
  {
    block[0] = v11;
    block[1] = 3221225472;
    block[2] = sub_1D14C3838;
    block[3] = &unk_1E9228700;
    v21 = v14;
    dispatch_sync(MEMORY[0x1E0C80D38], block);

  }
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      v17 = *(_QWORD *)(*(_QWORD *)v30 + 40);
      *(_DWORD *)v27 = 138412290;
      v28 = v17;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "purgeable callback dictionary: %@", v27, 0xCu);
    }

  }
  v18 = *(_QWORD *)(*(_QWORD *)v30 + 40);

  _Block_object_dispose(buf, 8);
  return v18;
}

void sub_1D14C376C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D14C35A0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D14C37CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14C37DC(uint64_t a1)
{

}

void sub_1D14C37E4(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(unsigned __int8 *)(a1 + 60);
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 56);
  if (v2)
    objc_msgSend(v3, "__wrapperAroundCacheDeletePurgeableCallback:urgency:", v4, v5);
  else
    objc_msgSend(v3, "createDictionaryForNotDeletingAnyAttachments:urgency:", v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

uint64_t sub_1D14C3838(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D14C3844(uint64_t a1, int a2, void *a3)
{
  id v6;
  NSObject *v7;
  int v8;
  const __CFString *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t (**v15)(_QWORD);
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD block[4];
  uint64_t (**v22)(_QWORD);
  _QWORD aBlock[5];
  id v24;
  uint8_t *v25;
  int v26;
  char v27;
  uint8_t v28[4];
  uint64_t v29;
  uint8_t buf[8];
  _BYTE v31[24];
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 >= 1)
    objc_msgSend(*(id *)(a1 + 32), "setDeviceLowOnDiskSpace:", 1);
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread");
      v9 = CFSTR("NO");
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)v31 = 2112;
      if (v8)
        v9 = CFSTR("YES");
      *(_QWORD *)&v31[2] = v6;
      *(_WORD *)&v31[10] = 2112;
      *(_QWORD *)&v31[12] = v9;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "CacheDelete -- purge block called with urgency: %d info: %@ isMainThread: %@", buf, 0x1Cu);
    }

  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v31 = buf;
  *(_QWORD *)&v31[8] = 0x3032000000;
  *(_QWORD *)&v31[16] = sub_1D14C37CC;
  v32 = sub_1D14C37DC;
  v33 = 0;
  objc_msgSend(*(id *)(a1 + 32), "_ckUtilitiesSharedInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "accountIsVerifiedForMOCAndSafeForCacheDelete");

  v12 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D14C3B68;
  aBlock[3] = &unk_1E922B4E8;
  v27 = v11;
  v13 = *(_QWORD *)(a1 + 32);
  v25 = buf;
  aBlock[4] = v13;
  v14 = v6;
  v24 = v14;
  v26 = a2;
  v15 = (uint64_t (**)(_QWORD))_Block_copy(aBlock);
  if ((objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread") & 1) != 0)
  {
    v16 = v15[2](v15);
  }
  else
  {
    block[0] = v12;
    block[1] = 3221225472;
    block[2] = sub_1D14C3BBC;
    block[3] = &unk_1E9228700;
    v22 = v15;
    dispatch_sync(MEMORY[0x1E0C80D38], block);

  }
  if (IMOSLoggingEnabled(v16))
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = *(_QWORD *)(*(_QWORD *)v31 + 40);
      *(_DWORD *)v28 = 138412290;
      v29 = v18;
      _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Purge callback with callback dictionary: %@", v28, 0xCu);
    }

  }
  v19 = *(_QWORD *)(*(_QWORD *)v31 + 40);

  _Block_object_dispose(buf, 8);
  return v19;
}

void sub_1D14C3B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D14C3938);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D14C3B68(uint64_t a1)
{
  int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(unsigned __int8 *)(a1 + 60);
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned int *)(a1 + 56);
  if (v2)
    objc_msgSend(v3, "__wrapperAroundCacheDeletePurgingCallback:urgency:", v4, v5);
  else
    objc_msgSend(v3, "createDictionaryForNotDeletingAnyAttachments:urgency:", v4, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

uint64_t sub_1D14C3BBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D14C3BCC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  int v7;
  const __CFString *v8;
  uint64_t v9;
  _BYTE v11[18];
  __int16 v12;
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread");
      v8 = CFSTR("NO");
      *(_DWORD *)v11 = 138412802;
      *(_QWORD *)&v11[4] = v5;
      if (v7)
        v8 = CFSTR("YES");
      *(_WORD *)&v11[12] = 1024;
      *(_DWORD *)&v11[14] = a2;
      v12 = 2112;
      v13 = v8;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "CacheDelete -- periodic block called with info: %@ and urgency: %d isMainThread: %@", v11, 0x1Cu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "createDictionaryForNotDeletingAnyAttachments:urgency:", v5, a2, *(_OWORD *)v11);
  v9 = objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1D14C3ED8()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(CFSTR("/var/mobile/Library/SMS"), "stringByExpandingTildeInPath");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "fileURLWithPath:isDirectory:", v3, 1);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1EFC63D78;
  qword_1EFC63D78 = v1;

}

void sub_1D14C61F8()
{
  id v0;

  +[IMDCKAttachmentSyncController sharedInstance](IMDCKAttachmentSyncController, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setIsSyncing:", 0);

}

uint64_t sub_1D14C6634(uint64_t a1, char a2)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t result;
  NSObject *v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v4)
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 64));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 72));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 80));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412802;
      v12 = v6;
      v13 = 2112;
      v14 = v7;
      v15 = 2112;
      v16 = v8;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Completed fetching batch with starting index: %@ index of next batch: %@ for number of batches: %@", (uint8_t *)&v11, 0x20u);

    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = a2;
  if (*(_BYTE *)(a1 + 88))
    return objc_msgSend(*(id *)(a1 + 32), "_fetchTransfersFromCloudKit:indexOfTransfers:numberOfBatchesToFetch:activity:withCompletion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "/*-------Fetched all transfers we wanted to validate------*/", (uint8_t *)&v11, 2u);
    }

  }
  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id _MessageDateFromTimeStamp(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  void *v15;
  int v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1)
  {
    v4 = objc_msgSend(v1, "unsignedLongLongValue");
    v5 = IMOSLoggingEnabled(v4);
    if ((_DWORD)v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v17 = 138412290;
        v18 = *(double *)&v1;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Converting timestamp: %@ to date", (uint8_t *)&v17, 0xCu);
      }

    }
    v7 = IMOSLoggingEnabled(v5);
    v8 = (double)v4 / 1000000000.0;
    if ((_DWORD)v7)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v17 = 134217984;
        v18 = v8;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "  => seconds: %f", (uint8_t *)&v17, 0xCu);
      }

    }
    if (v8 <= 600000.0)
    {
      if (IMOSLoggingEnabled(v7))
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          LOWORD(v17) = 0;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "  => Returning current date, failed sanity", (uint8_t *)&v17, 2u);
        }

      }
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v10 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      if (IMOSLoggingEnabled(v11))
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v17 = 138412290;
          v18 = *(double *)&v10;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "  => Returning date: %@", (uint8_t *)&v17, 0xCu);
        }

      }
    }
    _ClampDate(v10);
    v13 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = v2;
    v10 = v13;
  }
  v15 = v13;

  return v15;
}

uint64_t _ChatStyleFromChatStyleString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", IMDRelayMessageDictionaryChatStyleInstantMessage) & 1) != 0)
  {
    v2 = 45;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", IMDRelayMessageDictionaryChatStyleGroup) & 1) != 0)
  {
    v2 = 43;
  }
  else if (objc_msgSend(v1, "isEqualToString:", IMDRelayMessageDictionaryChatStyleRoom))
  {
    v2 = 35;
  }
  else
  {
    v2 = 45;
  }

  return v2;
}

void sub_1D14C6CF8(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void (**v38)(void);
  id v39;
  _QWORD v40[4];
  void (**v41)(void);
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t v46[128];
  uint8_t buf[4];
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v38 = a2;
  v39 = *(id *)(a1 + 32);
  v37 = a1;
  objc_msgSend(*(id *)(a1 + 40), "relayEnrollmentController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_approveSelfForSMSRelay");

  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMEventCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 40), "service");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "internalName");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v48 = v7;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "%@ relay received Incoming Plain Text Message From Push Handler", buf, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "relayController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "watchConnectedOverBT"))
  {

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D34CC8], "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "objectForKey:", IMDCTMessageDictionarySenderKey);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v10, "isPhoneNumberEmergencyNumber:", v11);

    if (v12)
    {
      if (IMOSLoggingEnabled(v9))
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "This relay message has come from an emergency number, Not processing message", buf, 2u);
        }

      }
      v38[2]();
      goto LABEL_42;
    }
  }
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v39, "objectForKey:", IMDCTMessageDictionaryReceipientsKey);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v48 = v15;
      _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Recipients: %@", buf, 0xCu);

    }
  }
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  objc_msgSend(v39, "objectForKey:", IMDCTMessageDictionaryReceipientsKey);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  v18 = v17;
  if (v17)
  {
    v19 = *(_QWORD *)v43;
    while (2)
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v43 != v19)
          objc_enumerationMutation(v16);
        v21 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v20);
        if (IMOSLoggingEnabled(v17))
        {
          OSLogHandleForIMFoundationCategory();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v48 = v21;
            _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "  Recipient: %@", buf, 0xCu);
          }

        }
        objc_msgSend(MEMORY[0x1E0D34CC8], "sharedInstance");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "isPhoneNumberEmergencyNumber:", v21);

        if (v24)
        {
          if (IMOSLoggingEnabled(v17))
          {
            OSLogHandleForIMFoundationCategory();
            v34 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, "One of the recipients was an emergency number, this message should never have been relayed, not processing message", buf, 2u);
            }

          }
          v38[2]();

          goto LABEL_42;
        }
        ++v20;
      }
      while (v18 != v20);
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
      v18 = v17;
      if (v17)
        continue;
      break;
    }
  }

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_msgSend(v25, "isSMSFilterSyncEnabled");

  if (v26)
  {
    objc_msgSend(*(id *)(v37 + 40), "relayController");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "idsDeviceFromPushToken:", *(_QWORD *)(v37 + 48));
    v28 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v29))
    {
      OSLogHandleForIMFoundationCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v28, "name");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v48 = v31;
        _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, " Incoming plain text message from %@", buf, 0xCu);

      }
    }
    v32 = (void *)objc_msgSend(v39, "mutableCopy");
    objc_msgSend(v28, "uniqueIDOverride");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "setObject:forKeyedSubscript:", v33, IMDRelayDeviceUniqueIDKey);

  }
  else
  {
    v32 = v39;
  }
  v35 = *(void **)(v37 + 40);
  v36 = *(_QWORD *)(v37 + 56);
  v40[0] = MEMORY[0x1E0C809B0];
  v40[1] = 3221225472;
  v40[2] = sub_1D14C7338;
  v40[3] = &unk_1E922B5C0;
  v41 = v38;
  objc_msgSend(v35, "_processReceivedDictionary:storageContext:receivedViaRelay:withCompletionBlock:", v32, v36, 1, v40);

  v39 = v32;
LABEL_42:

}

uint64_t sub_1D14C7338(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D14C7410(id *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  id v23;
  id v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(a1[4], "service");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "internalName");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v26 = v5;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "%@ relay Received Incoming download Message From Push Handler", buf, 0xCu);

    }
  }
  objc_msgSend(a1[4], "relayEnrollmentController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "_approveSelfForSMSRelay");

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "im_randomTemporaryFileURLWithFileName:", IMDRelayDownloadMessageTemporaryPathKey);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "path");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39CD8], "sharedInstance");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "objectForKey:", IMDRelayMessageAttachmentDictionaryURLStringKey);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "objectForKey:", IMDRelayMessageAttachmentDictionaryOwnerIDKey);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "objectForKey:", IMDRelayMessageAttachmentDictionarySignatureKey);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "objectForKey:", IMDRelayMessageAttachmentDictionaryEncryptionKey);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1[5], "objectForKey:", IMDRelayMessageAttachmentDictionaryOutFileSizeKey);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "integerValue");
  v15 = *MEMORY[0x1E0D34230];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D14C7728;
  v21[3] = &unk_1E922B610;
  v21[4] = a1[4];
  v24 = v17;
  v22 = a1[6];
  v23 = a1[7];
  v16 = v17;
  objc_msgSend(v20, "receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:", v19, v15, v18, v9, v10, v11, v12, v14, 0, v21);

}

void sub_1D14C7728(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  void *v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  void *v30;
  int v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  _QWORD v51[4];
  id v52;
  _QWORD v53[4];
  id v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint8_t v59[128];
  uint8_t buf[4];
  id v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v48 = a2;
  v11 = a3;
  v50 = a5;
  v12 = a6;
  v49 = v12;
  if (!a4)
  {
    if (IMOSLoggingEnabled(v12))
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v61 = v50;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Unable to download incoming message: %@", buf, 0xCu);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    goto LABEL_49;
  }
  v47 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithContentsOfFile:", v11);
  if (IMOSLoggingEnabled(v47))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v61 = v11;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Sucessfully Retrieved binary NSDictionary Attachment for incoming message at path %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "relayController", a1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v14, "watchConnectedOverBT"))
  {

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D34CC8], "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "objectForKey:", IMDCTMessageDictionarySenderKey);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v17, "isPhoneNumberEmergencyNumber:", v18);

    if (v19)
    {
      if (IMOSLoggingEnabled(v15))
      {
        OSLogHandleForIMFoundationCategory();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "This relay message has come from an emergency number, Not processing message", buf, 2u);
        }

      }
      (*(void (**)(void))(*(_QWORD *)(v46 + 56) + 16))();
LABEL_46:

      goto LABEL_49;
    }
  }
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v47, "objectForKey:", IMDCTMessageDictionaryReceipientsKey);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v61 = v22;
      _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Recipients: %@", buf, 0xCu);

    }
  }
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  objc_msgSend(v47, "objectForKey:", IMDCTMessageDictionaryReceipientsKey);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
  v25 = v24;
  if (v24)
  {
    v26 = *(_QWORD *)v56;
    while (2)
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v56 != v26)
          objc_enumerationMutation(v23);
        v28 = *(void **)(*((_QWORD *)&v55 + 1) + 8 * v27);
        if (IMOSLoggingEnabled(v24))
        {
          OSLogHandleForIMFoundationCategory();
          v29 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v61 = v28;
            _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "  Recipient: %@", buf, 0xCu);
          }

        }
        objc_msgSend(MEMORY[0x1E0D34CC8], "sharedInstance");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "isPhoneNumberEmergencyNumber:", v28);

        if (v31)
        {
          if (IMOSLoggingEnabled(v24))
          {
            OSLogHandleForIMFoundationCategory();
            v44 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v44, OS_LOG_TYPE_INFO, "One of the recipients was an emergency number, this message should never have been relayed, not processing message", buf, 2u);
            }

          }
          (*(void (**)(void))(*(_QWORD *)(v46 + 56) + 16))();

          goto LABEL_46;
        }
        ++v27;
      }
      while (v25 != v27);
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v55, v59, 16);
      v25 = v24;
      if (v24)
        continue;
      break;
    }
  }

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = objc_msgSend(v32, "isSMSFilterSyncEnabled");

  v34 = *(void **)(v46 + 32);
  if (v33)
  {
    objc_msgSend(*(id *)(v46 + 32), "relayController");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "idsDeviceFromPushToken:", *(_QWORD *)(v46 + 40));
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v37))
    {
      OSLogHandleForIMFoundationCategory();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v36, "name");
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v61 = v39;
        _os_log_impl(&dword_1D1413000, v38, OS_LOG_TYPE_INFO, " Incoming download message from %@", buf, 0xCu);

      }
    }
    v40 = (void *)objc_msgSend(v47, "mutableCopy");
    objc_msgSend(v36, "uniqueIDOverride");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setObject:forKeyedSubscript:", v41, IMDRelayDeviceUniqueIDKey);

    v42 = *(void **)(v46 + 32);
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = sub_1D14C7E64;
    v53[3] = &unk_1E922B5C0;
    v43 = *(_QWORD *)(v46 + 48);
    v54 = *(id *)(v46 + 56);
    objc_msgSend(v42, "_processReceivedDictionary:storageContext:receivedViaRelay:withCompletionBlock:", v40, v43, 1, v53);

  }
  else
  {
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = sub_1D14C7E70;
    v51[3] = &unk_1E922B5C0;
    v45 = *(_QWORD *)(v46 + 48);
    v52 = *(id *)(v46 + 56);
    objc_msgSend(v34, "_processReceivedDictionary:storageContext:receivedViaRelay:withCompletionBlock:", v47, v45, 1, v51);
    v36 = v52;
  }

LABEL_49:
}

uint64_t sub_1D14C7E64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D14C7E70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1D14C8870(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v2, "objectForKey:", IMDRelayMessageDictionaryRecipientIDKey);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412290;
      v8 = v4;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Found Recipient %@", (uint8_t *)&v7, 0xCu);

    }
  }
  objc_msgSend(v2, "objectForKey:", IMDRelayMessageDictionaryRecipientIDKey);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1D14C8FE0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void (**v13)(void *, _QWORD);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, int);
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  char v31;
  char v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMEventCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "internalName");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      v34 = v6;
      v35 = 2112;
      v36 = v7;
      v37 = 2112;
      v38 = v8;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "%@ relay Received Outgoing Plain Text Message From Push Handler From %@ To %@", buf, 0x20u);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "relayEnrollmentController");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "_approveSelfForSMSRelay");

  v18 = MEMORY[0x1E0C809B0];
  v19 = 3221225472;
  v20 = sub_1D14C92A4;
  v21 = &unk_1E922B6A8;
  v31 = *(_BYTE *)(a1 + 96);
  v10 = *(id *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 32);
  v22 = v10;
  v23 = v11;
  v24 = *(id *)(a1 + 64);
  v32 = *(_BYTE *)(a1 + 97);
  v25 = *(id *)(a1 + 72);
  v26 = *(id *)(a1 + 80);
  v27 = *(id *)(a1 + 88);
  v28 = *(id *)(a1 + 40);
  v12 = v3;
  v30 = v12;
  v29 = *(id *)(a1 + 48);
  v13 = (void (**)(void *, _QWORD))_Block_copy(&v18);
  v14 = *(void **)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 56), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey, v18, v19, v20, v21);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v14) = objc_msgSend(v14, "_allowedToProcessMessageFromToken:fromID:reflectOnly:isInProxyMode:", v15, v16, v17 != 0, *(unsigned __int8 *)(a1 + 96));

  if ((v14 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "_deferredReplicatedMessageReleaseWithAllowedMessage:outgoingProxyBlock:", *(_QWORD *)(a1 + 56), v13);
  else
    v13[2](v13, 0);

}

void sub_1D14C92A4(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  const __CFString *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  const __CFString *v36;
  _BOOL4 v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  void *v45;
  NSObject *v46;
  id v47;
  __CFString *v48;
  NSObject *v49;
  void *v50;
  NSObject *v51;
  void *v52;
  NSObject *v53;
  void *v54;
  __CFString *v55;
  void *v56;
  NSObject *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  int v63;
  NSObject *v64;
  void *v65;
  void *v66;
  void *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  void *v71;
  NSObject *v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  NSObject *v77;
  id v78;
  __CFString *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  id *v83;
  id *v84;
  id *v85;
  int v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  _QWORD v99[5];
  id v100;
  id v101;
  id v102;
  _QWORD v103[5];
  id v104;
  id v105;
  id v106;
  id v107;
  BOOL v108;
  char v109;
  uint8_t buf[4];
  uint64_t v111;
  __int16 v112;
  const __CFString *v113;
  __int16 v114;
  void *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v4 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v4)
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (a2)
        v7 = CFSTR("YES");
      else
        v7 = CFSTR("NO");
      if (*(_BYTE *)(a1 + 104))
        v6 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v111 = (uint64_t)v7;
      v112 = 2112;
      v113 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Is Message from device on the allowed proxy list? %@ isInProxyMode %@", buf, 0x16u);
    }

  }
  if (a2)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Message Type is a plain text outgoing message", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
      objc_msgSend(*(id *)(a1 + 40), "relayController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "idsDeviceFromPushToken:", *(_QWORD *)(a1 + 48));
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (*(_BYTE *)(a1 + 105))
      {
        if (IMOSLoggingEnabled(v12))
        {
          OSLogHandleForIMEventCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v14 = *(_QWORD *)(a1 + 56);
            *(_DWORD *)buf = 138412290;
            v111 = v14;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Message %@ was being replayed not forwarding to peers", buf, 0xCu);
          }

        }
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "account");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "service");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "internalName");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMDRelayServiceController _updateServiceOfMessageInMessageDict:toService:](IMDRelayServiceController, "_updateServiceOfMessageInMessageDict:toService:", v15, v18);
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(a1 + 40), "relayController");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "forwardMessageToPeers:messageType:guid:originalSender:", v19, 143, *(_QWORD *)(a1 + 56), v11);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", IMDRelayMessageItemDictionary);
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMDRelayServiceController _convertIMMessageItemDictionaryToIMMessageItem:timestamp:](IMDRelayServiceController, "_convertIMMessageItemDictionaryToIMMessageItem:timestamp:", v98, *(_QWORD *)(a1 + 64));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = *(void **)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 72);
    objc_msgSend(v21, "guid");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "_markFromStorageIfNeeded:messageGUID:", v23, v24);

    objc_msgSend(*(id *)(a1 + 40), "chatForOutgoingMessage:fromIdentifier:isInProxyMode:createIfNotExists:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 104), 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v25)
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
LABEL_107:

      return;
    }
    objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", IMDRelayMessageDictionarySendOnlyKey);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = objc_msgSend(v26, "BOOLValue");

    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "guid");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "messageWithGUID:", v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();

    v31 = objc_msgSend(v30, "errorCode");
    if (v30)
    {
      v32 = v31;
      if (IMOSLoggingEnabled(v31))
      {
        OSLogHandleForIMFoundationCategory();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v21, "guid");
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = (void *)v34;
          v36 = CFSTR("YES");
          if (!v32)
            v36 = CFSTR("NO");
          *(_DWORD *)buf = 138412546;
          v111 = v34;
          v112 = 2112;
          v113 = v36;
          _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Found a Message with the same GUID %@ and Fail %@", buf, 0x16u);

        }
      }
      v37 = v32 == 0;
      v38 = *(void **)(a1 + 40);
      objc_msgSend(v30, "service");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "service");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v38) = objc_msgSend(v38, "messageServiceNamed:canProcessMessagesFromServiceNamed:", v39, v40);

      if ((v38 & v37) != 0)
      {
        v42 = objc_msgSend(v30, "needsRepeatForRelayReplication");
        v43 = v42;
        v31 = IMOSLoggingEnabled(v42);
        if (!v43)
        {
          if (!v27)
          {
            if ((_DWORD)v31)
            {
              OSLogHandleForIMFoundationCategory();
              v53 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v21, "guid");
                v54 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v21, "service");
                v55 = (__CFString *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v30, "service");
                v56 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412802;
                v111 = (uint64_t)v54;
                v112 = 2112;
                v113 = v55;
                v114 = 2112;
                v115 = v56;
                _os_log_impl(&dword_1D1413000, v53, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ and it did not have an error (found msg service %@)", buf, 0x20u);

              }
            }
            (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
            goto LABEL_106;
          }
          if ((_DWORD)v31)
          {
            OSLogHandleForIMFoundationCategory();
            v51 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v21, "guid");
              v52 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v111 = (uint64_t)v52;
              _os_log_impl(&dword_1D1413000, v51, OS_LOG_TYPE_INFO, "Found message with same GUID %@ but instructed to send message without persistence", buf, 0xCu);

            }
          }
          goto LABEL_44;
        }
        if ((_DWORD)v31)
        {
          OSLogHandleForIMFoundationCategory();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v21, "guid");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v111 = (uint64_t)v45;
            _os_log_impl(&dword_1D1413000, v44, OS_LOG_TYPE_INFO, "Found message with same GUID %@ but still needs relay replication", buf, 0xCu);

          }
        }
        v31 = objc_msgSend(v30, "setNeedsRepeatForRelayReplication:", 0);
      }
      else
      {
        v31 = IMOSLoggingEnabled(v41);
        if ((_DWORD)v31)
        {
          OSLogHandleForIMFoundationCategory();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v21, "guid");
            v47 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "service");
            v48 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v111 = (uint64_t)v47;
            v112 = 2112;
            v113 = v48;
            _os_log_impl(&dword_1D1413000, v46, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ but allowing it to be processed since original message had an error", buf, 0x16u);

          }
        }
      }
    }
    if (v27)
    {
LABEL_44:
      if (v9 || *(_BYTE *)(a1 + 105))
      {
        if (IMOSLoggingEnabled(v31))
        {
          OSLogHandleForIMFoundationCategory();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v21, "guid");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v111 = (uint64_t)v50;
            _os_log_impl(&dword_1D1413000, v49, OS_LOG_TYPE_INFO, "Sending device requested no persistence for message %@, local device not responsible for sending", buf, 0xCu);

          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled(v31))
        {
          OSLogHandleForIMFoundationCategory();
          v57 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v21, "guid");
            v58 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v111 = (uint64_t)v58;
            _os_log_impl(&dword_1D1413000, v57, OS_LOG_TYPE_INFO, "Sending device requested no persistence for message %@, sending to CT now", buf, 0xCu);

          }
        }
        v59 = *(void **)(a1 + 40);
        objc_msgSend(v25, "chatIdentifier");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v59, "sendMessageFromIMMessageItem:forChat:chat:style:", v21, v60, v25, objc_msgSend(v25, "style"));

      }
      v61 = *(_QWORD *)(a1 + 96);
      if (v61)
        (*(void (**)(void))(v61 + 16))();
LABEL_106:

      goto LABEL_107;
    }
    if (v9)
    {
      objc_msgSend(*(id *)(a1 + 32), "_numberForKey:", IMDRelayMessageDictionaryiMessageCapability);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = objc_msgSend(v62, "intValue");

      if (v63 == 2)
      {
        if (IMOSLoggingEnabled(v31))
        {
          OSLogHandleForIMFoundationCategory();
          v68 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v25, "chatIdentifier");
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v111 = (uint64_t)v69;
            _os_log_impl(&dword_1D1413000, v68, OS_LOG_TYPE_INFO, "We received an outgoing message and we are only reflecting it, setting shouldForceToSMS on chat %@ to YES", buf, 0xCu);

          }
        }
        v70 = *(void **)(a1 + 40);
        objc_msgSend(v25, "chatIdentifier");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v70, "_updateShouldForceToSMSForChatWithIdentifier:style:shouldForceToSMS:", v67, objc_msgSend(v25, "style"), 1);
        goto LABEL_80;
      }
      if (v63 == 1)
      {
        if (IMOSLoggingEnabled(v31))
        {
          OSLogHandleForIMFoundationCategory();
          v64 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v25, "chatIdentifier");
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v111 = (uint64_t)v65;
            _os_log_impl(&dword_1D1413000, v64, OS_LOG_TYPE_INFO, "We received an outgoing message and we are only reflecting it, setting shouldForceToSMS on chat %@ to NO", buf, 0xCu);

          }
        }
        v66 = *(void **)(a1 + 40);
        objc_msgSend(v25, "chatIdentifier");
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v66, "_updateShouldForceToSMSForChatWithIdentifier:style:shouldForceToSMS:", v67, objc_msgSend(v25, "style"), 0);
LABEL_80:

      }
    }
    if (v21)
    {
      objc_msgSend(*(id *)(a1 + 40), "loginID");
      v71 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setSender:", v71);

      if ((IMSharedHelperDeviceHasMultipleSubscriptions() & 1) != 0)
        objc_msgSend(v25, "lastAddressedLocalHandle");
      else
        objc_msgSend(*(id *)(a1 + 40), "_callerIDUsingFromIdentifier:", *(_QWORD *)(a1 + 80));
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "setDestinationCallerID:", v74);

      objc_msgSend(*(id *)(a1 + 40), "tapbackInterpreter");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "interpretMessageItem:inChat:", v21, v25);
      v73 = (void *)objc_claimAutoreleasedReturnValue();

      if (v9)
      {
        if (IMOSLoggingEnabled(v76))
        {
          OSLogHandleForIMEventCategory();
          v77 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v73, "guid");
            v78 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v25, "chatIdentifier");
            v79 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412802;
            v111 = (uint64_t)v78;
            v112 = 2112;
            v113 = v79;
            v114 = 2112;
            v115 = v25;
            _os_log_impl(&dword_1D1413000, v77, OS_LOG_TYPE_INFO, "send message with guid: %@  to identifier: %@   chat: %@", buf, 0x20u);

          }
        }
        v80 = *(void **)(a1 + 40);
        objc_msgSend(v25, "chatIdentifier");
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        v82 = objc_msgSend(v25, "style");
        v99[0] = MEMORY[0x1E0C809B0];
        v99[1] = 3221225472;
        v99[2] = sub_1D14CA584;
        v99[3] = &unk_1E922B680;
        v99[4] = *(_QWORD *)(a1 + 40);
        v100 = v73;
        v101 = v25;
        v102 = *(id *)(a1 + 96);
        objc_msgSend(v80, "processMessageForSending:toChat:style:allowWatchdog:completionBlock:", v100, v81, v82, 0, v99);
        v83 = &v100;
        v84 = &v101;
        v85 = &v102;
      }
      else
      {
        v86 = *(unsigned __int8 *)(a1 + 105);
        if (!*(_BYTE *)(a1 + 105))
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v87 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v73, "setTime:", v87);

        }
        v88 = *(void **)(a1 + 40);
        objc_msgSend(v25, "chatIdentifier");
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        v90 = objc_msgSend(v25, "style");
        v103[0] = MEMORY[0x1E0C809B0];
        v103[1] = 3221225472;
        v103[2] = sub_1D14CA27C;
        v103[3] = &unk_1E922B658;
        v108 = v9 != 0;
        v109 = *(_BYTE *)(a1 + 105);
        v103[4] = *(_QWORD *)(a1 + 40);
        v104 = v73;
        v105 = v25;
        v107 = *(id *)(a1 + 96);
        v106 = *(id *)(a1 + 56);
        objc_msgSend(v88, "processMessageForSending:toChat:style:allowWatchdog:completionBlock:", v104, v89, v90, v86 == 0, v103);

        v83 = &v104;
        v84 = &v105;
        v85 = &v107;
        v81 = v106;
      }

      if (IMOSLoggingEnabled(v91))
      {
        OSLogHandleForIMFoundationCategory();
        v92 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v73, "guid");
          v93 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v111 = (uint64_t)v93;
          _os_log_impl(&dword_1D1413000, v92, OS_LOG_TYPE_INFO, "Reflecting outgoing message with Guid: %@", buf, 0xCu);

        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled(v31))
      {
        OSLogHandleForIMFoundationCategory();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v72, OS_LOG_TYPE_INFO, " Unable to create message item from message dictionary", buf, 2u);
        }

      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
      v73 = 0;
    }
    if ((IMSharedHelperDeviceHasMultipleSubscriptions() & 1) == 0)
    {
      v94 = *(void **)(a1 + 40);
      objc_msgSend(v25, "chatIdentifier");
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      v96 = objc_msgSend(v25, "style");
      objc_msgSend(*(id *)(a1 + 88), "_stripFZIDPrefix");
      v97 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "_updateLastAddressedIDsIfNeededForChatWithIdentifier:style:lastAddressedHandle:lastAddressedSIMID:", v95, v96, v97, 0);

    }
    v21 = v73;
    goto LABEL_106;
  }
  objc_msgSend(*(id *)(a1 + 40), "sendUnapproveToToken:messageGUID:completion:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 96));
}

void sub_1D14CA27C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 72) || *(_BYTE *)(a1 + 73))
  {
    v5 = IMOSLoggingEnabled(v3);
    if ((_DWORD)v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "This messag was addressed to me, however I was told to reflect it only", (uint8_t *)&v20, 2u);
      }

    }
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMEventCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v20 = 138412290;
        v21 = v4;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v20, 0xCu);
      }

    }
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(*(id *)(a1 + 48), "style");
    objc_msgSend(*(id *)(a1 + 40), "time");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "didSendMessage:forChat:style:forceDate:", v8, v10, v11, v12);

  }
  else
  {
    v13 = IMOSLoggingEnabled(v3);
    if ((_DWORD)v13)
    {
      OSLogHandleForIMEventCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v20 = 138412290;
        v21 = v4;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v20, 0xCu);
      }

    }
    if (*(_BYTE *)(a1 + 73))
    {
      if (IMOSLoggingEnabled(v13))
      {
        OSLogHandleForIMEventCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = *(void **)(a1 + 56);
          v20 = 138412290;
          v21 = v16;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Message %@ is being replayed. Not sending out over CT", (uint8_t *)&v20, 0xCu);
        }

      }
    }
    else
    {
      v17 = *(void **)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "sendMessageFromIMMessageItem:forChat:chat:style:", v18, v19, *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 48), "style"));

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1D14CA584(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMEventCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v10, 0xCu);
    }

  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(*(id *)(a1 + 48), "style");
  objc_msgSend(*(id *)(a1 + 40), "time");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didSendMessage:forChat:style:forceDate:", v5, v7, v8, v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1D14CA9E8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  void (**v11)(void *, _QWORD);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, int);
  void *v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  char v29;
  uint8_t buf[4];
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "internalName");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v31 = v6;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "%@ relay Received Outgoing download Message From Push Handler", buf, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "relayEnrollmentController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "_approveSelfForSMSRelay");

  v16 = MEMORY[0x1E0C809B0];
  v17 = 3221225472;
  v18 = sub_1D14CAC7C;
  v19 = &unk_1E922B720;
  v8 = *(id *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 32);
  v20 = v8;
  v21 = v9;
  v22 = *(id *)(a1 + 48);
  v29 = *(_BYTE *)(a1 + 96);
  v23 = *(id *)(a1 + 56);
  v24 = *(id *)(a1 + 64);
  v25 = *(id *)(a1 + 72);
  v26 = *(id *)(a1 + 80);
  v10 = v3;
  v28 = v10;
  v27 = *(id *)(a1 + 88);
  v11 = (void (**)(void *, _QWORD))_Block_copy(&v16);
  v12 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 80);
  objc_msgSend(*(id *)(a1 + 40), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey, v16, v17, v18, v19);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v12) = objc_msgSend(v12, "_allowedToProcessMessageFromToken:fromID:reflectOnly:isInProxyMode:", v13, v14, v15 != 0, *(unsigned __int8 *)(a1 + 97));

  if ((v12 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "_deferredReplicatedMessageReleaseWithAllowedMessage:outgoingProxyBlock:", *(_QWORD *)(a1 + 40), v11);
  else
    v11[2](v11, 0);

}

void sub_1D14CAC7C(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  BOOL v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  void *v39;
  const __CFString *v40;
  _BOOL4 v41;
  void *v42;
  void *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  id v53;
  __CFString *v54;
  void *v55;
  id v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  __CFString *v60;
  BOOL v61;
  _QWORD v62[4];
  id v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  BOOL v70;
  BOOL v71;
  char v72;
  uint8_t buf[4];
  uint64_t v74;
  __int16 v75;
  const __CFString *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v4 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v4)
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (a2)
        v6 = CFSTR("YES");
      *(_DWORD *)buf = 138412290;
      v74 = (uint64_t)v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Is Message from device on the allowed proxy list? %@", buf, 0xCu);
    }

  }
  v7 = IMOSLoggingEnabled(v4);
  if (a2)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Message Type is an outgoing download message", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = v9 != 0;

    if (!v9)
    {
      objc_msgSend(*(id *)(a1 + 40), "relayController");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "idsDeviceFromPushToken:", *(_QWORD *)(a1 + 48));
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (*(_BYTE *)(a1 + 104))
      {
        if (IMOSLoggingEnabled(v12))
        {
          OSLogHandleForIMEventCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v14 = *(_QWORD *)(a1 + 56);
            *(_DWORD *)buf = 138412290;
            v74 = v14;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Message %@ was being replayed not forwarding to peers", buf, 0xCu);
          }

        }
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 32);
        objc_msgSend(*(id *)(a1 + 40), "account");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "service");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "internalName");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMDRelayServiceController _updateServiceOfMessageInMessageDict:toService:](IMDRelayServiceController, "_updateServiceOfMessageInMessageDict:toService:", v21, v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(*(id *)(a1 + 40), "relayController");
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "forwardMessageToPeers:messageType:guid:originalSender:", v25, 144, *(_QWORD *)(a1 + 56), v11);

      }
    }
    v27 = v9 == 0;
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", IMDRelayMessageItemDictionary);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMDRelayServiceController _convertIMMessageItemDictionaryToIMMessageItem:timestamp:](IMDRelayServiceController, "_convertIMMessageItemDictionaryToIMMessageItem:timestamp:", v28, *(_QWORD *)(a1 + 64));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v29 = *(void **)(a1 + 40);
    v30 = *(_QWORD *)(a1 + 72);
    objc_msgSend(v17, "guid");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "_markFromStorageIfNeeded:messageGUID:", v30, v31);

    objc_msgSend(*(id *)(a1 + 40), "chatForOutgoingMessage:fromIdentifier:isInProxyMode:createIfNotExists:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 80), 0, 1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    if (v18)
    {
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "guid");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "messageWithGUID:", v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();

      v35 = objc_msgSend(v34, "errorCode");
      if (v34)
      {
        v36 = v35;
        if (IMOSLoggingEnabled(v35))
        {
          OSLogHandleForIMFoundationCategory();
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v17, "guid");
            v38 = objc_claimAutoreleasedReturnValue();
            v39 = (void *)v38;
            v40 = CFSTR("YES");
            if (!v36)
              v40 = CFSTR("NO");
            *(_DWORD *)buf = 138412546;
            v74 = v38;
            v75 = 2112;
            v76 = v40;
            _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Found a Message with the same GUID %@ and Fail %@", buf, 0x16u);

          }
        }
        v41 = v36 == 0;
        objc_msgSend(v34, "service");
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v17, "service");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = objc_msgSend(v42, "isEqualToString:", v43);

        if ((v44 & v41) != 0)
        {
          v46 = objc_msgSend(v34, "needsRepeatForRelayReplication");
          v47 = v46;
          v48 = IMOSLoggingEnabled(v46);
          if (!v47)
          {
            if (v48)
            {
              OSLogHandleForIMFoundationCategory();
              v58 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v17, "guid");
                v59 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "service");
                v60 = (__CFString *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412546;
                v74 = (uint64_t)v59;
                v75 = 2112;
                v76 = v60;
                _os_log_impl(&dword_1D1413000, v58, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ and it did not have an error", buf, 0x16u);

              }
            }
            (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
            goto LABEL_47;
          }
          if (v48)
          {
            OSLogHandleForIMFoundationCategory();
            v49 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v17, "guid");
              v50 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v74 = (uint64_t)v50;
              _os_log_impl(&dword_1D1413000, v49, OS_LOG_TYPE_INFO, "Found message with same GUID %@ but still needs relay replication", buf, 0xCu);

            }
          }
          objc_msgSend(v34, "setNeedsRepeatForRelayReplication:", 0);
          v51 = 1;
LABEL_46:
          objc_msgSend(*(id *)(a1 + 40), "attachmentController");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          v62[0] = MEMORY[0x1E0C809B0];
          v62[1] = 3221225472;
          v62[2] = sub_1D14CB588;
          v62[3] = &unk_1E922B6F8;
          v56 = v17;
          v57 = *(_QWORD *)(a1 + 40);
          v63 = v56;
          v64 = v57;
          v65 = *(id *)(a1 + 80);
          v66 = v18;
          v70 = v27;
          v71 = v61;
          v72 = *(_BYTE *)(a1 + 104);
          v69 = *(id *)(a1 + 96);
          v67 = *(id *)(a1 + 56);
          v68 = *(id *)(a1 + 88);
          objc_msgSend(v55, "retrieveAttachmentsForMessage:ignoreStoredTransfers:displayID:token:completionBlock:", v56, v51, 0, 0, v62);

LABEL_47:
          goto LABEL_48;
        }
        if (IMOSLoggingEnabled(v45))
        {
          OSLogHandleForIMFoundationCategory();
          v52 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v17, "guid");
            v53 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "service");
            v54 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v74 = (uint64_t)v53;
            v75 = 2112;
            v76 = v54;
            _os_log_impl(&dword_1D1413000, v52, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ but allowing it to be processed since original message had an error", buf, 0x16u);

          }
        }
      }
      v51 = 0;
      goto LABEL_46;
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
  }
  else
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Alert said no, sending back a failure ", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "relayController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "idsDeviceFromPushToken:", *(_QWORD *)(a1 + 48));
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", *(_QWORD *)(a1 + 56), IMDRelayMessageDictionaryGUIDKey, MEMORY[0x1E0C9AAB0], IMDRelayAuthorizationUnauthorizedDeviceKey, 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "relayController");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "enrollmentController");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "sendUnApproveToDevice:extraKeys:", v17, v18);

    (*(void (**)(void))(*(_QWORD *)(a1 + 96) + 16))();
  }
LABEL_48:

}

void sub_1D14CB4D4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14CB220);
  }
  _Unwind_Resume(a1);
}

void sub_1D14CB588(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  id v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  char HasMultipleSubscriptions;
  void *v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  __CFString *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  id *v30;
  id *v31;
  id *v32;
  void *v33;
  NSObject *v34;
  __CFString *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  int8x16_t v48;
  int8x16_t v49;
  id v50;
  _QWORD v51[4];
  int8x16_t v52;
  id v53;
  id v54;
  _QWORD v55[4];
  int8x16_t v56;
  id v57;
  id v58;
  id v59;
  __int16 v60;
  uint8_t buf[4];
  const __CFString *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v50 = a2;
  v9 = a3;
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = CFSTR("NO");
      if (a4)
        v11 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v62 = v11;
      v63 = 1024;
      LODWORD(v64) = a5;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "AttachmentController complete, success: %@   error: %d", buf, 0x12u);
    }

  }
  v12 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "loginID");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "setSender:", v13);

  HasMultipleSubscriptions = IMSharedHelperDeviceHasMultipleSubscriptions();
  v15 = *(void **)(a1 + 32);
  if ((HasMultipleSubscriptions & 1) != 0)
    objc_msgSend(*(id *)(a1 + 56), "lastAddressedLocalHandle");
  else
    objc_msgSend(*(id *)(a1 + 48), "_stripFZIDPrefix");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setDestinationCallerID:", v16);

  v17 = *(_BYTE *)(a1 + 88) == 0;
  v19 = IMOSLoggingEnabled(v18);
  if (v17)
  {
    if (v19)
    {
      OSLogHandleForIMEventCategory();
      v34 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v35 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 56), "chatIdentifier");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        v37 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        v62 = v35;
        v63 = 2112;
        v64 = v36;
        v65 = 2112;
        v66 = v37;
        _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, "Noting relayed SMS message with guid %@ to identifier: %@   chat: %@", buf, 0x20u);

      }
    }
    v38 = *(_QWORD *)(a1 + 32);
    v39 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 56), "chatIdentifier");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = objc_msgSend(*(id *)(a1 + 56), "style");
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = sub_1D14CBDFC;
    v51[3] = &unk_1E922B680;
    v49 = *(int8x16_t *)(a1 + 32);
    v41 = (id)v49.i64[0];
    v52 = vextq_s8(v49, v49, 8uLL);
    v53 = *(id *)(a1 + 56);
    v54 = *(id *)(a1 + 80);
    objc_msgSend(v39, "processMessageForSending:toChat:style:allowWatchdog:completionBlock:", v38, v33, v40, 0, v51);
    v30 = (id *)&v52.i64[1];
    v31 = &v53;
    v32 = &v54;
  }
  else
  {
    if (v19)
    {
      OSLogHandleForIMEventCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v21 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 56), "chatIdentifier");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        v62 = v21;
        v63 = 2112;
        v64 = v22;
        v65 = 2112;
        v66 = v23;
        _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Will relay SMS message with guid %@   to identifier: %@   chat: %@", buf, 0x20u);

      }
    }
    if (*(_BYTE *)(a1 + 89) || *(_BYTE *)(a1 + 90))
    {
      v24 = 0;
    }
    else
    {
      v46 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "setTime:", v47);

      v24 = 1;
    }
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 56), "chatIdentifier");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(*(id *)(a1 + 56), "style");
    v55[0] = MEMORY[0x1E0C809B0];
    v55[1] = 3221225472;
    v55[2] = sub_1D14CBAF4;
    v55[3] = &unk_1E922B658;
    v60 = *(_WORD *)(a1 + 89);
    v48 = *(int8x16_t *)(a1 + 32);
    v29 = (id)v48.i64[0];
    v56 = vextq_s8(v48, v48, 8uLL);
    v57 = *(id *)(a1 + 56);
    v59 = *(id *)(a1 + 80);
    v58 = *(id *)(a1 + 64);
    objc_msgSend(v26, "processMessageForSending:toChat:style:allowWatchdog:completionBlock:", v25, v27, v28, v24, v55);

    v30 = (id *)&v56.i64[1];
    v31 = &v57;
    v32 = &v59;
    v33 = v58;
  }

  if ((IMSharedHelperDeviceHasMultipleSubscriptions() & 1) == 0)
  {
    v42 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 56), "chatIdentifier");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = objc_msgSend(*(id *)(a1 + 56), "style");
    objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "_updateLastAddressedIDsIfNeededForChatWithIdentifier:style:lastAddressedHandle:lastAddressedSIMID:", v43, v44, v45, 0);

  }
}

void sub_1D14CBAF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 72) || *(_BYTE *)(a1 + 73))
  {
    v5 = IMOSLoggingEnabled(v3);
    if ((_DWORD)v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "This messag was addressed to me, however I was told to reflect it only", (uint8_t *)&v20, 2u);
      }

    }
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMEventCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v20 = 138412290;
        v21 = v4;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v20, 0xCu);
      }

    }
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(void **)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(*(id *)(a1 + 48), "style");
    objc_msgSend(*(id *)(a1 + 40), "time");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "didSendMessage:forChat:style:forceDate:", v8, v10, v11, v12);

  }
  else
  {
    v13 = IMOSLoggingEnabled(v3);
    if ((_DWORD)v13)
    {
      OSLogHandleForIMEventCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v20 = 138412290;
        v21 = v4;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v20, 0xCu);
      }

    }
    if (*(_BYTE *)(a1 + 73))
    {
      if (IMOSLoggingEnabled(v13))
      {
        OSLogHandleForIMEventCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          v16 = *(void **)(a1 + 56);
          v20 = 138412290;
          v21 = v16;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Message %@ is being replayed. Not sending out over CT", (uint8_t *)&v20, 0xCu);
        }

      }
    }
    else
    {
      v17 = *(void **)(a1 + 32);
      v18 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "sendMessageFromIMMessageItem:forChat:chat:style:", v18, v19, *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 48), "style"));

    }
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

}

void sub_1D14CBDFC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMEventCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v10, 0xCu);
    }

  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(*(id *)(a1 + 48), "style");
  objc_msgSend(*(id *)(a1 + 40), "time");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didSendMessage:forChat:style:forceDate:", v5, v7, v8, v9);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1D14CC0B0(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMEventCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "internalName");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *(_QWORD *)(a1 + 40);
      v12 = 138412546;
      v13 = v6;
      v14 = 2112;
      v15 = v7;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "%@ relay received Message ID sent: %@", (uint8_t *)&v12, 0x16u);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "relayEnrollmentController");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_approveSelfForSMSRelay");

  if (objc_msgSend(*(id *)(a1 + 40), "length"))
  {
    v10 = *(void **)(a1 + 32);
    v9 = a1 + 32;
    objc_msgSend(v10, "_markFromStorageIfNeeded:messageGUID:", *(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 8));
    objc_msgSend(*(id *)v9, "_markMessageAsSent:", *(_QWORD *)(v9 + 8));
  }
  else if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "  => Empty message ID, ignoring", (uint8_t *)&v12, 2u);
    }

  }
  v3[2](v3);

}

void sub_1D14CC454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D14CC46C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14CC47C(uint64_t a1)
{

}

void sub_1D14CC484(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "relayEnrollmentController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_approveSelfForSMSRelay");

  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMEventCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 40);
      v8 = *(_QWORD *)(a1 + 48);
      v27 = 138412546;
      v28 = v7;
      v29 = 2112;
      v30 = v8;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Told to mark message ID %@ as read with timestamp %@", (uint8_t *)&v27, 0x16u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "_markFromStorageIfNeeded:messageGUID:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
  v9 = *(_BYTE *)(a1 + 88) == 0;
  v10 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  _MessageDateFromTimeStamp(*(void **)(a1 + 48));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(v10, "didReceiveMessageReadReceiptForMessageID:date:completionBlock:", v11, v12, v3);
    goto LABEL_16;
  }
  objc_msgSend(v10, "didReceiveMessageReadForMessageID:date:completionBlock:", v11, v12, v3);

  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "messageWithGUID:", *(_QWORD *)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "relayController");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "idsDeviceFromPushToken:", *(_QWORD *)(a1 + 64));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15 || *(_BYTE *)(a1 + 89))
      goto LABEL_14;
    objc_msgSend(*(id *)(a1 + 32), "relayController");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v16, "_localDeviceSupportsSMS"))
    {
      objc_msgSend(MEMORY[0x1E0D39738], "sharedInstance");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "ctSubscriptionInfo");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 72), "_stripFZIDPrefix");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v18, "__im_containsPhoneNumber:", v19);

      if (!v20)
      {
LABEL_14:

        goto LABEL_16;
      }
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "chatForMessage:", v12);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

      if (v16)
      {
        objc_msgSend(*(id *)(a1 + 32), "mainSession");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "guid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v16, "chatIdentifier");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "sendReadReceiptForMessage:toChatID:identifier:style:reflectOnly:", v12, v23, v24, objc_msgSend(v16, "style"), 1);

      }
    }

    goto LABEL_14;
  }
LABEL_16:

  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v26 = *(void **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = 0;

}

void sub_1D14CC878(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "relayEnrollmentController");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_approveSelfForSMSRelay");

  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMEventCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "internalName");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56);
      v14 = 138413058;
      v15 = v8;
      v16 = 2112;
      v17 = v9;
      v18 = 2112;
      v19 = v10;
      v20 = 2112;
      v21 = v11;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "%@ relay received Message ID:%@ Send Failure Message From Push Handler, from:%@ to:%@", (uint8_t *)&v14, 0x2Au);

    }
  }
  v13 = *(void **)(a1 + 32);
  v12 = a1 + 32;
  objc_msgSend(v13, "_markFromStorageIfNeeded:messageGUID:", *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 8));
  objc_msgSend(*(id *)v12, "didReceiveError:forMessageID:forceError:", 4, *(_QWORD *)(v12 + 8), 1);
  v3[2](v3);

}

void sub_1D14CD3DC(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "internalName");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = 138412290;
      v11 = v6;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "%@ Relay received Message ID Send Failure Message From Push Handler", (uint8_t *)&v10, 0xCu);

    }
  }
  v7 = *(void **)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = a1 + 32;
  objc_msgSend(v7, "_markFromStorageIfNeeded:messageGUID:", v8, *(_QWORD *)(v9 + 16));
  objc_msgSend(*(id *)v9, "didReceiveError:forMessageID:forceError:", 4, *(_QWORD *)(v9 + 16), 1);
  v3[2](v3);

}

void sub_1D14CD884(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  NSObject *v4;
  void *v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  int v35;
  int v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  _QWORD v49[4];
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  int v54;
  _QWORD v55[4];
  id v56;
  uint8_t buf[4];
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "internalName");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v58 = v6;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "%@ Relay received group mutation message from push handler", buf, 0xCu);

    }
  }
  v7 = objc_msgSend(*(id *)(a1 + 32), "_allowedToProcessMessageFromToken:fromID:reflectOnly:isInProxyMode:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *(unsigned __int8 *)(a1 + 64));
  v8 = *(void **)(a1 + 32);
  if ((v7 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 56), "groupID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "originalGroupID");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "_chatForGroupID:originalGroupID:", v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v12 = *(void **)(a1 + 32);
      objc_msgSend(*(id *)(a1 + 56), "destinationCallerID");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = objc_msgSend(v12, "_canLocallySendWithPhoneNumber:", v13);

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v15 = *(void **)(a1 + 32);
        v16 = *(id *)(a1 + 56);
        objc_msgSend(v16, "updatedName");
        v48 = (id)objc_claimAutoreleasedReturnValue();
        if (v14)
        {
          objc_msgSend(v11, "displayName");
          v47 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 56), "destinationCallerID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "guid");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "chatIdentifier");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v11, "style");
          objc_msgSend(*(id *)(a1 + 56), "guid");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "UUIDString");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "updateDisplayName:fromDisplayName:fromID:forChatID:identifier:style:messageID:", v48, v47, v17, v18, v19, v20, v22);
        }
        else
        {
          objc_msgSend(*(id *)(a1 + 56), "guid");
          v47 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v47, "UUIDString");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 56), "sender");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 56), "destinationCallerID");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "chatIdentifier");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v11, "style");
          objc_msgSend(*(id *)(a1 + 32), "account");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "didReceiveDisplayNameChange:guid:fromID:toIdentifier:forChat:style:account:", v48, v17, v18, v19, v21, v33, v22);
        }

        goto LABEL_23;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v25 = *(id *)(a1 + 56);
        if (!v14)
        {
          v34 = v25;
          v35 = objc_msgSend(v25, "participantChangeType") == 0;
          if (objc_msgSend(*(id *)(a1 + 56), "failed") != v35)
            v36 = 2;
          else
            v36 = 3;
          objc_msgSend(v34, "changedParticipants");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v49[0] = MEMORY[0x1E0C809B0];
          v49[1] = 3221225472;
          v49[2] = sub_1D14CDFB8;
          v49[3] = &unk_1E922B7E8;
          v38 = *(id *)(a1 + 56);
          v54 = v36;
          v39 = *(_QWORD *)(a1 + 32);
          v50 = v38;
          v51 = v39;
          v52 = v11;
          v48 = v34;
          v53 = v48;
          objc_msgSend(v37, "enumerateKeysAndObjectsUsingBlock:", v49);

          goto LABEL_24;
        }
        v48 = v25;
        v26 = objc_alloc(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v48, "changedParticipants");
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v28 = (void *)objc_msgSend(v26, "initWithCapacity:", objc_msgSend(v27, "count"));

        objc_msgSend(v48, "changedParticipants");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v55[0] = MEMORY[0x1E0C809B0];
        v55[1] = 3221225472;
        v55[2] = sub_1D14CDEDC;
        v55[3] = &unk_1E922B7C0;
        v47 = v28;
        v56 = v47;
        objc_msgSend(v29, "enumerateKeysAndObjectsUsingBlock:", v55);

        if (objc_msgSend(v48, "participantChangeType"))
        {
          v30 = *(void **)(a1 + 32);
          objc_msgSend(v11, "guid");
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "chatIdentifier");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v30, "removePersonInfo:chatID:identifier:style:", v47, v31, v32, objc_msgSend(v11, "style"));
        }
        else
        {
          v40 = objc_alloc(MEMORY[0x1E0D39918]);
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", CFSTR("join us"));
          objc_msgSend(v48, "guid");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "UUIDString");
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = (void *)objc_msgSend(v40, "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:", 0, v41, v42, 0, 0, 5, 0, v44, 0);

          v45 = *(void **)(a1 + 32);
          objc_msgSend(v11, "guid");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "chatIdentifier");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "invitePersonInfo:withMessage:toChatID:identifier:style:", v47, v31, v32, v46, objc_msgSend(v11, "style"));

        }
LABEL_23:

LABEL_24:
      }
    }
    v3[2](v3);
    goto LABEL_26;
  }
  v23 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 56), "guid");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "UUIDString");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendUnapproveToToken:messageGUID:completion:", v23, v24, v3);

LABEL_26:
}

void sub_1D14CDEDC(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v10[3];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(a1 + 32);
  v5 = *MEMORY[0x1E0D36E10];
  v10[0] = *MEMORY[0x1E0D36D90];
  v10[1] = v5;
  v11[0] = a2;
  v11[1] = a2;
  v10[2] = *MEMORY[0x1E0D38C60];
  v11[2] = a3;
  v6 = (void *)MEMORY[0x1E0C99D80];
  v7 = a3;
  v8 = a2;
  objc_msgSend(v6, "dictionaryWithObjects:forKeys:count:", v11, v10, 3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v9);

}

void sub_1D14CDFB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  IMDChatMemberStatusChangeContext *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  int v22;
  id v23;

  v23 = a2;
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "destinationCallerID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v23, "isEqualToString:", v6);

  if (v7 && *(_DWORD *)(a1 + 64) == 3)
  {
    v8 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(*(id *)(a1 + 48), "style");
    objc_msgSend(*(id *)(a1 + 40), "account");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "didLeaveChat:style:account:messageID:", v9, v10, v11, v5);

  }
  objc_msgSend(*(id *)(a1 + 40), "itemWithGUID:", v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = objc_msgSend(*(id *)(a1 + 32), "failed");
  v14 = objc_alloc_init(IMDChatMemberStatusChangeContext);
  -[IMDChatMemberStatusChangeContext setStatus:](v14, "setStatus:", *(unsigned int *)(a1 + 64));
  -[IMDChatMemberStatusChangeContext setHandleID:](v14, "setHandleID:", v23);
  objc_msgSend(*(id *)(a1 + 56), "sender");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  -[IMDChatMemberStatusChangeContext setFromHandleID:](v14, "setFromHandleID:", v15);

  -[IMDChatMemberStatusChangeContext setUnformattedNumber:](v14, "setUnformattedNumber:", v23);
  objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  -[IMDChatMemberStatusChangeContext setChatIdentifier:](v14, "setChatIdentifier:", v16);

  -[IMDChatMemberStatusChangeContext setStyle:](v14, "setStyle:", objc_msgSend(*(id *)(a1 + 48), "style"));
  objc_msgSend(*(id *)(a1 + 40), "account");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[IMDChatMemberStatusChangeContext setAccount:](v14, "setAccount:", v17);

  objc_msgSend(*(id *)(a1 + 32), "destinationCallerID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[IMDChatMemberStatusChangeContext setDestinationCallerID:](v14, "setDestinationCallerID:", v18);

  -[IMDChatMemberStatusChangeContext setMessageID:](v14, "setMessageID:", v5);
  -[IMDChatMemberStatusChangeContext setSilently:](v14, "setSilently:", v12 != 0);
  objc_msgSend(*(id *)(a1 + 56), "sender");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (v19)
    v20 = 0;
  else
    v20 = objc_msgSend(*(id *)(a1 + 56), "fromMe") ^ 1;
  -[IMDChatMemberStatusChangeContext setUnattributed:](v14, "setUnattributed:", v20);

  v21 = (id)objc_msgSend(*(id *)(a1 + 40), "didChangeMemberStatus:", v14);
  if (v12)
    v22 = v13;
  else
    v22 = 0;
  if (v22 == 1)
    objc_msgSend(*(id *)(a1 + 40), "markItemFailedWithGUID:errorCode:", v5, 4);

}

uint64_t sub_1D14CE360(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processMessagesForAvailabilityAutoReply_forIncomingMessageFromIDSID_inChat_);
}

void sub_1D14CEA3C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14CE95CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14CF168(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "_sendTextAutoReplyIfNecessaryForMessages:withUrgentBreakthroughInstructions:inChat:", *(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40));

}

void sub_1D14CF338(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14CF2FCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14CFBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D14CFBE8(_QWORD *a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t isKindOfClass;
  id v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  objc_class *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  int v23;
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  objc_msgSend(v7, "time");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "compare:", a1[4]);
  if (v9 == -1)
  {
    if (IMOSLoggingEnabled(-1))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v12 = a1[4];
        v23 = 138412546;
        v24 = v8;
        v25 = 2112;
        v26 = v12;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Determined that we have not recently sent an availability auto reply. Message time %@ is older than recency window %@", (uint8_t *)&v23, 0x16u);
      }
      goto LABEL_10;
    }
LABEL_11:
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
    *a4 = 1;
    goto LABEL_12;
  }
  if (a1[6] < a3)
  {
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = (void *)a1[6];
        v23 = 134217984;
        v24 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Determined that we have not recently sent an availability auto reply. We haven't sent an auto reply in the last %ld messages.", (uint8_t *)&v23, 0xCu);
      }
LABEL_10:

      goto LABEL_11;
    }
    goto LABEL_11;
  }
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v14 = v7;
    v15 = objc_msgSend(v14, "isFromMe");
    if ((_DWORD)v15 && (v15 = objc_msgSend(v14, "isAutoReply"), (_DWORD)v15))
    {
      if (IMOSLoggingEnabled(v15))
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v14, "guid");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138412290;
          v24 = v17;
          _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Found a recent auto reply message from me: %@", (uint8_t *)&v23, 0xCu);

        }
      }
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
      *a4 = 1;
    }
    else if (IMOSLoggingEnabled(v15))
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v14, "guid");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138412802;
        v24 = v22;
        v25 = 2048;
        v26 = objc_msgSend(v14, "isFromMe");
        v27 = 2048;
        v28 = objc_msgSend(v14, "isAutoReply");
        _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Message %@ was not an auto reply from me. isFromMe: %ld, isAutoReply: %ld", (uint8_t *)&v23, 0x20u);

      }
    }

  }
  else if (IMOSLoggingEnabled(isKindOfClass))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v19 = (objc_class *)objc_opt_class();
      NSStringFromClass(v19);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = 138412290;
      v24 = v20;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Item is not a message. Item class: %@", (uint8_t *)&v23, 0xCu);

    }
  }
LABEL_12:

}

void sub_1D14D04B8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14D0494);
  }
  _Unwind_Resume(a1);
}

void sub_1D14D0970(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14D091CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D14D0BC4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14D0BD4(uint64_t a1)
{

}

void sub_1D14D0BDC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  uint64_t isKindOfClass;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  objc_class *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  double v22;
  double v23;
  NSObject *v24;
  void *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = a2;
  objc_msgSend(v6, "time");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v7, "compare:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40)) == -1)
  {
    if (IMOSLoggingEnabled(-1))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v26 = 138412546;
        v27 = (uint64_t)v7;
        v28 = 2112;
        v29 = v13;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Determined that we are not in urgent message grace period. Message time %@ grace period start window %@", (uint8_t *)&v26, 0x16u);
      }

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  else
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      v9 = v6;
      if ((-[NSObject isFromMe](v9, "isFromMe") & 1) != 0
        || (v10 = -[NSObject didNotifyRecipient](v9, "didNotifyRecipient"), !(_DWORD)v10))
      {
        v16 = -[NSObject hasLegacyUrgentTriggerMatchInText](v9, "hasLegacyUrgentTriggerMatchInText");
        if (!(_DWORD)v16)
        {
          v17 = -[NSObject isFromMe](v9, "isFromMe");
          if ((_DWORD)v17)
          {
            objc_msgSend(v7, "dateByAddingTimeInterval:", -*(double *)(a1 + 48));
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v20 = *(void **)(v19 + 40);
            *(_QWORD *)(v19 + 40) = v18;

            v21 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "timeIntervalSinceNow");
            v23 = v22;
            if (!IMOSLoggingEnabled(v21))
              goto LABEL_24;
            OSLogHandleForIMFoundationCategory();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              v26 = 134217984;
              v27 = (uint64_t)(v23 / -60.0);
              _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Found a reply sent by me to the chat within the grace period window, extending grace period to %ld minutes.", (uint8_t *)&v26, 0xCu);
            }
          }
          else
          {
            if (!IMOSLoggingEnabled(v17))
              goto LABEL_24;
            OSLogHandleForIMFoundationCategory();
            v24 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              -[NSObject guid](v9, "guid");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              v26 = 138412802;
              v27 = (uint64_t)v25;
              v28 = 2048;
              v29 = -[NSObject isFromMe](v9, "isFromMe");
              v30 = 2048;
              v31 = -[NSObject didNotifyRecipient](v9, "didNotifyRecipient");
              _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Message %@ did not impact grace period. isFromMe: %ld, didNotify: %ld", (uint8_t *)&v26, 0x20u);

            }
          }

          goto LABEL_24;
        }
        if (IMOSLoggingEnabled(v16))
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            LOWORD(v26) = 0;
            _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Found a recent message that contains the urgent trigger phrase within the grace period window. Grace period is active.", (uint8_t *)&v26, 2u);
          }
          goto LABEL_22;
        }
      }
      else if (IMOSLoggingEnabled(v10))
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v26) = 0;
          _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Found a recent message that broke through our dnd within the grace period window. Grace period is active.", (uint8_t *)&v26, 2u);
        }
LABEL_22:

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
LABEL_24:

      goto LABEL_25;
    }
    if (IMOSLoggingEnabled(isKindOfClass))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v14 = (objc_class *)objc_opt_class();
        NSStringFromClass(v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = 138412290;
        v27 = (uint64_t)v15;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Item is not a message. Item class: %@", (uint8_t *)&v26, 0xCu);

      }
      goto LABEL_24;
    }
  }
LABEL_25:

}

void sub_1D14D0FF4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14D0E4CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14D15EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "itemsWithHandles:onServices:limit:", a1[4], a1[5], a1[7]);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D14D164C(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, id, uint64_t, char *);
  id v9;
  void *v10;
  char v11;

  v11 = 0;
  v7 = a1[4];
  v8 = *(void (**)(uint64_t, id, uint64_t, char *))(v7 + 16);
  v9 = a2;
  v8(v7, v9, a3, &v11);
  if (v11)
  {
    *a4 = 1;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  }
  objc_msgSend(v9, "guid");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v10, "length"))
    objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), v10);

}

void sub_1D14D1704(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "itemsWithHandles:onServices:messageGUID:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:", a1[4], a1[5], *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 40), a1[10], 0, 0, *(_QWORD *)(a1[8] + 8) + 24, *(_QWORD *)(a1[9] + 8) + 24);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D14D204C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;

  v5 = a3;
  if (v5)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1D1669070();

  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D14D22CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1D16690D0();

  }
  v8 = objc_msgSend(v5, "copy");
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D14D2E4C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_1D14D390C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  objc_msgSend(v3, "itemID");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 32);
  objc_msgSend(v3, "handleID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, v5);
}

void sub_1D14D47EC()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ED935DC8;
  qword_1ED935DC8 = (uint64_t)v0;

}

void sub_1D14D492C()
{
  IMDCKSyncTokenStore *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKSyncTokenStore);
  v1 = (void *)qword_1EFC63D88;
  qword_1EFC63D88 = (uint64_t)v0;

}

uint64_t sub_1D14D6834(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMEventCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Legacy processing completed, marking pipeline component as finished.", v4, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "_updateChatForInput:hadChat:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 48), "fullfillWithValue:", *(_QWORD *)(a1 + 40));
}

void sub_1D14D7C98(uint64_t a1)
{
  void *v2;
  IMDiMessageIDSDelegateHandlerRegistry *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1D17EA968]();
  v3 = objc_alloc_init(IMDiMessageIDSDelegateHandlerRegistry);
  v4 = (void *)qword_1ED936280;
  qword_1ED936280 = (uint64_t)v3;

  objc_msgSend(*(id *)(a1 + 32), "addStandardCommandHandlersToRegistry:", qword_1ED936280);
  if (objc_msgSend((id)qword_1ED936280, "isLockedDown"))
    objc_msgSend(*(id *)(a1 + 32), "addLockdownCommandHandlersToRegistry:", qword_1ED936280);
  objc_autoreleasePoolPop(v2);
}

void sub_1D14D8500(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  void *v20;
  IMFindAccountProcessingPipelineComponent *v21;
  void *v22;
  IMMessageFromStoragePipelineComponent *v23;
  void *v24;
  void *v25;
  IMSenderCapabilityPipelineComponent *v26;
  void *v27;
  void *v28;
  IMDeliveryReceiptProcessingPipelineComponent *v29;
  void *v30;
  IMMessageFromStoragePipelineComponent *v31;
  void *v32;
  void *v33;
  IMMessageFromStoragePipelineComponent *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  NSObject *v45;
  void *v46;
  id v47;
  void *v48;
  void *v49;
  IMDeliveryReceiptProcessingPipelineComponent *v50;
  IMSenderCapabilityPipelineComponent *v51;
  IMMessageFromStoragePipelineComponent *v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  id v56;
  IMDeliveryReceiptPipelineParameter *v57;
  _QWORD v58[4];
  IMDeliveryReceiptPipelineParameter *v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  id v70;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  _QWORD v76[8];

  v76[5] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v55 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedDeliveryReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v55, &state);
  v65 = 0;
  v66 = &v65;
  v67 = 0x3032000000;
  v68 = sub_1D14D8B70;
  v69 = sub_1D14D8B80;
  v70 = 0;
  v54 = v17;
  v70 = v54;
  if (IMOSLoggingEnabled(v54))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v14, "fromPushID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v73 = v19;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Setting up pipeline for delivery receipt fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorDeliveryReceipt"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v20 = v13;
  else
    v20 = 0;
  v56 = v20;
  v57 = -[IMDeliveryReceiptPipelineParameter initWithBD:idsTrustedData:]([IMDeliveryReceiptPipelineParameter alloc], "initWithBD:idsTrustedData:", v56, v14);
  if (v57)
  {
    v21 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v15, "imdAccount");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v21, "initWithReceivingAccount:", v22);

    v23 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v15, "storageController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "broadcaster");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v23, "initWithStorageProcessingType:storageController:broadcaster:", 0, v24, v25);

    v26 = [IMSenderCapabilityPipelineComponent alloc];
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", *MEMORY[0x1E0D34B78]);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "fromToken");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = -[IMSenderCapabilityPipelineComponent initWithRegistrationProperties:pushToken:](v26, "initWithRegistrationProperties:pushToken:", v27, v28);

    v29 = [IMDeliveryReceiptProcessingPipelineComponent alloc];
    objc_msgSend(v15, "messageStore");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = -[IMDeliveryReceiptProcessingPipelineComponent initWithMessageStore:](v29, "initWithMessageStore:", v30);

    v31 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v15, "storageController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "broadcaster");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v31, "initWithStorageProcessingType:storageController:broadcaster:", 1, v32, v33);

    v35 = (void *)MEMORY[0x1E0D35A08];
    v76[0] = v53;
    v76[1] = v52;
    v76[2] = v51;
    v76[3] = v50;
    v76[4] = v34;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v76, 5);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "pipelineFromComponents:", v36);
    v49 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "toIdentifier");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "_stripFZIDPrefix");
    v38 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "fromIdentifier");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "_stripFZIDPrefix");
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "handler");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v58[0] = MEMORY[0x1E0C809B0];
    v58[1] = 3221225472;
    v58[2] = sub_1D14D8B88;
    v58[3] = &unk_1E922BA78;
    v59 = v57;
    v42 = v40;
    v60 = v42;
    v43 = v38;
    v61 = v43;
    v62 = v15;
    v63 = v16;
    v64 = &v65;
    objc_msgSend(v41, "handleMessageDeliveryReceiptWithPipeline:input:completionBlock:", v49, v59, v58);

    v44 = (void *)v53;
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        v46 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v73 = v46;
        v74 = 2048;
        v75 = v13;
        v47 = v46;
        _os_log_impl(&dword_1D1413000, v45, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v15, "service");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "sendAckForMessageWithContext:", v16);

    v44 = (void *)v66[5];
    v66[5] = 0;
  }

  _Block_object_dispose(&v65, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14D8AE0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14D8A28);
  }
  _Block_object_dispose(&a29, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v29 - 192));
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D14D8B70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14D8B80(uint64_t a1)
{

}

void sub_1D14D8B88(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v18, 0xCu);

    }
  }
  objc_msgSend(MEMORY[0x1E0D399B8], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "GUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "powerLogConversationType");
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "serviceName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "logMessageReceivedWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:messageProtocol:", v8, v9, v10, v12, 6, v14);

  objc_msgSend(*(id *)(a1 + 56), "service");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 64));

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;

}

void sub_1D14D8D58(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  IMFindAccountProcessingPipelineComponent *v19;
  void *v20;
  IMFindAccountProcessingPipelineComponent *v21;
  IMMessageFromStoragePipelineComponent *v22;
  void *v23;
  void *v24;
  IMChatSessionCloseProcessingPipelineComponent *v25;
  void *v26;
  void *v27;
  IMChatSessionCloseProcessingPipelineComponent *v28;
  IMMessageFromStoragePipelineComponent *v29;
  void *v30;
  void *v31;
  IMMessageFromStoragePipelineComponent *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  NSObject *v43;
  void *v44;
  id v45;
  void *v46;
  IMMessageFromStoragePipelineComponent *v47;
  id v48;
  NSObject *v49;
  id v50;
  id v51;
  id v52;
  IMChatSessionClosePipelineParameter *v53;
  id v54;
  _QWORD v55[4];
  IMChatSessionClosePipelineParameter *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  void (*v66)(uint64_t);
  id v67;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v70;
  __int16 v71;
  id v72;
  _QWORD v73[7];

  v73[4] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v50 = a3;
  v54 = a4;
  v13 = a5;
  v51 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v49 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedChatSessionClose", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v49, &state);
  v62 = 0;
  v63 = &v62;
  v64 = 0x3032000000;
  v65 = sub_1D14D8B70;
  v66 = sub_1D14D8B80;
  v67 = 0;
  v48 = v14;
  v67 = v48;
  v15 = v50;
  if (IMOSLoggingEnabled(v48))
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v54, "fromPushID");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v70 = v17;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Setting up pipeline for chat session close message fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorChatSessionClose"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v18 = v50;
  else
    v18 = 0;
  v52 = v18;
  v53 = -[IMChatSessionClosePipelineParameter initWithDefusedMessage:idsTrustedData:]([IMChatSessionClosePipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v52, v54);
  if (v53)
  {
    v19 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v19, "initWithReceivingAccount:", v20);

    v22 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v22, "initWithStorageProcessingType:storageController:broadcaster:", 0, v23, v24);

    v25 = [IMChatSessionCloseProcessingPipelineComponent alloc];
    objc_msgSend(v13, "messageStore");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chatRegistry");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = -[IMChatSessionCloseProcessingPipelineComponent initWithMessageStore:chatRegistry:idsTrustedData:](v25, "initWithMessageStore:chatRegistry:idsTrustedData:", v26, v27, v54);

    v29 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v29, "initWithStorageProcessingType:storageController:broadcaster:", 1, v30, v31);

    v33 = (void *)MEMORY[0x1E0D35A08];
    v73[0] = v21;
    v73[1] = v47;
    v73[2] = v28;
    v73[3] = v32;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v73, 4);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "pipelineFromComponents:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v54, "toIdentifier");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "_stripFZIDPrefix");
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v54, "fromIdentifier");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "_stripFZIDPrefix");
    v39 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "handler");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v55[0] = MEMORY[0x1E0C809B0];
    v55[1] = 3221225472;
    v55[2] = sub_1D14D9368;
    v55[3] = &unk_1E922BA78;
    v56 = v53;
    v41 = v39;
    v57 = v41;
    v42 = v37;
    v58 = v42;
    v59 = v13;
    v60 = v51;
    v61 = &v62;
    v15 = v50;
    objc_msgSend(v40, "handleChatSessionCloseWithPipeline:input:completionBlock:", v35, v56, v55);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v43 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        v44 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v70 = v44;
        v71 = 2048;
        v72 = v50;
        v45 = v44;
        _os_log_impl(&dword_1D1413000, v43, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "sendAckForMessageWithContext:", v51);

    v21 = (IMFindAccountProcessingPipelineComponent *)v63[5];
    v63[5] = 0;
  }

  _Block_object_dispose(&v62, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14D92D4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14D9214);
  }
  _Block_object_dispose(&a27, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v27 - 176));
  _Unwind_Resume(exc_buf);
}

void sub_1D14D9368(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = 138412290;
      v19 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v18, 0xCu);

    }
  }
  objc_msgSend(MEMORY[0x1E0D399B8], "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "GUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "powerLogConversationType");
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "serviceName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "logMessageReceivedWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:messageProtocol:", v8, v9, v10, v12, 8, v14);

  objc_msgSend(*(id *)(a1 + 56), "service");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 64));

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;

}

void sub_1D14D9538(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  IMReadReceiptPipelineParameter *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL8 v24;
  IMFindAccountProcessingPipelineComponent *v25;
  void *v26;
  IMFindAccountProcessingPipelineComponent *v27;
  IMMessageFromStoragePipelineComponent *v28;
  void *v29;
  void *v30;
  IMReadReceiptProcessingPipelineComponent *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  IMReadReceiptProcessingPipelineComponent *v36;
  IMMessageFromStoragePipelineComponent *v37;
  void *v38;
  void *v39;
  IMMessageFromStoragePipelineComponent *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  id v50;
  void *v51;
  IMMessageFromStoragePipelineComponent *v52;
  id v53;
  NSObject *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  _QWORD v59[4];
  IMReadReceiptPipelineParameter *v60;
  id v61;
  id v62;
  id v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  void (*v69)(uint64_t);
  id v70;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v73;
  __int16 v74;
  id v75;
  _QWORD v76[7];

  v76[4] = *MEMORY[0x1E0C80C00];
  v57 = a2;
  v58 = a3;
  v12 = a4;
  v13 = a5;
  v55 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v54 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedReadReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v54, &state);
  v65 = 0;
  v66 = &v65;
  v67 = 0x3032000000;
  v68 = sub_1D14D8B70;
  v69 = sub_1D14D8B80;
  v70 = 0;
  v53 = v14;
  v70 = v53;
  if (IMOSLoggingEnabled(v53))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v12, "fromPushID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v73 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for read receipt fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorReadReceipt"), CFSTR("BlastDoor"));
  isKindOfClass = objc_opt_isKindOfClass();
  v18 = v58;
  if ((isKindOfClass & 1) == 0)
    v18 = 0;
  v56 = v18;
  v19 = -[IMReadReceiptPipelineParameter initWithBD:idsTrustedData:]([IMReadReceiptPipelineParameter alloc], "initWithBD:idsTrustedData:", v56, v12);
  if (v19)
  {
    -[IMReadReceiptPipelineParameter setIsFromMe:](v19, "setIsFromMe:", objc_msgSend(v12, "isFromMe"));
    objc_msgSend(v12, "fromPushID");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    -[IMReadReceiptPipelineParameter setFromPushID:](v19, "setFromPushID:", v20);

    objc_msgSend(v12, "fromIdentifier");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[IMReadReceiptPipelineParameter setFromIdentifier:](v19, "setFromIdentifier:", v21);

    objc_msgSend(v12, "fromToken");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "imdAccount");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = +[IMDiMessageIDSDelegate isDefaultPairedDevice:withAccount:](IMDiMessageIDSDelegate, "isDefaultPairedDevice:withAccount:", v22, v23);

    -[IMReadReceiptPipelineParameter setIsFromDefaultPairedDevice:](v19, "setIsFromDefaultPairedDevice:", v24);
    v25 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v25, "initWithReceivingAccount:", v26);

    v28 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v28, "initWithStorageProcessingType:storageController:broadcaster:", 0, v29, v30);

    v31 = [IMReadReceiptProcessingPipelineComponent alloc];
    objc_msgSend(v13, "messageStore");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "chatRegistry");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "recentsController");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "idsService");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = -[IMReadReceiptProcessingPipelineComponent initWithMessageStore:chatRegistry:recents:IDSService:](v31, "initWithMessageStore:chatRegistry:recents:IDSService:", v32, v33, v34, v35);

    v37 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v37, "initWithStorageProcessingType:storageController:broadcaster:", 1, v38, v39);

    v41 = (void *)MEMORY[0x1E0D35A08];
    v76[0] = v27;
    v76[1] = v52;
    v76[2] = v36;
    v76[3] = v40;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v76, 4);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "pipelineFromComponents:", v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "toIdentifier");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "_stripFZIDPrefix");
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v57, "handler");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v59[0] = MEMORY[0x1E0C809B0];
    v59[1] = 3221225472;
    v59[2] = sub_1D14D9BCC;
    v59[3] = &unk_1E922BAE0;
    v60 = v19;
    v47 = v45;
    v61 = v47;
    v62 = v13;
    v63 = v55;
    v64 = &v65;
    objc_msgSend(v46, "handleMessageReadReceiptWithPipeline:input:completionBlock:", v43, v60, v59);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        v49 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v73 = v49;
        v74 = 2048;
        v75 = v58;
        v50 = v49;
        _os_log_impl(&dword_1D1413000, v48, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service");
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v51, "sendAckForMessageWithContext:", v55);

    v27 = (IMFindAccountProcessingPipelineComponent *)v66[5];
    v66[5] = 0;
  }

  _Block_object_dispose(&v65, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14D9B40(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14D9A80);
  }
  _Block_object_dispose(&a25, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14D9BCC(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = a3;
  if (IMOSLoggingEnabled(v18))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v20 = v5;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", buf, 0xCu);

    }
  }
  objc_msgSend(MEMORY[0x1E0D399B8], "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "GUID");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "fromIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "_stripFZIDPrefix");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "powerLogConversationType");
  objc_msgSend(*(id *)(a1 + 32), "chat");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "serviceName");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "logMessageReceivedWithGUID:fromIdentifier:toIdentifier:conversationType:messageType:messageProtocol:", v7, v9, v10, v12, 7, v14);

  objc_msgSend(*(id *)(a1 + 48), "service");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 56));

  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;

}

void sub_1D14D9DC4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  IMMarkUnreadRequestPipelineParameter *v17;
  IMFindAccountProcessingPipelineComponent *v18;
  void *v19;
  IMFindAccountProcessingPipelineComponent *v20;
  IMMessageFromStoragePipelineComponent *v21;
  void *v22;
  void *v23;
  IMMessageFromStoragePipelineComponent *v24;
  IMMarkUnreadRequestProcessingPipelineComponent *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  IMMarkUnreadRequestProcessingPipelineComponent *v30;
  IMMessageFromStoragePipelineComponent *v31;
  void *v32;
  void *v33;
  IMMessageFromStoragePipelineComponent *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  NSObject *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  _QWORD v50[4];
  IMMarkUnreadRequestPipelineParameter *v51;
  id v52;
  id v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  id v60;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v63;
  __int16 v64;
  id v65;
  _QWORD v66[7];

  v66[4] = *MEMORY[0x1E0C80C00];
  v48 = a2;
  v47 = a3;
  v49 = a4;
  v12 = a5;
  v45 = a6;
  v13 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v44 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedMarkUnreadRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v44, &state);
  v55 = 0;
  v56 = &v55;
  v57 = 0x3032000000;
  v58 = sub_1D14D8B70;
  v59 = sub_1D14D8B80;
  v60 = 0;
  v43 = v13;
  v60 = v43;
  if (IMOSLoggingEnabled(v43))
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v49, "fromPushID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v63 = v15;
      _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Setting up pipeline for mark unread request fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorMarkUnreadRequest"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v16 = v47;
  else
    v16 = 0;
  v46 = v16;
  v17 = -[IMMarkUnreadRequestPipelineParameter initWithBD:idsTrustedData:]([IMMarkUnreadRequestPipelineParameter alloc], "initWithBD:idsTrustedData:", v46, v49);
  if (v17)
  {
    v18 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v12, "imdAccount");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v18, "initWithReceivingAccount:", v19);

    v21 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v12, "storageController");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "broadcaster");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v21, "initWithStorageProcessingType:storageController:broadcaster:", 0, v22, v23);

    v25 = [IMMarkUnreadRequestProcessingPipelineComponent alloc];
    objc_msgSend(v12, "messageStore");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "chatRegistry");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "recentsController");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "idsService");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = -[IMMarkUnreadRequestProcessingPipelineComponent initWithMessageStore:chatRegistry:recents:IDSService:](v25, "initWithMessageStore:chatRegistry:recents:IDSService:", v26, v27, v28, v29);

    v31 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v12, "storageController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "broadcaster");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v31, "initWithStorageProcessingType:storageController:broadcaster:", 1, v32, v33);

    v35 = (void *)MEMORY[0x1E0D35A08];
    v66[0] = v20;
    v66[1] = v24;
    v66[2] = v30;
    v66[3] = v34;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v66, 4);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "pipelineFromComponents:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v48, "handler");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 3221225472;
    v50[2] = sub_1D14DA370;
    v50[3] = &unk_1E922BB28;
    v51 = v17;
    v52 = v12;
    v53 = v45;
    v54 = &v55;
    objc_msgSend(v38, "handleMessageMarkUnreadRequestWithPipeline:input:completionBlock:", v37, v51, v50);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        v40 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v63 = v40;
        v64 = 2048;
        v65 = v47;
        v41 = v40;
        _os_log_impl(&dword_1D1413000, v39, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v12, "service");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "sendAckForMessageWithContext:", v45);

    v20 = (IMFindAccountProcessingPipelineComponent *)v56[5];
    v56[5] = 0;
  }

  _Block_object_dispose(&v55, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DA2E8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DA224);
  }
  _Block_object_dispose(&a25, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DA370(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = IMOSLoggingEnabled(v4);
  if (v4)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = 138412546;
        v13 = v7;
        v14 = 2112;
        v15 = v4;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error processing mark as unread request for message (%@), error: %@", (uint8_t *)&v12, 0x16u);

      }
LABEL_9:

    }
  }
  else if (v5)
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138412290;
      v13 = v8;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v12, 0xCu);

    }
    goto LABEL_9;
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = 0;

}

void sub_1D14DA4FC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DA498);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DA520(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  _BOOL8 v21;
  IMPlayedReceiptPipelineParameter *v22;
  IMFindAccountProcessingPipelineComponent *v23;
  void *v24;
  IMFindAccountProcessingPipelineComponent *v25;
  IMMessageFromStoragePipelineComponent *v26;
  void *v27;
  void *v28;
  IMMessageFromStoragePipelineComponent *v29;
  IMPlayedReceiptProcessingPipelineComponent *v30;
  IMMessageFromStoragePipelineComponent *v31;
  void *v32;
  void *v33;
  IMMessageFromStoragePipelineComponent *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  NSObject *v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  _QWORD v49[4];
  IMPlayedReceiptPipelineParameter *v50;
  id v51;
  id v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t);
  id v59;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  void *v64;
  _QWORD v65[7];

  v65[4] = *MEMORY[0x1E0C80C00];
  v46 = a2;
  v12 = a3;
  v48 = a4;
  v13 = a5;
  v47 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v44 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedPlayedReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v44, &state);
  v54 = 0;
  v55 = &v54;
  v56 = 0x3032000000;
  v57 = sub_1D14D8B70;
  v58 = sub_1D14D8B80;
  v59 = 0;
  v43 = v14;
  v59 = v43;
  if (IMOSLoggingEnabled(v43))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v48, "fromPushID", v43, v44);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v62 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for played receipt fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorPlayedReceipt"), CFSTR("BlastDoor"));
  v45 = v12;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v12;
  else
    v17 = 0;
  v18 = v17;
  objc_msgSend(v48, "fromToken");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "imdAccount");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = +[IMDiMessageIDSDelegate isDefaultPairedDevice:withAccount:](IMDiMessageIDSDelegate, "isDefaultPairedDevice:withAccount:", v19, v20);

  v22 = -[IMPlayedReceiptPipelineParameter initWithDefusedMessage:idsTrustedData:isFromDefaultPairedDevice:]([IMPlayedReceiptPipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:isFromDefaultPairedDevice:", v18, v48, v21);
  if (v22)
  {
    v23 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v23, "initWithReceivingAccount:", v24);

    v26 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v26, "initWithStorageProcessingType:storageController:broadcaster:", 0, v27, v28);

    v30 = -[IMPlayedReceiptProcessingPipelineComponent initWithPipelineResources:]([IMPlayedReceiptProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v31 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v31, "initWithStorageProcessingType:storageController:broadcaster:", 1, v32, v33);

    v35 = (void *)MEMORY[0x1E0D35A08];
    v65[0] = v25;
    v65[1] = v29;
    v65[2] = v30;
    v65[3] = v34;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v65, 4);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "pipelineFromComponents:", v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v46, "handler");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = sub_1D14DAAAC;
    v49[3] = &unk_1E922BB28;
    v50 = v22;
    v51 = v13;
    v52 = v47;
    v53 = &v54;
    objc_msgSend(v38, "handleMessagePlayedReceiptWithPipeline:input:completionBlock:", v37, v50, v49);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        v40 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v62 = v40;
        v63 = 2048;
        v64 = v45;
        v41 = v40;
        _os_log_impl(&dword_1D1413000, v39, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v43);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "sendAckForMessageWithContext:", v47);

    v25 = (IMFindAccountProcessingPipelineComponent *)v55[5];
    v55[5] = 0;
  }

  _Block_object_dispose(&v54, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DAA24(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DA964);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DAAAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing played receipt: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DAC38(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DAB60);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DAC6C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  id v19;
  IMDeliveredQuietlyReceiptPipelineParameter *v20;
  IMFindAccountProcessingPipelineComponent *v21;
  void *v22;
  IMFindAccountProcessingPipelineComponent *v23;
  IMMessageFromStoragePipelineComponent *v24;
  void *v25;
  void *v26;
  IMMessageFromStoragePipelineComponent *v27;
  IMDeliveredQuietlyReceiptProcessingPipelineComponent *v28;
  IMMessageFromStoragePipelineComponent *v29;
  void *v30;
  void *v31;
  IMMessageFromStoragePipelineComponent *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  _QWORD v47[4];
  IMDeliveredQuietlyReceiptPipelineParameter *v48;
  id v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  id v62;
  _QWORD v63[7];

  v63[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v12 = a3;
  v46 = a4;
  v13 = a5;
  v44 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v42 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedDeliveredQuietlyReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v42, &state);
  v52 = 0;
  v53 = &v52;
  v54 = 0x3032000000;
  v55 = sub_1D14D8B70;
  v56 = sub_1D14D8B80;
  v57 = 0;
  v41 = v14;
  v57 = v41;
  if (IMOSLoggingEnabled(v41))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v46, "fromPushID", v41, v42);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v60 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for delivered quietly receipt fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorDeliveredQuietlyReceipt"), CFSTR("BlastDoor"));
  v45 = v12;
  isKindOfClass = objc_opt_isKindOfClass();
  v18 = v12;
  if ((isKindOfClass & 1) == 0)
    v18 = 0;
  v19 = v18;
  v20 = -[IMDeliveredQuietlyReceiptPipelineParameter initWithDefusedMessage:idsTrustedData:]([IMDeliveredQuietlyReceiptPipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v19, v46);
  if (v20)
  {
    v21 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v21, "initWithReceivingAccount:", v22);

    v24 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v24, "initWithStorageProcessingType:storageController:broadcaster:", 0, v25, v26);

    v28 = -[IMDeliveredQuietlyReceiptProcessingPipelineComponent initWithPipelineResources:]([IMDeliveredQuietlyReceiptProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v29 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v29, "initWithStorageProcessingType:storageController:broadcaster:", 1, v30, v31);

    v33 = (void *)MEMORY[0x1E0D35A08];
    v63[0] = v23;
    v63[1] = v27;
    v63[2] = v28;
    v63[3] = v32;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 4);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "pipelineFromComponents:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v43, "handler");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = MEMORY[0x1E0C809B0];
    v47[1] = 3221225472;
    v47[2] = sub_1D14DB1B0;
    v47[3] = &unk_1E922BB28;
    v48 = v20;
    v49 = v13;
    v50 = v44;
    v51 = &v52;
    objc_msgSend(v36, "handleMessageDeliveredQuietlyReceiptWithPipeline:input:completionBlock:", v35, v48, v47);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v38 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v60 = v38;
        v61 = 2048;
        v62 = v12;
        v39 = v38;
        _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Failed getting delivered quietly blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v41);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "sendAckForMessageWithContext:", v44);

    v23 = (IMFindAccountProcessingPipelineComponent *)v53[5];
    v53[5] = 0;
  }

  _Block_object_dispose(&v52, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DB12C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DB06CLL);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DB1B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing delivered quietly receipt: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing delivered quietly and cleaning up: %@, ", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DB33C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DB264);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DB370(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  id v19;
  IMNotifyRecipientCommandPipelineParameter *v20;
  IMFindAccountProcessingPipelineComponent *v21;
  void *v22;
  IMFindAccountProcessingPipelineComponent *v23;
  IMMessageFromStoragePipelineComponent *v24;
  void *v25;
  void *v26;
  IMMessageFromStoragePipelineComponent *v27;
  IMNotifyRecipientCommandProcessingPipelineComponent *v28;
  IMMessageFromStoragePipelineComponent *v29;
  void *v30;
  void *v31;
  IMMessageFromStoragePipelineComponent *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  _QWORD v47[4];
  IMNotifyRecipientCommandPipelineParameter *v48;
  id v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  id v62;
  _QWORD v63[7];

  v63[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v12 = a3;
  v46 = a4;
  v13 = a5;
  v44 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v42 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v42, &state);
  v52 = 0;
  v53 = &v52;
  v54 = 0x3032000000;
  v55 = sub_1D14D8B70;
  v56 = sub_1D14D8B80;
  v57 = 0;
  v41 = v14;
  v57 = v41;
  if (IMOSLoggingEnabled(v41))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v46, "fromPushID", v41, v42);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v60 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for notify recipient fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorNotifyRecipientCommand"), CFSTR("BlastDoor"));
  v45 = v12;
  isKindOfClass = objc_opt_isKindOfClass();
  v18 = v12;
  if ((isKindOfClass & 1) == 0)
    v18 = 0;
  v19 = v18;
  v20 = -[IMNotifyRecipientCommandPipelineParameter initWithDefusedMessage:idsTrustedData:]([IMNotifyRecipientCommandPipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v19, v46);
  if (v20)
  {
    v21 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v21, "initWithReceivingAccount:", v22);

    v24 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v24, "initWithStorageProcessingType:storageController:broadcaster:", 0, v25, v26);

    v28 = -[IMNotifyRecipientCommandProcessingPipelineComponent initWithPipelineResources:]([IMNotifyRecipientCommandProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v29 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v29, "initWithStorageProcessingType:storageController:broadcaster:", 1, v30, v31);

    v33 = (void *)MEMORY[0x1E0D35A08];
    v63[0] = v23;
    v63[1] = v27;
    v63[2] = v28;
    v63[3] = v32;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 4);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "pipelineFromComponents:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v43, "handler");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = MEMORY[0x1E0C809B0];
    v47[1] = 3221225472;
    v47[2] = sub_1D14DB8B4;
    v47[3] = &unk_1E922BB28;
    v48 = v20;
    v49 = v13;
    v50 = v44;
    v51 = &v52;
    objc_msgSend(v36, "handleNotifyRecipientCommandWithPipeline:input:completionBlock:", v35, v48, v47);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v38 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v60 = v38;
        v61 = 2048;
        v62 = v12;
        v39 = v38;
        _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Failed getting notify recipient blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v41);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "sendAckForMessageWithContext:", v44);

    v23 = (IMFindAccountProcessingPipelineComponent *)v53[5];
    v53[5] = 0;
  }

  _Block_object_dispose(&v52, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DB830(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DB770);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DB8B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing notify recipient command: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing notify recipient command and cleaning up: %@, ", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DBA40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DB968);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DBA74(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  NSObject *v13;
  NSObject *v14;
  char isKindOfClass;
  void *v16;
  void *v17;
  uint64_t v18;
  IMTypingIndicatorProcessingPipelineComponent *v19;
  void *v20;
  IMTextMessageProcessingPipelineComponent *v21;
  IMAssociatedMessageProcessingPipelineComponent *v22;
  IMBalloonPluginProcessingPipelineComponent *v23;
  IMStickerMessageProcessingPipelineComponent *v24;
  IMAudioMessageProcessingPipelineComponent *v25;
  IMEmojiTapbackMessageProcessingPipelineComponent *v26;
  IMStickerTapbackMessageProcessingPipelineComponent *v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  IMFindAccountProcessingPipelineComponent *v43;
  void *v44;
  IMMessageFromStoragePipelineComponent *v45;
  void *v46;
  void *v47;
  IMFindChatProcessingPipelineComponent *v48;
  void *v49;
  IMMessageLegacyProcessingPipelineComponent *v50;
  void *v51;
  IMJunkMessageProcessingPipelineComponent *v52;
  IMCheckInMessageProcessingPipelineComponent *v53;
  void *v54;
  IMCheckInMessageProcessingPipelineComponent *v55;
  IMFamilySenderMessageProcessingPipelineComponent *v56;
  void *v57;
  IMFamilySenderMessageProcessingPipelineComponent *v58;
  IMResolveFallbackHashesProcessingPipelineComponent *v59;
  IMSeenAsOffGridProcessingPipelineComponent *v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  NSObject *v66;
  IMDeferReplicatedMessagePipelineComponent *v67;
  id v68;
  id v69;
  NSObject *v70;
  NSObject *v71;
  NSObject *v72;
  void *v73;
  IMMessageMomentShareProcessingPipelineComponent *v74;
  IMMessageLegacyProcessingPipelineComponent *v75;
  IMConvergeGroupProcessingPipelineComponent *v76;
  IMFindChatProcessingPipelineComponent *v77;
  IMMessageFromStoragePipelineComponent *v78;
  IMFindAccountProcessingPipelineComponent *v79;
  IMDeferReplicatedMessagePipelineComponent *v80;
  id v81;
  NSObject *v82;
  id v83;
  IMStickerMessageProcessingPipelineComponent *v84;
  id v85;
  NSObject *v86;
  IMTypingIndicatorPipelineParameter *v87;
  NSObject *v88;
  id v89;
  id v90;
  id v91;
  NSObject *v92;
  _QWORD v93[4];
  NSObject *v94;
  IMTypingIndicatorPipelineParameter *v95;
  id v96;
  IMDeferReplicatedMessagePipelineComponent *v97;
  id v98;
  id v99;
  id v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  void (*v106)(uint64_t);
  id v107;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  NSObject *v110;
  __int16 v111;
  id v112;
  __int16 v113;
  IMStickerMessageProcessingPipelineComponent *v114;
  _QWORD v115[16];

  v115[13] = *MEMORY[0x1E0C80C00];
  v92 = a2;
  v89 = a3;
  v91 = a4;
  v90 = a5;
  v85 = a6;
  v12 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v82 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedMessage", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v82, &state);
  v102 = 0;
  v103 = &v102;
  v104 = 0x3032000000;
  v105 = sub_1D14D8B70;
  v106 = sub_1D14D8B80;
  v107 = 0;
  v81 = v12;
  v107 = v81;
  if (IMOSLoggingEnabled(v81))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v91, "fromPushID");
      v14 = objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v110 = v14;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Setting up pipeline for message fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorTextMessage"), CFSTR("BlastDoor"));
  isKindOfClass = objc_opt_isKindOfClass();
  v16 = v89;
  if ((isKindOfClass & 1) == 0)
    v16 = 0;
  v83 = v16;
  objc_msgSend(v83, "messageSubType");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "type");

  switch(v18)
  {
    case 0:
      v87 = -[IMTypingIndicatorPipelineParameter initWithBD:idsTrustedData:]([IMTypingIndicatorPipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v19 = [IMTypingIndicatorProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v19, "initWithMessageStore:", v20);
      goto LABEL_16;
    case 2:
      v87 = -[IMAssociatedMessagePipelineParameter initWithBD:idsTrustedData:]([IMAssociatedMessagePipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v22 = [IMAssociatedMessageProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v22, "initWithMessageStore:", v20);
      goto LABEL_16;
    case 3:
      v87 = -[IMBalloonPluginPipelineParameter initWithBD:idsTrustedData:]([IMBalloonPluginPipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v23 = [IMBalloonPluginProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v23, "initWithMessageStore:", v20);
      goto LABEL_16;
    case 4:
      v87 = -[IMStickerMessagePipelineParameter initWithBD:idsTrustedData:]([IMStickerMessagePipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v24 = -[IMStickerMessageProcessingPipelineComponent initWithPipelineResources:]([IMStickerMessageProcessingPipelineComponent alloc], "initWithPipelineResources:", v90);
      v84 = v24;
      goto LABEL_17;
    case 5:
      v87 = -[IMTextMessagePipelineParameter initWithBD:idsTrustedData:]([IMTextMessagePipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v25 = [IMAudioMessageProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v25, "initWithMessageStore:", v20);
      goto LABEL_16;
    case 6:
      v87 = -[IMEmojiTapbackMessagePipelineParameter initWithBD:idsTrustedData:]([IMEmojiTapbackMessagePipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v26 = [IMEmojiTapbackMessageProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v26, "initWithMessageStore:", v20);
      goto LABEL_16;
    case 7:
      v87 = -[IMStickerTapbackMessagePipelineParameter initWithBD:idsTrustedData:]([IMStickerTapbackMessagePipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v27 = [IMStickerTapbackMessageProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v27, "initWithMessageStore:", v20);
      goto LABEL_16;
    default:
      v87 = -[IMTextMessagePipelineParameter initWithBD:idsTrustedData:]([IMTextMessagePipelineParameter alloc], "initWithBD:idsTrustedData:", v83, v91);
      v21 = [IMTextMessageProcessingPipelineComponent alloc];
      -[NSObject messageStore](v92, "messageStore");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v21, "initWithMessageStore:", v20);
LABEL_16:

LABEL_17:
      if (IMOSLoggingEnabled(v24))
      {
        OSLogHandleForIMFoundationCategory();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          -[IMTextMessagePipelineParameter GUID](v87, "GUID");
          v29 = objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v110 = v29;
          _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "messageCreationComponent created for %@", buf, 0xCu);

        }
      }
      objc_msgSend(v90, "imdAccount");
      v88 = objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      v30 = objc_opt_isKindOfClass();
      if ((v30 & 1) == 0)
      {
        if (IMOSLoggingEnabled(v30))
        {
          OSLogHandleForIMFoundationCategory();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v110 = v88;
            _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Account was not the right class: %@", buf, 0xCu);
          }

        }
        goto LABEL_39;
      }
      -[NSObject session](v88, "session");
      v86 = objc_claimAutoreleasedReturnValue();
      v31 = objc_opt_respondsToSelector();
      if ((v31 & 1) != 0)
      {
        -[NSObject idsAccount](v88, "idsAccount");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject _pushHandlerForIDSAccount:](v86, "_pushHandlerForIDSAccount:", v32);
        v33 = objc_claimAutoreleasedReturnValue();

        if (!v33 || (v34 = objc_opt_respondsToSelector(), (v34 & 1) == 0))
        {
          if (IMOSLoggingEnabled(v34))
          {
            OSLogHandleForIMFoundationCategory();
            v35 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v110 = v33;
              _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "Push handler either nil or session did not respond to incomingMessage: %@", buf, 0xCu);
            }

          }
        }
      }
      else
      {
        v37 = IMOSLoggingEnabled(v31);
        if (!(_DWORD)v37)
          goto LABEL_38;
        OSLogHandleForIMFoundationCategory();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v110 = v86;
          _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Session either nil or did not respond to _pushHandlerForIDSAccount: %@", buf, 0xCu);
        }
      }

LABEL_38:
      if (v86)
        goto LABEL_44;
LABEL_39:
      +[IMDServiceController sharedController](IMDServiceController, "sharedController");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "serviceWithName:", *MEMORY[0x1E0D38F68]);
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      +[IMDServiceSession existingServiceSessionForService:](IMDServiceSession, "existingServiceSessionForService:", v39);
      v86 = objc_claimAutoreleasedReturnValue();
      if (IMOSLoggingEnabled(v86))
      {
        OSLogHandleForIMFoundationCategory();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v110 = v86;
          _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "Falling back to service session: %@", buf, 0xCu);
        }

      }
LABEL_44:
      if (v87 && v84)
      {
        if (IMOSLoggingEnabled(v37))
        {
          OSLogHandleForIMFoundationCategory();
          v41 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            -[IMTextMessagePipelineParameter GUID](v87, "GUID");
            v42 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v110 = v42;
            _os_log_impl(&dword_1D1413000, v41, OS_LOG_TYPE_INFO, "Going through new message processing path: %@, ", buf, 0xCu);

          }
        }
        v80 = objc_alloc_init(IMDeferReplicatedMessagePipelineComponent);
        v43 = [IMFindAccountProcessingPipelineComponent alloc];
        objc_msgSend(v90, "imdAccount");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v79 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v43, "initWithReceivingAccount:", v44);

        v45 = [IMMessageFromStoragePipelineComponent alloc];
        -[NSObject messageFromStorageController](v92, "messageFromStorageController");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject broadcaster](v92, "broadcaster");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        v78 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v45, "initWithStorageProcessingType:storageController:broadcaster:", 0, v46, v47);

        v48 = [IMFindChatProcessingPipelineComponent alloc];
        -[NSObject chatRegistry](v92, "chatRegistry");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = -[IMFindChatProcessingPipelineComponent initWithChatRegistry:](v48, "initWithChatRegistry:", v49);

        v76 = -[IMConvergeGroupProcessingPipelineComponent initWithIDSTrustedData:]([IMConvergeGroupProcessingPipelineComponent alloc], "initWithIDSTrustedData:", v91);
        v50 = [IMMessageLegacyProcessingPipelineComponent alloc];
        -[NSObject idsService](v92, "idsService");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        v75 = -[IMMessageLegacyProcessingPipelineComponent initWithIDSTrustedData:messageContext:idsService:](v50, "initWithIDSTrustedData:messageContext:idsService:", v91, v85, v51);

        v74 = -[IMMessageMomentShareProcessingPipelineComponent initWithTrustedData:]([IMMessageMomentShareProcessingPipelineComponent alloc], "initWithTrustedData:", v91);
        v52 = -[IMJunkMessageProcessingPipelineComponent initWithIDSTrustedData:]([IMJunkMessageProcessingPipelineComponent alloc], "initWithIDSTrustedData:", v91);
        v53 = [IMCheckInMessageProcessingPipelineComponent alloc];
        objc_msgSend(v90, "imdAccount");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        v55 = -[IMCheckInMessageProcessingPipelineComponent initWithAccount:](v53, "initWithAccount:", v54);

        v56 = [IMFamilySenderMessageProcessingPipelineComponent alloc];
        objc_msgSend(v90, "imdAccount");
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = -[IMFamilySenderMessageProcessingPipelineComponent initWithAccount:idsTrustedData:](v56, "initWithAccount:idsTrustedData:", v57, v91);

        v59 = objc_alloc_init(IMResolveFallbackHashesProcessingPipelineComponent);
        v60 = objc_alloc_init(IMSeenAsOffGridProcessingPipelineComponent);
        v61 = objc_alloc(MEMORY[0x1E0C99DE8]);
        v115[0] = v80;
        v115[1] = v79;
        v115[2] = v78;
        v115[3] = v77;
        v115[4] = v76;
        v115[5] = v59;
        v115[6] = v84;
        v115[7] = v58;
        v115[8] = v55;
        v115[9] = v75;
        v115[10] = v74;
        v115[11] = v52;
        v115[12] = v60;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v115, 13);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        v63 = (void *)objc_msgSend(v61, "initWithArray:", v62);

        objc_msgSend(MEMORY[0x1E0D35A08], "pipelineFromComponents:", v63);
        v64 = (void *)objc_claimAutoreleasedReturnValue();
        -[NSObject handler](v92, "handler");
        v65 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v65 && IMOSLoggingEnabled(0))
        {
          OSLogHandleForIMFoundationCategory();
          v66 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v110 = v92;
            _os_log_impl(&dword_1D1413000, v66, OS_LOG_TYPE_INFO, "Handler not found!!! %@, ", buf, 0xCu);
          }

        }
        v93[0] = MEMORY[0x1E0C809B0];
        v93[1] = 3221225472;
        v93[2] = sub_1D14DC970;
        v93[3] = &unk_1E922BC40;
        v94 = v92;
        v95 = v87;
        v96 = v85;
        v101 = &v102;
        v67 = v80;
        v97 = v67;
        v68 = v65;
        v98 = v68;
        v69 = v64;
        v99 = v69;
        v100 = v91;
        objc_msgSend(v68, "handleMessageWithPipeline:input:completionBlock:", v69, v95, v93);

      }
      else
      {
        if (IMOSLoggingEnabled(v37))
        {
          OSLogHandleForIMFoundationCategory();
          v70 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            v71 = objc_opt_class();
            *(_DWORD *)buf = 138412802;
            v110 = v71;
            v111 = 2048;
            v112 = v89;
            v113 = 2112;
            v114 = v84;
            v72 = v71;
            _os_log_impl(&dword_1D1413000, v70, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, with messageCreationComponent: %@", buf, 0x20u);

          }
        }
        -[NSObject idsService](v92, "idsService");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v73, "sendAckForMessageWithContext:", v85);

        v67 = (IMDeferReplicatedMessagePipelineComponent *)v103[5];
        v103[5] = 0;
      }

      _Block_object_dispose(&v102, 8);
      os_activity_scope_leave(&state);

      return;
  }
}

void sub_1D14DC970(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "idsService");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 40), "GUID");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      v30 = v8;
      v31 = 2112;
      v32 = v6;
      v33 = 2112;
      v34 = v9;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up text message: %@ on service %@ with context %@", buf, 0x20u);

    }
  }
  objc_msgSend(v6, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = 0;

  if ((a2 & 1) == 0)
  {
    objc_msgSend(v5, "domain");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "isEqualToString:", *MEMORY[0x1E0D35A00]))
    {
      v13 = objc_msgSend(v5, "code") == 18;

      if (v13)
      {
        +[IMPendingReplicatedMessageCache sharedCache](IMPendingReplicatedMessageCache, "sharedCache");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "GUID");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "replicatedFallbackGUIDs");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = sub_1D14DCCCC;
        v21[3] = &unk_1E922BC18;
        v22 = *(id *)(a1 + 40);
        v23 = v6;
        v24 = *(id *)(a1 + 48);
        v25 = *(id *)(a1 + 56);
        v26 = *(id *)(a1 + 64);
        v27 = *(id *)(a1 + 72);
        v28 = *(id *)(a1 + 80);
        objc_msgSend(v14, "addPendingMessageWithGUID:replicatedFallbackGUIDs:releaseBlock:", v15, v16, v21);

        v17 = v22;
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {

    }
    objc_msgSend(*(id *)(a1 + 40), "GUID");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), &unk_1E9271308);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 80), "fromIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 80), "fromToken");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v5, v17, v18, v19, v20, *(_QWORD *)(a1 + 48), 0);

    goto LABEL_11;
  }
LABEL_12:

}

void sub_1D14DCCCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      v24 = v11;
      v25 = 2112;
      v26 = v12;
      v27 = 2112;
      v28 = v13;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Reprocessing pending message: %@ on service %@ with context %@", buf, 0x20u);

    }
  }
  objc_msgSend(*(id *)(a1 + 56), "setSkipDeferral:", 1);
  objc_msgSend(*(id *)(a1 + 56), "setReplicationSourceServiceNameOverride:", v7);
  objc_msgSend(*(id *)(a1 + 32), "setChat:", v8);
  v14 = *(void **)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(void **)(a1 + 32);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D14DCEDC;
  v18[3] = &unk_1E922BBF0;
  v19 = v16;
  v20 = *(id *)(a1 + 80);
  v21 = *(id *)(a1 + 48);
  v22 = v9;
  v17 = v9;
  objc_msgSend(v14, "handleMessageWithPipeline:input:completionBlock:", v15, v19, v18);

}

void sub_1D14DCEDC(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  const __CFString *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = CFSTR("NO");
      *(_DWORD *)buf = 138412802;
      v15 = v7;
      v16 = 2112;
      if (a2)
        v8 = CFSTR("YES");
      v17 = v8;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Finished reprocessing pending message: %@ success: %@ error: %@", buf, 0x20u);

    }
  }
  if ((a2 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "GUID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), &unk_1E9271308);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "fromIdentifier");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "fromToken");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v5, v9, v10, v11, v12, *(_QWORD *)(a1 + 48), 0);

  }
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
    (*(void (**)(void))(v13 + 16))();

}

void sub_1D14DD0C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  NSObject *v17;
  void *v18;
  IMSyndicationActionPipelineParameter *v19;
  IMFindAccountProcessingPipelineComponent *v20;
  void *v21;
  IMFindAccountProcessingPipelineComponent *v22;
  IMFindChatProcessingPipelineComponent *v23;
  void *v24;
  IMFindChatProcessingPipelineComponent *v25;
  IMSyndicationActionProcessingPipelineComponent *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  id v34;
  void *v35;
  NSObject *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _QWORD v41[4];
  IMSyndicationActionPipelineParameter *v42;
  id v43;
  id v44;
  __int128 *p_buf;
  os_activity_scope_state_s state;
  uint8_t v47[4];
  void *v48;
  __int16 v49;
  id v50;
  _QWORD v51[4];
  __int128 buf;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v39 = a2;
  v12 = a3;
  v40 = a4;
  v13 = a5;
  v37 = a6;
  v38 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v36 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedSyndicationAction", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v36, &state);
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorSyndicationAction"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v14 = v12;
  else
    v14 = 0;
  v15 = v14;
  v16 = v15;
  if (v15)
  {
    if (IMOSLoggingEnabled(v15))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v40, "fromPushID");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v18;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Setting up pipeline for SyndicatedAction fromID: %@, ", (uint8_t *)&buf, 0xCu);

      }
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v53 = 0x3032000000;
    v54 = sub_1D14D8B70;
    v55 = sub_1D14D8B80;
    v56 = 0;
    v56 = v38;
    v19 = -[IMSyndicationActionPipelineParameter initWithDefusedSyndicationAction:idsTrustedData:pipelineResources:]([IMSyndicationActionPipelineParameter alloc], "initWithDefusedSyndicationAction:idsTrustedData:pipelineResources:", v16, v40, v13);
    if (v19)
    {
      v20 = [IMFindAccountProcessingPipelineComponent alloc];
      objc_msgSend(v13, "imdAccount");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v20, "initWithReceivingAccount:", v21);

      v23 = [IMFindChatProcessingPipelineComponent alloc];
      objc_msgSend(v39, "chatRegistry");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = -[IMFindChatProcessingPipelineComponent initWithChatRegistry:](v23, "initWithChatRegistry:", v24);

      v26 = -[IMSyndicationActionProcessingPipelineComponent initWithPipelineResources:]([IMSyndicationActionProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
      v27 = (void *)MEMORY[0x1E0D35A08];
      v51[0] = v22;
      v51[1] = v25;
      v51[2] = v25;
      v51[3] = v26;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v51, 4);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "pipelineFromComponents:", v28);
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v39, "handler");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v41[0] = MEMORY[0x1E0C809B0];
      v41[1] = 3221225472;
      v41[2] = sub_1D14DD5C0;
      v41[3] = &unk_1E922BB28;
      v42 = v19;
      v43 = v13;
      v44 = v37;
      p_buf = &buf;
      objc_msgSend(v30, "handleSyndicatedActionWithPipeline:input:completionBlock:", v29, v42, v41);

    }
    else
    {
      if (IMOSLoggingEnabled(0))
      {
        OSLogHandleForIMFoundationCategory();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          v33 = (void *)objc_opt_class();
          *(_DWORD *)v47 = 138412546;
          v48 = v33;
          v49 = 2048;
          v50 = v12;
          v34 = v33;
          _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "Failed getting SyndicationAction blastdoor object from result: <%@ %p>, ", v47, 0x16u);

        }
      }
      objc_msgSend(v13, "service");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "sendAckForMessageWithContext:", v37);

      v22 = *(IMFindAccountProcessingPipelineComponent **)(*((_QWORD *)&buf + 1) + 40);
      *(_QWORD *)(*((_QWORD *)&buf + 1) + 40) = 0;
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    IMLogHandleForCategory();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      sub_1D16694C4(v31);

  }
  os_activity_scope_leave(&state);

}

void sub_1D14DD538(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  uint64_t v23;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DD47CLL);
  }
  _Block_object_dispose((const void *)(v23 - 144), 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DD5C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "syndicationAction");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing SyndicationAction: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "syndicationAction");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DD74C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DD674);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DD780(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  id v19;
  IMEditMessageCommandPipelineParameter *v20;
  IMFindAccountProcessingPipelineComponent *v21;
  void *v22;
  IMFindAccountProcessingPipelineComponent *v23;
  IMMessageFromStoragePipelineComponent *v24;
  void *v25;
  void *v26;
  IMMessageFromStoragePipelineComponent *v27;
  IMEditMessageCommandProcessingPipelineComponent *v28;
  IMMessageFromStoragePipelineComponent *v29;
  void *v30;
  void *v31;
  IMMessageFromStoragePipelineComponent *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  NSObject *v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  _QWORD v47[4];
  IMEditMessageCommandPipelineParameter *v48;
  id v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v60;
  __int16 v61;
  id v62;
  _QWORD v63[7];

  v63[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v12 = a3;
  v46 = a4;
  v13 = a5;
  v44 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v42 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v42, &state);
  v52 = 0;
  v53 = &v52;
  v54 = 0x3032000000;
  v55 = sub_1D14D8B70;
  v56 = sub_1D14D8B80;
  v57 = 0;
  v41 = v14;
  v57 = v41;
  if (IMOSLoggingEnabled(v41))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v46, "fromPushID", v41, v42);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v60 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for edited message received fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorEditMessageCommand"), CFSTR("BlastDoor"));
  v45 = v12;
  isKindOfClass = objc_opt_isKindOfClass();
  v18 = v12;
  if ((isKindOfClass & 1) == 0)
    v18 = 0;
  v19 = v18;
  v20 = -[IMEditMessageCommandPipelineParameter initWithDefusedMessage:idsTrustedData:]([IMEditMessageCommandPipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v19, v46);
  if (v20)
  {
    v21 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v21, "initWithReceivingAccount:", v22);

    v24 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v24, "initWithStorageProcessingType:storageController:broadcaster:", 0, v25, v26);

    v28 = -[IMEditMessageCommandProcessingPipelineComponent initWithPipelineResources:]([IMEditMessageCommandProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v29 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v29, "initWithStorageProcessingType:storageController:broadcaster:", 1, v30, v31);

    v33 = (void *)MEMORY[0x1E0D35A08];
    v63[0] = v23;
    v63[1] = v27;
    v63[2] = v28;
    v63[3] = v32;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v63, 4);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "pipelineFromComponents:", v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v43, "handler");
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v47[0] = MEMORY[0x1E0C809B0];
    v47[1] = 3221225472;
    v47[2] = sub_1D14DDCC4;
    v47[3] = &unk_1E922BB28;
    v48 = v20;
    v49 = v13;
    v50 = v44;
    v51 = &v52;
    objc_msgSend(v36, "handleEditMessageCommandWithPipeline:input:completionBlock:", v35, v48, v47);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        v38 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v60 = v38;
        v61 = 2048;
        v62 = v12;
        v39 = v38;
        _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Failed getting edit message blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v41);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "sendAckForMessageWithContext:", v44);

    v23 = (IMFindAccountProcessingPipelineComponent *)v53[5];
    v53[5] = 0;
  }

  _Block_object_dispose(&v52, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DDC40(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DDB80);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DDCC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "editCommandGUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing edit message command: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "editCommandGUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing edit message command and cleaning up: %@", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DDE50(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DDD78);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DDE84(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  IMRecoverJunkCommandPipelineParameter *v19;
  IMFindAccountProcessingPipelineComponent *v20;
  void *v21;
  IMFindAccountProcessingPipelineComponent *v22;
  IMMessageFromStoragePipelineComponent *v23;
  void *v24;
  void *v25;
  IMMessageFromStoragePipelineComponent *v26;
  IMRecoverJunkCommandProcessingPipelineComponent *v27;
  IMMessageFromStoragePipelineComponent *v28;
  void *v29;
  void *v30;
  IMMessageFromStoragePipelineComponent *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[4];
  IMRecoverJunkCommandPipelineParameter *v47;
  id v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;
  _QWORD v62[7];

  v62[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v12 = a3;
  v45 = a4;
  v13 = a5;
  v44 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v41 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v41, &state);
  v51 = 0;
  v52 = &v51;
  v53 = 0x3032000000;
  v54 = sub_1D14D8B70;
  v55 = sub_1D14D8B80;
  v56 = 0;
  v40 = v14;
  v56 = v40;
  if (IMOSLoggingEnabled(v40))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v45, "fromPushID", v40, v41);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v59 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for junk recovery received fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorRecoverJunkCommand"), CFSTR("BlastDoor"));
  v42 = v12;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v12;
  else
    v17 = 0;
  v18 = v17;
  v19 = -[IMRecoverJunkCommandPipelineParameter initWithDefusedMessage:idsTrustedData:]([IMRecoverJunkCommandPipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v18, v45);
  if (v19)
  {
    v20 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v20, "initWithReceivingAccount:", v21);

    v23 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v23, "initWithStorageProcessingType:storageController:broadcaster:", 0, v24, v25);

    v27 = -[IMRecoverJunkCommandProcessingPipelineComponent initWithPipelineResources:]([IMRecoverJunkCommandProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v28 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v28, "initWithStorageProcessingType:storageController:broadcaster:", 1, v29, v30);

    v32 = (void *)MEMORY[0x1E0D35A08];
    v62[0] = v22;
    v62[1] = v26;
    v62[2] = v27;
    v62[3] = v31;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v62, 4);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "pipelineFromComponents:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v43, "handler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1D14DE3C8;
    v46[3] = &unk_1E922BB28;
    v47 = v19;
    v48 = v13;
    v49 = v44;
    v50 = &v51;
    objc_msgSend(v35, "handleRecoverJunkCommandWithPipeline:input:completionBlock:", v34, v47, v46);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        v37 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v59 = v37;
        v60 = 2048;
        v61 = v12;
        v38 = v37;
        _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Failed getting recover junk command blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v40);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "sendAckForMessageWithContext:", v44);

    v22 = (IMFindAccountProcessingPipelineComponent *)v52[5];
    v52[5] = 0;
  }

  _Block_object_dispose(&v51, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DE340(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DE280);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DE3C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing recover junk command: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing recover junk command and cleaning up: %@", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DE554(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DE47CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DE588(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  IMRepositionStickerCommandPipelineParameter *v19;
  IMFindAccountProcessingPipelineComponent *v20;
  void *v21;
  IMFindAccountProcessingPipelineComponent *v22;
  IMMessageFromStoragePipelineComponent *v23;
  void *v24;
  void *v25;
  IMMessageFromStoragePipelineComponent *v26;
  IMRepositionStickerProcessingPipelineComponent *v27;
  IMMessageFromStoragePipelineComponent *v28;
  void *v29;
  void *v30;
  IMMessageFromStoragePipelineComponent *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[4];
  IMRepositionStickerCommandPipelineParameter *v47;
  id v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;
  _QWORD v62[7];

  v62[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v12 = a3;
  v45 = a4;
  v13 = a5;
  v44 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v41 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v41, &state);
  v51 = 0;
  v52 = &v51;
  v53 = 0x3032000000;
  v54 = sub_1D14D8B70;
  v55 = sub_1D14D8B80;
  v56 = 0;
  v40 = v14;
  v56 = v40;
  if (IMOSLoggingEnabled(v40))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v45, "fromPushID", v40, v41);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v59 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for sticker reposition received fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorRepositionStickerCommand"), CFSTR("BlastDoor"));
  v42 = v12;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v12;
  else
    v17 = 0;
  v18 = v17;
  v19 = -[IMRepositionStickerCommandPipelineParameter initWithDefusedMessage:idsTrustedData:]([IMRepositionStickerCommandPipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v18, v45);
  if (v19)
  {
    v20 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v20, "initWithReceivingAccount:", v21);

    v23 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v23, "initWithStorageProcessingType:storageController:broadcaster:", 0, v24, v25);

    v27 = -[IMRepositionStickerProcessingPipelineComponent initWithPipelineResources:]([IMRepositionStickerProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v28 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v28, "initWithStorageProcessingType:storageController:broadcaster:", 1, v29, v30);

    v32 = (void *)MEMORY[0x1E0D35A08];
    v62[0] = v22;
    v62[1] = v26;
    v62[2] = v27;
    v62[3] = v31;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v62, 4);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "pipelineFromComponents:", v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v43, "handler");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1D14DEACC;
    v46[3] = &unk_1E922BB28;
    v47 = v19;
    v48 = v13;
    v49 = v44;
    v50 = &v51;
    objc_msgSend(v35, "handleRepositionStickerCommandWithPipeline:input:completionBlock:", v34, v47, v46);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        v37 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v59 = v37;
        v60 = 2048;
        v61 = v12;
        v38 = v37;
        _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Failed getting command blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v40);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "sendAckForMessageWithContext:", v44);

    v22 = (IMFindAccountProcessingPipelineComponent *)v52[5];
    v52[5] = 0;
  }

  _Block_object_dispose(&v51, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DEA44(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DE984);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DEACC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing reposition sticker command: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing command and cleaning up: %@", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DEC58(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DEB80);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DEC8C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  IMScheduledMessageUpdatePipelineParameter *v21;
  IMScheduledMessageUpdateProcessingPipelineComponent *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  _QWORD v34[4];
  IMScheduledMessageUpdatePipelineParameter *v35;
  id v36;
  id v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t);
  id v44;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  id v49;
  _QWORD v50[4];

  v50[1] = *MEMORY[0x1E0C80C00];
  v31 = a2;
  v12 = a3;
  v33 = a4;
  v13 = a5;
  v32 = a6;
  v14 = a7;
  v15 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v15, &state);
  v39 = 0;
  v40 = &v39;
  v41 = 0x3032000000;
  v42 = sub_1D14D8B70;
  v43 = sub_1D14D8B80;
  v44 = 0;
  v16 = v14;
  v44 = v16;
  if (IMOSLoggingEnabled(v16))
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v33, "fromPushID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v47 = v18;
      _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Setting up pipeline for scheduled message update fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorScheduledMessageUpdate"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = v12;
  else
    v19 = 0;
  v20 = v19;
  v21 = -[IMScheduledMessageUpdatePipelineParameter initWithDefusedMessage:idsTrustedData:]([IMScheduledMessageUpdatePipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v20, v33);
  if (v21)
  {
    v22 = -[IMScheduledMessageUpdateProcessingPipelineComponent initWithPipelineResources:]([IMScheduledMessageUpdateProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v23 = (void *)MEMORY[0x1E0D35A08];
    v50[0] = v22;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v50, 1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "pipelineFromComponents:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v31, "handler");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = sub_1D14DF0D0;
    v34[3] = &unk_1E922BB28;
    v35 = v21;
    v36 = v13;
    v37 = v32;
    v38 = &v39;
    objc_msgSend(v26, "handleScheduledMessageUpdateCommandWithPipeline:input:completionBlock:", v25, v35, v34);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v47 = v28;
        v48 = 2048;
        v49 = v12;
        v29 = v28;
        _os_log_impl(&dword_1D1413000, v27, OS_LOG_TYPE_INFO, "Failed getting command blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "sendAckForMessageWithContext:", v32);

    v22 = (IMScheduledMessageUpdateProcessingPipelineComponent *)v40[5];
    v40[5] = 0;
  }

  _Block_object_dispose(&v39, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DF054(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DEFA0);
  }
  _Block_object_dispose(&a21, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DF0D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v7;
        v15 = 2112;
        v16 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing scheduled message update command: %@, %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 138412290;
      v14 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing command and cleaning up: %@", (uint8_t *)&v13, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

void sub_1D14DF25C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DF184);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DF290(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  IMCrossServiceAssociationMessagePipelineParameter *v19;
  IMFindAccountProcessingPipelineComponent *v20;
  void *v21;
  IMFindAccountProcessingPipelineComponent *v22;
  IMFindChatProcessingPipelineComponent *v23;
  void *v24;
  IMFindChatProcessingPipelineComponent *v25;
  IMMessageFromStoragePipelineComponent *v26;
  void *v27;
  void *v28;
  IMMessageFromStoragePipelineComponent *v29;
  IMCrossServiceAssociationMessageProcessingPipelineComponent *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  NSObject *v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  _QWORD v46[4];
  IMCrossServiceAssociationMessagePipelineParameter *v47;
  id v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  void (*v55)(uint64_t);
  id v56;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;
  _QWORD v62[7];

  v62[4] = *MEMORY[0x1E0C80C00];
  v43 = a2;
  v12 = a3;
  v44 = a4;
  v13 = a5;
  v45 = a6;
  v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v41 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedCrossServiceAssociationMessage", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v41, &state);
  v51 = 0;
  v52 = &v51;
  v53 = 0x3032000000;
  v54 = sub_1D14D8B70;
  v55 = sub_1D14D8B80;
  v56 = 0;
  v40 = v14;
  v56 = v40;
  if (IMOSLoggingEnabled(v40))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v44, "fromPushID", v40, v41);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v59 = v16;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for iml to im association update fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorCrossServiceAssociationMessage"), CFSTR("BlastDoor"));
  v42 = v12;
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = v12;
  else
    v17 = 0;
  v18 = v17;
  v19 = -[IMCrossServiceAssociationMessagePipelineParameter initWithDefusedMessage:idsTrustedData:]([IMCrossServiceAssociationMessagePipelineParameter alloc], "initWithDefusedMessage:idsTrustedData:", v18, v44);
  if (v19)
  {
    v20 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v13, "imdAccount");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v20, "initWithReceivingAccount:", v21);

    v23 = [IMFindChatProcessingPipelineComponent alloc];
    objc_msgSend(v13, "chatRegistry");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = -[IMFindChatProcessingPipelineComponent initWithChatRegistry:](v23, "initWithChatRegistry:", v24);

    v26 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v13, "storageController");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "broadcaster");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v26, "initWithStorageProcessingType:storageController:broadcaster:", 0, v27, v28);

    v30 = -[IMCrossServiceAssociationMessageProcessingPipelineComponent initWithPipelineResources:]([IMCrossServiceAssociationMessageProcessingPipelineComponent alloc], "initWithPipelineResources:", v13);
    v31 = (void *)MEMORY[0x1E0D35A08];
    v62[0] = v22;
    v62[1] = v25;
    v62[2] = v29;
    v62[3] = v30;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v62, 4);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "pipelineFromComponents:", v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v43, "handler");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1D14DF7E8;
    v46[3] = &unk_1E922BB28;
    v47 = v19;
    v48 = v13;
    v49 = v45;
    v50 = &v51;
    objc_msgSend(v34, "handleCrossServiceAssociationCommandWithPipeline:input:completionBlock:", v33, v47, v46);

  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v35 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        v36 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412546;
        v59 = v36;
        v60 = 2048;
        v61 = v12;
        v37 = v36;
        _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "Failed getting command blastdoor object from result: <%@ %p>, ", buf, 0x16u);

      }
    }
    objc_msgSend(v13, "service", v40);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v38, "sendAckForMessageWithContext:", v45);

    objc_msgSend(v13, "service");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    im_sendCertifiedDeliveryReceiptIfPossible();

    v22 = (IMFindAccountProcessingPipelineComponent *)v52[5];
    v52[5] = 0;
  }

  _Block_object_dispose(&v51, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14DF760(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D14DF674);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D14DF7E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v4 = (id)IMOSLoggingEnabled(v4);
    if ((_DWORD)v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "GUID");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = 138412546;
        v16 = v7;
        v17 = 2112;
        v18 = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Error while processing iml to im association command: %@, %@", (uint8_t *)&v15, 0x16u);

      }
    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = 138412290;
      v16 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Ack'ing command and cleaning up: %@", (uint8_t *)&v15, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "service");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  objc_msgSend(*(id *)(a1 + 40), "service");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "GUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  im_sendCertifiedDeliveryReceiptIfPossible();

  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = 0;

}

void sub_1D14DF9CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14DF8A0);
  }
  _Unwind_Resume(a1);
}

void sub_1D14DFA58(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  char isKindOfClass;
  void *v17;
  void *v18;
  uint64_t v19;
  IMTypingIndicatorProcessingPipelineComponent *v20;
  void *v21;
  IMTextMessageProcessingPipelineComponent *v22;
  IMAssociatedMessageProcessingPipelineComponent *v23;
  IMAudioMessageProcessingPipelineComponent *v24;
  IMTextMessageProcessingPipelineComponent *v25;
  IMEmojiTapbackMessageProcessingPipelineComponent *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  void *v38;
  IMFindAccountProcessingPipelineComponent *v39;
  void *v40;
  IMFindAccountProcessingPipelineComponent *v41;
  IMMessageFromStoragePipelineComponent *v42;
  void *v43;
  void *v44;
  IMMessageFromStoragePipelineComponent *v45;
  IMFindChatProcessingPipelineComponent *v46;
  void *v47;
  IMConvergeGroupProcessingPipelineComponent *v48;
  IMMessageLegacyProcessingPipelineComponent *v49;
  void *v50;
  IMMessageLegacyProcessingPipelineComponent *v51;
  IMResolveFallbackHashesProcessingPipelineComponent *v52;
  void *v53;
  void *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  id v58;
  void *v59;
  IMFindChatProcessingPipelineComponent *v60;
  id v61;
  NSObject *v62;
  void *v63;
  id v64;
  IMTypingIndicatorProcessingPipelineComponent *v65;
  id v66;
  id v67;
  IMTypingIndicatorPipelineParameter *v68;
  void *v69;
  void *v70;
  id v71;
  id v72;
  _QWORD v73[4];
  IMTypingIndicatorPipelineParameter *v74;
  id v75;
  id v76;
  id v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  void (*v83)(uint64_t);
  id v84;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  void *v87;
  __int16 v88;
  id v89;
  __int16 v90;
  IMTypingIndicatorProcessingPipelineComponent *v91;
  _QWORD v92[10];

  v92[7] = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v71 = a3;
  v72 = a4;
  v67 = a5;
  v66 = a6;
  v13 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v62 = _os_activity_create(&dword_1D1413000, "com.apple.messages.iMessageReceivedMessage", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v62, &state);
  v79 = 0;
  v80 = &v79;
  v81 = 0x3032000000;
  v82 = sub_1D14D8B70;
  v83 = sub_1D14D8B80;
  v84 = 0;
  v61 = v13;
  v84 = v61;
  if (IMOSLoggingEnabled(v61))
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v72, "fromPushID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v87 = v15;
      _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Setting up pipeline for basic message fromID: %@, ", buf, 0xCu);

    }
  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorBasicTextMessage"), CFSTR("BlastDoor"));
  isKindOfClass = objc_opt_isKindOfClass();
  v17 = v71;
  if ((isKindOfClass & 1) == 0)
    v17 = 0;
  v64 = v17;
  objc_msgSend(v64, "messageSubType");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "type");

  switch(v19)
  {
    case 0:
      v68 = -[IMTypingIndicatorPipelineParameter initWithBDBasic:idsTrustedData:]([IMTypingIndicatorPipelineParameter alloc], "initWithBDBasic:idsTrustedData:", v64, v72);
      v20 = [IMTypingIndicatorProcessingPipelineComponent alloc];
      objc_msgSend(v12, "messageStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v20, "initWithMessageStore:", v21);
      break;
    case 2:
      v68 = -[IMAssociatedMessagePipelineParameter initWithBDBasic:idsTrustedData:]([IMAssociatedMessagePipelineParameter alloc], "initWithBDBasic:idsTrustedData:", v64, v72);
      v23 = [IMAssociatedMessageProcessingPipelineComponent alloc];
      objc_msgSend(v12, "messageStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v23, "initWithMessageStore:", v21);
      break;
    case 3:
      v68 = -[IMTypingIndicatorPipelineParameter initWithBDBasic:idsTrustedData:]([IMTypingIndicatorPipelineParameter alloc], "initWithBDBasic:idsTrustedData:", v64, v72);
      v24 = [IMAudioMessageProcessingPipelineComponent alloc];
      objc_msgSend(v12, "messageStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v24, "initWithMessageStore:", v21);
      break;
    case 4:
      v68 = -[IMTextMessagePipelineParameter initWithBDBasic:idsTrustedData:]([IMTextMessagePipelineParameter alloc], "initWithBDBasic:idsTrustedData:", v64, v72);
      -[IMTextMessagePipelineParameter setWasDetonated:](v68, "setWasDetonated:", 1);
      v25 = [IMTextMessageProcessingPipelineComponent alloc];
      objc_msgSend(v12, "messageStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v25, "initWithMessageStore:", v21);
      break;
    case 5:
      v68 = -[IMEmojiTapbackMessagePipelineParameter initWithBDBasic:idsTrustedData:]([IMEmojiTapbackMessagePipelineParameter alloc], "initWithBDBasic:idsTrustedData:", v64, v72);
      v26 = [IMEmojiTapbackMessageProcessingPipelineComponent alloc];
      objc_msgSend(v12, "messageStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v26, "initWithMessageStore:", v21);
      break;
    default:
      v68 = -[IMTextMessagePipelineParameter initWithBDBasic:idsTrustedData:]([IMTextMessagePipelineParameter alloc], "initWithBDBasic:idsTrustedData:", v64, v72);
      v22 = [IMTextMessageProcessingPipelineComponent alloc];
      objc_msgSend(v12, "messageStore");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = -[IMTextMessageProcessingPipelineComponent initWithMessageStore:](v22, "initWithMessageStore:", v21);
      break;
  }

  objc_msgSend(v67, "imdAccount");
  v70 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v27 = objc_opt_isKindOfClass();
  if ((v27 & 1) == 0)
  {
    if (IMOSLoggingEnabled(v27))
    {
      OSLogHandleForIMFoundationCategory();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v87 = v70;
        _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "Account was not the right class: %@", buf, 0xCu);
      }

    }
    v63 = 0;
    goto LABEL_33;
  }
  objc_msgSend(v70, "session");
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = objc_opt_respondsToSelector();
  if ((v28 & 1) != 0)
  {
    objc_msgSend(v70, "idsAccount");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v69, "_pushHandlerForIDSAccount:", v29);
    v63 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v63 || (v30 = objc_opt_respondsToSelector(), (v30 & 1) == 0))
    {
      v30 = IMOSLoggingEnabled(v30);
      if ((_DWORD)v30)
      {
        OSLogHandleForIMFoundationCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v87 = v63;
          _os_log_impl(&dword_1D1413000, v31, OS_LOG_TYPE_INFO, "Push handler either nil or session did not respond to incomingMessage: %@", buf, 0xCu);
        }

      }
    }
  }
  else
  {
    v30 = IMOSLoggingEnabled(v28);
    if ((_DWORD)v30)
    {
      OSLogHandleForIMFoundationCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v87 = v69;
        _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Session either nil or did not respond to _pushHandlerForIDSAccount: %@", buf, 0xCu);
      }

    }
    v63 = 0;
  }
  if (!v69)
  {
LABEL_33:
    +[IMDServiceController sharedController](IMDServiceController, "sharedController");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "serviceWithName:", *MEMORY[0x1E0D38F68]);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    +[IMDServiceSession existingServiceSessionForService:](IMDServiceSession, "existingServiceSessionForService:", v35);
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v69))
    {
      OSLogHandleForIMFoundationCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v87 = v69;
        _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Falling back to service session: %@", buf, 0xCu);
      }

    }
  }
  if (v68 && v65)
  {
    if (IMOSLoggingEnabled(v30))
    {
      OSLogHandleForIMFoundationCategory();
      v37 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        -[IMTextMessagePipelineParameter GUID](v68, "GUID");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v87 = v38;
        _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Going through new message processing path: %@, ", buf, 0xCu);

      }
    }
    v39 = [IMFindAccountProcessingPipelineComponent alloc];
    objc_msgSend(v67, "imdAccount");
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = -[IMFindAccountProcessingPipelineComponent initWithReceivingAccount:](v39, "initWithReceivingAccount:", v40);

    v42 = [IMMessageFromStoragePipelineComponent alloc];
    objc_msgSend(v12, "messageFromStorageController");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "broadcaster");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = -[IMMessageFromStoragePipelineComponent initWithStorageProcessingType:storageController:broadcaster:](v42, "initWithStorageProcessingType:storageController:broadcaster:", 0, v43, v44);

    v46 = [IMFindChatProcessingPipelineComponent alloc];
    objc_msgSend(v12, "chatRegistry");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v60 = -[IMFindChatProcessingPipelineComponent initWithChatRegistry:](v46, "initWithChatRegistry:", v47);

    v48 = -[IMConvergeGroupProcessingPipelineComponent initWithIDSTrustedData:]([IMConvergeGroupProcessingPipelineComponent alloc], "initWithIDSTrustedData:", v72);
    v49 = [IMMessageLegacyProcessingPipelineComponent alloc];
    objc_msgSend(v12, "idsService");
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = -[IMMessageLegacyProcessingPipelineComponent initWithIDSTrustedData:messageContext:idsService:](v49, "initWithIDSTrustedData:messageContext:idsService:", v72, v66, v50);

    v52 = objc_alloc_init(IMResolveFallbackHashesProcessingPipelineComponent);
    v92[0] = v41;
    v92[1] = v45;
    v92[2] = v60;
    v92[3] = v48;
    v92[4] = v52;
    v92[5] = v65;
    v92[6] = v51;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v92, 7);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D35A08], "pipelineFromComponents:", v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "handler");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v73[0] = MEMORY[0x1E0C809B0];
    v73[1] = 3221225472;
    v73[2] = sub_1D14E0644;
    v73[3] = &unk_1E922BD48;
    v74 = v68;
    v75 = v12;
    v76 = v66;
    v78 = &v79;
    v77 = v72;
    objc_msgSend(v55, "handleMessageWithPipeline:input:completionBlock:", v54, v74, v73);

  }
  else
  {
    if (IMOSLoggingEnabled(v30))
    {
      OSLogHandleForIMFoundationCategory();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        v57 = (void *)objc_opt_class();
        *(_DWORD *)buf = 138412802;
        v87 = v57;
        v88 = 2048;
        v89 = v71;
        v90 = 2112;
        v91 = v65;
        v58 = v57;
        _os_log_impl(&dword_1D1413000, v56, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, with messageCreationComponent: %@", buf, 0x20u);

      }
    }
    objc_msgSend(v12, "idsService");
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v59, "sendAckForMessageWithContext:", v66);

    v41 = (IMFindAccountProcessingPipelineComponent *)v80[5];
    v80[5] = 0;
  }

  _Block_object_dispose(&v79, 8);
  os_activity_scope_leave(&state);

}

void sub_1D14E0644(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint8_t buf[4];
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v16 = v7;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", buf, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 40), "idsService");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 48));

  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = 0;

  if ((a2 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "GUID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), &unk_1E9271308);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "fromIdentifier");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "fromToken");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v5, v11, v12, v13, v14, *(_QWORD *)(a1 + 48), 0);

  }
}

id sub_1D14E19C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  NSObject *v8;

  v5 = a3;
  objc_msgSend(a2, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v7 = v6;
  }
  else
  {
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
        sub_1D1669504((uint64_t)v5, a1, v8);

    }
    v7 = 0;
  }

  return v7;
}

void sub_1D14E1A68(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  void (**v14)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v15;
  int v16;
  NSObject *v17;
  const __CFString *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  const __CFString *v23;
  void *v24;
  NSObject *v25;
  const __CFString *v26;
  NSObject *v27;
  const __CFString *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  const __CFString *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  const __CFString *v49;
  __int16 v50;
  id v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = objc_msgSend(*(id *)(a1 + 32), "command");
  if (v9 != a2)
  {
    v9 = IMOSLoggingEnabled(v9);
    if ((_DWORD)v9)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = *(const __CFString **)(a1 + 32);
        *(_DWORD *)buf = 134218242;
        v47 = a2;
        v48 = 2112;
        v49 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "<Warning> Incoming command doesn't match BlastDoor command (%ld), trustedData: %@", buf, 0x16u);
      }

    }
  }
  if (!v7)
  {
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = CFSTR("NO");
        v29 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134218754;
        if (!v8)
          v28 = CFSTR("YES");
        v47 = a2;
        v48 = 2112;
        v49 = v28;
        v50 = 2112;
        v51 = v8;
        v52 = 2112;
        v53 = v29;
        _os_log_impl(&dword_1D1413000, v27, OS_LOG_TYPE_INFO, "BlastDoor processing for command %ld was successful (%@) with error (%@) while processing GUID (%@)", buf, 0x2Au);
      }

    }
    objc_msgSend(v8, "userInfo");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "objectForKeyedSubscript:", CFSTR("explosionDomain"));
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v31, "isEqualToString:", CFSTR("com.apple.BlastDoor.MessagesBlastDoorInterface")) & 1) != 0)
    {
      objc_msgSend(v8, "userInfo");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "objectForKeyedSubscript:", CFSTR("explosionErrorType"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("UnsupportedAirlockMessageType"));

      if (v34)
      {
        if (IMOSLoggingEnabled(v35))
        {
          OSLogHandleForIMFoundationCategory();
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            v37 = *(const __CFString **)(a1 + 48);
            *(_DWORD *)buf = 134218242;
            v47 = a2;
            v48 = 2112;
            v49 = v37;
            _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "BlastDoor (Airlock) processing for command %ld was skipped because it is unsupported while processing GUID (%@)", buf, 0x16u);
          }

        }
        goto LABEL_40;
      }
    }
    else
    {

    }
    if ((objc_msgSend(*(id *)(a1 + 56), "runningInAutomation") & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld-%@.data"), a2, *(_QWORD *)(a1 + 48));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0D398A8], "writeMessagePayloadToTemporaryDirectory:fileName:", *(_QWORD *)(a1 + 80), v38);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v40 = *(_QWORD *)(a1 + 48);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%ld"), a2);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "fromIdentifier");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "fromToken");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v8, v40, v41, v42, v43, *(_QWORD *)(a1 + 72), v39);

    }
    goto LABEL_40;
  }
  if (a2 == 100)
    im_sendMessageCheckpointIfNecessary();
  +[IMDiMessageIDSDelegate commandHandlerRegistry](IMDiMessageIDSDelegate, "commandHandlerRegistry");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKey:", v13);
  v14 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();

  v16 = IMOSLoggingEnabled(v15);
  if (!v14)
  {
    if (v16)
    {
      OSLogHandleForIMFoundationCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        v26 = *(const __CFString **)(a1 + 48);
        *(_DWORD *)buf = 134218242;
        v47 = a2;
        v48 = 2112;
        v49 = v26;
        _os_log_impl(&dword_1D1413000, v25, OS_LOG_TYPE_INFO, "Failure to find BlastDoor handler block for command %ld while processing GUID (%@)", buf, 0x16u);
      }

    }
LABEL_40:
    objc_msgSend(*(id *)(a1 + 40), "sendAckForMessageWithContext:", *(_QWORD *)(a1 + 72));
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
    v45 = *(void **)(v44 + 40);
    *(_QWORD *)(v44 + 40) = 0;

    v14 = 0;
    goto LABEL_41;
  }
  if (v16)
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      v18 = *(const __CFString **)(a1 + 48);
      *(_DWORD *)buf = 134218242;
      v47 = a2;
      v48 = 2112;
      v49 = v18;
      _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "About to execute block for command %ld for GUID (%@)", buf, 0x16u);
    }

  }
  ((void (**)(_QWORD, _QWORD, id, _QWORD, _QWORD, _QWORD, _QWORD))v14)[2](v14, *(_QWORD *)(a1 + 56), v7, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = 0;

  if (IMOSLoggingEnabled(v21))
  {
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = CFSTR("NO");
      v24 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 134218498;
      if (!v8)
        v23 = CFSTR("YES");
      v47 = a2;
      v48 = 2112;
      v49 = v23;
      v50 = 2112;
      v51 = v24;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "BlastDoor processing for command %ld was successful (%@) while processing GUID (%@)", buf, 0x20u);
    }

  }
LABEL_41:
  objc_msgSend(*(id *)(a1 + 56), "setRunningInAutomation:", 0);

}

void sub_1D14E2348()
{
  IMDNotificationResponseUtilities *v0;
  void *v1;

  v0 = objc_alloc_init(IMDNotificationResponseUtilities);
  v1 = (void *)qword_1ED935DD0;
  qword_1ED935DD0 = (uint64_t)v0;

}

void sub_1D14E2A88(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "notification");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "request");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "content");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "userInfo");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyMessageGUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyChatGUIDs"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "firstObject");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (v6)
      {
        if (v8)
          objc_msgSend(*(id *)(a1 + 40), "_markMessageAsRead:inChat:withCompletionHandler:", v6, v8, *(_QWORD *)(a1 + 48));
      }
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1D14E2BA0(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "notification");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "request");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "content");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "userInfo");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyMessageGUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyChatGUIDs"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "firstObject");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (v6)
      {
        if (v8)
          objc_msgSend(*(id *)(a1 + 40), "_markMessageAsRead:inChat:withCompletionHandler:", v6, v8, *(_QWORD *)(a1 + 48));
      }
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1D14E2CB8(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "notification");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "request");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "content");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "userInfo");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyMessageGUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyChatGUIDs"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "firstObject");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (v6)
      {
        if (v8)
          objc_msgSend(*(id *)(a1 + 40), "_markMessageAsRead:inChat:withCompletionHandler:", v6, v8, *(_QWORD *)(a1 + 48));
      }
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1D14E2DD0(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "notification");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "request");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "content");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "userInfo");
    v10 = (id)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyMessageGUID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("CKBBContextKeyChatGUIDs"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v7, "firstObject");
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (v6)
      {
        if (v8)
          objc_msgSend(*(id *)(a1 + 40), "_markMessageAsRead:inChat:withCompletionHandler:", v6, v8, *(_QWORD *)(a1 + 48));
      }
    }
    else
    {
      v9 = 0;
    }

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

id sub_1D14E38D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v3, "count"));
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v15;
    v9 = *MEMORY[0x1E0D37870];
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("%K = %@"), v9, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v10), (_QWORD)v14);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "addObject:", v11);

        ++v10;
      }
      while (v7 != v10);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

  objc_msgSend(MEMORY[0x1E0CB3528], "orPredicateWithSubpredicates:", v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

uint64_t sub_1D14E3A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("%K = %d"), *MEMORY[0x1E0D37758], a3);
}

uint64_t sub_1D14E3A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("%K == %ld"), *MEMORY[0x1E0D377B8], a3);
}

void sub_1D14E3B30()
{
  IMDServiceController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDServiceController);
  v1 = (void *)qword_1ED936050;
  qword_1ED936050 = (uint64_t)v0;

}

void sub_1D14E4078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D14E4090(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D14E40A0(uint64_t a1)
{

}

void sub_1D14E40A8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7;

  v7 = a3;
  if (objc_msgSend(v7, "replicationSourceID") == *(_QWORD *)(a1 + 40))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }

}

void sub_1D14E4214(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (objc_msgSend(v4, "supportsCapability:", *(_QWORD *)(a1 + 32)))
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v4);

}

void sub_1D14E53B0(uint64_t a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0D397B8], "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "postCoreAutomationNotificationFinishedTapToDownload:downloadedFromCloudKitSuccessfully:", *(_QWORD *)(a1 + 32), a2);

}

void sub_1D14E53FC(uint64_t a1, char a2, void *a3)
{
  id v5;

  v5 = a3;
  if ((a2 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "fallbackToDownloadIfPossible:transfer:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if (IMIsRunningInAutomation())
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_1D14E57A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = *(id *)(a1 + 32);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v3, "containsObject:", v9, (_QWORD)v12))
        {
          v10 = *(void **)(a1 + 40);
          objc_msgSend(v9, "guid");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "fallbackToDownloadIfPossible:transfer:", v11, v9);

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

}

void sub_1D14E5B2C()
{
  IMDNicknameController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDNicknameController);
  v1 = (void *)qword_1ED935DD8;
  qword_1ED935DD8 = (uint64_t)v0;

}

BOOL sub_1D14E62B8(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  _BOOL8 v5;

  objc_msgSend(a2, "objectForKey:", CFSTR("date"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "timeIntervalSinceNow");
  v5 = v4 > -1209600.0 && *(_BYTE *)(a1 + 32) == 0;

  return v5;
}

void sub_1D14E6C30(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  const __CFString *v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if (a2)
        v7 = CFSTR("YES");
      v12 = 138412546;
      v13 = v7;
      v14 = 2112;
      v15 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "We successfully reuploaded our local nickname %@ %@", (uint8_t *)&v12, 0x16u);
    }

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (a2)
  {
    objc_msgSend(WeakRetained, "defaults");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 40));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setValue:forDomain:forKey:", v11, *MEMORY[0x1E0D38B48], *MEMORY[0x1E0D38BA0]);

  }
  else
  {
    objc_msgSend(WeakRetained, "_tryToReuploadPersonalNicknameWithRetryCount:reuploadVersion:", *(_QWORD *)(a1 + 48) + 1, *(_QWORD *)(a1 + 40));
  }

}

uint64_t sub_1D14E6EB8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__newDeviceDidSignIntoiMessageWithRetryCount_);
}

void sub_1D14E7068(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  _BOOL4 v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v12 = MessageDictionaryNicknameRequestPersonalNicknameInfoKey;
  v13[0] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(*(id *)(a1 + 32), "_sendMessageDictionary:toDevice:", v2, 0);
  if ((_DWORD)v3)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Successfully sent request to peers for nickname info", (uint8_t *)&v10, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "defaults");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setValue:forDomain:forKey:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D38B48], *MEMORY[0x1E0D38B98]);

  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40) < 5uLL;
    v7 = IMOSLoggingEnabled(v3);
    if (v6)
    {
      if (v7)
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          v10 = 138412290;
          v11 = &unk_1E9271988;
          _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "We did not have the IDSDevices to send the request to, going to try again in %@", (uint8_t *)&v10, 0xCu);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "_retryPeerRequestWithRetry:", *(_QWORD *)(a1 + 40) + 1);
    }
    else if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "We do not have enough retries to get nickname info, not trying again", (uint8_t *)&v10, 2u);
      }

    }
  }

}

void sub_1D14E777C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  void *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 9))
  {
    if (IMOSLoggingEnabled(a1))
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v3 = 138412290;
        v4 = &unk_1E9271988;
        _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Nickname is still uploading after time out %@ setting upload to done", (uint8_t *)&v3, 0xCu);
      }

    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 9) = 0;
  }
}

void sub_1D14E7E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1D14E7EC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1D14E7ED8(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id *v24;
  id WeakRetained;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  void (*v35)(void);
  NSObject *v36;
  id *v37;
  id v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  uint8_t buf[16];

  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v23 = v22;
  if (a2)
  {
    v24 = (id *)(a1 + 40);
    v48 = a1;
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v16, "description");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_showDebugAlertWithHeader:message:", CFSTR("Successfully Uploaded Personal Nickname"), v26);

    v27 = objc_loadWeakRetained(v24);
    objc_msgSend(v27, "setPersonalNickname:", v16);

    v28 = objc_loadWeakRetained(v24);
    objc_msgSend(v28, "_resetHandleSharingList");

    v29 = objc_loadWeakRetained(v24);
    objc_msgSend(v29, "personalNickname");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "_storePublicNickname:nicknameLocation:encryptionKey:wallpaperDataTag:wallpaperLowResDataTag:wallpaperMetadataTag:", v30, v17, v18, v19, v20, v21);

    v31 = objc_loadWeakRetained(v24);
    objc_msgSend(v31, "_endNicknameUpload");

    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v32, "postNotificationName:object:userInfo:", IMDMeCardUpdatedNotification, 0, 0);

    v33 = objc_loadWeakRetained(v24);
    objc_msgSend(v33, "sendPersonalNicknameRecordIDAndVersionToAllPeers");

    v34 = *(_QWORD *)(v48 + 32);
    if (v34)
    {
      v35 = *(void (**)(void))(v34 + 16);
LABEL_10:
      v35();
    }
  }
  else
  {
    v47 = v19;
    v49 = v18;
    if (IMOSLoggingEnabled(v22))
    {
      OSLogHandleForIMFoundationCategory();
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Unable to store in Public Database, aborting fanout to other devices", buf, 2u);
      }

    }
    v37 = (id *)(a1 + 40);
    v38 = objc_loadWeakRetained((id *)(a1 + 40));
    v39 = (void *)MEMORY[0x1E0CB3940];
    v40 = a1;
    v41 = v38;
    objc_msgSend(v41, "personalNickname");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "stringWithFormat:", CFSTR("Error: %@\n Fallback nickname: %@"), v23, v42);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "_showDebugAlertWithHeader:message:", CFSTR("Failed Uploading Personal Nickname"), v43);

    v44 = objc_loadWeakRetained(v37);
    objc_msgSend(v44, "personalNickname");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "setPersonalNickname:", v45);

    v46 = *(_QWORD *)(v40 + 32);
    v19 = v47;
    v18 = v49;
    if (v46)
    {
      v35 = *(void (**)(void))(v46 + 16);
      goto LABEL_10;
    }
  }

}

void sub_1D14E8BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1D14E8C00(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1D14E8C14(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  int v16;
  NSObject *v17;
  id WeakRetained;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = IMOSLoggingEnabled(v15);
  if (v11)
  {
    if (v16)
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v25 = v11;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Got personal nickname from IMTransferAgent: %@", buf, 0xCu);
      }

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(v11, "description");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_showDebugAlertWithHeader:message:", CFSTR("Fetched Personal Nickname"), v19);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    if (v16)
    {
      OSLogHandleForIMFoundationCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        v21 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v25 = v15;
        v26 = 2112;
        v27 = v21;
        _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Failed to fetch public nickname {error: %@, recordName: %@}", buf, 0x16u);
      }

    }
    v22 = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("recordID: %@\ndecryptionKey: %@\nerror: %@"), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v15);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "_showDebugAlertWithHeader:message:", CFSTR("Failed Personal Nickname Fetch"), v23);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_1D14E9118(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("Nickname Download"))))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "totalTimeForKey:", CFSTR("Nickname Download"));
      *(_DWORD *)buf = 134217984;
      v16 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Public Nickname fetched or failed in time: %f", buf, 0xCu);
    }

  }
  if (!v5)
  {
    if (v6)
    {
      objc_msgSend(v6, "domain");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "lowercaseString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "containsString:", CFSTR("blastdoor"));

      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), &unk_1E92713C8);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v6, v12, v13, 0, 0, 0, 0);

      }
    }
  }
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
    (*(void (**)(uint64_t, id, _QWORD, _QWORD, _QWORD, id))(v14 + 16))(v14, v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v6);

}

void sub_1D14E9300(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "stopTimingForKey:", CFSTR("Nickname Download"))))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "totalTimeForKey:", CFSTR("Nickname Download"));
      *(_DWORD *)buf = 134217984;
      v16 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Public Nickname fetched or failed in time: %f", buf, 0xCu);
    }

  }
  if (!v5)
  {
    if (v6)
    {
      objc_msgSend(v6, "domain");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "lowercaseString");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "containsString:", CFSTR("blastdoor"));

      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), &unk_1E92713C8);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v6, v12, v13, 0, 0, 0, 0);

      }
    }
  }
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
    (*(void (**)(uint64_t, id, _QWORD, _QWORD, _QWORD, id))(v14 + 16))(v14, v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v6);

}

BOOL sub_1D14EA0CC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  const __CFString *v6;
  int v8;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "allExistingChatsWithIdentifier:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend(v3, "count");
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (v4)
        v6 = CFSTR("YES");
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Has messages history with sender:%@", (uint8_t *)&v8, 0xCu);
    }

  }
  return v4 != 0;
}

BOOL sub_1D14EA1F8(uint64_t a1)
{
  int v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const __CFString *v11;
  int v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(*(id *)(a1 + 32), "_appearsToBePhoneNumber");
  v3 = objc_alloc(MEMORY[0x1E0D0CE60]);
  if (v2)
    v4 = 2;
  else
    v4 = 3;
  v5 = (void *)objc_msgSend(v3, "initWithType:value:", v4, *(_QWORD *)(a1 + 32));
  objc_msgSend(MEMORY[0x1E0D0CE70], "predicateForCallsWithRemoteParticipantHandle:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "callHistoryManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countCallsWithPredicate:", v6);

  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = CFSTR("NO");
      if (v8)
        v11 = CFSTR("YES");
      v13 = 138412290;
      v14 = v11;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Has call history with sender:%@", (uint8_t *)&v13, 0xCu);
    }

  }
  return v8 != 0;
}

void sub_1D14EA35C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id WeakRetained;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = v15;
  if (v11)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Fetched Nickname for %@"), *(_QWORD *)(a1 + 32));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "description");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(WeakRetained, "_showDebugAlertWithHeader:message:", v18, v19);

    objc_msgSend(*(id *)(a1 + 40), "_stripFZIDPrefix");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(v21, "saveNicknameForRecordID:handleID:userNickname:", *(_QWORD *)(a1 + 48), v20, v11);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    if (IMOSLoggingEnabled(v15))
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v23 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        v28 = v23;
        v29 = 2112;
        v30 = v16;
        _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Nicknames - Failed getting nickname for record ID %@ from transfer agent with error %@", buf, 0x16u);
      }

    }
    v24 = objc_loadWeakRetained((id *)(a1 + 64));
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Failed Nickname Fetch for %@"), *(_QWORD *)(a1 + 32));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("recordID: %@\nerror:%@"), *(_QWORD *)(a1 + 48), v16);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "_showDebugAlertWithHeader:message:", v25, v26);

    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }

}

void sub_1D14EA7F8(uint64_t a1, int a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  id WeakRetained;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void (*v13)(void);
  NSObject *v14;
  uint64_t v15;
  uint8_t v16[16];
  uint8_t buf[16];

  v5 = a3;
  v6 = IMOSLoggingEnabled(v5);
  if (a2)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Transfer agent succeeded in deleting public nickname from CloudKit", buf, 2u);
      }

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "_deletePublicNicknameLocationAndKey");

    v9 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v9, "setPersonalNickname:", 0);

    v10 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v10, "_resetHandleSharingList");

    if (*(_BYTE *)(a1 + 48))
    {
      v11 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v11, "sendPersonalNicknameRecordIDAndVersionToAllPeers");

    }
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      v13 = *(void (**)(void))(v12 + 16);
LABEL_16:
      v13();
    }
  }
  else
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Did not succeed in deleting public nickname from CloudKit!", v16, 2u);
      }

    }
    v15 = *(_QWORD *)(a1 + 32);
    if (v15)
    {
      v13 = *(void (**)(void))(v15 + 16);
      goto LABEL_16;
    }
  }

}

void sub_1D14ECA4C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1D14ECA68(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id WeakRetained;
  id v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1D1669588();
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v5;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Finished personal nickname fetch with nickname: %@, updating key store", (uint8_t *)&v11, 0xCu);
      }

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    objc_msgSend(WeakRetained, "_deletePendingNicknameForUpload");

    v10 = objc_loadWeakRetained((id *)(a1 + 72));
    objc_msgSend(v10, "setPersonalNickname:", v5);

    v7 = objc_loadWeakRetained((id *)(a1 + 72));
    -[NSObject _storePublicNickname:nicknameLocation:encryptionKey:wallpaperDataTag:wallpaperLowResDataTag:wallpaperMetadataTag:](v7, "_storePublicNickname:nicknameLocation:encryptionKey:wallpaperDataTag:wallpaperLowResDataTag:wallpaperMetadataTag:", v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }

}

void sub_1D14F02F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFDictionary *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int v25;
  id v26;
  id v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  id v32;
  id v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  void *v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    objc_msgSend(v3, "objectForKey:", CFSTR("NicknameServiceDevices"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(*(id *)(a1 + 32), "_appearsToBePhoneNumber"))
    {
      v5 = IDSCopyIDForPhoneNumber();
    }
    else
    {
      if (!objc_msgSend(*(id *)(a1 + 32), "_appearsToBeEmail"))
      {
        IMLogHandleForCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          sub_1D16696E8(a1 + 32, v8, v9, v10, v11, v12, v13, v14);

        v7 = 0;
        goto LABEL_14;
      }
      v5 = MEMORY[0x1D17E94E0](*(_QWORD *)(a1 + 32));
    }
    v7 = (void *)v5;
LABEL_14:
    v15 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "firstName");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
      CFDictionarySetValue(v15, CFSTR("FirstName"), v16);

    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "lastName");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
      CFDictionarySetValue(v15, CFSTR("LastName"), v17);

    CFDictionarySetValue(v15, CFSTR("MessageType"), CFSTR("NameOnlyUpdate"));
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37E8]), "initWithUnsignedLong:", 1);
    if (v18)
      CFDictionarySetValue(v15, CFSTR("UpdateInfoIncluded"), v18);

    v38[0] = *MEMORY[0x1E0D341C8];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *MEMORY[0x1E0D348E0]);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v38[1] = *MEMORY[0x1E0D34120];
    v39[0] = v19;
    v39[1] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v39, v38, 2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(v20, "mutableCopy");

    if (v7)
      objc_msgSend(v21, "setObject:forKeyedSubscript:", v7, *MEMORY[0x1E0D34178]);
    if (v15 && objc_msgSend(v4, "count"))
    {
      v22 = (void *)MEMORY[0x1E0D39888];
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 168);
      v24 = (void *)objc_msgSend(v21, "copy");
      v32 = 0;
      v33 = 0;
      v25 = objc_msgSend(v22, "service:sendMessage:toDestinations:priority:options:identifier:error:", v23, v15, v4, 300, v24, &v33, &v32);
      v26 = v33;
      v27 = v32;

      if (v27)
        v29 = 0;
      else
        v29 = v25;
      if (v29 == 1)
      {
        if (IMOSLoggingEnabled(v28))
        {
          OSLogHandleForIMFoundationCategory();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v35 = v26;
            v36 = 2112;
            v37 = v4;
            _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "Successfully sent name only to message (%@) to destinations %@", buf, 0x16u);
          }

        }
      }
      else
      {
        IMLogHandleForCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          sub_1D1669614();

      }
    }
    else
    {
      v26 = 0;
    }

    goto LABEL_37;
  }
  if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "devices are nil or empty from IDS so just returning", buf, 2u);
    }

  }
LABEL_37:

}

void sub_1D14F0A04(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  dispatch_time_t v16;
  intptr_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  _QWORD v27[4];
  id v28;
  NSObject *v29;
  _QWORD v30[4];
  id v31;
  NSObject *v32;
  _QWORD v33[2];
  _QWORD v34[2];
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v3 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v4 = dispatch_group_create();
  dispatch_get_global_queue(25, 0);
  v5 = objc_claimAutoreleasedReturnValue();
  dispatch_group_enter(v4);
  v6 = (void *)MEMORY[0x1E0D39880];
  v7 = *(_QWORD *)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = sub_1D14F0DB4;
  v30[3] = &unk_1E922C020;
  v9 = v2;
  v31 = v9;
  v10 = v4;
  v32 = v10;
  v26 = (void *)v5;
  objc_msgSend(v6, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:", v7, CFSTR("com.apple.private.alloy.nameandphoto"), CFSTR("IMDNicknameController"), v5, v30);
  dispatch_group_enter(v10);
  v11 = (void *)MEMORY[0x1E0D39880];
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *MEMORY[0x1E0D34240];
  v27[0] = v8;
  v27[1] = 3221225472;
  v27[2] = sub_1D14F0F78;
  v27[3] = &unk_1E922C020;
  v14 = v3;
  v28 = v14;
  v15 = v10;
  v29 = v15;
  objc_msgSend(v11, "currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:", v12, v13, CFSTR("MessageServiceSession"), v5, v27);
  v16 = dispatch_time(0, 60000000000);
  v17 = dispatch_group_wait(v15, v16);
  if (v17)
  {
    IMLogHandleForCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_1D1669750();

  }
  if (*(_BYTE *)(a1 + 48))
    v17 = objc_msgSend(v14, "minusSet:", v9);
  v19 = IMOSLoggingEnabled(v17);
  if ((_DWORD)v19)
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      v21 = objc_msgSend(v9, "count");
      *(_DWORD *)buf = 134218242;
      v36 = v21;
      v37 = 2112;
      v38 = v9;
      _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Found %lu newServiceURIs: %@", buf, 0x16u);
    }

  }
  if (IMOSLoggingEnabled(v19))
  {
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      v23 = objc_msgSend(v14, "count");
      *(_DWORD *)buf = 134218242;
      v36 = v23;
      v37 = 2112;
      v38 = v14;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Found %lu iMessageServiceURIs: %@", buf, 0x16u);
    }

  }
  v24 = *(_QWORD *)(a1 + 40);
  v33[0] = CFSTR("NicknameServiceDevices");
  v33[1] = CFSTR("iMessageServiceDevices");
  v34[0] = v9;
  v34[1] = v14;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v34, v33, 2);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, void *))(v24 + 16))(v24, v25);

}

void sub_1D14F0D80(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14F0CB4);
  }
  _Unwind_Resume(a1);
}

void sub_1D14F0DB4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id obj;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend(a2, "allValues");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v16 = *(_QWORD *)v22;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v22 != v16)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v5);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v7 = v6;
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v18;
          do
          {
            v11 = 0;
            do
            {
              if (*(_QWORD *)v18 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(a1 + 32);
              objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v11), "destinationURIs");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "allObjects");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "addObjectsFromArray:", v14);

              ++v11;
            }
            while (v9 != v11);
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v9);
        }

        ++v5;
      }
      while (v5 != v4);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D14F0F78(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id obj;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  objc_msgSend(a2, "allValues");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v16 = *(_QWORD *)v22;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v22 != v16)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * v5);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v7 = v6;
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v18;
          do
          {
            v11 = 0;
            do
            {
              if (*(_QWORD *)v18 != v10)
                objc_enumerationMutation(v7);
              v12 = *(void **)(a1 + 32);
              objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v11), "destinationURIs");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "allObjects");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "addObjectsFromArray:", v14);

              ++v11;
            }
            while (v9 != v11);
            v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v9);
        }

        ++v5;
      }
      while (v5 != v4);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D14F1534(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  BOOL v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int v27;
  id v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  _BOOL4 v33;
  void *v34;
  void *v35;
  int v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  uint8_t buf[4];
  _BYTE v54[18];
  _QWORD v55[2];
  _QWORD v56[3];

  v56[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "count"))
  {
    v4 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
    v5 = *(_BYTE *)(a1 + 64) == 0;
    objc_msgSend(v3, "objectForKey:", CFSTR("NicknameServiceDevices"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (!v5)
    {
      v8 = (void *)objc_msgSend(v6, "mutableCopy");

      objc_msgSend(v3, "objectForKey:", CFSTR("iMessageServiceDevices"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "minusSet:", v9);

      v7 = v8;
    }
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v54 = v7;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Will attempt to send to newServiceURIs: %@", buf, 0xCu);
      }

    }
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "existingChatWithGUID:", *(_QWORD *)(a1 + 40));
    v50 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(a1 + 32) || !v50)
    {
      v12 = v4;
    }
    else
    {
      objc_msgSend(v50, "lastAddressedLocalHandle");
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      if (IMOSLoggingEnabled(v13))
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)v54 = v12;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Replaced from handle with: %@", buf, 0xCu);
        }

      }
    }
    if (objc_msgSend(v12, "_appearsToBeEmail"))
      v16 = MEMORY[0x1D17E94E0](v12);
    else
      v16 = IDSCopyIDForPhoneNumber();
    v17 = (void *)v16;
    if (IMOSLoggingEnabled(v16))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v54 = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "From IDS handle: %@", buf, 0xCu);
      }

    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), CFSTR("MessageType"), CFSTR("NicknameTransfer"));
    v55[0] = *MEMORY[0x1E0D341C8];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *MEMORY[0x1E0D348E0]);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v55[1] = *MEMORY[0x1E0D34120];
    v56[0] = v19;
    v56[1] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, v55, 2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = (void *)objc_msgSend(v20, "mutableCopy");

    if (v17)
      v22 = objc_msgSend(v21, "setObject:forKeyedSubscript:", v17, *MEMORY[0x1E0D34178]);
    if (*(_QWORD *)(a1 + 48) && (v22 = objc_msgSend(v7, "count")) != 0)
    {
      v23 = (void *)MEMORY[0x1E0D39888];
      v24 = *(_QWORD *)(a1 + 48);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 168);
      v26 = (void *)objc_msgSend(v21, "copy");
      v51 = 0;
      v52 = 0;
      v27 = objc_msgSend(v23, "service:sendMessage:toDestinations:priority:options:identifier:error:", v25, v24, v7, 300, v26, &v52, &v51);
      v49 = v52;
      v28 = v51;

      if (v28)
        v30 = 0;
      else
        v30 = v27;
      if (v30 != 1)
      {
        IMLogHandleForCategory();
        v40 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          sub_1D1669614();

        goto LABEL_44;
      }
      if (IMOSLoggingEnabled(v29))
      {
        OSLogHandleForIMFoundationCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          *(_QWORD *)v54 = v49;
          *(_WORD *)&v54[8] = 2112;
          *(_QWORD *)&v54[10] = v7;
          _os_log_impl(&dword_1D1413000, v31, OS_LOG_TYPE_INFO, "Successfully sent personal nickname to message (%@) to destinations %@", buf, 0x16u);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled(v22))
      {
        OSLogHandleForIMFoundationCategory();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          v33 = *(_QWORD *)(a1 + 48) != 0;
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v54 = v33;
          *(_WORD *)&v54[4] = 2112;
          *(_QWORD *)&v54[6] = v7;
          _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "Skipping new service nickname send. Have info to send: %i, NewServiceURIs: %@", buf, 0x12u);
        }

      }
      v49 = 0;
    }
    v28 = 0;
LABEL_44:
    objc_msgSend(MEMORY[0x1E0D34E78], "sharedInstanceForBagType:", 0);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "objectForKey:", CFSTR("enable-snap-v2-back-compat"));
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = objc_msgSend(v35, "BOOLValue");

    if (v36 && !*(_BYTE *)(a1 + 65))
    {
      objc_msgSend(v3, "objectForKey:", CFSTR("iMessageServiceDevices"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      +[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v42, "anySessionForServiceName:", *MEMORY[0x1E0D38F68]);
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      v44 = IMOSLoggingEnabled(v43);
      if (v48)
      {
        if (v44)
        {
          OSLogHandleForIMFoundationCategory();
          v45 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v54 = v41;
            _os_log_impl(&dword_1D1413000, v45, OS_LOG_TYPE_INFO, "Sending nickname info to destinations %@", buf, 0xCu);
          }

        }
        if (objc_msgSend(v41, "count"))
        {
          objc_msgSend(v41, "allObjects");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "sendNicknameInfoToURIs:chatGUID:", v46, *(_QWORD *)(a1 + 40));

        }
      }
      else if (v44)
      {
        OSLogHandleForIMFoundationCategory();
        v47 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v47, OS_LOG_TYPE_INFO, "We didn't have a session to send the nickname info over", buf, 2u);
        }

      }
    }
    else if (IMOSLoggingEnabled(v37))
    {
      OSLogHandleForIMFoundationCategory();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        v39 = *(unsigned __int8 *)(a1 + 65);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v54 = v36;
        *(_WORD *)&v54[4] = 1024;
        *(_DWORD *)&v54[6] = v39;
        _os_log_impl(&dword_1D1413000, v38, OS_LOG_TYPE_INFO, "Skipping iMessage nickname send. isEnabled: %i, onlyUseNicknameSendingService: %i", buf, 0xEu);
      }

    }
    goto LABEL_66;
  }
  if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "devices are nil or empty from IDS so just returning", buf, 2u);
    }

  }
LABEL_66:

}

void sub_1D14F27B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v5;
  id v6;
  int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  int v11;
  id v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a4;
  v7 = IMOSLoggingEnabled(v6);
  if (v6)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v6;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Failed to download nickname with error: %@", (uint8_t *)&v11, 0xCu);
      }
LABEL_9:

    }
  }
  else if (v7)
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v5, "firstName");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "lastName");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = 138412546;
      v12 = v9;
      v13 = 2112;
      v14 = v10;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Successfully downloaded and saved nickname for %@ %@.", (uint8_t *)&v11, 0x16u);

    }
    goto LABEL_9;
  }

}

void sub_1D14F2920(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14F28E4);
  }
  _Unwind_Resume(a1);
}

void sub_1D14F3C50(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14F3B58);
  }
  _Unwind_Resume(a1);
}

void sub_1D14F739C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14F72DCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D14F7ADC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D14F79F4);
  }
  _Unwind_Resume(a1);
}

void sub_1D14F9578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D14F95BC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id WeakRetained;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    IMLogHandleForCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_1D1669BA8();

  }
  if (v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "setPersonalNickname:", v5);

  }
}

void sub_1D14FE0E8(uint64_t a1, int a2)
{
  NSObject *v4;
  const __CFString *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v5 = CFSTR("NO");
      v6 = *(_QWORD *)(a1 + 32);
      if (a2)
        v5 = CFSTR("YES");
      v10 = 138412546;
      v11 = v6;
      v12 = 2112;
      v13 = v5;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Resolved inconsistent GUID to %@ with success: %@", (uint8_t *)&v10, 0x16u);
    }

  }
  if (a2)
  {
    v8 = *(void **)(a1 + 40);
    v7 = (_QWORD *)(a1 + 40);
    objc_msgSend(v8, "setGuid:", *(v7 - 1));
    +[IMDChatStore sharedInstance](IMDChatStore, "sharedInstance");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "storeChat:", *v7);

  }
}

void sub_1D14FEB50()
{
  IMDMessageStore *v0;
  void *v1;

  v0 = objc_alloc_init(IMDMessageStore);
  v1 = (void *)qword_1ED935DE0;
  qword_1ED935DE0 = (uint64_t)v0;

}

uint64_t sub_1D14FEED8(uint64_t a1)
{
  NSObject *v1;
  uint8_t v3[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Registering for the DB reconnect notification.", v3, 2u);
    }

  }
  return IMDRegisterReconnectBlockWithIdentifier();
}

void sub_1D14FEF78()
{
  void *v0;
  int v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  dispatch_time_t v6;
  uint8_t v7[16];

  objc_msgSend(MEMORY[0x1E0D36A50], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isInternalInstall");

  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0D36B00], "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:", CFSTR("com.apple.csdbpersistence-mandatory-db-reconnect"), CFSTR("Messages DB Error"), CFSTR("INTERNAL: A serious issue has been encountered while migrating your Messages database.  Logs files have been written detailing the problem, please sync them off of your device as soon as possible and file a radar."), CFSTR("OK"), 0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D36B08], "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addUserNotification:listener:", v3, 0);

    if (qword_1EFC63DA0 != -1)
      dispatch_once(&qword_1EFC63DA0, &unk_1E922C180);
    off_1EFC63D98(0, CFSTR("imd-reconnection-log-dump"), 12);

  }
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Got a mandatory DB reconnect notification, I will now exit.", v7, 2u);
    }

  }
  v6 = dispatch_time(0, 2000000000);
  dispatch_after(v6, MEMORY[0x1E0C80D38], &unk_1E922C1A0);
}

void *sub_1D14FF0F4()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("MarcoAction", CFSTR("Marco"));
  off_1EFC63D98 = result;
  return result;
}

void sub_1D14FF120()
{
  exit(1);
}

uint64_t sub_1D14FF130(uint64_t a1)
{
  NSObject *v1;
  uint8_t v3[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "  => Posting database full", v3, 2u);
    }

  }
  return +[IMDMessageStore databaseFull](IMDMessageStore, "databaseFull");
}

uint64_t sub_1D14FF304(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "rebuildUnreadMessageCount");
}

uint64_t IMDCreateIMMessageItemFromIMDMessageRecordRef(uint64_t a1, void *a2)
{
  return IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(a1, a2);
}

void sub_1D14FFFAC(int a1, int a2)
{
  CFPropertyListRef *v4;
  const __CFString *v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = sub_1D150F598;
  v10 = &unk_1E922C468;
  v11 = &v13;
  LOBYTE(v12) = a2;
  if (qword_1ED935FF8 != -1)
    dispatch_once(&qword_1ED935FF8, &v7);
  if (a1 != a2 || *((_BYTE *)v14 + 24))
  {
    if (qword_1ED935FF0)
    {
      v4 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
      if (!a2)
        v4 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
      v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
      CFPreferencesSetValue((CFStringRef)qword_1ED935FF0, *v4, CFSTR("com.apple.MobileSMS"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
      CFPreferencesSynchronize(CFSTR("com.apple.MobileSMS"), CFSTR("mobile"), v5);
    }
    if (qword_1ED935FE8)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, (CFNotificationName)qword_1ED935FE8, 0, 0, 0);
    }
    if (a2)
      +[IMDMessageStore databaseFull](IMDMessageStore, "databaseFull", v7, v8, v9, v10, v11, v12, v13);
    else
      +[IMDMessageStore databaseNoLongerFull](IMDMessageStore, "databaseNoLongerFull", v7, v8, v9, v10, v11, v12, v13);
  }
  _Block_object_dispose(&v13, 8);
}

void sub_1D1500104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D150055C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1500514);
  }
  _Unwind_Resume(a1);
}

uint64_t IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup();
  v5 = (void *)MEMORY[0x1D17EA968]();
  if (IMOSLoggingEnabled())
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v8 = 138412546;
      v9 = v4;
      v10 = 2112;
      v11 = a1;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Built IMItem: %@    from IMDMessageRecordRef: %@", (uint8_t *)&v8, 0x16u);
    }

  }
  objc_autoreleasePoolPop(v5);

  return v4;
}

void sub_1D150360C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *AttachmentIfNeededRef;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7), 0);
        if (AttachmentIfNeededRef)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            objc_msgSend(*(id *)(a1 + 32), "addObject:", AttachmentIfNeededRef);
        }

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

uint64_t sub_1D1504488(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "internalName");
}

void sub_1D1505B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1505B84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1505B94(uint64_t a1)
{

}

void sub_1D1505B9C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *AttachmentIfNeededRef;
  id v7;

  v7 = a2;
  objc_msgSend(v7, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = v7;
  if (v3)
  {
    objc_msgSend(v7, "firstObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef((uint64_t)v5, 0);

    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), AttachmentIfNeededRef);

    v4 = v7;
  }

}

void sub_1D1505E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1505EA0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  void *AttachmentIfNeededRef;
  NSObject *v13;
  const __CFString *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  const __CFString *v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = v3;
  objc_msgSend(v3, "reverseObjectEnumerator");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v18 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * i);
        if (!objc_msgSend(v11, "itemType"))
        {
          AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef((uint64_t)v11, 0);
          if (AttachmentIfNeededRef)
          {
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", AttachmentIfNeededRef);
          }
          else if (IMOSLoggingEnabled(0))
          {
            OSLogHandleForIMFoundationCategory();
            v13 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              if (v11)
                v14 = CFSTR("non-nil");
              else
                v14 = CFSTR("nil");
              if (v11)
                v15 = objc_msgSend(v11, "itemType");
              else
                v15 = 0;
              *(_DWORD *)buf = 138412546;
              v22 = v14;
              v23 = 2048;
              v24 = v15;
              _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Could not fetch IMMessageItem from IMDMessageRecord with item (%@) and type %lld", buf, 0x16u);
            }

          }
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    }
    while (v8);
  }

}

void sub_1D1506728(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(a2, "reverseObjectEnumerator", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
        if (!objc_msgSend(v8, "itemType"))
        {
          objc_msgSend(v8, "associatedMessageGUID");
          v9 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v9)
          {
            objc_msgSend(v8, "guid");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "date");
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = objc_msgSend(v8, "partCount");
            if (v10)
              v13 = v11 == 0;
            else
              v13 = 1;
            if (!v13)
            {
              v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D39910]), "initWithGUID:date:messagePartCount:", v10, v11, v12);
              objc_msgSend(*(id *)(a1 + 32), "addObject:", v14);

            }
          }
        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v5);
  }

}

void sub_1D1506AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1506B18(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(a2, "reverseObjectEnumerator", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "date");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (v8)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          if (*(_QWORD *)(v10 + 40))
          {
            if (objc_msgSend(v8, "compare:") != -1)
              goto LABEL_11;
            v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          }
          objc_storeStrong((id *)(v10 + 40), v9);
        }
LABEL_11:

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

}

void sub_1D1506D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1506D40(uint64_t a1, uint64_t a2)
{
  id obj;

  if (a2)
  {
    obj = (id)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(a2, 0);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && !objc_msgSend(obj, "type"))
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);

  }
}

void sub_1D1506F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1506F9C(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *AttachmentIfNeededRef;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  void *v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v2 = a2;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v7, "itemType") == 6)
        {
          AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef((uint64_t)v7, 0);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(AttachmentIfNeededRef, "type") == 6)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v11 = *(void **)(v10 + 40);
            *(_QWORD *)(v10 + 40) = AttachmentIfNeededRef;

            goto LABEL_16;
          }
          IMLogHandleForCategory();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v18 = v7;
            v19 = 2112;
            v20 = AttachmentIfNeededRef;
            _os_log_error_impl(&dword_1D1413000, v9, OS_LOG_TYPE_ERROR, "Record of itemType TUConversation did not recover as IMTUConversationItem record: %@ recovered as: %@", buf, 0x16u);
          }

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_16:

}

void sub_1D15077DC()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v1 = (void *)qword_1ED935FD8;
  qword_1ED935FD8 = (uint64_t)v0;

}

uint64_t sub_1D15097DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int IsFull;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _BOOL4 v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[128];
  uint8_t buf[4];
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1D17EA968]();
  v3 = *(_QWORD *)(a1 + 88);
  if ((unint64_t)(*(_QWORD *)(a1 + 80) - v3) >= 0x3E8)
    LODWORD(v4) = 1000;
  else
    v4 = *(_QWORD *)(a1 + 80) - v3;
  objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 40);
      v9 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 67109890;
      v26 = v7;
      v27 = 2112;
      v28 = v8;
      v29 = 2112;
      v30 = v9;
      v31 = 1024;
      v32 = v4;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Deleting batch %d of messages for chatIdentifiers %@ onServices %@. %d messages will be deleted.", buf, 0x22u);
    }

  }
  IsFull = IMDSMSRecordIsFull();
  objc_msgSend(MEMORY[0x1E0D39890], "sharedInstance");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "deleteInteractionsWithMessageGUIDs:", v5);

  IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices();
  +[IMDBroadcastController sharedProvider](IMDBroadcastController, "sharedProvider");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "broadcasterForChatListeners");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "historicalMessageGUIDsDeleted:chatGUIDs:queryID:", v5, *(_QWORD *)(a1 + 56), 0);

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v14 = v5;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v21 != v16)
          objc_enumerationMutation(v14);
        +[IMDMessageStore _updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:](IMDMessageStore, "_updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i), 0, 0, 1, 1, (_QWORD)v20);
      }
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v15);
  }

  v18 = IMDSMSRecordIsFull() != 0;
  objc_msgSend(*(id *)(a1 + 64), "updateStamp");
  sub_1D14FFFAC(IsFull != 0, v18);

  objc_autoreleasePoolPop(v2);
  return objc_msgSend(*(id *)(a1 + 64), "_deleteMessagesWithGUIDs:chatIdentifiers:style:onServices:batchNumber:completion:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 104), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 96) + 1, *(_QWORD *)(a1 + 72));
}

void sub_1D1509F48(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D027B8], "readMessageStream");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "source");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D02700]), "initMarkUnreadWithIDSHandle:", *(_QWORD *)(a1 + 32));
  if (IMOSLoggingEnabled(objc_msgSend(v3, "sendEvent:", v4)))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = 138412290;
      v8 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Donating Unread Message Event to Stream for %@.", (uint8_t *)&v7, 0xCu);
    }

  }
}

uint64_t sub_1D150AD3C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ID");
}

void sub_1D150B0AC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D150B060);
  }
  _Unwind_Resume(a1);
}

void sub_1D150B304(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint8_t v6[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Scheduling a suppress DB invalidation timer", v6, 2u);
    }

  }
  objc_msgSend(MEMORY[0x1E0C99E88], "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), sel__suppressDBUpdateTimerFired, 0, 0, 60.0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1D150C828(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if (objc_msgSend(v3, "length"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);

}

void sub_1D150D8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "addEditHistoryToMessage:editedPartIndex:editType:previousMessage:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1D150DB4C(uint64_t a1, void *a2)
{
  void *v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  NSObject *v11;
  id WeakRetained;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t v18[128];
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  void *v22;
  __int16 v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("p:%ld/%@"), a2, *(_QWORD *)(a1 + 32));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(WeakRetained, "messagesWithAssociatedGUID:shouldLoadAttachments:", v13, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218498;
      v20 = objc_msgSend(v4, "count");
      v21 = 2048;
      v22 = a2;
      v23 = 2112;
      v24 = v13;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Found %ld associated message items for retracted message part %ld in edited message %@", buf, 0x20u);
    }

  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = v4;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v6);
        objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "guid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled(v10))
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v20 = (uint64_t)v10;
            v21 = 2112;
            v22 = v13;
            _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Associated message item %@ refers to messagePartGUID %@ that was retracted. Deleting the associated message item.", buf, 0x16u);
          }

        }
        objc_msgSend(*(id *)(a1 + 40), "addObject:", v10);

      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v7);
  }

}

BOOL sub_1D150E640(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "associatedMessageType") == 2;
}

uint64_t sub_1D150E660(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a2, "balloonBundleID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "balloonBundleID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

id sub_1D150F444(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (v6)
  {
    +[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "accountForAccountID:", v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (v7 && v8)
    {
      +[IMDServiceController sharedController](IMDServiceController, "sharedController");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "serviceWithName:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      +[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "accountsForLoginID:onService:", v7, v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!v8)
      {
        v11 = 0;
        goto LABEL_10;
      }
      +[IMDServiceController sharedController](IMDServiceController, "sharedController");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "serviceWithName:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      +[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "accountsForService:", v10);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v16 = v14;
    objc_msgSend(v14, "lastObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
LABEL_10:

  return v11;
}

void sub_1D150F598(uint64_t a1)
{
  void **v2;
  void *v3;
  const __CFString *v4;
  void **v5;
  void *v6;
  const __CFBoolean *v7;
  const __CFBoolean *v8;
  CFTypeID v9;
  int v10;

  if (!qword_1ED935FE8)
  {
    v2 = (void **)MEMORY[0x1D17EA3F8]("kCTMessageDatabaseFullNotification", CFSTR("CoreTelephony"));
    if (v2)
      v3 = *v2;
    else
      v3 = 0;
    objc_storeStrong((id *)&qword_1ED935FE8, v3);
  }
  v4 = (const __CFString *)qword_1ED935FF0;
  if (qword_1ED935FF0
    || ((v5 = (void **)MEMORY[0x1D17EA3F8]("kCTMessageDatabaseFullPreference", CFSTR("CoreTelephony"))) == 0
      ? (v6 = 0)
      : (v6 = *v5),
        objc_storeStrong((id *)&qword_1ED935FF0, v6),
        (v4 = (const __CFString *)qword_1ED935FF0) != 0))
  {
    v7 = (const __CFBoolean *)CFPreferencesCopyValue(v4, CFSTR("com.apple.MobileSMS"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
    if (v7)
    {
      v8 = v7;
      v9 = CFGetTypeID(v7);
      v10 = v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) != 0;
      CFRelease(v8);
    }
    else
    {
      v10 = 0;
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10 != *(unsigned __int8 *)(a1 + 40);
  }
}

void sub_1D150F6FC()
{
  IMDPhotosSyndicationLibraryChangeListener *v0;
  void *v1;

  v0 = objc_alloc_init(IMDPhotosSyndicationLibraryChangeListener);
  v1 = (void *)qword_1ED935DE8;
  qword_1ED935DE8 = (uint64_t)v0;

}

void sub_1D150FBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_1D150FD98(uint64_t a1)
{
  void *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  void *v15;
  uint8_t buf[4];
  char *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "analysisFetchOptions");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD1390], "fetchAssetsWithOptions:", v15);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count"))
  {
    v3 = 0;
    while (1)
    {
      objc_msgSend(v2, "objectAtIndexedSubscript:", v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 40), "changeDetailsForObject:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
        break;
LABEL_18:

      if ((unint64_t)++v3 >= objc_msgSend(v2, "count"))
        goto LABEL_19;
    }
    objc_msgSend(v4, "curationProperties");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "syndicationIdentifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v8))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218242;
        v17 = v3;
        v18 = 2112;
        v19 = v7;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Asset at index %lu had changes! syndicationIdentifier: %@", buf, 0x16u);
      }

    }
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "transferForGUID:", v7);
    v11 = (char *)objc_claimAutoreleasedReturnValue();

    v13 = IMOSLoggingEnabled(v12);
    if (v11)
    {
      if (v13)
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v17 = v11;
          v18 = 2112;
          v19 = v4;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Ingesting new analysis data. transfer %@, asset: %@", buf, 0x16u);
        }
LABEL_16:

      }
    }
    else if (v13)
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v17 = (char *)v7;
        v18 = 2112;
        v19 = v4;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "A syndication library change was received for a particular asset, but a corresponding file transfer was not found using the asset's syndicationIdentifier. syndicationIdentifier: %@, asset: %@", buf, 0x16u);
      }
      goto LABEL_16;
    }

    goto LABEL_18;
  }
LABEL_19:

}

void sub_1D1510164(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  uid_t v5;
  const void *Value;
  char *pw_dir;
  passwd *v8;
  CFStringRef v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[16];

  v3 = (void *)MEMORY[0x1D17EA968]();
  v4 = a2;
  pthread_mutex_lock(&stru_1EFC60D50);
  v5 = geteuid();
  if (!v5)
    v5 = getuid();
  if (qword_1EFC63DC0)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EFC63DC0, (const void *)v5);
    if (Value)
      goto LABEL_13;
  }
  else
  {
    qword_1EFC63DC0 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
  }
  pw_dir = getenv("IPHONE_SHARED_RESOURCES_DIRECTORY");
  if (pw_dir || (v8 = getpwuid(v5)) != 0 && (pw_dir = v8->pw_dir) != 0)
  {
    Value = CFStringCreateWithFileSystemRepresentation(0, pw_dir);
    if (Value)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1EFC63DC0, (const void *)v5, Value);
      CFRelease(Value);
    }
  }
  else
  {
    Value = 0;
  }
LABEL_13:
  pthread_mutex_unlock(&stru_1EFC60D50);
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("%@/Library/Preferences/%@"), Value, CFSTR("com.apple.MobileSMS"));
  CFRelease(v9);
  if (IMOSLoggingEnabled(v10))
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Refresh: User setting for MMS changed", buf, 2u);
    }

  }
  objc_msgSend(v4, "updateMMSCapability");

  objc_autoreleasePoolPop(v3);
}

void sub_1D1510308(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  v3 = (void *)MEMORY[0x1D17EA968]();
  v4 = a2;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Refresh: CT MMS info changed", v6, 2u);
    }

  }
  objc_msgSend(v4, "updateMMSCapability");

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_1D1510E54()
{
  return notify_register_check("com.apple.MobileSMS.MMSCapable", &dword_1EFC63DB0);
}

id _IMDHashParticipants(void *a1, void *a2)
{
  id v3;
  void *v4;
  __CFArray *v5;
  uint64_t v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = a2;
  objc_msgSend(a1, "arrayByApplyingSelector:", sel_ID);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (__CFArray *)objc_msgSend(v4, "mutableCopy");

  if (!objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
    v6 = objc_claimAutoreleasedReturnValue();

    v3 = (id)v6;
  }
  if (v5)
    v7 = v3 == 0;
  else
    v7 = 1;
  if (!v7)
    CFArrayAppendValue(v5, v3);
  -[__CFArray sortUsingSelector:](v5, "sortUsingSelector:", sel_caseInsensitiveCompare_);
  -[__CFArray componentsJoinedByString:](v5, "componentsJoinedByString:", CFSTR(","));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "dataUsingEncoding:", 4);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "SHA1HexString");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

void sub_1D1514F2C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1514EF8);
  }
  _Unwind_Resume(a1);
}

void sub_1D1515E08(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1515D38);
  }
  _Unwind_Resume(a1);
}

void sub_1D1516538(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15163D0);
  }
  _Unwind_Resume(a1);
}

id SMSCopySanitizedContentLocation(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("cid:")))
  {
    v2 = (id)objc_msgSend(v1, "mutableCopy");
    objc_msgSend(v2, "replaceOccurrencesOfString:withString:options:range:", CFSTR("cid:"), &stru_1E92346B0, 2, 0, objc_msgSend(CFSTR("cid:"), "length"));
  }
  else
  {
    v2 = v1;
  }

  return v2;
}

void *SMSCopySanitizedContentID(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  if (objc_msgSend(v1, "hasPrefix:", CFSTR("<")))
    objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", CFSTR("<"), &stru_1E92346B0, 2, 0, 1);
  if (objc_msgSend(v1, "hasSuffix:", CFSTR(">")))
    objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", CFSTR(">"), &stru_1E92346B0, 2, objc_msgSend(v1, "length") - 1, 1);
  return v1;
}

void sub_1D151B138()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.Messages", "IMBalloonPluginPipelineParameter");
  v1 = (void *)qword_1ED935FA0;
  qword_1ED935FA0 = (uint64_t)v0;

}

void sub_1D151B814()
{
  IMDCKRecordSaltManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKRecordSaltManager);
  v1 = (void *)qword_1ED935DF0;
  qword_1ED935DF0 = (uint64_t)v0;

}

void sub_1D151BA5C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[4];
  _QWORD v14[2];
  id v15;
  _QWORD block[4];
  id v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v6)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1D151BC40;
    v13[3] = &unk_1E92290F8;
    v10 = v5;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    v14[0] = v10;
    v14[1] = v11;
    v15 = v12;
    dispatch_async(MEMORY[0x1E0C80D38], v13);

    v9 = (id *)v14;
    goto LABEL_9;
  }
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "*** Error fetching user ID %@", buf, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "setCachedSalt:", 0);
  if (*(_QWORD *)(a1 + 40))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D151BC2C;
    block[3] = &unk_1E92290A8;
    v18 = *(id *)(a1 + 40);
    v17 = v7;
    dispatch_async(MEMORY[0x1E0C80D38], block);

    v9 = &v18;
LABEL_9:

  }
}

uint64_t sub_1D151BC2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_1D151BC40(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "recordName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "length"))
  {
    if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 40), "setCachedSalt:", v2)))
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "cachedSalt");
        v4 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = 138412290;
        v10 = v4;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Cached salt : %@", (uint8_t *)&v9, 0xCu);

      }
    }
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(v5, 1, 0);
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "** Fetched salt was 0 length **", (uint8_t *)&v9, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "setCachedSalt:", 0);
    v7 = *(_QWORD *)(a1 + 48);
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("IMDCKRecordSaltManager"), 1, 0);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);

    }
  }

}

void sub_1D151C0AC(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = objc_alloc(MEMORY[0x1E0CB35C8]);
    if (*(_BYTE *)(a1 + 40))
      v4 = 5;
    else
      v4 = 6;
    v5 = (id)objc_msgSend(v3, "initWithDomain:code:userInfo:", *MEMORY[0x1E0D37CD0], v4, 0);
    (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v5);

  }
}

void sub_1D151C134(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1D151C1A4;
  v2[3] = &unk_1E92284E8;
  v1 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v1;
  objc_msgSend(v3, "_fetchLatestSaltFromCloudKitAndPersistWithCompletion:", v2);

}

void sub_1D151C1A4(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  char v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "cachedSalt");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v15 = v7;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Fetched salt %@, error %@", buf, 0x16u);

    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D151C31C;
  block[3] = &unk_1E9229CB0;
  v8 = *(id *)(a1 + 40);
  v13 = a2;
  v11 = v5;
  v12 = v8;
  v9 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

uint64_t sub_1D151C31C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_1D151C3C8(void *a1, int a2)
{
  int v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  _BOOL4 v15;
  void *v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const __CFString *v21;
  const void *v22;
  void *v23;
  NSObject *v24;
  uint64_t Identifier;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  int v32;
  void *v33;
  int v34;
  void *v35;
  int v36;
  void *v37;
  int v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  int v44;
  void *v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  void *v51;
  int v52;
  int v53;
  int v54;
  void *v55;
  int v56;
  int v57;
  int v58;
  id v59;
  id v60;
  int v61;
  NSObject *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  void *v81;
  const void *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  int v87;
  uint64_t v88;
  uint64_t j;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  CFTypeRef *v94;
  CFTypeRef *v95;
  CFTypeRef *v96;
  CFTypeRef *v97;
  CFTypeRef *v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  CFTypeRef *v102;
  CFTypeRef *v103;
  uint64_t *v104;
  CFTypeRef *v105;
  uint64_t *v106;
  CFTypeRef *v107;
  CFTypeRef *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  CFTypeRef *v125;
  id v126;
  void *v128;
  CFTypeRef *v129;
  void *v130;
  CFTypeRef *v131;
  CFTypeRef *v132;
  CFTypeRef *v133;
  CFTypeRef *v134;
  CFTypeRef *v135;
  CFTypeRef *v136;
  void *v137;
  CFTypeRef *v138;
  void *v139;
  CFTypeRef *v140;
  void *v141;
  void *v142;
  int v143;
  uint64_t v144;
  id obj;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  CFTypeRef v155;
  CFTypeRef v156;
  uint64_t v157;
  CFTypeRef v158;
  uint64_t v159;
  CFTypeRef v160;
  CFTypeRef v161;
  id v162;
  CFTypeRef v163;
  CFTypeRef v164;
  CFTypeRef v165;
  CFTypeRef v166;
  CFTypeRef v167;
  CFTypeRef v168;
  CFTypeRef v169;
  CFTypeRef cf;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  _BYTE v177[128];
  uint64_t v178;
  const __CFString *v179;
  uint64_t v180;
  const __CFString *v181;
  uint64_t v182;
  const __CFString *v183;
  uint64_t v184;
  const __CFString *v185;
  _BYTE buf[12];
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  void *v192;
  __int16 v193;
  CFTypeRef *v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = objc_msgSend(a1, "style");
    v123 = objc_msgSend(a1, "state");
    v137 = (void *)objc_msgSend((id)objc_msgSend(a1, "accountID"), "copy");
    v142 = (void *)objc_msgSend((id)objc_msgSend(a1, "properties"), "copy");
    v141 = (void *)objc_msgSend((id)objc_msgSend(a1, "chatIdentifier"), "copy");
    v176 = (id)objc_msgSend((id)objc_msgSend(a1, "serviceName"), "copy");
    v138 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "displayName"), "copy");
    v139 = (void *)objc_msgSend((id)objc_msgSend(a1, "guid"), "copy");
    v140 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "groupID"), "copy");
    v134 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "engramID"), "copy");
    v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "account"), "accountDefaults");
    v136 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0D36F00]), "copy");
    obj = (id)objc_msgSend((id)objc_msgSend(a1, "participants"), "copy");
    v135 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "lastAddressedLocalHandle"), "copy");
    v125 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "lastAddressedSIMID"), "copy");
    v5 = objc_msgSend(a1, "isArchived");
    v121 = objc_msgSend(a1, "isFiltered");
    v6 = objc_msgSend(a1, "isBlackholed");
    v7 = objc_msgSend(a1, "hasHadSuccessfulQuery");
    v133 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "roomName"), "copy");
    v132 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "serverChangeToken"), "copy");
    v120 = objc_msgSend(a1, "cloudKitSyncState");
    v129 = (CFTypeRef *)objc_msgSend(a1, "originalGroupID");
    v119 = objc_msgSend(a1, "lastReadMessageTimeStamp");
    v144 = objc_msgSend(a1, "autoDonationBehavior");
    v8 = objc_msgSend(a1, "isRecovered");
    v9 = objc_msgSend(a1, "isDeletingIncomingMessages");
    if (objc_msgSend(a1, "autoDonationBehaviorLastModificationDate"))
      v118 = objc_msgSend((id)objc_msgSend(a1, "autoDonationBehaviorLastModificationDate"), "__im_nanosecondTimeInterval");
    else
      v118 = 0;
    if (v144)
    {
      if (!objc_msgSend(a1, "autoDonationBehaviorLastModificationDate"))
      {
        v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1D166A93C(v11);
      }
    }
    v131 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "cloudKitRecordID"), "copy");
    if (objc_msgSend(v142, "count"))
      v126 = (id)objc_msgSend((id)JWEncodeDictionary(), "copy");
    else
      v126 = objc_alloc_init(MEMORY[0x1E0C99D50]);
    v146 = IMDChatRecordCopyChatForGUID();
    v143 = v3;
    v122 = v5;
    v116 = v6;
    v117 = v7;
    v114 = v9;
    v115 = v8;
    if (!v146)
    {
      if (objc_msgSend(a1, "rowID") == -1)
        goto LABEL_38;
      objc_msgSend(a1, "rowID");
      v146 = IMDChatRecordCopyChatRecord();
      if (IMOSLoggingEnabled(v146))
      {
        v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = objc_msgSend(a1, "guid");
          v20 = objc_msgSend(a1, "rowID");
          v21 = CFSTR("YES");
          *(_DWORD *)buf = 138412802;
          *(_QWORD *)&buf[4] = v19;
          if (!v146)
            v21 = CFSTR("NO");
          v187 = 2048;
          v188 = v20;
          v189 = 2112;
          v190 = (uint64_t)v21;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Failed to find chat by guid %@, tried rowid %lld instead, found? %@", buf, 0x20u);
        }
      }
      if (!v146)
      {
LABEL_38:
        v22 = (const void *)IMDChatRecordCopyNewestChatForGroupIDOnService();
        if (v22)
        {
          v23 = (void *)IMDChatRecordCopyDisplayName();
          if (IMOSLoggingEnabled(v23))
          {
            v24 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              Identifier = IMDChatRecordGetIdentifier();
              *(_DWORD *)buf = 138413314;
              *(_QWORD *)&buf[4] = v140;
              v187 = 2112;
              v188 = (uint64_t)v176;
              v189 = 2048;
              v190 = Identifier;
              v191 = 2112;
              v192 = v23;
              v193 = 2112;
              v194 = v138;
              _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Found chat fork with same groupID (%@) and service (%@) at rowID: %lld, existing display name is (%@) and new display name is (%@)", buf, 0x34u);
            }
          }

          CFRelease(v22);
        }
        if (!objc_msgSend(v176, "length"))
        {
          v26 = (void *)MEMORY[0x1E0CB35C8];
          v184 = *MEMORY[0x1E0CB2938];
          v185 = CFSTR("[IMCreateIMDChat] Chat was missing a service when being inserted into the database.");
          v27 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v185, &v184, 1);
          v28 = objc_msgSend(v26, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D36350], 0, v27);
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:type:context:", CFSTR("Missing chat service name at insert"), v28, CFSTR("MissingChatService"), 0);
          IMComponentsFromChatGUID();
        }
        v112 = (_QWORD *)v115;
        v113 = v9;
        v110 = (uint64_t *)v144;
        v111 = (uint64_t *)v118;
        v108 = v125;
        v109 = v6;
        v106 = (uint64_t *)v119;
        v107 = v131;
        v104 = (uint64_t *)v120;
        v105 = v129;
        v102 = v134;
        v103 = v132;
        v100 = (uint64_t *)v121;
        v101 = v7;
        v98 = v140;
        v99 = (uint64_t *)v122;
        v96 = v135;
        v97 = v136;
        v94 = v133;
        v95 = v138;
        v29 = IMDChatRecordCreate();
        v146 = v29;
        if (!v29)
        {
          v146 = 0;
LABEL_228:

          return v146;
        }
LABEL_174:
        if (IMOSLoggingEnabled(v29))
        {
          v62 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v141;
            v187 = 2112;
            v188 = (uint64_t)obj;
            _os_log_impl(&dword_1D1413000, v62, OS_LOG_TYPE_INFO, "Updating chat %@ with participants: %@", buf, 0x16u);
          }
        }
        if (v143 == 45 && objc_msgSend(obj, "count") != 1)
        {
          v63 = (void *)MEMORY[0x1E0CB35C8];
          v182 = *MEMORY[0x1E0CB2938];
          v183 = CFSTR("1-1 chat has wrong number of participants while storing");
          v64 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v183, &v182, 1);
          v65 = objc_msgSend(v63, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D36350], 0, v64);
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:", CFSTR("Invalid Chat Participants"), v65);
        }
        v128 = (void *)IMDChatRecordCopyGUID();
        v66 = *MEMORY[0x1E0D37848];
        v67 = objc_msgSend((id)objc_msgSend(v142, "objectForKeyedSubscript:", *MEMORY[0x1E0D37848]), "integerValue");
        if (v128)
          v68 = objc_msgSend(v139, "isEqualToString:");
        else
          v68 = 0;
        v124 = (void *)IMCopyGUIDForChat();
        if ((objc_msgSend(a1, "style") == 45 || objc_msgSend(a1, "style") == 43)
          && objc_msgSend(v141, "length", v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107, v108, v109, v110,
               v111,
               v112,
               v113)
          && objc_msgSend(v176, "length")
          && !(objc_msgSend(v139, "isEqualToString:", v124) & 1 | v67 & 1 | v68 & 1))
        {
          v69 = (void *)MEMORY[0x1E0CB35C8];
          v180 = *MEMORY[0x1E0CB2938];
          v181 = CFSTR("[IMCreateIMDChat] Chat GUID did not match chat properties");
          v70 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v181, &v180, 1);
          v71 = objc_msgSend(v69, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D36350], 0, v70);
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:", CFSTR("Invalid Chat GUID"), v71);
        }
        v130 = (void *)IMDChatRecordCopyHandles();
        v72 = (void *)objc_msgSend(v130, "mutableCopy");
        v73 = objc_msgSend(a1, "isStewieChat");
        v74 = objc_msgSend((id)objc_msgSend(v142, "objectForKeyedSubscript:", v66), "integerValue");
        if (!(objc_msgSend(a1, "isBusinessChat") & 1 | (v143 != 45) | v73 & 1u)
          && objc_msgSend(obj, "count") == 1
          && !(+[IMDChat identifier:equalsIdentifier:](IMDChat, "identifier:equalsIdentifier:", v141, objc_msgSend((id)objc_msgSend(obj, "firstObject"), "ID")) | (v74 >> 1) & 1)&& !+[IMDChat identifier:equalsIdentifier:](IMDChat, "identifier:equalsIdentifier:", objc_msgSend((id)objc_msgSend(obj, "firstObject"), "ID"), objc_msgSend((id)objc_msgSend(v130, "firstObject"), "canonicalizedURIString")))
        {
          v75 = (void *)MEMORY[0x1E0CB35C8];
          v178 = *MEMORY[0x1E0CB2938];
          v179 = CFSTR("[IMCreateIMDChat] [v2] Chat identifier for 1-1 chat did not match the participant's handle ID.");
          v76 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v179, &v178, 1);
          v77 = objc_msgSend(v75, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D36350], 0, v76);
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:", CFSTR("Incorrect Chat Participant"), v77);
        }
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v147, v177, 16, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107,
                v108,
                v109,
                v110,
                v111,
                v112,
                v113);
        if (v78)
        {
          v79 = *(_QWORD *)v148;
          do
          {
            for (i = 0; i != v78; ++i)
            {
              if (*(_QWORD *)v148 != v79)
                objc_enumerationMutation(obj);
              v81 = *(void **)(*((_QWORD *)&v147 + 1) + 8 * i);
              objc_msgSend(v81, "ID");
              v82 = (const void *)IMDHandleRecordCopyHandleForIDOnService();
              objc_msgSend(v81, "ID");
              if (v82)
              {
                objc_msgSend(v81, "countryCode");
                objc_msgSend(v81, "unformattedID");
                IMDHandleRecordBulkUpdate();
              }
              else
              {
                IMCountryCodeForIncomingTextMessage();
                objc_msgSend(v81, "unformattedID");
                objc_msgSend(v81, "personCentricID");
                v82 = (const void *)IMDHandleRecordCreate();
              }
              v83 = IMDHandleRecordGetIdentifier();
              v84 = objc_msgSend(v72, "count");
              v85 = v84;
              if (v84 - 1 < 0)
              {
LABEL_206:
                if (IMOSLoggingEnabled(v84))
                {
                  v86 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412546;
                    *(_QWORD *)&buf[4] = v82;
                    v187 = 2112;
                    v188 = (uint64_t)v81;
                    _os_log_impl(&dword_1D1413000, v86, OS_LOG_TYPE_INFO, " Adding handle: %@   (%@)", buf, 0x16u);
                  }
                }
                IMDChatRecordAddHandle();
              }
              else
              {
                while (1)
                {
                  v84 = objc_msgSend(v72, "objectAtIndex:", --v85);
                  if (v84)
                  {
                    v84 = IMDHandleRecordGetIdentifier();
                    if (v84 == v83)
                      break;
                  }
                  if (v85 <= 0)
                    goto LABEL_206;
                }
                objc_msgSend(v72, "removeObjectAtIndex:", v85);
              }
              if (v82)
                CFRelease(v82);
            }
            v78 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v147, v177, 16);
          }
          while (v78);
        }
        v87 = objc_msgSend(v72, "count");
        if (v72 && v87 >= 1)
        {
          v88 = v87;
          for (j = 0; j != v88; ++j)
          {
            v90 = objc_msgSend(v72, "objectAtIndex:", j);
            v91 = v90;
            if (v90)
            {
              if (IMOSLoggingEnabled(v90))
              {
                v92 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v92, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)&buf[4] = v91;
                  _os_log_impl(&dword_1D1413000, v92, OS_LOG_TYPE_INFO, " Removing handle: %@", buf, 0xCu);
                }
              }
              IMDChatRecordRemoveHandle();
            }
          }
        }
        if (v72)
          CFRelease(v72);

        goto LABEL_228;
      }
    }
    *(_QWORD *)buf = 0;
    v175 = 0;
    v174 = 0;
    v173 = 0;
    v172 = 0;
    v171 = 0;
    cf = 0;
    v169 = 0;
    v168 = 0;
    v167 = 0;
    v166 = 0;
    v165 = 0;
    v164 = 0;
    v163 = 0;
    v162 = 0;
    v161 = 0;
    v12 = (void *)objc_msgSend((id)JWDecodeDictionary(), "copy");
    v160 = 0;
    v159 = 0;
    v158 = 0;
    v157 = 0;
    v156 = 0;
    v154 = 0;
    v155 = 0;
    v152 = 0;
    v153 = 0;
    v151 = 0;
    v112 = &v152;
    v113 = (unint64_t)&v151;
    v110 = &v154;
    v111 = &v153;
    v108 = &v155;
    v109 = (unint64_t)&v172;
    v106 = &v157;
    v107 = &v156;
    v104 = &v159;
    v105 = &v158;
    v102 = &v165;
    v103 = &v160;
    v100 = &v173;
    v101 = (unint64_t)&v171;
    v98 = &v166;
    v99 = &v174;
    v96 = &v164;
    v97 = &v168;
    v94 = &v161;
    v95 = &v167;
    _IMDChatRecordBulkCopy();
    v15 = *(_QWORD *)buf != v3 || v175 != v123 || v174 != v5;
    v16 = (void *)cf;
    if (cf == v137)
      goto LABEL_30;
    if (!objc_msgSend((id)cf, "length", &v161, &v167, &v164, &v168, &v166, &v174, &v173, &v171, &v165, &v160, &v159, &v158, &v157, &v156, &v155, &v172, &v154,
            &v153,
            &v152,
            &v151))
    {
      v17 = 1;
      goto LABEL_48;
    }
    if (!objc_msgSend(v137, "length"))
LABEL_30:
      v17 = 0;
    else
      v17 = objc_msgSend(v16, "isEqualToString:", v137) ^ 1;
LABEL_48:
    if (v12 == v142)
      goto LABEL_52;
    if (!objc_msgSend(v12, "count"))
    {
      v30 = 1;
      goto LABEL_54;
    }
    if (!objc_msgSend(v142, "count"))
LABEL_52:
      v30 = 0;
    else
      v30 = objc_msgSend(v12, "isEqualToDictionary:", v142) ^ 1;
LABEL_54:
    v31 = (void *)v168;
    if (v168 == v136)
      goto LABEL_58;
    if (!objc_msgSend((id)v168, "length"))
    {
      v32 = 1;
      goto LABEL_60;
    }
    if (!-[CFTypeRef length](v136, "length"))
LABEL_58:
      v32 = 0;
    else
      v32 = objc_msgSend(v31, "isEqualToString:", v136) ^ 1;
LABEL_60:
    v33 = (void *)v164;
    if (v164 == v135)
      goto LABEL_64;
    if (!objc_msgSend((id)v164, "length"))
    {
      v34 = 1;
      goto LABEL_66;
    }
    if (!-[CFTypeRef length](v135, "length"))
LABEL_64:
      v34 = 0;
    else
      v34 = objc_msgSend(v33, "isEqualToString:", v135) ^ 1;
LABEL_66:
    v35 = (void *)v167;
    if (v167 == v138)
      goto LABEL_70;
    if (!objc_msgSend((id)v167, "length"))
    {
      v36 = 1;
      goto LABEL_72;
    }
    if (!-[CFTypeRef length](v138, "length"))
LABEL_70:
      v36 = 0;
    else
      v36 = objc_msgSend(v35, "isEqualToString:", v138) ^ 1;
LABEL_72:
    v37 = (void *)v163;
    if (v163 == v141)
      goto LABEL_76;
    if (!objc_msgSend((id)v163, "length"))
    {
      v38 = 1;
      goto LABEL_78;
    }
    if (!objc_msgSend(v141, "length"))
LABEL_76:
      v38 = 0;
    else
      v38 = objc_msgSend(v37, "isEqualToString:", v141) ^ 1;
LABEL_78:
    v39 = (void *)v161;
    if (v161 == v133)
      goto LABEL_82;
    if (!objc_msgSend((id)v161, "length"))
    {
      v40 = 1;
      goto LABEL_84;
    }
    if (!-[CFTypeRef length](v133, "length"))
LABEL_82:
      v40 = 0;
    else
      v40 = objc_msgSend(v39, "isEqualToString:", v133) ^ 1;
LABEL_84:
    v41 = v15 | v17 | v30 | v32 | v34 | v36 | v38 | v40;
    if (v173 != v121)
      v41 = 1;
    if (v171 == (_QWORD *)v117)
      v42 = v41;
    else
      v42 = 1;
    v43 = (void *)v166;
    if (v166 == v140)
      goto LABEL_93;
    if (!objc_msgSend((id)v166, "length"))
    {
      v44 = 1;
      goto LABEL_95;
    }
    if (!-[CFTypeRef length](v140, "length"))
LABEL_93:
      v44 = 0;
    else
      v44 = objc_msgSend(v43, "isEqualToString:", v140) ^ 1;
LABEL_95:
    v45 = (void *)v165;
    if (v165 == v134)
      goto LABEL_99;
    if (!objc_msgSend((id)v165, "length"))
    {
      v46 = 1;
      goto LABEL_101;
    }
    if (!-[CFTypeRef length](v134, "length"))
LABEL_99:
      v46 = 0;
    else
      v46 = objc_msgSend(v45, "isEqualToString:", v134) ^ 1;
LABEL_101:
    v47 = (void *)v160;
    if (v160 == v132)
      goto LABEL_105;
    if (!objc_msgSend((id)v160, "length"))
    {
      v48 = 1;
      goto LABEL_107;
    }
    if (!-[CFTypeRef length](v132, "length"))
LABEL_105:
      v48 = 0;
    else
      v48 = objc_msgSend(v47, "isEqualToString:", v132) ^ 1;
LABEL_107:
    v49 = v42 | v44 | v46 | v48;
    if (v159 == v120)
      v50 = v49;
    else
      v50 = 1;
    v51 = (void *)v158;
    if (v158 == v129)
      goto LABEL_114;
    if (!objc_msgSend((id)v158, "length"))
    {
      v52 = 1;
      goto LABEL_116;
    }
    if (!-[CFTypeRef length](v129, "length"))
LABEL_114:
      v52 = 0;
    else
      v52 = objc_msgSend(v51, "isEqualToString:", v129) ^ 1;
LABEL_116:
    v53 = v50 | v52;
    if (v157 == v119)
      v54 = v53;
    else
      v54 = 1;
    v55 = (void *)v156;
    if (v156 == v131)
      goto LABEL_123;
    if (!objc_msgSend((id)v156, "length"))
    {
      v56 = 1;
      goto LABEL_125;
    }
    if (!-[CFTypeRef length](v131, "length"))
LABEL_123:
      v56 = 0;
    else
      v56 = objc_msgSend(v55, "isEqualToString:", v131) ^ 1;
LABEL_125:
    v57 = v54 | v56;
    if (v172 != (_QWORD *)v116)
      v57 = 1;
    if (v153 != v118)
      v57 = 1;
    if (v154 != v144)
      v57 = 1;
    if (v152 != (_QWORD *)v115)
      v57 = 1;
    if (v151 == (_QWORD *)v114)
      v58 = v57;
    else
      v58 = 1;
    if (!a2)
    {
      if ((v58 & 1) == 0)
        goto LABEL_146;
      goto LABEL_145;
    }
    v59 = v162;
    v60 = v176;
    if (v162 == v176)
      goto LABEL_143;
    if (!objc_msgSend(v162, "length"))
      goto LABEL_145;
    if (!objc_msgSend(v60, "length"))
LABEL_143:
      v61 = 0;
    else
      v61 = objc_msgSend(v59, "isEqualToString:", v60) ^ 1;
    if (((v58 | v61) & 1) == 0)
    {
LABEL_146:
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (v12)
        CFRelease(v12);
      if (v169)
      {
        CFRelease(v169);
        v169 = 0;
      }
      if (v168)
      {
        CFRelease(v168);
        v168 = 0;
      }
      if (v164)
      {
        CFRelease(v164);
        v164 = 0;
      }
      if (v167)
      {
        CFRelease(v167);
        v167 = 0;
      }
      if (v166)
      {
        CFRelease(v166);
        v166 = 0;
      }
      if (v165)
      {
        CFRelease(v165);
        v165 = 0;
      }
      if (v163)
      {
        CFRelease(v163);
        v163 = 0;
      }
      if (v161)
      {
        CFRelease(v161);
        v161 = 0;
      }
      if (v160)
      {
        CFRelease(v160);
        v160 = 0;
      }
      if (v158)
      {
        CFRelease(v158);
        v158 = 0;
      }
      if (v156)
      {
        CFRelease(v156);
        v156 = 0;
      }
      v29 = (uint64_t)v155;
      if (v155)
        CFRelease(v155);
      goto LABEL_174;
    }
LABEL_145:
    v112 = (_QWORD *)v115;
    v113 = v114;
    v110 = (uint64_t *)v144;
    v111 = (uint64_t *)v118;
    v108 = v125;
    v109 = v116;
    v106 = (uint64_t *)v119;
    v107 = v131;
    v104 = (uint64_t *)v120;
    v105 = v129;
    v102 = v134;
    v103 = v132;
    v100 = (uint64_t *)v121;
    v101 = v117;
    v98 = v140;
    v99 = (uint64_t *)v122;
    v96 = v135;
    v97 = v136;
    v94 = v133;
    v95 = v138;
    IMDChatRecordBulkUpdate();
    goto LABEL_146;
  }
  if (IMOSLoggingEnabled(0))
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Attempted to create IMDChatRecordRef from NIL IMDChat.", buf, 2u);
    }
  }
  return 0;
}

IMDChat *sub_1D151D854(uint64_t a1)
{
  IMDAccountController *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  IMDHandle *v12;
  uint64_t v13;
  NSObject *v14;
  IMDChat *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Message;
  const void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  IMDChat *v35;
  uint64_t MessageTimeStampOnLoad;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  uint8_t buf[8];

  if (a1)
  {
    v63 = 0;
    *(_QWORD *)buf = 0;
    v61 = 0;
    v62 = 0;
    v59 = 0;
    v60 = 0;
    v57 = 0;
    v58 = 0;
    v55 = 0;
    v56 = 0;
    v53 = 0;
    v54 = 0;
    v51 = 0;
    v52 = 0;
    v49 = 0;
    v50 = 0;
    v47 = 0;
    v48 = 0;
    v46 = 0;
    v44 = 0;
    v45 = 0;
    v42 = 0;
    v43 = 0;
    v40 = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    _IMDChatRecordBulkCopy();
    v1 = +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance", &v58, &v55, &v59, &v62, &v57, &v52, &v51, &v49, &v56, &v47, &v46, &v45, &v44, &v43, &v42, &v50, &v41,
           &v40,
           &v39,
           &v38);
    v2 = -[IMDAccountController accountForAccountID:](v1, "accountForAccountID:", *(_QWORD *)buf);
    if (v2)
    {
      v3 = (void *)v2;

      *(_QWORD *)buf = (id)objc_msgSend(v3, "accountID");
      v62 = (id)objc_msgSend(v3, "loginID");
    }
    v4 = (void *)IMDChatRecordCopyHandles();
    v5 = objc_msgSend(v4, "count");
    v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v5);
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = v5;
      do
      {
        if (objc_msgSend(v4, "objectAtIndex:", v6))
        {
          v8 = (void *)IMDHandleRecordCopyID();
          v9 = (void *)IMDHandleRecordCopyCountry();
          v10 = (void *)IMDHandleRecordCopyUncanonicalizedID();
          v11 = (void *)IMDHandleRecordCopyPersonCentricID();
          v12 = -[IMDHandle initWithID:unformattedID:countryCode:personCentricID:]([IMDHandle alloc], "initWithID:unformattedID:countryCode:personCentricID:", v8, v10, v9, v11);
          objc_msgSend(v37, "addObject:", v12);

        }
        ++v6;
      }
      while (v7 != v6);
    }

    MessageTimeStampOnLoad = IMDChatRecordLastMessageTimeStampOnLoad();
    if (v40)
      v13 = objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v40);
    else
      v13 = 0;
    v35 = [IMDChat alloc];
    v17 = v63;
    v16 = *(id *)buf;
    v18 = v60;
    v19 = objc_msgSend(v57, "uppercaseString");
    v20 = v61;
    v21 = objc_msgSend(v58, "lowercaseString");
    v22 = v55;
    v23 = v59;
    v24 = v42;
    v25 = JWDecodeDictionary();
    BYTE1(v34) = v38 != 0;
    LOBYTE(v34) = v39 != 0;
    LOBYTE(v33) = v50 != 0;
    LOBYTE(v32) = v49 != 0;
    LOBYTE(v31) = v53;
    v15 = -[IMDChat initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:isRecovered:isDeletingIncomingMessages:](v35, "initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:isRecovered:isDeletingIncomingMessages:", v16, v17, v18, v19, v20, v37, v21, v22, v23, v24, v25, v54, v31, v51,
            v32,
            v56,
            v47,
            v46,
            v45,
            v44,
            MessageTimeStampOnLoad,
            v43,
            v33,
            v41,
            v13,
            v34);
    -[IMDChat _setRowID:](v15, "_setRowID:", IMDChatRecordGetIdentifier());
    v26 = IMDChatRecordCachedUnreadCount();
    if ((v26 & 0x8000000000000000) == 0)
      -[IMDChat _setUnreadCount:](v15, "_setUnreadCount:", v26);
    Message = IMDChatRecordCopyCachedLastMessage();
    if (Message)
    {
      v28 = (const void *)Message;
      v29 = (void *)IMDCreateIMMessageItemFromIMDMessageRecordRef(Message, 0);
      if (!objc_msgSend(v29, "type"))
        -[IMDChat setLastMessage:](v15, "setLastMessage:", v29);

      CFRelease(v28);
    }

  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "You passed me a NULL chat record ref. No IMDSavedChat for you!", buf, 2u);
      }
    }
    return 0;
  }
  return v15;
}

void sub_1D151DD28()
{
  IMDChatRegistry *v0;
  void *v1;

  v0 = objc_alloc_init(IMDChatRegistry);
  v1 = (void *)qword_1ED935DF8;
  qword_1ED935DF8 = (uint64_t)v0;

}

uint64_t sub_1D151E1C0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__reloadChatsForDatabaseMergeOrDatabaseSwitch);
}

uint64_t sub_1D151E1C8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Deleted history automatically, re-syncing chats", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_forceReloadChats:", 1);
}

uint64_t sub_1D151E264(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Last addressed handle/simIDs of chats got modified, force reloading chats", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_forceReloadChats:", 1);
}

uint64_t sub_1D151E300(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Looks like we passed first unlock before chat registry was initialized. Doing first-unlock tasks", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_performPostUnlockHousekeeping");
}

void sub_1D151EACC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D151E830);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1D151F3F0(uint64_t a1, uint64_t a2)
{
  void *v2;
  _BOOL8 v3;

  objc_msgSend(*(id *)(a1 + 32), "allExistingChatsWithIdentifier:", a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "count") != 0;

  return v3;
}

uint64_t sub_1D1520FD8(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ID");
}

void sub_1D15213AC()
{
  JUMPOUT(0x1D15213C8);
}

uint64_t sub_1D15213F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1521404(uint64_t a1)
{

}

void sub_1D152140C(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  char v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  int v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = objc_msgSend(v4, "style");
  if ((_DWORD)v5 == 43)
  {
    objc_msgSend(v4, "serviceName");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if ((v7 & 1) != 0)
    {
      v8 = *(void **)(a1 + 40);
      objc_msgSend(v4, "participants");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "_participantIDSetFromHandles:toIdentifier:", v9, *(_QWORD *)(a1 + 48));
      v10 = (void *)objc_claimAutoreleasedReturnValue();

      v11 = objc_msgSend(*(id *)(a1 + 56), "isEqualToSet:", v10);
      if ((_DWORD)v11)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
        {
          v11 = objc_msgSend(v4, "isNewerThan:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40));
          if (!(_DWORD)v11)
            goto LABEL_30;
        }
        if (IMOSLoggingEnabled(v11))
        {
          OSLogHandleForIMFoundationCategory();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            v23 = 138412290;
            v24 = v4;
            _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, " ==> Found exact match based on groupID and participants: %@", (uint8_t *)&v23, 0xCu);
          }

        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
        v13 = a1 + 80;
      }
      else
      {
        v13 = a1 + 80;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
        {
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
            goto LABEL_30;
          v11 = objc_msgSend(v4, "isNewerThan:");
          if (!(_DWORD)v11)
            goto LABEL_30;
        }
        if (IMOSLoggingEnabled(v11))
        {
          OSLogHandleForIMFoundationCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            v23 = 138412290;
            v24 = v4;
            _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, " ==> Found a newer chat based on groupID: %@", (uint8_t *)&v23, 0xCu);
          }

        }
      }
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)v13 + 8) + 40), a2);
LABEL_30:

      goto LABEL_31;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    if (*(_QWORD *)(v15 + 40))
    {
      v16 = objc_msgSend(v4, "isNewerThan:");
      if (!(_DWORD)v16)
      {
        if (!IMOSLoggingEnabled(v16))
          goto LABEL_31;
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v4, "guid");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "serviceName");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138412546;
          v24 = v21;
          v25 = 2112;
          v26 = v22;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, " ==> Ignoring %@, has incorrect service: %@", (uint8_t *)&v23, 0x16u);

        }
LABEL_35:

        goto LABEL_31;
      }
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    }
    objc_storeStrong((id *)(v15 + 40), a2);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v4, "guid");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "serviceName");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138412546;
        v24 = v18;
        v25 = 2112;
        v26 = v19;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, " ==> Fallback %@, has incorrect service: %@", (uint8_t *)&v23, 0x16u);

      }
      goto LABEL_35;
    }
  }
  else if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v23 = 138412290;
      v24 = v4;
      _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, " ==> ERROR sanity check failed: ChatRegistry returned chat that did not match inputs: %@", (uint8_t *)&v23, 0xCu);
    }
    goto LABEL_35;
  }
LABEL_31:

}

uint64_t sub_1D15222BC(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_stripFZIDPrefix");
}

void sub_1D1522870(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1522514);
  }
  _Unwind_Resume(a1);
}

void sub_1D1523A48(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = 138412290;
      v8 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Reporting message: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  IDSReportiMessageSpam();

}

void sub_1D1523D54(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  const __CFString *v14;
  __int128 v15;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  const __CFString *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  id v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v16 = a2;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = a3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v27, 16);
  if (v6)
  {
    v8 = *(_QWORD *)v18;
    *(_QWORD *)&v7 = 138412802;
    v15 = v7;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v18 != v8)
          objc_enumerationMutation(v5);
        v10 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * i);
        v11 = objc_msgSend(*(id *)(a1 + 32), "reportSpamMessage:", v10, v15);
        v12 = v11;
        if (IMOSLoggingEnabled(v11))
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v15;
            v14 = CFSTR("NO");
            if (v12)
              v14 = CFSTR("YES");
            v22 = v14;
            v23 = 2112;
            v24 = v10;
            v25 = 2112;
            v26 = v16;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Was message successfully reported - %@. Dictionary Reported - %@. Receiver URI - %@", buf, 0x20u);
          }

        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v17, v27, 16);
    }
    while (v6);
  }

}

void sub_1D1524230(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "firstObject");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "date");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "setLastMessageTimeStampOnLoad:", objc_msgSend(v4, "__im_nanosecondTimeInterval"));

  }
}

id sub_1D152436C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  id v14;
  int v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  objc_msgSend(v3, "guid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = IMOSLoggingEnabled(v7);
  if (v6)
  {
    v9 = v6;
    if (v8)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v3, "guid");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138412290;
        v17 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Adding cache missed chat but existing chat found with GUID %@, preferring existing chat", (uint8_t *)&v16, 0xCu);

      }
      v9 = v6;
    }
  }
  else
  {
    if (v8)
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v3, "guid");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138412290;
        v17 = v13;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Adding cache missed chat, no existing chat found with GUID %@", (uint8_t *)&v16, 0xCu);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "addChat:firstLoad:store:", v3, 0, 0);
    v9 = v3;
  }
  v14 = v9;

  return v14;
}

void sub_1D1524520(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15244C0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D1524A60(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ID");
}

uint64_t sub_1D152678C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareBySequenceNumberAndDateDescending:");
}

void sub_1D1526E98(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  id v10;
  uint8_t *v11;
  uint8_t buf[8];
  uint8_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v2 + 40) && !*(_BYTE *)(v2 + 42))
  {
    if (IMOSLoggingEnabled(a1))
    {
      OSLogHandleForIMEventCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Setting up observer for loaded notification...", buf, 2u);
      }

    }
    *(_QWORD *)buf = 0;
    v13 = buf;
    v14 = 0x3032000000;
    v15 = sub_1D15213F4;
    v16 = sub_1D1521404;
    v17 = 0;
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1D152704C;
    v9[3] = &unk_1E922C710;
    v6 = *(void **)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v11 = buf;
    v10 = v6;
    objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", CFSTR("__kIMDChatsLoadedNotification"), 0, v5, v9);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)*((_QWORD *)v13 + 5);
    *((_QWORD *)v13 + 5) = v7;

    _Block_object_dispose(buf, 8);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_1D152704C(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  uint8_t v11[16];
  uint8_t v12[16];
  uint8_t buf[16];

  v3 = a2;
  v4 = IMOSLoggingEnabled(v3);
  if ((_DWORD)v4)
  {
    OSLogHandleForIMEventCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Notified that chats were loaded", buf, 2u);
    }

  }
  v6 = *(unsigned __int8 *)(a1[4] + 42);
  v7 = IMOSLoggingEnabled(v4);
  if (v6)
  {
    if (v7)
    {
      OSLogHandleForIMEventCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v12 = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Chats are done loading! Calling completionHandler", v12, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "removeObserver:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));

    (*(void (**)(void))(a1[5] + 16))();
  }
  else if (v7)
  {
    OSLogHandleForIMEventCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Chats aren't done loading, this is likely because of first unlock. Continuing to wait", v11, 2u);
    }

  }
}

void sub_1D15285B8(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;

  if (a2 == 1)
  {
    v5 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)(v4 - 96) = 138412290;
        *(_QWORD *)(v3 + 4) = v5;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Unable to add IMDHandle to _idToHandlesMap due to exception %@ -- nilling idToHandlesMap", (uint8_t *)(v4 - 96), 0xCu);
      }

    }
    objc_msgSend(*(id *)(v2 + 56), "removeAllObjects");

    objc_end_catch();
    JUMPOUT(0x1D152857CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D1528E60(uint64_t a1, int a2, void *a3)
{
  id v4;
  NSObject *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (a2)
        v6 = CFSTR("YES");
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v4;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Done fetching latest salt after unlock, fetched %@ error %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_1D15290D8()
{
  char v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  id v22;
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v17, "isUnderFirstDataProtectionLock") & 1) != 0)
  {

  }
  else
  {
    v0 = IMGetDomainBoolForKey();

    if ((v0 & 1) == 0)
    {
      if (IMOSLoggingEnabled(v1))
      {
        OSLogHandleForIMFoundationCategory();
        v2 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Making all attachments class C", buf, 2u);
        }

      }
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "enumeratorAtPath:", CFSTR("/var/mobile/Library/SMS/Attachments"));
      v4 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v4, "nextObject");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      if (v5)
      {
        v6 = *MEMORY[0x1E0CB2AD8];
        v7 = *MEMORY[0x1E0CB2AC0];
        do
        {
          v8 = (void *)MEMORY[0x1D17EA968]();
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = v6;
          v24[0] = v7;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(CFSTR("/var/mobile/Library/SMS/Attachments"), "stringByAppendingPathComponent:", v5);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = 0;
          v12 = objc_msgSend(v9, "setAttributes:ofItemAtPath:error:", v10, v11, &v18);
          v13 = v18;

          if ((v12 & 1) == 0 && IMOSLoggingEnabled(v14))
          {
            OSLogHandleForIMFoundationCategory();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v20 = v5;
              v21 = 2112;
              v22 = v13;
              _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Failed making file class C: %@ with error %@", buf, 0x16u);
            }

          }
          objc_autoreleasePoolPop(v8);
          objc_msgSend(v4, "nextObject");
          v16 = objc_claimAutoreleasedReturnValue();

          v5 = (void *)v16;
        }
        while (v16);
      }
      IMSetDomainBoolForKey();

    }
  }
}

uint64_t sub_1D1529E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(a1 + 32), "_compareDuplicateChatsWithFirstChat:secondChat:", a2, a3);
}

void sub_1D152B3F8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  __int16 v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "count") < *(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v5, "_ckUniqueID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6);
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        if (IMOSLoggingEnabled(v7))
        {
          OSLogHandleForIMFoundationCategory();
          v9 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            v20 = 138412290;
            v21 = v6;
            _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "We already have a chat to upload for groupID: %@ so we need to compare last message time's", (uint8_t *)&v20, 0xCu);
          }

        }
        v10 = objc_msgSend(v5, "isOlderThan:", v8);
        v11 = v10;
        v12 = IMOSLoggingEnabled(v10);
        if (v11)
        {
          if (v12)
          {
            OSLogHandleForIMFoundationCategory();
            v13 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              -[NSObject guid](v8, "guid");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v5, "guid");
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              v20 = 138412546;
              v21 = v14;
              v22 = 2112;
              v23 = v15;
              _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current GUID: %@ Sibling GUID: %@", (uint8_t *)&v20, 0x16u);

            }
          }
          objc_msgSend(v5, "updateCloudKitSyncState:", 1);
          goto LABEL_25;
        }
        if (v12)
        {
          OSLogHandleForIMFoundationCategory();
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            -[NSObject guid](v8, "guid");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "guid");
            v19 = (void *)objc_claimAutoreleasedReturnValue();
            v20 = 138412546;
            v21 = v18;
            v22 = 2112;
            v23 = v19;
            _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "We are going to replace the current chat: %@ with: %@ so we should mark it as modified so we don't modify it twice", (uint8_t *)&v20, 0x16u);

          }
        }
        -[NSObject updateCloudKitSyncState:](v8, "updateCloudKitSyncState:", 1);
      }
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v5, v6);
    }
    else
    {
      if (!IMOSLoggingEnabled(0))
      {
LABEL_26:

        goto LABEL_27;
      }
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        NSStringFromSelector(*(SEL *)(a1 + 48));
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = 138412546;
        v21 = v16;
        v22 = 2112;
        v23 = v5;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "%@: Chat's _ckUniqueID is nil: %@", (uint8_t *)&v20, 0x16u);

      }
    }
LABEL_25:

    goto LABEL_26;
  }
  *a3 = 1;
LABEL_27:

}

void sub_1D152CFF0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Marking existing chat %@ as needing sync from deferred state ", (uint8_t *)&v4, 0xCu);
    }

  }
  objc_msgSend(v2, "updateCloudKitSyncState:", 0);

}

void sub_1D152E1D0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  NSObject *v5;
  int v6;
  id v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 138412546;
      v7 = v4;
      v8 = 2048;
      v9 = a3;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Found GUID for attachment part, associating with attachment: %@ at part id %lu", (uint8_t *)&v6, 0x16u);
    }

  }
  IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID();

}

uint64_t sub_1D152FB1C()
{
  uint64_t result;

  result = IMSharedHelperContactsBasedMergingEnabled();
  byte_1ED936001 = result;
  return result;
}

void sub_1D153111C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint8_t v11[16];
  uint8_t buf[16];

  v4 = a2;
  v5 = a3;
  v6 = objc_msgSend(v4, "count");
  v7 = IMOSLoggingEnabled(v6);
  if (v6)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Computed chats to merge. Broadcasting to clients", buf, 2u);
      }

    }
    +[IMDBroadcastController sharedProvider](IMDBroadcastController, "sharedProvider");
    v9 = objc_claimAutoreleasedReturnValue();
    -[NSObject broadcasterForChatListeners](v9, "broadcasterForChatListeners");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "chatsNeedRemerging:groupedChats:", v4, v5);

  }
  else
  {
    if (!v7)
      goto LABEL_8;
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "No chats to merge/un-merge. NOT Broadcasting to clients", v11, 2u);
    }
  }

LABEL_8:
}

void sub_1D15312EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;

  v3 = a2;
  objc_msgSend(v3, "objectForKey:", CFSTR("aliasMap"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("historyToken"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "setHistoryToken:", v5);
  v6 = *(void **)(a1 + 32);
  v10 = 0;
  v11 = 0;
  objc_msgSend(v6, "_chatGUIDsThatNeedRemerging:chatDictionaryArray:aliasMap:", &v11, &v10, v4);
  v7 = v11;
  v8 = v10;
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v7, v8);

}

uint64_t sub_1D1531B44(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ID");
}

void sub_1D1532434(uint64_t a1, void *a2)
{
  id v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  void *v21;
  uint64_t v22;
  id obj;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t v49[128];
  uint8_t buf[4];
  void *v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v2, "count"));
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = v2;
  v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
  if (v36)
  {
    v35 = *(_QWORD *)v46;
    v34 = *MEMORY[0x1E0D37778];
    v33 = *MEMORY[0x1E0D37730];
    v32 = *MEMORY[0x1E0D37870];
    v31 = *MEMORY[0x1E0D37780];
    v30 = *MEMORY[0x1E0D37810];
    v29 = *MEMORY[0x1E0D37718];
    v28 = *MEMORY[0x1E0D37878];
    v27 = *MEMORY[0x1E0D377D8];
    v26 = *MEMORY[0x1E0D377E0];
    v25 = *MEMORY[0x1E0D37838];
    do
    {
      for (i = 0; i != v36; ++i)
      {
        if (*(_QWORD *)v46 != v35)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
        objc_msgSend(v4, "objectForKeyedSubscript:", v34);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v33);
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v32);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v31);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v30);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v29);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v28);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "integerValue");

        objc_msgSend(v4, "objectForKeyedSubscript:", v27);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v26);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKeyedSubscript:", v25);
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = (void *)v12;
        if (v5)
        {
          objc_msgSend(v24, "addObject:", v5);
          objc_msgSend(*(id *)(a1 + 32), "_bestServiceSessionForService:accountID:", v39, v7);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "didDeleteChatGUID:chatIdentifier:style:groupID:originalGroupID:properties:lastAddressedLocalHandle:lastAddressedSIMID:", v5, v37, v9, v38, v6, v13, v10, v11);
          objc_msgSend(*(id *)(a1 + 32), "_cachedChatWithGUID:", v5);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15)
            objc_msgSend(*(id *)(a1 + 32), "_evictCachedChat:", v15);

        }
        else
        {
          if (IMOSLoggingEnabled(v12))
          {
            OSLogHandleForIMFoundationCategory();
            v16 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v51 = v4;
              _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Received incomplete deleted chat fragment %@ - skipping", buf, 0xCu);
            }

          }
          objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "forceAutoBugCaptureWithSubType:errorPayload:type:context:", CFSTR("ChatDeletion"), 0, CFSTR("Functional"), CFSTR("Received incomplete deleted chat fragment"));
        }

      }
      v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v52, 16);
    }
    while (v36);
  }

  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v17 = v24;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
  if (v18)
  {
    v19 = *(_QWORD *)v42;
    do
    {
      for (j = 0; j != v18; ++j)
      {
        if (*(_QWORD *)v42 != v19)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(a1 + 32), "_cachedChatWithGUID:", *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * j));
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        if (v21)
          objc_msgSend(*(id *)(a1 + 32), "_evictCachedChat:", v21);

      }
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v41, v49, 16);
    }
    while (v18);
  }

  v22 = *(_QWORD *)(a1 + 40);
  if (v22)
    (*(void (**)(uint64_t, id))(v22 + 16))(v22, v17);

}

void sub_1D1533440()
{
  IMDCKDatabaseManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKDatabaseManager);
  v1 = (void *)qword_1ED935E00;
  qword_1ED935E00 = (uint64_t)v0;

}

uint64_t sub_1D1533CB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D1533CFC(void *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v2);
  objc_msgSend(v2, "finishEncoding");
  objc_msgSend(v2, "encodedData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

void *sub_1D1534B30()
{
  void *result;

  result = (void *)MEMORY[0x1D17EA3F8]("PLLogRegisteredEvent", CFSTR("PowerLog"));
  off_1ED936010 = result;
  return result;
}

void sub_1D1535A88(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1535A00);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D1535ABC(uint64_t a1)
{
  uint64_t result;

  if (objc_msgSend(*(id *)(a1 + 32), "isMemberOfClass:", objc_opt_class()))
    objc_msgSend(*(id *)(a1 + 40), "_handleFetchZoneChangesOperation:", *(_QWORD *)(a1 + 32));
  result = objc_msgSend(*(id *)(a1 + 32), "isMemberOfClass:", objc_opt_class());
  if ((_DWORD)result)
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 40), sel__handleModifyRecordsOperation_);
  return result;
}

void sub_1D153669C()
{
  IMDCKRampManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKRampManager);
  v1 = (void *)qword_1ED935E08;
  qword_1ED935E08 = (uint64_t)v0;

}

void sub_1D1536B68(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD block[4];
  id v14;
  id v15;
  _QWORD v16[4];
  _QWORD v17[2];
  id v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v20 = v5;
      v21 = 2112;
      v22 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Fetch operation records %@ fetchError %@", buf, 0x16u);
    }

  }
  if (!v6)
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1D1536D60;
    v16[3] = &unk_1E92290F8;
    v10 = v5;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    v17[0] = v10;
    v17[1] = v11;
    v18 = v12;
    dispatch_async(MEMORY[0x1E0C80D38], v16);

    v9 = (id *)v17;
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "autoBugCaptureWithSubType:errorPayload:", CFSTR("FetchRampState"), v6);

  if (*(_QWORD *)(a1 + 40))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1536F64;
    block[3] = &unk_1E92290A8;
    v15 = *(id *)(a1 + 40);
    v14 = v6;
    dispatch_async(MEMORY[0x1E0C80D38], block);

    v9 = &v15;
LABEL_9:

  }
}

void sub_1D1536D60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const __CFString *v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  const __CFString *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "_rampUpRecordID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v4, "objectForKey:", CFSTR("FeaturePromoted"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "BOOLValue");

    objc_msgSend(v4, "objectForKey:", CFSTR("RetryAfter"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "integerValue");

    if (IMOSLoggingEnabled(v10))
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = CFSTR("NO");
        if ((_DWORD)v7)
          v12 = CFSTR("YES");
        v15 = 138412546;
        v16 = v12;
        v17 = 2048;
        v18 = v9;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Fetch ramp state - featurePromoted: %@ retryAfter: %ld", (uint8_t *)&v15, 0x16u);
      }

    }
  }
  else
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Couldn't find CKRecord for ramp. Defaulting to not ramped in", (uint8_t *)&v15, 2u);
      }

    }
    v7 = 0;
    v9 = 3600;
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v14 + 16))(v14, v7, v9, 0);

}

uint64_t sub_1D1536F64(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 3600, *(_QWORD *)(a1 + 32));
}

void sub_1D1537418(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "retry timer fired", buf, 2u);
    }

  }
  v5 = *(id *)(a1 + 40);
  im_dispatch_after();

}

uint64_t sub_1D153750C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchLatestRampStateFromCK:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D15376E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

void sub_1D1537700(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  __CFString *v15;
  NSObject *v16;
  NSObject *v17;
  const __CFString *v18;
  const __CFString *v19;
  NSObject *v20;
  _QWORD v21[5];
  id v22;
  uint8_t buf[4];
  const __CFString *v24;
  __int16 v25;
  const __CFString *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a2 || (a3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "retryTimer");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isValid");

    v12 = IMOSLoggingEnabled(v11);
    if (v10)
    {
      if ((_DWORD)v12)
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 32), "retryTimer");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "fireDate");
          v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v24 = v15;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Not fetching from server, next one is firing at %@", buf, 0xCu);

        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        if (IMOSLoggingEnabled(v12))
        {
          OSLogHandleForIMFoundationCategory();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "calling recordFetchedCompletionBlock", buf, 2u);
          }

        }
        goto LABEL_12;
      }
    }
    else
    {
      if ((_DWORD)v12)
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v18 = CFSTR("NO");
          if (a2)
            v19 = CFSTR("YES");
          else
            v19 = CFSTR("NO");
          if (a3)
            v18 = CFSTR("YES");
          *(_DWORD *)buf = 138412546;
          v24 = v19;
          v25 = 2112;
          v26 = v18;
          _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Cached values: featurePromoted(%@) is not YES, or we had a server error last time(%@) so fetching from server", buf, 0x16u);
        }

      }
      objc_msgSend(*(id *)(a1 + 32), "ckQueue");
      v20 = objc_claimAutoreleasedReturnValue();
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_1D1537AB8;
      v21[3] = &unk_1E9229148;
      v21[4] = *(_QWORD *)(a1 + 32);
      v22 = *(id *)(a1 + 40);
      dispatch_async(v20, v21);

    }
  }
  else
  {
    v6 = IMOSLoggingEnabled(a1);
    if ((_DWORD)v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Cached featureAllowed is true, and there wasn't an error fetching state from the server last time. Not fetching again", buf, 2u);
      }

    }
    if (*(_QWORD *)(a1 + 40))
    {
      if (IMOSLoggingEnabled(v6))
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "calling recordFetchedCompletionBlock", buf, 2u);
        }

      }
LABEL_12:
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
  }
}

void sub_1D1537AB8(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = sub_1D1537B28;
  v2[3] = &unk_1E922CB40;
  v1 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v1;
  objc_msgSend(v3, "_fetchLatestRampStateFromCK:", v2);

}

void sub_1D1537B28(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  _QWORD block[5];
  id v23;
  char v24;
  uint8_t buf[16];

  v7 = a4;
  v8 = v7;
  if (!v7)
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Fetched ramp record", buf, 2u);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1537D60;
    block[3] = &unk_1E922C048;
    v15 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v24 = a2;
    v23 = v15;
    dispatch_async(MEMORY[0x1E0C80D38], block);
    v16 = v23;
    goto LABEL_27;
  }
  objc_msgSend(v7, "domain");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E0C947D8]);

  if (v10 && (objc_msgSend(v8, "code") == 7 || objc_msgSend(v8, "code") == 23))
  {
    objc_msgSend(v8, "userInfo");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0C94808]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
      v13 = objc_msgSend(v12, "integerValue");
    else
      v13 = 0;

  }
  else
  {
    v13 = 0;
  }
  if (v13)
    v17 = 1;
  else
    v17 = a3 <= 0;
  if (v17)
    v18 = v13;
  else
    v18 = a3;
  if (v18)
    v19 = v18;
  else
    v19 = 3600;
  objc_msgSend(*(id *)(a1 + 32), "_persistRampFetchServerError:", 1);
  if (v19 < 1)
  {
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1D1537E1C;
    v20[3] = &unk_1E9228700;
    v21 = *(id *)(a1 + 40);
    dispatch_async(MEMORY[0x1E0C80D38], v20);
    v16 = v21;
LABEL_27:

    goto LABEL_28;
  }
  objc_msgSend(*(id *)(a1 + 32), "_performRampCheckWithRetryAfter:recordFetchedCompletionBlock:", *(_QWORD *)(a1 + 40), (double)v19);
LABEL_28:

}

uint64_t sub_1D1537D60(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  uint8_t v4[16];

  result = objc_msgSend(*(id *)(a1 + 32), "_writeRampStatePromoted:hadServerError:", *(unsigned __int8 *)(a1 + 48), 0);
  if (*(_QWORD *)(a1 + 40))
  {
    if (IMOSLoggingEnabled(result))
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "calling recordFetchedCompletionBlock", v4, 2u);
      }

    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  return result;
}

uint64_t sub_1D1537E1C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(result + 16))(result, 0, 1);
  return result;
}

void sub_1D15384CC()
{
  IMDDaemonPropertyManager *v0;
  void *v1;

  v0 = objc_alloc_init(IMDDaemonPropertyManager);
  v1 = (void *)qword_1ED9362C8;
  qword_1ED9362C8 = (uint64_t)v0;

}

void IMDSetInconsistencyHandler(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Setting inconsistency handler", buf, 2u);
    }
  }
  if (qword_1ED936038 != -1)
    dispatch_once(&qword_1ED936038, &unk_1E922CBD0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D1538C24;
  block[3] = &unk_1E922CBB0;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)qword_1ED936020, block);
}

void *sub_1D1538C24(uint64_t a1)
{
  void *result;

  if (qword_1ED936028)
    _Block_release((const void *)qword_1ED936028);
  result = *(void **)(a1 + 32);
  if (result)
    result = _Block_copy(result);
  qword_1ED936028 = (uint64_t)result;
  return result;
}

void IMDNoticedInconsistency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v11;
  NSObject *v12;
  _BOOL8 v13;
  NSObject *v14;
  _QWORD v15[6];
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (qword_1ED936038 != -1)
    dispatch_once(&qword_1ED936038, &unk_1E922CBD0);
  v15[5] = &a9;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", a2, &a9);
  v12 = objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
  v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (v13)
    sub_1D166A9F0((uint64_t)v11, v12);
  if (IMOSLoggingEnabled(v13))
  {
    v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v17 = v11;
      _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
    }
  }

  IMLogBacktrace();
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = sub_1D1538DEC;
  v15[3] = &unk_1E9228690;
  v15[4] = a1;
  dispatch_async((dispatch_queue_t)qword_1ED936020, v15);
}

void sub_1D1538DEC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = sub_1D1538F14(*(_QWORD *)(a1 + 32), 1);
  if (IMOSLoggingEnabled(objc_msgSend(v2, "setCount:", objc_msgSend(v2, "count") + 1)))
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = 138412546;
      v6 = v4;
      v7 = 2048;
      v8 = objc_msgSend(v2, "count");
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Noticed inconsistency at context %@ (count = %llu)", (uint8_t *)&v5, 0x16u);
    }
  }
}

id sub_1D1538F14(uint64_t a1, int a2)
{
  void *v4;
  IMDInconsistency *v5;
  id v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  uint64_t v14;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3052000000;
  v12 = sub_1D15394BC;
  v13 = sub_1D15394CC;
  v14 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D15394D8;
  v8[3] = &unk_1E922CBF8;
  v8[4] = a1;
  v8[5] = &v9;
  objc_msgSend((id)qword_1ED936030, "enumerateObjectsUsingBlock:", v8);
  v4 = (void *)v10[5];
  if (!v4 && a2)
  {
    v5 = objc_alloc_init(IMDInconsistency);
    v10[5] = (uint64_t)v5;
    -[IMDInconsistency setContext:](v5, "setContext:", a1);
    objc_msgSend((id)qword_1ED936030, "addObject:", v10[5]);

    sub_1D15391B8();
    v4 = (void *)v10[5];
  }
  v6 = v4;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1D1539020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IMDInconsistencyResolved(uint64_t a1)
{
  _QWORD block[5];

  if (qword_1ED936038 != -1)
    dispatch_once(&qword_1ED936038, &unk_1E922CBD0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15390C4;
  block[3] = &unk_1E9228690;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)qword_1ED936020, block);
}

void sub_1D15390C4(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = sub_1D1538F14(*(_QWORD *)(a1 + 32), 0);
  if (v2)
  {
    v3 = v2;
    if (IMOSLoggingEnabled(v2))
    {
      v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v5 = *(_QWORD *)(a1 + 32);
        v6 = 138412290;
        v7 = v5;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Resolving inconsistency at context %@", (uint8_t *)&v6, 0xCu);
      }
    }
    objc_msgSend((id)qword_1ED936030, "removeObject:", v3);
    sub_1D15391B8();
  }
}

void sub_1D15391B8()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;
  dispatch_time_t v3;
  uint8_t v4[16];
  uint8_t buf[16];

  if (qword_1EFC63DD0)
  {
LABEL_2:
    if (!objc_msgSend((id)qword_1ED936030, "count"))
    {
      if (IMOSLoggingEnabled(0))
      {
        v0 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v4 = 0;
          _os_log_impl(&dword_1D1413000, v0, OS_LOG_TYPE_INFO, "Disabling timer, all inconsistencies resolved", v4, 2u);
        }
      }
      dispatch_source_set_event_handler((dispatch_source_t)qword_1EFC63DD0, 0);
      dispatch_release((dispatch_object_t)qword_1EFC63DD0);
      qword_1EFC63DD0 = 0;
    }
    return;
  }
  v1 = objc_msgSend((id)qword_1ED936030, "count");
  if (!v1)
  {
    if (!qword_1EFC63DD0)
      return;
    goto LABEL_2;
  }
  if (IMOSLoggingEnabled(v1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Enabling timer, since we have inconsistencies we need to check up on", buf, 2u);
    }
  }
  qword_1EFC63DD0 = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)qword_1ED936020);
  v3 = dispatch_time(0, 0xDF8476000);
  dispatch_source_set_timer((dispatch_source_t)qword_1EFC63DD0, v3, 0xFFFFFFFFFFFFFFFFLL, 0x1BF08EC000uLL);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1EFC63DD0, &unk_1E922CC18);
  dispatch_resume((dispatch_object_t)qword_1EFC63DD0);
}

void sub_1D1539354()
{
  void *v0;
  void *v1;
  void *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  qword_1ED936020 = (uint64_t)dispatch_queue_create(0, 0);
  qword_1ED936030 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v0 = (void *)CFPreferencesCopyValue(CFSTR("LastJettisonTimeInterval"), CFSTR("com.apple.imagent"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (v0)
  {
    v1 = v0;
    v2 = (void *)MEMORY[0x1E0C99D68];
    objc_msgSend(v0, "doubleValue");
    qword_1EFC63DC8 = (uint64_t)(id)objc_msgSend(v2, "dateWithTimeIntervalSinceReferenceDate:");

  }
  if (IMOSLoggingEnabled(v0))
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = qword_1EFC63DC8;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Finished initialization, last jettison was %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D15394BC(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1D15394CC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1D15394D8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;

  result = objc_msgSend(a2, "context");
  if (result == *(_QWORD *)(a1 + 32))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = a2;
    *a4 = 1;
  }
  return result;
}

void sub_1D153952C()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  const void *v6;
  const __CFString *v7;
  const __CFString *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[8];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint8_t buf[4];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  dispatch_source_set_event_handler((dispatch_source_t)qword_1EFC63DD0, 0);
  dispatch_release((dispatch_object_t)qword_1EFC63DD0);
  qword_1EFC63DD0 = 0;
  if (IMOSLoggingEnabled(v0))
  {
    v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14[0]) = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Checking our inconsistencies to see if it's time to jettison state", (uint8_t *)v14, 2u);
    }
  }
  v33 = 0;
  v34 = &v33;
  v35 = 0x2020000000;
  v36 = 0;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3052000000;
  v30 = sub_1D15394BC;
  v31 = sub_1D15394CC;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3052000000;
  v24 = sub_1D15394BC;
  v25 = sub_1D15394CC;
  v26 = 0;
  v26 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = 0;
  v16 = &v15;
  v17 = 0x3052000000;
  v18 = sub_1D15394BC;
  v19 = sub_1D15394CC;
  v20 = 0;
  v20 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1D15399CC;
  v14[3] = &unk_1E922CC40;
  v14[4] = &v15;
  v14[5] = &v27;
  v14[6] = &v33;
  v14[7] = &v21;
  v2 = objc_msgSend((id)qword_1ED936030, "enumerateObjectsUsingBlock:", v14);
  if (*((_BYTE *)v34 + 24))
  {
    if (IMOSLoggingEnabled(v2))
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = v28[5];
        *(_DWORD *)buf = 138412290;
        v38 = v4;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Too many inconsistencies found in imagent, jettisoning state and starting over (reason: %@)", buf, 0xCu);
      }
    }

    qword_1ED936030 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    sub_1D15391B8();
    if (qword_1ED936028)
    {

      qword_1EFC63DC8 = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v5 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend((id)qword_1EFC63DC8, "timeIntervalSinceReferenceDate");
      v6 = (const void *)objc_msgSend(v5, "numberWithDouble:");
      v7 = (const __CFString *)*MEMORY[0x1E0C9B260];
      v8 = (const __CFString *)*MEMORY[0x1E0C9B250];
      CFPreferencesSetValue(CFSTR("LastJettisonTimeInterval"), v6, CFSTR("com.apple.imagent"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
      CFPreferencesSynchronize(CFSTR("com.apple.imagent"), v7, v8);
      dispatch_async(MEMORY[0x1E0C80D38], (dispatch_block_t)qword_1ED936028);
    }
  }
  else
  {
    if (IMOSLoggingEnabled(v2))
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = v22[5];
        *(_DWORD *)buf = 138412290;
        v38 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Inconsistencies aren't bad enough to merit a jettison (reasons: %@)", buf, 0xCu);
      }
    }
    v11 = objc_msgSend((id)v16[5], "count");
    if (v11)
    {
      if (IMOSLoggingEnabled(v11))
      {
        v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = v16[5];
          *(_DWORD *)buf = 138412290;
          v38 = v13;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Removing expired inconsistencies: %@", buf, 0xCu);
        }
      }
      objc_msgSend((id)qword_1ED936030, "removeObjectsInArray:", v16[5]);
    }
    sub_1D15391B8();
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);
  _Block_object_dispose(&v33, 8);
}

uint64_t sub_1D15399CC(_QWORD *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  void *v8;
  void *v9;

  if (!objc_msgSend(a2, "context"))
  {
    v8 = *(void **)(*(_QWORD *)(a1[4] + 8) + 40);
    v9 = a2;
    return objc_msgSend(v8, "addObject:", v9);
  }
  result = objc_msgSend(a2, "shouldJettison:", *(_QWORD *)(a1[5] + 8) + 40);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
    *a4 = 1;
    return result;
  }
  v9 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
  if (v9)
  {
    v8 = *(void **)(*(_QWORD *)(a1[7] + 8) + 40);
    return objc_msgSend(v8, "addObject:", v9);
  }
  return result;
}

id IMFileTransferFromIMDAttachmentRecordRef(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if (!IMOSLoggingEnabled(0))
      return 0;
    v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v6 = "Unable to create IMFileTransfer from NULL IMDAttachmentRecordRef.";
    goto LABEL_14;
  }
  v29 = 0;
  v30 = 0;
  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v14 = 0;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  _IMDAttachmentRecordBulkCopy();
  if (!objc_msgSend(v30, "length", &v22, &v21, &v20, &v25, &v19, &v18, &v17, &v16, &v15, &v14, &v13, &v12, &v11, &v10, &v9))
  {

    if (!IMOSLoggingEnabled(v7))
      return 0;
    v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v6 = "This transfer doesn't have a guid, returning nil.";
LABEL_14:
    _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, v6, buf, 2u);
    return 0;
  }
  v2 = objc_alloc_init(MEMORY[0x1E0D39848]);
  objc_msgSend(v2, "setGuid:", v30);
  objc_msgSend(v2, "_setLocalPath:", v28);
  objc_msgSend(v2, "setType:", v27);
  objc_msgSend(v2, "setCreatedDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v24));
  objc_msgSend(v2, "_setStartDate:", objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v23));
  objc_msgSend(v2, "_setTransferState:", v22);
  objc_msgSend(v2, "setIsIncoming:", v21 == 0);
  objc_msgSend(v2, "setUserInfo:", v25);
  objc_msgSend(v2, "setTotalBytes:", v20);
  if (objc_msgSend(v29, "length"))
    objc_msgSend(v2, "setFilename:", v29);
  objc_msgSend(v2, "setIsSticker:", v19 != 0);
  objc_msgSend(v2, "setStickerUserInfo:", v18);
  objc_msgSend(v2, "setAttributionInfo:", v17);
  objc_msgSend(v2, "setHideAttachment:", v16 != 0);
  objc_msgSend(v2, "setCloudKitSyncState:", v15);
  objc_msgSend(v2, "setCloudKitServerChangeTokenBlob:", v14);
  objc_msgSend(v2, "setCloudKitRecordID:", v13);
  objc_msgSend(v2, "setOriginalGUID:", v12);
  objc_msgSend(v2, "setCommSafetySensitive:", v11);
  objc_msgSend(v2, "setAdaptiveImageGlyphContentIdentifier:", v10);
  objc_msgSend(v2, "setAdaptiveImageGlyphContentDescription:", v9);

  if (IMOSLoggingEnabled(v3))
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v32 = v2;
      v33 = 2112;
      v34 = a1;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Created: %@ from attachment record: %@", buf, 0x16u);
    }
  }
  return v2;
}

void sub_1D1539E9C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D1539E60);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D1539EE4(void *exc_buf, int a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;

  if (a2 == 1)
  {
    v4 = objc_begin_catch(exc_buf);
    if (IMOSLoggingEnabled(v4))
    {
      v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)(v3 - 80) = 138412290;
        *(_QWORD *)(v3 - 76) = v4;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Exception raised while attempting to create IMFileTransfer: %@", (uint8_t *)(v3 - 80), 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x1D1539CC0);
  }
  JUMPOUT(0x1D1539EDCLL);
}

uint64_t IMDAttachmentRecordRefFromIMFileTransfer(void *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint8_t v25[8];
  _QWORD v26[5];
  _BYTE buf[24];
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = IMOSLoggingEnabled(a1);
  if (!a1)
  {
    if (!v6)
      return 0;
    v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      return 0;
    *(_WORD *)buf = 0;
    v10 = "Unable to create IMDAttachmentRecordRef from nil IMFileTransfer.";
    v11 = v9;
    v12 = 2;
LABEL_12:
    _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
    return 0;
  }
  if (v6)
  {
    v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = objc_msgSend(a1, "localPath");
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = objc_msgSend(a1, "filename");
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Local path: %@, filename: %@", buf, 0x16u);
    }
  }
  if (objc_msgSend(a1, "isIncoming") && objc_msgSend(a1, "transferState") < 4)
  {
    v8 = 0;
    if ((a3 & 1) != 0)
      goto LABEL_15;
LABEL_14:
    if (!v8)
      goto LABEL_25;
    goto LABEL_15;
  }
  v8 = objc_msgSend(a1, "transferState") != 0;
  if ((a3 & 1) == 0)
    goto LABEL_14;
LABEL_15:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3052000000;
  v28 = sub_1D153A778;
  v29 = sub_1D153A788;
  v30 = 0;
  v13 = (void *)objc_msgSend(MEMORY[0x1E0D36120], "sharedInstance");
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1D153A794;
  v26[3] = &unk_1E922CC68;
  v26[4] = buf;
  v14 = objc_msgSend(v13, "saveAttachmentsForTransfer:chatGUID:storeAtExternalLocation:completion:", a1, a2, a3, v26);
  if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40)
    && (v15 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
        v14 = objc_msgSend(v15, "fileExistsAtPath:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40)),
        (_DWORD)v14))
  {
    if (!objc_msgSend((id)objc_msgSend(a1, "localPath"), "length")
      || (v16 = (void *)objc_msgSend(a1, "localPath"),
          !objc_msgSend(v16, "isEqualToString:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40)))
      || objc_msgSend(a1, "isSticker"))
    {
      objc_msgSend(a1, "_setLocalPath:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
      objc_msgSend(a1, "_setTransferState:", objc_msgSend(MEMORY[0x1E0D39848], "finalTransferStateForThumbnailMode:success:", objc_msgSend(a1, "thumbnailMode"), 1));
      -[IMDFileTransferCenter updateTransfer:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "updateTransfer:", objc_msgSend(a1, "guid"));
    }
  }
  else if (IMOSLoggingEnabled(v14))
  {
    v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Persisting transfer failed.", v25, 2u);
    }
  }
  _Block_object_dispose(buf, 8);
LABEL_25:
  v18 = objc_msgSend(a1, "isAuxVideo");
  if ((_DWORD)v18)
  {
    if (IMOSLoggingEnabled(v18))
    {
      v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Not creating entry in DB for Aux video transfer %@", buf, 0xCu);
      }
    }
    if (!objc_msgSend(a1, "isFinished"))
      return 0;
    v20 = -[IMDFileTransferCenter transferForGUID:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "transferForGUID:", objc_msgSend(MEMORY[0x1E0D39848], "guidByStrippingAuxPrefix:", objc_msgSend(a1, "guid")));
    if (objc_msgSend((id)objc_msgSend(v20, "createAndPersistLivePhotoBundleIfNecessary"), "length"))
      return 0;
    if (!IMOSLoggingEnabled(0))
      return 0;
    v21 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      return 0;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v20;
    v10 = " ** Error creating video complement for file transfer: %@ imageTransfer: %@";
    v11 = v21;
    v12 = 22;
    goto LABEL_12;
  }
  objc_msgSend(a1, "guid");
  objc_msgSend((id)objc_msgSend(a1, "createdDate"), "timeIntervalSinceReferenceDate");
  objc_msgSend((id)objc_msgSend(a1, "startDate"), "timeIntervalSinceReferenceDate");
  objc_msgSend(a1, "filename");
  objc_msgSend(a1, "localPath");
  objc_msgSend(a1, "type");
  objc_msgSend(a1, "mimeType");
  objc_msgSend(a1, "transferState");
  objc_msgSend(a1, "isIncoming");
  objc_msgSend(a1, "totalBytes");
  objc_msgSend(a1, "userInfo");
  objc_msgSend(a1, "isSticker");
  objc_msgSend(a1, "stickerUserInfo");
  objc_msgSend(a1, "attributionInfo");
  objc_msgSend(a1, "hideAttachment");
  objc_msgSend(a1, "cloudKitSyncState");
  objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
  objc_msgSend(a1, "cloudKitRecordID");
  objc_msgSend(a1, "guid");
  objc_msgSend(a1, "commSafetySensitive");
  objc_msgSend(a1, "adaptiveImageGlyphContentIdentifier");
  objc_msgSend(a1, "adaptiveImageGlyphContentDescription");
  v22 = IMDAttachmentRecordCreate();
  if (IMOSLoggingEnabled(v22))
  {
    v23 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a1;
      _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "Created: %@ from imfiletransfer: %@", buf, 0x16u);
    }
  }
  return v22;
}

void sub_1D153A614(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D153A054);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D153A634()
{
  JUMPOUT(0x1D153A63CLL);
}

uint64_t _IMDShouldSaveAttachmentStoreAtExternalLocation(void *a1, void *a2, int a3)
{
  NSObject *v5;
  uint64_t v6;
  _BOOL4 v8;
  uint8_t v10[16];

  if (a2)
  {
    if (objc_msgSend(a2, "transferState") || objc_msgSend(a1, "transferState") != 5)
    {
      v6 = 1;
    }
    else
    {
      if (IMOSLoggingEnabled(5))
      {
        v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "We are downgrading an attachment from finished to waiting accept --> so we've deleted the path on disk and should not store the attachment", v10, 2u);
        }
      }
      v6 = 0;
    }
    if (objc_msgSend(a2, "isIncoming"))
    {
      if (objc_msgSend(a2, "transferState") >= 4)
        return v6;
      else
        return 0;
    }
  }
  else
  {
    v8 = (!objc_msgSend(a1, "isIncoming") || objc_msgSend(a1, "transferState") >= 4)
      && objc_msgSend(a1, "transferState") != 0;
    return a3 | v8;
  }
  return v6;
}

void sub_1D153A778(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1D153A788(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1D153A794(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

uint64_t IMDUpdateIMFileTransferFromIMFileTransfer(void *a1, const void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  IMDAttachmentStore *v25;
  NSObject *v26;
  const __CFString *v27;
  NSObject *v29;
  uint64_t v30;
  CFTypeRef cf;
  _QWORD v32[5];
  uint8_t v33[4];
  void *v34;
  __int16 v35;
  const __CFString *v36;
  _BYTE buf[24];
  void (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a1;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a3;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Updating %@ from %@", buf, 0x16u);
    }
  }
  v11 = objc_msgSend(a1, "cloudKitSyncState");
  v12 = v11 != objc_msgSend(a3, "cloudKitSyncState");
  v13 = objc_msgSend(a1, "transferState");
  if (v13 != objc_msgSend(a3, "transferState"))
    v12 = 1;
  objc_msgSend(a1, "setGuid:", objc_msgSend(a3, "guid"));
  objc_msgSend(a1, "setMessageGUID:", objc_msgSend(a3, "messageGUID"));
  objc_msgSend(a1, "setCreatedDate:", objc_msgSend(a3, "createdDate"));
  objc_msgSend(a1, "_setStartDate:", objc_msgSend(a3, "startDate"));
  objc_msgSend(a1, "setType:", objc_msgSend(a3, "type"));
  objc_msgSend(a1, "setFilename:", objc_msgSend(a3, "filename"));
  objc_msgSend(a1, "_setTransferState:", objc_msgSend(a3, "transferState"));
  objc_msgSend(a1, "setIsIncoming:", objc_msgSend(a3, "isIncoming"));
  objc_msgSend(a1, "setUserInfo:", objc_msgSend(a3, "userInfo"));
  objc_msgSend(a1, "setStickerUserInfo:", objc_msgSend(a3, "stickerUserInfo"));
  objc_msgSend(a1, "setAttributionInfo:", objc_msgSend(a3, "attributionInfo"));
  objc_msgSend(a1, "setIsSticker:", objc_msgSend(a3, "isSticker"));
  objc_msgSend(a1, "setAdaptiveImageGlyphContentIdentifier:", objc_msgSend(a3, "adaptiveImageGlyphContentIdentifier"));
  objc_msgSend(a1, "setAdaptiveImageGlyphContentDescription:", objc_msgSend(a3, "adaptiveImageGlyphContentDescription"));
  objc_msgSend(a1, "setHideAttachment:", objc_msgSend(a3, "hideAttachment"));
  objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a3, "cloudKitSyncState"));
  objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a3, "cloudKitServerChangeTokenBlob"));
  objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a3, "cloudKitRecordID"));
  objc_msgSend(a1, "setOriginalGUID:", objc_msgSend(a3, "originalGUID"));
  objc_msgSend(a1, "setCommSafetySensitive:", objc_msgSend(a3, "commSafetySensitive"));
  v14 = _IMDShouldSaveAttachmentStoreAtExternalLocation(a1, a3, 0);
  if ((_DWORD)v14)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3052000000;
    v38 = sub_1D153A778;
    v39 = sub_1D153A788;
    v40 = 0;
    v15 = (void *)objc_msgSend(MEMORY[0x1E0D36120], "sharedInstance");
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_1D153B0A4;
    v32[3] = &unk_1E922CC68;
    v32[4] = buf;
    v16 = objc_msgSend(v15, "saveAttachmentsForTransfer:chatGUID:storeAtExternalLocation:completion:", a3, a5, a4, v32);
    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40)
      && (v17 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v16 = objc_msgSend(v17, "fileExistsAtPath:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40)),
          (_DWORD)v16))
    {
      if (IMOSLoggingEnabled(v16))
      {
        v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = *(void **)(*(_QWORD *)&buf[8] + 40);
          *(_DWORD *)v33 = 138412290;
          v34 = v19;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, " Storing transfer at path: %@", v33, 0xCu);
        }
      }
      objc_msgSend(a1, "_setLocalPath:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
      objc_msgSend(a3, "_setLocalPath:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
      v20 = objc_msgSend(a1, "finalTransferStateForSuccess:", 1);
      objc_msgSend(a1, "_setTransferState:", v20);
      objc_msgSend(a3, "_setTransferState:", v20);
      -[IMDFileTransferCenter updateTransfer:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "updateTransfer:", objc_msgSend(a3, "guid"));
    }
    else if (IMOSLoggingEnabled(v16))
    {
      v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Persisting transfer failed.", v33, 2u);
      }
    }
    v23 = -[IMDCKCacheDeleteManager isUsingCentralizeCacheDelete](+[IMDCKCacheDeleteManager sharedInstance](IMDCKCacheDeleteManager, "sharedInstance"), "isUsingCentralizeCacheDelete");
    if ((_DWORD)v23)
    {
      if (v12 && (v23 = objc_msgSend(a1, "canMarkPurgeable"), (_DWORD)v23))
      {
        if (IMOSLoggingEnabled(v23))
        {
          v24 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v33 = 138412290;
            v34 = a1;
            _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, " File eligible for purging: %@", v33, 0xCu);
          }
        }
        if (*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
        {
          v25 = +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance");
          -[IMDAttachmentStore markAttachmentPurgeable:](v25, "markAttachmentPurgeable:", *(_QWORD *)(*(_QWORD *)&buf[8] + 40));
        }
      }
      else if (IMOSLoggingEnabled(v23))
      {
        v26 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          v27 = CFSTR("NO");
          if (v12)
            v27 = CFSTR("YES");
          *(_DWORD *)v33 = 138412546;
          v34 = a1;
          v35 = 2112;
          v36 = v27;
          _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, " File NOT eligible for purging: %@, updatedPurgeableState: %@", v33, 0x16u);
        }
      }
    }
    _Block_object_dispose(buf, 8);
  }
  else if (IMOSLoggingEnabled(v14))
  {
    v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, " ** Not storing transfer", buf, 2u);
    }
  }
  cf = a2;
  if (a2 || (objc_msgSend(a1, "guid"), (cf = (CFTypeRef)IMDAttachmentRecordCopyAttachmentForGUID()) != 0))
  {
    objc_msgSend(a1, "guid");
    objc_msgSend((id)objc_msgSend(a3, "createdDate"), "timeIntervalSinceReferenceDate");
    objc_msgSend((id)objc_msgSend(a1, "startDate"), "timeIntervalSinceReferenceDate");
    objc_msgSend(a1, "filename");
    objc_msgSend(a1, "localPath");
    objc_msgSend(a1, "type");
    objc_msgSend(a1, "mimeType");
    objc_msgSend(a1, "transferState");
    objc_msgSend(a1, "isIncoming");
    objc_msgSend(a3, "totalBytes");
    objc_msgSend(a1, "userInfo");
    objc_msgSend(a1, "isSticker");
    objc_msgSend(a1, "stickerUserInfo");
    objc_msgSend(a1, "attributionInfo");
    objc_msgSend(a1, "hideAttachment");
    objc_msgSend(a1, "cloudKitSyncState");
    objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
    objc_msgSend(a1, "cloudKitRecordID");
    objc_msgSend(a1, "originalGUID");
    objc_msgSend(a1, "commSafetySensitive");
    objc_msgSend(a1, "adaptiveImageGlyphContentIdentifier");
    objc_msgSend(a1, "adaptiveImageGlyphContentDescription");
    IMDAttachmentRecordBulkUpdate();
    if (!a2)
      CFRelease(cf);
  }
  else if (IMOSLoggingEnabled(0))
  {
    v29 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      v30 = objc_msgSend(a1, "guid");
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v30;
      _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "Unable to find an attachment record for guid: %@.", buf, 0xCu);
    }
  }
  return 1;
}

uint64_t _IMDShouldSaveAttachment(void *a1, void *a2)
{
  return _IMDShouldSaveAttachmentStoreAtExternalLocation(a1, a2, 0);
}

uint64_t sub_1D153B0A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

IMDAttachmentStore *sub_1D153B0F4()
{
  IMDAttachmentStore *result;

  result = objc_alloc_init(IMDAttachmentStore);
  qword_1ED935E10 = (uint64_t)result;
  return result;
}

void sub_1D153BEA4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  id v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = 0;
  v1 = (void *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", *(_QWORD *)(a1 + 32));
  v2 = objc_msgSend(v1, "getResourceValue:forKey:error:", &v5, *MEMORY[0x1E0C99C70], &v4);
  if (v4)
  {
    if (IMOSLoggingEnabled(v2))
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v7 = v4;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Error checking if filesystem supports case sensitivity: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    byte_1ED936480 = objc_msgSend(v5, "BOOLValue");
  }
}

uint64_t sub_1D153C21C()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("LSApplicationWorkspace"), CFSTR("CoreServices"));
  qword_1EFC63DD8 = result;
  return result;
}

uint64_t sub_1D153C248(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = objc_msgSend(a2, "response");
  if (!result)
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("TTR:%@ Messages storage issue: %@"), objc_msgSend((id)objc_msgSend(MEMORY[0x1E0D20BF8], "sharedInstance"), "productBuildVersion"), *(_QWORD *)(a1 + 32));
    v5 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("A Messages attachment was unexpectedly removed from purgable state %@."), *(_QWORD *)(a1 + 40));
    v6 = objc_msgSend(MEMORY[0x1E0CB3500], "URLHostAllowedCharacterSet");
    v7 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("tap-to-radar://new?Title=%@&Description=%@&Classification=%@&Reproducibility=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&AutoDiagnostics=phone"), objc_msgSend(v4, "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(v5, "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(CFSTR("Serious Bug"), "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(CFSTR("I Didn't Try"), "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(CFSTR("450305"), "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(CFSTR("Messages"), "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(CFSTR("all"), "stringByAddingPercentEncodingWithAllowedCharacters:", v6));
    v8 = objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v7);
    return objc_msgSend((id)objc_msgSend((id)qword_1EFC63DD8, "defaultWorkspace"), "openURL:configuration:completionHandler:", v8, 0, 0);
  }
  return result;
}

void sub_1D153C630(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D153C600);
  }
  _Unwind_Resume(a1);
}

void sub_1D153CC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1D153CC4C(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1D153DA00(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412290;
      v5 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Finished reindexing %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D153EAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D153EB00(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (a2 == -1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    v2 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%tu"), a2);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v3);

  }
}

void sub_1D153EB7C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 2 * objc_msgSend(v5, "count"));
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v7);
        v12 = objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v11), "rangeValue");
        v14 = v13;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%tu"), v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v15);

        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%tu"), v14);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "addObject:", v16);

        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v9);
  }

  v17 = *(void **)(a1 + 32);
  objc_msgSend(v4, "stringValue");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setObject:forKey:", v6, v18);

}

void sub_1D153F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D153F034(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;

  v27 = a2;
  v7 = a3;
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", (unint64_t)objc_msgSend(v7, "count") >> 1);
  v26 = v7;
  v9 = objc_msgSend(v7, "count");
  v10 = v9;
  if ((v9 & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  else
  {
    v11 = v27;
    if (v9)
    {
      v12 = 0;
      v13 = v9 - 1;
      do
      {
        if (v12 < v13)
        {
          v14 = (void *)MEMORY[0x1E0CB3B18];
          v15 = v8;
          v16 = *(void **)(a1 + 48);
          objc_msgSend(v26, "objectAtIndexedSubscript:", v12);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v16, "_unsignedIntegerFromString:", v17);
          v19 = *(void **)(a1 + 48);
          objc_msgSend(v26, "objectAtIndexedSubscript:", v12 + 1);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v19, "_unsignedIntegerFromString:", v20);
          v22 = v18;
          v8 = v15;
          objc_msgSend(v14, "valueWithRange:", v22, v21);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "addObject:", v23);

          v11 = v27;
        }
        v12 += 2;
      }
      while (v12 < v10);
    }
    v24 = *(void **)(a1 + 32);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 48), "_unsignedIntegerFromString:", v11));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "setObject:forKey:", v8, v25);

  }
}

void sub_1D153F1EC(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  v8 = a5;
  if (qword_1ED936048 != -1)
    dispatch_once(&qword_1ED936048, &unk_1E922CD68);
  v9 = objc_msgSend((id)qword_1ED936040, "addBlock:withTimeout:forKey:description:", v7, CFSTR("com.apple.madrid"), v8, a1);
  if ((_DWORD)v9 && IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend((id)qword_1ED936040, "loggableOverviewForKey:", CFSTR("com.apple.madrid"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = 138412290;
      v13 = v11;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Messages ahead in the receive queue: %@", (uint8_t *)&v12, 0xCu);

    }
  }

}

void sub_1D153F34C()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0D36A78]);
  v1 = (void *)qword_1ED936040;
  qword_1ED936040 = (uint64_t)v0;

}

void sub_1D153F374(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v7 = qword_1EFC63DF0;
  v8 = a5;
  v9 = a4;
  v11 = v9;
  if (v7 == -1)
  {
    v10 = v9;
  }
  else
  {
    dispatch_once(&qword_1EFC63DF0, &unk_1E922CD88);
    v10 = v11;
  }
  objc_msgSend((id)qword_1EFC63DE8, "addBlock:withTimeout:forKey:description:", v10, CFSTR("com.apple.sms"), v8, a1);

}

void sub_1D153F410()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0D36A78]);
  v1 = (void *)qword_1EFC63DE8;
  qword_1EFC63DE8 = (uint64_t)v0;

}

void sub_1D154018C()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("uti-type"), CFSTR("decryption-key"), CFSTR("mmcs-url"), CFSTR("mmcs-signature-hex"), CFSTR("mmcs-owner"), CFSTR("file-size"), 0);
  v1 = (void *)qword_1EFC63DF8;
  qword_1EFC63DF8 = v0;

}

void sub_1D15401FC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (objc_msgSend((id)qword_1EFC63DF8, "containsObject:", v9))
  {
    v6 = (void *)IMCreateEscapedAttributeValueFromString();
    v7 = IMCreateEscapedAttributeValueFromString();
    v8 = (void *)v7;
    if (v6 && v7)
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "appendFormat:", CFSTR(" %@=\"%@\""), v6, v7);

  }
}

void sub_1D1544FBC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, uint64_t a7, void *a8)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a8;
  v19 = v18;
  if (v17 || (a6 & 1) == 0)
  {
    if (IMOSLoggingEnabled(v18))
    {
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "localURL");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v28 = v25;
        v29 = 2112;
        v30 = v17;
        _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Failed to transcode HQ asset %@ to LQ for watch relay with error %@", buf, 0x16u);

      }
    }
  }
  else
  {
    objc_msgSend(v15, "firstObject");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v21))
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412802;
        v28 = v23;
        v29 = 2112;
        v30 = v20;
        v31 = 2048;
        v32 = objc_msgSend(v21, "length");
        _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Relaying LQ transcode of transfer GUID %@ at path %@ size %llu to watch", buf, 0x20u);

      }
    }
    LOBYTE(v26) = 1;
    objc_msgSend(*(id *)(a1 + 40), "_relayMessageToPeers:forChat:serviceName:requiredCapabilities:reflectOnly:excludesWatch:onlyWatch:overridingAttachmentData:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), 0, v26, v21);

  }
}

void sub_1D15451F0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15451A0);
  }
  _Unwind_Resume(a1);
}

void sub_1D15455E4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D154553CLL);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D1546748(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v17;
  id v18;
  NSObject *v19;
  const __CFString *v20;
  void *v21;
  const void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id value;
  id v37;
  uint8_t buf[4];
  const __CFString *v39;
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v35 = a4;
  v34 = a5;
  value = a6;
  v37 = a7;
  v17 = a8;
  v18 = a9;
  if (IMOSLoggingEnabled(v18))
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      v20 = CFSTR("NO");
      if (a3)
        v20 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v39 = v20;
      v40 = 2112;
      v41 = v35;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "MMS dictionary uploaded complected with success: %@ and error %@", buf, 0x16u);
    }

  }
  if (a3)
  {
    if (value)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryOwnerIDKey, value);
    if (v37)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionarySignatureKey, v37);
    if (v17)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryURLStringKey, v17);
    if (v18)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryEncryptionKey, v18);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a10);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryOutFileSizeKey, v21);

    v22 = *(const void **)(a1 + 40);
    if (v22)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageItemDictionaryServiceKey, v22);
    JWEncodeDictionary();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v23, "length"))
    {
      v24 = (void *)MEMORY[0x1E0C99E08];
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 141);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 48), "objectForKey:", IMDCTMessageDictionaryGUIDKey);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      IDSGetUUIDData();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *MEMORY[0x1E0D348E0]);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", *(unsigned __int8 *)(a1 + 80));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "dictionaryWithObjectsAndKeys:", *MEMORY[0x1E0D341D8], MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D341C0], v25, *MEMORY[0x1E0D34138], v27, *MEMORY[0x1E0D341E0], v23, *MEMORY[0x1E0D34148], v28, *MEMORY[0x1E0D341C8], CFSTR("_SMSServiceRelayToWatchOnly"), v29, 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();

      if (objc_msgSend(*(id *)(a1 + 56), "count"))
        objc_msgSend(v30, "setObject:forKey:", *(_QWORD *)(a1 + 56), CFSTR("requiredCapabilitiesForSMSRelay"));
      v31 = *(void **)(a1 + 64);
      objc_msgSend(MEMORY[0x1E0D39730], "myCTPhoneNumber");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "sendDataToPeers:forcedCallerID:shouldFilterRecepients:requestProxySend:dontSendTo:", v30, v32, 1, 0, *(_QWORD *)(a1 + 72));

    }
  }

}

void sub_1D1548EE8()
{
  IMDChatStore *v0;
  void *v1;

  v0 = objc_alloc_init(IMDChatStore);
  v1 = (void *)qword_1ED935E18;
  qword_1ED935E18 = (uint64_t)v0;

}

uint64_t sub_1D154A0CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D154A0DC(uint64_t a1)
{

}

void sub_1D154A0E4(uint64_t a1, uint64_t a2)
{
  IMDChat *v3;
  IMDChat *v4;

  v3 = sub_1D151D854(a2);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v3);
    v3 = v4;
  }

}

void sub_1D154A12C(uint64_t a1, void *a2)
{
  void *v3;
  int v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  objc_msgSend(*(id *)(a1 + 32), "_processIncomingChat:", v9);
  objc_msgSend(v9, "serviceName");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", *MEMORY[0x1E0D38F58]);

  if (v4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (!v5)
  {
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  }
  objc_msgSend(v5, "addObject:", v9);

}

void sub_1D154A6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D154A6D8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1D154A8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D154A900(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_1D154E794(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D154E780);
  }
  _Unwind_Resume(a1);
}

void sub_1D154E7F4()
{
  IMDChorosController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDChorosController);
  v1 = (void *)qword_1ED936058;
  qword_1ED936058 = (uint64_t)v0;

}

void sub_1D154F23C(uint64_t a1, void *a2, void *a3)
{
  __CFString *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  int v14;
  const __CFString *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v14 = 138412546;
      v15 = v5;
      v16 = 2112;
      v17 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Received ack: %@, metadata: %@", (uint8_t *)&v14, 0x16u);
    }

  }
  v8 = -[__CFString success](v5, "success");
  v9 = v8;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (v9)
        v11 = CFSTR("YES");
      else
        v11 = CFSTR("NO");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 32), "messageID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = v12;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Message sent notification: success %@ messageID %@", (uint8_t *)&v14, 0x16u);

    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v13 = *(void **)(a1 + 48);
    if (v9)
      objc_msgSend(v13, "_processMessageSent:forSession:");
    else
      objc_msgSend(v13, "_processMessageSendFailure:forSession:");
  }

}

uint64_t sub_1D154F430(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processMessageSendFailure:forSession:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1D154F894(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D154F7B8);
  }
  _Unwind_Resume(a1);
}

void sub_1D1551B10(uint64_t a1, void *a2, void *a3)
{
  __CFString *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v23[2];
  _QWORD v24[2];
  void *v25;
  void *v26;
  uint8_t buf[4];
  const __CFString *v28;
  __int16 v29;
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v28 = v5;
      v29 = 2112;
      v30 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Received ack: %@, metadata: %@", buf, 0x16u);
    }

  }
  v8 = -[__CFString success](v5, "success");
  v9 = v8;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      if (v9)
        v11 = CFSTR("YES");
      else
        v11 = CFSTR("NO");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 32), "messageID"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      v28 = v11;
      v29 = 2112;
      v30 = v12;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Message sent notification: success %@ messageID %@", buf, 0x16u);

    }
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v13 = *(void **)(a1 + 48);
    if (v9)
    {
      objc_msgSend(v13, "_processMessageSent:forSession:");
      v14 = *(_QWORD *)(a1 + 72);
      if (v14 == 8)
      {
        v19 = *(void **)(a1 + 48);
        +[IMDChorosController serviceTypeKey](IMDChorosController, "serviceTypeKey");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 72), v20);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v23[1] = *MEMORY[0x1E0CA7870];
        v24[0] = v21;
        v24[1] = *(_QWORD *)(a1 + 64);
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "locationUpdateDelivered:", v22);

      }
      else if (v14 == 1)
      {
        v15 = *(void **)(a1 + 48);
        +[IMDChorosController serviceTypeKey](IMDChorosController, "serviceTypeKey");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = v16;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 72));
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = v17;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "locationUpdateDelivered:", v18);

      }
    }
    else
    {
      objc_msgSend(v13, "_processMessageSendFailure:forSession:");
    }
  }

}

uint64_t sub_1D1551E10(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processMessageSendFailure:forSession:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1D1552220(uint64_t a1, void *a2, void *a3)
{
  __CFString *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  v6 = IMOSLoggingEnabled(v5);
  if ((_DWORD)v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v11 = 138412546;
      v12 = v4;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Received ack: %@, metadata: %@", (uint8_t *)&v11, 0x16u);
    }

  }
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = -[__CFString success](v4, "success");
      v10 = CFSTR("NO");
      if (v9)
        v10 = CFSTR("YES");
      v11 = 138412290;
      v12 = v10;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Message sent notification: success %@", (uint8_t *)&v11, 0xCu);
    }

  }
}

uint64_t sub_1D1553DCC()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("LSApplicationWorkspace"), CFSTR("CoreServices"));
  qword_1EFC63E08 = result;
  return result;
}

void sub_1D1554FF0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  +[IMDChorosController chatIdentifierForEmergency](IMDChorosController, "chatIdentifierForEmergency");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(*(id *)(a1 + 40), "conversationID");
  v4 = objc_msgSend(*(id *)(a1 + 40), "sequenceNum");
  objc_msgSend(*(id *)(a1 + 40), "text");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "_processReceivedTextMessageForService:chatIdentifier:conversationID:sequenceNum:text:", 1, v6, v3, v4, v5);

}

void sub_1D1555268(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting delivery receipt pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D155537C;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D155537C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing delivery receipt %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D1555640(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting chat session close pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1555754;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1555754(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing chat session close %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D1555A4C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting read receipt pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1555B60;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1555B60(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v6, "isFromStorage") & 1) != 0 || (v7 = objc_msgSend(v6, "isLastFromStorage"), (_DWORD)v7))
    {
      +[IMDMessageFromStorageController iMessageStorageController](IMDMessageFromStorageController, "iMessageStorageController");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "decrementPendingReadReceiptFromStorageCount");

    }
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412290;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Finished processing read receipt %@", (uint8_t *)&v13, 0xCu);

      }
    }

    v11 = *(_QWORD *)(a1 + 32);
    if (v11)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v11 + 16))(v11, 1, 0);
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(void))(v12 + 16))();

}

void sub_1D1555E54(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting mark unread request pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1555F68;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1555F68(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing mark unread request %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D155622C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting played receipt pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1556340;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1556340(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing played receipt %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D1556604(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting delivered quietly receipt pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1556718;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1556718(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing delivered quietly receipt %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D15569DC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting notify recipient command pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1556AF0;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1556AF0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing notify recipient command %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D1556DB4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting edit message command pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1556EC8;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1556EC8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "editCommandGUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing edit message command %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D155718C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting edit message command pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D15572A0;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D15572A0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing recover junk command %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D1557564(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting reposition sticker command pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1557678;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1557678(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished reposition sticker command %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D155793C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting scheduled message update command pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1557A50;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1557A50(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished scheduled message update command %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D1557D14(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting iml to im association command pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1557E28;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1557E28(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished iml to im association command %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

void sub_1D15581D0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15580C8);
  }
  _Unwind_Resume(a1);
}

void sub_1D1558204(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  qos_class_t v8;
  NSObject *v9;
  NSObject *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled(v3);
  if ((_DWORD)v4)
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "GUID");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v26 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Starting message pipeline (%@)", buf, 0xCu);

    }
  }
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = qos_class_self();
      *(_DWORD *)buf = 67109120;
      LODWORD(v26) = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Starting message qos is (%u)", buf, 8u);
    }

  }
  v9 = *(id *)(a1 + 40);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 64);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D1413000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v11, "receivePipeline", "", buf, 2u);
  }

  v12 = 0;
  if (objc_msgSend(*(id *)(a1 + 32), "isFromStorage"))
  {
    IMTimeOfDay();
    v12 = v13;
  }
  objc_msgSend(*(id *)(a1 + 48), "runWithInput:", *(_QWORD *)(a1 + 32));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1D15584BC;
  v18[3] = &unk_1E922D168;
  v19 = *(id *)(a1 + 32);
  v23 = v12;
  v21 = *(id *)(a1 + 56);
  v22 = v3;
  v15 = *(id *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 64);
  v20 = v15;
  v24 = v16;
  v17 = v3;
  objc_msgSend(v14, "registerCompletionBlock:", v18);

}

void sub_1D1558488(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1558314);
  }
  _Unwind_Resume(a1);
}

void sub_1D15584BC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  qos_class_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  os_signpost_id_t v22;
  int v23;
  void *v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = IMOSLoggingEnabled(v6);
    if ((_DWORD)v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "GUID");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = 138412290;
        v24 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Finished processing message %@", (uint8_t *)&v23, 0xCu);

      }
    }
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = qos_class_self();
        v23 = 67109120;
        LODWORD(v24) = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Finished message qos is (%u)", (uint8_t *)&v23, 8u);
      }

    }
    if (objc_msgSend(*(id *)(a1 + 32), "isFromStorage"))
    {
      v12 = IMTimeOfDay();
      v14 = v13;
      v15 = *(double *)(a1 + 64);
      if (IMOSLoggingEnabled(v12))
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v6, "GUID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 138412546;
          v24 = v17;
          v25 = 2048;
          v26 = v14 - v15;
          _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "From-storage message %@ took %f seconds to process", (uint8_t *)&v23, 0x16u);

        }
      }
    }

    v18 = *(_QWORD *)(a1 + 48);
    if (v18)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v18 + 16))(v18, 1, 0);
  }
  v19 = *(_QWORD *)(a1 + 56);
  if (v19)
    (*(void (**)(void))(v19 + 16))();
  v20 = *(id *)(a1 + 40);
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 72);
  if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    LOWORD(v23) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D1413000, v21, OS_SIGNPOST_INTERVAL_END, v22, "receivePipeline", "", (uint8_t *)&v23, 2u);
  }

}

void sub_1D1558918(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint8_t buf[16];

  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Starting SyndicationAction pipeline", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "runWithInput:", *(_QWORD *)(a1 + 40));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1558A2C;
  v7[3] = &unk_1E922D118;
  v8 = *(id *)(a1 + 48);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "registerCompletionBlock:", v7);

}

void sub_1D1558A2C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (objc_msgSend(v3, "state"))
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4)
    {
      objc_msgSend(v3, "error");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, _QWORD, void *))(v4 + 16))(v4, 0, v5);

    }
  }
  else
  {
    objc_msgSend(v3, "value");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v6, "syndicationAction");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = 138412290;
        v12 = v8;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished processing SyndicationAction %@", (uint8_t *)&v11, 0xCu);

      }
    }

    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(uint64_t, uint64_t, _QWORD))(v9 + 16))(v9, 1, 0);
  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

IMDLocationSharingController *sub_1D1558BE4()
{
  IMDLocationSharingController *result;

  result = objc_alloc_init(IMDLocationSharingController);
  qword_1ED935E20 = (uint64_t)result;
  return result;
}

void sub_1D1558F5C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D1558F80(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD block[5];
  id v6[2];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D1559010;
  block[3] = &unk_1E922D1D8;
  objc_copyWeak(v6, (id *)(a1 + 32));
  block[4] = a2;
  v6[1] = a3;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  objc_destroyWeak(v6);
}

uint64_t sub_1D1559010(uint64_t a1)
{
  id Weak;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (IMOSLoggingEnabled(Weak))
  {
    v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 48);
      v10 = 138412546;
      v11 = v4;
      v12 = 2048;
      v13 = v5;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "FindMyLocateSession friendShipUpdateCallback. updateFriend: %@, updateType: %lu", (uint8_t *)&v10, 0x16u);
    }
  }
  v6 = objc_msgSend(*(id *)(a1 + 32), "originatedFromTheSameClient");
  v7 = (void *)objc_msgSend(*(id *)(a1 + 32), "handle");
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v8 = objc_msgSend(v7, "comparisonIdentifier");
  else
    v8 = 0;
  return objc_msgSend(Weak, "_postFMLFriendshipChangeForHandleID:handleType:updateType:isFromMessages:", v8, objc_msgSend(*(id *)(a1 + 32), "handleType"), *(_QWORD *)(a1 + 48), v6);
}

void sub_1D1559258(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  if (a2)
  {
    v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_1D166B7A4(a2, v3);
  }
  else if (IMOSLoggingEnabled(a1))
  {
    v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "FindMyLocateSession startUpdatingFriendsWithCompletion completed without an error", v5, 2u);
    }
  }
}

void sub_1D155A110(uint64_t a1, int a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (IMOSLoggingEnabled(a1))
    {
      v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = objc_msgSend(*(id *)(a1 + 40), "identifier");
        v12 = 138412546;
        v13 = v4;
        v14 = 2112;
        v15 = v5;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, " ** Sent location sharing payload: %@  to ID: %@", (uint8_t *)&v12, 0x16u);
      }
    }
  }
  else
  {
    v6 = objc_alloc(MEMORY[0x1E0C99D80]);
    v7 = (void *)objc_msgSend(v6, "initWithObjectsAndKeys:", CFSTR("Couldn't find compatible destination."), *MEMORY[0x1E0CB2D50], 0);
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("com.apple.messages"), 3, v7);
    if (IMOSLoggingEnabled(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 8), "mappingPacketSendFailed:toHandle:withError:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), v8)))
    {
      v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = *(_QWORD *)(a1 + 32);
        v11 = objc_msgSend(*(id *)(a1 + 40), "identifier");
        v12 = 138412546;
        v13 = v10;
        v14 = 2112;
        v15 = v11;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, " ** Could not send location sharing payload: %@  to ID: %@ - immediately failed.", (uint8_t *)&v12, 0x16u);
      }
    }

  }
}

void sub_1D155A56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = 138412546;
      v7 = a2;
      v8 = 2112;
      v9 = a3;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Mapping packet ingested by FMF: responseID %@ error %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_1D155B0DC()
{
  IMDCKMessageSyncController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKMessageSyncController);
  v1 = (void *)qword_1ED935E28;
  qword_1ED935E28 = (uint64_t)v0;

}

void sub_1D155B680(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  __CFArray *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id obj;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "_chatRegistry");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "messagesToUploadToCloudKitWithLimit:", objc_msgSend(*v2, "_numberOfMessagesToUpload"));

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v28 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
        v9 = (void *)MEMORY[0x1D17EA968]();
        objc_msgSend(*(id *)(a1 + 32), "_messageZoneID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "_messageRecordSalt");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = (void *)objc_msgSend(v8, "copyCKRecordRepresentationWithZoneID:salt:", v10, v11);

        if (!v12)
        {
          if (IMOSLoggingEnabled(v13))
          {
            OSLogHandleForIMFoundationCategory();
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v8, "guid");
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v32 = v22;
              _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "**** Message [%@] could not be converted to CKRecord, marking it as clean and moving on.", buf, 0xCu);

            }
          }
          goto LABEL_20;
        }
        v14 = *(void **)(a1 + 32);
        objc_msgSend(v12, "firstObject");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v14) = objc_msgSend(v14, "_isValidCKRecordToSync:", v15);

        if (!(_DWORD)v14)
        {
          if (IMOSLoggingEnabled(v16))
          {
            OSLogHandleForIMFoundationCategory();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v12, "objectAtIndexedSubscript:", 0);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "_stringForKey:", CFSTR("guid"));
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v32 = v25;
              _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "**** Message %@ is too big. Marking it as clean and moving on", buf, 0xCu);

            }
          }
LABEL_20:
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
          objc_msgSend(*(id *)(a1 + 32), "_sharedIMDMessageStore");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "markMessageAsCleanWithROWID:", objc_msgSend(v8, "messageID"));
          goto LABEL_21;
        }
        if (*(_QWORD *)(a1 + 40))
        {
          objc_msgSend(v12, "firstObject");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = v17 == 0;

          if (!v18)
          {
            v19 = *(__CFArray **)(a1 + 40);
            objc_msgSend(v12, "firstObject");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            CFArrayAppendValue(v19, v20);
LABEL_21:

          }
        }

        objc_autoreleasePoolPop(v9);
      }
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    }
    while (v5);
  }

}

void sub_1D155BBC8(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating message zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1D155C1C8(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "_chatRegistry");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "processMessageUsingCKRecord:", *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "setRecordsWritten:", objc_msgSend(*(id *)(a1 + 32), "recordsWritten") + 1);
}

void sub_1D155C214(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  objc_msgSend(*(id *)(a1 + 32), "_ckUtilitiesInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "extractServerRecordFromCKServerErrorRecordChanged:", *(_QWORD *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 48), "recordID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "recordName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "recordID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "recordName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v5, "isEqualToString:", v7);

  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 32), "_chatRegistry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "processMessageUsingCKRecord:", v3);

  }
  else
  {
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v3, "recordID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "recordName");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "recordID");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "recordName");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = 138412546;
        v17 = v13;
        v18 = 2112;
        v19 = v15;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Conflicting serverRecord was different than the one being updated (server: %@, local: %@)", (uint8_t *)&v16, 0x16u);

      }
    }
    objc_msgSend(MEMORY[0x1E0D398B8], "resetSyncStateForMessage:toState:", *(_QWORD *)(a1 + 48), 2);
  }

}

uint64_t sub_1D155C41C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  return objc_msgSend(MEMORY[0x1E0D398B8], "resetSyncStateForMessage:toState:", *(_QWORD *)(a1 + 40), 0);
}

uint64_t sub_1D155C460(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  return objc_msgSend(MEMORY[0x1E0D398B8], "resetSyncStateForMessage:toState:", *(_QWORD *)(a1 + 40), 2);
}

uint64_t sub_1D155C4A4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  return objc_msgSend(MEMORY[0x1E0D398B8], "resetSyncStateForMessage:toState:", *(_QWORD *)(a1 + 40), 1);
}

uint64_t sub_1D155C4E8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  return objc_msgSend(MEMORY[0x1E0D398B8], "resetSyncStateForMessage:toState:", *(_QWORD *)(a1 + 40), 2);
}

uint64_t sub_1D155C950(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_writeDirtyMessagesToCloudKitWithActivity:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D155CEDC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordWriteCompletionForRecord_NSError_);
}

uint64_t sub_1D155CEEC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processModifyRecordsCompletion_deletedRecordIDs_operationError_isLastBatchOfWrite_activity_writeCompletionBlock_);
}

void sub_1D155D05C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  int v15;
  void *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 32;
  objc_msgSend(*(id *)(a1 + 32), "setRecordsRead:", objc_msgSend(*(id *)(a1 + 32), "recordsRead") + 1);
  objc_msgSend(*(id *)(v2 + 8), "_stringForKey:", CFSTR("chatID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = *(id **)v2;
  if (v3)
  {
    objc_msgSend(v4[13], "objectForKey:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 104);
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v5, "intValue") + 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", v9, v3);

    }
    else
    {
      objc_msgSend(*(id *)(v7 + 104), "setObject:forKey:", &unk_1E9271620, v3);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "objectForKey:", v3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v12))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v15 = 138412546;
        v16 = v3;
        v17 = 1024;
        v18 = objc_msgSend(v11, "intValue");
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Found parentChatID: %@, updatedLastMessageCount: %d", (uint8_t *)&v15, 0x12u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_chatRegistry");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "processMessageUsingCKRecord:updatedLastMessageCount:", *(_QWORD *)(a1 + 40), objc_msgSend(v11, "intValue"));

  }
  else
  {
    objc_msgSend(v4, "_chatRegistry");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "processMessageUsingCKRecord:", *(_QWORD *)(a1 + 40));

  }
}

void sub_1D155D3FC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D155D3BCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D155DA88(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D155DA40);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D155DD34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setArchivedRecordSyncToken:", 0);
}

void sub_1D155DF00(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "logCollectorAddress");
  v4 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:reasonString:", CFSTR("ChangeTokenExpired"), 1, 0, v4, CFSTR("ChangeTokenExpired"));

  objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", 0);
}

void sub_1D155E0AC(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  _QWORD v23[5];
  id v24;
  id v25;
  __int128 v26;
  _QWORD block[5];
  id v28;
  id v29;
  __int128 v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  const __CFString *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a1 + 88))
        v3 = CFSTR("YES");
      else
        v3 = CFSTR("NO");
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v32 = v4;
      v33 = 2112;
      v34 = v3;
      v35 = 2112;
      v36 = v5;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "processArchivedRecordsFetchCompletionZoneID serverChangeToken %@ moreComing %@ recordZoneError %@", buf, 0x20u);
    }

  }
  v6 = *(void **)(a1 + 48);
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v6, "errorAnalyzer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "CKPartialError:hasErrorCode:", *(_QWORD *)(a1 + 40), &unk_1E9271638);

    v10 = IMOSLoggingEnabled(v9);
    if (v8)
    {
      if (v10)
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Record Zone Error says that the change token has expired", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 48), "_resetArvchivedRecordSyncToken");
      objc_msgSend(*(id *)(a1 + 48), "ckQueue");
      v12 = objc_claimAutoreleasedReturnValue();
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_1D155E55C;
      v23[3] = &unk_1E922D2D0;
      v23[4] = *(_QWORD *)(a1 + 48);
      v26 = *(_OWORD *)(a1 + 72);
      v24 = *(id *)(a1 + 56);
      v25 = *(id *)(a1 + 64);
      dispatch_async(v12, v23);

    }
    else
    {
      if (v10)
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          v32 = v19;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "//---** Error fetching archived messages: %@", buf, 0xCu);
        }

      }
      v20 = *(_QWORD *)(a1 + 64);
      if (v20)
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v20 + 16))(v20, 0, 0, *(_QWORD *)(a1 + 40));
    }
  }
  else
  {
    v13 = objc_msgSend(v6, "setArchivedRecordSyncToken:", *(_QWORD *)(a1 + 32));
    v14 = *(_BYTE *)(a1 + 88) == 0;
    v15 = IMOSLoggingEnabled(v13);
    if (v14)
    {
      if (v15)
      {
        OSLogHandleForIMFoundationCategory();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "No more archived records to fetch. Resetting defaults to fetch archived records", buf, 2u);
        }

      }
      IMSetDomainBoolForKey();
      v22 = *(_QWORD *)(a1 + 64);
      if (v22)
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v22 + 16))(v22, 1, 1, 0);
    }
    else
    {
      if (v15)
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "There are more changes to fetch from archived zone. Kicking off another batch of fetching", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 48), "ckQueue");
      v17 = objc_claimAutoreleasedReturnValue();
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D155E540;
      block[3] = &unk_1E922D2D0;
      block[4] = *(_QWORD *)(a1 + 48);
      v30 = *(_OWORD *)(a1 + 72);
      v28 = *(id *)(a1 + 56);
      v29 = *(id *)(a1 + 64);
      dispatch_async(v17, block);

    }
  }
}

uint64_t sub_1D155E540(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fetchArchivedRecordsIfNeeded:currentBatchCount:maxNumberOfBatches:activity:withCompletionBlock:", 1, *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D155E55C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fetchArchivedRecordsIfNeeded:currentBatchCount:maxNumberOfBatches:activity:withCompletionBlock:", 1, *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1D155EAC0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  void *v6;
  int v7;
  id v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(v3, "recordID");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "_stringForKey:", CFSTR("guid"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412546;
      v8 = v5;
      v9 = 2112;
      v10 = v6;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Fetch archived record %@ guid %@", (uint8_t *)&v7, 0x16u);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_processRecordChange:", v3);

}

void sub_1D155EBFC(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "** THIS SHOULD NOT GET CALLED WHILE FETCHING ARCHIVED RECORDS **", v7, 2u);
    }

  }
}

uint64_t sub_1D155ECAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processArchivedRecordsFetchCompletionZoneID:serverChangeToken:moreComing:currentBatchCount:maxNumberOfBatches:activity:error:completionBlock:", a2, a3, a4, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 40), a5, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D155ECEC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processFetchArchivedRecordCompletionWithError_WithCompletionBlock_);
}

void sub_1D155EFA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const __CFString *v4;
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  const __CFString *v29;
  const __CFString *v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  const __CFString *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  _QWORD v48[5];
  id v49;
  id v50;
  uint64_t v51;
  __int128 v52;
  uint8_t buf[4];
  const __CFString *v54;
  __int16 v55;
  const __CFString *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  const __CFString *v60;
  __int16 v61;
  void *v62;
  __int16 v63;
  void *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = IMOSLoggingEnabled(a1);
  if ((_DWORD)v2)
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(a1 + 96))
        v4 = CFSTR("YES");
      else
        v4 = CFSTR("NO");
      v6 = *(const __CFString **)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(a1 + 97))
        v7 = CFSTR("YES");
      else
        v7 = CFSTR("NO");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 72));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 80));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138413570;
      v54 = v6;
      v55 = 2112;
      v56 = v4;
      v57 = 2112;
      v58 = v5;
      v59 = 2112;
      v60 = v7;
      v61 = 2112;
      v62 = v8;
      v63 = 2112;
      v64 = v9;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "recordZoneFetchCompletionBlock serverChangeToken %@ moreComing %@ recordZoneError %@ archivedRecordsHintIsPresent %@, currentBatchCount %@ maxNumberOfBatches:%@", buf, 0x3Eu);

    }
  }
  if (*(_BYTE *)(a1 + 97))
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Setting shouldFetchArchivedRecords to true", buf, 2u);
      }

    }
    IMSetDomainBoolForKey();
  }
  objc_msgSend(*(id *)(a1 + 48), "errorAnalyzer");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "errorIndicatesZoneNotCreated:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 48), "errorAnalyzer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "errorIndicatesUserDeletedZone:", *(_QWORD *)(a1 + 40));

  v15 = *(void **)(a1 + 48);
  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(v15, "errorAnalyzer");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend(v16, "CKPartialError:hasErrorCode:", *(_QWORD *)(a1 + 40), &unk_1E9271638);

    if (v17)
    {
      if (IMOSLoggingEnabled(v18))
      {
        OSLogHandleForIMFoundationCategory();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Record Zone Error says that the change token has expired", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 48), "clearLocalSyncState:", 17);
      v20 = *(_QWORD *)(a1 + 64);
      if (v20)
LABEL_24:
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v20 + 16))(v20, 0, 0, 0, *(_QWORD *)(a1 + 40));
    }
    else
    {
      v27 = IMOSLoggingEnabled(v18);
      if (v12 | v14)
      {
        if ((_DWORD)v27)
        {
          OSLogHandleForIMFoundationCategory();
          v28 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            v29 = CFSTR("zone not created");
            v30 = *(const __CFString **)(a1 + 40);
            if (v14)
              v29 = CFSTR("user deleted zone");
            *(_DWORD *)buf = 138412546;
            v54 = v29;
            v55 = 2112;
            v56 = v30;
            _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "We got a %@ error while fetching messages. %@", buf, 0x16u);
          }

        }
        if (v14)
        {
          if (IMOSLoggingEnabled(v27))
          {
            OSLogHandleForIMFoundationCategory();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v31, OS_LOG_TYPE_INFO, "Resetting local message sync state & last sync date after received user deleted zone error", buf, 2u);
            }

          }
          objc_msgSend(*(id *)(a1 + 48), "clearLocalSyncState:", 3);
          objc_msgSend(*(id *)(a1 + 48), "ckUtilities");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v32, "resetLastSyncDate");

        }
        if (IMOSLoggingEnabled(v27))
        {
          OSLogHandleForIMFoundationCategory();
          v33 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Messages zone does not exist. Attempting to create one", buf, 2u);
          }

        }
        v34 = objc_msgSend(*(id *)(a1 + 48), "_messageZoneCreated");
        if ((_DWORD)v34)
        {
          objc_msgSend(*(id *)(a1 + 48), "_fetchMessageZoneChangesSyncType:currentBatchCount:maxNumberOfBatches:activity:completionBlock:", *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 72) + 1, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
        }
        else
        {
          if (IMOSLoggingEnabled(v34))
          {
            OSLogHandleForIMFoundationCategory();
            v40 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "//---** Error creating  messages zone", buf, 2u);
            }

          }
          v41 = *(_QWORD *)(a1 + 64);
          if (v41)
          {
            objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CD8], 1, 0);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, void *))(v41 + 16))(v41, 0, 0, 0, v42);

          }
        }
      }
      else
      {
        if ((_DWORD)v27)
        {
          OSLogHandleForIMFoundationCategory();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            v36 = *(const __CFString **)(a1 + 40);
            *(_DWORD *)buf = 138412290;
            v54 = v36;
            _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "//---** Error fetching messages: %@", buf, 0xCu);
          }

        }
        v20 = *(_QWORD *)(a1 + 64);
        if (v20)
          goto LABEL_24;
      }
    }
  }
  else
  {
    v21 = objc_msgSend(v15, "setLatestSyncToken:", *(_QWORD *)(a1 + 32));
    v22 = *(_BYTE *)(a1 + 96) == 0;
    v23 = IMOSLoggingEnabled(v21);
    if (v22)
    {
      if ((_DWORD)v23)
      {
        OSLogHandleForIMFoundationCategory();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Done fetching changes from message zone.", buf, 2u);
        }

      }
      v38 = *(_QWORD *)(a1 + 80);
      if (v38 >= 1 && *(_QWORD *)(a1 + 72) <= v38)
      {
        if (IMOSLoggingEnabled(v23))
        {
          OSLogHandleForIMFoundationCategory();
          v43 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v43, OS_LOG_TYPE_INFO, "Done fetching changes from message zone during an initial sync. Let's not write up", buf, 2u);
          }

        }
        v39 = 0;
      }
      else
      {
        v39 = 1;
      }
      v44 = IMGetDomainBoolForKeyWithDefaultValue();
      v45 = v44;
      if ((_DWORD)v44 && IMOSLoggingEnabled(v44))
      {
        OSLogHandleForIMFoundationCategory();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v46, OS_LOG_TYPE_INFO, "Done fetching live records. Will now fetch archived records", buf, 2u);
        }

      }
      v47 = *(_QWORD *)(a1 + 64);
      if (v47)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v47 + 16))(v47, 1, v45, v39, 0);
    }
    else
    {
      if ((_DWORD)v23)
      {
        OSLogHandleForIMFoundationCategory();
        v24 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "There are more changes to fetch. Kicking off another batch of fetching", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 48), "syncBatchCompleted:", *(_QWORD *)(a1 + 72));
      objc_msgSend(*(id *)(a1 + 48), "ckQueue");
      v25 = objc_claimAutoreleasedReturnValue();
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 3221225472;
      v48[2] = sub_1D155F8A8;
      v48[3] = &unk_1E922D388;
      v26 = *(_QWORD *)(a1 + 88);
      v48[4] = *(_QWORD *)(a1 + 48);
      v51 = v26;
      v52 = *(_OWORD *)(a1 + 72);
      v49 = *(id *)(a1 + 56);
      v50 = *(id *)(a1 + 64);
      dispatch_async(v25, v48);

    }
  }
}

uint64_t sub_1D155F8A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_fetchMessageZoneChangesSyncType:currentBatchCount:maxNumberOfBatches:activity:completionBlock:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64) + 1, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D155FAF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_1D1560358(_Unwind_Exception *exc_buf, int a2)
{
  uint64_t v2;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D1560178);
  }
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D156044C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_processRecordChange:", a2);
}

void sub_1D1560458(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  uint8_t v10[16];

  v6 = a2;
  v7 = a3;
  v8 = a4;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "***recordZoneChangeTokensUpdatedBlock should not get called", v10, 2u);
    }

  }
}

void sub_1D1560518(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  int v7;
  id v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = 138412546;
      v8 = v4;
      v9 = 2112;
      v10 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "*** Deleted recordID %@ type %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

uint64_t sub_1D156060C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D156061C(uint64_t a1)
{

}

void sub_1D1560624(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;

  v11 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v13 = a6;
  v14 = a4;
  v15 = a3;
  v17 = a2;
  LOBYTE(v16) = objc_msgSend(v11, "_shouldFetchArchivedRecords:", v12);
  objc_msgSend(*(id *)(a1 + 32), "_processRecordZoneFetchCompletionZoneID:serverChangeToken:clientChangeTokenData:moreComing:NSError:syncType:currentBatchCount:maxNumberOfBatches:shouldFetchArchivedRecords:activity:completionBlock:", v17, v15, v14, a5, v13, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), v16, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

uint64_t sub_1D15606F4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processFetchRecordZoneChangesCompletionWithError_completionBlock_);
}

void sub_1D15607D0(uint64_t a1, int a2, void *a3)
{
  id v4;
  NSObject *v5;
  const __CFString *v6;
  int v7;
  const __CFString *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (a2)
        v6 = CFSTR("YES");
      v7 = 138412546;
      v8 = v6;
      v9 = 2112;
      v10 = v4;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Finished a sync of deletes because we had an incompatible message earlier (%@): %@", (uint8_t *)&v7, 0x16u);
    }

  }
}

void sub_1D1560C9C(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v3[5];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1D1560D14;
  v3[3] = &unk_1E92284E8;
  v3[4] = v1;
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_writeDirtyMessagesToCloudKitWithActivity:completion:", v2, v3);

}

void sub_1D1560D14(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  char v13;
  uint8_t buf[4];
  const __CFString *v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if (a2)
        v7 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v15 = v7;
      v16 = 2112;
      v17 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Completed message write %@ %@", buf, 0x16u);
    }

  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D1560E88;
  v10[3] = &unk_1E922D480;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v13 = a2;
  v11 = v5;
  v12 = v8;
  v9 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v10);

}

uint64_t sub_1D1560E88(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_noteSyncEnded");
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t sub_1D15610FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_noteSyncEnded");
}

void sub_1D15612D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[5];
  id v14;
  id v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  char v21;
  uint8_t buf[8];
  uint8_t *v23;
  uint64_t v24;
  char v25;

  v2 = objc_msgSend(*(id *)(a1 + 32), "_shouldMarkAllMessagesAsNeedingSync");
  if ((_DWORD)v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "clearLocalSyncState:", 2);
    v2 = objc_msgSend(*(id *)(a1 + 32), "_hasMarkedAllMessagesAsNeedingSync");
  }
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = -1;
  }
  else
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "*** We were called to do an initial sync. Let's only fetch the first set of messages ***", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", 0);
    v2 = objc_msgSend(*(id *)(a1 + 32), "_numberOfBatchesOfMessagesToFetchInInitialSync");
    v4 = v2;
    v3 = *(_QWORD *)(a1 + 56);
  }
  v6 = IMOSLoggingEnabled(v2);
  if (v3 > 1)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Unsupported sync type", buf, 2u);
      }

    }
    v12 = *(_QWORD *)(a1 + 48);
    if (v12)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v12 + 16))(v12, 0, 0);
  }
  else
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Marking any unsuccessfully synced messages as needing sync", buf, 2u);
      }

    }
    if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_markAllUnsuccessFullSyncMessagesAsNeedingSync")))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Finished Marking any unsuccessfully synced messages as needing sync", buf, 2u);
      }

    }
    *(_QWORD *)buf = 0;
    v23 = buf;
    v24 = 0x2020000000;
    v25 = 0;
    v20[0] = 0;
    v20[1] = v20;
    v20[2] = 0x2020000000;
    v21 = 0;
    v10 = *(void **)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1D1561628;
    v13[3] = &unk_1E922D4F8;
    v13[4] = v10;
    v18 = v4;
    v14 = v9;
    v15 = *(id *)(a1 + 48);
    v16 = buf;
    v19 = *(_QWORD *)(a1 + 56);
    v17 = v20;
    objc_msgSend(v10, "_fetchMessageZoneChangesSyncType:currentBatchCount:maxNumberOfBatches:activity:completionBlock:", 1, 0, v4, v14, v13);

    _Block_object_dispose(v20, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_1D1561628(uint64_t a1, int a2, uint64_t a3, char a4, void *a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id *v19;
  id *v20;
  NSObject *v21;
  const __CFString *v22;
  id v23;
  uint64_t v24;
  _QWORD block[5];
  id v26;
  _QWORD v27[2];
  char v28;
  _QWORD v29[5];
  uint64_t v30;
  id v31;
  _QWORD v32[4];
  char v33;
  char v34;
  char v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  const __CFString *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = a5;
  v10 = v9;
  if (v9 || !a2)
  {
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
          v22 = CFSTR("YES");
        else
          v22 = CFSTR("NO");
        *(_DWORD *)buf = 138412546;
        v37 = v10;
        v38 = 2112;
        v39 = v22;
        _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "******** Failed fetching live messages with CKError %@ completionBlockCalledWhenFetchFailed %@", buf, 0x16u);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1561CB8;
    block[3] = &unk_1E922D4A8;
    block[4] = *(_QWORD *)(a1 + 32);
    v19 = (id *)v27;
    v23 = *(id *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 64);
    v27[0] = v23;
    v27[1] = v24;
    v28 = a2;
    v20 = &v26;
    v26 = v10;
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(void **)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_1D156188C;
    v29[3] = &unk_1E922D4D0;
    v33 = a3;
    v34 = a4;
    v29[4] = v12;
    v14 = *(id *)(a1 + 48);
    v35 = a2;
    v30 = 0;
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 80);
    v32[0] = v14;
    v32[1] = v15;
    v32[3] = v16;
    v17 = *(id *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 64);
    v31 = v17;
    v32[2] = v18;
    objc_msgSend(v12, "_fetchArchivedRecordsIfNeeded:currentBatchCount:maxNumberOfBatches:activity:withCompletionBlock:", a3, 0, v11, v13, v29);

    v19 = (id *)v32;
    v20 = (id *)&v30;
  }

}

void sub_1D156188C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const __CFString *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD block[5];
  id v17;
  id v18;
  uint64_t v19;
  char v20;
  _QWORD v21[5];
  id v22;
  id v23;
  char v24;
  uint8_t buf[4];
  void *v26;
  __int16 v27;
  const __CFString *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = a4;
  v7 = v6;
  if (v6 || !a3)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
          v12 = CFSTR("YES");
        else
          v12 = CFSTR("NO");
        *(_DWORD *)buf = 138412546;
        v26 = v7;
        v27 = 2112;
        v28 = v12;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "******** Failed fetching archived messages with CKError %@ completionBlockCalledWhenFetchFailed %@", buf, 0x16u);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1561C5C;
    block[3] = &unk_1E922D4A8;
    block[4] = *(_QWORD *)(a1 + 32);
    v13 = *(id *)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 72);
    v18 = v13;
    v19 = v14;
    v20 = a3;
    v17 = v7;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    if (*(_BYTE *)(a1 + 88))
    {
      v6 = (id)IMOSLoggingEnabled(0);
      if ((_DWORD)v6)
      {
        OSLogHandleForIMFoundationCategory();
        v8 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Done fetching archived records.", buf, 2u);
        }

      }
    }
    if (*(_BYTE *)(a1 + 89))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
      if (*(_BYTE *)(v9 + 24))
      {
        if (IMOSLoggingEnabled(v6))
        {
          OSLogHandleForIMFoundationCategory();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Not calling write messages on second callback from fetch archived records", buf, 2u);
          }

        }
      }
      else
      {
        *(_BYTE *)(v9 + 24) = 1;
        objc_msgSend(*(id *)(a1 + 32), "_kickOffWriteIfNeededForSyncType:activity:completion:", *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      }
    }
    else
    {
      if (IMOSLoggingEnabled(v6))
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, " ****** This was an initial fetch. Not writing messages *****", buf, 2u);
        }

      }
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_1D1561C18;
      v21[3] = &unk_1E922D480;
      v21[4] = *(_QWORD *)(a1 + 32);
      v23 = *(id *)(a1 + 56);
      v24 = *(_BYTE *)(a1 + 90);
      v22 = *(id *)(a1 + 40);
      dispatch_async(MEMORY[0x1E0C80D38], v21);

    }
  }

}

uint64_t sub_1D1561C18(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_noteSyncEnded");
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40));
  return result;
}

uint64_t sub_1D1561C5C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "_noteSyncEnded");
  if (*(_QWORD *)(a1 + 48))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (!*(_BYTE *)(v3 + 24))
    {
      *(_BYTE *)(v3 + 24) = 1;
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
  }
  return result;
}

uint64_t sub_1D1561CB8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = objc_msgSend(*(id *)(a1 + 32), "_noteSyncEnded");
  if (*(_QWORD *)(a1 + 48))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (!*(_BYTE *)(v3 + 24))
    {
      *(_BYTE *)(v3 + 24) = 1;
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
  }
  return result;
}

uint64_t sub_1D1561E38(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteMessageZone");

  return objc_msgSend(*(id *)(a1 + 32), "clearLocalSyncState:", 3);
}

void sub_1D1562164(uint64_t a1)
{
  __CFArray *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  __CFArray *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  uint64_t v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v3);
        if (v2)
        {
          v7 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend(v7, "recordName");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = v8 == 0;

          if (!v9)
          {
            objc_msgSend(v7, "recordName");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            CFArrayAppendValue(v2, v10);

          }
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    }
    while (v4);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "errorAnalyzer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "extractRecordIDsDeletedFromCKPartialError:", *(_QWORD *)(a1 + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_msgSend(v12, "count");
    if (v13)
    {
      if (IMOSLoggingEnabled(v13))
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Adding additional deleted record IDs from error", buf, 2u);
        }

      }
      -[__CFArray addObjectsFromArray:](v2, "addObjectsFromArray:", v12);
    }

  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v15 = v2;
  v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  v17 = v16;
  if (v16)
  {
    v18 = *(_QWORD *)v24;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(v15);
        v20 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v19);
        v16 = IMOSLoggingEnabled(v16);
        if ((_DWORD)v16)
        {
          OSLogHandleForIMFoundationCategory();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v32 = v20;
            _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Deleted recordIDs %@", buf, 0xCu);
          }

        }
        ++v19;
      }
      while (v17 != v19);
      v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
      v17 = v16;
    }
    while (v16);
  }

  objc_msgSend(*(id *)(a1 + 48), "_sharedIMDMessageStore");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "deleteMessagesFromTombStoneTableWithRecordIDs:", v15);

}

uint64_t sub_1D1562490(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D15626AC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordDeletionCompletion_error_completionBlock_);
}

void sub_1D1562BCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D1562C50;
  v5[3] = &unk_1E9229E80;
  v4 = *(id *)(a1 + 48);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v2, "_deleteMessagesWithRecordIDs:completion:", v3, v5);

}

void sub_1D1562C50(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint8_t buf[4];
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled(v3);
  if (v3)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "********* Error while deleting messages %@", buf, 0xCu);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1562E54;
    block[3] = &unk_1E92290A8;
    v12 = *(id *)(a1 + 40);
    v11 = v3;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Kicking off another batch delete to cloudKit", buf, 2u);
      }

    }
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1D1562E74;
    v8[3] = &unk_1E9229148;
    v7 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v9 = v7;
    dispatch_async(MEMORY[0x1E0C80D38], v8);

  }
}

uint64_t sub_1D1562E54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_1D1562E74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "syncDeletedMessagesToCloudKitWithCompletion:", *(_QWORD *)(a1 + 40));
}

void sub_1D156304C()
{
  IMDCKRecoverableMessageSyncController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKRecoverableMessageSyncController);
  v1 = (void *)qword_1ED935E30;
  qword_1ED935E30 = (uint64_t)v0;

}

uint64_t sub_1D1563404(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordRead_);
}

uint64_t sub_1D1563410(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordDeleted_type_);
}

uint64_t sub_1D1563420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onChangeTokenUpdated:token:data:", a2, a3, a4);
}

uint64_t sub_1D1563434(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordZoneFetchComplete_token_tokenData_moreComing_error_);
}

uint64_t sub_1D1563450(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onReadComplete_error_activity_completion_);
}

void sub_1D15635C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint8_t buf[4];
  void *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "setRecordsRead:", objc_msgSend(*(id *)(a1 + 32), "recordsRead") + 1);
  objc_msgSend(*(id *)(a1 + 40), "_dateForKey:", CFSTR("deleteDate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", CFSTR("guid"));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v13 = v2;
        v14 = 2112;
        v15 = v4;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Recently Deleted | Failed reading recoverable message record. deleteDate: %@ and messageGUID:%@ cannot be nil", buf, 0x16u);
      }

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "_dataForKey:", CFSTR("partBody"));
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (v7 && (JWDecodeCodableObjectWithStandardAllowlist(), (v9 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      objc_msgSend(*(id *)(a1 + 32), "_onRecoverableMessagePartRecordReadWithDeleteDate:messageGUID:partBody:", v2, v4, v9);
    }
    else
    {
      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v4;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v11, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "moveMessagesWithGUIDsToRecentlyDeleted:deleteDate:", v10, v2);

    }
  }

}

void sub_1D1563BBC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D1563B10);
  }
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 160), 8);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D1563C54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D1563C64(uint64_t a1)
{

}

void sub_1D1563C6C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;

  v13 = a2;
  if (objc_msgSend(v13, "integerValue") == a1[7])
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB36B8]), "initWithIndex:", a1[7]);
    v10 = *(_QWORD *)(a1[5] + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "setObject:forKeyedSubscript:", v12, v13);

    *a5 = 1;
  }

}

uint64_t sub_1D1563F6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", *(_QWORD *)(a1 + 40));
}

void sub_1D156451C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[16];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Attempting to create recoverable message zone", buf, 2u);
    }

  }
  v3 = objc_msgSend(*(id *)(a1 + 32), "_zoneCreated");
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
  }
  else
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "** Failed to create recoverable message zone **", v9, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.Messages.recoverableMessageSync"), 1, 0);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;
  }

}

uint64_t sub_1D1564790(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Resetting the sync token to nil", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", 0);
}

void sub_1D15649D0(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating recoverable message zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

uint64_t sub_1D1564D50(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordWrite_error_recordNameToPartIndexAndRowID_);
}

void sub_1D1564D6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v5;
  id v6;

  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
  v6 = a4;
  objc_msgSend(*(id *)(a1 + 32), "_onWriteComplete:error:shouldWriteMore:activity:completion:", *(_QWORD *)(a1 + 64), v6, objc_msgSend(v5, "count") == 200, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1D15655AC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D1565630;
  v5[3] = &unk_1E9229E80;
  v4 = *(id *)(a1 + 48);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  objc_msgSend(v2, "_deleteRecoverableMessagesWithRecordIDs:completion:", v3, v5);

}

void sub_1D1565630(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  uint8_t buf[4];
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = IMOSLoggingEnabled(v3);
  if (v3)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v14 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Recently Deleted | ********* Error while deleting recoverable messages %@", buf, 0xCu);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D1565834;
    block[3] = &unk_1E92290A8;
    v12 = *(id *)(a1 + 40);
    v11 = v3;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Recently Deleted | kicking off another batch delete to cloudKit", buf, 2u);
      }

    }
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = sub_1D1565854;
    v8[3] = &unk_1E9229148;
    v7 = *(void **)(a1 + 40);
    v8[4] = *(_QWORD *)(a1 + 32);
    v9 = v7;
    dispatch_async(MEMORY[0x1E0C80D38], v8);

  }
}

uint64_t sub_1D1565834(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, *(_QWORD *)(a1 + 32));
  return result;
}

uint64_t sub_1D1565854(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "syncRemovedRecoverableMessagesToCloudKitWithCompletion:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D1565A6C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordDeletionCompletion_error_completionBlock_);
}

void sub_1D1566428(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  id v10;
  uint8_t buf[16];

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "recoverableMessagesMetadataPendingCloudKitSaveWithLimit:", 200);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3 && (v4 = objc_msgSend(v3, "count")) != 0)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1D1566578;
    v7[3] = &unk_1E922D6F0;
    v5 = *(void **)(a1 + 40);
    v7[4] = *(_QWORD *)(a1 + 32);
    v8 = v5;
    v9 = *(id *)(a1 + 48);
    v10 = *(id *)(a1 + 56);
    objc_msgSend(v3, "enumerateObjectsUsingBlock:", v7);

  }
  else if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Recently Deleted | No recoverable messages data to sync", buf, 2u);
    }

  }
}

void sub_1D1566578(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "createCKRecordforRecoverableMessageMetadata:zoneID:recordNameToPartIndexAndRowID:", v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 56), "addObject:", v4);
  }
  else
  {
    if (IMOSLoggingEnabled(0))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "IMDCKRecoverableMessageSyncController | Recently Deleted: marking clean: Using partIndex fallback: could not convert message to CKRecord with metadata: %@", (uint8_t *)&v11, 0xCu);
      }

    }
    objc_msgSend(v3, "objectForKey:", CFSTR("messageRowID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "longLongValue");
    objc_msgSend(v3, "objectForKey:", CFSTR("partIndex"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "longLongValue");
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "updateRecoverableMessageSyncState:forMessageRowID:onPartIndex:", 1, v7, v9);

  }
}

void sub_1D15668E0(uint64_t a1)
{
  __CFArray *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  BOOL v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  __CFArray *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  uint64_t v32;
  _BYTE v33[128];
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v3 = *(id *)(a1 + 32);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v3);
        if (v2)
        {
          v7 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * i);
          objc_msgSend(v7, "recordName");
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = v8 == 0;

          if (!v9)
          {
            objc_msgSend(v7, "recordName");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            CFArrayAppendValue(v2, v10);

          }
        }
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v27, v34, 16);
    }
    while (v4);
  }

  if (*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "errorAnalyzer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "extractRecordIDsDeletedFromCKPartialError:", *(_QWORD *)(a1 + 40));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_msgSend(v12, "count");
    if (v13)
    {
      if (IMOSLoggingEnabled(v13))
      {
        OSLogHandleForIMFoundationCategory();
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Adding additional deleted recoverable record IDs from error", buf, 2u);
        }

      }
      -[__CFArray addObjectsFromArray:](v2, "addObjectsFromArray:", v12);
    }

  }
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v15 = v2;
  v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  v17 = v16;
  if (v16)
  {
    v18 = *(_QWORD *)v24;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(v15);
        v20 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v19);
        v16 = IMOSLoggingEnabled(v16);
        if ((_DWORD)v16)
        {
          OSLogHandleForIMFoundationCategory();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v32 = v20;
            _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Deleted recoverable recordIDs %@", buf, 0xCu);
          }

        }
        ++v19;
      }
      while (v17 != v19);
      v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
      v17 = v16;
    }
    while (v16);
  }

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "clearRecoverableMessageTombStones");

}

uint64_t sub_1D1566C0C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D15671B4(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteRecoverableMessageZone");

  return objc_msgSend(*(id *)(a1 + 32), "clearLocalSyncState:", 3);
}

void sub_1D156735C()
{
  IMDRelayTranscodeController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDRelayTranscodeController);
  v1 = (void *)qword_1ED935E38;
  qword_1ED935E38 = (uint64_t)v0;

}

id IMDaemonCoreBundle()
{
  if (qword_1EFC63E18 != -1)
    dispatch_once(&qword_1EFC63E18, &unk_1E922D730);
  return (id)qword_1EFC63E20;
}

void sub_1D15677B0()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EFC63E20;
  qword_1EFC63E20 = v0;

}

id sub_1D15677F8()
{
  if (qword_1ED936088 != -1)
    dispatch_once(&qword_1ED936088, &unk_1E922D750);
  return (id)qword_1ED936080;
}

void sub_1D1567838()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0D36AE8]);
  v1 = (void *)qword_1ED936080;
  qword_1ED936080 = (uint64_t)v0;

}

void sub_1D1567860(void *a1)
{
  void *v2;
  void *v3;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x1E0C80C00];
  v4[0] = CFSTR("action");
  v4[1] = CFSTR("time");
  v5[0] = CFSTR("incomingMessageProcessedByDaemon");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v5[1] = v2;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(a1, "postCoreAutomationNotificationWithDictionary:withVerboseLogging:", v3, 1);
}

void sub_1D1567CC8()
{
  objc_end_catch();
  JUMPOUT(0x1D1567CD0);
}

void sub_1D15682BC(uint64_t a1, void *a2)
{
  char isKindOfClass;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  int v8;
  id v9;

  v9 = a2;
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = v9;
  if ((isKindOfClass & 1) != 0)
  {
    v5 = v9;
    objc_msgSend(*(id *)(a1 + 32), "toIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_stripFZIDPrefix");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v5, "isEqualToString:", v7);

    if (v8)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) |= 0x10000000uLL;

    v4 = v9;
  }

}

void sub_1D156B4C8()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init((Class)objc_opt_class());
  v1 = (void *)qword_1ED935E40;
  qword_1ED935E40 = (uint64_t)v0;

}

void sub_1D156BC1C(uint64_t a1, unint64_t a2, void *a3)
{
  void *v3;
  id v6;
  NSObject *v7;
  id v8;
  void *v9;
  __CFString *v10;
  uint64_t v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_savePreviousDeviceState:", *(_QWORD *)(a1 + 40))))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      NSStringFromIMDCKBackupControllerResult(a2);
      v8 = (id)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        v9 = (void *)MEMORY[0x1E0CB3940];
        objc_msgSend(v6, "localizedDescription");
        v3 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "stringWithFormat:", CFSTR("Error: %@"), v3);
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v10 = &stru_1E92346B0;
      }
      *(_DWORD *)buf = 138412546;
      v13 = v8;
      v14 = 2112;
      v15 = v10;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Finished checking iCloud backup state with result: %@ %@", buf, 0x16u);
      if (v6)
      {

      }
    }

  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(uint64_t, unint64_t, id))(v11 + 16))(v11, a2, v6);

}

__CFString *NSStringFromIMDCKBackupControllerResult(unint64_t a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return off_1E922D850[a1];
}

void sub_1D156BDC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v5 = a3;
  if (v5)
  {
LABEL_2:
    v6 = 8;
  }
  else
  {
    switch(a2)
    {
      case 0:
        goto LABEL_2;
      case 1:
        objc_msgSend(*(id *)(a1 + 32), "writeUserDefault:forKey:", 0, CFSTR("IMDCKBackupControllerWrittenQuotaRecordKeyV2"));
        v5 = 0;
        goto LABEL_8;
      case 2:
LABEL_8:
        v6 = 4;
        break;
      case 3:
        if (objc_msgSend(*(id *)(a1 + 32), "iCloudBackupsDisabled"))
        {
          objc_msgSend(*(id *)(a1 + 32), "setICloudBackupsDisabled:", 0);
          v6 = 2;
        }
        else
        {
          v6 = 7;
        }
        goto LABEL_16;
      case 4:
        if ((objc_msgSend(*(id *)(a1 + 32), "iCloudBackupsDisabled") & 1) != 0)
          v6 = 6;
        else
          v6 = objc_msgSend(*(id *)(a1 + 32), "_attemptToDisableiCloudBackupsWithCurrentDeviceState:", *(_QWORD *)(a1 + 40));
LABEL_16:
        v5 = 0;
        break;
      default:
        v6 = 0;
        break;
    }
  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = v5;
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, v6);
    v5 = v8;
  }

}

void sub_1D156CE44(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D156CE0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D156D114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  id v9;
  NSObject *v10;
  void *v11;

  if (a2 == 1)
  {
    v9 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v9, "description");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(a9) = 138412290;
        *(_QWORD *)((char *)&a9 + 4) = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Exception creating weak ref for MBManager: %@", (uint8_t *)&a9, 0xCu);

      }
    }

    objc_end_catch();
    JUMPOUT(0x1D156D0CCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D156D1F8()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  qword_1EFC63E28 = MEMORY[0x1D17EA3EC](CFSTR("MBManager"), CFSTR("MobileBackup"));
  if (IMOSLoggingEnabled(qword_1EFC63E28))
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (qword_1EFC63E28)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_1D1413000, v0, OS_LOG_TYPE_INFO, "Loaded MBManagerClass: %@", (uint8_t *)&v2, 0xCu);
    }

  }
}

void sub_1D156D3A8()
{
  NSObject *v0;
  const __CFString *v1;
  int v2;
  const __CFString *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  off_1EFC63E38 = (uint64_t (*)(void))MEMORY[0x1D17EA3F8]("BYSetupAssistantNeedsToRun", CFSTR("SetupAssistant"));
  if (IMOSLoggingEnabled(off_1EFC63E38))
  {
    OSLogHandleForIMFoundationCategory();
    v0 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1EFC63E38)
        v1 = CFSTR("YES");
      else
        v1 = CFSTR("NO");
      v2 = 138412290;
      v3 = v1;
      _os_log_impl(&dword_1D1413000, v0, OS_LOG_TYPE_INFO, "Linked BYSetupAssistantNeedsToRun ok: %@", (uint8_t *)&v2, 0xCu);
    }

  }
}

id _IMCreatePredicateWithDeviceUDIDAndDeviceUUID(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[16];

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3 && v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("deviceId = %@ AND deviceUDID = %@ AND domain = %@"), v3, v4, CFSTR("MediaDomain"));
LABEL_8:
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("deviceUDID = %@ AND domain = %@"), v4, CFSTR("MediaDomain"), v9);
    goto LABEL_8;
  }
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("deviceId = %@ AND domain = %@"), v3, CFSTR("MediaDomain"), v9);
    goto LABEL_8;
  }
  if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Failed to create predicate because both deviceUDID and deviceUUID are nil", buf, 2u);
    }

  }
  v6 = 0;
LABEL_9:

  return v6;
}

void sub_1D156DDC8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  int v13;
  void *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = IMOSLoggingEnabled(v6);
  if (v6)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "predicateFormat");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412546;
        v14 = v9;
        v15 = 2112;
        v16 = v6;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Failed to update cloudkit with query '%@', with error: %@", (uint8_t *)&v13, 0x16u);

      }
    }
  }
  else
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "predicateFormat");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = 138412290;
        v14 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Successfully updated cloudkit with query: '%@'", (uint8_t *)&v13, 0xCu);

      }
    }
    objc_msgSend(*(id *)(a1 + 40), "writeUserDefault:forKey:", MEMORY[0x1E0C9AAB0], CFSTR("IMDCKBackupControllerWrittenQuotaRecordKeyV2"));
  }
  v12 = *(_QWORD *)(a1 + 48);
  if (v12)
    (*(void (**)(uint64_t, BOOL, id))(v12 + 16))(v12, v6 == 0, v6);

}

void sub_1D156DF70(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D156DF00);
  }
  _Unwind_Resume(a1);
}

void sub_1D156F45C()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend((id)*MEMORY[0x1E0D37C20], "stringByResolvingAndStandardizingPath");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  IMSharedHelperEnsureDirectoryExistsAtPath();
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("rateLimiter.plist"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ED936298;
  qword_1ED936298 = v0;

}

void sub_1D156F7B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  id v7;
  BOOL v8;
  NSObject *v9;
  id v10;

  v2 = (void *)MEMORY[0x1E0C99E98];
  +[IMDCollaborationNoticeRateLimiter peristencePath](IMDCollaborationNoticeRateLimiter, "peristencePath");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "fileURLWithPath:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "noticeEventHistory");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  v6 = objc_msgSend(v5, "writeToURL:error:", v4, &v10);
  v7 = v10;

  if (v6)
    v8 = v7 == 0;
  else
    v8 = 0;
  if (!v8)
  {
    IMLogHandleForCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1D166BD54((uint64_t)v7, v9);

  }
}

const __CFString *sub_1D156F904()
{
  return CFSTR("attachment");
}

id sub_1D156F910(void *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;

  objc_msgSend(a1, "permanentHighQualityLocalPath");
  v2 = objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = (void *)v2;
    objc_msgSend(a1, "_fileManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "permanentHighQualityLocalPath");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "fileExistsAtPath:", v5);

    if (v6)
    {
      v7 = (void *)MEMORY[0x1E0C99E98];
      objc_msgSend(a1, "permanentHighQualityLocalPath");
      v8 = objc_claimAutoreleasedReturnValue();
LABEL_7:
      v13 = (void *)v8;
      objc_msgSend(v7, "fileURLWithPath:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      return v9;
    }
  }
  objc_msgSend(a1, "localPath");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    objc_msgSend(a1, "_fileManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "localPath");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v10, "fileExistsAtPath:", v11);

    if (!v12)
    {
      v9 = 0;
      return v9;
    }
    v7 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(a1, "localPath");
    v8 = objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  return v9;
}

uint64_t sub_1D156FA34(void *a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  id v11;
  uint8_t buf[4];
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "length");

  if (v3)
  {
    v4 = objc_alloc(MEMORY[0x1E0CB3710]);
    objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 0;
    v6 = (void *)objc_msgSend(v4, "initForReadingFromData:error:", v5, &v11);
    v7 = v11;

    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C95048]), "initWithCoder:", v6);
    v3 = v8;
    if (v7 && IMOSLoggingEnabled(v8))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v13 = v7;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Failed to unarchive ckrecord. Error: %@", buf, 0xCu);
      }

    }
  }
  return v3;
}

id sub_1D156FB90(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_msgSend(a1, "_copyCKRecordFromExistingCKMetadata");
  objc_msgSend(v1, "recordID");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "copy");

  return v3;
}

id sub_1D156FBD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;

  v3 = a3;
  if (v3
    && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v3, "path"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = objc_msgSend(v4, "fileExistsAtPath:", v5),
        v5,
        v4,
        v6))
  {
    objc_msgSend(v3, "path");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    IMSharedHelperMD5HashOfFileAtPath();
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_1D156FD58(_Unwind_Exception *exc_buf, int a2)
{
  int v2;

  if (a2 == v2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D156FD10);
  }
  objc_end_catch();
  _Unwind_Resume(exc_buf);
}

id sub_1D156FD94(void *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(a1, "_assetURLToInsertToRecord");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "md5HashForURL:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1D156FDD8(void *a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  objc_msgSend(a1, "cloudKitServerChangeTokenBlob");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    v6 = (void *)objc_msgSend(a1, "_copyCKRecordFromExistingCKMetadata");
    objc_msgSend(v6, "etag");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setEtag:", v7);

    objc_msgSend(v8, "setKnownToServer:", 1);
  }

}

id sub_1D156FE68(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  objc_msgSend(a1, "cloudKitRecordID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {

    goto LABEL_4;
  }
  if (objc_msgSend(v7, "length"))
  {
LABEL_4:
    objc_msgSend(a1, "cloudKitRecordID");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    v11 = IMOSLoggingEnabled(v10);
    if (v9)
    {
      if (v11)
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(a1, "cloudKitRecordID");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = 138412290;
          v22 = v13;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Record ID from existing cloudKitRecordID: %@", (uint8_t *)&v21, 0xCu);

        }
      }
      v14 = objc_alloc(MEMORY[0x1E0C95070]);
      objc_msgSend(a1, "cloudKitRecordID");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v14, "initWithRecordName:zoneID:", v15, v6);

    }
    else
    {
      if (v11)
      {
        OSLogHandleForIMFoundationCategory();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          LOWORD(v21) = 0;
          _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "No cloudKitRecordID, derived record ID", (uint8_t *)&v21, 2u);
        }

      }
      objc_msgSend(a1, "_ckUniqueID");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      +[CKRecordUtilities recordIDUsingSalt:zoneID:guid:](CKRecordUtilities, "recordIDUsingSalt:zoneID:guid:", v7, v6, v18);
      v16 = (void *)objc_claimAutoreleasedReturnValue();

    }
    goto LABEL_20;
  }
  if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Cannot generate record ID because salt is nil.", (uint8_t *)&v21, 2u);
    }

  }
  v16 = 0;
LABEL_20:

  return v16;
}

uint64_t sub_1D15700FC(void *a1)
{
  if (objc_msgSend(a1, "transferState") == 9)
    return 5;
  else
    return objc_msgSend(a1, "transferState");
}

id sub_1D1570138(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  double v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  BOOL v42;
  void *v43;
  void *v44;
  BOOL v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  BOOL v50;
  void *v51;
  void *v52;
  BOOL v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  int v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  NSObject *v66;
  NSObject *v67;
  id v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  int v77;
  uint64_t v78;
  NSObject *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  NSObject *v85;
  void *v86;
  void *v87;
  id v89;
  uint8_t buf[4];
  id v91;
  __int16 v92;
  void *v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v89 = a3;
  v6 = a4;
  v7 = objc_msgSend(a1, "_copyCKRecordFromExistingCKMetadata");
  if (v7)
  {
    v8 = (void *)v7;
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v8, "recordID");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "recordName");
        v11 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "guid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v91 = v11;
        v92 = 2112;
        v93 = v12;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Initialed CKRecord %@ for transfer %@ using record data from DB", buf, 0x16u);

      }
    }
LABEL_12:
    v20 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v20, "setObject:forKey:", &unk_1E9271668, CFSTR("vers"));
    objc_msgSend(a1, "guid");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v21, CFSTR("aguid"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "hideAttachment"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v22, CFSTR("ha"));

    objc_msgSend(a1, "userInfo");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    if (v23)
    {
      objc_msgSend(a1, "userInfo");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v24, CFSTR("ui"));

    }
    objc_msgSend(a1, "stickerUserInfo");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (v25)
    {
      objc_msgSend(a1, "stickerUserInfo");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v26, CFSTR("sui"));

    }
    objc_msgSend(a1, "attributionInfo");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      objc_msgSend(a1, "attributionInfo");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      IMStripTransferConstraintAndSizeKeys();
      v29 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v20, "setObject:forKey:", v29, CFSTR("aui"));
    }
    v30 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a1, "createdDate");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "timeIntervalSinceReferenceDate");
    objc_msgSend(v30, "numberWithLongLong:", (uint64_t)v32);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v33, CFSTR("cdt"));

    v34 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(a1, "startDate");
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "timeIntervalSinceReferenceDate");
    objc_msgSend(v34, "numberWithLongLong:", (uint64_t)v36);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v37, CFSTR("sdt"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, "totalBytes"));
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v38, CFSTR("tb"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "isSticker"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v39, CFSTR("is"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(a1, "isIncoming"));
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v40, CFSTR("ig"));

    objc_msgSend(a1, "filename");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v41, "length") == 0;

    if (!v42)
    {
      objc_msgSend(a1, "filename");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v43, CFSTR("tn"));

    }
    objc_msgSend(a1, "localPath");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = objc_msgSend(v44, "length") == 0;

    if (!v45)
    {
      objc_msgSend(a1, "localPath");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v46, CFSTR("fn"));

    }
    v47 = objc_msgSend(a1, "backwardsCompatibleTransferState");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "setObject:forKey:", v48, CFSTR("st"));

    objc_msgSend(a1, "type");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    v50 = objc_msgSend(v49, "length") == 0;

    if (!v50)
    {
      objc_msgSend(a1, "type");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v51, CFSTR("t"));

    }
    objc_msgSend(a1, "mimeType");
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = objc_msgSend(v52, "length") == 0;

    if (!v53)
    {
      objc_msgSend(a1, "mimeType");
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setObject:forKey:", v54, CFSTR("mimet"));

    }
    objc_msgSend(a1, "_assetURLToInsertToRecord");
    v55 = objc_claimAutoreleasedReturnValue();
    v56 = (void *)v55;
    if (v55
      && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v57 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v56, "path"),
          v58 = (void *)objc_claimAutoreleasedReturnValue(),
          v59 = objc_msgSend(v57, "fileExistsAtPath:", v58),
          v58,
          v57,
          v59))
    {
      v60 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C94BB8]), "initWithFileURL:", v56);
      objc_msgSend(v8, "_setCKRecordAsset:forKey:", v60, CFSTR("lqa"));
      objc_msgSend(v56, "path");
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v61, "lastPathComponent");
      v62 = (void *)objc_claimAutoreleasedReturnValue();

      if (v62)
      {
        if (!objc_msgSend(v62, "length") && IMOSLoggingEnabled(0))
        {
          OSLogHandleForIMFoundationCategory();
          v64 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v91 = v62;
            v92 = 2112;
            v93 = v56;
            _os_log_impl(&dword_1D1413000, v64, OS_LOG_TYPE_INFO, "**** File a radar **** Asset last path component %@ from url %@ is empty", buf, 0x16u);
          }

        }
        objc_msgSend(v20, "setObject:forKey:", v62, CFSTR("pathc"));
      }
      else if (IMOSLoggingEnabled(v63))
      {
        OSLogHandleForIMFoundationCategory();
        v69 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v91 = v56;
          _os_log_impl(&dword_1D1413000, v69, OS_LOG_TYPE_INFO, "**** File a radar **** Asset last path component from url %@ is nil so cannot save it to metadata", buf, 0xCu);
        }

      }
      objc_msgSend(a1, "md5HashForURL:", v56);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v70, "length"))
        objc_msgSend(v20, "setObject:forKey:", v70, CFSTR("mdh"));

    }
    else
    {
      v65 = IMOSLoggingEnabled(v55);
      if ((_DWORD)v65)
      {
        OSLogHandleForIMFoundationCategory();
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v91 = v56;
          _os_log_impl(&dword_1D1413000, v66, OS_LOG_TYPE_INFO, "IMFileTransfer_CKRecord **** Transfer did not have URL or asset was missing on disk. URL %@", buf, 0xCu);
        }

      }
    }
    if (IMOSLoggingEnabled(v65))
    {
      OSLogHandleForIMFoundationCategory();
      v71 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(a1, "localPath");
        v72 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v91 = v72;
        _os_log_impl(&dword_1D1413000, v71, OS_LOG_TYPE_INFO, "Transfer file path %@", buf, 0xCu);

      }
    }
    objc_msgSend(a1, "_auxVideoPathIfItExists");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v73, "length"))
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v73);
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      if (v74)
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v74, "path");
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = objc_msgSend(v75, "fileExistsAtPath:", v76);

        if (v77)
        {
          if (IMOSLoggingEnabled(v78))
          {
            OSLogHandleForIMFoundationCategory();
            v79 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(a1, "guid");
              v80 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v91 = v80;
              _os_log_impl(&dword_1D1413000, v79, OS_LOG_TYPE_INFO, "%@ transfer has an aux video asset", buf, 0xCu);

            }
          }
          v81 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C94BB8]), "initWithFileURL:", v74);
          objc_msgSend(v8, "_setCKRecordAsset:forKey:", v81, CFSTR("avid"));
          objc_msgSend(v74, "path");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v82, "lastPathComponent");
          v83 = (void *)objc_claimAutoreleasedReturnValue();

          if (v83)
          {
            objc_msgSend(v20, "setObject:forKey:", v83, CFSTR("auxpathc"));
          }
          else if (IMOSLoggingEnabled(v84))
          {
            OSLogHandleForIMFoundationCategory();
            v85 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              v91 = v74;
              _os_log_impl(&dword_1D1413000, v85, OS_LOG_TYPE_INFO, "**** File a radar **** Aux asset last path component from url %@ is nil so cannot save it to metadata", buf, 0xCu);
            }

          }
        }
      }

    }
    JWEncodeDictionary();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v87 = (void *)objc_msgSend(v86, "_FTCopyGzippedData");
    objc_msgSend(v8, "_setCKRecordData:forKey:", v87, CFSTR("cm"));
    v68 = v8;

    goto LABEL_71;
  }
  v13 = objc_msgSend(v6, "length");
  v14 = IMOSLoggingEnabled(v13);
  if (v13)
  {
    if (v14)
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Initializing CKRecord using derived record ID", buf, 2u);
      }

    }
    objc_msgSend(a1, "_ckUniqueID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    +[CKRecordUtilities recordIDUsingSalt:zoneID:guid:](CKRecordUtilities, "recordIDUsingSalt:zoneID:guid:", v6, v89, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = objc_alloc(MEMORY[0x1E0C95048]);
    objc_msgSend(MEMORY[0x1E0D39848], "_recordType");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (void *)objc_msgSend(v18, "initWithRecordType:recordID:", v19, v17);

    objc_msgSend(a1, "_setRecordPropertiesBasedOnExistingRecord:", v8);
    goto LABEL_12;
  }
  if (v14)
  {
    OSLogHandleForIMFoundationCategory();
    v67 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v67, OS_LOG_TYPE_INFO, "Cannot initialize CKRecord using derived record ID because salt is nil.", buf, 2u);
    }

  }
  v68 = 0;
LABEL_71:

  return v68;
}

id sub_1D1570D30(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  objc_msgSend(v3, "_dataForKey:", CFSTR("cm"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "length");

  if (v5)
  {
    objc_msgSend(v3, "_dataForKey:", CFSTR("cm"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "_FTOptionallyDecompressData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    objc_msgSend(v3, "_dataForKey:", CFSTR("m"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "length");

    if (v9)
    {
      objc_msgSend(v3, "_dataForKey:", CFSTR("m"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (IMOSLoggingEnabled(v10))
      {
        OSLogHandleForIMFoundationCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v13 = 138412290;
          v14 = v3;
          _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "No transfer metadata found for record:%@", (uint8_t *)&v13, 0xCu);
        }

      }
      v7 = 0;
    }
  }

  return v7;
}

void sub_1D1570EA4(void *a1, uint64_t a2, void *a3)
{
  id v4;

  objc_msgSend(a3, "fileURL");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "cleanUpAssetURL:", v4);

}

void sub_1D1570EE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  char v8;
  id v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  id v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  id v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "path");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v4, "fileExistsAtPath:", v5);

    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 0;
      v8 = objc_msgSend(v7, "removeItemAtURL:error:", v3, &v13);
      v9 = v13;

      v11 = IMOSLoggingEnabled(v10);
      if ((v8 & 1) != 0)
      {
        if (v11)
        {
          OSLogHandleForIMFoundationCategory();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v15 = v3;
            _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Cleaned up attachment asset at %@", buf, 0xCu);
          }
LABEL_11:

        }
      }
      else if (v11)
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v15 = v3;
          v16 = 2112;
          v17 = v9;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Failed cleaning up attachment asset at %@, error %@", buf, 0x16u);
        }
        goto LABEL_11;
      }

    }
  }

}

uint64_t sub_1D15710B8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  __CFString *v13;
  uint64_t v14;
  NSObject *v15;
  __CFString *v16;
  NSObject *v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  __CFString *v31;
  NSObject *v32;
  __CFString *v33;
  uint64_t v34;
  __CFString *v35;
  uint64_t v36;
  __CFString *v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  NSObject *v41;
  NSObject *v42;
  id v44;
  id v45;
  uint8_t buf[4];
  const __CFString *v47;
  __int16 v48;
  __CFString *v49;
  __int16 v50;
  __CFString *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "_assetForKey:", CFSTR("lqa"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
    goto LABEL_42;
  v6 = objc_msgSend(a1, "transferState");
  if (v6
    && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(a1, "localPath"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v7, "fileExistsAtPath:", v8),
        v8,
        v7,
        v9))
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "localPath");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = 0;
    objc_msgSend(v10, "attributesOfItemAtPath:error:", v11, &v45);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (__CFString *)v45;

    if (v13)
    {
      if (IMOSLoggingEnabled(v14))
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(a1, "localPath");
          v16 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v47 = v16;
          v48 = 2112;
          v49 = v13;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Could not read file attributes of existing attachment at %@, %@", buf, 0x16u);

        }
      }
      goto LABEL_41;
    }
    objc_msgSend(v5, "fileURL");
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = (void *)v21;
    if (!v21
      || (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
          v23 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v22, "path"),
          v24 = (void *)objc_claimAutoreleasedReturnValue(),
          v25 = objc_msgSend(v23, "fileExistsAtPath:", v24),
          v24,
          v23,
          !v25))
    {
      if (IMOSLoggingEnabled(v21))
      {
        OSLogHandleForIMFoundationCategory();
        v32 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v22, "path");
          v33 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v47 = v33;
          v48 = 2112;
          v49 = 0;
          _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "Could not find file of the asset at %@, %@", buf, 0x16u);

        }
      }
      v13 = 0;
      goto LABEL_40;
    }
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "path");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = 0;
    objc_msgSend(v26, "attributesOfItemAtPath:error:", v27, &v44);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = (__CFString *)v44;

    if (v13)
    {
      if (IMOSLoggingEnabled(v29))
      {
        OSLogHandleForIMFoundationCategory();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v22, "path");
          v31 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v47 = v31;
          v48 = 2112;
          v49 = v13;
          _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "Could not read file attributes of new attachment at %@, %@", buf, 0x16u);

        }
      }
LABEL_39:

LABEL_40:
LABEL_41:

LABEL_42:
      v20 = 0;
      goto LABEL_43;
    }
    v34 = *MEMORY[0x1E0CB2AF0];
    objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0CB2AF0]);
    v35 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "objectForKey:", v34);
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = (__CFString *)v36;
    if (!v35 || !v36)
    {
      if (IMOSLoggingEnabled(v36))
      {
        OSLogHandleForIMFoundationCategory();
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v47 = v37;
          v48 = 2112;
          v49 = v35;
          _os_log_impl(&dword_1D1413000, v42, OS_LOG_TYPE_INFO, "Missing file size to compare: cloud size %@ local size %@", buf, 0x16u);
        }

      }
      goto LABEL_39;
    }
    v38 = -[__CFString unsignedLongValue](v35, "unsignedLongValue");
    v39 = -[__CFString unsignedLongValue](v37, "unsignedLongValue");
    v40 = v38 >= v39;
    v20 = v38 < v39;
    if (!v40 && IMOSLoggingEnabled(v39))
    {
      OSLogHandleForIMFoundationCategory();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        v47 = CFSTR("YES");
        v48 = 2112;
        v49 = v37;
        v50 = 2112;
        v51 = v35;
        _os_log_impl(&dword_1D1413000, v41, OS_LOG_TYPE_INFO, "Found a better asset in CKRecord %@, cloud size %@ local size %@", buf, 0x20u);
      }

    }
  }
  else
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(a1, "guid");
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(a1, "localPath");
        v19 = (__CFString *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v47 = v18;
        v48 = 2112;
        v49 = v19;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "For attachment %@ local file not found at %@", buf, 0x16u);

      }
    }
    v20 = objc_msgSend(MEMORY[0x1E0D39848], "attachmentRecordHasAsset:", v4);
  }
LABEL_43:

  return v20;
}

BOOL sub_1D15716D8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  __CFString *v15;
  _BOOL8 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  __CFString *v27;
  NSObject *v28;
  __CFString *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  NSObject *v36;
  id v38;
  id v39;
  uint8_t buf[4];
  const __CFString *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  objc_msgSend(v4, "_assetForKey:", CFSTR("lqa"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "localPath");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v6, "fileExistsAtPath:", v7);

    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1, "localPath");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = 0;
      objc_msgSend(v9, "attributesOfItemAtPath:error:", v10, &v39);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = v39;

      if (v12)
      {
        if (IMOSLoggingEnabled(v13))
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(a1, "localPath");
            v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412546;
            v41 = v15;
            v42 = 2112;
            v43 = v12;
            _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Could not read file attributes of local attachment at %@, %@", buf, 0x16u);

          }
        }
      }
      else
      {
        objc_msgSend(v5, "fileURL");
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (void *)v17;
        if (v17
          && (objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
              v19 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(v18, "path"),
              v20 = (void *)objc_claimAutoreleasedReturnValue(),
              v21 = objc_msgSend(v19, "fileExistsAtPath:", v20),
              v20,
              v19,
              v21))
        {
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "path");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = 0;
          objc_msgSend(v22, "attributesOfItemAtPath:error:", v23, &v38);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v38;

          if (v12)
          {
            if (IMOSLoggingEnabled(v25))
            {
              OSLogHandleForIMFoundationCategory();
              v26 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
              {
                objc_msgSend(v18, "path");
                v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412546;
                v41 = v27;
                v42 = 2112;
                v43 = v12;
                _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "Could not read file attributes of new attachment at %@, %@", buf, 0x16u);

              }
            }
          }
          else
          {
            v30 = *MEMORY[0x1E0CB2AF0];
            objc_msgSend(v11, "objectForKey:", *MEMORY[0x1E0CB2AF0]);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v24, "objectForKey:", v30);
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = v32;
            if (v31 && v32)
            {
              v34 = objc_msgSend(v31, "unsignedLongValue");
              v35 = objc_msgSend(v33, "unsignedLongValue");
              v16 = v34 > v35;
              if (v34 > v35 && IMOSLoggingEnabled(v35))
              {
                OSLogHandleForIMFoundationCategory();
                v36 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412802;
                  v41 = CFSTR("YES");
                  v42 = 2112;
                  v43 = v31;
                  v44 = 2112;
                  v45 = v33;
                  _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Local asset is bigger than the one in CKRecord %@, taking %@ over %@", buf, 0x20u);
                }

              }
              v12 = v11;
              goto LABEL_33;
            }

          }
        }
        else
        {
          if (IMOSLoggingEnabled(v17))
          {
            OSLogHandleForIMFoundationCategory();
            v28 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v18, "path");
              v29 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v41 = v29;
              _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "Can't find incoming attachment from CKRecord at %@", buf, 0xCu);

            }
          }
          v12 = 0;
        }

      }
      v16 = 0;
      v18 = v11;
LABEL_33:

      goto LABEL_34;
    }
  }
  v16 = 0;
LABEL_34:

  return v16;
}

void sub_1D1571BA4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  uint64_t v9;
  __CFString *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  BOOL v24;
  void *v25;
  int v26;
  __CFString *v27;
  uint64_t v28;
  char v29;
  NSObject *v30;
  const __CFString *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  void *v38;
  char v39;
  __CFString *v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  __CFString *v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  void *v49;
  __CFString *v50;
  __CFString *v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  void *v56;
  __CFString *v57;
  void *v58;
  BOOL v59;
  void *v60;
  int v61;
  __CFString *v62;
  uint64_t v63;
  char v64;
  NSObject *v65;
  const __CFString *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  int v72;
  NSObject *v73;
  void *v74;
  void *v75;
  char v76;
  __CFString *v77;
  uint64_t v78;
  NSObject *v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  __CFString *v84;
  __CFString *v85;
  void *v86;
  __CFString *v87;
  void *v88;
  void *v89;
  __CFString *v90;
  void *v91;
  void *v92;
  __CFString *v93;
  __CFString *v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t buf[4];
  __CFString *v105;
  __int16 v106;
  const __CFString *v107;
  __int16 v108;
  __CFString *v109;
  __int16 v110;
  __CFString *v111;
  uint64_t v112;
  _QWORD v113[3];

  v113[1] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Moving transfer asset from CK cache to final spot", buf, 2u);
    }

  }
  objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v4);
  v95 = (void *)objc_claimAutoreleasedReturnValue();
  JWDecodeDictionary();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("aguid"));
  v94 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("t"));
  v92 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("mimet"));
  v91 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("fn"));
  v93 = (__CFString *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKey:", CFSTR("vers"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "integerValue") > 0;

  if (v8)
  {
    objc_msgSend(v4, "_assetForKey:", CFSTR("lqa"));
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    if (v89)
    {
      objc_msgSend(v6, "objectForKey:", CFSTR("pathc"));
      v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (-[__CFString length](v10, "length"))
      {
        v11 = v10;
      }
      else
      {
        objc_msgSend(a1, "filename");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "im_lastPathComponent");
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (IMOSLoggingEnabled(v20))
        {
          OSLogHandleForIMFoundationCategory();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v105 = v11;
            _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "CKRecord did not have a lastPathComponent, using %@ from filename", buf, 0xCu);
          }

        }
      }
      v90 = (__CFString *)IMDCopyAttachmentPersistentPath();
      v22 = -[__CFString length](v11, "length");
      if (v22
        && (v22 = -[__CFString length](v90, "length")) != 0
        && (objc_msgSend(v89, "fileURL"),
            v23 = (void *)objc_claimAutoreleasedReturnValue(),
            v24 = v23 == 0,
            v23,
            !v24))
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v101 = 0;
        v26 = objc_msgSend(v25, "removeItemAtPath:error:", v90, &v101);
        v27 = (__CFString *)v101;

        if (v27)
          v29 = 0;
        else
          v29 = v26;
        if ((v29 & 1) == 0 && IMOSLoggingEnabled(v28))
        {
          OSLogHandleForIMFoundationCategory();
          v30 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            v31 = CFSTR("NO");
            *(_DWORD *)buf = 138412802;
            v105 = v90;
            v106 = 2112;
            if (v26)
              v31 = CFSTR("YES");
            v107 = v31;
            v108 = 2112;
            v109 = v27;
            _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "Failed to remove existing file at %@ to replace with version from CKRecord, sucess %@ error %@", buf, 0x20u);
          }

        }
        -[__CFString stringByDeletingLastPathComponent](v90, "stringByDeletingLastPathComponent");
        v32 = objc_claimAutoreleasedReturnValue();
        IMSharedHelperEnsureDirectoryExistsAtPath();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v89, "fileURL");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v90);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        v100 = 0;
        LOBYTE(v32) = objc_msgSend(v33, "moveItemAtURL:toURL:error:", v34, v35, &v100);
        v85 = (__CFString *)v100;

        if ((v32 & 1) != 0)
        {
          if (IMOSLoggingEnabled(objc_msgSend(a1, "_setLocalPath:", v90)))
          {
            OSLogHandleForIMFoundationCategory();
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v105 = v94;
              v106 = 2112;
              v107 = v90;
              _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Created transfer %@, finalAssetPath %@", buf, 0x16u);
            }

          }
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", v85);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v112 = *MEMORY[0x1E0CB2AD8];
          v113[0] = *MEMORY[0x1E0CB2AC0];
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v113, &v112, 1);
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          v99 = 0;
          v39 = objc_msgSend(v37, "setAttributes:ofItemAtPath:error:", v38, v90, &v99);
          v40 = (__CFString *)v99;

          if ((v39 & 1) == 0 && IMOSLoggingEnabled(v41))
          {
            OSLogHandleForIMFoundationCategory();
            v42 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v105 = v90;
              v106 = 2112;
              v107 = v40;
              _os_log_impl(&dword_1D1413000, v42, OS_LOG_TYPE_INFO, "Failed making file class C: %@ with error %@", buf, 0x16u);
            }

          }
        }
        else
        {
          objc_msgSend(v89, "fileURL");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v46, "path");
          v40 = (__CFString *)objc_claimAutoreleasedReturnValue();

          if (IMOSLoggingEnabled(v47))
          {
            OSLogHandleForIMFoundationCategory();
            v48 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412802;
              v105 = v40;
              v106 = 2112;
              v107 = v90;
              v108 = 2112;
              v109 = v85;
              _os_log_impl(&dword_1D1413000, v48, OS_LOG_TYPE_INFO, "Failed to move file from %@ to %@, error %@", buf, 0x20u);
            }

          }
          objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAsset:", v89, v85);
        }

      }
      else if (IMOSLoggingEnabled(v22))
      {
        OSLogHandleForIMFoundationCategory();
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v89, "fileURL");
          v44 = (__CFString *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138413058;
          v105 = v94;
          v106 = 2112;
          v107 = v11;
          v108 = 2112;
          v109 = v90;
          v110 = 2112;
          v111 = v44;
          _os_log_impl(&dword_1D1413000, v43, OS_LOG_TYPE_INFO, "Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@", buf, 0x2Au);

        }
      }

    }
    else
    {
      v90 = 0;
    }
    objc_msgSend(v4, "_assetForKey:", CFSTR("avid"));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if (v49)
    {
      objc_msgSend(v6, "objectForKey:", CFSTR("auxpathc"));
      v50 = (__CFString *)objc_claimAutoreleasedReturnValue();
      if (-[__CFString length](v50, "length"))
      {
        v51 = v50;
      }
      else
      {
        objc_msgSend(a1, "_auxVideoPathIfItExists");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "im_lastPathComponent");
        v51 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (IMOSLoggingEnabled(v53))
        {
          OSLogHandleForIMFoundationCategory();
          v54 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v105 = v51;
            _os_log_impl(&dword_1D1413000, v54, OS_LOG_TYPE_INFO, "CKRecord did not have a auxVideoLastPathComponent, using %@ from auxVideoPath", buf, 0xCu);
          }

        }
      }
      -[__CFString stringByDeletingLastPathComponent](v90, "stringByDeletingLastPathComponent");
      v55 = (void *)objc_claimAutoreleasedReturnValue();
      -[__CFString im_lastPathComponent](v51, "im_lastPathComponent");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v55, "stringByAppendingPathComponent:", v56);
      v57 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (-[__CFString length](v51, "length")
        && -[__CFString length](v57, "length")
        && (objc_msgSend(v49, "fileURL"),
            v58 = (void *)objc_claimAutoreleasedReturnValue(),
            v59 = v58 == 0,
            v58,
            !v59))
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        v98 = 0;
        v61 = objc_msgSend(v60, "removeItemAtPath:error:", v57, &v98);
        v62 = (__CFString *)v98;

        if (v62)
          v64 = 0;
        else
          v64 = v61;
        if ((v64 & 1) == 0 && IMOSLoggingEnabled(v63))
        {
          OSLogHandleForIMFoundationCategory();
          v65 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
          {
            v66 = CFSTR("NO");
            *(_DWORD *)buf = 138412802;
            v105 = v57;
            v106 = 2112;
            if (v61)
              v66 = CFSTR("YES");
            v107 = v66;
            v108 = 2112;
            v109 = v62;
            _os_log_impl(&dword_1D1413000, v65, OS_LOG_TYPE_INFO, "Failed to remove existing aux file at %@ to replace with version from CKRecord, success %@ error %@", buf, 0x20u);
          }

        }
        -[__CFString stringByDeletingLastPathComponent](v57, "stringByDeletingLastPathComponent");
        v67 = objc_claimAutoreleasedReturnValue();
        IMSharedHelperEnsureDirectoryExistsAtPath();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v68 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "fileURL");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v57);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v97 = 0;
        LOBYTE(v67) = objc_msgSend(v68, "moveItemAtURL:toURL:error:", v69, v70, &v97);
        v87 = (__CFString *)v97;

        v72 = IMOSLoggingEnabled(v71);
        if ((v67 & 1) != 0)
        {
          if (v72)
          {
            OSLogHandleForIMFoundationCategory();
            v73 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v105 = v94;
              v106 = 2112;
              v107 = v57;
              _os_log_impl(&dword_1D1413000, v73, OS_LOG_TYPE_INFO, "Stored aux video for transfer %@, finalAssetPath %@", buf, 0x16u);
            }

          }
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager", v87);
          v74 = (void *)objc_claimAutoreleasedReturnValue();
          v102 = *MEMORY[0x1E0CB2AD8];
          v103 = *MEMORY[0x1E0CB2AC0];
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v103, &v102, 1);
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          v96 = 0;
          v76 = objc_msgSend(v74, "setAttributes:ofItemAtPath:error:", v75, v57, &v96);
          v77 = (__CFString *)v96;

          if ((v76 & 1) == 0 && IMOSLoggingEnabled(v78))
          {
            OSLogHandleForIMFoundationCategory();
            v79 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412546;
              v105 = v57;
              v106 = 2112;
              v107 = v77;
              _os_log_impl(&dword_1D1413000, v79, OS_LOG_TYPE_INFO, "Failed making file class C: %@ with error %@", buf, 0x16u);
            }

          }
        }
        else
        {
          if (v72)
          {
            OSLogHandleForIMFoundationCategory();
            v83 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v49, "fileURL");
              v84 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412802;
              v105 = v84;
              v106 = 2112;
              v107 = v57;
              v108 = 2112;
              v109 = v87;
              _os_log_impl(&dword_1D1413000, v83, OS_LOG_TYPE_INFO, "Failed to move file from %@ to %@ error %@", buf, 0x20u);

            }
          }
          objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAsset:", v49, v87);
        }

      }
      else
      {
        objc_msgSend(v49, "fileURL");
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v80, "path");
        v62 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (IMOSLoggingEnabled(v81))
        {
          OSLogHandleForIMFoundationCategory();
          v82 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138413058;
            v105 = v94;
            v106 = 2112;
            v107 = v51;
            v108 = 2112;
            v109 = v57;
            v110 = 2112;
            v111 = v62;
            _os_log_impl(&dword_1D1413000, v82, OS_LOG_TYPE_INFO, "Failed to write aux asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@", buf, 0x2Au);
          }

        }
        objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAsset:", v49);
      }

    }
  }
  else if (v93)
  {
    objc_msgSend(v4, "_assetForKey:", CFSTR("lqa"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
    {
      objc_msgSend(v12, "fileURL");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfURL:", v14);
      if (v15)
      {
        objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v93);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v15, "writeToURL:atomically:", v16, 0);
        if ((v17 & 1) == 0 && IMOSLoggingEnabled(v17))
        {
          OSLogHandleForIMFoundationCategory();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v105 = v93;
            v106 = 2112;
            v107 = v94;
            _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Failed to write record image asset to %@ GUID:%@", buf, 0x16u);
          }

        }
      }
      objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAsset:", v13);

    }
  }
  else if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v45 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v105 = v94;
      _os_log_impl(&dword_1D1413000, v45, OS_LOG_TYPE_INFO, "Got IMFileTransfer record with guid %@ with no file name", buf, 0xCu);
    }

  }
  objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAssetsOnDiskForRecord:", v4);

}

id sub_1D1572ADC(id a1, uint64_t a2, void *a3, int a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  objc_super v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = v6;
  if (v6
    && (objc_msgSend(v6, "recordType"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(MEMORY[0x1E0D39848], "_recordType"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v8, "isEqualToString:", v9),
        v9,
        v8,
        (v10 & 1) != 0))
  {
    v45.receiver = a1;
    v45.super_class = (Class)&off_1EFCAFDD0;
    v11 = objc_msgSendSuper2(&v45, sel_init);
    if (v11)
    {
      objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v7);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      JWDecodeDictionary();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("aguid"));
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("tn"));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("fn"));
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("t"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("ui"));
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("cdt"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend(v13, "longLongValue");

      objc_msgSend(v12, "objectForKey:", CFSTR("sdt"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v14, "longLongValue");

      objc_msgSend(v12, "objectForKey:", CFSTR("st"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = objc_msgSend(v15, "integerValue");

      objc_msgSend(v12, "objectForKey:", CFSTR("ig"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "BOOLValue");

      objc_msgSend(v12, "objectForKey:", CFSTR("tb"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v18, "longLongValue");

      objc_msgSend(v12, "objectForKey:", CFSTR("is"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "BOOLValue");

      objc_msgSend(v12, "objectForKey:", CFSTR("sui"));
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("aui"));
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "objectForKey:", CFSTR("ha"));
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = objc_msgSend(v22, "BOOLValue");

      objc_msgSend(v11, "setGuid:", v43);
      objc_msgSend(v11, "setType:", v41);
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v36);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setCreatedDate:", v24);

      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", (double)v35);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "_setStartDate:", v25);

      objc_msgSend(v11, "_setTransferState:", v34);
      objc_msgSend(v11, "setIsIncoming:", v17);
      objc_msgSend(v11, "setUserInfo:", v40);
      objc_msgSend(v11, "setTotalBytes:", v19);
      if (objc_msgSend(v44, "length"))
        objc_msgSend(v11, "setFilename:", v44);
      objc_msgSend(v11, "setIsSticker:", v21);
      objc_msgSend(v11, "setStickerUserInfo:", v39);
      objc_msgSend(v11, "setAttributionInfo:", v38);
      objc_msgSend(v11, "setHideAttachment:", v23);
      objc_msgSend(v11, "setCloudKitSyncState:", 1);
      v26 = (void *)objc_msgSend(v7, "copyEncodedSystemFields");
      objc_msgSend(v11, "setCloudKitServerChangeTokenBlob:", v26);
      objc_msgSend(v7, "recordID");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "recordName");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "setCloudKitRecordID:", v28);

      if (IMOSLoggingEnabled(v29))
      {
        OSLogHandleForIMFoundationCategory();
        v30 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v47 = v43;
          v48 = 2112;
          v49 = v37;
          _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "Trying to create imfiletransfer ckrecord with guid %@ and filename %@", buf, 0x16u);
        }

      }
      if (a4)
        objc_msgSend(v11, "moveAssetFromRecord:", v7);

    }
    a1 = v11;
    v31 = a1;
  }
  else
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v47 = v7;
        _os_log_impl(&dword_1D1413000, v32, OS_LOG_TYPE_INFO, "Invalid record passed to initWithCKRecord %@", buf, 0xCu);
      }

    }
    v31 = 0;
  }

  return v31;
}

uint64_t sub_1D1573038(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t v5;

  if (!a3)
    return 1;
  objc_msgSend(a3, "recordType");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39848], "_recordType");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4) ^ 1;

  return v5;
}

id sub_1D15730A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v3);
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10 = 138412290;
        v11 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to utiTypeForRecord %@", (uint8_t *)&v10, 0xCu);
      }

    }
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    JWDecodeDictionary();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", CFSTR("t"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

uint64_t sub_1D15731D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v3);
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v11 = 138412290;
        v12 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to sizeOfAssetForRecord %@", (uint8_t *)&v11, 0xCu);
      }

    }
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    JWDecodeDictionary();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", CFSTR("tb"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v9, "longLongValue");

  }
  return v6;
}

id sub_1D1573320(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v3);
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10 = 138412290;
        v11 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to transferGUIDOfRecord %@", (uint8_t *)&v10, 0xCu);
      }

    }
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    JWDecodeDictionary();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", CFSTR("aguid"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

uint64_t sub_1D1573454(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v3);
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v12 = 138412290;
        v13 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to attachmentRecordHasAsset %@", (uint8_t *)&v12, 0xCu);
      }

    }
    v6 = 0;
  }
  else
  {
    objc_msgSend(v3, "_assetForKey:", CFSTR("lqa"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "fileURL");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "path");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v8, "fileExistsAtPath:", v10);

    }
    else
    {
      v6 = 0;
    }

  }
  return v6;
}

void sub_1D15735C8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v4);
  if ((_DWORD)v5)
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v9 = 138412290;
        v10 = v4;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Invalid record passed to cleanUpAssetsOnDiskForRecord: %@", (uint8_t *)&v9, 0xCu);
      }

    }
  }
  else
  {
    objc_msgSend(v4, "_assetForKey:", CFSTR("lqa"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "cleanUpAsset:", v7);

    objc_msgSend(v4, "_assetForKey:", CFSTR("avid"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(a1, "cleanUpAsset:", v8);

  }
}

id sub_1D157370C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v3);
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10 = 138412290;
        v11 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to md5HashForRecord: %@", (uint8_t *)&v10, 0xCu);
      }

    }
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    JWDecodeDictionary();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", CFSTR("mdh"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

uint64_t sub_1D1573840(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  void *v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a3;
  v4 = objc_msgSend(MEMORY[0x1E0D39848], "_recordIsInvalid:", v3);
  if ((_DWORD)v4)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v31 = v3;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to md5HashForRecord: %@", buf, 0xCu);
      }

    }
    v6 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D39848], "transferMetaDataFromRecord:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    JWDecodeDictionary();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "objectForKey:", CFSTR("mdh"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v9, "length"))
    {
      objc_msgSend(v8, "objectForKey:", CFSTR("fn"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "objectForKey:", CFSTR("t"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "length");
      if (v12 && (v12 = objc_msgSend(v11, "length")) != 0)
      {
        objc_msgSend(v3, "_assetForKey:", CFSTR("lqa"));
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = v13;
        if (v13)
        {
          objc_msgSend(v13, "fileURL");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15)
          {
            objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "path");
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = v14;
            v18 = objc_msgSend(v16, "fileExistsAtPath:", v17);

            if (v18)
            {
              objc_msgSend(v15, "path");
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              IMSharedHelperMD5HashOfFileAtPath();
              v20 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v20 = 0;
            }
            v14 = v29;
          }
          else
          {
            v20 = 0;
          }

        }
        else
        {
          if (IMOSLoggingEnabled(0))
          {
            OSLogHandleForIMFoundationCategory();
            v23 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v3, "recordID");
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v24, "recordName");
              v25 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412290;
              v31 = v25;
              _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "IMFileTransfer_CKRecord *** asset was nil for record id: %@", buf, 0xCu);

            }
          }
          v20 = 0;
        }

      }
      else
      {
        if (IMOSLoggingEnabled(v12))
        {
          OSLogHandleForIMFoundationCategory();
          v21 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v31 = v10;
            v32 = 2112;
            v33 = v11;
            _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "IMFileTransfer_CKRecord *** fileName [%@] or utiType [%@] is nil", buf, 0x16u);
          }

        }
        v20 = 0;
      }
      v26 = objc_msgSend(v20, "isEqualToString:", v9);
      v6 = v26;
      if ((v26 & 1) == 0 && IMOSLoggingEnabled(v26))
      {
        OSLogHandleForIMFoundationCategory();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412546;
          v31 = v20;
          v32 = 2112;
          v33 = v9;
          _os_log_impl(&dword_1D1413000, v27, OS_LOG_TYPE_INFO, "We failed to validate md5HashOfCKAsset: %@ md5HashStoredOnRecord: %@", buf, 0x16u);
        }

      }
    }
    else
    {
      if (IMOSLoggingEnabled(0))
      {
        OSLogHandleForIMFoundationCategory();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v31 = v3;
          _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "We didn't have an md5 hash for fetched record: %@", buf, 0xCu);
        }

      }
      v6 = 1;
    }

  }
  return v6;
}

void sub_1D1573D38(_Unwind_Exception *exc_buf, int a2)
{
  int v2;

  if (a2 == v2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D1573C44);
  }
  objc_end_catch();
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D1573DE4()
{
  return objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
}

IMDReplayController *sub_1D1573E30()
{
  IMDReplayController *result;

  result = objc_alloc_init(IMDReplayController);
  qword_1ED935E48 = (uint64_t)result;
  return result;
}

void sub_1D1574734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_1D157475C(uint64_t a1)
{
  _QWORD block[5];

  if (!--*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D15747DC;
    block[3] = &unk_1E9228690;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t sub_1D15747DC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__fetchNexBatchOfMessagesAndReplay);
}

dispatch_workloop_t IMDCreateWorkloop(void *a1)
{
  return dispatch_workloop_create((const char *)objc_msgSend(objc_retainAutorelease(a1), "UTF8String"));
}

void sub_1D1578060(id *a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  if (_IMWillLog())
  {
    v6 = a1[4];
    _IMAlwaysLog();
  }
  +[IMPendingReplicatedMessageCache sharedCache](IMPendingReplicatedMessageCache, "sharedCache", v6);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = a1[4];
  objc_msgSend(a1[5], "service");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "internalName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D157816C;
  v7[3] = &unk_1E922DA30;
  v8 = a1[4];
  v9 = a1[6];
  objc_msgSend(v2, "releasePendingMessageWithGUID:serviceName:chat:completion:", v3, v5, 0, v7);

}

uint64_t sub_1D157816C(uint64_t a1)
{
  if (_IMWillLog())
    _IMAlwaysLog();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1D15784F4(uint64_t a1)
{
  void *v2;
  id v3;

  if (_IMWillLog())
  {
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    _IMAlwaysLog();

  }
  objc_msgSend(*(id *)(a1 + 40), "replicationProxy", v2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sendMessage:toChat:style:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));

}

void sub_1D1578FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D1579014(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t result;
  _QWORD v8[4];
  __int128 v9;
  uint64_t v10;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D157909C;
  v8[3] = &unk_1E922DA58;
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_OWORD *)(a1 + 32);
  result = objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v8);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    *a5 = 1;
  return result;
}

void sub_1D157909C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  char v6;
  id v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0D366B8]))
  {
    if (++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < 2uLL)
      goto LABEL_10;
    if (_IMWillLog())
      _IMAlwaysLog();
    v6 = objc_msgSend(*(id *)(a1 + 32), "replicationRequiredForMultipleMessageParts");
  }
  else
  {
    if (_IMWillLog())
    {
      v7 = v8;
      _IMAlwaysLog();
    }
    v6 = objc_msgSend(*(id *)(a1 + 32), "replicationRequiredForMessageBodyAttributeName:", v8, v7);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v6;
LABEL_10:
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    *a4 = 1;

}

void sub_1D15799E0()
{
  IMDCKSyncController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKSyncController);
  v1 = (void *)qword_1ED935E50;
  qword_1ED935E50 = (uint64_t)v0;

}

uint64_t sub_1D1579AB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setDelegate:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D1579B38(uint64_t a1)
{
  IMDCKInitialMessageSyncController *v2;
  void *v3;

  v2 = objc_alloc_init(IMDCKInitialMessageSyncController);
  v3 = (void *)qword_1EFC63E48;
  qword_1EFC63E48 = (uint64_t)v2;

  return objc_msgSend((id)qword_1EFC63E48, "setDelegate:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D1579C3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setDelegate:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D1579CF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setDelegate:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D1579D84(uint64_t a1)
{
  IMDCKInitialAttachmentSyncController *v2;
  void *v3;

  v2 = objc_alloc_init(IMDCKInitialAttachmentSyncController);
  v3 = (void *)qword_1EFC63E60;
  qword_1EFC63E60 = (uint64_t)v2;

  return objc_msgSend((id)qword_1EFC63E60, "setDelegate:", *(_QWORD *)(a1 + 32));
}

void sub_1D1579F88(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1579F44);
  }
  _Unwind_Resume(a1);
}

void sub_1D157A238(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v16 = 134218242;
      v17 = a2;
      v18 = 2112;
      v19 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Account status is: %ld. Error: %@", (uint8_t *)&v16, 0x16u);
    }

  }
  if (*(_BYTE *)(a1 + 40))
  {
    if (a2 == 4)
    {
      objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "isMessagesIniCloudVersion2");

      if (v10)
      {
        objc_msgSend(*(id *)(a1 + 32), "syncResumer");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "attemptToResumeSyncOnAccountUpdateIfAppropriate");

      }
      else
      {
        objc_msgSend(MEMORY[0x1E0D397E8], "sharedInstance");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "getBoolFromDomain:forKey:", *MEMORY[0x1E0D37950], *MEMORY[0x1E0D379B8]);

        if (v13)
        {
          if (IMOSLoggingEnabled(v14))
          {
            OSLogHandleForIMFoundationCategory();
            v15 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              LOWORD(v16) = 0;
              _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Account status update, and we stopped syncing due to bad account status.", (uint8_t *)&v16, 2u);
            }

          }
          objc_msgSend(*(id *)(a1 + 32), "beginPeriodicSyncWithChecks:priority:reason:", 1, *MEMORY[0x1E0C80880], CFSTR("Account.update"));
        }
      }
    }
    else if (a2 == 1)
    {
      +[IMDCKRecordSaltManager sharedInstance](IMDCKRecordSaltManager, "sharedInstance");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "clearLocalSyncState");

      +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "markAllAttachmentsAsNotPurgeable");

    }
    objc_msgSend(*(id *)(a1 + 32), "_attemptToMigrateACAccountEnablementOnce");
  }
  else if (a2 == 4)
  {
    objc_msgSend(*(id *)(a1 + 32), "_attemptToEnableMiCByDefaultOnce");
  }

}

void sub_1D157AC18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  void *v20;
  uint8_t buf[4];
  _DWORD v22[7];

  *(_QWORD *)&v22[5] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = objc_msgSend(*(id *)(a1 + 32), "setIsFetchingExitForEnablement:", 0);
  if (v6)
  {
    v8 = *(_DWORD *)(a1 + 40);
    v9 = objc_msgSend(*(id *)(a1 + 32), "_maxRetryAttemptsToEnableMiCByDefault");
    if (v8 < (int)v9)
    {
      v10 = objc_msgSend(*(id *)(a1 + 32), "_retryIntervalToEnableMicByDefaultForAttempt:", *(unsigned int *)(a1 + 40));
      v12 = v11;
      if (IMOSLoggingEnabled(v10))
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v14 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)buf = 67109376;
          v22[0] = v14;
          LOWORD(v22[1]) = 2048;
          *(_QWORD *)((char *)&v22[1] + 2) = v12;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Enable MiC by default: failed to get exit record attempt %d, trying again in %0.02f seconds", buf, 0x12u);
        }

      }
      im_dispatch_after();
      goto LABEL_24;
    }
    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v18 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 67109120;
        v22[0] = v18;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Enable MiC by default: failed to get exit record attempt %d, done", buf, 8u);
      }

    }
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "_setHasTriedToEnableMiCByDefault");
    goto LABEL_24;
  }
  v15 = IMOSLoggingEnabled(v7);
  if (v5)
  {
    if (v15)
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)v22 = v5;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Enable MiC by default: Exit record found with date %@, won't try again", buf, 0xCu);
      }

    }
    goto LABEL_13;
  }
  if (v15)
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Enable MiC by default: All Checks Passed, Enabling!!", buf, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setCloudKitSyncingEnabled:", 1);

  objc_msgSend(*(id *)(a1 + 32), "_setHasTriedToEnableMiCByDefault");
LABEL_24:

}

uint64_t sub_1D157AF2C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__attemptToEnableMiCByDefaultOnceAttempt_);
}

void sub_1D157BA24(uint64_t a1)
{
  void *v2;
  int v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  int v13;
  NSObject *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  int v18;
  const __CFString *v19;
  __int16 v20;
  const __CFString *v21;
  __int16 v22;
  void *v23;
  __int16 v24;
  const __CFString *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isUnderFirstDataProtectionLock");

  v4 = objc_msgSend(*(id *)(a1 + 32), "isSyncing");
  objc_msgSend(*(id *)(a1 + 32), "syncState");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "lastSyncDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "deviceConditionsAllowPeriodicSync");

  v10 = IMOSLoggingEnabled(v9);
  if (((v4 | v3) & 1) != 0 || v6 || !v8)
  {
    if (v10)
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = CFSTR("NO");
        if (v4)
          v16 = CFSTR("YES");
        else
          v16 = CFSTR("NO");
        v18 = 138413058;
        v19 = v16;
        if (v3)
          v17 = CFSTR("YES");
        else
          v17 = CFSTR("NO");
        v20 = 2112;
        v21 = v17;
        v22 = 2112;
        if (v8)
          v15 = CFSTR("YES");
        v23 = v6;
        v24 = 2112;
        v25 = v15;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Not kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@", (uint8_t *)&v18, 0x2Au);
      }

    }
  }
  else
  {
    if (v10)
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v18 = 138413058;
        v19 = CFSTR("NO");
        v20 = 2112;
        v21 = CFSTR("NO");
        v22 = 2112;
        v23 = 0;
        v24 = 2112;
        v25 = CFSTR("YES");
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@", (uint8_t *)&v18, 0x2Au);
      }

    }
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "isMessagesIniCloudVersion2");

    if (v13)
    {
      if (IMGetDomainBoolForKeyWithDefaultValue())
        objc_msgSend(*(id *)(a1 + 32), "beginPeriodicSyncWithActivity:", 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "beginPeriodicSyncWithChecks:priority:reason:", 1, *MEMORY[0x1E0C80888], CFSTR("postInitialSync"));
    }
  }

}

uint64_t sub_1D157C098(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Got notified to kick off a sync due to IMAutomaticDeletionAgent", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_kickOffNightlyPeriodicSyncIfApplicable");
}

void sub_1D157C130(uint64_t a1)
{
  NSObject *v1;
  void *v2;
  uint8_t v3[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1D1413000, v1, OS_LOG_TYPE_INFO, "Received key roll pending state did change event notification", v3, 2u);
    }

  }
  +[IMDCKUtilities sharedInstance](IMDCKUtilities, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "keyRollPendingStateDidChange");

}

void sub_1D157C1D8(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const __CFString *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  int v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Handling Backup State Did Change", (uint8_t *)&v13, 2u);
    }

  }
  v4 = a2;
  if (v4)
  {
    +[IMDCKBackupController sharedInstance](IMDCKBackupController, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "iCloudBackupEnabledSystemWide");

    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = CFSTR("NO");
        if (v6)
          v9 = CFSTR("YES");
        v13 = 138412290;
        v14 = v9;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "System wide backup is enabled: %@", (uint8_t *)&v13, 0xCu);
      }

    }
    if ((v6 & 1) == 0)
    {
      objc_msgSend(v4, "exitManager");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "submitCloudKitMetricWithOperationGroupName:", CFSTR("PCSBackupDisabledKeyroll"));

      objc_msgSend(v4, "exitManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "submitCloudKitMetricWithOperationGroupName:", CFSTR("PCSBackupDisabledUserToggledKeyroll"));

    }
  }
  else if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSBackupStateDidChange", (uint8_t *)&v13, 2u);
    }

  }
}

void sub_1D157C414(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Handling Test Backup State Did Change", buf, 2u);
    }

  }
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "exitManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "submitCloudKitMetricWithOperationGroupName:", CFSTR("PCSBackupDisabledKeyroll"));

    objc_msgSend(v5, "exitManager");
    v7 = objc_claimAutoreleasedReturnValue();
    -[NSObject submitCloudKitMetricWithOperationGroupName:](v7, "submitCloudKitMetricWithOperationGroupName:", CFSTR("PCSBackupDisabledTestToggledKeyroll"));
  }
  else
  {
    if (!IMOSLoggingEnabled(0))
      goto LABEL_8;
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSTestBackupStateDidChange", v8, 2u);
    }
  }

LABEL_8:
}

void sub_1D157C564(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Handling Successful Keyroll from Backup", buf, 2u);
    }

  }
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "exitManager");
    v6 = objc_claimAutoreleasedReturnValue();
    -[NSObject submitCloudKitMetricWithOperationGroupName:](v6, "submitCloudKitMetricWithOperationGroupName:", CFSTR("PCSBackupDisabledSuccessfulKeyroll"));
  }
  else
  {
    if (!IMOSLoggingEnabled(0))
      goto LABEL_8;
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSBackupStateKeyrollSuccessful", v7, 2u);
    }
  }

LABEL_8:
}

void sub_1D157C690(uint64_t a1, void *a2)
{
  NSObject *v3;
  id v4;
  void *v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Handling Pending Keyroll Notification", buf, 2u);
    }

  }
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "exitManager");
    v6 = objc_claimAutoreleasedReturnValue();
    -[NSObject submitCloudKitMetricWithOperationGroupName:](v6, "submitCloudKitMetricWithOperationGroupName:", CFSTR("PCSPendingKeyroll"));
  }
  else
  {
    if (!IMOSLoggingEnabled(0))
      goto LABEL_8;
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSPendingKeyroll", v7, 2u);
    }
  }

LABEL_8:
}

void sub_1D157C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v16 = 138412546;
      v17 = a3;
      v18 = 2112;
      v19 = a5;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Handling Identity/TLK keys available notification, name: %@, userInfo: %@", (uint8_t *)&v16, 0x16u);
    }

  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isMessagesIniCloudVersion2");

  if (v9)
  {
    +[IMDCKSyncController sharedInstance](IMDCKSyncController, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "syncResumer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "attemptToResumeSyncOnIdentityUpdateIfAppropriate");

  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D397E8], "sharedInstance");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "getBoolFromDomain:forKey:", *MEMORY[0x1E0D37950], *MEMORY[0x1E0D379C8]);

    if (!v13)
      return;
    if (IMOSLoggingEnabled(v14))
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Identity/TLK update, and we stopped sync due to missing TLKs.", (uint8_t *)&v16, 2u);
      }

    }
    +[IMDCKSyncController sharedInstance](IMDCKSyncController, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "beginPeriodicSyncWithChecks:priority:reason:", 1, *MEMORY[0x1E0C80880], CFSTR("Identity.update"));
  }

}

void sub_1D157D094(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint8_t v9[16];

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "We are on power and wifi. Kicking off a sync", v9, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_noteSyncStarted:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_noteMetricsForSyncStartFrom:fullSync:", CFSTR("ContinuingManualFullSyncAfterLaunch"), 1);
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:", 1, 0, 0, 0, 0);

    objc_msgSend(*(id *)(a1 + 32), "beginPeriodicSyncWithChecks:priority:reason:", 1, *MEMORY[0x1E0C80880], CFSTR("startedWhileInProgress"));
  }

}

void sub_1D157D518(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  _TtC12IMDaemonCore17IMDPreReqsChecker *v9;
  void *v10;
  IMDCKSyncTokenStore *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  IMDUpdateV1RecordStore *v21;
  void *v22;
  IMDUpdateV2RecordStore *v23;
  void *v24;
  IMDUpdateV3RecordStore *v25;
  void *v26;
  void *v27;
  void *v28;
  IMDRecoverableMessageStore *v29;
  void *v30;
  IMDScheduledMessageStore *v31;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v33) = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Registering CloudSync dependencies", (uint8_t *)&v33, 2u);
    }

  }
  objc_msgSend(MEMORY[0x1E0D4D8B0], "configureWithDelegate:", *(_QWORD *)(a1 + 32));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v33 = 138412290;
        v34 = v4;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Failed to configure IMDMessagesSyncCoordinator properly with error %@", (uint8_t *)&v33, 0xCu);
      }
LABEL_13:

    }
  }
  else
  {
    v6 = (void *)MEMORY[0x1E0D4D8B0];
    objc_msgSend(MEMORY[0x1E0D39B28], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "registerErrorAnalyzer:", v7);

    v8 = (void *)MEMORY[0x1E0D4D8B0];
    v9 = objc_alloc_init(_TtC12IMDaemonCore17IMDPreReqsChecker);
    objc_msgSend(v8, "registerPreReqsVerifier:", v9);

    v10 = (void *)MEMORY[0x1E0D4D8B0];
    v11 = objc_alloc_init(IMDCKSyncTokenStore);
    objc_msgSend(v10, "registerSyncTokenStore:", v11);

    v12 = (void *)MEMORY[0x1E0D4D8B0];
    objc_msgSend(*(id *)(a1 + 32), "syncState");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "registerSyncStateManager:", v13);

    v14 = (void *)MEMORY[0x1E0D4D8B0];
    +[IMDCKBackupControllerProxy sharedInstance](IMDCKBackupControllerProxy, "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "registerBackupController:", v15);

    v16 = (void *)MEMORY[0x1E0D4D8B0];
    +[IMDChatStore sharedInstance](IMDChatStore, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "registerStore:asType:", v17, 0);

    v18 = (void *)MEMORY[0x1E0D4D8B0];
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "registerStore:asType:", v19, 1);

    v20 = (void *)MEMORY[0x1E0D4D8B0];
    v21 = objc_alloc_init(IMDUpdateV1RecordStore);
    objc_msgSend(v20, "registerStore:asType:", v21, 3);

    v22 = (void *)MEMORY[0x1E0D4D8B0];
    v23 = objc_alloc_init(IMDUpdateV2RecordStore);
    objc_msgSend(v22, "registerStore:asType:", v23, 4);

    v24 = (void *)MEMORY[0x1E0D4D8B0];
    v25 = objc_alloc_init(IMDUpdateV3RecordStore);
    objc_msgSend(v24, "registerStore:asType:", v25, 5);

    v26 = (void *)MEMORY[0x1E0D4D8B0];
    +[IMDAttachmentStore sharedInstance](IMDAttachmentStore, "sharedInstance");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "registerStore:asType:", v27, 2);

    v28 = (void *)MEMORY[0x1E0D4D8B0];
    v29 = objc_alloc_init(IMDRecoverableMessageStore);
    objc_msgSend(v28, "registerStore:asType:", v29, 6);

    v30 = (void *)MEMORY[0x1E0D4D8B0];
    v31 = objc_alloc_init(IMDScheduledMessageStore);
    objc_msgSend(v30, "registerStore:asType:", v31, 7);

    if (IMOSLoggingEnabled(v32))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v33) = 0;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Registered CloudSync dependencies", (uint8_t *)&v33, 2u);
      }
      goto LABEL_13;
    }
  }

}

void sub_1D157DDE4(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint8_t v19[8];
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_didPassAccountAndIdentityUpdateNeeds");
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_1D157E074;
    v20[3] = &unk_1E9229258;
    v7 = *(void **)(a1 + 40);
    v21 = *(id *)(a1 + 32);
    v22 = v7;
    v23 = *(id *)(a1 + 48);
    objc_msgSend(v21, "_ifCloudKitAbleToSyncWithActivity:callBlock:", 0, v20);

  }
  else
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "*** Manatee keys not available not kicking off initial sync", v19, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "reportErrorForSyncType:syncStep:response:error:", 0, CFSTR("FirstSyncInitiated"), 4, v6);

    objc_msgSend(*(id *)(a1 + 32), "_needsSyncOnIdentityUpdate");
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:", 0, 0, 0, 0, 0);

    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "logCollectorAddress");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:reasonString:", CFSTR("MissingTLK"), 1, 1, v13, CFSTR("MissingTLKNoInitalSync"));

    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "_keychainErrorWithCause:", v6);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "forceAutoBugCaptureWithSubType:errorPayload:", CFSTR("Restore Fail"), v15);

    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 48));
    objc_msgSend(v16, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 0, 0, v17, 0);

    objc_msgSend(*(id *)(a1 + 32), "setBroadcastedSyncStateStateToFinished");
  }

}

void sub_1D157E074(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2)
  {
    IMSetDomainBoolForKey();
    objc_msgSend(*(id *)(a1 + 32), "_noteMetricsForSyncStartFrom:fullSync:", CFSTR("InitialSync"), 0);
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:", 0, 0, 0, 0, 0);

    objc_msgSend(*(id *)(a1 + 32), "beginInitialSyncAttemptCount:withActivity:", 0, *(_QWORD *)(a1 + 40));
  }
  else
  {
    v7 = +[IMDCKSyncController initialSyncAllowed](IMDCKSyncController, "initialSyncAllowed");
    v8 = *(_QWORD **)(a1 + 32);
    if (v7)
    {
      v9 = v8[10];
      v10 = IMOSLoggingEnabled(v8);
      if (v9 > 99)
      {
        if (v10)
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
            v20 = 134217984;
            v21 = v14;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "We'e tried %ld times to begin an initial sync.  Giving up.", (uint8_t *)&v20, 0xCu);
          }

        }
        objc_msgSend(*(id *)(a1 + 32), "setBroadcastedSyncStateStateToFinished");
        objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "_retryError");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "reportErrorForSyncType:syncStep:response:error:", 0, CFSTR("BeginInitialSync"), 1, v16);

        objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
        objc_msgSend(MEMORY[0x1E0C99D68], "now");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 48));
        objc_msgSend(v17, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 0, 0, v18, 0);

        objc_msgSend(*(id *)(a1 + 32), "setInitialSyncAttempts:", 0);
      }
      else
      {
        if (v10)
        {
          OSLogHandleForIMFoundationCategory();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
            v20 = 134218240;
            v21 = v12;
            v22 = 2048;
            v23 = 30;
            _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "We aren't ready to perform an initial sync.  We've tried %ld times.  We'll try again in %ld seconds ", (uint8_t *)&v20, 0x16u);
          }

        }
        objc_msgSend(*(id *)(a1 + 32), "setInitialSyncAttempts:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 1);
        objc_msgSend(*(id *)(a1 + 32), "performSelector:withObject:afterDelay:", sel_beginInitialSyncWithActivity_, 0, 30.0);
      }
    }
    else
    {
      objc_msgSend(v8, "setBroadcastedSyncStateStateToFinished");
      objc_msgSend(*(id *)(a1 + 32), "setInitialSyncAttempts:", 0);
    }
  }

}

void sub_1D157E710(uint64_t a1, int a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  id v7;
  char v8;

  v3 = *(void **)(a1 + 32);
  if (a2)
  {
    objc_msgSend(v3, "_recordManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[2] = sub_1D157E7B4;
    v6[3] = &unk_1E922DB40;
    v5 = *(void **)(a1 + 40);
    v6[4] = *(_QWORD *)(a1 + 32);
    v6[1] = 3221225472;
    v8 = *(_BYTE *)(a1 + 48);
    v7 = v5;
    objc_msgSend(v4, "fetchChatZoneToCheckManateeStatus:", v6);

  }
  else
  {
    objc_msgSend(v3, "setBroadcastedSyncStateStateToFinished");
  }
}

void sub_1D157E7B4(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  const __CFString *v7;
  NSObject *v8;
  _xpc_activity_s *v9;
  _BOOL8 v10;
  _BOOL4 v11;
  NSObject *v12;
  _DWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (a2)
  {
    if (*(_BYTE *)(a1 + 48))
      v7 = CFSTR("CoreduetChatPeriodic");
    else
      v7 = CFSTR("ManualChatSync");
    objc_msgSend(*(id *)(a1 + 32), "_noteMetricsForSyncStartFrom:fullSync:", v7, 0);
    objc_msgSend(*(id *)(a1 + 32), "_syncChatsWithActivity:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13[0]) = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "We dont have manatee TLK. Not kicking off chat only sync", (uint8_t *)v13, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setBroadcastedSyncStateStateToFinished");
    v9 = *(_xpc_activity_s **)(a1 + 40);
    if (v9)
    {
      v10 = xpc_activity_set_state(v9, 5);
      v11 = v10;
      if (IMOSLoggingEnabled(v10))
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13[0] = 67109120;
          v13[1] = v11;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Set state for chat syncing with result %d", (uint8_t *)v13, 8u);
        }

      }
    }
  }

}

void sub_1D157EC20(uint64_t a1, void *a2)
{
  _xpc_activity_s *v3;
  xpc_activity_state_t state;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    if (IMOSLoggingEnabled(2))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Run a User-Initiated periodic sync", (uint8_t *)&v15, 2u);
      }

    }
    +[IMDCKUtilities sharedInstance](IMDCKUtilities, "sharedInstance");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "cloudKitSyncingEnabled");

    if ((v9 & 1) != 0)
    {
      v11 = xpc_activity_set_state(v3, 4);
      if (!v11 && IMOSLoggingEnabled(v11))
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v15) = 0;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "We did not set the state of a user-initiated xpc_activity to continue successfully for message syncing", (uint8_t *)&v15, 2u);
        }

      }
      +[IMDCKSyncController sharedInstance](IMDCKSyncController, "sharedInstance");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "beginPeriodicSyncWithActivity:", v3);

    }
    else if (IMOSLoggingEnabled(v10))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Ignoring activity request to sync messages, as syncing is disabled", (uint8_t *)&v15, 2u);
      }

    }
  }
  else if (!state && IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      v15 = 136315138;
      v16 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Check-in for a periodic sync at priority %s", (uint8_t *)&v15, 0xCu);
    }

  }
}

void sub_1D157F150(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  uint8_t v9[16];

  v5 = a3;
  v6 = v5;
  if (a2)
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "CloudKit allows sync, beginning periodic sync attempt 0", v9, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_noteSyncStarted:", 1);
    objc_msgSend(*(id *)(a1 + 32), "_noteMetricsForSyncStartFrom:fullSync:", CFSTR("CoreduetFullPeriodic"), 1);
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:", 1, *(_QWORD *)(a1 + 40) != 0, 0, 0, 0);

    objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:", *(_QWORD *)(a1 + 40), 0);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setBroadcastedSyncStateStateToFinished");
  }

}

uint64_t sub_1D157FCF8(uint64_t a1, int a2)
{
  void *v3;

  v3 = *(void **)(a1 + 32);
  if (!a2)
    return objc_msgSend(v3, "setBroadcastedSyncStateStateToFinished");
  objc_msgSend(v3, "_noteMetricsForSyncStartFrom:fullSync:", CFSTR("ComingBackOnlineChatSync"), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_syncChatsWithActivity:", 0);
}

void sub_1D1580380(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[16];

  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSystemLocked");

  if ((v3 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "reloadTimer");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      if (IMOSLoggingEnabled(v5))
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Setting up a timer to reload the UI", buf, 2u);
        }

      }
      v7 = (void *)MEMORY[0x1E0C99E88];
      objc_msgSend(*(id *)(a1 + 32), "reloadTimeInterval");
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = sub_1D15804C0;
      v9[3] = &unk_1E922DB88;
      v9[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v7, "scheduledTimerWithTimeInterval:repeats:block:", 0, v9);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "setReloadTimer:", v8);

    }
  }
}

void sub_1D15804C0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  char v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isSystemLocked");

  v7 = IMOSLoggingEnabled(v6);
  if ((v5 & 1) != 0)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Not Refreshing UI after time because device is locked", v10, 2u);
      }

    }
  }
  else
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Refreshing UI after time because device is unlocked", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_refreshUIWhileSyncing");
  }

}

void sub_1D158066C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint8_t v9[16];

  objc_msgSend(*(id *)(a1 + 32), "reloadTimer");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Invalidating reload timer.", v9, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "reloadTimer");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "invalidate");

    objc_msgSend(*(id *)(a1 + 32), "setReloadTimer:", 0);
  }
  v6 = (void *)MEMORY[0x1E0DE7910];
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "cancelPreviousPerformRequestsWithTarget:selector:object:", v7, sel_refreshUIWhileSyncing, 0);

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "performSelector:withObject:afterDelay:", sel_refreshUIWhileSyncing, 0, 0.5);

}

void sub_1D1580F60(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1580F28);
  }
  _Unwind_Resume(a1);
}

void sub_1D15813FC(uint64_t a1, uint64_t a2)
{
  id v4;

  +[IMDCKUtilities sharedInstance](IMDCKUtilities, "sharedInstance");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:", *(_QWORD *)(a1 + 32), 1, 1, 1, a2, CFSTR("RestoreFailuresDump"));

}

uint64_t sub_1D15822F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D1582908(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint64_t v10;

  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postSyncStateToCloudKit:", CFSTR("InitialChatSyncInitiated"));

  objc_msgSend(*(id *)(a1 + 32), "chatSyncController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[2] = sub_1D15829E0;
  v7[3] = &unk_1E922DBB0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v7[4] = *(_QWORD *)(a1 + 32);
  v10 = v5;
  v7[1] = 3221225472;
  v8 = v6;
  v9 = *(id *)(a1 + 40);
  objc_msgSend(v3, "syncChatsWithType:withActivity:completion:", 0, v4, v7);

}

void sub_1D15829E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[2];
  _QWORD v21[5];
  id v22;
  id v23;
  uint64_t v24;
  char v25;
  uint8_t buf[16];

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v18) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 0, 0, 1, a2, 0, 0, v18, *(_QWORD *)(a1 + 56));

  if ((_DWORD)a2)
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Successfully synced chats after new device bringup", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "postSyncStateToCloudKit:", CFSTR("InitialMessageSyncInitiated"));

    objc_msgSend(*(id *)(a1 + 32), "initialMessageSyncController");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = sub_1D1582C08;
    v21[3] = &unk_1E922DBD8;
    v25 = a2;
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 40);
    v21[4] = *(_QWORD *)(a1 + 32);
    v24 = v11;
    v13 = &v22;
    v22 = v12;
    v23 = *(id *)(a1 + 48);
    objc_msgSend(v10, "syncMessagesWithSyncType:deviceConditionsToCheck:activity:completionBlock:", 0, 0, 0, v21);

  }
  else
  {
    v14 = *(void **)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 40);
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_1D15830B0;
    v19[3] = &unk_1E9229A70;
    v16 = *(void **)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 56);
    v19[4] = v14;
    v20[1] = v17;
    v13 = (id *)v20;
    v20[0] = v16;
    objc_msgSend(v14, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 0, 2, 0, v17, v15, v5, v19);
  }

}

void sub_1D1582C08(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  void *v13;
  id *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[2];
  _QWORD v25[5];
  id v26;
  id v27;
  uint64_t v28;
  uint8_t buf[16];

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v22) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 0, 0, 1, *(unsigned __int8 *)(a1 + 64), 1, a2, v22, *(_QWORD *)(a1 + 56));

  if (v5 || !(_DWORD)a2)
  {
    v18 = *(void **)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_1D158309C;
    v23[3] = &unk_1E9229A70;
    v20 = *(void **)(a1 + 48);
    v21 = *(_QWORD *)(a1 + 56);
    v23[4] = v18;
    v24[1] = v21;
    v14 = (id *)v24;
    v24[0] = v20;
    objc_msgSend(v18, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 0, 3, 0, v21, v19, v5, v23);
  }
  else
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Successfully synced messages after new device bringup", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "chatSyncController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "fetchedChatsDuringLastSync");

    if (v10)
      IMSetDomainBoolForKey();
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "postSyncStateToCloudKit:", CFSTR("InitialAttachmentSyncInitiated"));

    objc_msgSend(*(id *)(a1 + 32), "initialAttachmentSyncController");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = sub_1D1582E6C;
    v25[3] = &unk_1E922DBB0;
    v13 = *(void **)(a1 + 40);
    v25[4] = *(_QWORD *)(a1 + 32);
    v14 = &v26;
    v15 = v13;
    v17 = *(void **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v26 = v15;
    v28 = v16;
    v27 = v17;
    objc_msgSend(v12, "syncAttachmentsWithSyncType:deviceConditionsToCheck:activity:completionBlock:", 0, 0, 0, v25);

  }
}

void sub_1D1582E6C(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  id v16;
  uint64_t v17;
  uint8_t buf[16];

  v5 = a3;
  v6 = *(void **)(a1 + 32);
  if (v5 || !a2)
  {
    v13 = *(_QWORD *)(a1 + 56);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1D1583088;
    v15[3] = &unk_1E9229A70;
    v15[4] = v6;
    v17 = v13;
    v14 = *(_QWORD *)(a1 + 40);
    v16 = *(id *)(a1 + 48);
    objc_msgSend(v6, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 0, 5, 0, v13, v14, v5, v15);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
    if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "_reloadChatRegistryOnMainThread")))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Successfully synced attachments after new device bringup", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "syncState");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setAnalyticSyncDatesDictionaryObject:forKey:shouldOverrideIfExists:", v9, *MEMORY[0x1E0D37A60], 0);

    IMSetDomainBoolForKey();
    objc_msgSend(*(id *)(a1 + 32), "_noteMeticsForSyncEndedWithSuccces:", 1);
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v10, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 0, 0, v11, 1);

    objc_msgSend(*(id *)(a1 + 32), "kickOffEagerSyncIfApplicable");
  }

}

uint64_t sub_1D1583088(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "beginInitialSyncAttemptCount:withActivity:", *(_QWORD *)(a1 + 48) + 1, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D158309C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "beginInitialSyncAttemptCount:withActivity:", *(_QWORD *)(a1 + 48) + 1, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D15830B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "beginInitialSyncAttemptCount:withActivity:", *(_QWORD *)(a1 + 48) + 1, *(_QWORD *)(a1 + 40));
}

void sub_1D1583270()
{
  id v0;

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "_forceReloadChats:", 1);

}

void sub_1D15834A4(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  _QWORD v16[5];
  id v17;
  uint8_t buf[4];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "_didPassAccountAndIdentityUpdateNeeds");
    v8 = *(void **)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 56);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = sub_1D1583670;
    v16[3] = &unk_1E922C100;
    v16[4] = v8;
    v17 = v7;
    objc_msgSend(v8, "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", v17, v9, v16);

  }
  else
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v6;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "****** Manatee keys not available. Not syncing %@ ******", buf, 0xCu);
      }

    }
    v11 = *(void **)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1D158399C;
    v14[3] = &unk_1E92287A0;
    v15 = v6;
    objc_msgSend(v11, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 0, v12, 0, v13, v15, v14);

  }
}

void sub_1D1583670(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  int v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:", 1, *(_QWORD *)(a1 + 40) != 0, 1, 1, a2);

  if ((_DWORD)a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "enableAttachmentMetricCollection");

    if (v6)
    {
      +[IMDCKCacheDeleteManager sharedInstance](IMDCKCacheDeleteManager, "sharedInstance");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "metricAttachmentsToPurge:withActivity:", 300000000, *(_QWORD *)(a1 + 40));

    }
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v8))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v21 = 138412290;
        v22 = v8;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "First full sync is complete, noting down date %@", (uint8_t *)&v21, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "syncState");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setAnalyticSyncDatesDictionaryObject:forKey:shouldOverrideIfExists:", v8, *MEMORY[0x1E0D37A30], 0);

    objc_msgSend(*(id *)(a1 + 32), "syncState");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "setAnalyticSyncDatesDictionaryObject:forKey:shouldOverrideIfExists:", v8, *MEMORY[0x1E0D37A18], 0);

  }
  objc_msgSend(MEMORY[0x1E0D398D8], "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "noteCoreDuetSyncEnded");

  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v12) = objc_msgSend(v13, "logDumpIsNecessaryAfterSync");

  v15 = IMOSLoggingEnabled(v14);
  if ((_DWORD)v12)
  {
    if (v15)
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        LOWORD(v21) = 0;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "We need to dump logs after syncing", (uint8_t *)&v21, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "logCollectorAddress");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:reasonString:", CFSTR("LowSyncStats"), 1, 0, v19, CFSTR("LowSyncStats"));

  }
  else if (v15)
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      LOWORD(v21) = 0;
      _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "We don't need to dump logs", (uint8_t *)&v21, 2u);
    }

  }
}

void sub_1D158399C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 32);
      v4 = 138412290;
      v5 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Could retry periodic sync based on error %@", (uint8_t *)&v4, 0xCu);
    }

  }
}

void sub_1D1583C3C(uint64_t a1, char a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = IMOSLoggingEnabled(v5);
  if ((a2 & 1) != 0)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v8) = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Attachment metadata only sync succeeded", (uint8_t *)&v8, 2u);
      }
LABEL_9:

    }
  }
  else if (v6)
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v5;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Attachment metadata only sync failed with error: %@", (uint8_t *)&v8, 0xCu);
    }
    goto LABEL_9;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1D15844C8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v3 = *(void **)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1D1584580;
  v6[3] = &unk_1E922DCC0;
  v6[4] = v3;
  v4 = v2;
  v5 = *(_QWORD *)(a1 + 64);
  v7 = v4;
  v10 = v5;
  v8 = *(id *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v3, "syncAttachmentMetadataFirstSyncWithActivity:deviceConditionsToCheck:completionBlock:", v4, 0, v6);

}

void sub_1D1584580(uint64_t a1, char a2, uint64_t a3)
{
  void *v4;
  void *v5;
  void *v6;
  id *v7;
  id v8;
  uint64_t v9;
  id *v10;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  _QWORD v24[5];
  id v25;
  _QWORD v26[2];

  v4 = *(void **)(a1 + 32);
  if ((a2 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "chatSyncController");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_1D1584730;
    v19[3] = &unk_1E922DCC0;
    v6 = *(void **)(a1 + 40);
    v19[4] = *(_QWORD *)(a1 + 32);
    v7 = &v20;
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 64);
    v20 = v8;
    v23 = v9;
    v10 = &v21;
    v21 = *(id *)(a1 + 48);
    v22 = *(id *)(a1 + 56);
    objc_msgSend(v5, "syncChatsWithType:withActivity:completion:", 1, v8, v19);

  }
  else
  {
    v12 = *(_QWORD *)(a1 + 64);
    v13 = *(void **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = sub_1D158471C;
    v24[3] = &unk_1E922D520;
    v24[4] = v4;
    v7 = &v25;
    v15 = v13;
    v17 = *(void **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v25 = v15;
    v26[1] = v16;
    v10 = (id *)v26;
    v26[0] = v17;
    if ((objc_msgSend(v4, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 2, v15, v12, v14, a3, v24) & 1) == 0)
    {
      v18 = *(_QWORD *)(a1 + 56);
      if (v18)
        (*(void (**)(uint64_t, _QWORD))(v18 + 16))(v18, 0);
    }
  }

}

uint64_t sub_1D158471C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

void sub_1D1584730(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id *v11;
  id v12;
  uint64_t v13;
  id *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  id v25;
  _QWORD v26[2];
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  char v32;
  uint8_t buf[16];

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v23) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(_QWORD *)(a1 + 40) != 0, 1, a2, 0, 0, v23, *(_QWORD *)(a1 + 64));

  if ((_DWORD)a2)
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Successfully synced chats", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "messageSyncController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = sub_1D1584990;
    v27[3] = &unk_1E922DC98;
    v10 = *(void **)(a1 + 40);
    v27[4] = *(_QWORD *)(a1 + 32);
    v11 = &v28;
    v12 = v10;
    v32 = a2;
    v13 = *(_QWORD *)(a1 + 64);
    v28 = v12;
    v31 = v13;
    v14 = &v29;
    v29 = *(id *)(a1 + 48);
    v30 = *(id *)(a1 + 56);
    objc_msgSend(v9, "syncMessagesWithSyncType:deviceConditionsToCheck:activity:completionBlock:", 1, 0, v12, v27);

  }
  else
  {
    v16 = *(void **)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 48);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = sub_1D1585534;
    v24[3] = &unk_1E922D520;
    v24[4] = v16;
    v11 = &v25;
    v19 = v15;
    v21 = *(void **)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 64);
    v25 = v19;
    v26[1] = v20;
    v14 = (id *)v26;
    v26[0] = v21;
    if ((objc_msgSend(v16, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 2, v19, v17, v18, v5, v24) & 1) == 0)
    {
      v22 = *(_QWORD *)(a1 + 56);
      if (v22)
        (*(void (**)(uint64_t, _QWORD))(v22 + 16))(v22, 0);
    }
  }

}

void sub_1D1584990(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id *v11;
  id v12;
  uint64_t v13;
  id *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[5];
  id v25;
  _QWORD v26[2];
  _QWORD v27[5];
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  char v32;
  char v33;
  uint8_t buf[16];

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v23) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(_QWORD *)(a1 + 40) != 0, 1, *(unsigned __int8 *)(a1 + 72), 1, a2, v23, *(_QWORD *)(a1 + 64));

  if (v5 || !(_DWORD)a2)
  {
    v16 = *(void **)(a1 + 32);
    v15 = *(void **)(a1 + 40);
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(a1 + 48);
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = sub_1D1585520;
    v24[3] = &unk_1E922D520;
    v24[4] = v16;
    v11 = &v25;
    v19 = v15;
    v21 = *(void **)(a1 + 56);
    v20 = *(_QWORD *)(a1 + 64);
    v25 = v19;
    v26[1] = v20;
    v14 = (id *)v26;
    v26[0] = v21;
    if ((objc_msgSend(v16, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 3, v19, v17, v18, v5, v24) & 1) == 0)
    {
      v22 = *(_QWORD *)(a1 + 56);
      if (v22)
        (*(void (**)(uint64_t, _QWORD))(v22 + 16))(v22, 0);
    }
  }
  else
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Successfully synced messages", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "updateSyncController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 3221225472;
    v27[2] = sub_1D1584BF4;
    v27[3] = &unk_1E922DC70;
    v10 = *(void **)(a1 + 40);
    v27[4] = *(_QWORD *)(a1 + 32);
    v11 = &v28;
    v12 = v10;
    v32 = *(_BYTE *)(a1 + 72);
    v33 = a2;
    v13 = *(_QWORD *)(a1 + 64);
    v28 = v12;
    v31 = v13;
    v14 = &v29;
    v29 = *(id *)(a1 + 48);
    v30 = *(id *)(a1 + 56);
    objc_msgSend(v9, "syncWithType:withActivity:withCompletion:", 0, 0, v27);

  }
}

void sub_1D1584BF4(uint64_t a1, int a2, void *a3)
{
  id v5;
  int v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  id *v13;
  id *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  _QWORD v25[5];
  id v26;
  _QWORD v27[2];
  _QWORD v28[5];
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  __int16 v33;
  uint8_t buf[4];
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = IMOSLoggingEnabled(v5);
  if (v5 || !a2)
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v35 = v5;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Failed syncing updates with error %@", buf, 0xCu);
      }

    }
    v17 = *(void **)(a1 + 32);
    v16 = *(void **)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 64);
    v19 = *(_QWORD *)(a1 + 48);
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = sub_1D158550C;
    v25[3] = &unk_1E922D520;
    v25[4] = v17;
    v20 = v16;
    v22 = *(void **)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 64);
    v26 = v20;
    v27[1] = v21;
    v27[0] = v22;
    v23 = objc_msgSend(v17, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 4, v20, v18, v19, v5, v25);
    v13 = &v26;
    v14 = (id *)v27;
    if ((v23 & 1) == 0)
    {
      v24 = *(_QWORD *)(a1 + 56);
      if (v24)
        (*(void (**)(uint64_t, _QWORD))(v24 + 16))(v24, 0);
    }
  }
  else
  {
    if (v6)
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Successfully synced updates", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "postSyncStateToCloudKit:", CFSTR("AttachmentSyncStarted"));

    objc_msgSend(*(id *)(a1 + 32), "attachmentSyncController");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = *(void **)(a1 + 40);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_1D1584EDC;
    v28[3] = &unk_1E922DC70;
    v28[4] = *(_QWORD *)(a1 + 32);
    v11 = v10;
    v33 = *(_WORD *)(a1 + 72);
    v12 = *(_QWORD *)(a1 + 64);
    v29 = v11;
    v32 = v12;
    v30 = *(id *)(a1 + 48);
    v31 = *(id *)(a1 + 56);
    objc_msgSend(v9, "syncAttachmentsWithSyncType:deviceConditionsToCheck:activity:completionBlock:", 1, 0, v11, v28);

    v13 = &v29;
    v14 = &v30;
  }

}

void sub_1D1584EDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  id v32;
  id v33;
  uint64_t v34;
  _QWORD v35[5];
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint8_t buf[16];

  v4 = a3;
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  BYTE3(v30) = 0;
  *(_WORD *)((char *)&v30 + 1) = v4 == 0;
  LOBYTE(v30) = 1;
  objc_msgSend(v5, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(_QWORD *)(a1 + 40) != 0, 1, *(unsigned __int8 *)(a1 + 72), 1, *(unsigned __int8 *)(a1 + 73), v30, *(_QWORD *)(a1 + 64));

  if (v4)
  {
    v8 = *(void **)(a1 + 32);
    v7 = *(void **)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 48);
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = sub_1D15854F8;
    v31[3] = &unk_1E922D520;
    v31[4] = v8;
    v11 = v7;
    v13 = *(void **)(a1 + 56);
    v12 = *(_QWORD *)(a1 + 64);
    v32 = v11;
    v34 = v12;
    v33 = v13;
    LOBYTE(v8) = objc_msgSend(v8, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 5, v11, v9, v10, v4, v31);

    if ((v8 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Successfully synced attachments", buf, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0D397B8], "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "syncStartDate");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:chatsDidsync:messagesDidSync:attachmentsDidSync:recoverableMessagesDidSync:", v16, 1, 1, 1, 1);

    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Successfully synced attachments", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_reloadChatRegistryOnMainThread");
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *MEMORY[0x1E0D384D0];
    v21 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "syncStartDate");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "timeIntervalSinceDate:", v23);
    objc_msgSend(v21, "numberWithDouble:");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "trackEvent:withStatistic:", v20, v24);

    objc_msgSend(*(id *)(a1 + 32), "_noteMeticsForSyncEndedWithSuccces:", 1);
    objc_msgSend(*(id *)(a1 + 32), "_writeDownSyncDate");
    v26 = *(void **)(a1 + 32);
    v25 = *(void **)(a1 + 40);
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = sub_1D1585288;
    v35[3] = &unk_1E922DC48;
    v35[4] = v26;
    v27 = v25;
    v28 = *(_QWORD *)(a1 + 64);
    v36 = v27;
    v39 = v28;
    v37 = *(id *)(a1 + 48);
    v38 = *(id *)(a1 + 56);
    objc_msgSend(v26, "syncDeletesToCloudKitWithActivity:completion:", v27, v35);

  }
  objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
  v29 = *(_QWORD *)(a1 + 56);
  if (v29)
    (*(void (**)(uint64_t, BOOL))(v29 + 16))(v29, v4 == 0);
LABEL_15:

}

void sub_1D1585288(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Completed syncing deletes", buf, 2u);
    }

  }
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = sub_1D158539C;
  v10 = &unk_1E922DC20;
  v3 = *(void **)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 64);
  v12 = v4;
  v14 = v5;
  v13 = *(id *)(a1 + 48);
  v6 = _Block_copy(&v7);
  objc_msgSend(*(id *)(a1 + 32), "_syncRecoverableMessagesToCloudKitWithActivity:syncAttemptCount:startTime:syncCompletionBlock:retryCompletionBock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 48), v6, *(_QWORD *)(a1 + 56), v7, v8, v9, v10, v11);

}

void sub_1D158539C(uint64_t a1)
{
  _xpc_activity_s *v2;
  _BOOL8 v3;
  _BOOL4 v4;
  NSObject *v5;
  void *v6;
  _BOOL8 v7;
  uint64_t v8;
  void *v9;
  _DWORD v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "_resetSyncStateAndAttemptCounts");
  objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
  v2 = *(_xpc_activity_s **)(a1 + 40);
  if (v2)
  {
    v3 = xpc_activity_set_state(v2, 5);
    v4 = v3;
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v10[0] = 67109120;
        v10[1] = v4;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Set state full sync activity result %d", (uint8_t *)v10, 8u);
      }

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(a1 + 40) != 0;
  v8 = *(_QWORD *)(a1 + 56);
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v6, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 1, v7, v8, 1);

}

uint64_t sub_1D15854F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D158550C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D1585520(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D1585534(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

void sub_1D1585670(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  id v9;
  uint8_t buf[4];
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v3;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Done deleteing chat with error %@", buf, 0xCu);
    }

  }
  if (v3)
  {
    objc_msgSend(a1[4], "ckUtilities");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "reportErrorForSyncType:syncStep:response:error:", 4, CFSTR("ChatDeletionComplete"), 0, v3);

  }
  objc_msgSend(a1[4], "messageSyncController");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D1585814;
  v7[3] = &unk_1E922A210;
  v7[4] = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  objc_msgSend(v6, "syncDeletedMessagesToCloudKitWithCompletion:", v7);

}

void sub_1D1585814(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[4];
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v12 = v4;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Done deleteing messages with error %@", buf, 0xCu);
    }

  }
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "reportErrorForSyncType:syncStep:response:error:", 4, CFSTR("MessageDeletionComplete"), 0, v4);

  }
  objc_msgSend(*(id *)(a1 + 32), "attachmentSyncController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D15859A4;
  v9[3] = &unk_1E92284E8;
  v9[4] = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v7, "syncAttachmentDeletesToCloudKitWithActivity:completion:", v8, v9);

}

void sub_1D15859A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  uint8_t buf[4];
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v11 = v4;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Done deleteing attachments with error %@", buf, 0xCu);
    }

  }
  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "reportErrorForSyncType:syncStep:response:error:", 4, CFSTR("AttachmentDeletionComplete"), 0, v4);

  }
  objc_msgSend(*(id *)(a1 + 32), "recoverableMessageSyncController");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D1585B30;
  v8[3] = &unk_1E92284E8;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  objc_msgSend(v7, "syncRemovedRecoverableMessagesToCloudKitWithCompletion:", v8);

}

void sub_1D1585B30(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  uint64_t v5;
  id v6;

  v6 = a3;
  if (v6)
  {
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "reportErrorForSyncType:syncStep:response:error:", 4, CFSTR("RecoverableMessageDeletionComplete"), 0, v6);

  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

void sub_1D1585CBC(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  id v28;
  id v29;
  uint64_t v30;
  uint8_t buf[16];

  v5 = a3;
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v26) = 16843009;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(_QWORD *)(a1 + 40) != 0, 1, 1, 1, 1, v26, *(_QWORD *)(a1 + 72));

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0D397B8], "sharedInstance");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "syncStartDate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:chatsDidsync:messagesDidSync:attachmentsDidSync:recoverableMessagesDidSync:", v8, 1, 1, 1, 1);

    if (IMOSLoggingEnabled(v9))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "[Recently Deleted] Successfully synced recoverable messages", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "_reloadChatRegistryOnMainThread");
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *MEMORY[0x1E0D384D0];
    v13 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "syncStartDate");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "timeIntervalSinceDate:", v15);
    objc_msgSend(v13, "numberWithDouble:");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "trackEvent:withStatistic:", v12, v16);

    objc_msgSend(*(id *)(a1 + 32), "_noteMeticsForSyncEndedWithSuccces:", 1);
    objc_msgSend(*(id *)(a1 + 32), "_writeDownSyncDate");
    goto LABEL_14;
  }
  v18 = *(void **)(a1 + 32);
  v17 = *(void **)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 48);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 3221225472;
  v27[2] = sub_1D1585FD4;
  v27[3] = &unk_1E922D520;
  v27[4] = v18;
  v21 = v17;
  v22 = *(_QWORD *)(a1 + 72);
  v28 = v21;
  v30 = v22;
  v29 = *(id *)(a1 + 56);
  v23 = objc_msgSend(v18, "_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:", 1, 6, v21, v19, v20, v5, v27);
  if (!(_DWORD)v23)
  {

LABEL_14:
    v25 = *(_QWORD *)(a1 + 64);
    if (v25)
      (*(void (**)(void))(v25 + 16))();
    goto LABEL_16;
  }
  if (IMOSLoggingEnabled(v23))
  {
    OSLogHandleForIMFoundationCategory();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "[Recently Deleted] Recoverable messages sync unsuccessful. Will Retry", buf, 2u);
    }

  }
LABEL_16:

}

uint64_t sub_1D1585FD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56) + 1, *(_QWORD *)(a1 + 48));
}

void sub_1D1586218(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  id v6;
  id v7;

  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "postSyncStateToCloudKit:", CFSTR("PeriodicChatSyncStarted"));

  objc_msgSend(*(id *)(a1 + 32), "chatSyncController");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D15862EC;
  v5[3] = &unk_1E9229258;
  v4 = *(void **)(a1 + 40);
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v7 = *(id *)(a1 + 48);
  objc_msgSend(v3, "syncChatsWithType:withActivity:completion:", 1, v6, v5);

}

void sub_1D15862EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  const __CFString *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _xpc_activity_s *v14;
  _BOOL8 v15;
  _BOOL4 v16;
  NSObject *v17;
  void *v18;
  _BOOL8 v19;
  void *v20;
  int v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = CFSTR("NO");
      if ((_DWORD)a2)
        v7 = CFSTR("YES");
      v21 = 138412290;
      v22 = v7;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Synced chats with success:%@", (uint8_t *)&v21, 0xCu);
    }

  }
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if ((_DWORD)a2)
    v9 = (_QWORD *)MEMORY[0x1E0D384E0];
  else
    v9 = (_QWORD *)MEMORY[0x1E0D384E8];
  v10 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "syncStartDate");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "timeIntervalSinceDate:", v12);
  objc_msgSend(v10, "numberWithDouble:");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "trackEvent:withStatistic:", *v9, v13);

  objc_msgSend(*(id *)(a1 + 32), "_noteMeticsForSyncEndedWithSuccces:", a2);
  v14 = *(_xpc_activity_s **)(a1 + 40);
  if (v14)
  {
    v15 = xpc_activity_set_state(v14, 5);
    v16 = v15;
    if (IMOSLoggingEnabled(v15))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        v21 = 67109120;
        LODWORD(v22) = v16;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Set state for chat syncing with result %d", (uint8_t *)&v21, 8u);
      }

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = *(_QWORD *)(a1 + 40) != 0;
  objc_msgSend(MEMORY[0x1E0C99D68], "now");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v18, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 3, v19, 0, a2);

  objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
}

void sub_1D158668C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  id v18;
  __int16 v19;
  const __CFString *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  IMGetCachedDomainValueForKey();
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v6)
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v17 = 138412290;
        v18 = v6;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Unable to check exit zone record Error: %@", (uint8_t *)&v17, 0xCu);
      }

    }
    goto LABEL_15;
  }
  if (v5 || *(_BYTE *)(a1 + 56))
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = CFSTR("YES");
        if (!*(_BYTE *)(a1 + 56))
          v11 = CFSTR("NO");
        v17 = 138412546;
        v18 = v5;
        v19 = 2112;
        v20 = v11;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Entered exit zone at %@. Aborting sync, downloading all attachments. {shouldDownloadAssets: %@}", (uint8_t *)&v17, 0x16u);
      }

    }
LABEL_14:
    objc_msgSend(*(id *)(a1 + 32), "_beginExitStateCleanupIfNeededWithActivity:", *(_QWORD *)(a1 + 40));
LABEL_15:
    v12 = 0;
    goto LABEL_16;
  }
  v14 = IMOSLoggingEnabled(v7);
  if (v8)
  {
    if (v14)
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        v17 = 138412290;
        v18 = v8;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "We are downgrading the security level, downgrade date %@. We can't download at this time. When the Identity is restored, we will kick sync appropriately", (uint8_t *)&v17, 0xCu);
      }

    }
    goto LABEL_14;
  }
  if (v14)
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Not in exit state, continuing sync", (uint8_t *)&v17, 2u);
    }

  }
  v12 = 1;
LABEL_16:
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(uint64_t, uint64_t, id))(v13 + 16))(v13, v12, v6);

}

void sub_1D1586D64(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "attachmentSyncController");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "downloadAttachmentAssetsWithActivity:restoringAttachments:completion:", *(_QWORD *)(a1 + 40), 1, 0);

  }
  else if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = 138412290;
      v10 = v6;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Could not fetch salt due to error %@ aborting cleaning up MOC", (uint8_t *)&v9, 0xCu);
    }

  }
}

void sub_1D1587120(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1587028);
  }
  _Unwind_Resume(a1);
}

void sub_1D1587348(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;
  id v7;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (id *)(a1 + 40);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "syncStartDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR("Started by %@, running since: %@:"), v2, v5);
  v7 = (id)objc_claimAutoreleasedReturnValue();

  v6 = objc_loadWeakRetained(v3);
  objc_msgSend(v6, "_autoBugCaptureWithSubType:debugDescription:", CFSTR("LongRunningSync"), v7);

}

void sub_1D15878C4(uint64_t a1, int a2, void *a3)
{
  id v4;
  NSObject *v5;
  const __CFString *v6;
  const __CFString *v7;
  int v8;
  const __CFString *v9;
  __int16 v10;
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = CFSTR("NO");
      if (a2)
        v7 = CFSTR("YES");
      else
        v7 = CFSTR("NO");
      if (v4)
        v6 = CFSTR("YES");
      v8 = 138412546;
      v9 = v7;
      v10 = 2112;
      v11 = v6;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Wrote sync date success to CloudKit %@ error %@", (uint8_t *)&v8, 0x16u);
    }

  }
}

uint64_t sub_1D1587AB0(uint64_t result, int a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = result;
    objc_msgSend(*(id *)(result + 32), "_noteMetricsForSyncStartFrom:fullSync:", CFSTR("ManualChatSync"), 0);
    return objc_msgSend(*(id *)(v2 + 32), "_syncChatsWithActivity:", 0);
  }
  return result;
}

void sub_1D1588138(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v7;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "exitRecordDateWithCompletion in updateDowngradedDateIfNeeded failed with error: %@", buf, 0xCu);
      }

    }
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v7);
  }
  else
  {
    v10 = IMGetDomainBoolForKeyWithDefaultValue();
    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "_primaryiCloudAccountSecurityLevel");

    if (v10 != (v12 == 4))
    {
      IMCloudKitSetEligibleToToggleMiCSwitch();
      IMSetDomainBoolForKey();
      IMGetCachedDomainValueForKey();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v10 ^ 1) & 1 | (v12 == 4))
      {
        v14 = 0;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
      }
      if ((objc_msgSend(v13, "isEqualToDate:", v14) & 1) == 0)
        IMSetDomainValueForKey();

    }
    +[IMDCKUtilities sharedInstance](IMDCKUtilities, "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = sub_1D15883B8;
    v17[3] = &unk_1E922DDA8;
    v16 = *(id *)(a1 + 40);
    v18 = 0;
    v19 = v16;
    objc_msgSend(v15, "fetchCloudKitAccountStatusAndUpdateEligibilityAndNeedsRepairStatusWithCompletion:", v17);

  }
}

void sub_1D15883B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  id v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7 = 138412290;
      v8 = v4;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Finished updating security level with error: %@", (uint8_t *)&v7, 0xCu);
    }

  }
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(_QWORD *)(a1 + 32));

}

void sub_1D1588824(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Finished checking for possible security level downgraded with error: %@. Broadcasting new state if needed.", (uint8_t *)&v4, 0xCu);
    }

  }
}

uint64_t sub_1D1588C6C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "verifyAccountsMatchForMoc");
  return IMSetDomainBoolForKey();
}

void sub_1D158AE3C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D158AB0CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D158BD38()
{
  IMMessagesToTrack *v0;
  void *v1;

  v0 = objc_alloc_init(IMMessagesToTrack);
  v1 = (void *)qword_1ED935E58;
  qword_1ED935E58 = (uint64_t)v0;

}

void sub_1D158BE80(uint64_t a1)
{
  void *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "recentMessageIDs");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "recentMessageIDs");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "count");
  v5 = objc_msgSend(*(id *)(a1 + 32), "maxNumberOfMessages");

  if (v4 > v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "recentMessageIDs");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "removeObjectAtIndex:", 0);

  }
}

void sub_1D158BFEC(uint64_t a1)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "recentMessageIDs");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, objc_msgSend(v3, "containsObject:", *(_QWORD *)(a1 + 40)));

}

void sub_1D158C898(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D158C760);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D158D868(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  LOBYTE(v3) = *(_BYTE *)(a1 + 97);
  return objc_msgSend(*(id *)(a1 + 32), "registerChat:style:displayName:groupID:originalGroupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), a2, *(_QWORD *)(a1 + 88), v3);
}

uint64_t sub_1D158E6AC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__messageStoreCompletion_inputMessage_outputMessage_originalMessage_completionBlock_);
}

void sub_1D158F590(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  id v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if ((objc_msgSend(v3, "isTypingMessage") & 1) == 0 && (objc_msgSend(v3, "isSuggestedActionResponse") & 1) == 0)
  {
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "addMessage:toChat:", v3, *(_QWORD *)(a1 + 32));

    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:", *(_QWORD *)(a1 + 32), v3, 1, 0);

    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "chatsForMessage:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
    v10 = v8;
    if (v8)
    {
      v11 = *(_QWORD *)v18;
      *(_QWORD *)&v9 = 138412546;
      v16 = v9;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v18 != v11)
            objc_enumerationMutation(v7);
          v13 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v12);
          if (v13 != *(_QWORD *)(a1 + 32))
          {
            if (IMOSLoggingEnabled(v8))
            {
              OSLogHandleForIMFoundationCategory();
              v14 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = v16;
                v22 = v3;
                v23 = 2112;
                v24 = v13;
                _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Removing message: %@   from chat: %@ due to send on different service", buf, 0x16u);
              }

            }
            +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance", v16);
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "removeMessage:fromChat:", v3, v13);

          }
          ++v12;
        }
        while (v10 != v12);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        v10 = v8;
      }
      while (v8);
    }

  }
}

void sub_1D158F7D8(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint8_t buf[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (a2)
  {
    v10 = objc_msgSend(v8, "scheduleType");
    v11 = objc_msgSend(v9, "scheduleState");
    if (v11 == 1)
    {
      v12 = 0;
    }
    else
    {
      v11 = objc_msgSend(v7, "scheduleState");
      v12 = v11 != 2;
    }
    if (v10 == 2 && !v12)
    {
      if (IMOSLoggingEnabled(v11))
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v14 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          v26 = v14;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Updating lastScheduledMessageCreatedDate for sent scheduled message in chat: %@", buf, 0xCu);
        }

      }
      v15 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "setLastScheduledMessageCreatedDate:", v16);

    }
    v17 = (id *)(a1 + 32);
    objc_msgSend(*(id *)(a1 + 40), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(*(id *)(a1 + 32), "isBlackholed"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "accountID");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(unsigned __int8 *)(a1 + 64);
    objc_msgSend(*(id *)(a1 + 32), "chatProperties");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*v17, "groupID");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*v17, "personCentricID");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:", v19, v20, v21, v22, v23, v24, v9);

  }
}

void sub_1D1590A40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1590970);
  }
  _Unwind_Resume(a1);
}

void sub_1D1591DF4(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chats");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v15 = v3;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = (id)objc_msgSend(v3, "copy");
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v8);
        v10 = (void *)MEMORY[0x1D17EA968]();
        objc_msgSend(v9, "lastMessage");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "guid");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v12, "isEqualToString:", v1);

        if (v13)
        {
          +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:", v9, 0, 0, 0);

        }
        objc_autoreleasePoolPop(v10);
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }

}

uint64_t sub_1D15955F8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  double v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  _BOOL4 v27;
  uint64_t v28;
  const __CFString *v29;
  NSObject *v30;
  double v31;
  void *v32;
  int v33;
  void *v34;
  void *v35;
  uint64_t v36;
  double v37;
  double v38;
  NSObject *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  NSObject *v46;
  int v47;
  void *v48;
  void *v49;
  void *v50;
  NSObject *v51;
  char v52;
  void *v53;
  void *v54;
  void *v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint8_t buf[4];
  double v62;
  __int16 v63;
  const __CFString *v64;
  uint64_t v65;
  void *v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chats");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v58;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v58 != v5)
        objc_enumerationMutation(v3);
      v7 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v6);
      v8 = (void *)MEMORY[0x1D17EA968]();
      objc_msgSend(v7, "lastMessage");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "guid");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isEqualToIgnoringCase:", *(_QWORD *)(a1 + 32));

      if (v11)
        break;
      objc_autoreleasePoolPop(v8);
      if (v4 == ++v6)
      {
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v57, v67, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    if (IMOSLoggingEnabled(v12))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v62 = *(double *)&v7;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "   Found message from chat: %@", buf, 0xCu);
      }

    }
    objc_msgSend(v7, "lastMessage");
    v14 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
    objc_autoreleasePoolPop(v8);

    if (v14 != 0.0)
      goto LABEL_16;
  }
  else
  {
LABEL_9:

  }
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "messageWithGUID:", *(_QWORD *)(a1 + 32));
  v14 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

LABEL_16:
  v16 = objc_msgSend(*(id *)&v14, "isDelivered");
  if ((_DWORD)v16)
  {
    if (IMOSLoggingEnabled(v16))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "   Message was already marked as delivered, ignoring", buf, 2u);
      }
LABEL_25:

      goto LABEL_26;
    }
    goto LABEL_26;
  }
  v18 = objc_msgSend(*(id *)&v14, "errorCode");
  if ((_DWORD)v18 != 43)
  {
    objc_msgSend(*(id *)&v14, "service");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "service");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "internalName");
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    v19 = 0;
    if (v14 != 0.0 && v20 && v22)
    {
      v23 = objc_msgSend(*(id *)(a1 + 40), "messageServiceNamed:canProcessMessagesFromServiceNamed:", v22, v20);
      if ((_DWORD)v23)
      {
        if (IMOSLoggingEnabled(v23))
        {
          OSLogHandleForIMFoundationCategory();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v62 = v14;
            _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Found old message for delivery receipt: %@", buf, 0xCu);
          }

        }
        v25 = objc_msgSend(*(id *)&v14, "isDelivered");
        if (!(_DWORD)v25
          || (objc_msgSend(*(id *)&v14, "timeDelivered"),
              v26 = (void *)objc_claimAutoreleasedReturnValue(),
              v27 = v26 == 0,
              v26,
              v27))
        {
          if (IMOSLoggingEnabled(v25))
          {
            OSLogHandleForIMEventCategory();
            v30 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              v31 = *(double *)(a1 + 32);
              *(_DWORD *)buf = 138412290;
              v62 = v31;
              _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "Received delivery receipt for message: %@", buf, 0xCu);
            }

          }
          sub_1D1595E80(*(void **)&v14, *(_QWORD *)(a1 + 48));
          objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v33 = objc_msgSend(v32, "isScheduledMessagesCoreEnabled");

          if (v33)
          {
            objc_msgSend(*(id *)&v14, "setScheduleType:", 0);
            objc_msgSend(*(id *)&v14, "setScheduleState:", 0);
          }
          objc_msgSend(*(id *)&v14, "time");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)&v14, "timeDelivered");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          v36 = objc_msgSend(v35, "timeIntervalSinceDate:", v34);
          v38 = v37;
          if (IMOSLoggingEnabled(v36))
          {
            OSLogHandleForIMEventCategory();
            v39 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134217984;
              v62 = v38;
              _os_log_impl(&dword_1D1413000, v39, OS_LOG_TYPE_INFO, "Delivery receipt time was: %f", buf, 0xCu);
            }

          }
          if (v38 > 0.0)
          {
            objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v38);
            v41 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v40, "trackEvent:withStatistic:", *MEMORY[0x1E0D38AC0], v41);

            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v38);
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            v65 = *MEMORY[0x1E0D38468];
            v66 = v42;
            objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "trackEvent:withDictionary:", *MEMORY[0x1E0D385D0], v43);

            objc_msgSend(MEMORY[0x1E0D399B8], "sharedInstance");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v45, "logMessageDelivered:deliveryDuration:messageProtocol:", *(_QWORD *)(a1 + 32), v42, v20);

          }
          v28 = objc_msgSend(*(id *)&v14, "errorCode");
          if (!(_DWORD)v28)
          {
            v29 = CFSTR("NO");
LABEL_59:
            +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
            v48 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v48, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", *(_QWORD *)&v14, 0, 1, 1, 36873);
            v49 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v49, "guid");
            v50 = (void *)objc_claimAutoreleasedReturnValue();
            sub_1D1591DF4(v50);

            v19 = 1;
            v14 = *(double *)&v49;
            goto LABEL_60;
          }
        }
        else
        {
          v28 = objc_msgSend(*(id *)&v14, "errorCode");
          if (!(_DWORD)v28)
          {
            v19 = 0;
            v29 = CFSTR("NO");
LABEL_60:
            if (IMOSLoggingEnabled(v28))
            {
              OSLogHandleForIMFoundationCategory();
              v51 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                v62 = v14;
                v63 = 2112;
                v64 = v29;
                _os_log_impl(&dword_1D1413000, v51, OS_LOG_TYPE_INFO, "Updated message: %@  had error: %@", buf, 0x16u);
              }

            }
            v52 = objc_msgSend(*(id *)(a1 + 40), "isAwaitingStorageTimer");
            v53 = *(void **)(a1 + 40);
            if ((v52 & 1) != 0)
            {
              objc_msgSend(*(id *)&v14, "guid");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v53, "noteSuppressedMessageUpdate:", v54);
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 40), "broadcasterForChatListeners");
              v54 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(*(id *)(a1 + 56), "accountID");
              v55 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v54, "account:chat:style:chatProperties:messageUpdated:", v55, 0, 0, 0, *(_QWORD *)&v14);

            }
            goto LABEL_68;
          }
        }
        if (IMOSLoggingEnabled(v28))
        {
          OSLogHandleForIMFoundationCategory();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
          {
            v47 = objc_msgSend(*(id *)&v14, "errorCode");
            *(_DWORD *)buf = 67109120;
            LODWORD(v62) = v47;
            _os_log_impl(&dword_1D1413000, v46, OS_LOG_TYPE_INFO, "Message had error: %d", buf, 8u);
          }

        }
        objc_msgSend(*(id *)&v14, "setErrorCode:", 0);
        v29 = CFSTR("YES");
        goto LABEL_59;
      }
      v19 = 0;
    }
LABEL_68:

    goto LABEL_69;
  }
  if (IMOSLoggingEnabled(v18))
  {
    OSLogHandleForIMFoundationCategory();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "   Message was already marked as black holed, ignoring", buf, 2u);
    }
    goto LABEL_25;
  }
LABEL_26:
  v19 = 0;
LABEL_69:

  return v19;
}

void sub_1D1595E80(void *a1, uint64_t a2)
{
  void *v3;
  id v4;

  v4 = a1;
  if (a2)
  {
    objc_msgSend(v4, "setTimeDelivered:", a2);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setTimeDelivered:", v3);

  }
  objc_msgSend(v4, "setFlags:", objc_msgSend(v4, "flags") | 0x9000);

}

uint64_t sub_1D1595F00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didReceiveMessageDeliveryReceiptForMessageID:attempts:date:account:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64) + 1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1D15961CC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  objc_msgSend(*(id *)(a1 + 32), "historyForMessagePart:", a2);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "messagePartText");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0D366B8], 0, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(void **)(a1 + 32);
  objc_msgSend(v6, "body");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "__im_messageTextByAddingMessagePart:atIndex:", v4, (int)objc_msgSend(v5, "intValue"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setBody:", v8);

}

void sub_1D1596B60(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  _QWORD v23[4];
  NSObject *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t v29[128];
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatsForMessageGUID:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v31 = v6;
      v32 = 2112;
      v33 = v3;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Found chats for messageID: %@   chats: %@", buf, 0x16u);
    }

  }
  if (!objc_msgSend(v3, "count") && IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMEventCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v31 = v8;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Found no chats for messageID: %@", buf, 0xCu);
    }

  }
  v9 = dispatch_group_create();
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v10 = v3;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  v13 = v11;
  if (v11)
  {
    v14 = *(_QWORD *)v26;
    *(_QWORD *)&v12 = 138412546;
    v22 = v12;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v26 != v14)
          objc_enumerationMutation(v10);
        v16 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v15);
        if (v16)
        {
          if (IMOSLoggingEnabled(v11))
          {
            OSLogHandleForIMEventCategory();
            v17 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              v18 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)buf = v22;
              v31 = v18;
              v32 = 2112;
              v33 = v16;
              _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Found chat for messageID: %@, chat: %@", buf, 0x16u);
            }

          }
          objc_msgSend(v16, "tearDownToneNotificationSessionIfNeeded", v22);
          dispatch_group_enter(v9);
          v20 = *(void **)(a1 + 32);
          v19 = *(void **)(a1 + 40);
          v21 = *(void **)(a1 + 48);
          v23[0] = MEMORY[0x1E0C809B0];
          v23[1] = 3221225472;
          v23[2] = sub_1D15975B0;
          v23[3] = &unk_1E92287A0;
          v24 = v9;
          sub_1D1596ED4(v19, v16, v20, 0, v21, v23);

        }
        ++v15;
      }
      while (v13 != v15);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
      v13 = v11;
    }
    while (v11);
  }

  if (*(_QWORD *)(a1 + 56))
    dispatch_group_notify(v9, MEMORY[0x1E0C80D38], *(dispatch_block_t *)(a1 + 56));

}

void sub_1D1596ED4(void *a1, void *a2, void *a3, unsigned int a4, void *a5, void *a6)
{
  id v10;
  void (**v11)(_QWORD);
  void (**v12)(_QWORD);
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  void *v29;
  void *v30;
  _BOOL4 v31;
  void *v32;
  _BOOL4 v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  uint64_t v45;
  void *v46;
  id v47;
  NSObject *v48;
  void *v49;
  uint8_t v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t k;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void (**v62)(_QWORD);
  id v63;
  id v64;
  void *v65;
  id v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  id v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  _BYTE v81[128];
  uint8_t v82[128];
  uint8_t buf[4];
  id v84;
  _QWORD v85[4];

  v85[1] = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v64 = a2;
  v63 = a3;
  v66 = a5;
  v11 = a6;
  v12 = v11;
  v65 = v10;
  if (v10
    && (v62 = v11,
        objc_msgSend(v10, "service"),
        v13 = (void *)objc_claimAutoreleasedReturnValue(),
        v14 = objc_msgSend(v13, "supportsDatabase"),
        v13,
        v12 = v62,
        v14))
  {
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "guid");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v85[0] = v16;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v85, 1);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "markMessagesAsReadWithChatGUIDs:upToGUID:readDate:fromMe:", v17, v63, v66, a4);
    v60 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v18))
    {
      OSLogHandleForIMEventCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v84 = v60;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Found messages guids to mark as read: %@", buf, 0xCu);
      }

    }
    if (objc_msgSend(v60, "count"))
    {
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "retractPostedNotificationsForMessageGUIDs:", v60);

      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "messagesWithGUIDs:", v60);
      v22 = (void *)objc_claimAutoreleasedReturnValue();

      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v23 = v22;
      v24 = 0;
      v25 = 0;
      v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v76, v82, 16);
      if (v26)
      {
        v27 = *(_QWORD *)v77;
        do
        {
          for (i = 0; i != v26; ++i)
          {
            if (*(_QWORD *)v77 != v27)
              objc_enumerationMutation(v23);
            v29 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * i);
            objc_msgSend(v29, "timeDelivered");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = v30 == 0;

            if (v31)
              sub_1D1595E80(v29, (uint64_t)v66);
            objc_msgSend(v29, "timeRead");
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = v32 == 0;

            if (v33)
            {
              v34 = v66;
              if (v66
                && (v35 = v34,
                    objc_msgSend(v29, "time"),
                    v36 = (void *)objc_claimAutoreleasedReturnValue(),
                    objc_msgSend(v36, "laterDate:", v35),
                    v37 = (void *)objc_claimAutoreleasedReturnValue(),
                    v35,
                    v36,
                    v37))
              {
                objc_msgSend(v29, "setTimeRead:", v37);
              }
              else
              {
                objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithCurrentServerTime");
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "setTimeRead:", v37);
              }

            }
            if (objc_msgSend(v29, "errorCode"))
              objc_msgSend(v29, "setErrorCode:", 0);
            objc_msgSend(v29, "timeRead");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend(v38, "__im_nanosecondTimeInterval");

            if (v39 >= v24)
            {
              objc_msgSend(v29, "guid");
              v40 = objc_claimAutoreleasedReturnValue();

              v24 = v39;
              v25 = (void *)v40;
            }
          }
          v26 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v76, v82, 16);
        }
        while (v26);
      }

      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v41 = v23;
      v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v72, v81, 16);
      if (v42)
      {
        v43 = *(_QWORD *)v73;
        do
        {
          for (j = 0; j != v42; ++j)
          {
            if (*(_QWORD *)v73 != v43)
              objc_enumerationMutation(v41);
            v45 = *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * j);
            +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
            v46 = (void *)objc_claimAutoreleasedReturnValue();
            v47 = (id)objc_msgSend(v46, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", v45, 0, 1, 0, 4096);

          }
          v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v72, v81, 16);
        }
        while (v42);
      }

      if (IMOSLoggingEnabled(objc_msgSend(v65, "updateChatGUID:withLastReadTimeStamp:withLastSeenMessageGUID:fromMe:", v63, v24, v25, a4 ^ 1)))
      {
        OSLogHandleForIMFoundationCategory();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v84 = v41;
          _os_log_impl(&dword_1D1413000, v48, OS_LOG_TYPE_INFO, "Notifying about messages: %@", buf, 0xCu);
        }

      }
      objc_msgSend(v64, "roomName");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v64, "style") == 45)
        v50 = 45;
      else
        v50 = 43;
      buf[0] = v50;
      v71 = v49;
      objc_msgSend(v65, "_mapRoomChatToGroupChat:style:", &v71, buf);
      v51 = v71;

      v52 = (void *)IMCreateSerializedItemsFromArray();
      if ((objc_msgSend(v65, "isAwaitingStorageTimer") & 1) != 0)
      {
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v53 = v41;
        v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v67, v80, 16);
        if (v54)
        {
          v55 = *(_QWORD *)v68;
          do
          {
            for (k = 0; k != v54; ++k)
            {
              if (*(_QWORD *)v68 != v55)
                objc_enumerationMutation(v53);
              objc_msgSend(*(id *)(*((_QWORD *)&v67 + 1) + 8 * k), "guid");
              v57 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v65, "noteSuppressedMessageUpdate:", v57);

            }
            v54 = objc_msgSend(v53, "countByEnumeratingWithState:objects:count:", &v67, v80, 16);
          }
          while (v54);
        }
      }
      else
      {
        objc_msgSend(v65, "broadcasterForChatListeners");
        v53 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v64, "account");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v58, "accountID");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "account:chat:style:chatProperties:messagesUpdated:", v59, v51, buf[0], 0, v52);

      }
      if (v62)
        ((void (*)(void))v62[2])();

    }
    else if (v62)
    {
      ((void (*)(void))v62[2])();
    }

    v12 = v62;
  }
  else if (v12)
  {
    v12[2](v12);
  }

}

void sub_1D15975B0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1D15975B8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__didReceiveMessageReadForMessageID_date_attempts_completionBlock_);
}

void sub_1D1597A7C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  dispatch_group_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id obj;
  NSObject *group;
  uint64_t v27;
  _QWORD v28[4];
  NSObject *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithGUID:", *(_QWORD *)(a1 + 32));
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v24, "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "service");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "internalName");
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = dispatch_group_create();
  v6 = v5;
  if (!v24 || !v3 || !v23)
    goto LABEL_20;
  if (!objc_msgSend(*(id *)(a1 + 40), "messageServiceNamed:canProcessMessagesFromServiceNamed:", v23, v3))
  {
    v5 = (dispatch_group_t)objc_msgSend(*(id *)(a1 + 40), "messageServiceNamed:canProcessMessagesFromServiceNamed:", v23, v3);
    if ((v5 & 1) == 0)
    {
      if (!IMOSLoggingEnabled(v5))
        goto LABEL_24;
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v35 = v3;
        v36 = 2112;
        v37 = v23;
        _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Unable notify about message, message is on an incompatible service: %@ vs %@", buf, 0x16u);
      }
LABEL_23:

      goto LABEL_24;
    }
LABEL_20:
    if (!IMOSLoggingEnabled(v5))
      goto LABEL_24;
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Unable notify about message, no message found", buf, 2u);
    }
    goto LABEL_23;
  }
  group = v6;
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatsForMessageGUID:", *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v8;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
  v10 = v9;
  if (v9)
  {
    v27 = *(_QWORD *)v31;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v31 != v27)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v11);
        v9 = IMOSLoggingEnabled(v9);
        if ((_DWORD)v9)
        {
          OSLogHandleForIMFoundationCategory();
          v13 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v14 = *(void **)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            v35 = v14;
            v36 = 2112;
            v37 = v12;
            _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Found chat for messageID: %@   chat: %@", buf, 0x16u);
          }

        }
        if (v12)
        {
          dispatch_group_enter(group);
          v15 = (_QWORD *)a1;
          v16 = a1;
          v17 = *(void **)(a1 + 32);
          v18 = *(void **)(a1 + 40);
          v15 += 4;
          v19 = (void *)v15[2];
          v28[0] = MEMORY[0x1E0C809B0];
          v28[1] = 3221225472;
          v28[2] = sub_1D1597EB0;
          v28[3] = &unk_1E92287A0;
          v29 = group;
          v20 = v18;
          a1 = v16;
          sub_1D1596ED4(v20, v12, v17, 1u, v19, v28);
          objc_msgSend(MEMORY[0x1E0D399B8], "sharedInstance");
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "logMessageRead:messageProtocol:", *v15, v3);

        }
        ++v11;
      }
      while (v10 != v11);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      v10 = v9;
    }
    while (v9);
  }

  v6 = group;
LABEL_24:
  if (*(_QWORD *)(a1 + 56))
    dispatch_group_notify(v6, MEMORY[0x1E0C80D38], *(dispatch_block_t *)(a1 + 56));

}

void sub_1D1597EB0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1D1597EB8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56) + 1, 0);
}

void sub_1D1598408(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v16[4];
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[128];
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "chatsForMessageGUID:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v24 = v6;
      v25 = 2112;
      v26 = v3;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Found chats for messageID: %@   chats: %@", buf, 0x16u);
    }

  }
  v7 = dispatch_group_create();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v8 = v3;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v19;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v19 != v10)
          objc_enumerationMutation(v8);
        v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v11);
        if (v12)
        {
          dispatch_group_enter(v7);
          v14 = *(void **)(a1 + 32);
          v13 = *(void **)(a1 + 40);
          v15 = *(void **)(a1 + 48);
          v16[0] = MEMORY[0x1E0C809B0];
          v16[1] = 3221225472;
          v16[2] = sub_1D1598EC8;
          v16[3] = &unk_1E92287A0;
          v17 = v7;
          sub_1D1598654(v13, v12, v14, v15, v16);

        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v9);
  }

  if (*(_QWORD *)(a1 + 56))
    dispatch_group_notify(v7, MEMORY[0x1E0C80D38], *(dispatch_block_t *)(a1 + 56));

}

void sub_1D1598654(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  void (**v10)(_QWORD);
  void (**v11)(_QWORD);
  void *v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  _BOOL4 v24;
  void *v25;
  void *v26;
  _BOOL4 v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  uint8_t v46;
  id v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t ShouldAutomaticallySave;
  int v53;
  void *v54;
  NSObject *v55;
  void *v56;
  uint64_t v57;
  NSObject *v58;
  void *v59;
  uint64_t v60;
  int v61;
  int v62;
  void *v63;
  void (**v64)(_QWORD);
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint8_t v75[128];
  uint8_t buf[4];
  id v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v66 = a2;
  v67 = a3;
  v65 = a4;
  v10 = a5;
  v11 = v10;
  v68 = v9;
  if (v9)
  {
    v64 = v10;
    objc_msgSend(v9, "service");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "supportsDatabase");

    v11 = v64;
    if (v13)
    {
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "messageWithGUID:", v67);
      v69 = (id)objc_claimAutoreleasedReturnValue();

      if (IMOSLoggingEnabled(v15))
      {
        OSLogHandleForIMFoundationCategory();
        v16 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v77 = v69;
          _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Found message to mark as played: %@", buf, 0xCu);
        }

      }
      v17 = v69;
      if (!v69)
      {
        if (!v64)
        {
LABEL_64:

          v11 = v64;
          goto LABEL_65;
        }
        ((void (*)(void))v64[2])();
LABEL_63:
        v17 = v69;
        goto LABEL_64;
      }
      objc_msgSend(v69, "setFlags:", objc_msgSend(v69, "flags") | 0x400000);
      v18 = v65;
      if (v18)
      {
        v19 = v18;
        objc_msgSend(v69, "time");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "laterDate:", v19);
        v63 = (void *)objc_claimAutoreleasedReturnValue();

      }
      else
      {
        v63 = 0;
      }
      objc_msgSend(v69, "timeDelivered");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = v21 == 0;

      if (v22)
        sub_1D1595E80(v69, (uint64_t)v63);
      objc_msgSend(v69, "timeRead");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v23 == 0;

      if (v24)
      {
        if (v63)
        {
          objc_msgSend(v69, "setTimeRead:");
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithCurrentServerTime");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "setTimeRead:", v25);

        }
      }
      objc_msgSend(v69, "timePlayed");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = v26 == 0;

      if (v27)
      {
        if (v63)
        {
          objc_msgSend(v69, "setTimePlayed:");
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "date");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "setTimePlayed:", v28);

        }
      }
      if (objc_msgSend(v69, "errorCode"))
        objc_msgSend(v69, "setErrorCode:", 0);
      if (!objc_msgSend(v69, "isExpirable")
        || (objc_msgSend(v69, "isFromMe") & 1) != 0
        || objc_msgSend(v69, "expireState") > 0)
      {
        v60 = 0;
LABEL_31:
        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance", v60);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = (id)objc_msgSend(v29, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", v69, 0, 1, 1, 4198400);

        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "chatsForMessageGUID:", v67);
        v32 = (void *)objc_claimAutoreleasedReturnValue();

        if (IMOSLoggingEnabled(v33))
        {
          OSLogHandleForIMFoundationCategory();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v77 = v32;
            _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, "Found chats to mark as played: %@", buf, 0xCu);
          }

        }
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v35 = v32;
        v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
        v37 = v36;
        if (v36)
        {
          v38 = *(_QWORD *)v72;
          do
          {
            v39 = 0;
            do
            {
              if (*(_QWORD *)v72 != v38)
                objc_enumerationMutation(v35);
              v40 = *(void **)(*((_QWORD *)&v71 + 1) + 8 * v39);
              if (IMOSLoggingEnabled(v36))
              {
                OSLogHandleForIMFoundationCategory();
                v41 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  v77 = v40;
                  _os_log_impl(&dword_1D1413000, v41, OS_LOG_TYPE_INFO, "Updating chat: %@", buf, 0xCu);
                }

              }
              +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
              v42 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v42, "updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:", v40, 0, 0);

              ++v39;
            }
            while (v37 != v39);
            v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v71, v75, 16);
            v37 = v36;
          }
          while (v36);
        }

        if (IMOSLoggingEnabled(v43))
        {
          OSLogHandleForIMFoundationCategory();
          v44 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v77 = v69;
            _os_log_impl(&dword_1D1413000, v44, OS_LOG_TYPE_INFO, "Notifying about message: %@", buf, 0xCu);
          }

        }
        objc_msgSend(v66, "roomName");
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v66, "style") == 45)
          v46 = 45;
        else
          v46 = 43;
        buf[0] = v46;
        v70 = v45;
        objc_msgSend(v68, "_mapRoomChatToGroupChat:style:", &v70, buf);
        v47 = v70;

        if ((objc_msgSend(v68, "isAwaitingStorageTimer") & 1) != 0)
        {
          objc_msgSend(v69, "guid");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "noteSuppressedMessageUpdate:", v48);
        }
        else
        {
          objc_msgSend(v68, "broadcasterForChatListeners");
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "account");
          v49 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v49, "accountID");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v48, "account:chat:style:chatProperties:messageUpdated:", v50, v47, buf[0], 0, v69);

        }
        if (v61)
        {
          objc_msgSend(v69, "guid");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "_updateExpireStateForMessageGUID:", v51);

        }
        if (v62)
          objc_msgSend(v68, "sendSavedReceiptForMessage:toChatID:identifier:style:", v69, 0, v47, buf[0]);
        if (v64)
          ((void (*)(void))v64[2])();

        goto LABEL_63;
      }
      ShouldAutomaticallySave = IMMessageItemShouldAutomaticallySave();
      HIDWORD(v60) = ShouldAutomaticallySave;
      v53 = IMOSLoggingEnabled(ShouldAutomaticallySave);
      if (HIDWORD(v60))
      {
        v54 = v69;
        if (!v53)
        {
          v57 = 3;
          goto LABEL_78;
        }
        OSLogHandleForIMFoundationCategory();
        v55 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v69, "guid");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v77 = v56;
          _os_log_impl(&dword_1D1413000, v55, OS_LOG_TYPE_INFO, "Automatically saving received message played on linked device: %@", buf, 0xCu);

        }
        v57 = 3;
      }
      else
      {
        v54 = v69;
        if (!v53)
        {
          v57 = 1;
          goto LABEL_78;
        }
        OSLogHandleForIMFoundationCategory();
        v58 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v69, "guid");
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v77 = v59;
          _os_log_impl(&dword_1D1413000, v58, OS_LOG_TYPE_INFO, "Expire received message played on linked device: %@", buf, 0xCu);

        }
        v57 = 1;
      }
      v54 = v69;
LABEL_78:
      objc_msgSend(v54, "setExpireState:", v57);
      LODWORD(v60) = HIDWORD(v60) ^ 1;
      goto LABEL_31;
    }
  }
  if (v11)
    v11[2](v11);
LABEL_65:

}

void sub_1D1598E58(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D1598E24);
  }
  _Unwind_Resume(a1);
}

void sub_1D1598EC8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1D1598ED0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__didReceiveMessagePlayedForMessageID_date_attempts_completionBlock_);
}

void sub_1D1599394(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  dispatch_group_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  id obj;
  _QWORD v23[4];
  NSObject *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  void *v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithGUID:", *(_QWORD *)(a1 + 32));
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v21, "service");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "service");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "internalName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = dispatch_group_create();
  v6 = v5;
  if (!v21 || !v20 || !v4)
    goto LABEL_20;
  if (!objc_msgSend(*(id *)(a1 + 40), "messageServiceNamed:canProcessMessagesFromServiceNamed:", v4, v20))
  {
    v5 = (dispatch_group_t)objc_msgSend(*(id *)(a1 + 40), "messageServiceNamed:canProcessMessagesFromServiceNamed:", v4, v20);
    if ((v5 & 1) == 0)
    {
      if (!IMOSLoggingEnabled(v5))
        goto LABEL_24;
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v30 = v20;
        v31 = 2112;
        v32 = v4;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Unable notify about message, message is on an incompatible service: %@ vs %@", buf, 0x16u);
      }
LABEL_23:

      goto LABEL_24;
    }
LABEL_20:
    if (!IMOSLoggingEnabled(v5))
      goto LABEL_24;
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Unable notify about message, no message found", buf, 2u);
    }
    goto LABEL_23;
  }
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "chatsForMessageGUID:", *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = v8;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  v10 = v9;
  if (v9)
  {
    v11 = *(_QWORD *)v26;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * v12);
        v9 = IMOSLoggingEnabled(v9);
        if ((_DWORD)v9)
        {
          OSLogHandleForIMFoundationCategory();
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            v15 = *(void **)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            v30 = v15;
            v31 = 2112;
            v32 = v13;
            _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Found chat for messageID: %@   chat: %@", buf, 0x16u);
          }

        }
        if (v13)
        {
          dispatch_group_enter(v6);
          v16 = *(void **)(a1 + 32);
          v17 = *(void **)(a1 + 40);
          v18 = *(void **)(a1 + 48);
          v23[0] = MEMORY[0x1E0C809B0];
          v23[1] = 3221225472;
          v23[2] = sub_1D1599780;
          v23[3] = &unk_1E92287A0;
          v24 = v6;
          sub_1D1598654(v17, v13, v16, v18, v23);

        }
        ++v12;
      }
      while (v10 != v12);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
      v10 = v9;
    }
    while (v9);
  }

LABEL_24:
  if (*(_QWORD *)(a1 + 56))
    dispatch_group_notify(v6, MEMORY[0x1E0C80D38], *(dispatch_block_t *)(a1 + 56));

}

void sub_1D1599780(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1D1599788(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__didReceiveMessagePlayedReceiptForMessageID_date_attempts_completionBlock_);
}

void sub_1D1599EEC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD *v17;
  void *v18;
  int v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  _BOOL4 v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  void *v32;
  _BOOL4 v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  void *v51;
  char v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  void *v59;
  id obj;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  NSObject *group;
  id v71;
  _QWORD block[4];
  id v73;
  id v74;
  id v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  char v80;
  _QWORD v81[2];
  void (*v82)(uint64_t);
  void *v83;
  NSObject *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unsigned __int8 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint8_t v94[128];
  _BYTE v95[12];
  uint8_t buf[4];
  void *v97;
  __int16 v98;
  void *v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "chatsForMessageGUID:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = objc_msgSend(v2, "count");
  if (!v3 && !*(_BYTE *)(a1 + 96))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
    {
      v5 = 43;
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 56);
      v5 = 45;
    }
    objc_msgSend(*(id *)(a1 + 40), "chatForChatIdentifier:style:", v4, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v6);
      v7 = objc_claimAutoreleasedReturnValue();

      v2 = (void *)v7;
    }

  }
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v97 = v9;
      v98 = 2112;
      v99 = v2;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Found chats for messageID: %@   chats: %@", buf, 0x16u);
    }

  }
  group = dispatch_group_create();
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  obj = v2;
  v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v94, 16);
  if (v63)
  {
    v62 = *(_QWORD *)v86;
    do
    {
      for (i = 0; i != v63; ++i)
      {
        if (*(_QWORD *)v86 != v62)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v85 + 1) + 8 * i);
        v12 = a1;
        if (*(_BYTE *)(a1 + 96))
        {
          dispatch_group_enter(group);
          v14 = *(void **)(a1 + 32);
          v13 = *(void **)(a1 + 40);
          v15 = *(void **)(a1 + 64);
          v81[0] = MEMORY[0x1E0C809B0];
          v81[1] = 3221225472;
          v82 = sub_1D159A860;
          v83 = &unk_1E92287A0;
          v84 = group;
          v71 = v13;
          v65 = v11;
          v16 = v11;
          v68 = v14;
          v66 = v15;
          v17 = v81;
          v67 = v16;
          if (v16)
          {
            if (v71
              && (v61 = v17,
                  objc_msgSend(v71, "service"),
                  v18 = (void *)objc_claimAutoreleasedReturnValue(),
                  v19 = objc_msgSend(v18, "supportsDatabase"),
                  v18,
                  v17 = v61,
                  v19))
            {
              +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v20, "messageWithGUID:", v68);
              v64 = (void *)objc_claimAutoreleasedReturnValue();

              if (IMOSLoggingEnabled(v21))
              {
                OSLogHandleForIMFoundationCategory();
                v22 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  v97 = v64;
                  _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Found message to mark as saved: %@", buf, 0xCu);
                }

              }
              if (v64)
              {
                objc_msgSend(v64, "setExpireState:", 3);
                v23 = v66;
                if (v23)
                {
                  v24 = v23;
                  objc_msgSend(v64, "time");
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v25, "laterDate:", v24);
                  v59 = (void *)objc_claimAutoreleasedReturnValue();

                }
                else
                {
                  v59 = 0;
                }
                objc_msgSend(v64, "timeDelivered");
                v27 = (void *)objc_claimAutoreleasedReturnValue();
                v28 = v27 == 0;

                if (v28)
                  sub_1D1595E80(v64, (uint64_t)v59);
                objc_msgSend(v64, "timeRead");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                v30 = v29 == 0;

                if (v30)
                {
                  if (v59)
                  {
                    objc_msgSend(v64, "setTimeRead:");
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithCurrentServerTime");
                    v31 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v64, "setTimeRead:", v31);

                  }
                }
                objc_msgSend(v64, "timePlayed");
                v32 = (void *)objc_claimAutoreleasedReturnValue();
                v33 = v32 == 0;

                if (v33)
                {
                  if (v59)
                  {
                    objc_msgSend(v64, "setTimePlayed:");
                  }
                  else
                  {
                    objc_msgSend(MEMORY[0x1E0C99D68], "date");
                    v34 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v64, "setTimePlayed:", v34);

                  }
                }
                if (objc_msgSend(v64, "errorCode"))
                  objc_msgSend(v64, "setErrorCode:", 0);
                +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
                v35 = (void *)objc_claimAutoreleasedReturnValue();
                v36 = (id)objc_msgSend(v35, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", v64, 0, 1, 0, 4096);

                +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
                v37 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v37, "chatsForMessageGUID:", v68);
                v38 = (void *)objc_claimAutoreleasedReturnValue();

                if (IMOSLoggingEnabled(v39))
                {
                  OSLogHandleForIMFoundationCategory();
                  v40 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    v97 = v38;
                    _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "Found chats to mark as saved: %@", buf, 0xCu);
                  }

                }
                v92 = 0u;
                v93 = 0u;
                v90 = 0u;
                v91 = 0u;
                v41 = v38;
                v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v90, buf, 16);
                v43 = v42;
                if (v42)
                {
                  v44 = *(_QWORD *)v91;
                  do
                  {
                    v45 = 0;
                    do
                    {
                      if (*(_QWORD *)v91 != v44)
                        objc_enumerationMutation(v41);
                      v46 = *(_QWORD *)(*((_QWORD *)&v90 + 1) + 8 * v45);
                      if (IMOSLoggingEnabled(v42))
                      {
                        OSLogHandleForIMFoundationCategory();
                        v47 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)v95 = 138412290;
                          *(_QWORD *)&v95[4] = v46;
                          _os_log_impl(&dword_1D1413000, v47, OS_LOG_TYPE_INFO, "Updating chat: %@", v95, 0xCu);
                        }

                      }
                      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
                      v48 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v48, "updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:", v46, 0, 0);

                      ++v45;
                    }
                    while (v43 != v45);
                    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v90, buf, 16);
                    v43 = v42;
                  }
                  while (v42);
                }

                if (IMOSLoggingEnabled(v49))
                {
                  OSLogHandleForIMFoundationCategory();
                  v50 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)v95 = 138412290;
                    *(_QWORD *)&v95[4] = v64;
                    _os_log_impl(&dword_1D1413000, v50, OS_LOG_TYPE_INFO, "Notifying about message: %@", v95, 0xCu);
                  }

                }
                objc_msgSend(v67, "roomName");
                v51 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v67, "style") == 45)
                  v52 = 45;
                else
                  v52 = 43;
                v89 = v52;
                *(_QWORD *)v95 = v51;
                objc_msgSend(v71, "_mapRoomChatToGroupChat:style:", v95, &v89);
                v53 = *(id *)v95;

                if ((objc_msgSend(v71, "isAwaitingStorageTimer") & 1) != 0)
                {
                  objc_msgSend(v64, "guid");
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v71, "noteSuppressedMessageUpdate:", v54);
                }
                else
                {
                  objc_msgSend(v71, "broadcasterForChatListeners");
                  v54 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v67, "account");
                  v55 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v55, "accountID");
                  v56 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v54, "account:chat:style:chatProperties:messageUpdated:", v56, v53, v89, 0, v64);

                }
                v82((uint64_t)v61);

              }
              else
              {
                v82((uint64_t)v61);
              }

              v17 = v61;
            }
            else
            {
              v26 = v17;
              ((void (*)(void))v82)();
              v17 = v26;
            }
          }

          v12 = a1;
          v11 = v65;
        }
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_1D159A868;
        block[3] = &unk_1E922DF78;
        v73 = *(id *)(v12 + 32);
        v80 = *(_BYTE *)(v12 + 96);
        v74 = *(id *)(v12 + 56);
        v57 = *(id *)(v12 + 64);
        v79 = *(_QWORD *)(v12 + 88);
        v58 = *(_QWORD *)(v12 + 40);
        v75 = v57;
        v76 = v58;
        v77 = *(id *)(v12 + 72);
        v78 = v11;
        dispatch_group_async(group, MEMORY[0x1E0C80D38], block);

      }
      v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v85, v94, 16);
    }
    while (v63);
  }

  if (*(_QWORD *)(a1 + 80))
    dispatch_group_notify(group, MEMORY[0x1E0C80D38], *(dispatch_block_t *)(a1 + 80));

}

void sub_1D159A860(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1D159A868(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "messageWithGUID:", *(_QWORD *)(a1 + 32));
  v7 = (id)objc_claimAutoreleasedReturnValue();

  if (!*(_BYTE *)(a1 + 88))
  {
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D398F0]), "initWithSender:time:guid:type:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, 5);
    objc_msgSend(v3, "setActionType:", *(_QWORD *)(a1 + 80));
    if (objc_msgSend(v7, "isFromMe"))
    {
      objc_msgSend(v3, "setOtherHandle:", 0);
    }
    else
    {
      objc_msgSend(v7, "sender");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setOtherHandle:", v4);

    }
    objc_msgSend(v3, "setOriginalMessageGUID:", *(_QWORD *)(a1 + 32));
    objc_msgSend(*(id *)(a1 + 56), "_configureAccountInformationOnItem:withAccount:", v3, *(_QWORD *)(a1 + 64));
    objc_msgSend(v7, "balloonBundleID");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setBalloonBundleID:", v5);

    objc_msgSend(v7, "destinationCallerID");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setDestinationCallerID:", v6);

    objc_msgSend(*(id *)(a1 + 56), "_storeTranscriptItem:inChat:account:", v3, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 64));
  }

}

uint64_t sub_1D159A998(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:account:completionBlock:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 96), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88) + 1, *(_QWORD *)(a1 + 72), 0);
}

void sub_1D159C684(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x1D159C668);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D159C7F0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_didSendMessage_forChat_style_account_forceDate_itemIsComingFromStorage_);
}

void sub_1D159DAC4()
{
  dispatch_queue_t v0;
  void *v1;
  NSObject *v2;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v2 = objc_claimAutoreleasedReturnValue();
  v0 = dispatch_queue_create("com.apple.imagent.CollaborationProcessing", v2);
  v1 = (void *)qword_1EFC63E70;
  qword_1EFC63E70 = (uint64_t)v0;

}

id sub_1D159DD18(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "transferForGUID:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "localURL");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1D159DD88(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  int8x16_t v10;
  _QWORD block[4];
  int8x16_t v12;
  id v13;
  id v14;
  char v15;
  uint8_t buf[4];
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0D39A68], "linkMetadataForPluginPayload:", *(_QWORD *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "collaborationMetadata");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    if (IMOSLoggingEnabled(v4))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 40), "guid");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        v17 = v6;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Collaboration metadata detected in message %@, broadcasting to listeners", buf, 0xCu);

      }
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D159DFAC;
    block[3] = &unk_1E922E078;
    v10 = *(int8x16_t *)(a1 + 40);
    v7 = (id)v10.i64[0];
    v12 = vextq_s8(v10, v10, 8uLL);
    v13 = *(id *)(a1 + 56);
    v15 = *(_BYTE *)(a1 + 72);
    v14 = *(id *)(a1 + 64);
    dispatch_sync(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 40), "guid");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v17 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Collaboration metadata not detected in message %@", buf, 0xCu);

    }
  }

}

void sub_1D159DFAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "broadcasterForCollaborationListeners");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(unsigned __int8 *)(a1 + 64);
  objc_msgSend(*(id *)(a1 + 56), "accountID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "didReceiveCollaborationMessage:inChat:style:account:", v2, v3, v4, v5);

}

void sub_1D159E694(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D159E6E4(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  int v35;
  void *v36;
  int v37;
  uint64_t v38;
  char v39;
  NSObject *v40;
  void *v41;
  int v42;
  NSObject *v43;
  __int16 v44;
  id v45;
  __int16 v46;
  void *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "chatForChatIdentifier:style:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 88));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "state") != 3)
  {
    v5 = objc_msgSend(*(id *)(a1 + 48), "isFromMe");
    if ((_DWORD)v5)
    {
      if (IMOSLoggingEnabled(v5))
      {
        OSLogHandleForIMFoundationCategory();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          LOWORD(v42) = 0;
          _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Fixing chat join state", (uint8_t *)&v42, 2u);
        }

      }
      objc_msgSend(v4, "setState:", 3);
    }
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)objc_msgSend(v4, "lastReadMessageTimeStamp"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithCurrentServerTime");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "time");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v4, "lastReadMessageTimeStamp"));
      v11 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "lastSeenMessageGuid");
      v12 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v9, "__im_nanosecondTimeInterval"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v42 = 138413570;
      v43 = v11;
      v44 = 2112;
      v45 = v12;
      v46 = 2112;
      v47 = v7;
      v48 = 2112;
      v49 = v9;
      v50 = 2112;
      v51 = v13;
      v52 = 2112;
      v53 = v8;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Chat's last read message time date (%@) guid (%@) timestamp: (%@) Messages time date (%@) timestamp: (%@) Server timestamp: (%@)", (uint8_t *)&v42, 0x3Eu);

    }
  }
  v14 = objc_msgSend(v7, "compare:", v9);
  if (v14 == 1)
  {
    objc_msgSend(v8, "dateByAddingTimeInterval:", 60.0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "compare:", v15) == 1)
    {
      if (!IMOSLoggingEnabled(1))
      {
LABEL_31:

        goto LABEL_32;
      }
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 48), "guid");
        v17 = objc_claimAutoreleasedReturnValue();
        v42 = 138412290;
        v43 = v17;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Last read message time is in the future. Not marking incoming message %@ as read", (uint8_t *)&v42, 0xCu);

      }
LABEL_17:

      goto LABEL_31;
    }
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "isCarrierPigeonEnabled");

    if (v19)
    {
      v20 = objc_msgSend(*(id *)(a1 + 48), "sentOrReceivedOffGrid");
      if ((_DWORD)v20)
      {
        objc_msgSend(v8, "dateByAddingTimeInterval:", 3600.0);
        v16 = objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v7, "compare:", v16);
        v22 = v21 == -1;
        v23 = IMOSLoggingEnabled(v21);
        if (v22)
        {
          if (v23)
          {
            OSLogHandleForIMFoundationCategory();
            v40 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(*(id *)(a1 + 48), "guid");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              v42 = 138412546;
              v43 = v16;
              v44 = 2112;
              v45 = v41;
              _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "Satellite message time for GUID %@ is within grace period (%@). Not marking it as read.", (uint8_t *)&v42, 0x16u);

            }
          }
          goto LABEL_17;
        }
        if (v23)
        {
          OSLogHandleForIMFoundationCategory();
          v24 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(*(id *)(a1 + 48), "guid");
            v25 = objc_claimAutoreleasedReturnValue();
            v42 = 138412290;
            v43 = v25;
            _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Satellite message with GUID %@ will be marked as read because it's time is older than the chat's last read message time including the grace period.", (uint8_t *)&v42, 0xCu);

          }
        }

      }
    }
    if (IMOSLoggingEnabled(v20))
    {
      OSLogHandleForIMFoundationCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 48), "guid");
        v27 = objc_claimAutoreleasedReturnValue();
        v42 = 138412290;
        v43 = v27;
        _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "Setting message %@ as read as incoming message is older than the chat's last read message time", (uint8_t *)&v42, 0xCu);

      }
    }
    objc_msgSend(*(id *)(a1 + 48), "setFlags:", objc_msgSend(*(id *)(a1 + 48), "flags") | 0x2000);
    goto LABEL_31;
  }
LABEL_32:
  if (a2 == 42)
  {
    if (IMOSLoggingEnabled(v14))
    {
      OSLogHandleForIMFoundationCategory();
      v28 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        LOWORD(v42) = 0;
        _os_log_impl(&dword_1D1413000, v28, OS_LOG_TYPE_INFO, "Marking message as failed due to preflight rendering", (uint8_t *)&v42, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 48), "setFlags:", objc_msgSend(*(id *)(a1 + 48), "flags") | 0x4000000);
  }
  objc_msgSend(*(id *)(a1 + 32), "_setReplyGUIDOnMessage:forChat:", *(_QWORD *)(a1 + 48), v4);
  objc_msgSend(*(id *)(a1 + 32), "_setSortIDForMessage:forChat:", *(_QWORD *)(a1 + 48), v4);
  if (objc_msgSend(*(id *)(a1 + 32), "isReplicating"))
  {
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "guid");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "messageWithGUID:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v31, "service");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "service");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "internalName");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v32, "isEqualToString:", v34);

    if (v35)
    {
      objc_msgSend(*(id *)(a1 + 48), "replicatedFallbackGUIDs");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v36 = 0;
    }

  }
  else
  {
    v36 = 0;
  }
  v37 = objc_msgSend(*(id *)(a1 + 32), "_storeMessage:chatIdentifier:localChat:style:account:messagesToPostArray:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), v4, *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  if (*(_BYTE *)(v38 + 24))
    v39 = v37;
  else
    v39 = 0;
  *(_BYTE *)(v38 + 24) = v39;
  if (v37)
    objc_msgSend(*(id *)(a1 + 72), "addObjectsFromArray:", v36);

}

void sub_1D159ED70(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D159ED64);
  }
  _Unwind_Resume(a1);
}

void sub_1D159EE14(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "_revokeSiblingMessagesForReplication:", *(_QWORD *)(a1 + 32));
    v2 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }
  objc_msgSend(*(id *)(a1 + 40), "chatForChatIdentifier:style:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 88));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "updatedMessagesForMessages:", *(_QWORD *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v5, "count"))
  {
    objc_msgSend(*(id *)(a1 + 40), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(v3, "isBlackholed"));
    v31 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 64), "accountID");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "chatIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v3, "style");
    objc_msgSend(v3, "chatProperties");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "groupID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "personCentricID");
    v12 = v2;
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v29) = 0;
    objc_msgSend(v6, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messagesReceived:removed:messagesComingFromStorage:", v7, v8, v9, v10, v11, v13, v31, v12, v29);

    v2 = v12;
    v5 = v31;
  }
  v32 = (void *)v2;
  objc_msgSend(*(id *)(a1 + 40), "_autoReplier");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v3;
  objc_msgSend(v14, "processMessages:inChat:fromIDSID:", *(_QWORD *)(a1 + 72), v3, *(_QWORD *)(a1 + 80));

  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v15 = *(id *)(a1 + 72);
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  v17 = v5;
  v18 = v5;
  if (v16)
  {
    v19 = v16;
    v20 = *(_QWORD *)v34;
    v21 = *MEMORY[0x1E0D375F8];
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v34 != v20)
          objc_enumerationMutation(v15);
        v23 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * i);
        objc_msgSend(v23, "balloonBundleID");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "isEqualToString:", v21);

        if (v25)
          objc_msgSend(*(id *)(a1 + 40), "_didReceivePotentialCollaborationMessage:forChat:style:account:", v23, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 64));
      }
      v17 = v18;
      v19 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    }
    while (v19);
  }

  if (*(_BYTE *)(a1 + 89) == 45 && objc_msgSend(*(id *)(a1 + 72), "count"))
  {
    objc_msgSend(*(id *)(a1 + 72), "firstObject");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "handle");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v28, "signalUnreadChangeForHandle:", v27);

    v17 = v18;
  }

}

void sub_1D159F628(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D159F608);
  }
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 256), 8);
  _Block_object_dispose((const void *)(v49 - 208), 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D159F6BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D159F6CC(uint64_t a1)
{

}

id sub_1D159F6D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  void *v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  double v41;
  void *v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  int v48;
  void *v49;
  void *v50;
  void *v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  int v59;
  int v60;
  NSObject *v61;
  double v62;
  void *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  NSObject *v69;
  double v70;
  void *v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  NSObject *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  double v89;
  NSObject *v90;
  double v91;
  double v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  void *v96;
  const __CFString *v97;
  void *v98;
  void *v99;
  int v100;
  uint64_t v101;
  int v102;
  NSObject *v103;
  double v104;
  NSObject *v105;
  double v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  NSObject *v114;
  double v115;
  void *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  id v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  id v128;
  NSObject *v130;
  double v131;
  void *v132;
  void *v133;
  int v134;
  void *v135;
  uint64_t v136;
  NSObject *v137;
  NSObject *v138;
  uint64_t v139;
  uint8_t buf[4];
  double v141;
  __int16 v142;
  const __CFString *v143;
  _QWORD v144[2];
  _QWORD v145[2];
  void *v146;
  const __CFString *v147;
  void *v148;
  uint64_t v149;
  _QWORD v150[3];

  v150[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "guid");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "messageWithGUID:", v5);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v141 = v11;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_DEBUG, "Found existing message: %@", buf, 0xCu);
    }

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
  objc_msgSend(MEMORY[0x1E0D36A00], "sharedInstance");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "dateLastCallEnded");
  v13 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());

  if (v13 == 0.0)
  {
    v16 = 14400.0;
  }
  else
  {
    v14 = objc_msgSend(*(id *)&v13, "timeIntervalSinceNow");
    v16 = 14400.0;
    if (fabs(v15) < 14400.0)
      v16 = 28800.0;
  }
  v17 = IMOSLoggingEnabled(v14);
  if ((_DWORD)v17)
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      v141 = v13;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_DEBUG, "Date last call ended: %@", buf, 0xCu);
    }

  }
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v141 = v16;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_DEBUG, "Looking for a similar message %f seconds back", buf, 0xCu);
    }

  }
  +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "service");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  IMSingleObjectArray();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "guid");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  IMSingleObjectArray();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "participants");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "existingMessageSimilarToMessage:skipServices:skipGUIDs:withinTimeInterval:participants:", v3, v22, v24, v25, v16);
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
  v28 = *(void **)(v27 + 40);
  *(_QWORD *)(v27 + 40) = v26;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
  {
    objc_msgSend(v3, "service");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = objc_msgSend(v30, "isEqualToString:", *MEMORY[0x1E0D38F58]);

    if (v31)
    {
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "service");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v32, "existingSOSMessageSimilarToMessage:matchingService:withinTimeInterval:", v3, v33, v16);
      v34 = objc_claimAutoreleasedReturnValue();
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
      v36 = *(void **)(v35 + 40);
      *(_QWORD *)(v35 + 40) = v34;

    }
  }
  if (IMOSLoggingEnabled(v29))
  {
    OSLogHandleForIMFoundationCategory();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      v38 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v141 = v38;
      _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_DEBUG, "Found similar message? %@", buf, 0xCu);
    }

  }
  v39 = objc_msgSend(*(id *)(a1 + 32), "_updateInputMessage:forExistingMessage:", v3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
  {
    if (IMOSLoggingEnabled(v39))
    {
      OSLogHandleForIMFoundationCategory();
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        v41 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v141 = v41;
        _os_log_impl(&dword_1D1413000, v40, OS_LOG_TYPE_INFO, "Bailing, we had a similar message: %@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "service");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (_QWORD *)MEMORY[0x1E0D38F70];
    v44 = objc_msgSend(v42, "isEqualToString:", *MEMORY[0x1E0D38F70]);
    v45 = (_QWORD *)MEMORY[0x1E0D38F68];
    if (v44)
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "internalName");
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_msgSend(v47, "isEqualToString:", *v45);

    }
    else
    {
      v48 = 0;
    }

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "service");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v49, "isEqualToString:", *v45))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v50, "internalName");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = objc_msgSend(v51, "isEqualToString:", *v43);

    }
    else
    {
      v52 = 0;
    }

    if ((v48 | v52) == 1)
    {
      if (IMOSLoggingEnabled(v53))
      {
        OSLogHandleForIMFoundationCategory();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v54, OS_LOG_TYPE_INFO, "Ignoring existing message, will deduplicate using content association message", buf, 2u);
        }

      }
      goto LABEL_42;
    }
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "service");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v71, "isEqualToString:", *v45))
    {
      objc_msgSend(*(id *)(a1 + 32), "service");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "internalName");
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      v74 = (_QWORD *)MEMORY[0x1E0D38F58];
      v75 = objc_msgSend(v73, "isEqualToString:", *MEMORY[0x1E0D38F58]);

      if (!v75)
      {
LABEL_107:
        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
        v121 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v121, "markMessageAsDeduplicated:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));

        v122 = objc_alloc_init(MEMORY[0x1E0C99D68]);
        v123 = (void *)MEMORY[0x1E0CB37E8];
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "time");
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v122, "timeIntervalSinceDate:", v124);
        objc_msgSend(v123, "numberWithDouble:");
        v125 = (void *)objc_claimAutoreleasedReturnValue();

        v149 = *MEMORY[0x1E0D38460];
        v150[0] = v125;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v150, &v149, 1);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
        v127 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v127, "trackEvent:withDictionary:", *MEMORY[0x1E0D385C8], v126);

        goto LABEL_108;
      }
      if (IMOSLoggingEnabled(v76))
      {
        OSLogHandleForIMFoundationCategory();
        v77 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v77, OS_LOG_TYPE_INFO, "Service was iMessage, downgrading to SMS", buf, 2u);
        }

      }
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "setService:", *v74);
      v78 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      objc_msgSend(v3, "account");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "setAccount:", v79);

      v80 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
      objc_msgSend(v3, "accountID");
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "setAccountID:", v81);

      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), 1, 1, 1, 0x2000);
      v71 = (void *)objc_claimAutoreleasedReturnValue();

      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), v71);
      v83 = objc_msgSend(*(id *)(a1 + 32), "isAwaitingStorageTimer");
      if ((v83 & 1) != 0)
      {
        v84 = *(void **)(a1 + 32);
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "guid");
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v84, "noteSuppressedMessageUpdate:", v85);
      }
      else
      {
        if (IMOSLoggingEnabled(v83))
        {
          OSLogHandleForIMFoundationCategory();
          v114 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "guid");
            v115 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
            *(_DWORD *)buf = 138412290;
            v141 = v115;
            _os_log_impl(&dword_1D1413000, v114, OS_LOG_TYPE_INFO, "Broadcasting service update for message with GUID %@ after suppression", buf, 0xCu);

          }
        }
        objc_msgSend(*(id *)(a1 + 32), "chatForChatIdentifier:style:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 104));
        v85 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListeners");
        v116 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 56), "accountID");
        v117 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v85, "chatIdentifier");
        v118 = (void *)objc_claimAutoreleasedReturnValue();
        v119 = objc_msgSend(v85, "style");
        objc_msgSend(v85, "chatProperties");
        v120 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v116, "account:chat:style:chatProperties:messageUpdated:", v117, v118, v119, v120, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40));

      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
    }

    goto LABEL_107;
  }
LABEL_42:
  if (objc_msgSend(v3, "isSOS"))
  {
    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v147 = CFSTR("markedCritical");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(v3, "isCritical"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v148 = v56;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v148, &v147, 1);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v55, "trackEvent:withDictionary:", *MEMORY[0x1E0D38818], v57);

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
  {
    v58 = objc_msgSend(v3, "isSOS");
    v59 = v58;
    v60 = IMOSLoggingEnabled(v58);
    if (v59)
    {
      if (v60)
      {
        OSLogHandleForIMFoundationCategory();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          v62 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v141 = v62;
          _os_log_impl(&dword_1D1413000, v61, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message, tagging existing message; existingMessage: %@",
            buf,
            0xCu);
        }

      }
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "setIsSOS:", objc_msgSend(v3, "isSOS"));
      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "setIsCritical:", objc_msgSend(v3, "isCritical"));
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v63, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), 1, 1, 1, 0xC000002000);
      v64 = objc_claimAutoreleasedReturnValue();

      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), v64);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = 1;
      v65 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "isCritical");
      if (!(_DWORD)v65)
      {
        if (!IMOSLoggingEnabled(v65))
          goto LABEL_98;
        OSLogHandleForIMFoundationCategory();
        v69 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
        {
          v92 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v141 = v92;
          _os_log_impl(&dword_1D1413000, v69, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message; incoming message not marked critical (SOS "
            "only) -- NOT re-alerting; existingMessage: %@",
            buf,
            0xCu);
        }
        goto LABEL_55;
      }
      v66 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "isRead");
      v67 = v66;
      v68 = IMOSLoggingEnabled(v66);
      if (!v67)
      {
        if (v68)
        {
          OSLogHandleForIMFoundationCategory();
          v105 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
          {
            v106 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
            *(_DWORD *)buf = 138412290;
            v141 = v106;
            _os_log_impl(&dword_1D1413000, v105, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message; incoming message marked critical, existi"
              "ng message unread -- RE-ALERTING; existingMessage: %@",
              buf,
              0xCu);
          }

        }
        objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "guid");
        v107 = (void *)objc_claimAutoreleasedReturnValue();
        v146 = v107;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v146, 1);
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        IMDNotificationsPostUrgentNotificationsForMessages();

        goto LABEL_98;
      }
      if (v68)
      {
        OSLogHandleForIMFoundationCategory();
        v69 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
        {
          v70 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
          *(_DWORD *)buf = 138412290;
          v141 = v70;
          _os_log_impl(&dword_1D1413000, v69, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message; incoming message marked critical, but exis"
            "ting message already read -- NOT re-alerting; existingMessage: %@",
            buf,
            0xCu);
        }
LABEL_55:

      }
    }
    else
    {
      if (!v60)
      {
LABEL_99:
        objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
        v109 = (void *)objc_claimAutoreleasedReturnValue();
        v144[0] = CFSTR("markedCritical");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "isCritical"));
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        v144[1] = CFSTR("firstCopyMarkedSOS");
        v145[0] = v110;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", objc_msgSend(v3, "isSOS") ^ 1);
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        v145[1] = v111;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v145, v144, 2);
        v112 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v109, "trackEvent:withDictionary:", *MEMORY[0x1E0D38800], v112);

        +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "markMessageAsDeduplicated:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40));

LABEL_108:
        v128 = 0;
        goto LABEL_109;
      }
      OSLogHandleForIMFoundationCategory();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
      {
        v89 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v141 = v89;
        _os_log_impl(&dword_1D1413000, v64, OS_LOG_TYPE_INFO, "Incoming SOS message found a matching message already tagged isSOS, discarding incoming message; existingMessage: %@",
          buf,
          0xCu);
      }
    }
LABEL_98:

    goto LABEL_99;
  }
  v86 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "isFinished");
  if ((_DWORD)v86)
  {
    v87 = objc_msgSend(*(id *)(a1 + 32), "isReplicating");
    if ((_DWORD)v87)
    {
      v87 = objc_msgSend(*(id *)(a1 + 32), "_canUpgradeExistingMessageItem:replacementReplicatedMessageItem:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), *(_QWORD *)(a1 + 64));
      v88 = v87;
    }
    else
    {
      v88 = 0;
    }
    v93 = IMOSLoggingEnabled(v87);
    if ((_DWORD)v93)
    {
      OSLogHandleForIMFoundationCategory();
      v94 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 64), "guid");
        *(double *)&v95 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        v96 = (void *)v95;
        v97 = CFSTR("NO");
        if (v88)
          v97 = CFSTR("YES");
        *(_DWORD *)buf = 138412546;
        v141 = *(double *)&v95;
        v142 = 2112;
        v143 = v97;
        _os_log_impl(&dword_1D1413000, v94, OS_LOG_TYPE_INFO, "Found existing message, checking upgrade permissibility of %@ allowUpgrade: %@", buf, 0x16u);

      }
    }
    if (!v88)
    {
      if (IMOSLoggingEnabled(v93))
      {
        OSLogHandleForIMFoundationCategory();
        v138 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v138, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v138, OS_LOG_TYPE_INFO, "*** Bailing, we already had a finished message for this in the database. ***", buf, 2u);
        }

      }
      goto LABEL_108;
    }
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v98 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "guid");
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    v100 = objc_msgSend(v98, "wasMessageDeduplicatedWithGUID:", v99);

    v102 = IMOSLoggingEnabled(v101);
    if (v100)
    {
      if (v102)
      {
        OSLogHandleForIMFoundationCategory();
        v103 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(*(id *)(a1 + 64), "guid");
          v104 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
          *(_DWORD *)buf = 138412290;
          v141 = v104;
          _os_log_impl(&dword_1D1413000, v103, OS_LOG_TYPE_INFO, "*** Bailing on replicated upgrade, message %@ was already deduplicated ***", buf, 0xCu);

        }
      }
      goto LABEL_108;
    }
    if (v102)
    {
      OSLogHandleForIMFoundationCategory();
      v130 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 64), "guid");
        v131 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
        *(_DWORD *)buf = 138412290;
        v141 = v131;
        _os_log_impl(&dword_1D1413000, v130, OS_LOG_TYPE_INFO, "Allowing upgrade of finished message for %@", buf, 0xCu);

      }
    }
    +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
    v132 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v132, "markMessageAsDeduplicated:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));

  }
  else if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40) && IMOSLoggingEnabled(v86))
  {
    OSLogHandleForIMFoundationCategory();
    v90 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 64), "guid");
      v91 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue());
      *(_DWORD *)buf = 138412290;
      v141 = v91;
      _os_log_impl(&dword_1D1413000, v90, OS_LOG_TYPE_INFO, "Allowing upgrade of unfinished message for %@", buf, 0xCu);

    }
  }
  LOBYTE(v139) = 0;
  objc_msgSend(*(id *)(a1 + 32), "registerChat:style:displayName:groupID:originalGroupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 104), 0, 0, 0, 0, 0, 0, *(_QWORD *)(a1 + 56), v139);
  v133 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
  if (v133)
  {
    v134 = objc_msgSend(v133, "isFromMe");
    if (v134 != objc_msgSend(v3, "isFromMe"))
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "setGuid:", v135);

      if (IMOSLoggingEnabled(v136))
      {
        OSLogHandleForIMFoundationCategory();
        v137 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v137, OS_LOG_TYPE_INFO, "The input message disagrees with the \"from me\" attribute, creating a new message ID", buf, 2u);
        }

      }
    }
  }
  v128 = v3;
LABEL_109:

  return v128;
}

void sub_1D15A0AD0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (v3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  objc_msgSend(*(id *)(a1 + 32), "chatForChatIdentifier:style:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v3, "isTypingMessage") & 1) == 0 && (objc_msgSend(v3, "isSuggestedActionResponse") & 1) == 0)
  {
    if (v3)
    {
      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "addMessage:toChat:deferSpotlightIndexing:", v3, v4, objc_msgSend(*(id *)(a1 + 32), "isAwaitingStorageTimer"));

      if (objc_msgSend(v4, "isDeletingIncomingMessages"))
      {
        +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "guid");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v11[0] = v7;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0C99D68], "now");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "moveMessagesWithGUIDsToRecentlyDeleted:deleteDate:", v8, v9);

      }
    }
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "updateStateForChat:hintMessage:", v4, v3);

  }
}

void sub_1D15A0C60(uint64_t a1, int a2, void *a3, void *a4)
{
  __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  void *v10;
  os_signpost_id_t v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  __CFString *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  _BOOL4 v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  _BOOL4 v38;
  uint64_t v39;
  void *v40;
  int v41;
  id v42;
  id v43;
  void *v44;
  NSObject *v45;
  const __CFString *v46;
  const __CFString *v47;
  void *v48;
  id v49;
  NSObject *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  unint64_t v57;
  NSObject *v58;
  __CFString *v59;
  __CFString *v60;
  __CFString *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  id v66;
  uint64_t v67;
  id v68;
  id v69;
  uint8_t buf[4];
  __CFString *v71;
  __int16 v72;
  const __CFString *v73;
  __int16 v74;
  const __CFString *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  kdebug_trace();
  v9 = -[__CFString isTypingMessage](v8, "isTypingMessage");
  if ((v9 & 1) == 0)
  {
    v9 = -[__CFString isSuggestedActionResponse](v8, "isSuggestedActionResponse");
    if ((v9 & 1) == 0)
    {
      v9 = -[__CFString flags](v8, "flags");
      if ((v9 & 4) == 0)
      {
        -[__CFString guid](v8, "guid");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = _MessageGUIDToSignpostId();

        if (v11)
        {
          _iMessageTelemetryLogHandle();
          v12 = (id)objc_claimAutoreleasedReturnValue();
          v13 = v12;
          if (v11 != -1 && os_signpost_enabled(v12))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1D1413000, v13, OS_SIGNPOST_INTERVAL_END, v11, "IncomingMessage", " enableTelemetry=YES ", buf, 2u);
          }

          objc_msgSend(MEMORY[0x1E0D36AE8], "IMDaemonCoreMessageReceivedTimingCollection");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v11);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "stopTimingForKey:", v15);

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v11);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "totalTimeForKey:", v16);
          v18 = v17;

          if (v18 <= 0.0)
          {
            if (IMOSLoggingEnabled(v19))
            {
              OSLogHandleForIMFoundationCategory();
              v21 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                -[__CFString guid](v8, "guid");
                v22 = (__CFString *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 138412290;
                v71 = v22;
                _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "No timing information available for incoming message processing with guid %@", buf, 0xCu);

              }
            }
          }
          else
          {
            objc_msgSend(MEMORY[0x1E0D397B8], "sharedInstance");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "postCoreAutomationNotificationIncomingMessageProcessedWithDuration:", v18);

          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v11);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "removeTimingForKey:", v23);

        }
      }
    }
  }
  if (a2)
  {
    if (!v8)
    {
      v8 = v7;
      if (!v8)
        v8 = (__CFString *)*(id *)(a1 + 32);
    }
    if ((-[__CFString isTypingMessage](v7, "isTypingMessage") & 1) != 0
      || (-[__CFString isFromMe](v7, "isFromMe") & 1) != 0)
    {
      goto LABEL_36;
    }
    objc_msgSend(*(id *)(a1 + 40), "service");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v24, "supportsDatabase") & 1) != 0)
    {
      +[IMDDaemonPropertyManager sharedManager](IMDDaemonPropertyManager, "sharedManager");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "valueOfPersistentProperty:", *MEMORY[0x1E0D36C58]);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = objc_msgSend(v26, "intValue") == 0;

      if (!v27)
      {
LABEL_34:
        objc_msgSend(*(id *)(a1 + 40), "_checkMessageForOneTimeCodes:", v8);
        objc_msgSend(MEMORY[0x1E0D39B78], "sharedInstance");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v32, "isUnderFirstDataProtectionLock");

        if ((v33 & 1) == 0)
          objc_msgSend(*(id *)(a1 + 40), "_checkMessageForENURL:", v8);
LABEL_36:
        objc_msgSend(*(id *)(a1 + 40), "chatForChatIdentifier:style:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 80));
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled(v34))
        {
          OSLogHandleForIMEventCategory();
          v35 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            v71 = v7;
            v72 = 2112;
            v73 = v8;
            _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "Stored message: %@     Actually stored: %@", buf, 0x16u);
          }

        }
        v36 = -[__CFString containsRichLink](v8, "containsRichLink");
        if ((_DWORD)v36)
        {
          objc_msgSend(*(id *)(a1 + 32), "syndicationRanges");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v38 = v37 == 0;

          if (v38)
          {
            v39 = objc_msgSend(*(id *)(a1 + 40), "_isMessageSWYSpamMessage:inChat:", v8, v34);
            v40 = *(void **)(a1 + 40);
            v68 = 0;
            v69 = 0;
            v41 = objc_msgSend(v40, "_shouldShowSWYQuickActionForMessage:outAppName:outBundleID:", v8, &v69, &v68);
            v42 = v69;
            v43 = v68;
            v44 = v43;
            if ((v39 | v41) == 1)
            {
              if (IMOSLoggingEnabled(v43))
              {
                OSLogHandleForIMFoundationCategory();
                v45 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
                {
                  v46 = CFSTR("NO");
                  if ((_DWORD)v39)
                    v47 = CFSTR("YES");
                  else
                    v47 = CFSTR("NO");
                  *(_DWORD *)buf = 138412802;
                  v71 = v8;
                  v72 = 2112;
                  v73 = v47;
                  if (v41)
                    v46 = CFSTR("YES");
                  v74 = 2112;
                  v75 = v46;
                  _os_log_impl(&dword_1D1413000, v45, OS_LOG_TYPE_INFO, "Not donating to Message: %@ to CoreSpotlight. isSWYSpam %@, showQuickAction: %@", buf, 0x20u);
                }

              }
              objc_msgSend(*(id *)(a1 + 40), "_configureSyndicationRangesForMessage:forChat:withSyndicationStatus:", v8, v34, 2);
              -[__CFString setWasDetectedAsSWYSpam:](v8, "setWasDetectedAsSWYSpam:", v39);
              -[__CFString setSwyAppName:](v8, "setSwyAppName:", v42);
              -[__CFString setSwyBundleID:](v8, "setSwyBundleID:", v44);
              +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              LOWORD(v67) = 256;
              v49 = (id)objc_msgSend(v48, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:reindexMessage:", v8, 1, 0, 0, 0, 1, v67);

            }
          }
        }
        if (IMOSLoggingEnabled(v36))
        {
          OSLogHandleForIMFoundationCategory();
          v50 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v71 = v8;
            _os_log_impl(&dword_1D1413000, v50, OS_LOG_TYPE_INFO, "Posting received message: %@", buf, 0xCu);
          }

        }
        if (*(_QWORD *)(a1 + 56))
          -[__CFString setConsumedSessionPayloads:](v8, "setConsumedSessionPayloads:");
        if ((objc_msgSend(v34, "isDeletingIncomingMessages") & 1) != 0
          || (objc_msgSend(*(id *)(a1 + 40), "isAwaitingStorageTimer") & 1) != 0)
        {
          v51 = *(void **)(a1 + 40);
          -[__CFString guid](v8, "guid");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v51, "noteSuppressedMessageUpdate:", v52);

        }
        else
        {
          objc_msgSend(*(id *)(a1 + 64), "addObject:", v8);
        }
        if (*(_BYTE *)(a1 + 81))
        {
          v53 = *(void **)(a1 + 40);
          objc_msgSend(*(id *)(a1 + 32), "guid");
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v53, "_updateExpireStateForMessageGUID:", v54);

        }
        if (objc_msgSend(v34, "state") == 4)
        {
          v55 = *(void **)(a1 + 40);
          objc_msgSend(v34, "chatIdentifier");
          v56 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v55, "didUpdateChatStatus:chat:style:account:", 7, v56, objc_msgSend(v34, "style"), *(_QWORD *)(a1 + 72));

        }
        if (*(_BYTE *)(a1 + 82))
          objc_msgSend(*(id *)(a1 + 40), "sendSavedReceiptForMessage:toChatID:identifier:style:", v8, 0, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 80));
        if (-[__CFString isAssociatedMessageItem](v7, "isAssociatedMessageItem"))
        {
          v57 = -[__CFString associatedMessageType](v7, "associatedMessageType") & 0xFFFFFFFFFFFFFFF8;
          if (v57 == 3000 || v57 == 2000)
          {
            IMLogHandleForCategory();
            v58 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            {
              -[__CFString guid](v7, "guid");
              v59 = (__CFString *)objc_claimAutoreleasedReturnValue();
              -[__CFString associatedMessageGUID](v7, "associatedMessageGUID");
              v60 = (__CFString *)objc_claimAutoreleasedReturnValue();
              -[__CFString sender](v7, "sender");
              v61 = (__CFString *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 138412802;
              v71 = v59;
              v72 = 2112;
              v73 = v60;
              v74 = 2112;
              v75 = v61;
              _os_log_impl(&dword_1D1413000, v58, OS_LOG_TYPE_INFO, "Replacing previous message acknowledgements with new acknowledgment for received message; sender: '%@':'%@':'%@'",
                buf,
                0x20u);

            }
            +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            -[__CFString guid](v7, "guid");
            v63 = (void *)objc_claimAutoreleasedReturnValue();
            -[__CFString associatedMessageGUID](v7, "associatedMessageGUID");
            v64 = (void *)objc_claimAutoreleasedReturnValue();
            -[__CFString sender](v7, "sender");
            v65 = (void *)objc_claimAutoreleasedReturnValue();
            v66 = (id)objc_msgSend(v62, "replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:", v63, v64, v65);

          }
        }

        goto LABEL_77;
      }
    }
    else
    {

    }
    if (IMOSLoggingEnabled(v28))
    {
      OSLogHandleForIMFoundationCategory();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v30, OS_LOG_TYPE_INFO, "  Ensuring the app is alive here", buf, 2u);
      }

    }
    +[IMDLocalDaemon sharedDaemon](IMDLocalDaemon, "sharedDaemon");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "launchListenerForCapability:", *MEMORY[0x1E0D36CD0]);

    goto LABEL_34;
  }
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v29, OS_LOG_TYPE_INFO, "Message was not stored, ignoring", buf, 2u);
    }

  }
LABEL_77:

}

void sub_1D15A1934(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15A17ECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D15A1D8C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if ((objc_msgSend(v5, "isTypingMessage") & 1) == 0)
  {
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addMessage:toChat:", v5, *(_QWORD *)(a1 + 32));

    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "updateStateForChat:hintMessage:", *(_QWORD *)(a1 + 32), 0);

  }
}

void sub_1D15A1E10(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint8_t buf[4];
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (a2)
  {
    v9 = objc_msgSend(v7, "isEqual:", v8);
    if ((v9 & 1) == 0)
    {
      if (IMOSLoggingEnabled(v9))
      {
        OSLogHandleForIMFoundationCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v25 = v8;
          _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Updating invitation message after DB store: %@", buf, 0xCu);
        }

      }
      if ((objc_msgSend(*(id *)(a1 + 32), "isAwaitingStorageTimer") & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListeners");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "accountID");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = *(_QWORD *)(a1 + 40);
        v14 = *(unsigned __int8 *)(a1 + 72);
        objc_msgSend(*(id *)(a1 + 48), "chatProperties");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "groupID");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 48), "personCentricID");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:", v12, v13, v14, v15, v16, v17, v8);

      }
    }
    if ((objc_msgSend(*(id *)(a1 + 32), "isAwaitingStorageTimer") & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListeners");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(unsigned __int8 *)(a1 + 72);
      v21 = *(_QWORD *)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 48), "chatProperties");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "account:chat:style:chatProperties:invitationReceived:", v19, v21, v20, v22, v8);

    }
    if (*(_QWORD *)(a1 + 64))
    {
      objc_msgSend(*(id *)(a1 + 32), "broadcasterForChatListeners");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "account:chat:style:chatProperties:updateProperties:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 72), 0, *(_QWORD *)(a1 + 64));

    }
  }

}

void sub_1D15A30B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  id v14;

  v13 = *(_DWORD *)(a1 + 56);
  v2 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 60);
  objc_msgSend(*(id *)(a1 + 48), "displayName");
  v14 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "groupID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "lastAddressedHandle");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "lastAddressedSIMID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "handleInfo");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "account");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(*(id *)(a1 + 48), "category");
  objc_msgSend(*(id *)(a1 + 48), "extensionName");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v11) = objc_msgSend(*(id *)(a1 + 48), "isBlackholed");
  objc_msgSend(v2, "didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:category:spamExtensionName:isBlackholed:", v13, v12, v3, v14, v4, v5, v6, v7, v8, v9, v10, v11);

}

uint64_t sub_1D15A4DE0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ID");
}

void sub_1D15A50B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a2;
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addItem:toChat:", v3, *(_QWORD *)(a1 + 32));

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "updateStateForChat:hintMessage:", *(_QWORD *)(a1 + 32), 0);

}

void sub_1D15A5138(id *a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  char v13;
  id v14;
  void *v15;
  NSObject *v16;
  id *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (a2)
  {
    if (!v8)
    {
      v8 = v7;
      v9 = v8;
      if (!v8)
      {
        v8 = a1[4];
        v9 = v8;
      }
    }
    v10 = IMOSLoggingEnabled(v8);
    if ((_DWORD)v10)
    {
      OSLogHandleForIMFoundationCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v26 = v7;
        v27 = 2112;
        v28 = v9;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Stored item: %@     Actually stored: %@", buf, 0x16u);
      }

    }
    if (IMOSLoggingEnabled(v10))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v26 = v9;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Posting received message: %@", buf, 0xCu);
      }

    }
    v13 = objc_msgSend(a1[5], "isAwaitingStorageTimer");
    v14 = a1[5];
    if ((v13 & 1) != 0)
    {
      objc_msgSend(v9, "guid");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "noteSuppressedMessageUpdate:", v15);

    }
    else
    {
      v17 = a1 + 6;
      objc_msgSend(v14, "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(a1[6], "isBlackholed"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(a1[7], "accountID");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*v17, "chatIdentifier");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(*v17, "style");
      objc_msgSend(*v17, "chatProperties");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*v17, "groupID");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*v17, "personCentricID");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:", v19, v20, v21, v22, v23, v24, v9);

    }
  }
  else if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Item was not stored, ignoring", buf, 2u);
    }

  }
}

uint64_t sub_1D15A5484()
{
  uint64_t result;

  result = MEMORY[0x1D17EA3EC](CFSTR("_CDSpotlightItemRecorder"), CFSTR("CoreDuet"));
  qword_1EFC63E80 = result;
  return result;
}

void sub_1D15A5630(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  const __CFString *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = CFSTR("NO");
      v9 = 138412802;
      if (a2)
        v8 = CFSTR("YES");
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      v13 = 2112;
      v14 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "done deleting searchable items with domain identifiers %@. success %@ error %@", (uint8_t *)&v9, 0x20u);
    }

  }
}

void sub_1D15A5AA4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  id v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  _QWORD aBlock[4];
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  id v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v6;
  objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0D35A30]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0D35A28]);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "unsignedLongLongValue");

  objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0D35A38]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "_sharedAccountController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "anySessionForServiceName:", v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v16)
    {
      if (IMOSLoggingEnabled(v17))
      {
        OSLogHandleForIMFoundationCategory();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v50 = (uint64_t)v7;
          _os_log_impl(&dword_1D1413000, v36, OS_LOG_TYPE_INFO, "Chat: could not find a session to route message GUID: %@", buf, 0xCu);
        }

      }
      goto LABEL_38;
    }
    objc_msgSend(*(id *)(a1 + 32), "_sharedMessageStore");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "messageWithGUID:", v7);
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v19)
    {
      if (IMOSLoggingEnabled(v20))
      {
        OSLogHandleForIMFoundationCategory();
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v50 = (uint64_t)v7;
          _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Chat: Could not re-route missing message GUID: %@", buf, 0xCu);
        }

      }
      goto LABEL_37;
    }
    objc_msgSend(*(id *)(a1 + 32), "_sharedMessageStore");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "chatForMessage:", v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (v22)
    {
      if ((objc_msgSend(v19, "isSent") & 1) != 0 || (v24 = objc_msgSend(v19, "errorCode"), (_DWORD)v24))
      {
        objc_msgSend(v19, "time");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "timeIntervalSinceNow");
        v27 = v26;

        objc_msgSend(v19, "setErrorCode:", 0);
        objc_msgSend(v19, "setFlags:", objc_msgSend(v19, "flags") & 0xFFFFFFFFFFFF4FFFLL);
        objc_msgSend(v19, "setTime:", 0);
        objc_msgSend(v19, "setTimeRead:", 0);
        objc_msgSend(v19, "setTimeDelivered:", 0);
        objc_msgSend(v19, "setTimePlayed:", 0);
        objc_msgSend(v19, "setFlags:", objc_msgSend(v19, "flags") | v11);
        if ((v11 & 0x80000) != 0)
        {
          objc_msgSend(v19, "messageSummaryInfo");
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = (void *)objc_msgSend(v28, "mutableCopy");

          if (!v29)
          {
            objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
            v29 = (void *)objc_claimAutoreleasedReturnValue();
          }
          objc_msgSend(v19, "service");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "setObject:forKeyedSubscript:", v30, *MEMORY[0x1E0D38380]);

          if (IMOSLoggingEnabled(objc_msgSend(v19, "setMessageSummaryInfo:", v29)))
          {
            OSLogHandleForIMFoundationCategory();
            v31 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              objc_msgSend(v19, "service");
              *(_DWORD *)buf = 138412546;
              v50 = objc_claimAutoreleasedReturnValue();
              v51 = 2112;
              v52 = v7;
              v40 = (void *)v50;
              _os_log_impl(&dword_1D1413000, v31, OS_LOG_TYPE_INFO, "Setting original service name to: %@ on downgraded message: %@", buf, 0x16u);

            }
          }

        }
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = sub_1D15A6124;
        aBlock[3] = &unk_1E922E270;
        v42 = v7;
        v43 = v22;
        v44 = v9;
        v32 = v16;
        v48 = v13;
        v33 = *(_QWORD *)(a1 + 32);
        v45 = v32;
        v46 = v33;
        v47 = v27;
        v34 = _Block_copy(aBlock);
        objc_msgSend(*(id *)(a1 + 32), "storeMessage:forceReplace:modifyError:modifyFlags:calculateUnreadCount:flagMask:didReplaceBlock:shouldStoreBlock:didStoreBlock:block:", v19, 1, 1, 1, 1, 0, 0, 0, 0, v34);

        goto LABEL_36;
      }
      if (IMOSLoggingEnabled(v24))
      {
        OSLogHandleForIMFoundationCategory();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          objc_msgSend(v19, "guid");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          v50 = (uint64_t)v39;
          _os_log_impl(&dword_1D1413000, v38, OS_LOG_TYPE_INFO, "Not routing message (%@) because it is not sent and has no error, not a candidate for routing", buf, 0xCu);

        }
LABEL_35:

      }
    }
    else if (IMOSLoggingEnabled(v23))
    {
      OSLogHandleForIMFoundationCategory();
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v50 = (uint64_t)v19;
        _os_log_impl(&dword_1D1413000, v38, OS_LOG_TYPE_INFO, "Chat: Could not find a chat for message: %@", buf, 0xCu);
      }
      goto LABEL_35;
    }
LABEL_36:

LABEL_37:
LABEL_38:

    goto LABEL_39;
  }
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      v50 = (uint64_t)v7;
      v51 = 2112;
      v52 = v8;
      _os_log_impl(&dword_1D1413000, v35, OS_LOG_TYPE_INFO, "Chat: Got a missing service in routing dictionary for GUID (%@): %@", buf, 0x16u);
    }

  }
LABEL_39:

}

void sub_1D15A60B0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15A6050);
  }
  _Unwind_Resume(a1);
}

void sub_1D15A6124(_QWORD *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  void *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  id v53;
  unsigned int v54;
  void *v55;
  double *v56;
  id obj;
  uint64_t v58;
  uint64_t v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[2];
  _QWORD v66[2];
  uint8_t v67[128];
  uint8_t buf[4];
  id v69;
  __int16 v70;
  id v71;
  __int16 v72;
  _BYTE v73[18];
  __int16 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v48 = a3;
  v53 = a4;
  v56 = (double *)a1;
  if (IMOSLoggingEnabled(v53))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)a1[4];
      v8 = a1[5];
      v9 = a1[6];
      v10 = a1[7];
      *(_DWORD *)buf = 138413314;
      v69 = v7;
      v70 = 2112;
      v71 = v53;
      v72 = 2112;
      *(_QWORD *)v73 = v8;
      *(_WORD *)&v73[8] = 2112;
      *(_QWORD *)&v73[10] = v9;
      v74 = 2112;
      v75 = v10;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Re-routing message (guid:%@):%@   chat:%@   service:%@   session:%@", buf, 0x34u);
    }

  }
  v12 = (void *)a1[5];
  v11 = (id *)(a1 + 5);
  objc_msgSend(v12, "chatIdentifier");
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend(*v11, "style");
  objc_msgSend(*v11, "serviceName");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "anySessionForServiceName:", v52);
  v51 = (void *)objc_claimAutoreleasedReturnValue();

  v49 = (void *)IMCopyGUIDForChat();
  objc_msgSend(*((id *)v56 + 7), "chatForChatIdentifier:style:", v55, v54);
  v14 = objc_claimAutoreleasedReturnValue();
  v50 = (void *)v14;
  if (v14)
  {
    v15 = IMOSLoggingEnabled(v14);
    if ((_DWORD)v15)
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v69 = v50;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Chat already exists for the other session, nothing to do here: %@", buf, 0xCu);
      }

    }
  }
  else
  {
    objc_msgSend(*((id *)v56 + 5), "participants");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(0, "addParticipants:", v17);

    if (IMOSLoggingEnabled(v18))
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138413058;
        v69 = v52;
        v70 = 2112;
        v71 = v55;
        v72 = 1024;
        *(_DWORD *)v73 = v54;
        *(_WORD *)&v73[4] = 2112;
        *(_QWORD *)&v73[6] = 0;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "No chat registered, creating on one on service %@  identifier: %@   style: %c  (Chat: %@)", buf, 0x26u);
      }

    }
    v60 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    objc_msgSend(*((id *)v56 + 5), "participants");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v67, 16);
    if (v20)
    {
      v59 = *(_QWORD *)v62;
      v58 = *MEMORY[0x1E0D36D90];
      v21 = *MEMORY[0x1E0D36C20];
      v22 = *MEMORY[0x1E0D36E10];
      v23 = *MEMORY[0x1E0D36D68];
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v62 != v59)
            objc_enumerationMutation(obj);
          v25 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
          v26 = (void *)MEMORY[0x1E0C99D80];
          objc_msgSend(v25, "ID");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 2);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "unformattedID");
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "countryCode");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "dictionaryWithObjectsAndKeys:", v27, v58, v28, v21, v29, v22, v30, v23, 0);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v60, "addObject:", v31);

        }
        v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v67, 16);
      }
      while (v20);
    }

    if (IMOSLoggingEnabled(v32))
    {
      OSLogHandleForIMFoundationCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*((id *)v56 + 5), "participants");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v69 = v60;
        v70 = 2112;
        v71 = v34;
        _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Generated handle info: %@ for group chat: %@", buf, 0x16u);

      }
    }
    if (v51)
    {
      objc_msgSend(v51, "chatForChatIdentifier:style:", v55, v54);
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = v35;
      if (v35)
      {
        objc_msgSend(v35, "lastAddressedLocalHandle");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "lastAddressedSIMID");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        if (IMOSLoggingEnabled(v38))
        {
          OSLogHandleForIMFoundationCategory();
          v39 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v36, "guid");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412802;
            v69 = v40;
            v70 = 2112;
            v71 = v37;
            v72 = 2112;
            *(_QWORD *)v73 = v38;
            _os_log_impl(&dword_1D1413000, v39, OS_LOG_TYPE_INFO, "Found original chat [%@], will use lastAddressedHandle %@ lastSIMID %@", buf, 0x20u);

          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled(0))
        {
          OSLogHandleForIMFoundationCategory();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v69 = v55;
            _os_log_impl(&dword_1D1413000, v42, OS_LOG_TYPE_INFO, "No iMessage chat found for chat identifier: %@", buf, 0xCu);
          }

        }
        v37 = 0;
        v38 = 0;
      }

    }
    else
    {
      if (IMOSLoggingEnabled(0))
      {
        OSLogHandleForIMFoundationCategory();
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v41, OS_LOG_TYPE_INFO, "Chat: could not find iMessage session to find iMessage chat.", buf, 2u);
        }

      }
      v37 = 0;
      v38 = 0;
    }
    objc_msgSend(*((id *)v56 + 7), "didJoinChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:", v55, v54, 0, 0, v37, v38, v60);

  }
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      v44 = (void *)*((_QWORD *)v56 + 7);
      *(_DWORD *)buf = 138412546;
      v69 = v44;
      v70 = 2112;
      v71 = v49;
      _os_log_impl(&dword_1D1413000, v43, OS_LOG_TYPE_INFO, "Sending message to session: %@  chatGUID: %@", buf, 0x16u);
    }

  }
  objc_msgSend(*((id *)v56 + 7), "sendMessage:toChat:style:", v53, v55, v54);
  objc_msgSend(v51, "revokeSentMessage:inChat:", v53, *((_QWORD *)v56 + 5));
  if (*((_BYTE *)v56 + 80))
  {
    objc_msgSend(*((id *)v56 + 8), "_markChatAsDowngraded:", *((_QWORD *)v56 + 5));
    v65[0] = *MEMORY[0x1E0D38470];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v56[9]);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v65[1] = *MEMORY[0x1E0D38A40];
    v66[0] = v45;
    v66[1] = MEMORY[0x1E0C9AAA0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, v65, 2);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v47, "trackEvent:withDictionary:", *MEMORY[0x1E0D385D8], v46);

  }
}

void sub_1D15A6B58(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[5];

  objc_msgSend(MEMORY[0x1E0D35A48], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 48), "_downgradableServiceNames");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(unsigned int *)(a1 + 56);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D15A6C0C;
  v7[3] = &unk_1E922E298;
  v7[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v2, "requestRoutingForMessageGuid:inChat:downgradableServices:error:completionBlock:", v3, v4, v5, v6, v7);

}

uint64_t sub_1D15A6C0C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleRoutingWithDictionary:", a2);
  if (a3 > 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "_updateRoutingTimerWithInterval:", a3);
  return result;
}

uint64_t sub_1D15A6E7C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleRoutingWithDictionary:", a2);
  if (a3 > 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "_updateRoutingTimerWithInterval:", a3);
  return result;
}

void sub_1D15A7168(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  _QWORD v28[4];
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint8_t buf[4];
  id v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v6;
  objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0D35A18]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "longLongValue");

  objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0D35A20]);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "BOOLValue");

  objc_msgSend(*(id *)(a1 + 32), "_sharedMessageStore");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "messageWithGUID:", v7);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v14)
  {
    objc_msgSend(*(id *)(a1 + 32), "_sharedMessageStore");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "chatForMessage:", v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    if (v17)
    {
      if (v10 == 3)
        v19 = v12;
      else
        v19 = 0;
      if (v19 == 1)
      {
        if (IMOSLoggingEnabled(v18))
        {
          OSLogHandleForIMFoundationCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v14, "guid");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v34 = v21;
            _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Not deleting message (%@) because was already saved", buf, 0xCu);

          }
LABEL_23:

        }
      }
      else
      {
        v23 = objc_msgSend(v14, "expireState");
        if (v23 <= v10)
        {
          objc_msgSend(v14, "setExpireState:", v10);
          if (v12)
          {
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v7);
          }
          else
          {
            v25 = *(void **)(a1 + 32);
            v28[0] = MEMORY[0x1E0C809B0];
            v28[1] = 3221225472;
            v28[2] = sub_1D15A759C;
            v28[3] = &unk_1E922E2E8;
            v29 = v7;
            v26 = v17;
            v27 = *(_QWORD *)(a1 + 32);
            v30 = v26;
            v31 = v27;
            v32 = v14;
            objc_msgSend(v25, "storeMessage:forceReplace:modifyError:modifyFlags:calculateUnreadCount:flagMask:didReplaceBlock:shouldStoreBlock:didStoreBlock:block:", v32, 0, 0, 0, 1, 0, 0, 0, 0, v28);

          }
          goto LABEL_27;
        }
        if (IMOSLoggingEnabled(v23))
        {
          OSLogHandleForIMFoundationCategory();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v14, "guid");
            v24 = (id)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412802;
            v34 = v24;
            v35 = 1024;
            v36 = objc_msgSend(v14, "expireState");
            v37 = 1024;
            v38 = v10;
            _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Not expiring message (%@) because its expire state %d is already %d", buf, 0x18u);

          }
          goto LABEL_23;
        }
      }
    }
    else if (IMOSLoggingEnabled(v18))
    {
      OSLogHandleForIMFoundationCategory();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v34 = v14;
        _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Chat: Could not find a chat for message: %@", buf, 0xCu);
      }
      goto LABEL_23;
    }
LABEL_27:

    goto LABEL_28;
  }
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v34 = v7;
      _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Chat: Could not expire missing message GUID: %@", buf, 0xCu);
    }

  }
LABEL_28:

}

void sub_1D15A7560(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15A7510);
  }
  _Unwind_Resume(a1);
}

void sub_1D15A759C(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 48);
      v20 = 138413058;
      v21 = v10;
      v22 = 2112;
      v23 = v8;
      v24 = 2112;
      v25 = v11;
      v26 = 2112;
      v27 = v12;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Expire message (guid:%@):%@   chat:%@   session:%@", (uint8_t *)&v20, 0x2Au);
    }

  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 48), "broadcasterForChatListeners");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "accountID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(void **)(a1 + 40);
    v15 = (id *)(a1 + 40);
    objc_msgSend(v16, "chatIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(*v15, "style");
    objc_msgSend(*v15, "chatProperties");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "account:chat:style:chatProperties:messageUpdated:", v14, v17, v18, v19, v8);

  }
}

void sub_1D15A77D8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];

  objc_msgSend(MEMORY[0x1E0D35A48], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1D15A7850;
  v4[3] = &unk_1E922E298;
  v3 = *(_QWORD *)(a1 + 32);
  v4[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "requestExpireStateForMessageGuid:completionBlock:", v3, v4);

}

uint64_t sub_1D15A7850(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleExpireStateDictionary:", a2);
  if (a3 > 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "_updateExpireStateTimerWithInterval:", a3);
  return result;
}

uint64_t sub_1D15A7BC4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;
  double v6;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleExpireStateDictionary:", a2);
  if (a3 > 0.0)
  {
    v6 = 1.0;
    if (a3 >= 1.0)
      v6 = a3;
    return objc_msgSend(*(id *)(a1 + 32), "_updateExpireStateTimerWithInterval:", v6);
  }
  return result;
}

void sub_1D15A7D38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD v22[4];
  id v23;
  id v24;
  uint64_t v25;
  id v26;
  uint8_t buf[4];
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v6;
  objc_msgSend(v8, "objectForKey:", *MEMORY[0x1E0D35A40]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");

  objc_msgSend(*(id *)(a1 + 32), "_sharedMessageStore");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "messageWithGUID:", v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 32), "_sharedMessageStore");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "chatForMessage:", v12);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v15 && IMOSLoggingEnabled(v16))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v28 = v12;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Chat: Could not find a chat for message: %@", buf, 0xCu);
      }

    }
    if (v10)
    {
      objc_msgSend(v12, "setErrorCode:", 3);
      if (objc_msgSend(v12, "scheduleType") == 2)
        objc_msgSend(*(id *)(a1 + 32), "_handleScheduledMessageFailure:", v12);
      v18 = *(void **)(a1 + 32);
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = sub_1D15A800C;
      v22[3] = &unk_1E922E2E8;
      v23 = v7;
      v19 = v15;
      v20 = *(_QWORD *)(a1 + 32);
      v24 = v19;
      v25 = v20;
      v26 = v12;
      objc_msgSend(v18, "storeMessage:forceReplace:modifyError:modifyFlags:calculateUnreadCount:flagMask:didReplaceBlock:shouldStoreBlock:didStoreBlock:block:", v26, 0, 1, 0, 1, 0, 0, 0, 0, v22);

    }
  }
  else if (IMOSLoggingEnabled(v13))
  {
    OSLogHandleForIMFoundationCategory();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v28 = v7;
      _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Chat: Could not watchdog missing message GUID: %@", buf, 0xCu);
    }

  }
}

void sub_1D15A800C(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(_QWORD *)(a1 + 48);
      v20 = 138413058;
      v21 = v10;
      v22 = 2112;
      v23 = v8;
      v24 = 2112;
      v25 = v11;
      v26 = 2112;
      v27 = v12;
      _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "Expire message (guid:%@):%@   chat:%@   session:%@", (uint8_t *)&v20, 0x2Au);
    }

  }
  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 48), "broadcasterForChatListeners");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 56), "accountID");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(void **)(a1 + 40);
    v15 = (id *)(a1 + 40);
    objc_msgSend(v16, "chatIdentifier");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(*v15, "style");
    objc_msgSend(*v15, "chatProperties");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "account:chat:style:chatProperties:messageUpdated:", v14, v17, v18, v19, v8);

  }
}

void sub_1D15A823C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];

  objc_msgSend(MEMORY[0x1E0D35A48], "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_1D15A82B4;
  v4[3] = &unk_1E922E298;
  v3 = *(_QWORD *)(a1 + 32);
  v4[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v2, "requestWatchdogForMessageGuid:completionBlock:", v3, v4);

}

uint64_t sub_1D15A82B4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleWatchdogWithDictionary:", a2);
  if (a3 > 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "_updateWatchdogTimerWithInterval:", a3);
  return result;
}

uint64_t sub_1D15A8628(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_handleWatchdogWithDictionary:", a2);
  if (a3 > 0.0)
    return objc_msgSend(*(id *)(a1 + 32), "_updateWatchdogTimerWithInterval:", a3);
  return result;
}

void sub_1D15A877C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_alloc(MEMORY[0x1E0D39918]);
    objc_msgSend(*(id *)(a1 + 40), "accountID");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (id)objc_msgSend(v2, "initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:", v3, 0, *(_QWORD *)(a1 + 32), 0, 0, 69, 0, 0, 0);

    v4 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 48), "chatIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "sendMessage:toChat:style:", v6, v5, 45);

  }
}

void sub_1D15A88BC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint8_t buf[16];

  v2 = IMSharedHelperTurnOnUNUserNotificationsInIMDPersistence();
  if ((_DWORD)v2)
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Going to user user notifications to notify for urgent messages", buf, 2u);
      }

    }
    +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "activeAliases");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v5, *MEMORY[0x1E0D360D0]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    IMDNotificationsPostUrgentNotificationsForMessages();

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "broadcasterForNotificationsListeners");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "receivedUrgentRequestForMessages:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1D15A8ADC(uint64_t a1)
{
  id *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  __int128 v14;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 32), "guid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*v2, "chatIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(*v2, "style");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = *(id *)(a1 + 40);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  v8 = v6;
  if (v6)
  {
    v9 = *(_QWORD *)v17;
    *(_QWORD *)&v7 = 138412546;
    v14 = v7;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v10);
        if (IMOSLoggingEnabled(v6))
        {
          OSLogHandleForIMFoundationCategory();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v11, "guid");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v14;
            v21 = v13;
            v22 = 2112;
            v23 = v3;
            _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Auto Replier sending delivered quietly receipt for messageGuid %@ in chatGuid %@", buf, 0x16u);

          }
        }
        v6 = objc_msgSend(*(id *)(a1 + 48), "sendDeliveredQuietlyReceiptForMessage:forIncomingMessageFromIDSID:toChatGuid:identifier:style:withWillSendToDestinationsHandler:", v11, *(_QWORD *)(a1 + 56), v3, v4, v5, *(_QWORD *)(a1 + 64), v14);
        ++v10;
      }
      while (v8 != v10);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
      v8 = v6;
    }
    while (v6);
  }

}

void sub_1D15A8D80(id *a1)
{
  id *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  void *v13;
  __int128 v14;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void *v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 4;
  objc_msgSend(a1[4], "guid");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*v2, "chatIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(*v2, "style");
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = a1[5];
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  v8 = v6;
  if (v6)
  {
    v9 = *(_QWORD *)v17;
    *(_QWORD *)&v7 = 138412546;
    v14 = v7;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v17 != v9)
          objc_enumerationMutation(obj);
        v11 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v10);
        if (IMOSLoggingEnabled(v6))
        {
          OSLogHandleForIMFoundationCategory();
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            objc_msgSend(v11, "guid");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v14;
            v21 = v13;
            v22 = 2112;
            v23 = v3;
            _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Auto Replier sending notify recipient command for messageGuid %@ in chatGuid %@", buf, 0x16u);

          }
        }
        v6 = objc_msgSend(a1[6], "sendNotifyRecipientCommandForMessage:toChatGuid:identifier:style:", v11, v3, v4, v5, v14);
        ++v10;
      }
      while (v8 != v10);
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
      v8 = v6;
    }
    while (v6);
  }

}

void sub_1D15A915C(uint64_t a1, int a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (IMOSLoggingEnabled(a1))
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v23 = v4;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Successfully consumed EN url, marking message as read: %@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v5, "length"))
    {
      +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "chatsForMessageGUID:", v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v8 = v7;
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
      v10 = v9;
      if (v9)
      {
        v11 = *(_QWORD *)v19;
        do
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v19 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v12);
            v9 = IMOSLoggingEnabled(v9);
            if ((_DWORD)v9)
            {
              OSLogHandleForIMFoundationCategory();
              v14 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138412546;
                v23 = v5;
                v24 = 2112;
                v25 = v13;
                _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Found chat for messageID: %@   chat: %@", buf, 0x16u);
              }

            }
            if (v13)
            {
              v15 = *(void **)(a1 + 40);
              objc_msgSend(MEMORY[0x1E0C99D68], "__im_dateWithCurrentServerTime");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17[0] = MEMORY[0x1E0C809B0];
              v17[1] = 3221225472;
              v17[2] = sub_1D15A941C;
              v17[3] = &unk_1E92287A0;
              v17[4] = v13;
              sub_1D1596ED4(v15, v13, v5, 1u, v16, v17);

            }
            ++v12;
          }
          while (v10 != v12);
          v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          v10 = v9;
        }
        while (v9);
      }

    }
  }
}

void sub_1D15A941C(uint64_t a1)
{
  id v2;

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:", *(_QWORD *)(a1 + 32), 0, 0, 1);

}

void sub_1D15A962C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  if (a2)
  {
    v5 = *(void **)(a1 + 32);
    v16 = a4;
    objc_msgSend(v5, "lastMessage");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "guid");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v7, "isEqualToString:", v8);

    if (v9)
    {
      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "updateLastMessageForChat:hintMessage:", *(_QWORD *)(a1 + 32), 0);

    }
    objc_msgSend(*(id *)(a1 + 48), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(*(id *)(a1 + 32), "isBlackholed"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = *(unsigned __int8 *)(a1 + 80);
    objc_msgSend(*(id *)(a1 + 32), "chatProperties");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "account:chat:style:chatProperties:messageUpdated:", v12, v13, v14, v15, v16);

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }
}

void sub_1D15A98F4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  if (a2)
  {
    v5 = *(void **)(a1 + 32);
    v6 = a4;
    objc_msgSend(v5, "lastMessage");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "guid");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "guid");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v8, "isEqualToString:", v9);

    if (v10)
    {
      +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "updateLastMessageForChat:hintMessage:", *(_QWORD *)(a1 + 32), 0);

    }
    objc_msgSend(*(id *)(a1 + 48), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(*(id *)(a1 + 32), "isBlackholed"));
    v16 = (id)objc_claimAutoreleasedReturnValue();
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = *(unsigned __int8 *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 32), "chatProperties");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "account:chat:style:chatProperties:messageUpdated:", v12, v13, v14, v15, v6);

  }
}

uint64_t sub_1D15AA814(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "ID");
}

uint64_t sub_1D15AB0B4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "objectForKeyedSubscript:", *MEMORY[0x1E0D36D90]);
}

void sub_1D15AB5CC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D15AB550);
  }
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D15AB64C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1D15AB9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = a6;
  v9 = a5;
  IMLogHandleForCategory();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    v11 = *(_QWORD *)(a1 + 32);
    v13 = 138412290;
    v14 = v11;
    _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Executing NOOP command handler for command: %@", (uint8_t *)&v13, 0xCu);
  }

  objc_msgSend(v9, "service");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "sendAckForMessageWithContext:", v8);
}

void *sub_1D15ABAC8(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  v2 = *MEMORY[0x1E0D34870];
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0D34870]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "length");

  if (v4)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v1, "objectForKey:", v2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringWithFormat:", CFSTR("<data of length %lu>"), objc_msgSend(v6, "length"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "setObject:forKey:", v7, v2);
  }
  return v1;
}

void sub_1D15ABBBC()
{
  IMDRelayPushHandler *v0;
  void *v1;

  v0 = objc_alloc_init(IMDRelayPushHandler);
  v1 = (void *)qword_1ED936130;
  qword_1ED936130 = (uint64_t)v0;

}

void sub_1D15ABE7C()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  int v20;
  void *v21;
  void *v22;

  v0 = (void *)MEMORY[0x1D17EA968]();
  v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 140);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E468, v2);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 141);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E4B0, v3);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 143);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E4D0, v4);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 144);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E518, v5);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 146);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E538, v6);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 101);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E558, v7);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 147);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E578, v8);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 102);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E598, v9);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 149);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E5B8, v10);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 142);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E5D8, v11);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 148);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E5F8, v12);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 181);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E618, v13);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 182);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E660, v14);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 145);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E680, v15);

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "isSMSFilterSyncEnabled");

  if (v17)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 139);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setObject:forKey:", &unk_1E922E6A0, v18);

  }
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v19, "isLazuliEnabled");

  if (v20)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 190);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setObject:forKey:", &unk_1E922E6C0, v21);

  }
  v22 = (void *)qword_1ED935FC0;
  qword_1ED935FC0 = (uint64_t)v1;

  objc_autoreleasePoolPop(v0);
}

void sub_1D15AC1D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v12 = a4;
  v13 = a5;
  v26 = a6;
  v27 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayMessage", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Incoming Message", buf, 2u);
    }

  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v25 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_opt_class();
  sub_1D15AC5E8(v23, v13, (void *)qword_1EFC61170);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15AC690;
  v31[3] = &unk_1E922E490;
  v32 = v29;
  v33 = v12;
  v34 = v13;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v22, v24, v30, v31);

  if ((v25 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

id sub_1D15AC5E8(uint64_t a1, void *a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  NSObject *v7;

  v4 = a3;
  objc_msgSend(a2, "objectForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v6 = v5;
  }
  else
  {
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0D36AA8], "registration");
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
        sub_1D166C270();

    }
    v6 = 0;
  }

  return v6;
}

void sub_1D15AC690(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char isKindOfClass;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id obj;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = a2;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v29)
  {
    v28 = *(_QWORD *)v33;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v33 != v28)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v3);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v26 = *(_QWORD *)(a1 + 40);
          v27 = *(_QWORD *)(a1 + 32);
          v5 = objc_opt_class();
          sub_1D15AC5E8(v5, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v10 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v11 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "_IDSDataFromBase64String:", v11);
            v12 = objc_claimAutoreleasedReturnValue();
            v23 = (void *)v12;
            v25 = (void *)v11;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v14 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v12 = objc_claimAutoreleasedReturnValue();
            v30 = (void *)v14;
            v22 = (void *)v12;
LABEL_14:
            v15 = isKindOfClass ^ 1;
          }
          else
          {
            v15 = 0;
            v12 = 0;
            v30 = (void *)v14;
          }
          v16 = objc_opt_class();
          sub_1D15AC5E8(v16, *(void **)(a1 + 48), CFSTR("e"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_opt_class();
          sub_1D15AC5E8(v18, *(void **)(a1 + 48), CFSTR("H"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "handler:incomingPlainTextMessage:toIdentifier:fromIdentifier:fromToken:timeStamp:storageContext:", v27, v26, v31, v7, v12, v17, v19);

          if ((v15 & 1) != 0)
          v20 = v30;
          if ((isKindOfClass & 1) != 0)
          {

            v20 = v25;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingPlainTextMessage_toIdentifier_fromIdentifier_fromToken_timeStamp_storageContext_);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v37 = v21;
          v38 = 2112;
          v39 = v4;
          _os_log_debug_impl(&dword_1D1413000, v13, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v3;
      }
      while (v29 != v3);
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v29);
  }

}

void sub_1D15ACB30(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v12 = a4;
  v13 = a5;
  v26 = a6;
  v27 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayDownloadRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Incoming Downlaod Message", buf, 2u);
    }

  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v25 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_opt_class();
  sub_1D15AC5E8(v23, v13, (void *)qword_1EFC61170);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15ACF40;
  v31[3] = &unk_1E922E490;
  v32 = v29;
  v33 = v12;
  v34 = v13;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v22, v24, v30, v31);

  if ((v25 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15ACF40(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char isKindOfClass;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id obj;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[4];
  void *v37;
  __int16 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  obj = a2;
  v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v29)
  {
    v28 = *(_QWORD *)v33;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v33 != v28)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v3);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v26 = *(_QWORD *)(a1 + 40);
          v27 = *(_QWORD *)(a1 + 32);
          v5 = objc_opt_class();
          sub_1D15AC5E8(v5, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v10 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v11 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "_IDSDataFromBase64String:", v11);
            v12 = objc_claimAutoreleasedReturnValue();
            v23 = (void *)v12;
            v25 = (void *)v11;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v14 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v12 = objc_claimAutoreleasedReturnValue();
            v30 = (void *)v14;
            v22 = (void *)v12;
LABEL_14:
            v15 = isKindOfClass ^ 1;
          }
          else
          {
            v15 = 0;
            v12 = 0;
            v30 = (void *)v14;
          }
          v16 = objc_opt_class();
          sub_1D15AC5E8(v16, *(void **)(a1 + 48), CFSTR("e"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_opt_class();
          sub_1D15AC5E8(v18, *(void **)(a1 + 48), CFSTR("H"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "handler:incomingDownloadMessage:toIdentifier:fromIdentifier:fromToken:timeStamp:storageContext:", v27, v26, v31, v7, v12, v17, v19);

          if ((v15 & 1) != 0)
          v20 = v30;
          if ((isKindOfClass & 1) != 0)
          {

            v20 = v25;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingDownloadMessage_toIdentifier_fromIdentifier_fromToken_timeStamp_storageContext_);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v37 = v21;
          v38 = 2112;
          v39 = v4;
          _os_log_debug_impl(&dword_1D1413000, v13, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v3;
      }
      while (v29 != v3);
      v29 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v29);
  }

}

void sub_1D15AD3E0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  char isKindOfClass;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  char v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  char v38;
  os_activity_scope_state_s state;
  uint8_t buf[16];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a3;
  v33 = a4;
  v16 = a5;
  v30 = a6;
  v31 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v32 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelaySendRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v32, &state);
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Using Block Outgoing Message", buf, 2u);
    }

  }
  v29 = a8;
  objc_msgSend(v16, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v21 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v16, "objectForKey:", CFSTR("U"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "_IDSDataFromBase64String:", v22);
    v23 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v24 = (void *)v23;
    v28 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v16, "objectForKey:", CFSTR("U"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v16, "objectForKey:", CFSTR("U"));
    v23 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v28 = 0;
  v24 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_opt_class();
  sub_1D15AC5E8(v26, v16, (void *)qword_1EFC61170);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = sub_1D15AD828;
  v34[3] = &unk_1E922E4F8;
  v35 = v14;
  v36 = v33;
  v37 = v16;
  v38 = v29;
  objc_msgSend(v35, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v36, v25, v27, v15, v34);

  if ((v28 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15AD828(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  void *v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  char isKindOfClass;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v49;
    v33 = *(_QWORD *)v49;
    do
    {
      v5 = 0;
      v34 = v3;
      do
      {
        if (*(_QWORD *)v49 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v5);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *(_QWORD *)(a1 + 32);
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = objc_opt_class();
          sub_1D15AC5E8(v8, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v9 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "_IDSDataFromBase64String:", v10);
            v43 = objc_claimAutoreleasedReturnValue();
            v32 = (void *)v43;
            v37 = (void *)v10;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v12 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v43 = objc_claimAutoreleasedReturnValue();
            v42 = (void *)v12;
            v30 = (void *)v43;
LABEL_14:
            v38 = isKindOfClass ^ 1;
          }
          else
          {
            v38 = 0;
            v42 = (void *)v12;
            v43 = 0;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v17 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v41 = (void *)v17;
            v29 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v18 = v14 ^ 1;
          }
          else
          {
            v18 = 0;
            v41 = (void *)v17;
          }
          JWUUIDPushObjectToString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_opt_class();
          sub_1D15AC5E8(v20, *(void **)(a1 + 48), CFSTR("e"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = *(unsigned __int8 *)(a1 + 56);
          v23 = objc_opt_class();
          sub_1D15AC5E8(v23, *(void **)(a1 + 48), CFSTR("H"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v28) = v22 != 0;
          objc_msgSend(v6, "handler:outgoingPlainTextMessage:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:isBeingReplayed:storageContext:", v40, v39, v45, v44, v43, v19, v21, v28, v24);

          v4 = v33;
          v3 = v34;

          if ((v18 & 1) != 0)
          v25 = v41;
          if ((v14 & 1) != 0)
          {

            v25 = v36;
          }

          if ((v38 & 1) != 0)
          v26 = v42;
          if ((isKindOfClass & 1) != 0)
          {

            v26 = v37;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_outgoingPlainTextMessage_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_isBeingReplayed_storageContext_);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v53 = v27;
          v54 = 2112;
          v55 = v6;
          _os_log_debug_impl(&dword_1D1413000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
    }
    while (v3);
  }

}

void sub_1D15ADE18(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  char isKindOfClass;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  char v28;
  char v29;
  id v30;
  id v31;
  NSObject *v32;
  id v33;
  _QWORD v34[4];
  id v35;
  id v36;
  id v37;
  char v38;
  os_activity_scope_state_s state;
  uint8_t buf[16];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a3;
  v33 = a4;
  v16 = a5;
  v30 = a6;
  v31 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v32 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelaySendDownloadRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v32, &state);
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Using Block Outgoing Download Message", buf, 2u);
    }

  }
  v29 = a8;
  objc_msgSend(v16, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v21 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v16, "objectForKey:", CFSTR("U"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "_IDSDataFromBase64String:", v22);
    v23 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v24 = (void *)v23;
    v28 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v16, "objectForKey:", CFSTR("U"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v16, "objectForKey:", CFSTR("U"));
    v23 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v28 = 0;
  v24 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = objc_opt_class();
  sub_1D15AC5E8(v26, v16, (void *)qword_1EFC61170);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 3221225472;
  v34[2] = sub_1D15AE260;
  v34[3] = &unk_1E922E4F8;
  v35 = v14;
  v36 = v33;
  v37 = v16;
  v38 = v29;
  objc_msgSend(v35, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v36, v25, v27, v15, v34);

  if ((v28 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15AE260(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  void *v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  char isKindOfClass;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v49;
    v33 = *(_QWORD *)v49;
    do
    {
      v5 = 0;
      v34 = v3;
      do
      {
        if (*(_QWORD *)v49 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * v5);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v39 = *(_QWORD *)(a1 + 40);
          v40 = *(_QWORD *)(a1 + 32);
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = objc_opt_class();
          sub_1D15AC5E8(v8, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v9 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "_IDSDataFromBase64String:", v10);
            v43 = objc_claimAutoreleasedReturnValue();
            v32 = (void *)v43;
            v37 = (void *)v10;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v12 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v43 = objc_claimAutoreleasedReturnValue();
            v42 = (void *)v12;
            v30 = (void *)v43;
LABEL_14:
            v38 = isKindOfClass ^ 1;
          }
          else
          {
            v38 = 0;
            v42 = (void *)v12;
            v43 = 0;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
            v36 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v17 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v41 = (void *)v17;
            v29 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v18 = v14 ^ 1;
          }
          else
          {
            v18 = 0;
            v41 = (void *)v17;
          }
          JWUUIDPushObjectToString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_opt_class();
          sub_1D15AC5E8(v20, *(void **)(a1 + 48), CFSTR("e"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = *(unsigned __int8 *)(a1 + 56);
          v23 = objc_opt_class();
          sub_1D15AC5E8(v23, *(void **)(a1 + 48), CFSTR("H"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          BYTE1(v28) = 0;
          LOBYTE(v28) = v22 != 0;
          objc_msgSend(v6, "handler:outgoingDownloadMessage:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:isBeingReplayed:isInProxyMode:storageContext:", v40, v39, v45, v44, v43, v19, v21, v28, v24);

          v4 = v33;
          v3 = v34;

          if ((v18 & 1) != 0)
          v25 = v41;
          if ((v14 & 1) != 0)
          {

            v25 = v36;
          }

          if ((v38 & 1) != 0)
          v26 = v42;
          if ((isKindOfClass & 1) != 0)
          {

            v26 = v37;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_outgoingDownloadMessage_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_isBeingReplayed_isInProxyMode_storageContext_);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v53 = v27;
          v54 = 2112;
          v55 = v6;
          _os_log_debug_impl(&dword_1D1413000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v48, v56, 16);
    }
    while (v3);
  }

}

void sub_1D15AE854(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v12 = a5;
  v26 = a6;
  v27 = a7;
  v13 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelaySentReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Message Sent Message", buf, 2u);
    }

  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v22 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v22 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v12, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15AEC30;
  v31[3] = &unk_1E9228840;
  v32 = v28;
  v33 = v12;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v30, v23, v25, v29, v31);

  if ((v22 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15AEC30(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v24;
  void *v25;
  id obj;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a2;
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v30)
  {
    v29 = *(_QWORD *)v34;
    *(_QWORD *)&v3 = 138412802;
    v23 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v34 != v29)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v28 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"), v23);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v7 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v8 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "_IDSDataFromBase64String:", v8);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = (void *)v8;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v10 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v31 = (void *)v10;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
            v11 = isKindOfClass ^ 1;
          }
          else
          {
            v11 = 0;
            v31 = (void *)v10;
          }
          JWUUIDPushObjectToString();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_opt_class();
          sub_1D15AC5E8(v13, *(void **)(a1 + 40), (void *)qword_1EFC61168);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_opt_class();
          sub_1D15AC5E8(v15, *(void **)(a1 + 40), (void *)qword_1EFC61170);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_opt_class();
          sub_1D15AC5E8(v17, *(void **)(a1 + 40), CFSTR("e"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_opt_class();
          sub_1D15AC5E8(v19, *(void **)(a1 + 40), CFSTR("H"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:messageIDSent:toIdentifier:fromIdentifier:timeStamp:storageContext:", v28, v12, v14, v16, v18, v20);

          if ((v11 & 1) != 0)
          v21 = v31;
          if ((isKindOfClass & 1) != 0)
          {

            v21 = v27;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_messageIDSent_toIdentifier_fromIdentifier_timeStamp_storageContext_);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v38 = v22;
          v39 = 2112;
          v40 = v5;
          _os_log_debug_impl(&dword_1D1413000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v4;
      }
      while (v30 != v4);
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v30);
  }

}

void sub_1D15AF0D0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v12 = a5;
  v26 = a6;
  v27 = a7;
  v13 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelaySentReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Message Delivered Message", buf, 2u);
    }

  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v22 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v22 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v12, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15AF4AC;
  v31[3] = &unk_1E9228840;
  v32 = v28;
  v33 = v12;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v30, v23, v25, v29, v31);

  if ((v22 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15AF4AC(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v24;
  void *v25;
  id obj;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a2;
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v30)
  {
    v29 = *(_QWORD *)v34;
    *(_QWORD *)&v3 = 138412802;
    v23 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v34 != v29)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v28 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"), v23);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v7 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v8 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "_IDSDataFromBase64String:", v8);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = (void *)v8;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v10 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v31 = (void *)v10;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
            v11 = isKindOfClass ^ 1;
          }
          else
          {
            v11 = 0;
            v31 = (void *)v10;
          }
          JWUUIDPushObjectToString();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_opt_class();
          sub_1D15AC5E8(v13, *(void **)(a1 + 40), (void *)qword_1EFC61168);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_opt_class();
          sub_1D15AC5E8(v15, *(void **)(a1 + 40), (void *)qword_1EFC61170);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_opt_class();
          sub_1D15AC5E8(v17, *(void **)(a1 + 40), CFSTR("e"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_opt_class();
          sub_1D15AC5E8(v19, *(void **)(a1 + 40), CFSTR("H"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:messageIDDelivered:toIdentifier:fromIdentifier:timeStamp:storageContext:", v28, v12, v14, v16, v18, v20);

          if ((v11 & 1) != 0)
          v21 = v31;
          if ((isKindOfClass & 1) != 0)
          {

            v21 = v27;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_messageIDDelivered_toIdentifier_fromIdentifier_timeStamp_storageContext_);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v38 = v22;
          v39 = 2112;
          v40 = v5;
          _os_log_debug_impl(&dword_1D1413000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v4;
      }
      while (v30 != v4);
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v30);
  }

}

void sub_1D15AF94C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v12 = a5;
  v26 = a6;
  v28 = a7;
  v13 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayReadReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Outgoing Read Reciept Message", buf, 2u);
    }

  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"), v26);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v22 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v22 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v12, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = sub_1D15AFD40;
  v32[3] = &unk_1E922E490;
  v33 = v29;
  v34 = v12;
  v35 = v31;
  objc_msgSend(v33, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v35, v23, v25, v30, v32);

  if ((v22 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15AFD40(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id obj;
  void *v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char isKindOfClass;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = a2;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
  if (v37)
  {
    v36 = *(_QWORD *)v46;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v46 != v36)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v3);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v35 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v5 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v6 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "_IDSDataFromBase64String:", v6);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)v6;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v8 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v39 = (void *)v8;
            v27 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
            v34 = isKindOfClass ^ 1;
          }
          else
          {
            v34 = 0;
            v39 = (void *)v8;
          }
          JWUUIDPushObjectToString();
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_opt_class();
          sub_1D15AC5E8(v9, *(void **)(a1 + 40), CFSTR("e"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_opt_class();
          sub_1D15AC5E8(v10, *(void **)(a1 + 40), (void *)qword_1EFC61168);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 40), (void *)qword_1EFC61170);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v17 = objc_claimAutoreleasedReturnValue();
            v29 = (void *)v17;
            v32 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
          v18 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
            v17 = objc_claimAutoreleasedReturnValue();
            v38 = (void *)v18;
            v28 = (void *)v17;
LABEL_20:
            v19 = v14 ^ 1;
          }
          else
          {
            v19 = 0;
            v17 = 0;
            v38 = (void *)v18;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_opt_class();
          sub_1D15AC5E8(v21, *(void **)(a1 + 40), CFSTR("H"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v26) = v20 != 0;
          objc_msgSend(v4, "handler:messageIDRead:readByMe:timeStamp:toIdentifier:fromIdentifier:fromToken:reflectOnly:storageContext:", v35, v42, 1, v41, v40, v12, v17, v26, v22);

          if ((v19 & 1) != 0)
          v23 = v38;
          if ((v14 & 1) != 0)
          {

            v23 = v32;
          }

          if ((v34 & 1) != 0)
          v24 = v39;
          if ((isKindOfClass & 1) != 0)
          {

            v24 = v33;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_messageIDRead_readByMe_timeStamp_toIdentifier_fromIdentifier_fromToken_reflectOnly_storageContext_);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v50 = v25;
          v51 = 2112;
          v52 = v4;
          _os_log_debug_impl(&dword_1D1413000, v7, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v3;
      }
      while (v37 != v3);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
    }
    while (v37);
  }

}

void sub_1D15B0348(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  _QWORD v32[4];
  id v33;
  id v34;
  id v35;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v12 = a5;
  v26 = a6;
  v28 = a7;
  v13 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayReadReceipt", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Incoming Read Reciept Message", buf, 2u);
    }

  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"), v26);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v22 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v22 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v12, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = sub_1D15B073C;
  v32[3] = &unk_1E922E490;
  v33 = v29;
  v34 = v12;
  v35 = v31;
  objc_msgSend(v33, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v35, v23, v25, v30, v32);

  if ((v22 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B073C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id obj;
  void *v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  char isKindOfClass;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint8_t buf[4];
  void *v50;
  __int16 v51;
  void *v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  obj = a2;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
  if (v37)
  {
    v36 = *(_QWORD *)v46;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v46 != v36)
          objc_enumerationMutation(obj);
        v4 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * v3);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v35 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v5 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v6 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v5, "_IDSDataFromBase64String:", v6);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)v6;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v8 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v39 = (void *)v8;
            v27 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
            v34 = isKindOfClass ^ 1;
          }
          else
          {
            v34 = 0;
            v39 = (void *)v8;
          }
          JWUUIDPushObjectToString();
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = objc_opt_class();
          sub_1D15AC5E8(v9, *(void **)(a1 + 40), CFSTR("e"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_opt_class();
          sub_1D15AC5E8(v10, *(void **)(a1 + 40), (void *)qword_1EFC61168);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 40), (void *)qword_1EFC61170);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v17 = objc_claimAutoreleasedReturnValue();
            v29 = (void *)v17;
            v32 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
          v18 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("t"));
            v17 = objc_claimAutoreleasedReturnValue();
            v38 = (void *)v18;
            v28 = (void *)v17;
LABEL_20:
            v19 = v14 ^ 1;
          }
          else
          {
            v19 = 0;
            v17 = 0;
            v38 = (void *)v18;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_opt_class();
          sub_1D15AC5E8(v21, *(void **)(a1 + 40), CFSTR("H"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          LOBYTE(v26) = v20 != 0;
          objc_msgSend(v4, "handler:messageIDRead:readByMe:timeStamp:toIdentifier:fromIdentifier:fromToken:reflectOnly:storageContext:", v35, v42, 0, v41, v40, v12, v17, v26, v22);

          if ((v19 & 1) != 0)
          v23 = v38;
          if ((v14 & 1) != 0)
          {

            v23 = v32;
          }

          if ((v34 & 1) != 0)
          v24 = v39;
          if ((isKindOfClass & 1) != 0)
          {

            v24 = v33;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v7 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_messageIDRead_readByMe_timeStamp_toIdentifier_fromIdentifier_fromToken_reflectOnly_storageContext_);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v50 = v25;
          v51 = 2112;
          v52 = v4;
          _os_log_debug_impl(&dword_1D1413000, v7, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v3;
      }
      while (v37 != v3);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v45, v53, 16);
    }
    while (v37);
  }

}

void sub_1D15B0D44(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = a2;
  v29 = a3;
  v30 = a4;
  v12 = a5;
  v26 = a6;
  v27 = a7;
  v13 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayFailure", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Message Failures Message", buf, 2u);
    }

  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v22 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v12, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v12, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v22 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v12, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B1120;
  v31[3] = &unk_1E9228840;
  v32 = v28;
  v33 = v12;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v30, v23, v25, v29, v31);

  if ((v22 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B1120(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v24;
  void *v25;
  id obj;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  __int16 v39;
  void *v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  obj = a2;
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
  if (v30)
  {
    v29 = *(_QWORD *)v34;
    *(_QWORD *)&v3 = 138412802;
    v23 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v34 != v29)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v28 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"), v23);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v7 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v8 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "_IDSDataFromBase64String:", v8);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            v27 = (void *)v8;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
          v10 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("U"));
            v31 = (void *)v10;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_14:
            v11 = isKindOfClass ^ 1;
          }
          else
          {
            v11 = 0;
            v31 = (void *)v10;
          }
          JWUUIDPushObjectToString();
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_opt_class();
          sub_1D15AC5E8(v13, *(void **)(a1 + 40), (void *)qword_1EFC61168);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_opt_class();
          sub_1D15AC5E8(v15, *(void **)(a1 + 40), (void *)qword_1EFC61170);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_opt_class();
          sub_1D15AC5E8(v17, *(void **)(a1 + 40), CFSTR("e"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_opt_class();
          sub_1D15AC5E8(v19, *(void **)(a1 + 40), CFSTR("H"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:messageIDSendFailure:toIdentifier:fromIdentifier:timeStamp:storageContext:", v28, v12, v14, v16, v18, v20);

          if ((v11 & 1) != 0)
          v21 = v31;
          if ((isKindOfClass & 1) != 0)
          {

            v21 = v27;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_messageIDSendFailure_toIdentifier_fromIdentifier_timeStamp_storageContext_);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v38 = v22;
          v39 = 2112;
          v40 = v5;
          _os_log_debug_impl(&dword_1D1413000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v4;
      }
      while (v30 != v4);
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v33, v41, 16);
    }
    while (v30);
  }

}

void sub_1D15B15C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v12 = a4;
  v13 = a5;
  v26 = a6;
  v27 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayPinCode", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Incomming Display Pin Code ", buf, 2u);
    }

  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v25 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_opt_class();
  sub_1D15AC5E8(v23, v13, (void *)qword_1EFC61170);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B19D0;
  v31[3] = &unk_1E922E490;
  v32 = v29;
  v33 = v12;
  v34 = v13;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v22, v24, v30, v31);

  if ((v25 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B19D0(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  void *v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  char isKindOfClass;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = a2;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  if (v39)
  {
    v38 = *(_QWORD *)v47;
    *(_QWORD *)&v3 = 138412802;
    v27 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v47 != v38)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *(_QWORD *)(a1 + 32);
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v8 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v9 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "_IDSDataFromBase64String:", v9);
            v10 = objc_claimAutoreleasedReturnValue();
            v31 = (void *)v10;
            v34 = (void *)v9;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v12 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            v41 = (void *)v12;
            v29 = (void *)v10;
LABEL_14:
            v35 = isKindOfClass ^ 1;
          }
          else
          {
            v35 = 0;
            v10 = 0;
            v41 = (void *)v12;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v17 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v40 = (void *)v17;
            v28 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v18 = v14 ^ 1;
          }
          else
          {
            v18 = 0;
            v40 = (void *)v17;
          }
          JWUUIDPushObjectToString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_opt_class();
          sub_1D15AC5E8(v20, *(void **)(a1 + 48), CFSTR("e"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_opt_class();
          sub_1D15AC5E8(v22, *(void **)(a1 + 48), CFSTR("H"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:incomingDisplayPinCode:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:storageContext:", v37, v36, v43, v42, v10, v19, v21, v23, v27);

          if ((v18 & 1) != 0)
          v24 = v40;
          if ((v14 & 1) != 0)
          {

            v24 = v33;
          }

          if ((v35 & 1) != 0)
          v25 = v41;
          if ((isKindOfClass & 1) != 0)
          {

            v25 = v34;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingDisplayPinCode_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_storageContext_);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v51 = v26;
          v52 = 2112;
          v53 = v5;
          _os_log_debug_impl(&dword_1D1413000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v4;
      }
      while (v39 != v4);
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
    }
    while (v39);
  }

}

void sub_1D15B1FA8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v12 = a4;
  v13 = a5;
  v26 = a6;
  v27 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayEnrollRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Incomming Enroll Me Request", buf, 2u);
    }

  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v25 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_opt_class();
  sub_1D15AC5E8(v23, v13, (void *)qword_1EFC61170);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B23B8;
  v31[3] = &unk_1E922E490;
  v32 = v29;
  v33 = v12;
  v34 = v13;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v22, v24, v30, v31);

  if ((v25 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B23B8(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  void *v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  char isKindOfClass;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = a2;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  if (v39)
  {
    v38 = *(_QWORD *)v47;
    *(_QWORD *)&v3 = 138412802;
    v27 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v47 != v38)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *(_QWORD *)(a1 + 32);
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v8 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v9 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "_IDSDataFromBase64String:", v9);
            v10 = objc_claimAutoreleasedReturnValue();
            v31 = (void *)v10;
            v34 = (void *)v9;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v12 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            v41 = (void *)v12;
            v29 = (void *)v10;
LABEL_14:
            v35 = isKindOfClass ^ 1;
          }
          else
          {
            v35 = 0;
            v10 = 0;
            v41 = (void *)v12;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v17 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v40 = (void *)v17;
            v28 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v18 = v14 ^ 1;
          }
          else
          {
            v18 = 0;
            v40 = (void *)v17;
          }
          JWUUIDPushObjectToString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_opt_class();
          sub_1D15AC5E8(v20, *(void **)(a1 + 48), CFSTR("e"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_opt_class();
          sub_1D15AC5E8(v22, *(void **)(a1 + 48), CFSTR("H"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:incomingEnrollMeRequest:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:storageContext:", v37, v36, v43, v42, v10, v19, v21, v23, v27);

          if ((v18 & 1) != 0)
          v24 = v40;
          if ((v14 & 1) != 0)
          {

            v24 = v33;
          }

          if ((v35 & 1) != 0)
          v25 = v41;
          if ((isKindOfClass & 1) != 0)
          {

            v25 = v34;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingEnrollMeRequest_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_storageContext_);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v51 = v26;
          v52 = 2112;
          v53 = v5;
          _os_log_debug_impl(&dword_1D1413000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v4;
      }
      while (v39 != v4);
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
    }
    while (v39);
  }

}

void sub_1D15B2990(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  id v35;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v29 = a4;
  v14 = a5;
  v27 = a6;
  v30 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayDeleteRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v14;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "_handleDeleteCommand: %@", buf, 0xCu);
    }

  }
  objc_msgSend(v14, "objectForKey:", CFSTR("U"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v19 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v14, "objectForKey:", CFSTR("U"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "_IDSDataFromBase64String:", v20);
    v21 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v22 = (void *)v21;
    v26 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v14, "objectForKey:", CFSTR("U"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v14, "objectForKey:", CFSTR("U"));
    v21 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v26 = 0;
  v22 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v14, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B2DE8;
  v31[3] = &unk_1E922E640;
  v32 = v12;
  v33 = v29;
  v34 = v14;
  v35 = v30;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v23, v25, v13, v31);

  if ((v26 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B2DE8(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  void *v26;
  void *v27;
  id obj;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = a2;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v40;
    *(_QWORD *)&v3 = 138412802;
    v25 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v40 != v33)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v31 = *(_QWORD *)(a1 + 40);
          v32 = *(_QWORD *)(a1 + 32);
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), CFSTR("tP"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), CFSTR("sP"));
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v9 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "_IDSDataFromBase64String:", v10);
            v11 = objc_claimAutoreleasedReturnValue();
            v27 = (void *)v11;
            v29 = (void *)v10;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v13 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v11 = objc_claimAutoreleasedReturnValue();
            v35 = (void *)v13;
            v26 = (void *)v11;
LABEL_14:
            v30 = isKindOfClass ^ 1;
          }
          else
          {
            v30 = 0;
            v11 = 0;
            v35 = (void *)v13;
          }
          v14 = *(_QWORD *)(a1 + 56);
          v15 = objc_opt_class();
          sub_1D15AC5E8(v15, *(void **)(a1 + 48), CFSTR("e"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_opt_class();
          sub_1D15AC5E8(v17, *(void **)(a1 + 48), CFSTR("D"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_opt_class();
          sub_1D15AC5E8(v19, *(void **)(a1 + 48), CFSTR("Dc"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_opt_class();
          sub_1D15AC5E8(v21, *(void **)(a1 + 48), CFSTR("H"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:fromIDSID:timeStamp:needsDeliveryReceipt:deliveryContext:storageContext:", v32, v31, v37, v36, v11, v14, v16, v18, v20, v22, v25);

          if ((v30 & 1) != 0)
          v23 = v35;
          if ((isKindOfClass & 1) != 0)
          {

            v23 = v29;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_deleteCommand_toIdentifier_fromIdentifier_fromToken_fromIDSID_timeStamp_needsDeliveryReceipt_deliveryContext_storageContext_);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v44 = v24;
          v45 = 2112;
          v46 = v5;
          _os_log_debug_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v4;
      }
      while (v34 != v4);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
    }
    while (v34);
  }

}

void sub_1D15B32EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  char isKindOfClass;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  id v35;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v29 = a4;
  v14 = a5;
  v27 = a6;
  v30 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayDeleteRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v15))
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v38 = v14;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "_handleRecoverCommand: %@", buf, 0xCu);
    }

  }
  objc_msgSend(v14, "objectForKey:", CFSTR("U"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v19 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v14, "objectForKey:", CFSTR("U"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "_IDSDataFromBase64String:", v20);
    v21 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v22 = (void *)v21;
    v26 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v14, "objectForKey:", CFSTR("U"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v14, "objectForKey:", CFSTR("U"));
    v21 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v26 = 0;
  v22 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_opt_class();
  sub_1D15AC5E8(v24, v14, (void *)qword_1EFC61170);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B3744;
  v31[3] = &unk_1E922E640;
  v32 = v12;
  v33 = v29;
  v34 = v14;
  v35 = v30;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v23, v25, v13, v31);

  if ((v26 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B3744(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  void *v26;
  void *v27;
  id obj;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t buf[4];
  void *v44;
  __int16 v45;
  void *v46;
  _BYTE v47[128];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = a2;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v40;
    *(_QWORD *)&v3 = 138412802;
    v25 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v40 != v33)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v31 = *(_QWORD *)(a1 + 40);
          v32 = *(_QWORD *)(a1 + 32);
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), CFSTR("tP"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), CFSTR("sP"));
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v9 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "_IDSDataFromBase64String:", v10);
            v11 = objc_claimAutoreleasedReturnValue();
            v27 = (void *)v11;
            v29 = (void *)v10;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v13 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v11 = objc_claimAutoreleasedReturnValue();
            v35 = (void *)v13;
            v26 = (void *)v11;
LABEL_14:
            v30 = isKindOfClass ^ 1;
          }
          else
          {
            v30 = 0;
            v11 = 0;
            v35 = (void *)v13;
          }
          v14 = *(_QWORD *)(a1 + 56);
          v15 = objc_opt_class();
          sub_1D15AC5E8(v15, *(void **)(a1 + 48), CFSTR("e"));
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_opt_class();
          sub_1D15AC5E8(v17, *(void **)(a1 + 48), CFSTR("D"));
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = objc_opt_class();
          sub_1D15AC5E8(v19, *(void **)(a1 + 48), CFSTR("Dc"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_opt_class();
          sub_1D15AC5E8(v21, *(void **)(a1 + 48), CFSTR("H"));
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:fromIDSID:timeStamp:needsDeliveryReceipt:deliveryContext:storageContext:", v32, v31, v37, v36, v11, v14, v16, v18, v20, v22, v25);

          if ((v30 & 1) != 0)
          v23 = v35;
          if ((isKindOfClass & 1) != 0)
          {

            v23 = v29;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_recoverCommand_toIdentifier_fromIdentifier_fromToken_fromIDSID_timeStamp_needsDeliveryReceipt_deliveryContext_storageContext_);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v44 = v24;
          v45 = 2112;
          v46 = v5;
          _os_log_debug_impl(&dword_1D1413000, v12, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v4;
      }
      while (v34 != v4);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v47, 16);
    }
    while (v34);
  }

}

void sub_1D15B3C48(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v12 = a4;
  v13 = a5;
  v26 = a6;
  v27 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelayPinCodeApproval", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block Incomming pin Code Approval Response", buf, 2u);
    }

  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v25 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_opt_class();
  sub_1D15AC5E8(v23, v13, (void *)qword_1EFC61170);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B4058;
  v31[3] = &unk_1E922E490;
  v32 = v29;
  v33 = v12;
  v34 = v13;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v22, v24, v30, v31);

  if ((v25 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B4058(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  __int128 v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id obj;
  void *v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  char isKindOfClass;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint8_t buf[4];
  void *v51;
  __int16 v52;
  void *v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  obj = a2;
  v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
  if (v39)
  {
    v38 = *(_QWORD *)v47;
    *(_QWORD *)&v3 = 138412802;
    v27 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v47 != v38)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *(_QWORD *)(a1 + 32);
          v6 = objc_opt_class();
          sub_1D15AC5E8(v6, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          v7 = objc_opt_class();
          sub_1D15AC5E8(v7, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v44 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v8 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v9 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "_IDSDataFromBase64String:", v9);
            v10 = objc_claimAutoreleasedReturnValue();
            v31 = (void *)v10;
            v34 = (void *)v9;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v12 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v10 = objc_claimAutoreleasedReturnValue();
            v41 = (void *)v12;
            v29 = (void *)v10;
LABEL_14:
            v35 = isKindOfClass ^ 1;
          }
          else
          {
            v35 = 0;
            v10 = 0;
            v41 = (void *)v12;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            v33 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v17 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v40 = (void *)v17;
            v28 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v18 = v14 ^ 1;
          }
          else
          {
            v18 = 0;
            v40 = (void *)v17;
          }
          JWUUIDPushObjectToString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_opt_class();
          sub_1D15AC5E8(v20, *(void **)(a1 + 48), CFSTR("e"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_opt_class();
          sub_1D15AC5E8(v22, *(void **)(a1 + 48), CFSTR("H"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:incomingResponseForApproval:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:storageContext:", v37, v36, v43, v42, v10, v19, v21, v23, v27);

          if ((v18 & 1) != 0)
          v24 = v40;
          if ((v14 & 1) != 0)
          {

            v24 = v33;
          }

          if ((v35 & 1) != 0)
          v25 = v41;
          if ((isKindOfClass & 1) != 0)
          {

            v25 = v34;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v11 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingResponseForApproval_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_storageContext_);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v51 = v26;
          v52 = 2112;
          v53 = v5;
          _os_log_debug_impl(&dword_1D1413000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v4;
      }
      while (v39 != v4);
      v39 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v46, v54, 16);
    }
    while (v39);
  }

}

void sub_1D15B4630(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  char isKindOfClass;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char v25;
  id v26;
  id v27;
  NSObject *v28;
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  id v34;
  os_activity_scope_state_s state;
  uint8_t buf[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v29 = a2;
  v30 = a3;
  v12 = a4;
  v13 = a5;
  v26 = a6;
  v27 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.SMSReceivedRelaySMSFilteringSettings", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v28, &state);
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Using Block SMS Filtering Settings", buf, 2u);
    }

  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  if ((isKindOfClass & 1) != 0)
  {
    v18 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "_IDSDataFromBase64String:", v19);
    v20 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v21 = (void *)v20;
    v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  objc_msgSend(v13, "objectForKey:", CFSTR("U"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v13, "objectForKey:", CFSTR("U"));
    v20 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v25 = 0;
  v21 = 0;
LABEL_11:
  JWUUIDPushObjectToString();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_opt_class();
  sub_1D15AC5E8(v23, v13, (void *)qword_1EFC61170);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = sub_1D15B4A40;
  v31[3] = &unk_1E922E490;
  v32 = v29;
  v33 = v12;
  v34 = v13;
  objc_msgSend(v32, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v33, v22, v24, v30, v31);

  if ((v25 & 1) != 0)
  if ((isKindOfClass & 1) != 0)

  os_activity_scope_leave(&state);
}

void sub_1D15B4A40(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char isKindOfClass;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  char v17;
  void *v18;
  void *v19;
  __int128 v20;
  void *v21;
  void *v22;
  id obj;
  void *v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  __int16 v33;
  void *v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v3)
  {
    v25 = *(_QWORD *)v28;
    *(_QWORD *)&v4 = 138412802;
    v20 = v4;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v28 != v25)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v5);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v7 = v3;
          v8 = *(_QWORD *)(a1 + 32);
          v9 = *(_QWORD *)(a1 + 40);
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"), v20);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v12 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v13 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "_IDSDataFromBase64String:", v13);
            v14 = objc_claimAutoreleasedReturnValue();
            v22 = (void *)v14;
            v24 = (void *)v13;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v16 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v14 = objc_claimAutoreleasedReturnValue();
            v26 = (void *)v16;
            v21 = (void *)v14;
LABEL_14:
            v17 = isKindOfClass ^ 1;
          }
          else
          {
            v17 = 0;
            v14 = 0;
            v26 = (void *)v16;
          }
          objc_msgSend(v6, "handler:incomingSMSFilteringSettingsMessage:fromToken:", v8, v9, v14);
          v3 = v7;
          if ((v17 & 1) != 0)

          v18 = v26;
          if ((isKindOfClass & 1) != 0)
          {

            v18 = v24;
          }

          goto LABEL_21;
        }
        IMLogHandleForCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingSMSFilteringSettingsMessage_fromToken_);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v32 = v19;
          v33 = 2112;
          v34 = v6;
          _os_log_debug_impl(&dword_1D1413000, v15, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_21:
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v3);
  }

}

void sub_1D15B4E28(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  void *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char isKindOfClass;
  void *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  void *v36;
  char v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  NSObject *v55;
  void *v56;
  NSObject *v57;
  void *v58;
  char v59;
  char v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  _QWORD v67[4];
  id v68;
  NSObject *v69;
  id v70;
  id v71;
  _QWORD v72[4];
  id v73;
  NSObject *v74;
  id v75;
  id v76;
  os_activity_scope_state_s state;
  id v78;
  uint8_t buf[16];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v64 = a2;
  v63 = a3;
  v12 = a4;
  v66 = a5;
  v61 = a6;
  v62 = a7;
  objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("C"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_5:
    objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("D"));
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    v78 = 0;
    +[IMDRelayGroupMutationMessage mutationMessageFromData:error:](IMDRelayGroupMutationMessage, "mutationMessageFromData:error:", v65, &v78);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = v78;
    if (v16 || !v15)
    {
      v17 = v15;
      v15 = v16;
LABEL_33:

      goto LABEL_34;
    }
    v17 = _os_activity_create(&dword_1D1413000, "com.apple.messages.ReceivedRelayGroupMutation", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v17, &state);
    if (IMOSLoggingEnabled(v18))
    {
      OSLogHandleForIMFoundationCategory();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Using Block relay group mutation", buf, 2u);
      }

    }
    -[NSObject service](v15, "service");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v64, "_handlerForServiceName:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
LABEL_32:

      os_activity_scope_leave(&state);
      goto LABEL_33;
    }
    v22 = objc_opt_class();
    sub_1D15AC5E8(v22, v66, CFSTR("e"));
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_opt_class();
    sub_1D15AC5E8(v23, v66, CFSTR("H"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v66, "objectForKey:", CFSTR("t"));
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    if ((isKindOfClass & 1) != 0)
    {
      v25 = (void *)MEMORY[0x1E0C99D50];
      objc_msgSend(v66, "objectForKey:", CFSTR("t"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "_IDSDataFromBase64String:", v26);
      v27 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v66, "objectForKey:", CFSTR("t"));
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v42 = 0;
        v41 = 0;
        goto LABEL_27;
      }
      objc_msgSend(v66, "objectForKey:", CFSTR("t"));
      v27 = objc_claimAutoreleasedReturnValue();
    }
    v41 = (void *)v27;
    v42 = isKindOfClass ^ 1;
LABEL_27:
    v43 = objc_opt_class();
    sub_1D15AC5E8(v43, v66, (void *)qword_1EFC61170);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v53) = 0;
    objc_msgSend(v21, "handler:incomingGroupMutationMessage:timeStamp:storageContext:fromToken:fromID:isInProxyMode:", v64, v15, v56, v54, v41, v44, v53);

    if ((v42 & 1) != 0)
    if ((isKindOfClass & 1) != 0)

    goto LABEL_32;
  }
  v14 = objc_msgSend(v13, "intValue");
  switch(v14)
  {
    case 2:
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("D"));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v71 = 0;
      +[IMDRelayServiceReachabilityResponse responseFromData:error:](IMDRelayServiceReachabilityResponse, "responseFromData:error:", v65, &v71);
      v17 = objc_claimAutoreleasedReturnValue();
      v15 = v71;
      if (v15 || !v17)
        goto LABEL_33;
      v34 = v17;
      v35 = _os_activity_create(&dword_1D1413000, "com.apple.messages.RelayReachabilityResponse", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      v57 = v35;
      os_activity_scope_enter(v35, &state);
      objc_msgSend(v66, "objectForKey:", CFSTR("U"));
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      v37 = objc_opt_isKindOfClass();
      if ((v37 & 1) != 0)
      {
        v38 = (void *)MEMORY[0x1E0C99D50];
        objc_msgSend(v66, "objectForKey:", CFSTR("U"));
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "_IDSDataFromBase64String:", v39);
        v40 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(v66, "objectForKey:", CFSTR("U"));
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v60 = 0;
          v46 = 0;
          goto LABEL_48;
        }
        objc_msgSend(v66, "objectForKey:", CFSTR("U"));
        v40 = objc_claimAutoreleasedReturnValue();
      }
      v46 = (void *)v40;
      v60 = v37 ^ 1;
LABEL_48:
      JWUUIDPushObjectToString();
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      v51 = objc_opt_class();
      sub_1D15AC5E8(v51, v66, (void *)qword_1EFC61170);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v67[0] = MEMORY[0x1E0C809B0];
      v67[1] = 3221225472;
      v67[2] = sub_1D15B5D30;
      v67[3] = &unk_1E922E490;
      v68 = v64;
      v15 = v34;
      v69 = v15;
      v70 = v66;
      objc_msgSend(v68, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v12, v50, v52, v63, v67);

      if ((v60 & 1) != 0)
      if ((v37 & 1) != 0)

      os_activity_scope_leave(&state);
      v17 = v57;
      goto LABEL_33;
    case 1:
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("D"));
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      v76 = 0;
      +[IMDRelayServiceReachabilityRequest requestFromData:error:](IMDRelayServiceReachabilityRequest, "requestFromData:error:", v65, &v76);
      v17 = objc_claimAutoreleasedReturnValue();
      v15 = v76;
      if (v15 || !v17)
        goto LABEL_33;
      v28 = _os_activity_create(&dword_1D1413000, "com.apple.messages.RelayReachabilityRequest", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      v55 = v28;
      os_activity_scope_enter(v28, &state);
      objc_msgSend(v66, "objectForKey:", CFSTR("U"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_opt_class();
      v30 = objc_opt_isKindOfClass();
      if ((v30 & 1) != 0)
      {
        v31 = (void *)MEMORY[0x1E0C99D50];
        objc_msgSend(v66, "objectForKey:", CFSTR("U"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "_IDSDataFromBase64String:", v32);
        v33 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend(v66, "objectForKey:", CFSTR("U"));
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v59 = 0;
          v45 = 0;
          goto LABEL_42;
        }
        objc_msgSend(v66, "objectForKey:", CFSTR("U"));
        v33 = objc_claimAutoreleasedReturnValue();
      }
      v45 = (void *)v33;
      v59 = v30 ^ 1;
LABEL_42:
      JWUUIDPushObjectToString();
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = objc_opt_class();
      sub_1D15AC5E8(v48, v66, (void *)qword_1EFC61170);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 3221225472;
      v72[2] = sub_1D15B57B4;
      v72[3] = &unk_1E922E490;
      v73 = v64;
      v15 = v17;
      v74 = v15;
      v75 = v66;
      objc_msgSend(v73, "_calculateHandlersForMessage:messageGUID:fromIdentifier:command:completionBlock:", v12, v47, v49, v63, v72);

      if ((v59 & 1) != 0)
      if ((v30 & 1) != 0)

      os_activity_scope_leave(&state);
      v17 = v55;
      goto LABEL_33;
    case 0:
      goto LABEL_5;
  }
LABEL_34:

}

void sub_1D15B57B4(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  __int128 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id obj;
  void *v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  char isKindOfClass;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = a2;
  v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
  if (v37)
  {
    v36 = *(_QWORD *)v43;
    *(_QWORD *)&v3 = 138412802;
    v25 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v43 != v36)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v34 = *(_QWORD *)(a1 + 40);
          v35 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"), v25);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v6 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v7 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "_IDSDataFromBase64String:", v7);
            v8 = objc_claimAutoreleasedReturnValue();
            v29 = (void *)v8;
            v32 = (void *)v7;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v10 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v8 = objc_claimAutoreleasedReturnValue();
            v39 = (void *)v10;
            v26 = (void *)v8;
LABEL_14:
            v33 = isKindOfClass ^ 1;
          }
          else
          {
            v33 = 0;
            v8 = 0;
            v39 = (void *)v10;
          }
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), (void *)qword_1EFC61170);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_opt_class();
          sub_1D15AC5E8(v13, *(void **)(a1 + 48), (void *)qword_1EFC61168);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v16 = objc_opt_isKindOfClass();
          if ((v16 & 1) != 0)
          {
            v17 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v18 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "_IDSDataFromBase64String:", v18);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            v31 = (void *)v18;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v19 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v38 = (void *)v19;
            v27 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v20 = v16 ^ 1;
          }
          else
          {
            v20 = 0;
            v38 = (void *)v19;
          }
          JWUUIDPushObjectToString();
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:incomingReachabilityRequest:fromToken:fromIdentifier:toIdentifier:messageGUID:", v35, v34, v8, v12, v14, v21);

          if ((v20 & 1) != 0)
          v22 = v38;
          if ((v16 & 1) != 0)
          {

            v22 = v31;
          }

          if ((v33 & 1) != 0)
          v23 = v39;
          if ((isKindOfClass & 1) != 0)
          {

            v23 = v32;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingReachabilityRequest_fromToken_fromIdentifier_toIdentifier_messageGUID_);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v47 = v24;
          v48 = 2112;
          v49 = v5;
          _os_log_debug_impl(&dword_1D1413000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v4;
      }
      while (v37 != v4);
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v50, 16);
    }
    while (v37);
  }

}

void sub_1D15B5D30(uint64_t a1, void *a2)
{
  __int128 v3;
  uint64_t v4;
  void *v5;
  char isKindOfClass;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id obj;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint8_t buf[4];
  void *v43;
  __int16 v44;
  void *v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = a2;
  v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
  if (v34)
  {
    v33 = *(_QWORD *)v39;
    *(_QWORD *)&v3 = 138412802;
    v23 = v3;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v39 != v33)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v4);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v31 = *(_QWORD *)(a1 + 40);
          v32 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"), v23);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          if ((isKindOfClass & 1) != 0)
          {
            v7 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v8 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "_IDSDataFromBase64String:", v8);
            v9 = objc_claimAutoreleasedReturnValue();
            v27 = (void *)v9;
            v30 = (void *)v8;
            goto LABEL_14;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
          v11 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("t"));
            v9 = objc_claimAutoreleasedReturnValue();
            v36 = (void *)v11;
            v25 = (void *)v9;
LABEL_14:
            v12 = isKindOfClass ^ 1;
          }
          else
          {
            v12 = 0;
            v9 = 0;
            v36 = (void *)v11;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          v14 = objc_opt_isKindOfClass();
          if ((v14 & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99D50];
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v16 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "_IDSDataFromBase64String:", v16);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v29 = (void *)v16;
            goto LABEL_20;
          }
          objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
          v17 = objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(*(id *)(a1 + 48), "objectForKey:", CFSTR("U"));
            v35 = (void *)v17;
            v24 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            v18 = v14 ^ 1;
          }
          else
          {
            v18 = 0;
            v35 = (void *)v17;
          }
          JWUUIDPushObjectToString();
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "handler:incomingReachabilityResponse:fromToken:messageGUID:", v32, v31, v9, v19);

          if ((v18 & 1) != 0)
          v20 = v35;
          if ((v14 & 1) != 0)
          {

            v20 = v29;
          }

          if ((v12 & 1) != 0)
          v21 = v36;
          if ((isKindOfClass & 1) != 0)
          {

            v21 = v30;
          }

          goto LABEL_31;
        }
        IMLogHandleForCategory();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          NSStringFromSelector(sel_handler_incomingReachabilityResponse_fromToken_messageGUID_);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412546;
          v43 = v22;
          v44 = 2112;
          v45 = v5;
          _os_log_debug_impl(&dword_1D1413000, v10, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);

        }
LABEL_31:
        ++v4;
      }
      while (v34 != v4);
      v34 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
    }
    while (v34);
  }

}

void sub_1D15B6280()
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)MEMORY[0x1D17EA968]();
  v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E700, IMDRelayLocalMessageTypeIncomingTextMessage);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E720, IMDRelayLocalMessageTypeOutgoing);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E740, IMDRelayLocalMessageTypeOutgoingDownload);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E760, IMDRelayLocalMessageTypeIncomingDownloadMessage);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E780, IMDRelayLocalMessageTypeSent);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E7A0, IMDRelayLocalMessageTypeRead);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E7C0, IMDRelayLocalMessageTypeRemoteRead);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E7E0, IMDRelayLocalMessageTypeError);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E800, IMDRelayLocalMessageTypeRemoteFileRequest);
  objc_msgSend(v1, "setObject:forKey:", &unk_1E922E820, IMDRelayLocalMessageTypeRemoteFileResponse);
  v2 = (void *)qword_1EFC63E90;
  qword_1EFC63E90 = (uint64_t)v1;

  objc_autoreleasePoolPop(v0);
}

void sub_1D15B63D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D15B65E0;
  v21[3] = &unk_1E922E490;
  v18 = v12;
  v22 = v18;
  v19 = v14;
  v23 = v19;
  v20 = v15;
  v24 = v20;
  objc_msgSend(v18, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v19, v20, v21);

}

void sub_1D15B651C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  NSObject *v18;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local incoming dl push: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D15B64C8);
  }
  _Unwind_Resume(a1);
}

void sub_1D15B65E0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v15;
    *(_QWORD *)&v5 = 138412802;
    v13 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v10 = *(_QWORD *)(a1 + 32);
          v9 = *(_QWORD *)(a1 + 40);
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "handler:localIncommingMessage:storageContext:", v10, v9, v12, v13, (_QWORD)v14);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_1D15B6830(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = sub_1D15B6A40;
  v23[3] = &unk_1E922E4F8;
  v20 = v14;
  v24 = v20;
  v21 = v16;
  v25 = v21;
  v27 = a8;
  v22 = v17;
  v26 = v22;
  objc_msgSend(v20, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v21, v22, v23);

}

void sub_1D15B697C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  NSObject *v18;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local outgoing push: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D15B6928);
  }
  _Unwind_Resume(a1);
}

void sub_1D15B6A40(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v16;
    *(_QWORD *)&v4 = 138412802;
    v13 = v4;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v6);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v9 = *(_QWORD *)(a1 + 32);
          v8 = *(_QWORD *)(a1 + 40);
          v10 = *(unsigned __int8 *)(a1 + 56);
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "handler:localOutgoingMessage:isBeingReplayed:storageContext:", v9, v8, v10 != 0, v12, v13);

        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);
  }

}

void sub_1D15B6CA4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  char v28;
  uint8_t buf[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  if (IMOSLoggingEnabled(v19))
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Using outDownloadMessageBlock", buf, 2u);
    }

  }
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = sub_1D15B6F24;
  v24[3] = &unk_1E922E4F8;
  v21 = v14;
  v25 = v21;
  v22 = v16;
  v26 = v22;
  v28 = a8;
  v23 = v17;
  v27 = v23;
  objc_msgSend(v21, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v22, v23, v24);

}

void sub_1D15B6F24(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  id obj;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v16;
    *(_QWORD *)&v4 = 138412802;
    v13 = v4;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v6);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v9 = *(_QWORD *)(a1 + 32);
          v8 = *(_QWORD *)(a1 + 40);
          v10 = *(unsigned __int8 *)(a1 + 56);
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "handler:localOutgoingDownloadMessage:isBeingReplayed:storageContext:", v9, v8, v10 != 0, v12, v13);

        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v3);
  }

}

void sub_1D15B7188(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Using localIncomingDownloadMessageBlock", buf, 2u);
    }

  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1D15B7400;
  v22[3] = &unk_1E922E490;
  v19 = v12;
  v23 = v19;
  v20 = v14;
  v24 = v20;
  v21 = v15;
  v25 = v21;
  objc_msgSend(v19, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v20, v21, v22);

}

void sub_1D15B7400(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v15;
    *(_QWORD *)&v5 = 138412802;
    v13 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v10 = *(_QWORD *)(a1 + 32);
          v9 = *(_QWORD *)(a1 + 40);
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "handler:localIncomingDownloadMessage:storageContext:", v10, v9, v12, v13, (_QWORD)v14);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_1D15B7650(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D15B7858;
  v21[3] = &unk_1E922E490;
  v18 = v12;
  v22 = v18;
  v19 = v14;
  v23 = v19;
  v20 = v15;
  v24 = v20;
  objc_msgSend(v18, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v19, v20, v21);

}

void sub_1D15B7794(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  NSObject *v18;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local sent message push: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D15B7740);
  }
  _Unwind_Resume(a1);
}

void sub_1D15B7858(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v15;
    *(_QWORD *)&v5 = 138412802;
    v13 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v9 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v13, (_QWORD)v14);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "handler:localMessageSent:storageContext:", v9, v10, v12);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_1D15B7AC4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D15B7CCC;
  v21[3] = &unk_1E922E490;
  v18 = v12;
  v22 = v18;
  v19 = v14;
  v23 = v19;
  v20 = v15;
  v24 = v20;
  objc_msgSend(v18, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v19, v20, v21);

}

void sub_1D15B7C08(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  NSObject *v18;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local message read push: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D15B7BB4);
  }
  _Unwind_Resume(a1);
}

void sub_1D15B7CCC(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v17;
    *(_QWORD *)&v4 = 138412802;
    v14 = v4;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v6);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v8 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v14);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_opt_class();
          sub_1D15AC5E8(v10, *(void **)(a1 + 48), CFSTR("e"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_opt_class();
          sub_1D15AC5E8(v12, *(void **)(a1 + 48), CFSTR("H"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "handler:localMessageRead:readByMe:timeStamp:storageContext:", v8, v9, 1, v11, v13);

        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v3);
  }

}

void sub_1D15B7F70(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D15B8178;
  v21[3] = &unk_1E922E490;
  v18 = v12;
  v22 = v18;
  v19 = v14;
  v23 = v19;
  v20 = v15;
  v24 = v20;
  objc_msgSend(v18, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v19, v20, v21);

}

void sub_1D15B80B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  NSObject *v18;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local message read push: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D15B8060);
  }
  _Unwind_Resume(a1);
}

void sub_1D15B8178(uint64_t a1, void *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = a2;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v17;
    *(_QWORD *)&v4 = 138412802;
    v14 = v4;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v6);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v8 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v14);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = objc_opt_class();
          sub_1D15AC5E8(v10, *(void **)(a1 + 48), CFSTR("e"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_opt_class();
          sub_1D15AC5E8(v12, *(void **)(a1 + 48), CFSTR("H"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v7, "handler:localMessageRead:readByMe:timeStamp:storageContext:", v8, v9, 0, v11, v13);

        }
        ++v6;
      }
      while (v3 != v6);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v3);
  }

}

void sub_1D15B841C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 3221225472;
  v21[2] = sub_1D15B8624;
  v21[3] = &unk_1E922E490;
  v18 = v12;
  v22 = v18;
  v19 = v14;
  v23 = v19;
  v20 = v15;
  v24 = v20;
  objc_msgSend(v18, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v19, v20, v21);

}

void sub_1D15B8560(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  id v17;
  NSObject *v18;

  if (a2 == 1)
  {
    v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Exception handling incoming local message error push: %@", (uint8_t *)&buf, 0xCu);
      }

    }
    objc_end_catch();
    JUMPOUT(0x1D15B850CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D15B8624(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v15;
    *(_QWORD *)&v5 = 138412802;
    v13 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v9 = *(_QWORD *)(a1 + 32);
          objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v13, (_QWORD)v14);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "handler:localMessageError:storageContext:", v9, v10, v12);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_1D15B8890(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Using block local remote file request", buf, 2u);
    }

  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1D15B8B08;
  v22[3] = &unk_1E922E490;
  v19 = v12;
  v23 = v19;
  v20 = v14;
  v24 = v20;
  v21 = v15;
  v25 = v21;
  objc_msgSend(v19, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v20, v21, v22);

}

void sub_1D15B8B08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v15;
    *(_QWORD *)&v5 = 138412802;
    v13 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v10 = *(_QWORD *)(a1 + 32);
          v9 = *(_QWORD *)(a1 + 40);
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "handler:localFileRequest:storageContext:", v10, v9, v12, v13, (_QWORD)v14);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_1D15B8D58(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  _QWORD v22[4];
  id v23;
  id v24;
  id v25;
  uint8_t buf[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (IMOSLoggingEnabled(v17))
  {
    OSLogHandleForIMFoundationCategory();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Using block local remote file response", buf, 2u);
    }

  }
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = sub_1D15B8FD0;
  v22[3] = &unk_1E922E490;
  v19 = v12;
  v23 = v19;
  v20 = v14;
  v24 = v20;
  v21 = v15;
  v25 = v21;
  objc_msgSend(v19, "_calculateHandlersForLocalMessage:userInfo:completionBlock:", v20, v21, v22);

}

void sub_1D15B8FD0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v3 = a2;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v15;
    *(_QWORD *)&v5 = 138412802;
    v13 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * v7);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v10 = *(_QWORD *)(a1 + 32);
          v9 = *(_QWORD *)(a1 + 40);
          v11 = objc_opt_class();
          sub_1D15AC5E8(v11, *(void **)(a1 + 48), CFSTR("H"));
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v8, "handler:localFileResponse:storageContext:", v10, v9, v12, v13, (_QWORD)v14);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v4);
  }

}

void sub_1D15BB548()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[4];
  _QWORD v3[5];

  v3[4] = *MEMORY[0x1E0C80C00];
  v2[0] = IMDRelayLocalMessageTypeOutgoing;
  v2[1] = IMDRelayLocalMessageTypeOutgoingDownload;
  v3[0] = IMDRelayLocalMessageDictionaryOutgoingDictKey;
  v3[1] = IMDRelayLocalMessageDictionaryOutgoingDictKey;
  v2[2] = IMDRelayLocalMessageTypeIncomingTextMessage;
  v2[3] = IMDRelayLocalMessageTypeIncomingDownloadMessage;
  v3[2] = IMDRelayLocalMessageDictionaryIncomingDictKey;
  v3[3] = IMDRelayLocalMessageDictionaryIncomingDictKey;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 4);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EFC63EA0;
  qword_1EFC63EA0 = v0;

}

void sub_1D15BC044(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!objc_msgSend(v3, "count"))
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v4 = *(id *)(a1 + 32);
    v9 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v19;
LABEL_13:
      v12 = 0;
      v13 = v3;
      while (1)
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 40), "_cachedListenersForGUID:", *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * v12));
        v3 = (id)objc_claimAutoreleasedReturnValue();

        if (objc_msgSend(v3, "count"))
          break;
        ++v12;
        v13 = v3;
        if (v10 == v12)
        {
          v10 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
          if (v10)
            goto LABEL_13;
          goto LABEL_19;
        }
      }
    }
    goto LABEL_19;
  }
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = *(id *)(a1 + 32);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(a1 + 40), "_cacheListeners:forGUID:", v3, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i), (_QWORD)v14);
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v22, 16);
      }
      while (v6);
    }
LABEL_19:

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

uint64_t sub_1D15BC21C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "objectForKey:", IMDRelayMessageDictionaryRecipientIDKey);
}

void sub_1D15BC230(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  void *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  id v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (void *)a1[4];
  objc_msgSend(v3, "bestResult");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "service");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "_handlerForServiceName:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    v18[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v18, 1);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
  }
  else
  {
    v9 = 0;
  }
  if (IMOSLoggingEnabled(v8))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = a1[5];
      v12 = 138412803;
      v13 = v7;
      v14 = 2117;
      v15 = v11;
      v16 = 2112;
      v17 = v3;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Routing outgoing payload to %@ as it is the most optimal path. payload=%{sensitive}@ reachability results=%@", (uint8_t *)&v12, 0x20u);
    }

  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_1D15BC614()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];
  _QWORD v5[2];
  _QWORD v6[10];
  _QWORD v7[11];

  v7[10] = *MEMORY[0x1E0C80C00];
  v6[0] = IMDRelayLocalMessageTypeIncomingTextMessage;
  v6[1] = IMDRelayLocalMessageTypeIncomingDownloadMessage;
  v7[0] = &unk_1E92716E0;
  v7[1] = &unk_1E92716E0;
  v6[2] = IMDRelayLocalMessageTypeOutgoing;
  v6[3] = IMDRelayLocalMessageTypeOutgoingDownload;
  v7[2] = &unk_1E92716E0;
  v7[3] = &unk_1E92716E0;
  v6[4] = IMDRelayLocalMessageTypeSent;
  v6[5] = IMDRelayLocalMessageTypeRead;
  v7[4] = &unk_1E92716F8;
  v7[5] = &unk_1E92716F8;
  v6[6] = IMDRelayLocalMessageTypeRemoteRead;
  v6[7] = IMDRelayLocalMessageTypeError;
  v7[6] = &unk_1E92716F8;
  v7[7] = &unk_1E92716F8;
  v6[8] = IMDRelayLocalMessageTypeDelivered;
  v6[9] = IMDRelayLocalMessageTypeRemoteFileRequest;
  v7[8] = &unk_1E92716F8;
  v7[9] = &unk_1E92716F8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 10);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EFC63EB0;
  qword_1EFC63EB0 = v0;

  v4[0] = IMDRelayLocalMessageTypeOutgoing;
  v4[1] = IMDRelayLocalMessageTypeOutgoingDownload;
  v5[0] = &unk_1E9271710;
  v5[1] = &unk_1E9271710;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1EFC63EB8;
  qword_1EFC63EB8 = v2;

}

void sub_1D15BC870()
{
  uint64_t v0;
  void *v1;
  _QWORD v2[5];
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v2[0] = IMDRelayLocalMessageTypeSent;
  v2[1] = IMDRelayLocalMessageTypeIncomingTextMessage;
  v3[0] = &unk_1E9271728;
  v3[1] = &unk_1E9271740;
  v2[2] = IMDRelayLocalMessageTypeOutgoing;
  v2[3] = IMDRelayLocalMessageTypeIncomingDownloadMessage;
  v3[2] = &unk_1E9271740;
  v3[3] = &unk_1E9271740;
  v2[4] = IMDRelayLocalMessageTypeOutgoingDownload;
  v3[4] = &unk_1E9271740;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 5);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1EFC63EC8;
  qword_1EFC63EC8 = v0;

}

void sub_1D15BCA30(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void (**v15)(id, void *, uint64_t, _QWORD, double, double);
  void *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  char v21;
  NSObject *v22;
  int v23;
  const __CFString *v24;
  const __CFString *v25;
  const __CFString *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  __CFString *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  uint64_t v38;
  void *v39;
  id v40;
  __CFString *v41;
  void *v42;
  void *v43;
  _QWORD v44[4];
  __CFString *v45;
  uint64_t *v46;
  uint64_t *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void (*v53)(uint64_t);
  id v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint8_t v62[16];
  __int128 v63;
  uint64_t v64;
  _BYTE buf[24];
  const __CFString *v66;
  _BYTE v67[20];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  objc_msgSend(v11, "filename");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  IMUTITypeForFilename();
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  v18 = IMIsSupportedUTIType();
  v19 = objc_msgSend(v11, "isFromMomentShare");
  v59 = 0u;
  v60 = 0u;
  IMClientPreviewConstraints();
  v61 = objc_msgSend(v11, "isSticker");
  v20 = objc_msgSend(v11, "isAdaptiveImageGlyph");
  BYTE2(v61) = v20;
  BYTE1(v61) = 1;
  if (!v18
    || (*(double *)&v59 <= 0.0 ? (v21 = 1) : (v21 = v19),
        (v21 & 1) != 0 || (v20 = objc_msgSend(v11, "isAuxVideo", *(double *)&v59), (v20 & 1) != 0)))
  {
    if (IMOSLoggingEnabled(v20))
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v23 = objc_msgSend(v11, "isAuxVideo");
        v24 = CFSTR("NO");
        if (v19)
          v25 = CFSTR("YES");
        else
          v25 = CFSTR("NO");
        if (v18)
          v26 = CFSTR("YES");
        else
          v26 = CFSTR("NO");
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v26;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v25;
        if (v23)
          v24 = CFSTR("YES");
        *(_WORD *)&buf[22] = 2112;
        v66 = v24;
        _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Not pregenerating preview, utiSupported %@ isCMM %@ aux Video %@, calling completion directly", buf, 0x20u);
      }

    }
    objc_msgSend(v11, "guid");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v15[2](v15, v27, 1, 0, 0.0, 0.0);
  }
  else
  {
    IMPreviewExtension();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v11, "isSticker"))
    {
      objc_msgSend(v11, "stickerUserInfo");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "isAdaptiveImageGlyph");
      IMSharedHelperCachePathForStickerWithProperties();
      v43 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      objc_msgSend(v11, "guid");
      objc_msgSend(v11, "filename");
      objc_msgSend(v11, "mimeType");
      v43 = (void *)IMDCopyAttachmentPersistentPath();
    }
    if (objc_msgSend(v43, "length"))
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v43);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v11, "isAdaptiveImageGlyph"))
        IMAttachmentEmojiImagePreviewFileURL();
      else
        IMAttachmentPreviewFileURL();
      v41 = (__CFString *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v12);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = IMOSLoggingEnabled(v39);
      if ((_DWORD)v30)
      {
        OSLogHandleForIMFoundationCategory();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138413314;
          *(_QWORD *)&buf[4] = v39;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v42;
          *(_WORD *)&buf[22] = 2112;
          v66 = v41;
          *(_WORD *)v67 = 2048;
          *(_QWORD *)&v67[2] = v59;
          *(_WORD *)&v67[10] = 2048;
          *(_QWORD *)&v67[12] = *((_QWORD *)&v60 + 1);
          _os_log_impl(&dword_1D1413000, v31, OS_LOG_TYPE_INFO, "Generating preview OOP with tmpURL %@ finalURL %@ previewURL %@ maxWidth %f scale %f", buf, 0x34u);
        }

      }
      if (v41)
      {
        v40 = objc_alloc_init(MEMORY[0x1E0D39B58]);
        objc_msgSend(v40, "emitPreviewGenerationBeginFromUTI:", v17);
        v55 = 0;
        v56 = &v55;
        v57 = 0x2020000000;
        v58 = 0;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3010000000;
        *(_QWORD *)v67 = 0;
        *(_QWORD *)&v67[8] = 0;
        v66 = (const __CFString *)&unk_1D1714829;
        v49 = 0;
        v50 = &v49;
        v51 = 0x3032000000;
        v52 = sub_1D15BD204;
        v53 = sub_1D15BD214;
        v54 = 0;
        objc_msgSend(MEMORY[0x1E0D39CC0], "sharedInstance");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v44[0] = MEMORY[0x1E0C809B0];
        v44[1] = 3221225472;
        v44[2] = sub_1D15BD21C;
        v44[3] = &unk_1E922E918;
        v46 = &v55;
        v47 = &v49;
        v33 = v41;
        v45 = v33;
        v48 = buf;
        *(_OWORD *)v62 = v59;
        v63 = v60;
        v64 = v61;
        LOBYTE(v38) = 1;
        objc_msgSend(v32, "generatePreview:previewURL:senderContext:constraints:balloonBundleID:completionBlock:blockUntilReply:", v39, v33, v14, v62, v13, v44, v38);

        if (IMOSLoggingEnabled(objc_msgSend(v40, "emitPreviewGenerationEndFromUTI:", v17)))
        {
          OSLogHandleForIMFoundationCategory();
          v34 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v62 = 138412290;
            *(_QWORD *)&v62[4] = v33;
            _os_log_impl(&dword_1D1413000, v34, OS_LOG_TYPE_INFO, "persistedPreviewURL: %@", v62, 0xCu);
          }

        }
        objc_msgSend(MEMORY[0x1E0D39798], "sharedManager");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "checkPreviewSensitivityIfNeededFor:attachmentURL:persistedPreviewURL:isFromMe:", v11, v39, v33, objc_msgSend(v14, "isFromMe"));
        if (v15)
        {
          objc_msgSend(v11, "guid");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v15[2](v15, v36, *((unsigned __int8 *)v56 + 24), v50[5], *(double *)(*(_QWORD *)&buf[8] + 32), *(double *)(*(_QWORD *)&buf[8] + 40));

        }
        _Block_object_dispose(&v49, 8);

        _Block_object_dispose(buf, 8);
        _Block_object_dispose(&v55, 8);
      }
      else
      {
        if (IMOSLoggingEnabled(v30))
        {
          OSLogHandleForIMFoundationCategory();
          v37 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D1413000, v37, OS_LOG_TYPE_INFO, "Not pregenerating preview, no persistedPreviewURL", buf, 2u);
          }

        }
        objc_msgSend(v11, "guid");
        v40 = (id)objc_claimAutoreleasedReturnValue();
        v15[2](v15, v40, 1, 0, 0.0, 0.0);
      }

    }
    else
    {
      IMLogHandleForCategory();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        sub_1D166C2E8(v11, v29);

      objc_msgSend(v11, "guid");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v15[2](v15, v42, 1, 0, 0.0, 0.0);
    }

  }
}

uint64_t sub_1D15BD204(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15BD214(uint64_t a1)
{

}

void sub_1D15BD21C(_QWORD *a1, char a2, void *a3, double a4, double a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  char v31;
  _QWORD v32[2];
  uint8_t buf[4];
  id v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = a2;
  v10 = objc_msgSend(v9, "copy");
  v11 = *(_QWORD *)(a1[6] + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

  if (IMOSLoggingEnabled(v13))
  {
    OSLogHandleForIMFoundationCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v15 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
      *(_DWORD *)buf = 138412290;
      v34 = v15;
      _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "IMTranscoderAgent OOP generation completed with error %@", buf, 0xCu);
    }

  }
  if (v9)
    v16 = 0;
  else
    v16 = a2;
  objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if ((v16 & 1) == 0)
  {
    objc_msgSend(v17, "trackEvent:", *MEMORY[0x1E0D387B0]);

    if (IMOSLoggingEnabled(v24))
    {
      OSLogHandleForIMFoundationCategory();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v34 = v9;
        _os_log_impl(&dword_1D1413000, v25, OS_LOG_TYPE_INFO, "OOP preview generation failed in imagent with error %@", buf, 0xCu);
      }

    }
    objc_msgSend(v9, "domain");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v26, "isEqual:", *MEMORY[0x1E0D37C50]) & 1) == 0)
    {
      objc_msgSend(v9, "domain");
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v27, "containsString:", CFSTR("com.apple.BlastDoor")))
      {
        objc_msgSend(v9, "domain");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = objc_msgSend(v30, "containsString:", CFSTR("BlastDoor.Explosion"));

        if ((v31 & 1) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }

    }
LABEL_22:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringGUID");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), &unk_1E9271758);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v9, v28, v29, 0, 0, 0, 0);

    goto LABEL_23;
  }
  objc_msgSend(v17, "trackEvent:", *MEMORY[0x1E0D387B8]);

  if (IMOSLoggingEnabled(v19))
  {
    OSLogHandleForIMFoundationCategory();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(double *)v32 = a4;
      *(double *)&v32[1] = a5;
      objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v32, "{CGSize=dd}");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = a1[4];
      *(_DWORD *)buf = 138412546;
      v34 = v21;
      v35 = 2112;
      v36 = v22;
      _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "Storing size value %@ for previewURL %@", buf, 0x16u);

    }
  }
  v23 = *(_QWORD *)(a1[7] + 8);
  *(double *)(v23 + 32) = a4;
  *(double *)(v23 + 40) = a5;
LABEL_23:

}

void sub_1D15BD5B4(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, uint64_t a11, char a12, void *a13, void *a14, void *a15, void *a16)
{
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  _QWORD aBlock[4];
  id v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  os_activity_scope_state_s *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;

  v34 = a3;
  v21 = a4;
  v22 = a5;
  v40 = a6;
  v39 = a7;
  v38 = a8;
  v37 = a9;
  v36 = a10;
  v23 = a13;
  v24 = a14;
  v25 = a15;
  v26 = a16;
  v49 = 0;
  v50 = (os_activity_scope_state_s *)&v49;
  v51 = 0x3010000000;
  v53 = 0;
  v54 = 0;
  v52 = &unk_1D1714829;
  v27 = _os_activity_create(&dword_1D1413000, "com.apple.messages.AttachmentDownload", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, v50 + 2);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D15BD830;
  aBlock[3] = &unk_1E922E968;
  v28 = v21;
  v48 = a12;
  v42 = v28;
  v47 = &v49;
  v29 = v26;
  v46 = v29;
  v43 = a1;
  v30 = v23;
  v44 = v30;
  v31 = v24;
  v45 = v31;
  v32 = _Block_copy(aBlock);
  objc_msgSend(a1, "transferServicesController");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:", v34, v22, v40, v39, v38, v37, v36, a11, v25, v32);

  _Block_object_dispose(&v49, 8);
}

void sub_1D15BD818(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D15BD830(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  __CFString *v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  const __CFString *v23;
  const __CFString *v24;
  __int128 v25;
  uint64_t aBlock;
  uint64_t v27;
  void (*v28)(uint64_t, void *, int, void *, double, double);
  void *v29;
  id v30;
  id v31;
  id v32;
  __int128 v33;
  char v34;
  uint8_t buf[4];
  const __CFString *v36;
  __int16 v37;
  const __CFString *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a5;
  v14 = a6;
  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "transferForGUID:", *(_QWORD *)(a1 + 32));
  v16 = (__CFString *)objc_claimAutoreleasedReturnValue();

  if (a4 && *(_BYTE *)(a1 + 80))
  {
    aBlock = MEMORY[0x1E0C809B0];
    v27 = 3221225472;
    v28 = sub_1D15BDB3C;
    v29 = &unk_1E922E940;
    v25 = *(_OWORD *)(a1 + 64);
    v18 = (id)v25;
    v33 = v25;
    v30 = v11;
    v19 = v12;
    v31 = v19;
    v34 = a4;
    v32 = v14;
    v20 = _Block_copy(&aBlock);
    if (IMOSLoggingEnabled(v20))
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v36 = v16;
        _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "receiveFileTransfer: completed, will generate preview for transfer %@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "generatePreviewForTransfer:attachmentPath:balloonBundleID:senderContext:completionBlock:", v16, v19, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v20, v25, aBlock, v27, v28, v29);

  }
  else if (*(_QWORD *)(a1 + 64))
  {
    if (IMOSLoggingEnabled(v17))
    {
      OSLogHandleForIMFoundationCategory();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        v23 = CFSTR("NO");
        if (a4)
          v24 = CFSTR("YES");
        else
          v24 = CFSTR("NO");
        if (*(_BYTE *)(a1 + 80))
          v23 = CFSTR("YES");
        *(_DWORD *)buf = 138412546;
        v36 = v24;
        v37 = 2112;
        v38 = v23;
        _os_log_impl(&dword_1D1413000, v22, OS_LOG_TYPE_INFO, "Not pregenerating preview: downloadSucceeded %@ generatePreview %@", buf, 0x16u);
      }

    }
    os_activity_scope_leave((os_activity_scope_state_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 32));
    (*(void (**)(double, double))(*(_QWORD *)(a1 + 64) + 16))(0.0, 0.0);
  }
  else
  {
    os_activity_scope_leave((os_activity_scope_state_t)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 32));
  }

}

void sub_1D15BDB3C(uint64_t a1, void *a2, int a3, void *a4, double a5, double a6)
{
  id v11;
  id v12;
  NSObject *v13;
  const __CFString *v14;
  int v15;
  const __CFString *v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a4;
  if (IMOSLoggingEnabled(v12))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = CFSTR("NO");
      if (a3)
        v14 = CFSTR("YES");
      v15 = 138412546;
      v16 = v14;
      v17 = 2112;
      v18 = v12;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Generated preview, success %@ error %@", (uint8_t *)&v15, 0x16u);
    }

  }
  os_activity_scope_leave((os_activity_scope_state_t)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 32));
  (*(void (**)(double, double))(*(_QWORD *)(a1 + 56) + 16))(a5, a6);

}

uint64_t sub_1D15BDC9C()
{
  return objc_msgSend(MEMORY[0x1E0D39CD8], "sharedInstance");
}

uint64_t sub_1D15BDCA8()
{
  return IMGetCachedDomainBoolForKey();
}

void sub_1D15BED58(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D15BED08);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D15BEDC8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1D15BEDD8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1D15BEDE4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Finished Sync", v4, 2u);
    }
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "_scheduleNextEvaluation");
}

uint64_t sub_1D15BEF9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_evaluateStateAndActIfNeeded");
}

void sub_1D15BF034()
{
  IMDCKChatSyncController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKChatSyncController);
  v1 = (void *)qword_1ED935E60;
  qword_1ED935E60 = (uint64_t)v0;

}

void sub_1D15BF218(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72))
  {
    +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 72);
    *(_QWORD *)(v3 + 72) = v2;

  }
}

uint64_t sub_1D15BF338(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15BF348(uint64_t a1)
{

}

void sub_1D15BF350(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  +[IMDChatStore sharedInstance](IMDChatStore, "sharedInstance");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D15BF744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "chatRegistry");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "chatsToUploadToCloudKitWithLimit:", *(_QWORD *)(a1 + 48));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D15BF898(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  __CFArray *v18;
  NSObject *v19;
  void *v20;
  __int128 v21;
  id obj;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  void *v29;
  __int16 v30;
  id v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v25;
    *(_QWORD *)&v3 = 138412546;
    v21 = v3;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v25 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v5);
        objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags", v21);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "stewieEnabled");

        if (v8 && (v9 = objc_msgSend(v6, "isStewieChat"), (v9 & 1) != 0)
          || (objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags"),
              v10 = (void *)objc_claimAutoreleasedReturnValue(),
              v11 = objc_msgSend(v10, "isTranscriptSharingEnabled"),
              v10,
              v11)
          && (v9 = objc_msgSend(v6, "isStewieSharingChat"), (_DWORD)v9))
        {
          if (IMOSLoggingEnabled(v9))
          {
            OSLogHandleForIMFoundationCategory();
            v12 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Set cloud kit sync state to synced for stewie chats", buf, 2u);
            }

          }
          objc_msgSend(v6, "setCloudKitSyncState:", 1);
          objc_msgSend(v6, "storeAndBroadcastChatChanges");
        }
        else
        {
          +[IMDRecordZoneManager sharedInstance](IMDRecordZoneManager, "sharedInstance");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "chatRecordZoneID");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "_randomSalt");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = 0;
          v16 = (void *)objc_msgSend(v6, "copyCKRecordRepresentationWithZoneID:salt:error:", v14, v15, &v23);
          v17 = v23;

          v18 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
          if (v18 && v16)
          {
            CFArrayAppendValue(v18, v16);
          }
          else if (!v16)
          {
            IMLogHandleForCategory();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend(v6, "guid");
              v20 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = v21;
              v29 = v20;
              v30 = 2112;
              v31 = v17;
              _os_log_error_impl(&dword_1D1413000, v19, OS_LOG_TYPE_ERROR, "Error creating CKRecord for chat with guid (%@), error: %@", buf, 0x16u);

            }
          }

        }
        ++v5;
      }
      while (v2 != v5);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
    }
    while (v2);
  }

}

uint64_t sub_1D15BFCE4(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "chatRegistry");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "updateChatUsingSyncData:", *(_QWORD *)(a1 + 40));

  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

void sub_1D15BFDD0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "chatRegistry");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "resolveChatConflictUsingSyncData:localGUID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1D15BFE8C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "chatRegistry");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "markChatAsDeferredForSyncingUsingSyncData:", *(_QWORD *)(a1 + 40));

}

void sub_1D15C0054(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating chat zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D15C0340(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  void *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if (objc_msgSend(v2, "code") == 12
      || objc_msgSend(*(id *)(a1 + 32), "code") == 26
      || (v3 = objc_msgSend(*(id *)(a1 + 32), "code"), v3 == 11))
    {
      objc_msgSend(*(id *)(a1 + 40), "recordType");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("chatLockRecordType"));

      if ((v5 & 1) != 0)
      {
        if (IMOSLoggingEnabled(v6))
        {
          OSLogHandleForIMFoundationCategory();
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            v8 = *(void **)(a1 + 32);
            v27 = 138412290;
            v28 = v8;
            _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "We got back error [%@] on the lock record, setting the lock record to nil to re-generate on next sync", (uint8_t *)&v27, 0xCu);
          }

        }
        objc_msgSend(*(id *)(a1 + 48), "setLockRecord:", 0);
      }
      else
      {
        MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 48), sel__markChatAsDefferedForSyncingUsingRecord_);
      }
    }
    else
    {
      if (IMOSLoggingEnabled(v3))
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          v14 = *(void **)(a1 + 32);
          v15 = *(_QWORD *)(a1 + 40);
          v27 = 138412546;
          v28 = v14;
          v29 = 2112;
          v30 = v15;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Error %@ while writing up record %@ ", (uint8_t *)&v27, 0x16u);
        }

      }
      objc_msgSend(*(id *)(a1 + 48), "ckUtilities");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "extractServerRecordFromCKServerErrorRecordChanged:", *(_QWORD *)(a1 + 32));
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      if (v17)
      {
        if (IMOSLoggingEnabled(v18))
        {
          OSLogHandleForIMFoundationCategory();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            v27 = 138412290;
            v28 = v17;
            _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Extracted record from server error%@ ", (uint8_t *)&v27, 0xCu);
          }

        }
        objc_msgSend(v17, "recordType");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "isEqualToString:", CFSTR("chatLockRecordType"));

        v22 = *(void **)(a1 + 48);
        if (v21)
        {
          objc_msgSend(*(id *)(a1 + 48), "setLockRecord:", v17);
        }
        else
        {
          v23 = *(void **)(a1 + 56);
          objc_msgSend(*(id *)(a1 + 40), "recordID");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "recordName");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "objectForKey:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v22, "_resolveChatConflictUsingCKRecord:localGUID:", v17, v26);

        }
      }

    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "recordType");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "isEqualToString:", CFSTR("chatLockRecordType"));

    if (v10)
    {
      if (IMOSLoggingEnabled(v11))
      {
        OSLogHandleForIMFoundationCategory();
        v12 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          LOWORD(v27) = 0;
          _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "We are setting the lock record on the callback for processing records", (uint8_t *)&v27, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 48), "setLockRecord:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "_updateChatUsingCKRecord:onRead:didSucceed:dispatchToMain:", *(_QWORD *)(a1 + 40), 0, 1, 1);
    }
  }
}

uint64_t sub_1D15C0CF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1D15C11B4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CC0], 4, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t sub_1D15C1218(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processModifyPerRecordCallBack_error_recordIDtoGUIDmap_);
}

uint64_t sub_1D15C122C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processModifyRecordCompletion_deletedRecordIDs_error_completionBlock_);
}

void sub_1D15C1C38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  void *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        v6 = *(_QWORD *)(a1 + 32);
        v16 = 138412546;
        v17 = v4;
        v18 = 2112;
        v19 = v6;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "**** Error %@ writing chat records %@ to cloudKit *****", (uint8_t *)&v16, 0x16u);
      }

    }
    if ((objc_msgSend(*(id *)(a1 + 40), "_shouldResyncChatsForError:", v4) & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0D39958], "sharedInstance");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "autoBugCaptureWithSubType:errorPayload:", CFSTR("ChatSync"), v4);

    }
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
      (*(void (**)(uint64_t, _QWORD, void *))(v8 + 16))(v8, 0, v4);
  }
  else
  {
    v9 = IMIsRunningInAutomation();
    if ((_DWORD)v9)
    {
      objc_msgSend(MEMORY[0x1E0D397B8], "sharedInstance");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "addNewChatsSyncedCount:", objc_msgSend(*(id *)(a1 + 32), "count") - 1);

    }
    v11 = *(unsigned __int8 *)(a1 + 64);
    v12 = IMOSLoggingEnabled(v9);
    if (v11)
    {
      if (v12)
      {
        OSLogHandleForIMFoundationCategory();
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          LOWORD(v16) = 0;
          _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "*** This was the last batch of chats to write up. Done writing up chats", (uint8_t *)&v16, 2u);
        }

      }
      v14 = *(_QWORD *)(a1 + 56);
      if (v14)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v14 + 16))(v14, 1, 0);
    }
    else
    {
      if (v12)
      {
        OSLogHandleForIMFoundationCategory();
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          LOWORD(v16) = 0;
          _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Kicking off another batch of chats to write up", (uint8_t *)&v16, 2u);
        }

      }
      objc_msgSend(*(id *)(a1 + 40), "_writeDirtyChatsToCloudKitWithActivity:completion:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
  }

}

void sub_1D15C21A0(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  id v9;
  void *v10;
  id *v11;
  void *v12;
  void *v13;
  int v14;
  id v15;
  __int16 v16;
  void *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "recordType");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("chatLockRecordType"));

  v5 = IMOSLoggingEnabled(v4);
  if (v3)
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(void **)(a1 + 32);
        v14 = 138412290;
        v15 = v7;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "** We got the lock record %@ **", (uint8_t *)&v14, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "setLockRecord:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    if (v5)
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "recordID");
        v9 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 32), "_stringForKey:", CFSTR("guid"));
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = 138412546;
        v15 = v9;
        v16 = 2112;
        v17 = v10;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "_processRecordChanged changed recordID:%@ for ChatGUID %@", (uint8_t *)&v14, 0x16u);

      }
    }
    v12 = *(void **)(a1 + 40);
    v11 = (id *)(a1 + 40);
    objc_msgSend(v12, "_updateChatUsingCKRecord:onRead:didSucceed:dispatchToMain:", *(v11 - 1), 1, 1, 1);
    objc_msgSend(*v11, "setFetchedChatsDuringLastSync:", 1);
    objc_msgSend(*(v11 - 1), "_assetForKey:", CFSTR("gp"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D39848], "cleanUpAsset:", v13);

  }
}

uint64_t sub_1D15C253C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D15C2748(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D15C287C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_writeDirtyChatsToCloudKitWithActivity:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1D15C2E1C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  void *v8;
  char v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t v19[16];
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 48))
  {
    if (IMOSLoggingEnabled(a1))
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Resetting local chat sync state & last sync date after receiving user deleted zone error", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "recordStore");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "clearLocalSyncState:", 3);

    objc_msgSend(*(id *)(a1 + 32), "ckUtilities");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "resetLastSyncDate");

  }
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Attempting to create chat zone", v19, 2u);
    }

  }
  v6 = objc_msgSend(*(id *)(a1 + 32), "_chatZoneCreated");
  v7 = v6;
  if (*(_BYTE *)(a1 + 49))
  {
    if ((_DWORD)v6)
    {
      objc_msgSend(*(id *)(a1 + 32), "syncState");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "createdChatZone");

      if ((v9 & 1) == 0)
      {
        if (IMOSLoggingEnabled(v6))
        {
          OSLogHandleForIMFoundationCategory();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)v18 = 0;
            _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Attempting to create chat zone so setting createdChatZone BOOL to YES", v18, 2u);
          }

        }
        objc_msgSend(*(id *)(a1 + 32), "syncState");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "setCreatedChatZone:", 1);

      }
    }
  }
  if (v7)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = 0;
  }
  else
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v17 = 0;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "** Failed to create chat zone **", v17, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CC0], 1, 0);
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;
  }

}

uint64_t sub_1D15C3138(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Resetting the sync token to nil", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", 0);
}

uint64_t sub_1D15C3450(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordChanged_);
}

uint64_t sub_1D15C345C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordDeletion_);
}

uint64_t sub_1D15C3468(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordZoneChangeTokenUpdated_zoneID_clienChangeToken_);
}

uint64_t sub_1D15C3478(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processRecordZoneFetchCompletion_zoneID_clientChangeTokenData_moreComing_error_);
}

uint64_t sub_1D15C3490(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processFetchRecordChangesCompleted_activity_completion_syncType_);
}

void sub_1D15C38CC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D15C37E4);
  }
  _Block_object_dispose((const void *)(v10 - 176), 8);
  _Unwind_Resume(exc_buf);
}

void sub_1D15C3930(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v3;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Fetched record %@", (uint8_t *)&v8, 0xCu);
    }

  }
  v5 = *(id *)(a1 + 32);
  objc_sync_enter(v5);
  if (v3)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    if (!*(_BYTE *)(v6 + 24))
    {
      *(_BYTE *)(v6 + 24) = 1;
      v7 = *(_QWORD *)(a1 + 40);
      if (v7)
        (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v7, 1, 0);
    }
  }
  objc_sync_exit(v5);

}

void sub_1D15C3A44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D15C3A7C(uint64_t a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  id v18;
  int v19;
  uint64_t v20;
  id v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  id v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a6;
  if (IMOSLoggingEnabled(v14))
  {
    OSLogHandleForIMFoundationCategory();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v22 = 138412802;
      v23 = v16;
      v24 = 2112;
      v25 = v14;
      v26 = 1024;
      v27 = v17;
      _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Completed query %@ with error: %@, foundRecord: %d", (uint8_t *)&v22, 0x1Cu);
    }

  }
  v18 = *(id *)(a1 + 40);
  objc_sync_enter(v18);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    if (a5)
    {
      v19 = *(_DWORD *)(a1 + 80);
      if (v19 >= 20)
        v20 = 200;
      else
        v20 = (10 * v19);
      objc_msgSend(*(id *)(a1 + 48), "_anyChatExistsOnServerWithResultsLimit:changeToken:activity:completion:", v20, v12, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else if (*(_QWORD *)(a1 + 64))
    {
      v21 = v14;
      if (!v21)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CC0], 4, 0);
        v21 = (id)objc_claimAutoreleasedReturnValue();
      }
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();

    }
  }
  objc_sync_exit(v18);

}

void sub_1D15C3C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D15C3D24(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteChatZone");

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "deleteChat1Zone");

}

void sub_1D15C4068(uint64_t a1, uint64_t a2, void *a3)
{
  __CFString *v5;
  __CFString *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2 == 4;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    goto LABEL_2;
  if (!v5)
  {
    if (!IMOSLoggingEnabled(0))
      goto LABEL_2;
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Not eligible for truth zone", (uint8_t *)&v13, 2u);
    }
    goto LABEL_14;
  }
  objc_msgSend(*(id *)(a1 + 32), "syncState");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v7, "isEligibleForTruthZone");

  v9 = IMOSLoggingEnabled(v8);
  if ((_DWORD)v9)
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v13 = 138412290;
      v14 = v6;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Received error checking eligibility: %@", (uint8_t *)&v13, 0xCu);
    }

  }
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        v12 = CFSTR("YES");
      else
        v12 = CFSTR("NO");
      v13 = 138412290;
      v14 = v12;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Returning cached value: %@", (uint8_t *)&v13, 0xCu);
    }
LABEL_14:

  }
LABEL_2:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_1D15C4620(uint64_t a1)
{
  id v1;

  objc_msgSend(*(id *)(a1 + 32), "recordStore");
  v1 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "resetLocalSyncStateIfAppropriate");

}

void sub_1D15C49F4(uint64_t a1)
{
  id v2;

  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CC0], 6, 0);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1D15C4A58(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a3;
  objc_msgSend(*(id *)(a1 + 32), "setIsSyncing:", 0);
  if ((_DWORD)a2)
  {
    +[IMDCKBackupController sharedInstance](IMDCKBackupController, "sharedInstance");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "setFirstSyncDateToNow");

    +[IMDCKBackupController sharedInstance](IMDCKBackupController, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "toggleiCloudBackupsIfNeeded:", 0);

  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = v9;
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v9);
    v8 = v9;
  }

}

void sub_1D15C4AF8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[16];

  v2 = objc_msgSend(*(id *)(a1 + 32), "_eligibleForTruthZone");
  if ((v2 & 1) == 0)
  {
    v2 = IMOSLoggingEnabled(v2);
    if ((_DWORD)v2)
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "**** Not Eligible For Truth Zone, but earlier we were able to fetch the chat zone. Something is up! ****", buf, 2u);
      }

    }
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
  {
    if (IMOSLoggingEnabled(v2))
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Syncing chats in new device bring up scenario", buf, 2u);
      }

    }
    objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", 0);
    v4 = *(_QWORD *)(a1 + 56);
  }
  v7 = *(void **)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D15C4C94;
  v9[3] = &unk_1E922EB60;
  v9[4] = v7;
  v8 = *(_QWORD *)(a1 + 64);
  v12 = v4;
  v13 = v8;
  v10 = v6;
  v11 = *(id *)(a1 + 48);
  objc_msgSend(v7, "_syncChatsWithCloudKitWithCompletionType:activity:syncChatsCompletionBlock:", v4, v10, v9);

}

void sub_1D15C4C94(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  char v13;
  _QWORD block[5];
  id v15;
  id v16;
  __int128 v17;
  uint8_t buf[4];
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v19 = v5;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Chat sync error %@", buf, 0xCu);
    }

  }
  v7 = objc_msgSend(*(id *)(a1 + 32), "_shouldResyncChatsForError:", v5);
  if ((_DWORD)v7)
  {
    if (IMOSLoggingEnabled(v7))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v19 = v5;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "*********** we failed to sync Chats due to op lock %@, kicking off another chat sync", buf, 0xCu);
      }

    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D15C4EEC;
    block[3] = &unk_1E922D2D0;
    v9 = *(void **)(a1 + 40);
    block[4] = *(_QWORD *)(a1 + 32);
    v17 = *(_OWORD *)(a1 + 56);
    v15 = v9;
    v16 = *(id *)(a1 + 48);
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = sub_1D15C4F04;
    v10[3] = &unk_1E9229CB0;
    v12 = *(id *)(a1 + 48);
    v13 = a2;
    v11 = v5;
    dispatch_async(MEMORY[0x1E0C80D38], v10);

  }
}

uint64_t sub_1D15C4EEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__syncChatsWithCloudKit:attemptCount:activity:withCompletion:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64) + 1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_1D15C4F04(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return result;
}

void sub_1D15C4F24(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37CC0], 3, 0);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, _QWORD, id))(v1 + 16))(v1, 0, v2);

  }
}

void sub_1D15C55A0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t buf[4];
  uint64_t v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  v4 = v3;
  if (v3)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v6);
        v3 = IMOSLoggingEnabled(v3);
        if ((_DWORD)v3)
        {
          OSLogHandleForIMFoundationCategory();
          v8 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v15 = v7;
            _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Deleted chat with recordID %@", buf, 0xCu);
          }

        }
        ++v6;
      }
      while (v4 != v6);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
      v4 = v3;
    }
    while (v3);
  }

  objc_msgSend(*(id *)(a1 + 40), "chatRegistry");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "clearPendingDeleteTable");

}

void sub_1D15C59A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 || !v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = 138412290;
        v10 = v5;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Failed to filter record IDs for chat deletion sync, error: %@", (uint8_t *)&v9, 0xCu);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_deleteChatRecordsWithRecordIDs:completion:", v6, *(_QWORD *)(a1 + 40));
  }

}

void sub_1D15C5C30(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint8_t v7[16];

  v4 = a2;
  v5 = a3;
  if (IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "***** WE should not get record completion block in delete operation", v7, 2u);
    }

  }
}

void sub_1D15C5CE0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v6 = a4;
  objc_msgSend(*(id *)(a1 + 32), "_handleChatDeletionCompletionForRecordIDs:error:", a3, v6);
  if (*(_QWORD *)(a1 + 40))
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1D15C5D94;
    v7[3] = &unk_1E92290A8;
    v9 = *(id *)(a1 + 40);
    v8 = v6;
    dispatch_async(MEMORY[0x1E0C80D38], v7);

  }
}

uint64_t sub_1D15C5D94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1D15C5F78(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *, void *);
  void *v15;
  id v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (IMOSLoggingEnabled(v6))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218242;
      v19 = objc_msgSend(v5, "count");
      v20 = 2112;
      v21 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Completed chat record fetch with %llu results, error: %@", buf, 0x16u);
    }

  }
  v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = MEMORY[0x1E0C809B0];
  v13 = 3221225472;
  v14 = sub_1D15C612C;
  v15 = &unk_1E922EBA8;
  v16 = *(id *)(a1 + 32);
  v17 = v8;
  v9 = v8;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", &v12);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = (void *)objc_msgSend(v9, "copy", v12, v13, v14, v15);
  (*(void (**)(uint64_t, id, void *))(v10 + 16))(v10, v6, v11);

}

void sub_1D15C612C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  objc_msgSend(v6, "modificationDate");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7
    && (objc_msgSend(v7, "earlierDate:", *(_QWORD *)(a1 + 32)),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v9,
        v9 == v8))
  {
    if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 40), "addObject:", v5)))
    {
      OSLogHandleForIMFoundationCategory();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v12 = *(_QWORD *)(a1 + 32);
        v13 = 138412802;
        v14 = v5;
        v15 = 2112;
        v16 = v8;
        v17 = 2112;
        v18 = v12;
        _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Including chat with record ID %@ modification date %@ since it is before %@", (uint8_t *)&v13, 0x20u);
      }
      goto LABEL_10;
    }
  }
  else if (IMOSLoggingEnabled(v7))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(a1 + 32);
      v13 = 138412802;
      v14 = v5;
      v15 = 2112;
      v16 = v8;
      v17 = 2112;
      v18 = v11;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "Filtering out chat with record ID %@ modification date %@ since it is after %@", (uint8_t *)&v13, 0x20u);
    }
LABEL_10:

  }
}

void sub_1D15C6484(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  uint8_t buf[16];

  v8 = a3;
  v9 = a4;
  objc_msgSend(v9, "path");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = objc_msgSend(v11, "fileExistsAtPath:", v10);

  if (v12)
  {
    v13 = IMCommSafetyContentAttachmentTypeForURL();
    if (v13 != 2)
    {
      v14 = v13;
      v15 = v9;
      v16 = v15;
      v17 = v15;
      if (!v14)
      {
        IMPreviewExtension();
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        IMAttachmentPreviewFileURL();
        v17 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v17
          || (objc_msgSend(v17, "path"),
              v20 = (void *)objc_claimAutoreleasedReturnValue(),
              objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"),
              v21 = (void *)objc_claimAutoreleasedReturnValue(),
              v22 = objc_msgSend(v21, "fileExistsAtPath:", v20),
              v21,
              v20,
              (v22 & 1) == 0))
        {

LABEL_13:
          goto LABEL_14;
        }

      }
      if (IMOSLoggingEnabled(v15))
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Checking sensitivity for existing attachment preview", buf, 2u);
        }

      }
      objc_msgSend(a1, "checkPreviewSensitivityIfNeededFor:attachmentURL:persistedPreviewURL:isFromMe:", v8, v16, v17, a5);
      goto LABEL_13;
    }
  }
LABEL_14:

}

void sub_1D15C6644(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  char v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  NSObject *v23;
  dispatch_time_t v24;
  intptr_t v25;
  NSObject *v26;
  uint8_t v27[8];
  _QWORD v28[4];
  id v29;
  NSObject *v30;
  char v31;

  v10 = a3;
  v11 = a4;
  v12 = a5;
  objc_msgSend(MEMORY[0x1E0D397A0], "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (a6)
  {
    v15 = objc_msgSend(v13, "checksForSensitivityOnSend");

    if ((v15 & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v16 = objc_msgSend(v13, "checksForSensitivityOnReceive");

    if (!v16)
      goto LABEL_19;
  }
  if (objc_msgSend(a1, "_shouldForceSensitivityResult"))
  {
    if (a6)
      v17 = 2;
    else
      v17 = 1;
    objc_msgSend(v10, "setCommSafetySensitive:", v17);
  }
  else
  {
    v18 = dispatch_group_create();
    dispatch_group_enter(v18);
    v19 = IMCommSafetyContentAttachmentTypeForURL();
    if (v19 == 1)
      v20 = v11;
    else
      v20 = v12;
    v21 = v20;
    objc_msgSend(MEMORY[0x1E0D39798], "sharedManager");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_1D15C6858;
    v28[3] = &unk_1E922DB40;
    v31 = a6;
    v29 = v10;
    v23 = v18;
    v30 = v23;
    objc_msgSend(v22, "isSensitiveContent:contentAttachmentType:useBlastDoor:withChatID:completionHandler:", v21, v19, 1, 0, v28);
    v24 = dispatch_time(0, 30000000000);
    v25 = dispatch_group_wait(v23, v24);
    if (v25 && IMOSLoggingEnabled(v25))
    {
      OSLogHandleForIMFoundationCategory();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v27 = 0;
        _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "Timed out waiting for sensitive image check", v27, 2u);
      }

    }
  }
LABEL_19:

}

void sub_1D15C6858(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  id *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v18 = 138412290;
        v19 = v6;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Received CommSafety response from Media-Analysis-Daemon with error %@", (uint8_t *)&v18, 0xCu);
      }

    }
  }
  else
  {
    if ((_DWORD)a2)
    {
      if (*(_BYTE *)(a1 + 48))
        v8 = 2;
      else
        v8 = 1;
      v9 = (id *)MEMORY[0x1E0D38AB8];
      if (!*(_BYTE *)(a1 + 48))
        v9 = (id *)MEMORY[0x1E0D38AB0];
      v10 = (void *)MEMORY[0x1E0D39958];
      v11 = *v9;
      objc_msgSend(v10, "sharedInstance");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "trackEvent:", v11);

    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(MEMORY[0x1E0D397D8], "sharedInstance");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "logPrivatizedImageReceivedEvent:", a2);

    if (IMOSLoggingEnabled(v14))
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v8);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = 138412546;
        v19 = v16;
        v20 = 2112;
        v21 = v17;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Received CommSafety response from Media-Analysis-Daemon with result %@, %@", (uint8_t *)&v18, 0x16u);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "setCommSafetySensitive:", v8);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

void sub_1D15C71B8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15C711CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D15C743C()
{
  IMDCollaborationNoticeController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCollaborationNoticeController);
  v1 = (void *)qword_1ED936060;
  qword_1ED936060 = (uint64_t)v0;

}

void sub_1D15C7788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D15C77A0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15C77B0(uint64_t a1)
{

}

void sub_1D15C77B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D15C78C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v2;

}

void sub_1D15C7DD4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD block[5];
  id v7;
  id v8;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15C7E68;
  block[3] = &unk_1E9229280;
  v4 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void sub_1D15C7E68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "broadcastNoticesDidChangeForChatGUIDs:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "noticeDispatcher");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 48), "guidString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v5[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v5, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "reflectDismissalForNoticeGUIDs:", v4);

}

void sub_1D15C83CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD v15[4];
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_1D166C480();
  }
  else
  {
    v8 = (void *)MEMORY[0x1E0CA5838];
    v9 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_1D15C850C;
    v15[3] = &unk_1E922EC40;
    v10 = v9;
    v11 = *(_QWORD *)(a1 + 72);
    v16 = v10;
    v22 = v11;
    v17 = v5;
    v18 = *(id *)(a1 + 40);
    v19 = *(id *)(a1 + 48);
    v12 = *(id *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v20 = v12;
    v21 = v13;
    objc_msgSend(v8, "getAppLinkWithURL:completionHandler:", v10, v15);

    v14 = v16;
  }

}

void sub_1D15C850C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v29 = a3;
  if (!v5 || v29)
  {
    IMLogHandleForCategory();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1D166C55C(a1);

  }
  objc_msgSend(v5, "targetApplicationRecord");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "bundleIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v8, "length"))
  {
    IMLogHandleForCategory();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1D166C4EC();

  }
  if (objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.CloudKit.ShareBear")))
  {
    v28 = objc_alloc_init(MEMORY[0x1E0D39B30]);
    objc_msgSend(v28, "bundleIDsForCollaborationURL:", *(_QWORD *)(a1 + 32));
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v31;
      while (2)
      {
        for (i = 0; i != v11; ++i)
        {
          if (*(_QWORD *)v31 != v12)
            objc_enumerationMutation(v10);
          v14 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * i);
          v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA5870]), "initWithBundleIdentifier:allowPlaceholder:error:", v14, 0, 0);
          if (v15)
          {
            v16 = v14;

            v8 = v16;
            goto LABEL_21;
          }
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
        if (v11)
          continue;
        break;
      }
    }
LABEL_21:

    v17 = objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.CloudKit.ShareBear"));
    if ((_DWORD)v17)
    {
      if (IMOSLoggingEnabled(v17))
      {
        OSLogHandleForIMFoundationCategory();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          v19 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          v35 = v19;
          _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Could not find an app record for the notice URL: %@", buf, 0xCu);
        }

      }
      objc_msgSend(v10, "firstObject");
      v20 = objc_claimAutoreleasedReturnValue();

      v8 = (void *)v20;
    }

  }
  v21 = (void *)MEMORY[0x1E0D39788];
  v22 = *(_QWORD *)(a1 + 80);
  v23 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "title");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 40), "contentType");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "metadataWithType:bundleIdentifier:contentURL:contentTitle:contentType:messageGUID:", v22, v8, v23, v24, v25, 0);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0D39780], "noticeWithGUIDString:sender:metadata:date:dateViewed:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v26, *(_QWORD *)(a1 + 64), 0);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 72), "_processNotice:", v27);

}

void sub_1D15C8918(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D15C8998;
  v5[3] = &unk_1E9228750;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v5);

}

uint64_t sub_1D15C8998(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "broadcastNoticesDidChangeForChatGUIDs:", *(_QWORD *)(a1 + 40));
}

void sub_1D15C8A5C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[5];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1D15C8ADC;
  v5[3] = &unk_1E9228750;
  v5[4] = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v4 = v3;
  dispatch_async(MEMORY[0x1E0C80D38], v5);

}

uint64_t sub_1D15C8ADC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "broadcastNoticesDidChangeForChatGUIDs:", *(_QWORD *)(a1 + 40));
}

void sub_1D15C8D44(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = a2;
  v4 = *(void **)(a1 + 40);
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15C8E18;
  block[3] = &unk_1E922B2A8;
  v8 = v4;
  v9 = *(id *)(a1 + 48);
  v10 = v3;
  v11 = *(id *)(a1 + 56);
  v12 = *(id *)(a1 + 64);
  v6 = v3;
  dispatch_async(v5, block);

}

void sub_1D15C8E18(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = *(id *)(a1 + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i);
        objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v7, (_QWORD)v11);
        v8 = (void *)objc_claimAutoreleasedReturnValue();

        v9 = *(void **)(a1 + 56);
        if (v8)
        {
          objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v7);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObject:", *(_QWORD *)(a1 + 40));
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99E20], "setWithObject:", *(_QWORD *)(a1 + 40));
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "setValue:forKey:", v10, v7);
        }

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1D15C8F90(id *a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[4], "highlightURLs");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "mutableCopy");

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = a1[5];
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "removeObject:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v8++), (_QWORD)v15);
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v6);
  }

  objc_msgSend(v3, "allObjects");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "count");

  if (v10)
  {
    objc_msgSend(a1[4], "noticeStore");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "allObjects");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "deleteNoticesForURLs:", v12);

  }
  v13 = (void *)objc_msgSend(a1[5], "copy", (_QWORD)v15);
  objc_msgSend(a1[4], "setHighlightURLs:", v13);

  v14 = (void *)objc_msgSend(a1[6], "copy");
  objc_msgSend(a1[4], "setHighlightURLsForChatGUID:", v14);

  objc_msgSend(a1[4], "setHasPopulatedHighlightTracking:", 1);
}

void sub_1D15C94CC(id *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  objc_msgSend(a1[4], "collaborationNoticeDispatcherQueue");
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15C958C;
  block[3] = &unk_1E9229280;
  v7 = v3;
  v8 = a1[5];
  v9 = a1[6];
  v5 = v3;
  dispatch_async(v4, block);

}

void sub_1D15C958C(uint64_t a1)
{
  if (objc_msgSend(*(id *)(a1 + 32), "count"))
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", *(_QWORD *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1D15C95C0(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "allObjects");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "broadcastNoticesDidChangeForChatGUIDs:", v2);

}

void sub_1D15C993C(uint64_t a1, uint64_t a2)
{
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "broadcastNoticesDidChangeForChatGUIDs:", a2);
  objc_msgSend(*(id *)(a1 + 32), "noticeDispatcher");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "reflectDismissalForNoticeGUIDs:", *(_QWORD *)(a1 + 40));

}

void sub_1D15C9A5C(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "attributions", 0);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
          objc_msgSend(v10, "conversationIdentifier");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v11;
          if (v11)
          {
            if (!objc_msgSend(v11, "length"))
            {
              IMLogHandleForCategory();
              v13 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                sub_1D166C718((uint64_t)v10);

              goto LABEL_18;
            }
            objc_msgSend(v4, "addObject:", v12);
          }

        }
        v7 = -[NSObject countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          continue;
        break;
      }
    }
  }
  else
  {
    IMLogHandleForCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_1D166C6EC();
  }
LABEL_18:

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_1D15C9CD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1D15C9E18(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1D166C7AC((uint64_t)a1);

    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    v8 = objc_alloc_init(MEMORY[0x1E0D39B30]);
    objc_msgSend(a1[5], "highlightCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1D15C9F4C;
    v11[3] = &unk_1E922ED58;
    v12 = a1[6];
    v13 = a1[7];
    objc_msgSend(v8, "fetchAttributionsForHighlight:highlight:completionBlock:", v9, v5, v11);

  }
}

void sub_1D15C9F4C(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  objc_msgSend(a2, "attributions", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v15;
    while (2)
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v15 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        objc_msgSend(v8, "conversationIdentifier");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v9;
        if (v9)
        {
          if (!objc_msgSend(v9, "length"))
          {
            IMLogHandleForCategory();
            v11 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
              sub_1D166C718((uint64_t)v8);

            goto LABEL_15;
          }
          objc_msgSend(*(id *)(a1 + 32), "addObject:", v10);
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v5)
        continue;
      break;
    }
  }
LABEL_15:

  v12 = *(_QWORD *)(a1 + 40);
  v13 = (void *)objc_msgSend(*(id *)(a1 + 32), "copy");
  (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);

}

void sub_1D15CA748(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  void *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(v7, "localizedDescription");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v21 = v5;
        v22 = 2112;
        v23 = v13;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Could not get collaborationHighlight: %@, error: %@", buf, 0x16u);

      }
    }
  }
  else
  {
    v8 = objc_alloc_init(MEMORY[0x1E0D39B30]);
    objc_msgSend(*(id *)(a1 + 32), "highlightCenter");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1D15CA924;
    v14[3] = &unk_1E922EDF8;
    v10 = *(id *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 32);
    v15 = v10;
    v16 = v11;
    v17 = v5;
    v18 = *(_OWORD *)(a1 + 48);
    objc_msgSend(v8, "fetchAttributionsForHighlight:highlight:completionBlock:", v9, v17, v14);

  }
}

void sub_1D15CA924(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  int8x16_t v25;
  _QWORD v26[5];
  id v27;
  int8x16_t v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint8_t buf[4];
  void *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(v3, "attributions");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v34;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v34 != v6)
        objc_enumerationMutation(v4);
      v8 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v7);
      if (objc_msgSend(v8, "isGroupConversation"))
      {
        objc_msgSend(*(id *)(a1 + 32), "guid");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "conversationIdentifier");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_msgSend(v9, "isEqualToString:", v10);

        if (v11)
          break;
      }
      if (v5 == (void *)++v7)
      {
        v5 = (void *)objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_16;
      }
    }
    objc_msgSend(v8, "uniqueIdentifier");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "collaborationMetadata");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "containerSetupInfo");
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    if (v13)
      goto LABEL_17;
    if (IMOSLoggingEnabled(v14))
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v38 = v5;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "containerSetupInfo is nil for messageGUID: %@", buf, 0xCu);
      }

    }
  }
LABEL_16:
  v13 = 0;
LABEL_17:

  if (*(_QWORD *)(a1 + 72) == 8
    && (v16 = objc_msgSend(*(id *)(a1 + 40), "_highlightEligibleForSuggestAddingUser:", *(_QWORD *)(a1 + 48)),
        (v16 & 1) == 0))
  {
    if (IMOSLoggingEnabled(v16))
    {
      OSLogHandleForIMFoundationCategory();
      v24 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v38) = 90;
        _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "Collaboration highlight is older than %d days, ineligible for add notice.", buf, 8u);
      }

    }
  }
  else
  {
    v17 = *(void **)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 56);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = sub_1D15CAC80;
    v26[3] = &unk_1E922EDD0;
    v26[4] = v18;
    v19 = v13;
    v20 = *(_QWORD *)(a1 + 72);
    v27 = v19;
    v32 = v20;
    v25 = *(int8x16_t *)(a1 + 32);
    v21 = (id)v25.i64[0];
    v28 = vextq_s8(v25, v25, 8uLL);
    v22 = *(id *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 64);
    v29 = v22;
    v30 = v23;
    v31 = v5;
    objc_msgSend(v17, "_isShareBearURL:completionHandler:", v18, v26);

  }
}

void sub_1D15CAC80(uint64_t a1, int a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[6];
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint8_t buf[16];

  if (a2)
  {
    if (IMOSLoggingEnabled(a1))
    {
      OSLogHandleForIMFoundationCategory();
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "CloudKit/iCloud Drive collaboration", buf, 2u);
      }

    }
    v4 = (void *)MEMORY[0x1D17EA3EC](CFSTR("CSCloudSharing"), CFSTR("CloudSharing"));
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[2] = sub_1D15CAE4C;
    v13[3] = &unk_1E922EDA8;
    v18 = *(_QWORD *)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(void **)(a1 + 56);
    v13[4] = v5;
    v13[5] = v7;
    v13[1] = 3221225472;
    v14 = v8;
    v9 = *(id *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 72);
    v11 = *(void **)(a1 + 80);
    v15 = v9;
    v16 = v10;
    v17 = v11;
    objc_msgSend(v4, "ckMetadataFromShareURL:containerSetupInfo:completionHandler:", v5, v6, v13);

  }
  else if (IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 48), "_generateParticipantChangeNoticesForChat:highlight:participant:noticeType:checkedPrivileges:messageGUID:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 88), 0, *(_QWORD *)(a1 + 80))))
  {
    OSLogHandleForIMFoundationCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "3rd party collaboration", buf, 2u);
    }

  }
}

void sub_1D15CAE4C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void *v13;
  BOOL v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_1D166C818((uint64_t)v5);

    goto LABEL_29;
  }
  if (IMOSLoggingEnabled(0))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v20 = 138412290;
      v21 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Checking permissions for URL: %@", (uint8_t *)&v20, 0xCu);
    }

  }
  objc_msgSend(v5, "share");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v10, "publicPermission") == 2)
  {

  }
  else
  {
    objc_msgSend(v5, "share");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "publicPermission") == 3;

    if (!v14)
      goto LABEL_22;
  }
  v15 = IMOSLoggingEnabled(v11);
  if ((_DWORD)v15)
  {
    OSLogHandleForIMFoundationCategory();
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, "Public share, show public sharing banner", (uint8_t *)&v20, 2u);
    }

  }
  if (*(_QWORD *)(a1 + 80) == 9)
  {
    if (IMOSLoggingEnabled(v15))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Not displaying remove banner for public sharing", (uint8_t *)&v20, 2u);
      }
LABEL_21:

      goto LABEL_29;
    }
    goto LABEL_29;
  }
LABEL_22:
  v18 = objc_msgSend(v5, "participantRole");
  if (v18 != 1)
  {
    v18 = objc_msgSend(v5, "participantRole");
    if (v18 != 2)
    {
      if (!IMOSLoggingEnabled(v18))
        goto LABEL_29;
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Does not have admin rights to add/remove from the share", (uint8_t *)&v20, 2u);
      }
      goto LABEL_21;
    }
  }
  if (IMOSLoggingEnabled(v18))
  {
    OSLogHandleForIMFoundationCategory();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "Has admin rights to add/remove from the share", (uint8_t *)&v20, 2u);
    }

  }
  objc_msgSend(*(id *)(a1 + 40), "_generateParticipantChangeNoticesForChat:highlight:participant:noticeType:checkedPrivileges:messageGUID:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), 1, *(_QWORD *)(a1 + 72));
LABEL_29:

}

void sub_1D15CB364(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  __CFString *v28;
  __CFString *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  void *v43;
  void *v44;
  void *v45;
  uint8_t buf[4];
  void *v47;
  __int16 v48;
  void *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v44 = v5;
  v45 = v6;
  if (v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "URL");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412546;
        v47 = v8;
        v48 = 2112;
        v49 = v45;
        _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Could not get appLink from url: %@ with error: %@", buf, 0x16u);

      }
    }
  }
  else
  {
    objc_msgSend(v5, "targetApplicationRecord");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "bundleIdentifier");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v10, "length"))
    {
      IMLogHandleForCategory();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        sub_1D166C880(a1);

    }
    if (objc_msgSend(v10, "isEqualToString:", CFSTR("com.apple.CloudKit.ShareBear")))
    {
      objc_msgSend(MEMORY[0x1E0D39AE8], "sharedManager");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 32), "URL");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "lsAppRecordForShareBearURL:", v13);
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14)
      {
        objc_msgSend(v14, "bundleIdentifier");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = objc_msgSend(v15, "length") == 0;

        if (!v16)
        {
          objc_msgSend(v14, "bundleIdentifier");
          v17 = objc_claimAutoreleasedReturnValue();

          v10 = (void *)v17;
        }
      }

    }
    v18 = objc_alloc(MEMORY[0x1E0C99E60]);
    objc_msgSend(*(id *)(a1 + 40), "participantHandles");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v43 = (void *)objc_msgSend(v18, "initWithArray:", v19);

    if (IMOSLoggingEnabled(v20))
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v47 = v10;
        v48 = 2112;
        v49 = v43;
        _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Bundle identifier for notice: %@ with participants: %@", buf, 0x16u);
      }

    }
    v22 = (void *)MEMORY[0x1E0D39788];
    v23 = *(_QWORD *)(a1 + 72);
    objc_msgSend(*(id *)(a1 + 32), "URL");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "title");
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "contentType");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "metadataWithType:bundleIdentifier:contentURL:contentTitle:contentType:messageGUID:", v23, v10, v24, v25, v26, *(_QWORD *)(a1 + 48));
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (*(_QWORD *)(a1 + 72) == 8)
      v28 = CFSTR("add");
    else
      v28 = CFSTR("remove");
    v29 = v28;
    v30 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(*(id *)(a1 + 56), "ID");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "groupID");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "URL");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "stringWithFormat:", CFSTR("%@:%@/%@/%@"), v29, v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v34, "dataUsingEncoding:", 4);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    IMSharedHelperMD5OfData();
    v36 = (void *)objc_claimAutoreleasedReturnValue();

    v37 = (void *)MEMORY[0x1E0D39780];
    objc_msgSend(*(id *)(a1 + 56), "ID");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "noticeWithGUIDString:sender:metadata:date:dateViewed:", v36, v38, v27, v39, 0);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

    if (IMOSLoggingEnabled(v41))
    {
      OSLogHandleForIMFoundationCategory();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        v47 = v40;
        _os_log_impl(&dword_1D1413000, v42, OS_LOG_TYPE_INFO, "Sending notice to process: %@", buf, 0xCu);
      }

    }
    objc_msgSend(*(id *)(a1 + 64), "_processNotice:", v40);

  }
}

void sub_1D15CBBD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  void (*v14)(void);
  NSObject *v15;
  uint8_t v16[16];
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1D166C55C(a1);

  }
  objc_msgSend(v5, "targetApplicationRecord");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "bundleIdentifier");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("com.apple.CloudKit.ShareBear"));
  LODWORD(v9) = v11;
  v12 = IMOSLoggingEnabled(v11);
  if ((_DWORD)v9)
  {
    if (v12)
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "ShareBear identifier: CloudKit or iCloud Drive app", buf, 2u);
      }

    }
    v14 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  else
  {
    if (v12)
    {
      OSLogHandleForIMFoundationCategory();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1D1413000, v15, OS_LOG_TYPE_INFO, "Share URL is coming from a 3rd party app", v16, 2u);
      }

    }
    v14 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
  }
  v14();

}

IMDStickerRegistry *sub_1D15CBF1C()
{
  IMDStickerRegistry *result;

  result = objc_alloc_init(IMDStickerRegistry);
  qword_1ED935E68 = (uint64_t)result;
  return result;
}

uint64_t sub_1D15CC6B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v7 = a1;
  v16 = *MEMORY[0x1E0C80C00];
  if (a5 && (a1 = objc_msgSend(a2, "count")) != 0)
  {
    if (IMOSLoggingEnabled(a1))
    {
      v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(v7 + 32);
        v12 = 138412546;
        v13 = v9;
        v14 = 2112;
        v15 = objc_msgSend(a2, "objectAtIndexedSubscript:", 0);
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Received transcoded output from balloon bundle id %@ path %@", (uint8_t *)&v12, 0x16u);
      }
    }
    objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "path");
    return (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 48) + 16))();
  }
  else
  {
    if (IMOSLoggingEnabled(a1))
    {
      v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        v12 = 138412546;
        v13 = a4;
        v14 = 2112;
        v15 = (uint64_t)a2;
        _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "IMDStickerRegistry. Failed retrieving sticker me-sticker with error %@, outputURLS %@", (uint8_t *)&v12, 0x16u);
      }
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 48) + 16))();
  }
}

id SMSSafeMimeTypeForMimeType(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v1 = qword_1EFC63EE8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1EFC63EE8, &unk_1E922EF38);
  objc_msgSend(v2, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend((id)qword_1EFC63EE0, "objectForKey:", v3);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)v4;
    if (v4)
      v6 = (void *)v4;
    else
      v6 = v3;
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1D15CC928()
{
  uint64_t v0;
  void *v1;

  v0 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", CFSTR("text/x-vcalendar"), CFSTR("text/x-vcalendar"), CFSTR("text/vcalendar"), CFSTR("text/x-vcalendar"), CFSTR("text/x-calendar"), CFSTR("text/x-vcalendar"), CFSTR("text/calendar"), CFSTR("text/x-vcard"), CFSTR("text/x-vlocation"), CFSTR("text/x-vcard"), CFSTR("text/x-location"), CFSTR("text/x-vcard"), CFSTR("text/x-vcard"), CFSTR("text/x-vcard"), CFSTR("text/vcard"), CFSTR("text/plain"), CFSTR("text/plain"),
         CFSTR("image/jpeg"),
         CFSTR("image/jpg"),
         CFSTR("image/x-bmp"),
         CFSTR("image/bmp"),
         CFSTR("image/x-bmp"),
         CFSTR("image/x-bmp"),
         CFSTR("audio/x-aac"),
         CFSTR("audio/x-aac"),
         CFSTR("audio/x-aac"),
         CFSTR("audio/aac"),
         CFSTR("video/3gpp"),
         CFSTR("video/3gp"),
         CFSTR("video/3gpp"),
         CFSTR("video/3gpp"),
         0);
  v1 = (void *)qword_1EFC63EE0;
  qword_1EFC63EE0 = v0;

}

id CreateSMILStringForMessageParts(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  unsigned int v16;
  const __CFString *v17;
  char v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  id obj;
  char v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t v33[128];
  uint8_t buf[4];
  id v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v28 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  if (qword_1EFC63EF8 != -1)
    dispatch_once(&qword_1EFC63EF8, &unk_1E922EF58);
  if (IMOSLoggingEnabled(objc_msgSend(v28, "appendString:", qword_1EFC63EF0)))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      MarcoLoggingStringForMessageData();
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v35 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Generating SMIL for pieces: %@", buf, 0xCu);

    }
  }
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  obj = v1;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
  if (!v4)
  {

    goto LABEL_34;
  }
  v27 = 0;
  v5 = 0;
  v6 = 1;
  v7 = *(_QWORD *)v30;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v30 != v7)
        objc_enumerationMutation(obj);
      v9 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * v8);
      objc_msgSend(v9, "objectForKey:", CFSTR("Type"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      SMSSafeMimeTypeForMimeType(v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "objectForKey:", CFSTR("Path"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "lastPathComponent");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "objectForKey:", CFSTR("Tag"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "isEqualToString:", CFSTR("text"));
      v6 |= v5;
      if ((v15 & 1) != 0)
      {
        v16 = 0;
        v17 = CFSTR("Text");
      }
      else
      {
        if ((objc_msgSend(v11, "isEqualToString:", CFSTR("vcard")) & 1) != 0)
          goto LABEL_27;
        if ((objc_msgSend(v14, "isEqualToString:", CFSTR("img")) & 1) != 0)
        {
          v16 = 0;
        }
        else
        {
          v18 = objc_msgSend(v14, "isEqualToString:", CFSTR("video"));
          objc_msgSend(v9, "objectForKey:", CFSTR("Duration"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = objc_msgSend(v19, "intValue");

          if ((v18 & 1) == 0)
          {
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@ src=\"%@\"/>\n"), v14, v13);
            v20 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_20:
            if ((v27 & 1) != 0)
              objc_msgSend(v28, "appendString:", CFSTR("</par>\n"));
            if (v16)
              v21 = v16;
            else
              v21 = 10;
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<par dur=\"%ds\">\n"), v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v28, "appendString:", v22);

            v27 = 1;
            goto LABEL_26;
          }
        }
        v6 = 1;
        v17 = CFSTR("Image");
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("<%@ src=\"%@\" region=\"%@\"/>\n"), v14, v13, v17);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v6 & 1) != 0)
        goto LABEL_20;
LABEL_26:
      objc_msgSend(v28, "appendString:", v20);

      v6 = 0;
      v5 = v15;
LABEL_27:

      ++v8;
    }
    while (v4 != v8);
    v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
    v4 = v23;
  }
  while (v23);

  if ((v27 & 1) != 0)
    objc_msgSend(v28, "appendString:", CFSTR("</par>\n"));
LABEL_34:
  if (qword_1EFC63F08 != -1)
    dispatch_once(&qword_1EFC63F08, &unk_1E922EF78);
  if (IMOSLoggingEnabled(objc_msgSend(v28, "appendString:", qword_1EFC63F00)))
  {
    OSLogHandleForIMFoundationCategory();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v35 = v28;
      _os_log_impl(&dword_1D1413000, v24, OS_LOG_TYPE_INFO, "proposed smil: %@", buf, 0xCu);
    }

  }
  return v28;
}

void sub_1D15CCECC()
{
  void *v0;

  v0 = (void *)qword_1EFC63EF0;
  qword_1EFC63EF0 = (uint64_t)CFSTR("<smil>\n<head>\n<layout>\n <root-layout/>\n<region id=\"Text\" top=\"70%\" left=\"0%\" height=\"30%\" width=\"100%\" fit=\"scroll\"/>\n<region id=\"Image\" top=\"0%\" left=\"0%\" height=\"70%\" width=\"100%\" fit=\"meet\"/>\n</layout>\n</head>\n<body>\n");

}

void sub_1D15CCEE4()
{
  void *v0;

  v0 = (void *)qword_1EFC63F00;
  qword_1EFC63F00 = (uint64_t)CFSTR("</body>\n</smil>\n");

}

void sub_1D15CCF3C()
{
  IMDRecentsController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDRecentsController);
  v1 = (void *)qword_1ED935E70;
  qword_1ED935E70 = (uint64_t)v0;

}

void sub_1D15CD0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D15CD0E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15CD0F8(uint64_t a1)
{

}

void sub_1D15CD100(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  if (sub_1D15CD184(a3))
  {
    v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v5)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    objc_msgSend(v5, "addObject:", v9);
  }

}

BOOL sub_1D15CD184(void *a1)
{
  id v1;
  void *v2;
  double v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "timeIntervalSinceNow");
    v4 = v3 < 0.0;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id sub_1D15CD614(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "recordID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "recordName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id sub_1D15CD658(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "_dataForKey:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  JWDecodeDictionary();
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id sub_1D15CD694(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "_arrayForKey:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "__imArrayByApplyingBlock:", &unk_1E922F000);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t sub_1D15CD6D4()
{
  return JWDecodeDictionary();
}

id sub_1D15CD6DC(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "_assetForKey:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "fileURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1D15CDBA0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15CDB54);
  }
  _Unwind_Resume(a1);
}

void sub_1D15CE34C()
{
  IMDCKUpdateSyncController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDCKUpdateSyncController);
  v1 = (void *)qword_1ED935E78;
  qword_1ED935E78 = (uint64_t)v0;

}

uint64_t sub_1D15CE4E4(uint64_t a1)
{
  void *v2;

  objc_msgSend(*(id *)(a1 + 32), "recordZoneManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deleteUpdateZone");

  return objc_msgSend(*(id *)(a1 + 32), "clearLocalSyncState:", 3);
}

uint64_t sub_1D15CE670(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Resetting the sync token to nil", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", 0);
}

uint64_t sub_1D15CEAB8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordRead_);
}

uint64_t sub_1D15CEAC4(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordDeleted_type_);
}

uint64_t sub_1D15CEAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onChangeTokenUpdated:token:data:", a2, a3, a4);
}

uint64_t sub_1D15CEAE8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordZoneFetchComplete_token_tokenData_moreComing_error_);
}

uint64_t sub_1D15CEB04(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onReadComplete_error_activity_completion_);
}

void sub_1D15CEC8C(uint64_t a1)
{
  id v2;

  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleMessageUpdate:", *(_QWORD *)(a1 + 32));

}

uint64_t sub_1D15CEF00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLatestSyncToken:", *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D15CF4B0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15CF4C0(uint64_t a1)
{

}

void sub_1D15CF4C8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[16];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Attempting to create update zone", buf, 2u);
    }

  }
  v3 = objc_msgSend(*(id *)(a1 + 32), "_zoneCreated");
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;
  }
  else
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "** Failed to create update zone **", v9, 2u);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", IMDCKUpdateSyncControllerErrorDomain, 1, 0);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;
  }

}

void sub_1D15CF7C0(uint64_t a1, char a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled(v5))
  {
    OSLogHandleForIMFoundationCategory();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_1D1413000, v7, OS_LOG_TYPE_INFO, "Error creating update zone %@", (uint8_t *)&v8, 0xCu);
    }

  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));

}

void sub_1D15CFA14(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v5;
  uint64_t v6;
  id v7;

  v7 = a3;
  if ((_DWORD)a2
    && (v5 = +[IMDCKUpdateSyncController stepAfter:](IMDCKUpdateSyncController, "stepAfter:", *(_QWORD *)(a1 + 56))) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "_writeUpdatesWithType:updateStep:activity:completion:", *(_QWORD *)(a1 + 64), v5, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    if (v6)
      (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v7);
  }

}

void sub_1D15CFCF0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D15CFD9C;
  v10[3] = &unk_1E922F048;
  v7 = *(_QWORD *)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v8 = v6;
  v9 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v10);

}

uint64_t sub_1D15CFD9C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordT1Write_error_recordNameToRowIDMap_);
}

void sub_1D15CFDB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D15CFE64;
  v9[3] = &unk_1E922F070;
  v6 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = v6;
  v7 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v5;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v8 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

uint64_t sub_1D15CFE64(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count");
  objc_msgSend(*(id *)(a1 + 32), "_numberOfRecordsToFetchPerBatch");
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onWriteT1Complete_error_shouldWriteMore_activity_completion_);
}

void sub_1D15D062C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1D15D06D8;
  v10[3] = &unk_1E922F048;
  v7 = *(_QWORD *)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v8 = v6;
  v9 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v10);

}

uint64_t sub_1D15D06D8(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onRecordT2Write_error_recordNameToItemMap_);
}

void sub_1D15D06F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D15D07A0;
  v9[3] = &unk_1E922F070;
  v6 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = v6;
  v7 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v5;
  v11 = v7;
  v12 = *(id *)(a1 + 48);
  v8 = v5;
  dispatch_async(MEMORY[0x1E0C80D38], v9);

}

uint64_t sub_1D15D07A0(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count");
  objc_msgSend(*(id *)(a1 + 32), "_numberOfRecordsToFetchPerBatch");
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__onWriteT2Complete_error_shouldWriteMore_activity_completion_);
}

void sub_1D15D14F4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "messagesPendingUpdateT1ToCloudKitWithLimit:", objc_msgSend(*(id *)(a1 + 32), "_numberOfRecordsToFetchPerBatch"));

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v27;
    *(_QWORD *)&v5 = 138412290;
    v24 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v27 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v7);
        v9 = (void *)MEMORY[0x1E0D398B8];
        +[IMDRecordZoneManager sharedInstance](IMDRecordZoneManager, "sharedInstance", v24);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "updateRecordZoneID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMDCKRecordSaltManager sharedInstance](IMDCKRecordSaltManager, "sharedInstance");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "cachedSalt");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(v9, "createCKRecordForUpdateT1:zoneID:salt:", v8, v11, v13);

        if (v14)
        {
          v16 = *(void **)(a1 + 40);
          objc_msgSend(v8, "objectForKey:", CFSTR("ROWID"));
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "recordID");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "recordName");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "setObject:forKey:", v17, v19);

          objc_msgSend(*(id *)(a1 + 48), "addObject:", v14);
        }
        else
        {
          if (IMOSLoggingEnabled(v15))
          {
            OSLogHandleForIMFoundationCategory();
            v20 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = v24;
              v31 = v8;
              _os_log_impl(&dword_1D1413000, v20, OS_LOG_TYPE_INFO, "**** T1 Update item [%@] could not be converted to CKRecord, marking it as clean and moving on.", buf, 0xCu);
            }

          }
          objc_msgSend(v8, "objectForKey:", CFSTR("ROWID"));
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v22 = objc_msgSend(v21, "longLongValue");

          +[IMDMessageStore sharedInstance](IMDMessageStore, "sharedInstance");
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v23, "markMessageAsCleanWithROWID:", v22);

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
    }
    while (v4);
  }

}

void sub_1D15D1AAC(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  __int128 v20;
  id obj;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[4];
  uint64_t v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  +[IMDChatRegistry sharedInstance](IMDChatRegistry, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)objc_msgSend(v2, "messagesPendingUpdateT2ToCloudKitWithLimit:", objc_msgSend(*(id *)(a1 + 32), "_numberOfRecordsToFetchPerBatch"));

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
  if (v4)
  {
    v6 = *(_QWORD *)v23;
    *(_QWORD *)&v5 = 138412290;
    v20 = v5;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v23 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v7);
        v9 = (void *)MEMORY[0x1E0D398B8];
        +[IMDRecordZoneManager sharedInstance](IMDRecordZoneManager, "sharedInstance", v20);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "updateRecordZoneID");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        +[IMDCKRecordSaltManager sharedInstance](IMDCKRecordSaltManager, "sharedInstance");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "cachedSalt");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (void *)objc_msgSend(v9, "createCKRecordForUpdateT2:zoneID:salt:", v8, v11, v13);

        if (v14)
        {
          v16 = *(void **)(a1 + 40);
          objc_msgSend(v14, "recordID");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "recordName");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "setObject:forKey:", v8, v18);

          objc_msgSend(*(id *)(a1 + 48), "addObject:", v14);
        }
        else if (IMOSLoggingEnabled(v15))
        {
          OSLogHandleForIMFoundationCategory();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v20;
            v27 = v8;
            _os_log_impl(&dword_1D1413000, v19, OS_LOG_TYPE_INFO, "**** T2 Update item [%@] could not be converted to CKRecord.", buf, 0xCu);
          }

        }
        ++v7;
      }
      while (v4 != v7);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    }
    while (v4);
  }

}

void sub_1D15D2108(void *a1, uint64_t a2, void *a3)
{
  _xpc_activity_s *v4;
  _xpc_activity_s *v5;

  v4 = a3;
  if (v4)
  {
    v5 = v4;
    if (xpc_activity_get_state(v4) == 4)
      _IMWarn();
    else
      objc_msgSend(a1, "setXPCActivity:", v5);
    v4 = v5;
  }

}

void sub_1D15D228C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  NSObject *v8;
  const __CFString *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  const __CFString *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  const __CFString *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = IMOSLoggingEnabled(v6);
  if (!v5)
  {
    if (v7)
    {
      OSLogHandleForIMFoundationCategory();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = CFSTR("NO");
        *(_DWORD *)buf = 138412802;
        if (!v6)
          v25 = CFSTR("YES");
        v33 = v24;
        v34 = 2112;
        v35 = v25;
        v36 = 2112;
        v37 = v6;
        _os_log_impl(&dword_1D1413000, v23, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMS/MMS message with GUID (%@). Success = (%@), error = (%@).", buf, 0x20u);
      }

    }
    objc_msgSend(*(id *)(a1 + 48), "objectForKey:", IMDCTMessageDictionaryTypeKey);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 48), "objectForKey:", IMDCTMessageDictionarySenderKey);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@.smsdata"), v14, *(_QWORD *)(a1 + 32));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D398A8], "writeMessagePayloadToTemporaryDirectory:fileName:", *(_QWORD *)(a1 + 48), v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMBlastdoor sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:](IMBlastdoor, "sendBlastDoorError:guid:messageTypeString:senderURI:senderToken:messageContext:payloadAttachmentURL:", v6, *(_QWORD *)(a1 + 32), v14, v22, 0, 0, v27);
    v28 = *(_QWORD *)(a1 + 64);
    if (v28)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v28 + 16))(v28, 0, 0, 0);

    goto LABEL_19;
  }
  if (v7)
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = CFSTR("NO");
      v10 = *(_QWORD *)(a1 + 32);
      if (!v6)
        v9 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      v33 = v10;
      v34 = 2112;
      v35 = v9;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMS/MMS message with GUID (%@). Success = (%@).", buf, 0x16u);
    }

  }
  MEMORY[0x1D17EA3EC](CFSTR("BlastDoorSMSMessage"), CFSTR("BlastDoor"));
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v11 = *(void **)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 48);
    v13 = v5;
    objc_msgSend(v11, "_messageDictionaryToRelayWithIncomingMessageDictionary:smsMessage:", v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "relayController");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "GUID");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 40), "service");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "internalName");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "_prepareSMSRelayBlockForMessageDictionary:messageGUID:serviceName:", v14, v16, v18);

    v19 = *(void **)(a1 + 40);
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(unsigned __int8 *)(a1 + 72);
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_1D15D2664;
    v29[3] = &unk_1E922F098;
    v30 = *(id *)(a1 + 32);
    v31 = *(id *)(a1 + 64);
    objc_msgSend(v19, "_releasePendingMessagesAndProcessReceivedSMSMessage:storageContext:receivedViaRelay:completionBlock:", v13, v20, v21, v29);

    v22 = v30;
LABEL_19:

  }
}

void sub_1D15D2664(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  id v15;
  __int16 v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  if (IMOSLoggingEnabled(v7))
  {
    OSLogHandleForIMFoundationCategory();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = CFSTR("NO");
      v12 = 138412802;
      if ((_DWORD)a2)
        v10 = CFSTR("YES");
      v13 = v9;
      v14 = 2112;
      v15 = v7;
      v16 = 2112;
      v17 = v10;
      _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "_processReceivedSMSMessage for original GUID (%@) parsed GUID (%@) returned (%@).", (uint8_t *)&v12, 0x20u);
    }

  }
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, uint64_t, id, uint64_t))(v11 + 16))(v11, a2, v7, a4);

}

uint64_t sub_1D15D28E0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__processReceivedSMSMessage_storageContext_receivedViaRelay_completionBlock_);
}

void sub_1D15D2AB8(uint64_t a1, void *a2, int a3, void *a4, double a5, double a6)
{
  id v11;
  id v12;
  NSObject *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _OWORD v19[2];
  uint64_t v20;
  uint8_t buf[32];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a4;
  if (IMOSLoggingEnabled(v12))
  {
    OSLogHandleForIMFoundationCategory();
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      v14 = CFSTR("NO");
      if (a3)
        v14 = CFSTR("YES");
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v12;
      _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Generated preview for SMS attachment part, success %@ error %@", buf, 0x16u);
    }

  }
  if ((a3 & 1) != 0)
  {
    v22 = 0;
    memset(buf, 0, sizeof(buf));
    IMClientPreviewConstraints();
    *(double *)v19 = a5;
    *((double *)v19 + 1) = a6;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v19, "{CGSize=dd}");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v19[0] = *(_OWORD *)buf;
    v19[1] = *(_OWORD *)&buf[16];
    v20 = v22;
    objc_msgSend(v16, "updateTransfer:withPreviewSize:forConstraints:", v11, v15, v19);

  }
  else
  {
    +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(a1 + 32), "guid");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "failTransferPreviewGeneration:", v18);

  }
}

uint64_t sub_1D15D8174(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15D8184(uint64_t a1)
{

}

void sub_1D15D818C(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  void *v34;
  void *v35;
  void *v36;
  int v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(void **)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 48), "accountID");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 56), "sender");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "assignTransfer:toAccount:otherPerson:", v9, v11, v12);

  v13 = *(void **)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  objc_msgSend(v7, "path");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "acceptTransfer:path:", v14, v15);

  +[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "transferForGUID:", *(_QWORD *)(a1 + 40));
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v19 = *(void **)(v18 + 40);
  *(_QWORD *)(v18 + 40) = v17;

  objc_msgSend(*(id *)(a1 + 64), "addObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40));
  if ((a2 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "path");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v20, "fileExistsAtPath:", v21);

    if (v22)
    {
      v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
      if (v23)
      {
        v24 = IMOSLoggingEnabled(objc_msgSend(v23, "_setLocalURL:", v7));
        if ((_DWORD)v24)
        {
          OSLogHandleForIMFoundationCategory();
          v25 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            v37 = 138412290;
            v38 = v7;
            _os_log_impl(&dword_1D1413000, v25, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", (uint8_t *)&v37, 0xCu);
          }

        }
        if (IMOSLoggingEnabled(v24))
        {
          OSLogHandleForIMFoundationCategory();
          v26 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            v27 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
            v37 = 138412290;
            v38 = v27;
            _os_log_impl(&dword_1D1413000, v26, OS_LOG_TYPE_INFO, "  => Start finalizing file transfer: %@", (uint8_t *)&v37, 0xCu);
          }

        }
        objc_msgSend(*(id *)(a1 + 32), "startFinalizingTransfer:", *(_QWORD *)(a1 + 40));
        goto LABEL_33;
      }
      if (!IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "failTransfer:error:", *(_QWORD *)(a1 + 40), 0)))
        goto LABEL_33;
      OSLogHandleForIMFoundationCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        v36 = *(void **)(a1 + 40);
        v37 = 138412290;
        v38 = v36;
        _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "No file transfer generated for guid: %@", (uint8_t *)&v37, 0xCu);
      }
    }
    else
    {
      if (!IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "failTransfer:error:", *(_QWORD *)(a1 + 40), 0)))
        goto LABEL_33;
      OSLogHandleForIMFoundationCategory();
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        v35 = *(void **)(a1 + 40);
        v37 = 138412290;
        v38 = v35;
        _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", (uint8_t *)&v37, 0xCu);
      }
    }
LABEL_32:

    goto LABEL_33;
  }
  objc_msgSend(v8, "domain");
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v28, "isEqualToString:", *MEMORY[0x1E0D37F78]))
  {

    goto LABEL_21;
  }
  v29 = objc_msgSend(v8, "code");

  if (v29 != 28)
  {
LABEL_21:
    if (!IMOSLoggingEnabled(objc_msgSend(*(id *)(a1 + 32), "failTransfer:error:", *(_QWORD *)(a1 + 40), v8)))
      goto LABEL_33;
    OSLogHandleForIMFoundationCategory();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      v34 = *(void **)(a1 + 40);
      v37 = 138412290;
      v38 = v34;
      _os_log_impl(&dword_1D1413000, v33, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", (uint8_t *)&v37, 0xCu);
    }
    goto LABEL_32;
  }
  if (IMOSLoggingEnabled(v30))
  {
    OSLogHandleForIMFoundationCategory();
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      v32 = *(void **)(a1 + 40);
      v37 = 138412290;
      v38 = v32;
      _os_log_impl(&dword_1D1413000, v31, OS_LOG_TYPE_INFO, "Transfer rejected: %@", (uint8_t *)&v37, 0xCu);
    }

  }
  objc_msgSend(*(id *)(a1 + 32), "rejectTransfer:", *(_QWORD *)(a1 + 40));
LABEL_33:

}

void sub_1D15D8674(_QWORD *a1, int a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = IMOSLoggingEnabled(v8);
  if ((_DWORD)v9)
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "MMS safe render generation complete.", buf, 2u);
    }

  }
  if (v8 && IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = a1[4];
      *(_DWORD *)buf = 138412546;
      v26 = v12;
      v27 = 2112;
      v28 = v8;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Error decontaminating MMS transfer: %@ error: %@", buf, 0x16u);
    }

  }
  if (a2 && (v13 = objc_msgSend((id)a1[5], "isEqual:", v7), (v13 & 1) != 0))
  {
    if (IMOSLoggingEnabled(v13))
    {
      OSLogHandleForIMFoundationCategory();
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = a1[5];
        *(_DWORD *)buf = 138412290;
        v26 = v15;
        _os_log_impl(&dword_1D1413000, v14, OS_LOG_TYPE_INFO, "Generating safe render succeeded, but still using the original path since we cannot transcode the entire asset: %@", buf, 0xCu);
      }

    }
    v16 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = a1[5];
    v24 = 0;
    v19 = objc_msgSend(v17, "removeItemAtURL:error:", v18, &v24);
    v16 = v24;

    if ((v19 & 1) == 0 && IMOSLoggingEnabled(v20))
    {
      OSLogHandleForIMFoundationCategory();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        v22 = a1[5];
        *(_DWORD *)buf = 138412546;
        v26 = v22;
        v27 = 2112;
        v28 = v16;
        _os_log_impl(&dword_1D1413000, v21, OS_LOG_TYPE_INFO, "Error removing MMS transfer: %@ error: %@", buf, 0x16u);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0D37F78], 28, 0);
    v23 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v23;
  }
  (*(void (**)(void))(a1[6] + 16))();

}

void sub_1D15D8994(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  uint64_t v25;
  _DWORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  objc_msgSend(*(id *)(a1 + 32), "setCategory:", a2);
  objc_msgSend(*(id *)(a1 + 32), "setSubCategory:", a3);
  objc_msgSend(*(id *)(a1 + 32), "setSpamExtensionName:", v7);
  objc_msgSend(*(id *)(a1 + 40), "findChatAndLinkMessage:context:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "chatIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D39920], "sharedInstance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:", v9);

  if (*(_QWORD *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 40), "tapbackInterpreter");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "interpretMessageItem:inChat:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(_QWORD *)(a1 + 48));
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

  }
  if (*(int *)(a1 + 72) >= 1)
  {
    if (IMOSLoggingEnabled(v11))
    {
      OSLogHandleForIMFoundationCategory();
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        v17 = *(_DWORD *)(a1 + 72);
        v26[0] = 67109120;
        v26[1] = v17;
        _os_log_impl(&dword_1D1413000, v16, OS_LOG_TYPE_INFO, " => This is a replace message for ID: %d", (uint8_t *)v26, 8u);
      }

    }
    objc_msgSend(*(id *)(a1 + 40), "didReceiveReplaceMessageID:forChat:style:", *(unsigned int *)(a1 + 72), v9, objc_msgSend(*(id *)(a1 + 32), "style"));
  }
  objc_msgSend(*(id *)(a1 + 32), "senderUnformatted");
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend(*(id *)(a1 + 32), "senderUnformatted");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "setOriginalUnformattedID:", v19);

  }
  objc_msgSend(*(id *)(a1 + 40), "didReceiveMessage:forChat:style:fromIDSID:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v9, objc_msgSend(*(id *)(a1 + 32), "style"), 0);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "isSMSFilterSyncEnabled");

  if (v21)
  {
    v22 = *(_BYTE *)(a1 + 76) == 0;
    objc_msgSend(*(id *)(a1 + 40), "relayController");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    v25 = *(_QWORD *)(a1 + 56);
    if (v22)
      objc_msgSend(v23, "_executeSMSRelayBlockForMessageWithGUID:category:subCategory:", v25, a2, a3);
    else
      objc_msgSend(v23, "_clearSMSRelayMapForMessageWithGUID:", v25);

  }
}

void sub_1D15D9668(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15D9624);
  }
  _Unwind_Resume(a1);
}

void sub_1D15DBB68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D15DBCE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D15DC0A4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v5[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Initial sync device Not writing up messages", v5, 2u);
    }

  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v3 + 16))(v3, 1, 0);
  return objc_msgSend(*(id *)(a1 + 32), "_noteSyncEnded");
}

uint64_t sub_1D15DCC90(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fullfillWithValue:", *(_QWORD *)(a1 + 40));
}

void sub_1D15DCEE4(uint64_t a1, void *a2)
{
  id v3;
  const char *string;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  id v10;
  _BYTE v11[24];
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  string = xpc_dictionary_get_string(v3, (const char *)*MEMORY[0x1E0C81298]);
  if (string)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", string);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_get_value(v3, "UserInfo");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)v6;
    if (v6)
    {
      v6 = _CFXPCCreateCFObjectFromXPCObject();
      v8 = (void *)v6;
    }
    else
    {
      v8 = 0;
    }
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v11 = 138412802;
        *(_QWORD *)&v11[4] = objc_opt_class();
        *(_WORD *)&v11[12] = 2112;
        *(_QWORD *)&v11[14] = v5;
        *(_WORD *)&v11[22] = 2112;
        v12 = v8;
        v10 = *(id *)&v11[4];
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "%@ received event with name %@ and user info %@.", v11, 0x20u);

      }
    }
    objc_msgSend(*(id *)(a1 + 32), "didReceiveEventWithName:userInfo:", v5, v8, *(_OWORD *)v11, *(_QWORD *)&v11[16], v12);

  }
}

void sub_1D15DD130(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "delegateToQueue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v2;
  if (*(_QWORD *)(a1 + 40))
    v3 = *(_QWORD *)(a1 + 40);
  else
    v3 = MEMORY[0x1E0C80D38];
  objc_msgSend(v2, "setObject:forKey:", v3, *(_QWORD *)(a1 + 48));

}

void sub_1D15DD218(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "delegateToQueue");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "removeObjectForKey:", *(_QWORD *)(a1 + 40));

}

void sub_1D15DD348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D15DD360(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15DD370(uint64_t a1)
{

}

void sub_1D15DD378(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "delegateToQueue");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 40));
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1D15DD48C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[6];
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(*(id *)(a1 + 32), "delegateToQueue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v16;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v16 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v6);
        objc_msgSend(*(id *)(a1 + 32), "delegateToQueue");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectForKey:", v7);
        v9 = objc_claimAutoreleasedReturnValue();

        if (v9)
        {
          v12[0] = MEMORY[0x1E0C809B0];
          v12[1] = 3221225472;
          v12[2] = sub_1D15DD620;
          v12[3] = &unk_1E922B838;
          v10 = *(_QWORD *)(a1 + 32);
          v11 = *(void **)(a1 + 40);
          v12[4] = v7;
          v12[5] = v10;
          v13 = v11;
          v14 = *(id *)(a1 + 48);
          dispatch_async(v9, v12);

        }
        ++v6;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v4);
  }

}

uint64_t sub_1D15DD620(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_eventStreamHandler_didReceiveEventWithName_userInfo_);
}

void sub_1D15DD720()
{
  IMDOffGridAvailabilityTracker *v0;
  void *v1;

  v0 = objc_alloc_init(IMDOffGridAvailabilityTracker);
  v1 = (void *)qword_1EFC63F10;
  qword_1EFC63F10 = (uint64_t)v0;

}

void sub_1D15DDC30(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_updateTracker");

}

void sub_1D15DDE28(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a3;
  objc_msgSend(v3, "handle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "expirationDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D15DDED8;
  v8[3] = &unk_1E922C100;
  v9 = v4;
  v10 = v5;
  v6 = v5;
  v7 = v4;
  objc_msgSend(v7, "isOffGridModeWithCompletion:", v8);

}

void sub_1D15DDED8(uint64_t a1, char a2)
{
  _QWORD block[4];
  id v5;
  id v6;
  char v7;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15DDF68;
  block[3] = &unk_1E922F1F0;
  v5 = *(id *)(a1 + 32);
  v7 = a2;
  v6 = *(id *)(a1 + 40);
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void sub_1D15DDF68(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  const __CFString *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BOOL4 v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  const __CFString *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(*(id *)(a1 + 32), "ID");
      v3 = objc_claimAutoreleasedReturnValue();
      v4 = (void *)v3;
      v5 = CFSTR("YES");
      if (!*(_BYTE *)(a1 + 48))
        v5 = CFSTR("NO");
      v19 = 138412546;
      v20 = v3;
      v21 = 2112;
      v22 = v5;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Handle %@ is off grid %@", (uint8_t *)&v19, 0x16u);

    }
  }
  if (*(_BYTE *)(a1 + 48))
  {
    +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "anySessionForServiceName:", *MEMORY[0x1E0D38F68]);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = *(void **)(a1 + 32);
    v8 = a1 + 32;
    v10 = *(_BYTE *)(v8 + 16) != 0;
    objc_msgSend(v9, "ID");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "didReceiveOffGridStatus:forID:messageGUID:account:", v10, v11, 0, 0);

    +[IMDOffGridAvailabilityTracker sharedTracker](IMDOffGridAvailabilityTracker, "sharedTracker");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stopTrackingHandle:", *(_QWORD *)v8);

LABEL_9:
    return;
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "earlierDate:", *(_QWORD *)(a1 + 40));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14 == *(void **)(a1 + 40);

  if (v15)
  {
    if (IMOSLoggingEnabled(v16))
    {
      OSLogHandleForIMFoundationCategory();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        objc_msgSend(*(id *)(a1 + 32), "ID");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = 138412290;
        v20 = (uint64_t)v18;
        _os_log_impl(&dword_1D1413000, v17, OS_LOG_TYPE_INFO, "Handle %@ is expiring from tracking", (uint8_t *)&v19, 0xCu);

      }
    }
    +[IMDOffGridAvailabilityTracker sharedTracker](IMDOffGridAvailabilityTracker, "sharedTracker");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stopTrackingHandle:", *(_QWORD *)(a1 + 32));
    goto LABEL_9;
  }
}

void sub_1D15DE898(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  int v8;
  NSObject *v9;
  const __CFString *v10;
  NSObject *v11;
  const __CFString *v12;
  int v13;
  const __CFString *v14;
  __int16 v15;
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a4;
  v8 = IMOSLoggingEnabled(v7);
  if (v6)
  {
    if (v8)
    {
      OSLogHandleForIMFoundationCategory();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v10 = CFSTR("NO");
        if (!v7)
          v10 = CFSTR("YES");
        v13 = 138412290;
        v14 = v10;
        _os_log_impl(&dword_1D1413000, v9, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMSFIlteringSettingsMessage. Success = (%@).", (uint8_t *)&v13, 0xCu);
      }

    }
    MEMORY[0x1D17EA3EC](CFSTR("BlastDoorSMSFilteringSettingsMessage"), CFSTR("BlastDoor"));
    if ((objc_opt_isKindOfClass() & 1) != 0)
      objc_msgSend(*(id *)(a1 + 32), "_processReceivedSMSFilteringSettingsMessage:deviceID:", v6, *(_QWORD *)(a1 + 40));
  }
  else if (v8)
  {
    OSLogHandleForIMFoundationCategory();
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = CFSTR("NO");
      if (!v7)
        v12 = CFSTR("YES");
      v13 = 138412546;
      v14 = v12;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMSFilteringSettingsMessage. Success = (%@), error = (%@).", (uint8_t *)&v13, 0x16u);
    }

  }
}

void sub_1D15DEC60()
{
  IMDFilteringController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDFilteringController);
  v1 = (void *)qword_1ED936138;
  qword_1ED936138 = (uint64_t)v0;

}

void sub_1D15DED94(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint8_t buf[16];

  v7 = (void *)MEMORY[0x1D17EA968]();
  v8 = a2;
  v9 = a5;
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "handleThirdPartyFilterUnregistered", buf, 2u);
    }

  }
  v13 = v8;
  v14 = v9;
  v11 = v9;
  v12 = v8;
  im_dispatch_after();

  objc_autoreleasePoolPop(v7);
}

void sub_1D15DEEB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  uint8_t buf[16];

  v7 = (void *)MEMORY[0x1D17EA968]();
  v8 = a2;
  v9 = a5;
  if (IMOSLoggingEnabled(v9))
  {
    OSLogHandleForIMFoundationCategory();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v10, OS_LOG_TYPE_INFO, "handleThirdPartyFilterUnregistered", buf, 2u);
    }

  }
  v13 = v8;
  v14 = v9;
  v11 = v9;
  v12 = v8;
  im_dispatch_after();

  objc_autoreleasePoolPop(v7);
}

void sub_1D15DEFD4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  void *v7;
  uint8_t buf[16];

  v3 = (void *)MEMORY[0x1D17EA968]();
  v4 = a2;
  if (IMOSLoggingEnabled(v4))
  {
    OSLogHandleForIMFoundationCategory();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "handleChangeOfFilterParamsStatus", buf, 2u);
    }

  }
  v7 = v4;
  v6 = v4;
  im_dispatch_after();

  objc_autoreleasePoolPop(v3);
}

void sub_1D15DF84C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15DF738);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D15E01C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15E01D4(uint64_t a1)
{

}

id sub_1D15E01DC()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EFC63F30;
  v7 = qword_1EFC63F30;
  if (!qword_1EFC63F30)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1D15E30D8;
    v3[3] = &unk_1E922B000;
    v3[4] = &v4;
    sub_1D15E30D8((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D15E027C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D15E0294(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  int v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  _QWORD block[5];
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = (void *)a1[4];
        *(_DWORD *)buf = 138412546;
        v25 = v9;
        v26 = 2112;
        v27 = v7;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Performed spam extension capabilities query request for: %@ and received error: %@", buf, 0x16u);
      }

    }
    v10 = 0;
    v11 = 0;
  }
  else
  {
    objc_msgSend(v5, "transactionalSubActions");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "promotionalSubActions");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (IMOSLoggingEnabled(v10))
    {
      OSLogHandleForIMFoundationCategory();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        v25 = v11;
        v26 = 2112;
        v27 = v10;
        _os_log_impl(&dword_1D1413000, v12, OS_LOG_TYPE_INFO, "Spam extension query response received: %@, %@", buf, 0x16u);
      }

    }
  }
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    objc_msgSend(MEMORY[0x1E0D399E8], "executeCompletionBlockForFilterParamsUpdate:promo:", v11, v10);
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "isSMSFilterSyncEnabled");

    if (v14)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_1D15E0564;
      block[3] = &unk_1E92287A0;
      block[4] = a1[5];
      dispatch_async(MEMORY[0x1E0C80D38], block);
    }
  }
  else
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = sub_1D15E0600;
    v19[3] = &unk_1E9229280;
    v20 = v11;
    v15 = v10;
    v16 = a1[5];
    v21 = v15;
    v22 = v16;
    dispatch_async(MEMORY[0x1E0C80D38], v19);

  }
  v17 = *(_QWORD *)(a1[6] + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = 0;

}

uint64_t sub_1D15E0564(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Performed spam extension capabilities query request. Relaying updated sms filter settings", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_relaySMSFilteringSettingsForFilterState:", 1);
}

void sub_1D15E0600(_QWORD *a1)
{
  void *v2;
  int v3;
  _QWORD block[5];

  objc_msgSend(MEMORY[0x1E0D399E8], "executeCompletionBlockForFilterParamsUpdate:promo:", a1[4], a1[5]);
  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSMSFilterSyncEnabled");

  if (v3)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D15E06A4;
    block[3] = &unk_1E92287A0;
    block[4] = a1[6];
    dispatch_async(MEMORY[0x1E0C80D38], block);
  }
}

uint64_t sub_1D15E06A4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Performed spam extension capabilities query request. Relaying updated sms filter settings", v4, 2u);
    }

  }
  return objc_msgSend(*(id *)(a1 + 32), "_relaySMSFilteringSettingsForFilterState:", 1);
}

uint64_t sub_1D15E0B40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_executeSpamCompletionBlockForMessageGuid:category:subCategory:receivedViaRelay:", *(_QWORD *)(a1 + 40), 0, 0, *(unsigned __int8 *)(a1 + 48));
}

id sub_1D15E0B58()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1EFC63F38;
  v7 = qword_1EFC63F38;
  if (!qword_1EFC63F38)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = sub_1D15E312C;
    v3[3] = &unk_1E922B000;
    v3[4] = &v4;
    sub_1D15E312C((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D15E0BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D15E0C10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD block[5];
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v6)
  {
    if (IMOSLoggingEnabled(v6))
    {
      OSLogHandleForIMFoundationCategory();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        v9 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        v24 = v9;
        v25 = 2112;
        v26 = (uint64_t)v7;
        _os_log_impl(&dword_1D1413000, v8, OS_LOG_TYPE_INFO, "Performed spam extension query request for: %@ and received error: %@", buf, 0x16u);
      }

    }
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v11 = objc_msgSend(v5, "action");
    v12 = objc_msgSend(MEMORY[0x1E0D399E8], "localizeSubAction:", objc_msgSend(v5, "subAction"));
    v10 = v12;
    if (v12)
    {
      v12 = objc_msgSend(MEMORY[0x1E0D399E8], "isValidSubAction:subAction:", v11, v12);
      if ((_DWORD)v12)
      {
        v12 = objc_msgSend(MEMORY[0x1E0D399F8], "isValidActiveFilterAction:subAction:", v11, v10);
        if (!(_DWORD)v12)
          v10 = 0;
      }
      else
      {
        v10 = 0;
      }
    }
    if (IMOSLoggingEnabled(v12))
    {
      OSLogHandleForIMFoundationCategory();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        v14 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        v24 = v14;
        v25 = 2048;
        v26 = v11;
        v27 = 2048;
        v28 = v10;
        _os_log_impl(&dword_1D1413000, v13, OS_LOG_TYPE_INFO, "Performed spam extension query request for: %@ and received response actionResponse: %ld, subActionResponse: %ld", buf, 0x20u);
      }

    }
  }
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    objc_msgSend(*(id *)(a1 + 40), "_executeSpamCompletionBlockForMessageGuid:category:subCategory:receivedViaRelay:", *(_QWORD *)(a1 + 48), v11, v10, *(unsigned __int8 *)(a1 + 64));
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1D15E0EB4;
    block[3] = &unk_1E922F288;
    v15 = *(void **)(a1 + 48);
    block[4] = *(_QWORD *)(a1 + 40);
    v19 = v15;
    v20 = v11;
    v21 = v10;
    v22 = *(_BYTE *)(a1 + 64);
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = 0;

}

uint64_t sub_1D15E0EB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_executeSpamCompletionBlockForMessageGuid:category:subCategory:receivedViaRelay:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
}

void sub_1D15E1278(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[16];

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8)
    && objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", *(_QWORD *)(a1 + 48)))
  {
    objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isSMSFilterSyncEnabled");

    v4 = *(void **)(a1 + 32);
    v5 = v3 ? objc_msgSend(v4, "_disableSpamFilteringAndRelay") : objc_msgSend(v4, "_disableSpamFiltering");
    if (IMOSLoggingEnabled(v5))
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Spam filter state changed to None", v7, 2u);
      }

    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
}

uint64_t sub_1D15E1F30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_relaySMSFilteringSettingsForFilterState:", 0);
}

Class sub_1D15E2FE0(uint64_t a1)
{
  Class result;

  sub_1D15E3034();
  result = objc_getClass("ILMessageFilterCapabilitiesQueryRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1D166C9E8();
  qword_1EFC63F20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1D15E3034()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!qword_1EFC63F28)
  {
    v1 = xmmword_1E922F2D0;
    v2 = 0;
    qword_1EFC63F28 = _sl_dlopen();
  }
  if (!qword_1EFC63F28)
    sub_1D166CA60(&v0);
}

Class sub_1D15E30D8(uint64_t a1)
{
  Class result;

  sub_1D15E3034();
  result = objc_getClass("ILMessageFilter");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1D166CADC();
  qword_1EFC63F30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1D15E312C(uint64_t a1)
{
  Class result;

  sub_1D15E3034();
  result = objc_getClass("ILMessageFilterQueryRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    sub_1D166CB54();
  qword_1EFC63F38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1D15E3180(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0D39840], "sharedFeatureFlags");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isSMSFilterSyncEnabled");

  v4 = *(void **)(a1 + 32);
  if (v3)
    return MEMORY[0x1E0DE7D20](v4, sel__checkAndUpdateFilterParamsForFilterExtension);
  else
    return objc_msgSend(v4, "_updateFilterParamsForFilterExtension");
}

uint64_t sub_1D15E31DC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__checkAndUpdateSMSSpamFilterExtensionForUnregisteredOrUpdatedPlugins_arePluginsRegistered_);
}

uint64_t sub_1D15E31EC(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__checkAndUpdateSMSSpamFilterExtensionForUnregisteredOrUpdatedPlugins_arePluginsRegistered_);
}

void sub_1D15E4AF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;

  v28 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  v20 = a7;
  v21 = a8;
  v22 = a9;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(id *)(v23 + 200);
  if (v24 != v20)
  {
    *(_QWORD *)(v23 + 200) = 0;

    if (objc_msgSend(v20, "length"))
    {
      v25 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithString:", v20);
      v26 = *(_QWORD *)(a1 + 32);
      v27 = *(void **)(v26 + 200);
      *(_QWORD *)(v26 + 200) = v25;

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_login_usernameAndPasswordReadyWithAccount:", *(_QWORD *)(a1 + 40));

}

void sub_1D15E52E4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15E5154);
  }
  _Unwind_Resume(a1);
}

void sub_1D15E5334(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, unsigned __int8 a10, char a11)
{
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  v24 = a3;
  v13 = a7;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(void **)(v14 + 120);
  *(_QWORD *)(v14 + 120) = 0;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 140))
  {
    if ((a9 & 1) != 0)
    {
      objc_msgSend(*(id *)(a1 + 40), "setLoginStatus:message:", 0, 0);
      objc_msgSend(*(id *)(a1 + 32), "disallowReconnection");
    }
    else if (objc_msgSend(v13, "length") && objc_msgSend(v24, "length"))
    {
      if ((objc_msgSend(v24, "isEqualToString:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112)) & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", v24, *MEMORY[0x1E0D36F00], 0);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "writeAccountDefaults:", v16);

      }
      if (*(id *)(*(_QWORD *)(a1 + 32) + 200) != v13)
      {
        v17 = objc_msgSend(v13, "copy");
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(void **)(v18 + 200);
        *(_QWORD *)(v18 + 200) = v17;

      }
      +[IMDDaemonPropertyManager sharedManager](IMDDaemonPropertyManager, "sharedManager");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a10);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "setValue:ofPersistentProperty:", v21, CFSTR("RememberPassword"));

      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 141) = 1;
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 141) = a10;
      objc_msgSend(*(id *)(a1 + 32), "_login_checkUsernameAndPasswordWithAccount:", *(_QWORD *)(a1 + 40));
    }
    else
    {
      if (a11)
      {
        objc_msgSend(*(id *)(a1 + 32), "broadcaster");
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(*(id *)(a1 + 40), "accountID");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "showForgotPasswordNotificationForAccount:", v23);

      }
      objc_msgSend(*(id *)(a1 + 40), "setLoginStatus:message:", 0, 0);
      objc_msgSend(*(id *)(a1 + 32), "autoReconnectWithAccount:", *(_QWORD *)(a1 + 40));
    }
  }

}

uint64_t sub_1D15E5668(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__doLoginIgnoringProxy_);
}

void sub_1D15E6008(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15E5FC0);
  }
  _Unwind_Resume(a1);
}

void sub_1D15E7600(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15E755CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D15E7BF0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15E7BD8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D15E8160(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1D15E8214(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_1D15E9198(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;

  objc_msgSend(a2, "handleInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  JWEncodeDictionary();
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

IMDHandle *sub_1D15E9E80(uint64_t a1, void *a2)
{
  id v2;
  IMDHandle *v3;
  void *v4;
  void *v5;
  void *v6;
  IMDHandle *v7;

  v2 = a2;
  v3 = [IMDHandle alloc];
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D36D90]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D36E10]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D36D68]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = -[IMDHandle initWithID:unformattedID:countryCode:personCentricID:](v3, "initWithID:unformattedID:countryCode:personCentricID:", v4, v5, v6, 0);
  return v7;
}

void sub_1D15EA658()
{
  IMDBadgeUtilities *v0;
  void *v1;

  v0 = objc_alloc_init(IMDBadgeUtilities);
  v1 = (void *)qword_1ED935E80;
  qword_1ED935E80 = (uint64_t)v0;

}

uint64_t sub_1D15EA9D4(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Rebuild unread message count", v5, 2u);
    }

  }
  return objc_msgSend(a2, "_rebuildUnreadMessageCount");
}

uint64_t sub_1D15EAB84(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__updateBadgeForUnreadCountChangeIfNeeded_);
}

void sub_1D15EABE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v4 = IMOSLoggingEnabled(a1);
  if (v3 == v2)
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9[0]) = 0;
        _os_log_impl(&dword_1D1413000, v5, OS_LOG_TYPE_INFO, "Not updating badge for unread count change.", (uint8_t *)v9, 2u);
      }

    }
  }
  else
  {
    if (v4)
    {
      OSLogHandleForIMFoundationCategory();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 40);
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
        v9[0] = 67109376;
        v9[1] = v8;
        v10 = 1024;
        v11 = v7;
        _os_log_impl(&dword_1D1413000, v6, OS_LOG_TYPE_INFO, "Unread count changed from %d to %d", (uint8_t *)v9, 0xEu);
      }

    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "_updateBadge");
  }
}

uint64_t sub_1D15EADD0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__updateBadgeForLastFailedMessageDateChangeIfNeeded_);
}

uint64_t sub_1D15EAE34(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(result + 32) + 32) != *(_QWORD *)(result + 40))
  {
    v1 = result;
    if (IMOSLoggingEnabled(result))
    {
      OSLogHandleForIMFoundationCategory();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v3 = *(_QWORD *)(v1 + 40);
        v4 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32);
        v7 = 134218240;
        v8 = v4;
        v9 = 2048;
        v10 = v3;
        _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Failed message date changed from %lld to %lld", (uint8_t *)&v7, 0x16u);
      }

    }
    v6 = *(void **)(v1 + 32);
    v5 = v1 + 32;
    objc_msgSend(v6, "_cacheFailureDate:", *(_QWORD *)(v5 + 8));
    objc_msgSend(*(id *)v5, "_compareLastFailureDateAndUpdateBadge:", *(_QWORD *)(v5 + 8));
    return objc_msgSend(*(id *)v5, "_stopSuppressingSound");
  }
  return result;
}

uint64_t sub_1D15EAF9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateBadge");
}

uint64_t sub_1D15EB030(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", *(_QWORD *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "pendingSatelliteMessagesPerService");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 40));

  return objc_msgSend(*(id *)(a1 + 32), "_updateBadge");
}

uint64_t sub_1D15EB094(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;

  result = objc_msgSend(a3, "integerValue");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1D15EB224(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setBadgeString_withCompletionHandler_);
}

void sub_1D15EB238(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  int v4;
  id v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  if (IMOSLoggingEnabled(v2))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Notification Center post badge string with error: [%@]", (uint8_t *)&v4, 0xCu);
    }

  }
}

void sub_1D15EB308()
{
  id v0;

  v0 = (id)CFPreferencesCopyAppValue(CFSTR("StoreDemoMode"), CFSTR("com.apple.demo-settings"));
  byte_1ED936118 = objc_msgSend(v0, "BOOLValue");

}

void sub_1D15EB424(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v3;
  __CFNotificationCenter *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[5];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1D15EB4F0, CFSTR("com.apple.IMSharedUtilities.IMUserLoginIntentChangedInternal"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v3, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1D15EB4F0, CFSTR("__kIMDBadgeUtilitiesLoginStatusChangedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v4, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1D15EB4F0, CFSTR("__kIMDBadgeUtilitiesOperationalAccountsChangedNotification"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(NSObject **)(v5 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15EB588;
  block[3] = &unk_1E92287A0;
  block[4] = v5;
  dispatch_async(v6, block);
}

uint64_t sub_1D15EB4F0(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v3, OS_LOG_TYPE_INFO, "Unexpected log out dependent value changed", v5, 2u);
    }

  }
  return objc_msgSend(a2, "checkIfUnexpectedlyLoggedOut");
}

uint64_t sub_1D15EB588(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_checkIfUnexpectedlyLoggedOut");
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 18) = 1;
  return result;
}

uint64_t sub_1D15EB5B8(uint64_t a1)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "_isUnexpectedlyLoggedOut");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1D15EB908(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 19) = *(_BYTE *)(a1 + 40);
  return objc_msgSend(*(id *)(a1 + 32), "_updateBadge");
}

id sub_1D15EBA9C(void *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  int v7;
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      objc_msgSend(a1, "remoteMembers");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = 138412290;
      v8 = v3;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "Filtering down participant list %@ to remove associated members", (uint8_t *)&v7, 0xCu);

    }
  }
  objc_msgSend(a1, "remoteMembers");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "__imSetByApplyingBlock:", &unk_1E922F590);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id sub_1D15EBBB0(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v2 = a2;
  objc_msgSend(v2, "association");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && !objc_msgSend(v3, "isPrimary"))
    v5 = 0;
  else
    v5 = v2;

  return v5;
}

void sub_1D15EBCEC(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];
  uint8_t buf[16];

  if (IMOSLoggingEnabled(a1))
  {
    OSLogHandleForIMFoundationCategory();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D1413000, v2, OS_LOG_TYPE_INFO, "TUConversation registered", buf, 2u);
    }

  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1D15EBDC0;
  block[3] = &unk_1E92287A0;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void sub_1D15EBDC0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[16];

  objc_msgSend(*(id *)(a1 + 32), "conversationManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addDelegate:queue:", *(_QWORD *)(a1 + 32), MEMORY[0x1E0C80D38]);

  if (IMOSLoggingEnabled(v3))
  {
    OSLogHandleForIMFoundationCategory();
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "Completed conversation manager setup for imagent", v5, 2u);
    }

  }
}

void sub_1D15EC6EC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D15EC670);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D15EC78C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D15EC79C(uint64_t a1)
{

}

void sub_1D15EC7A4(uint64_t a1, void *a2)
{
  void *v4;
  int v5;
  void *v6;
  uint64_t v7;
  id *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  BOOL v12;
  id v13;

  v13 = a2;
  objc_msgSend(v13, "serviceName");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0D38F68]);

  v6 = v13;
  if (v5)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = *(void **)(v7 + 40);
    v8 = (id *)(v7 + 40);
    v9 = v10;
    if (v10)
    {
      v11 = objc_msgSend(v9, "lastMessageTimeStampOnLoad");
      v12 = v11 < objc_msgSend(v13, "lastMessageTimeStampOnLoad");
      v6 = v13;
      if (!v12)
        goto LABEL_7;
      v8 = (id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    objc_storeStrong(v8, a2);
    v6 = v13;
  }
LABEL_7:

}

id sub_1D15EC850(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0DBD2F8];
  objc_msgSend(a2, "ID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "normalizedHandleWithDestinationID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t sub_1D15EC89C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handle");
}

void sub_1D15ECE3C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D15ECDBCLL);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1D15ECEC4(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  id v10;

  v10 = a2;
  objc_msgSend(v10, "messagesGroupUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "UUIDString");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 32), "groupID");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v7, "isEqualToString:", v8);

  if (v9)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }

}

id sub_1D15ECF78(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0DBD2F8];
  objc_msgSend(a2, "ID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "normalizedHandleWithDestinationID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t sub_1D15ECFC4(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handle");
}

id sub_1D15EDB70(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_msgSend(v2, "isLightweightMember");
  if ((_DWORD)v3)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v9 = 138412290;
        v10 = v2;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "This is a lightweight member - skipping: %@", (uint8_t *)&v9, 0xCu);
      }

    }
    v5 = 0;
  }
  else
  {
    objc_msgSend(v2, "handle");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "value");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    IMChatCanonicalIDSIDsForAddress();
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

void sub_1D15EDC8C(uint64_t a1, void *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  __int128 v19;
  uint64_t v20;
  id obj;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint8_t buf[4];
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v23 = a2;
  objc_msgSend(v23, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v25;
    v20 = *MEMORY[0x1E0D36D90];
    *(_QWORD *)&v3 = 138412290;
    v19 = v3;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v25 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * i);
        objc_msgSend(v23, "objectForKeyedSubscript:", v6, v19);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = objc_msgSend(v7, "integerValue");

        v10 = IMOSLoggingEnabled(v9);
        if (v8 == 1)
        {
          if (v10)
          {
            OSLogHandleForIMFoundationCategory();
            v11 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = v19;
              v32 = v6;
              _os_log_impl(&dword_1D1413000, v11, OS_LOG_TYPE_INFO, "Destination is registered for iMessage, adding to group: %@", buf, 0xCu);
            }

          }
          v12 = *(void **)(a1 + 32);
          v28 = v20;
          objc_msgSend(v6, "_stripFZIDPrefix");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = v13;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = v14;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v30, 1);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "guid");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(*(id *)(a1 + 40), "chatIdentifier");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v12, "invitePersonInfo:withMessage:toChatID:identifier:style:", v15, 0, v16, v17, objc_msgSend(*(id *)(a1 + 40), "style"));

        }
        else if (v10)
        {
          OSLogHandleForIMFoundationCategory();
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v19;
            v32 = v6;
            _os_log_impl(&dword_1D1413000, v18, OS_LOG_TYPE_INFO, "Destination is NOT registered for iMessage, skipping adding to group: %@", buf, 0xCu);
          }

        }
      }
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v2);
  }

}

id sub_1D15EE3C8(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  int v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = a2;
  v3 = objc_msgSend(v2, "isLightweightMember");
  if ((_DWORD)v3)
  {
    if (IMOSLoggingEnabled(v3))
    {
      OSLogHandleForIMFoundationCategory();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v9 = 138412290;
        v10 = v2;
        _os_log_impl(&dword_1D1413000, v4, OS_LOG_TYPE_INFO, "This is a lightweight member - skipping: %@", (uint8_t *)&v9, 0xCu);
      }

    }
    v5 = 0;
  }
  else
  {
    objc_msgSend(v2, "handle");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "value");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    IMChatCanonicalIDSIDsForAddress();
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

void sub_1D15EECA0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a4;
  v7 = a3;
  objc_msgSend(a1, "encryptedValuesByKey");
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, v6);

}

void sub_1D15EED08(void *a1, uint64_t a2, void *a3)
{
  const __CFString *v4;
  const __CFString *v5;
  __CFString *v6;

  v4 = a3;
  if (v4)
    v5 = v4;
  else
    v5 = &stru_1E92346B0;
  v6 = (__CFString *)v5;
  objc_msgSend(a1, "_setValue:forKey:");

}

void sub_1D15EED58(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;

  v4 = a3;
  if (v4)
    v5 = v4;
  else
    v5 = &unk_1E92717A0;
  v6 = v5;
  objc_msgSend(a1, "_setValue:forKey:");

}

void sub_1D15EEDA8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  id v9;

  v6 = a3;
  if (!v6)
    v6 = &unk_1E92717A0;
  v9 = v6;
  v7 = a4;
  objc_msgSend(a1, "valuesByKey");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, v7);

}

void sub_1D15EEE18(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  v9 = a3;
  v6 = a4;
  v7 = (uint64_t)v9;
  v8 = v6;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "data");
    v7 = objc_claimAutoreleasedReturnValue();
  }
  v10 = (id)v7;
  objc_msgSend(a1, "_setValue:forKey:", v7, v8);

}

void sub_1D15EEE88(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  v4 = a3;
  if (v4)
    v5 = v4;
  else
    v5 = (id)MEMORY[0x1E0C9AA60];
  v6 = v5;
  objc_msgSend(a1, "_setValue:forKey:");

}

void *sub_1D15EEED8(void *a1, const char *a2, uint64_t a3)
{
  if (a3)
    return (void *)objc_msgSend(a1, "setObject:forKey:");
  return a1;
}

void sub_1D15EEEE4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;

  v9 = a3;
  v6 = a4;
  v7 = v9;
  if (!v9)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v10 = v7;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(v7, "__im_nanosecondTimeInterval"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(a1, "_setCKRecordNumber:forKey:", v8, v6);

}

id sub_1D15EEF7C(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0C99D68];
  objc_msgSend(a1, "_numberForKey:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)objc_msgSend(v2, "longLongValue"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id sub_1D15EEFC8(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;

  v4 = a3;
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(a1, "encryptedValuesByKey");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "objectForKeyedSubscript:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_1D15EF034(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(a1, "_valueForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_1D15EF084(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(a1, "_valueForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_1D15EF0D4(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(a1, "_valueForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_1D15EF124(void *a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;

  v4 = a3;
  if (objc_msgSend(v4, "length"))
  {
    objc_msgSend(a1, "objectForKey:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_1D15EF174(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(a1, "_dataForKey:", CFSTR("msgProto4"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0D398B8], "protobufForCompressedDataP4:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!v3
    || !objc_msgSend(v3, "hasActualParentChatId")
    || (objc_msgSend(v4, "actualParentChatId"), (v5 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    objc_msgSend(a1, "_stringForKey:", CFSTR("chatID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

void sub_1D15EF5D8()
{
  IMDSpotlightIndexDelegate *v0;
  void *v1;

  v0 = objc_alloc_init(IMDSpotlightIndexDelegate);
  v1 = (void *)qword_1ED935E88;
  qword_1ED935E88 = (uint64_t)v0;

}

uint64_t sub_1D15EFFBC(void *a1)
{
  void *v2;
  uint64_t result;
  void *v4;

  if (!objc_msgSend(a1, "isSubService")
    || (v2 = (void *)objc_msgSend((id)objc_msgSend(a1, "mainService"), "serviceProperties"),
        (result = objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0D38FB0])) == 0))
  {
    v4 = (void *)objc_msgSend(a1, "serviceProperties");
    return objc_msgSend((id)objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0D38FA8]), "firstObject");
  }
  return result;
}

uint64_t sub_1D15F1BCC(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(+[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController"), "removeAccount:", *(_QWORD *)(a1 + 32));
  v1 = -[IMLocalDaemonProtocol parentalControls](+[IMDLocalDaemon sharedDaemon](IMDLocalDaemon, "sharedDaemon"), "parentalControls");
  return MEMORY[0x1E0DE7D20](v1, sel_updateAccountActivation);
}

void sub_1D15F1D8C()
{
  IMDRelayServiceReachabilityController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDRelayServiceReachabilityController);
  v1 = (void *)qword_1ED936140;
  qword_1ED936140 = (uint64_t)v0;

}

void sub_1D15F26CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15F266CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D15F2AC0(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "reachabilityRequest:updatedWithResult:", a2, *(_QWORD *)(a1 + 32));
}

void sub_1D15F3200(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_1D15F3250()
{
  IMDRelayServiceController *v0;
  void *v1;

  v0 = objc_alloc_init(IMDRelayServiceController);
  v1 = (void *)qword_1ED936148;
  qword_1ED936148 = (uint64_t)v0;

}

void sub_1D15F3F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D15F3F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  id WeakRetained;
  id v10;

  v10 = (id)objc_msgSend(*(id *)(a1 + 32), "mutableCopy");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v6, IMDRelaySpamCategoryKey);

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v7, IMDRelaySpamSubCategoryKey);

  v8 = objc_msgSend(MEMORY[0x1E0D39730], "shouldUploadToMMCS:", *(_QWORD *)(a1 + 32));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "relayDictionaryToPeers:requiresUpload:serviceName:requiredCapabilities:", v10, v8, *(_QWORD *)(a1 + 40), 0);

}

void sub_1D15F5520(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D15F53BCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D15F5CA0(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__convertIMDHandleToDictionary_);
}

void *sub_1D15F79E4(uint64_t a1, void *a2)
{
  if (objc_msgSend(a2, "objectForKey:", *MEMORY[0x1E0D35148]))
    return a2;
  else
    return 0;
}

uint64_t sub_1D15F7D38(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = objc_msgSend((id)objc_msgSend(a2, "trimmedString"), "lowercaseString");
  if (MEMORY[0x1D17EA35C]())
    return IMCanonicalizeFormattedString();
  else
    return v2;
}

uint64_t sub_1D15F9038(uint64_t a1, void *a2)
{
  if ((objc_msgSend(a2, "isEqualToIgnoringCase:", *MEMORY[0x1E0D35208]) & 1) != 0)
    return 0;
  else
    return objc_msgSend(a2, "_stripFZIDPrefix");
}

uint64_t sub_1D15F9100()
{
  id v0;
  id v1;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0D34358]);
  qword_1ED9360C0 = objc_msgSend(v0, "initWithService:", *MEMORY[0x1E0D34240]);
  v1 = objc_alloc(MEMORY[0x1E0D34358]);
  result = objc_msgSend(v1, "initWithService:", *MEMORY[0x1E0D34248]);
  qword_1ED9360C8 = result;
  return result;
}

void sub_1D15F942C()
{
  IMDLiteMessageCompressor *v0;
  void *v1;

  v0 = objc_alloc_init(IMDLiteMessageCompressor);
  v1 = (void *)qword_1EFC63F40;
  qword_1EFC63F40 = (uint64_t)v0;

}

uint64_t sub_1D15F94DC()
{
  uint64_t v0;

  v0 = sub_1D166D964();
  sub_1D15FD440(v0, qword_1EFC614B8);
  sub_1D141AC1C(v0, (uint64_t)qword_1EFC614B8);
  sub_1D166D940();
  return sub_1D166D958();
}

uint64_t sub_1D15F9544()
{
  return 1;
}

uint64_t sub_1D15F954C()
{
  sub_1D166E264();
  sub_1D166E270();
  return sub_1D166E288();
}

uint64_t sub_1D15F958C()
{
  return sub_1D166E270();
}

uint64_t sub_1D15F95B0()
{
  sub_1D166E264();
  sub_1D166E270();
  return sub_1D166E288();
}

void sub_1D15F95EC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E922F868;
}

id BackwardCompatibilityMessageIdentifier.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id BackwardCompatibilityMessageIdentifier.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  objc_super v5;

  v1 = OBJC_IVAR_____IMDBackwardCompatibilityMessageIdentifier_parser;
  sub_1D141AC58(&qword_1EFC61598);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[v1] = v2;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for BackwardCompatibilityMessageIdentifier();
  v3 = objc_msgSendSuper2(&v5, sel_init);
  sub_1D15FAB7C();

  return v3;
}

uint64_t type metadata accessor for BackwardCompatibilityMessageIdentifier()
{
  return objc_opt_self();
}

void sub_1D15F9738(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v4 = sub_1D166D964();
  v75 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v74 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v74 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (_DWORD *)((char *)&v74 - v14);
  v16 = objc_msgSend(a1, sel_plainBody);
  v74 = v4;
  if (!v16)
  {
    v17 = objc_msgSend(a1, sel_body);
    if (!v17)
    {
      if (qword_1EFC614B0 != -1)
        swift_once();
      v63 = sub_1D141AC1C(v4, (uint64_t)qword_1EFC614B8);
      v64 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v7, v63, v4);
      v15 = a1;
      v65 = sub_1D166D94C();
      v66 = sub_1D166DD6C();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v77 = v68;
        *(_DWORD *)v67 = 136315138;
        v69 = objc_msgSend(v15, sel_guid);
        if (v69)
        {
          v70 = v69;
          v71 = sub_1D166DACC();
          v73 = v72;

          v76 = sub_1D141BCB4(v71, v73, &v77);
          sub_1D166DF28();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1D1413000, v65, v66, "No plain body found for message %s", v67, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17EB0AC](v68, -1, -1);
          MEMORY[0x1D17EB0AC](v67, -1, -1);

          (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v74);
          return;
        }
        goto LABEL_34;
      }

      v61 = *(void (**)(char *, uint64_t))(v64 + 8);
      v62 = v7;
      goto LABEL_30;
    }
    v18 = v17;
    v16 = objc_msgSend(v17, sel_string);

  }
  v19 = sub_1D166DACC();
  v21 = v20;

  v22 = sub_1D15FB648(v19, v21);
  v24 = v23;
  swift_bridgeObjectRelease();
  if (v24)
  {
    sub_1D15FA018(a1, v22, v24, a2);
    v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
      v27 = v75;
      if (qword_1EFC614B0 != -1)
        swift_once();
      v28 = v74;
      v29 = sub_1D141AC1C(v74, (uint64_t)qword_1EFC614B8);
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(v27 + 16))(v15, v29, v28);
      v30 = a1;
      v31 = sub_1D166D94C();
      v32 = sub_1D166DD6C();
      if (!os_log_type_enabled(v31, v32))
      {

        (*(void (**)(_DWORD *, uint64_t))(v27 + 8))(v15, v28);
        return;
      }
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v77 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = objc_msgSend(v30, sel_guid);
      if (v35)
      {
        v36 = v35;
        v37 = sub_1D166DACC();
        v39 = v38;

        v76 = sub_1D141BCB4(v37, v39, &v77);
        sub_1D166DF28();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D1413000, v31, v32, "Found edited message matching backward compatibility message %s. Message can be dropped.", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17EB0AC](v34, -1, -1);
        MEMORY[0x1D17EB0AC](v33, -1, -1);

        (*(void (**)(_DWORD *, uint64_t))(v75 + 8))(v15, v74);
        return;
      }
      goto LABEL_32;
    }
    v50 = v75;
    if (qword_1EFC614B0 != -1)
      swift_once();
    v4 = v74;
    v51 = sub_1D141AC1C(v74, (uint64_t)qword_1EFC614B8);
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v13, v51, v4);
    v15 = a1;
    v52 = sub_1D166D94C();
    v53 = sub_1D166DD6C();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc();
      v55 = swift_slowAlloc();
      v77 = v55;
      *(_DWORD *)v54 = 136315138;
      v56 = objc_msgSend(v15, sel_guid);
      if (v56)
      {
        v57 = v56;
        v58 = sub_1D166DACC();
        v60 = v59;

        v76 = sub_1D141BCB4(v58, v60, &v77);
        sub_1D166DF28();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D1413000, v52, v53, "Could not find edited message matching backward compatibility message %s. Message cannot be dropped.", v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1D17EB0AC](v55, -1, -1);
        MEMORY[0x1D17EB0AC](v54, -1, -1);

        (*(void (**)(char *, uint64_t))(v75 + 8))(v13, v74);
        return;
      }
      goto LABEL_33;
    }

    v61 = *(void (**)(char *, uint64_t))(v50 + 8);
    v62 = v13;
LABEL_30:
    v61(v62, v4);
    return;
  }
  if (qword_1EFC614B0 != -1)
    swift_once();
  v4 = v74;
  v40 = sub_1D141AC1C(v74, (uint64_t)qword_1EFC614B8);
  v41 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v10, v40, v4);
  v30 = a1;
  v42 = sub_1D166D94C();
  v43 = sub_1D166DD6C();
  if (!os_log_type_enabled(v42, v43))
  {

    v61 = *(void (**)(char *, uint64_t))(v41 + 8);
    v62 = v10;
    goto LABEL_30;
  }
  v15 = (_DWORD *)swift_slowAlloc();
  v44 = swift_slowAlloc();
  v77 = v44;
  *v15 = 136315138;
  v45 = objc_msgSend(v30, sel_guid);
  if (v45)
  {
    v46 = v45;
    v47 = sub_1D166DACC();
    v49 = v48;

    v76 = sub_1D141BCB4(v47, v49, &v77);
    sub_1D166DF28();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D1413000, v42, v43, "No backward compatibility message match found %s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v44, -1, -1);
    MEMORY[0x1D17EB0AC](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v74);
    return;
  }

  __break(1u);
LABEL_32:

  __break(1u);
LABEL_33:

  __break(1u);
LABEL_34:

  __break(1u);
}

void sub_1D15FA018(void *a1, uint64_t a2, NSObject *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  id v77;
  id v78;
  uint8_t *v79;
  uint64_t v80;
  id v81;
  void *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  NSObject *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  char *v93;
  char *v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  __int128 v99;
  void *v100;
  char *v101;
  uint64_t ObjectType;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD aBlock[7];

  v103 = a2;
  v104 = a3;
  ObjectType = swift_getObjectType();
  v6 = sub_1D166D964();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v101 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D141AC58(&qword_1ED9354E8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1D166D628();
  v12 = *(_QWORD *)(v105 - 8);
  v13 = MEMORY[0x1E0C80A78](v105);
  v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v89 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v89 - v19;
  v21 = objc_msgSend(a4, sel_guid);
  if (!v21)
    return;
  v22 = v21;
  v100 = a1;
  v23 = objc_msgSend(a1, sel_time);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, v105);
    goto LABEL_7;
  }
  v24 = v23;
  sub_1D166D604();

  v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v26 = v105;
  v25(v11, v18, v105);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v26) == 1)
  {
LABEL_7:

    sub_1D141BA80((uint64_t)v11, &qword_1ED9354E8);
    return;
  }
  v90 = v7;
  v95 = v12;
  v91 = v6;
  v25(v20, v11, v26);
  sub_1D166D5B0();
  sub_1D15FD3C0(0, (unint64_t *)&unk_1EFC616E0);
  sub_1D141AC58((uint64_t *)&unk_1EFC631B0);
  v27 = swift_allocObject();
  v99 = xmmword_1D16832F0;
  *(_OWORD *)(v27 + 16) = xmmword_1D16832F0;
  v28 = sub_1D166DACC();
  v30 = v29;
  *(_QWORD *)(v27 + 56) = MEMORY[0x1E0DEA968];
  v31 = sub_1D15FD2D0();
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v30;
  v32 = MEMORY[0x1E0DEDCD8];
  *(_QWORD *)(v27 + 96) = MEMORY[0x1E0DEDC60];
  *(_QWORD *)(v27 + 104) = v32;
  *(_QWORD *)(v27 + 64) = v31;
  *(_QWORD *)(v27 + 72) = 0;
  v98 = (id)sub_1D166DD54();
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = v99;
  v34 = sub_1D166DACC();
  *(_QWORD *)(v33 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v33 + 64) = v31;
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = v35;
  v36 = sub_1D166D5BC();
  v37 = sub_1D15FD3C0(0, &qword_1EFC631C0);
  v93 = v15;
  v38 = v37;
  *(_QWORD *)(v33 + 96) = v37;
  v39 = sub_1D15FD314();
  *(_QWORD *)(v33 + 104) = v39;
  *(_QWORD *)(v33 + 72) = v36;
  v40 = (void *)sub_1D166DD54();
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v99;
  v42 = sub_1D166DACC();
  *(_QWORD *)(v41 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v41 + 64) = v31;
  *(_QWORD *)(v41 + 32) = v42;
  *(_QWORD *)(v41 + 40) = v43;
  v94 = v20;
  v44 = sub_1D166D5BC();
  *(_QWORD *)(v41 + 96) = v38;
  *(_QWORD *)(v41 + 104) = v39;
  *(_QWORD *)(v41 + 72) = v44;
  v45 = (void *)sub_1D166DD54();
  sub_1D141AC58(&qword_1ED935880);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1D1683300;
  v47 = v98;
  *(_QWORD *)(v46 + 32) = v98;
  *(_QWORD *)(v46 + 40) = v40;
  *(_QWORD *)(v46 + 48) = v45;
  aBlock[0] = v46;
  sub_1D166DC04();
  v96 = v47;
  v98 = v40;
  v92 = v45;
  v48 = (void *)sub_1D166DBD4();
  swift_bridgeObjectRelease();
  v49 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v48);

  sub_1D166DACC();
  v50 = objc_allocWithZone(MEMORY[0x1E0CB3928]);
  v51 = (void *)sub_1D166DAA8();
  swift_bridgeObjectRelease();
  v52 = objc_msgSend(v50, sel_initWithKey_ascending_, v51, 0);

  v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_1D1683310;
  *(_QWORD *)(v53 + 32) = v52;
  aBlock[0] = v53;
  sub_1D166DC04();
  v54 = swift_allocObject();
  *(_BYTE *)(v54 + 16) = 0;
  v55 = (void *)objc_opt_self();
  v97 = v52;
  *(_QWORD *)&v99 = objc_msgSend(v55, sel_synchronousDatabase);
  sub_1D15FD3C0(0, &qword_1EFC61710);
  v56 = v49;
  v57 = (void *)sub_1D166DBD4();
  swift_bridgeObjectRelease();
  v58 = (_QWORD *)swift_allocObject();
  v59 = v100;
  v60 = v103;
  v61 = v104;
  v58[2] = v100;
  v58[3] = v60;
  v58[4] = v61;
  v58[5] = v54;
  v58[6] = ObjectType;
  aBlock[4] = sub_1D15FD3B0;
  aBlock[5] = v58;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D1631134;
  aBlock[3] = &unk_1E922FF70;
  v62 = _Block_copy(aBlock);
  v63 = v59;
  v64 = (void *)v99;
  v65 = v63;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  objc_msgSend(v64, sel_fetchMessageRecordsForChatRecordWithGUID_filteredUsingPredicate_sortedUsingDescriptors_limit_completionHandler_, v22, v56, v57, 50, v62);
  _Block_release(v62);

  swift_beginAccess();
  if ((*(_BYTE *)(v54 + 16) & 1) != 0)
  {

    swift_unknownObjectRelease();
    v66 = *(void (**)(char *, uint64_t))(v95 + 8);
    v67 = v105;
    v66(v93, v105);
    v66(v94, v67);
LABEL_16:
    swift_release();
    return;
  }
  v103 = v54;
  v68 = v96;
  if (qword_1EFC614B0 != -1)
    swift_once();
  v69 = v91;
  v70 = sub_1D141AC1C(v91, (uint64_t)qword_1EFC614B8);
  v71 = v90;
  v72 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v101, v70, v69);
  v73 = v65;
  v74 = sub_1D166D94C();
  v75 = sub_1D166DD84();
  v104 = v74;
  v76 = os_log_type_enabled(v74, v75);
  v78 = v97;
  v77 = v98;
  if (!v76)
  {

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v69);
    goto LABEL_15;
  }
  v79 = (uint8_t *)swift_slowAlloc();
  v80 = swift_slowAlloc();
  v107 = v80;
  *(_DWORD *)v79 = 136315138;
  v81 = objc_msgSend(v73, sel_guid);
  if (v81)
  {
    v82 = v81;
    v83 = sub_1D166DACC();
    v85 = v84;

    v106 = sub_1D141BCB4(v83, v85, &v107);
    sub_1D166DF28();

    swift_bridgeObjectRelease();
    v86 = v104;
    _os_log_impl(&dword_1D1413000, v104, v75, "Backward compatibility message %s does not match any edited message in our database.", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v80, -1, -1);
    MEMORY[0x1D17EB0AC](v79, -1, -1);

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v101, v91);
LABEL_15:
    v87 = *(void (**)(char *, uint64_t))(v95 + 8);
    v88 = v105;
    v87(v93, v105);
    v87(v94, v88);
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t sub_1D15FA9C4(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;
  id v12;
  void *v13;
  char v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  char v20;
  char v21;
  uint64_t v22;

  if (!(a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
LABEL_18:
  swift_bridgeObjectRetain();
  result = sub_1D166E15C();
  v10 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_3:
  v22 = a5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v12 = (id)MEMORY[0x1D17E8FD0](0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(a1 + 32);
LABEL_6:
    v13 = v12;
    sub_1D15FC81C(a2, a3, a4, v12);
    v15 = v14;

    if ((v15 & 1) != 0)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      result = swift_beginAccess();
      *(_BYTE *)(v22 + 16) = 1;
      return result;
    }
    v16 = 0;
    a5 = v10 - 1;
    while (a5 != v16)
    {
      v17 = v16 + 1;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v18 = (id)MEMORY[0x1D17E8FD0](v16 + 1, a1);
      }
      else
      {
        if (v17 >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_17;
        v18 = *(id *)(a1 + 8 * v16 + 40);
      }
      v19 = v18;
      if (__OFADD__(v17, 1))
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      sub_1D15FC81C(a2, a3, a4, v18);
      v21 = v20;

      ++v16;
      if ((v21 & 1) != 0)
        goto LABEL_15;
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id sub_1D15FAB7C()
{
  id result;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79[4];

  result = (id)IMSharedUtilitiesFrameworkBundle();
  v78 = result;
  if (result)
  {
    v1 = objc_msgSend(result, sel_localizations);
    v2 = sub_1D166DBEC();

    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = 0;
      v71 = OBJC_IVAR_____IMDBackwardCompatibilityMessageIdentifier_parser;
      v5 = v2 + 32;
      v76 = v2 + 32;
      v77 = *(_QWORD *)(v2 + 16);
      while (1)
      {
        v6 = (uint64_t *)(v5 + 16 * v4);
        v8 = *v6;
        v7 = v6[1];
        swift_bridgeObjectRetain_n();
        v9 = (void *)sub_1D166DAA8();
        v10 = (void *)sub_1D166DAA8();
        v11 = (void *)sub_1D166DAA8();
        v12 = objc_msgSend(v78, sel_localizedStringForKey_value_table_localization_, v9, 0, v10, v11);

        v13 = sub_1D166DACC();
        v15 = v14;

        if (v13 == 0xD00000000000002CLL && v15 == 0x80000001D1695050)
          break;
        v16 = sub_1D166E1E0();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_10;
        swift_bridgeObjectRetain();
        v22 = (void *)sub_1D166DAA8();
        v23 = (void *)sub_1D166DAA8();
        v24 = (void *)sub_1D166DAA8();
        v25 = objc_msgSend(v78, sel_localizedStringForKey_value_table_localization_, v22, 0, v23, v24);

        v26 = sub_1D166DACC();
        v28 = v27;

        if (v26 == 0xD00000000000002CLL && v28 == 0x80000001D1695080)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          swift_bridgeObjectRelease();
          v5 = v76;
          v3 = v77;
          swift_bridgeObjectRelease();
          if (qword_1EFC614B0 != -1)
            swift_once();
          v30 = sub_1D166D964();
          sub_1D141AC1C(v30, (uint64_t)qword_1EFC614B8);
          swift_bridgeObjectRetain();
          v18 = sub_1D166D94C();
          v31 = sub_1D166DD84();
          if (os_log_type_enabled(v18, v31))
          {
            v20 = swift_slowAlloc();
            v21 = swift_slowAlloc();
            v79[0] = v21;
            *(_DWORD *)v20 = 136315138;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v20 + 4) = sub_1D141BCB4(v8, v7, v79);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1D1413000, v18, v31, "Backward compatibility message prefix is unlocalized in %s", (uint8_t *)v20, 0xCu);
            goto LABEL_14;
          }
LABEL_4:

          swift_bridgeObjectRelease_n();
          goto LABEL_5;
        }
        v29 = sub_1D166E1E0();
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0)
          goto LABEL_19;
        swift_bridgeObjectRelease();
        sub_1D141AC58((uint64_t *)&unk_1EFC631B0);
        v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_1D16832F0;
        v33 = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v32 + 56) = MEMORY[0x1E0DEA968];
        v34 = sub_1D15FD2D0();
        *(_QWORD *)(v32 + 32) = v26;
        *(_QWORD *)(v32 + 40) = v28;
        *(_QWORD *)(v32 + 96) = v33;
        *(_QWORD *)(v32 + 104) = v34;
        *(_QWORD *)(v32 + 64) = v34;
        *(_QWORD *)(v32 + 72) = 16421;
        *(_QWORD *)(v32 + 80) = 0xE200000000000000;
        v35 = sub_1D166DAD8();
        v37 = v36;
        swift_bridgeObjectRelease();
        v38 = *(_QWORD *)(v72 + v71);
        if ((v37 & 0x2000000000000000) != 0)
          v39 = HIBYTE(v37) & 0xF;
        else
          v39 = v35 & 0xFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        if (v39)
        {
          while (1)
          {
            swift_bridgeObjectRetain();
            v40 = sub_1D166DB98();
            v42 = v41;
            swift_bridgeObjectRelease();
            if (v40 == 37 && v42 == 0xE100000000000000)
              break;
            v43 = sub_1D166E1E0();
            swift_bridgeObjectRelease();
            if ((v43 & 1) != 0 || 4 * v39 == (unint64_t)sub_1D166DB2C() >> 14)
              goto LABEL_34;
          }
          swift_bridgeObjectRelease();
        }
LABEL_34:
        v44 = sub_1D166DBB0();
        v46 = v45;
        v48 = v47;
        v50 = v49;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51 = sub_1D166DF04();
        result = (id)swift_bridgeObjectRelease();
        if (__OFADD__(v51, 2))
        {
          __break(1u);
          goto LABEL_43;
        }
        v79[0] = v35;
        v79[1] = v37;
        sub_1D15FD3F8();
        v73 = v38;
        swift_bridgeObjectRetain();
        v52 = sub_1D166DB14();
        v53 = sub_1D1624A54(v52, v35, v37);
        v55 = v54;
        v57 = v56;
        v59 = v58;
        swift_bridgeObjectRelease();
        v60 = MEMORY[0x1D17E8A0C](v44, v46, v48, v50);
        v74 = v61;
        v75 = v60;
        swift_bridgeObjectRelease();
        v62 = MEMORY[0x1D17E8A0C](v53, v55, v57, v59);
        v64 = v63;
        swift_bridgeObjectRelease();
        v65 = (_QWORD *)(v73 + 16);
        swift_beginAccess();
        v66 = *(_QWORD **)(v73 + 16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v73 + 16) = v66;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v66 = sub_1D160DA08(0, v66[2] + 1, 1, v66);
          *v65 = v66;
        }
        v5 = v76;
        v3 = v77;
        v69 = v66[2];
        v68 = v66[3];
        if (v69 >= v68 >> 1)
        {
          v66 = sub_1D160DA08((_QWORD *)(v68 > 1), v69 + 1, 1, v66);
          *v65 = v66;
        }
        v66[2] = v69 + 1;
        v70 = &v66[4 * v69];
        v70[4] = v75;
        v70[5] = v74;
        v70[6] = v62;
        v70[7] = v64;
        swift_endAccess();
        swift_bridgeObjectRelease();
LABEL_5:
        if (++v4 == v3)
        {

          return (id)swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      if (qword_1EFC614B0 != -1)
        swift_once();
      v17 = sub_1D166D964();
      sub_1D141AC1C(v17, (uint64_t)qword_1EFC614B8);
      swift_bridgeObjectRetain();
      v18 = sub_1D166D94C();
      v19 = sub_1D166DD84();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v21 = swift_slowAlloc();
        v79[0] = v21;
        *(_DWORD *)v20 = 136315138;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v20 + 4) = sub_1D141BCB4(v8, v7, v79);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D1413000, v18, v19, "Backward compatibility message format is unlocalized in %s", (uint8_t *)v20, 0xCu);
LABEL_14:
        swift_arrayDestroy();
        MEMORY[0x1D17EB0AC](v21, -1, -1);
        MEMORY[0x1D17EB0AC](v20, -1, -1);

        goto LABEL_5;
      }
      goto LABEL_4;
    }

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
LABEL_43:
    __break(1u);
  }
  return result;
}

void sub_1D15FB408(void *a1)
{
  void *v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v3 = objc_msgSend(v1, sel_isFromMe);
  v4 = objc_msgSend(a1, sel_isFromMe);
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
  {
    v5 = objc_msgSend(v1, sel_sender);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(a1, sel_sender);
      if (v7)
      {
        v8 = v7;
        v9 = objc_msgSend(v6, sel__stripFZIDPrefix);

        if (v9)
        {
          v10 = objc_msgSend(v9, sel_im_stripCategoryLabel);

          sub_1D166DACC();
          v11 = objc_msgSend(v8, sel__stripFZIDPrefix);

          if (v11)
          {
            v12 = objc_msgSend(v11, sel_im_stripCategoryLabel);

            sub_1D166DACC();
            sub_1D15FD3F8();
            sub_1D166DF4C();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {

          __break(1u);
        }
        __break(1u);
      }
      else
      {

      }
    }
  }
}

id BackwardCompatibilityMessageIdentifier.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackwardCompatibilityMessageIdentifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D15FB5F4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1D15FB648(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = v5 + 56;
    while (1)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v8 = sub_1D166DB80();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v9 = sub_1D166DB8C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          break;
      }
      v7 += 32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_1D166DB20();
    swift_bridgeObjectRelease();
    v11 = sub_1D1624AA0(v10, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v12 = sub_1D166DB20();
    result = swift_bridgeObjectRelease();
    if (v12 < 0)
    {
      __break(1u);
    }
    else
    {
      result = sub_1D166DEF8();
      if ((v14 & 1) != 0)
        v15 = v11;
      else
        v15 = result;
      if (v15 >> 14 >= v11 >> 14)
      {
        v16 = sub_1D166DF10();
        v18 = v17;
        v20 = v19;
        v22 = v21;
        swift_bridgeObjectRelease();
        v23 = MEMORY[0x1D17E8A0C](v16, v18, v20, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v23;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1D15FB890(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  if (v5)
  {
    v6 = swift_bridgeObjectRetain() + 64;
    while (1)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v7 = sub_1D166DB80();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v8 = sub_1D166DB8C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          break;
      }
      v6 += 40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = sub_1D166DB20();
    swift_bridgeObjectRelease();
    v10 = sub_1D1624AA0(v9, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v11 = sub_1D166DB20();
    result = swift_bridgeObjectRelease();
    if (v11 < 0)
    {
      __break(1u);
    }
    else
    {
      result = sub_1D166DEF8();
      if ((v13 & 1) != 0)
        v14 = v10;
      else
        v14 = result;
      if (v14 >> 14 >= v10 >> 14)
      {
        v15 = sub_1D166DF10();
        v17 = v16;
        v19 = v18;
        v21 = v20;
        swift_bridgeObjectRelease();
        v22 = MEMORY[0x1D17E8A0C](v15, v17, v19, v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v22;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_1D15FBAE4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_1D15FBAF0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1D15FBAF8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1D15FBB0C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1D15FBB20(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1D15FBB50@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1D15FBB7C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1D15FBBA0(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1D15FBBB4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1D15FBBC8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1D15FBBDC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1D15FBBF0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1D15FBC04()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1D15FBC14()
{
  return sub_1D166DF7C();
}

_QWORD *sub_1D15FBC2C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1D15FBC40(uint64_t a1, uint64_t a2)
{
  return sub_1D15FBDB8(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1D15FBC58(uint64_t a1, uint64_t a2)
{
  return sub_1D15FBDB8(a1, a2, MEMORY[0x1E0DEA950]);
}

_QWORD *sub_1D15FBC6C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_1D15FBC78@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1D15FBC88(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1D166DAB4();
  *a2 = 0;
  return result;
}

uint64_t sub_1D15FBCFC(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1D166DAC0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1D15FBD78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1D166DACC();
  v2 = sub_1D166DAA8();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D15FBDB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1D166DACC();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D15FBDF4()
{
  sub_1D166DACC();
  sub_1D166DB08();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D15FBE34()
{
  uint64_t v0;

  sub_1D166DACC();
  sub_1D166E264();
  sub_1D166DB08();
  v0 = sub_1D166E288();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D15FBEA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1D15FD298(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_QWORD *sub_1D15FBEE4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1D15FBEF8(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1D15FBF0C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_1D15FBF20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1D166DACC();
  v2 = v1;
  if (v0 == sub_1D166DACC() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1D166E1E0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1D15FBFAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1D166DACC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D15FBFD4()
{
  sub_1D15FC784(&qword_1EFC617A0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1D16838E0);
  sub_1D15FC784(&qword_1EFC617A8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1D1683880);
  return sub_1D166E198();
}

BOOL sub_1D15FC058(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D15FC06C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1D166DAA8();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D15FC0B0()
{
  sub_1D15FC784(&qword_1EFC61790, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D1683ABC);
  sub_1D15FC784(&qword_1EFC61798, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D16839D8);
  return sub_1D166E198();
}

uint64_t sub_1D15FC134(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1D15FC1C8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1D15FC3A0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1D15FC3A0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D15FC1C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1D15FC33C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1D166E09C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1D166E144();
      __break(1u);
LABEL_10:
      v2 = sub_1D166DB74();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1D166E18C();
    __break(1u);
LABEL_14:
    result = sub_1D166E144();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1D15FC33C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1D141AC58((uint64_t *)&unk_1ED935828);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D15FC3A0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1D141AC58((uint64_t *)&unk_1ED935828);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1D166E18C();
  __break(1u);
  return result;
}

uint64_t method lookup function for BackwardCompatibilityMessageIdentifier()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BackwardCompatibilityMessageIdentifier.isIgnorableBackwardCompatibilityMessage(_:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

void type metadata accessor for MessagesClientCapabilities(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1EFC61688);
}

void type metadata accessor for IMAssociatedMessageType(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1EFC61690);
}

void type metadata accessor for SyncedSettingsKey(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1EFC61698);
}

uint64_t getEnumTagSinglePayload for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1D15FC5E8 + 4 * byte_1D1683320[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1D15FC608 + 4 * byte_1D1683325[v4]))();
}

_BYTE *sub_1D15FC5E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1D15FC608(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D15FC610(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D15FC618(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1D15FC620(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1D15FC628(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1D15FC634()
{
  return 0;
}

ValueMetadata *type metadata accessor for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType()
{
  return &type metadata for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType;
}

unint64_t sub_1D15FC654()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC616A0;
  if (!qword_1EFC616A0)
  {
    v1 = sub_1D15FC6A0(&qword_1EFC616A8);
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC616A0);
  }
  return result;
}

uint64_t sub_1D15FC6A0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1D17EAFD4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1D15FC6E8()
{
  unint64_t result;

  result = qword_1EFC616B0;
  if (!qword_1EFC616B0)
  {
    result = MEMORY[0x1D17EAFE0](&unk_1D16834AC, &type metadata for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType);
    atomic_store(result, (unint64_t *)&qword_1EFC616B0);
  }
  return result;
}

uint64_t sub_1D15FC72C()
{
  return sub_1D15FC784(&qword_1EFC616B8, (uint64_t (*)(uint64_t))type metadata accessor for MessagesClientCapabilities, (uint64_t)&unk_1D16835CC);
}

uint64_t sub_1D15FC758()
{
  return sub_1D15FC784(&qword_1EFC616C0, (uint64_t (*)(uint64_t))type metadata accessor for MessagesClientCapabilities, (uint64_t)&unk_1D1683598);
}

uint64_t sub_1D15FC784(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1D17EAFE0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D15FC7C4()
{
  return sub_1D15FC784(&qword_1EFC616C8, (uint64_t (*)(uint64_t))type metadata accessor for MessagesClientCapabilities, (uint64_t)&unk_1D16835F8);
}

uint64_t sub_1D15FC7F0()
{
  return sub_1D15FC784((unint64_t *)&unk_1EFC616D0, (uint64_t (*)(uint64_t))type metadata accessor for MessagesClientCapabilities, (uint64_t)&unk_1D1683634);
}

void sub_1D15FC81C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (**v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  char v35;
  id v36;
  void *v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v45)(void);
  uint64_t *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(uint64_t);
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t *, _QWORD);
  uint64_t *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  id v61;
  void *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  uint64_t v77;
  id v78;
  id v79;
  NSObject *v80;
  int v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  id v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  void (*v97)(_QWORD, _QWORD, _QWORD);
  id v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t, uint64_t);
  id v101;
  unint64_t v102;
  id v103;
  id v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[5];

  v116 = a2;
  v117 = a3;
  v114 = a1;
  v5 = sub_1D166D964();
  v106 = *(_QWORD *)(v5 - 8);
  v107 = (char *)v5;
  MEMORY[0x1E0C80A78](v5);
  v105 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D166D694();
  v8 = *(_QWORD *)(v7 - 8);
  v111 = v7;
  v112 = v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v110 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v109 = (char *)&v96 - v11;
  v12 = sub_1D141AC58(&qword_1EFC61718);
  MEMORY[0x1E0C80A78](v12);
  v113 = (uint64_t)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1D141AC58((uint64_t *)&unk_1ED9354F0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1D166D6DC();
  v17 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v115 - 8);
  v18 = MEMORY[0x1E0C80A78](v115);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v108 = (char *)&v96 - v21;
  v22 = sub_1D166D628();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1D141AC58(&qword_1ED9354E8);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = objc_msgSend(a4, sel_dateEdited);
  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v28, 1, 1, v22);
    goto LABEL_10;
  }
  v30 = v29;
  sub_1D166D604();

  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v25, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v28, 0, 1, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v28, 1, v22) == 1)
  {
LABEL_10:
    v46 = &qword_1ED9354E8;
    v47 = (uint64_t)v28;
LABEL_11:
    sub_1D141BA80(v47, v46);
    return;
  }
  sub_1D141BA80((uint64_t)v28, &qword_1ED9354E8);
  v31 = sub_1D166DDC0();
  if (!v31)
    return;
  v32 = (void *)v31;
  objc_opt_self();
  v33 = (void *)swift_dynamicCastObjCClass();
  if (!v33 || (v34 = v33, sub_1D15FB408(v33), (v35 & 1) == 0))
  {

    return;
  }
  v36 = objc_msgSend(v34, sel_editedPartIndexes);
  if (!v36)
  {
    v17[7](v16, 1, 1, v115);
    goto LABEL_35;
  }
  v37 = v36;
  sub_1D166D6B8();

  v38 = v17[4];
  v39 = v115;
  ((void (*)(char *, char *, uint64_t))v38)(v16, v20, v115);
  v17[7](v16, 0, 1, v39);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v17[6])(v16, 1, v39) == 1)
  {
LABEL_35:

    v46 = (uint64_t *)&unk_1ED9354F0;
    v47 = (uint64_t)v16;
    goto LABEL_11;
  }
  v96 = v32;
  v101 = v34;
  ((void (*)(char *, char *, uint64_t))v38)(v108, v16, v115);
  v40 = v113;
  sub_1D166D6A0();
  v41 = (id)(v40 + *(int *)(v12 + 36));
  v42 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0];
  v43 = MEMORY[0x1E0CB13E0];
  v44 = *(void (**)(_QWORD, _QWORD, _QWORD))(v112 + 16);
  v45 = MEMORY[0x1E0CB1248];
  v98 = v41;
  v97 = v44;
  while (1)
  {
    v48 = v109;
    v49 = v111;
    v44(v109, v41, v111);
    sub_1D15FC784((unint64_t *)&unk_1EFC63220, v42, v43);
    v50 = v110;
    sub_1D166DD24();
    v51 = (uint64_t (*)(uint64_t))v45;
    v52 = (char *)MEMORY[0x1E0CB1260];
    sub_1D15FC784(&qword_1EFC61720, v51, MEMORY[0x1E0CB1260]);
    v53 = sub_1D166DA9C();
    v54 = *(void (**)(char *, uint64_t))(v112 + 8);
    v54(v50, v49);
    v54(v48, v49);
    if ((v53 & 1) != 0)
    {

      sub_1D141BA80(v113, &qword_1EFC61718);
      ((void (*)(char *, uint64_t))v17[1])(v108, v115);
      return;
    }
    v55 = v113;
    v56 = v115;
    v57 = (void (*)(uint64_t *, _QWORD))sub_1D166DD3C();
    v59 = *v58;
    v57(v119, 0);
    ((void (*)(char *, uint64_t, uint64_t))v17[2])(v20, v55, v56);
    sub_1D166DD30();
    v60 = v17[1];
    ((void (*)(char *, uint64_t))v60)(v20, v56);
    v61 = objc_msgSend(v101, sel_historyForMessagePart_, v59);
    if (!v61)
    {
      __break(1u);
      goto LABEL_48;
    }
    v62 = v61;
    sub_1D15FD3C0(0, (unint64_t *)&unk_1EFC63230);
    v63 = sub_1D166DBEC();

    v100 = v60;
    v99 = v59;
    if (v63 >> 62)
      break;
    v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v64)
      goto LABEL_19;
LABEL_14:
    swift_bridgeObjectRelease();
    v41 = v98;
    v42 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB13A0];
    v43 = MEMORY[0x1E0CB13E0];
    v44 = v97;
    v45 = MEMORY[0x1E0CB1248];
  }
  swift_bridgeObjectRetain();
  v64 = sub_1D166E15C();
  swift_bridgeObjectRelease();
  if (!v64)
    goto LABEL_14;
LABEL_19:
  v102 = v63 & 0xC000000000000001;
  v65 = 4;
  while (1)
  {
    v66 = v65 - 4;
    if (v102)
    {
      v67 = (id)MEMORY[0x1D17E8FD0](v65 - 4, v63);
      v68 = v65 - 3;
      if (__OFADD__(v66, 1))
        goto LABEL_45;
    }
    else
    {
      v67 = *(id *)(v63 + 8 * v65);
      v68 = v65 - 3;
      if (__OFADD__(v66, 1))
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    v69 = v63;
    v70 = v52;
    v104 = v67;
    v103 = objc_msgSend(v67, sel_messagePartText);
    v71 = objc_msgSend(v103, sel_string);
    v72 = sub_1D166DACC();
    v74 = v73;

    if (v72 == v116 && v74 == v117)
      break;
    v76 = sub_1D166E1E0();
    swift_bridgeObjectRelease();
    if ((v76 & 1) != 0)
      goto LABEL_37;

    ++v65;
    v52 = v70;
    v63 = v69;
    if (v68 == v64)
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
LABEL_37:
  v66 = v106;
  v63 = (unint64_t)v96;
  swift_bridgeObjectRelease();
  v20 = v107;
  v52 = v105;
  v65 = v115;
  if (qword_1EFC614B0 == -1)
    goto LABEL_38;
LABEL_46:
  swift_once();
LABEL_38:
  v77 = sub_1D141AC1C((uint64_t)v20, (uint64_t)qword_1EFC614B8);
  (*(void (**)(char *, uint64_t, char *))(v66 + 16))(v52, v77, v20);
  v78 = v114;
  v79 = (id)v63;
  v41 = v78;
  v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v79;
  v80 = sub_1D166D94C();
  v81 = sub_1D166DD6C();
  if (!os_log_type_enabled(v80, (os_log_type_t)v81))
  {

    (*(void (**)(char *, char *))(v66 + 8))(v52, v20);
    sub_1D141BA80(v113, &qword_1EFC61718);
    v94 = v108;
    v95 = v65;
    goto LABEL_43;
  }
  LODWORD(v117) = v81;
  v82 = swift_slowAlloc();
  v116 = swift_slowAlloc();
  v119[0] = v116;
  *(_DWORD *)v82 = 136315650;
  v83 = objc_msgSend(v41, sel_guid);
  if (!v83)
  {
LABEL_48:

    __break(1u);
    goto LABEL_49;
  }
  v84 = v83;
  v85 = sub_1D166DACC();
  v87 = v86;

  v118 = sub_1D141BCB4(v85, v87, v119);
  sub_1D166DF28();

  swift_bridgeObjectRelease();
  *(_WORD *)(v82 + 12) = 2080;
  v88 = objc_msgSend(v101, sel_guid);
  if (v88)
  {
    v89 = v88;
    v90 = sub_1D166DACC();
    v92 = v91;

    v118 = sub_1D141BCB4(v90, v92, v119);
    sub_1D166DF28();

    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 22) = 2048;
    v118 = v99;
    sub_1D166DF28();
    _os_log_impl(&dword_1D1413000, v80, (os_log_type_t)v117, "Backward compatibility message %s matches an existing message %s at message part %ld.", (uint8_t *)v82, 0x20u);
    v93 = v116;
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v93, -1, -1);
    MEMORY[0x1D17EB0AC](v82, -1, -1);

    (*(void (**)(char *, char *))(v106 + 8))(v105, v107);
    sub_1D141BA80(v113, &qword_1EFC61718);
    v94 = v108;
    v95 = v115;
LABEL_43:
    ((void (*)(char *, uint64_t))v100)(v94, v95);
    return;
  }
LABEL_49:

  __break(1u);
}

uint64_t sub_1D15FD298(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_1D15FD2D0()
{
  unint64_t result;

  result = qword_1EFC616F0;
  if (!qword_1EFC616F0)
  {
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EFC616F0);
  }
  return result;
}

unint64_t sub_1D15FD314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EFC61700;
  if (!qword_1EFC61700)
  {
    v1 = sub_1D15FD3C0(255, &qword_1EFC631C0);
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0DEFD08], v1);
    atomic_store(result, (unint64_t *)&qword_1EFC61700);
  }
  return result;
}

uint64_t sub_1D15FD36C()
{
  return swift_deallocObject();
}

uint64_t sub_1D15FD37C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D15FD3B0(unint64_t a1)
{
  uint64_t v1;

  return sub_1D15FA9C4(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1D15FD3C0(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1D15FD3F8()
{
  unint64_t result;

  result = qword_1ED935590;
  if (!qword_1ED935590)
  {
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED935590);
  }
  return result;
}

uint64_t *sub_1D15FD440(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void type metadata accessor for IMDCKAccountStatus(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1ED935BC0);
}

__n128 initializeWithTake for FileEventStream.PathFilter(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1D15FD4A0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D15FD4C0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1EFC61728);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1EFC61730);
}

uint64_t initializeBufferWithCopyOfBuffer for FileEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_1D15FD540(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D15FD54C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1D15FD56C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
  sub_1D15FD5FC(a1, (unint64_t *)&unk_1EFC61738);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1D15FD5FC(a1, (unint64_t *)&unk_1ED9355F0);
}

void type metadata accessor for FZChatMemberStatus(uint64_t a1)
{
  sub_1D15FD5FC(a1, (unint64_t *)&unk_1EFC61748);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1ED935600);
}

void type metadata accessor for CMFItemType(uint64_t a1)
{
  sub_1D15FD5FC(a1, &qword_1EFC61758);
}

void sub_1D15FD5FC(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1D15FD640()
{
  return sub_1D15FC784(&qword_1EFC61760, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1D1683844);
}

uint64_t sub_1D15FD66C()
{
  return sub_1D15FC784(&qword_1EFC61768, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1D1683818);
}

uint64_t sub_1D15FD698()
{
  return sub_1D15FC784(&qword_1EFC61770, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_1D16838B4);
}

uint64_t sub_1D15FD6C4()
{
  return sub_1D15FC784(&qword_1EFC61778, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D168399C);
}

uint64_t sub_1D15FD6F0()
{
  return sub_1D15FC784(&qword_1EFC61780, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D1683970);
}

uint64_t sub_1D15FD71C()
{
  return sub_1D15FC784(&qword_1EFC61788, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1D1683A0C);
}

uint64_t sub_1D15FD7E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_1D16162CC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1D164CF30();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_1D15FD9D4(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D15FD8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_1D16162CC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1D164D47C();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = type metadata accessor for RecoverableMessageStore.RecoverableMessageMetadata();
    v14 = *(_QWORD *)(v13 - 8);
    sub_1D15FF604(v12 + *(_QWORD *)(v14 + 72) * v8, a3);
    sub_1D15FDBA8(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for RecoverableMessageStore.RecoverableMessageMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

unint64_t sub_1D15FD9D4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D166DF94();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_1D166E264();
        swift_bridgeObjectRetain();
        sub_1D166DB08();
        v9 = sub_1D166E288();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1D15FDBA8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_1D166DF94();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        sub_1D166E264();
        swift_bridgeObjectRetain();
        sub_1D166DB08();
        v9 = sub_1D166E288();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for RecoverableMessageStore.RecoverableMessageMetadata() - 8)
                        + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_QWORD *sub_1D15FDDA4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1D141AC58(&qword_1ED935820);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1D15FDF6C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D15FF5FC();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *sub_1D15FDE88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1D141AC58(&qword_1ED935820);
  v3 = (_QWORD *)swift_allocObject();
  v4 = j__malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_1D15FE168((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D15FF5FC();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t sub_1D15FDF6C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D15FE168(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1D15FE364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t inited;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  void *v61;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  void *v77;
  id v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  void *v83;
  uint64_t v84;
  _QWORD *v85;
  id v86;
  uint64_t v87;
  _QWORD *v88;
  os_log_type_t v89;
  uint8_t *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  id v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  void *v116;
  id v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  char *v125;
  id v126;
  __int128 v127;
  _QWORD *v128;
  uint64_t *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  uint8_t *v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151[3];

  v151[1] = *MEMORY[0x1E0C80C00];
  v2 = sub_1D166D964();
  v3 = MEMORY[0x1E0C80A78](v2);
  MEMORY[0x1E0C80A78](v3);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (qword_1EFC61530 == -1)
    {
LABEL_51:
      sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
      v147 = sub_1D166D94C();
      v89 = sub_1D166DD84();
      if (os_log_type_enabled(v147, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v90 = 0;
        _os_log_impl(&dword_1D1413000, v147, v89, "Tried to update chats with summaries, but there were no summaries provided.", v90, 2u);
        MEMORY[0x1D17EB0AC](v90, -1, -1);
      }

      return;
    }
LABEL_81:
    swift_once();
    goto LABEL_51;
  }
  v137 = v6;
  v138 = v5;
  v125 = (char *)&v125 - v4;
  v7 = swift_bridgeObjectRetain();
  v128 = sub_1D15FDDA4(v7);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedProvider);
  if (!v8)
  {
    if (qword_1EFC61530 != -1)
      swift_once();
    sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
    swift_retain();
    v91 = sub_1D166D94C();
    v92 = sub_1D166DD84();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = swift_slowAlloc();
      v94 = swift_slowAlloc();
      v151[0] = v94;
      *(_DWORD *)v93 = 136315394;
      v150 = (id)sub_1D141BCB4(0xD00000000000002BLL, 0x80000001D16950C0, v151);
      sub_1D166DF28();
      *(_WORD *)(v93 + 12) = 2080;
      v95 = swift_retain();
      v96 = MEMORY[0x1D17E8B08](v95, MEMORY[0x1E0DEA968]);
      v98 = v97;
      swift_release();
      v150 = (id)sub_1D141BCB4(v96, v98, v151);
      sub_1D166DF28();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D1413000, v91, v92, "%s No broadcaster for messages with GUIDs %s", (uint8_t *)v93, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v94, -1, -1);
      MEMORY[0x1D17EB0AC](v93, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return;
  }
  v126 = objc_msgSend(v8, sel_broadcasterForChatListeners);
  swift_unknownObjectRelease();
  v151[0] = sub_1D160F388(MEMORY[0x1E0DEE9D8]);
  v9 = *(_QWORD *)(a1 + 64);
  v144 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v145 = (unint64_t)(v10 + 63) >> 6;
  v136 = *MEMORY[0x1E0D37748];
  v135 = *MEMORY[0x1E0D37750];
  v134 = *MEMORY[0x1E0D37738];
  v142 = *MEMORY[0x1E0D37740];
  v129 = &v149;
  swift_bridgeObjectRetain();
  v13 = 0;
  v132 = 0;
  *((_QWORD *)&v14 + 1) = 2;
  v141 = xmmword_1D1683B20;
  v140 = MEMORY[0x1E0DEE9B8] + 8;
  *(_QWORD *)&v14 = 136315138;
  v131 = v14;
  *(_QWORD *)&v14 = 138412290;
  v127 = v14;
  v133 = xmmword_1D1683B10;
  v143 = a1;
  v130 = v2;
  while (1)
  {
    while (1)
    {
      if (v12)
      {
        v147 = ((v12 - 1) & v12);
        v15 = __clz(__rbit64(v12)) | (v13 << 6);
        goto LABEL_20;
      }
      if (__OFADD__(v13++, 1))
      {
        __break(1u);
        goto LABEL_80;
      }
      if (v13 >= v145)
        goto LABEL_58;
      v17 = *(_QWORD *)(v144 + 8 * v13);
      if (v17)
        goto LABEL_19;
      v18 = v13 + 1;
      if (v13 + 1 >= v145)
        goto LABEL_58;
      v17 = *(_QWORD *)(v144 + 8 * v18);
      if (!v17)
      {
        v18 = v13 + 2;
        if (v13 + 2 >= v145)
          goto LABEL_58;
        v17 = *(_QWORD *)(v144 + 8 * v18);
        if (!v17)
        {
          v18 = v13 + 3;
          if (v13 + 3 < v145)
          {
            v17 = *(_QWORD *)(v144 + 8 * v18);
            if (v17)
              goto LABEL_18;
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                break;
              if (v13 >= v145)
                goto LABEL_58;
              v17 = *(_QWORD *)(v144 + 8 * v13);
              ++v18;
              if (v17)
                goto LABEL_19;
            }
LABEL_80:
            __break(1u);
            goto LABEL_81;
          }
LABEL_58:
          swift_release();
          if (*(_QWORD *)(v151[0] + 16))
          {
            sub_1D141AC58(&qword_1ED935B90);
            v99 = (void *)sub_1D166DA18();
            swift_bridgeObjectRelease();
            objc_msgSend(v126, sel_updatedSummariesForChatsWithGUIDsAndProperties_, v99);

            if (qword_1EFC61530 != -1)
              swift_once();
            sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
            swift_retain();
            v100 = sub_1D166D94C();
            v101 = sub_1D166DD6C();
            if (os_log_type_enabled(v100, v101))
            {
              v102 = swift_slowAlloc();
              v103 = (void *)swift_slowAlloc();
              v150 = v103;
              *(_DWORD *)v102 = 136315394;
              v148 = sub_1D141BCB4(0xD00000000000002BLL, 0x80000001D16950C0, (uint64_t *)&v150);
              sub_1D166DF28();
              *(_WORD *)(v102 + 12) = 2080;
              v104 = swift_retain();
              v105 = MEMORY[0x1D17E8B08](v104, MEMORY[0x1E0DEA968]);
              v107 = v106;
              swift_release();
              v148 = sub_1D141BCB4(v105, v107, (uint64_t *)&v150);
              sub_1D166DF28();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1D1413000, v100, v101, "%s Broadcasted messagesUpdated for GUIDs %s", (uint8_t *)v102, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x1D17EB0AC](v103, -1, -1);
              v108 = v102;
LABEL_75:
              MEMORY[0x1D17EB0AC](v108, -1, -1);
              swift_unknownObjectRelease();

              return;
            }

            swift_release_n();
          }
          else
          {
            swift_release();
            swift_bridgeObjectRelease();
            if (qword_1EFC61530 != -1)
              swift_once();
            sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
            v100 = sub_1D166D94C();
            v123 = sub_1D166DD84();
            if (os_log_type_enabled(v100, v123))
            {
              v124 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v124 = 0;
              _os_log_impl(&dword_1D1413000, v100, v123, "There were no chats to update after processing the summary dictionary.", v124, 2u);
              v108 = (uint64_t)v124;
              goto LABEL_75;
            }

          }
          swift_unknownObjectRelease();
          return;
        }
      }
LABEL_18:
      v13 = v18;
LABEL_19:
      v147 = ((v17 - 1) & v17);
      v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_20:
      v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
      v21 = *v19;
      v20 = v19[1];
      v22 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v15);
      v23 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v24 = v22;
      v25 = objc_msgSend(v23, sel_sharedInstance);
      v26 = (void *)sub_1D166DAA8();
      v27 = objc_msgSend(v25, sel_chatForMessageGUID_, v26);

      if (v27)
        break;
      swift_bridgeObjectRelease();

      v12 = (unint64_t)v147;
    }
    if (!objc_msgSend(v27, sel_unreadCount))
      break;
    v146 = (uint8_t *)v13;
    v28 = objc_msgSend(v24, sel_string);
    v29 = sub_1D166DACC();
    v31 = v30;

    swift_bridgeObjectRelease();
    v32 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v32 = v29 & 0xFFFFFFFFFFFFLL;
    if (!v32)
    {
      swift_bridgeObjectRelease();
      sub_1D141AC58((uint64_t *)&unk_1EFC631D0);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v141;
      *(_QWORD *)(inited + 32) = sub_1D166DACC();
      *(_QWORD *)(inited + 40) = v49;
      v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E38]), sel_init);
      *(_QWORD *)(inited + 72) = sub_1D15FD3C0(0, &qword_1EFC61E20);
      *(_QWORD *)(inited + 48) = v50;
      v47 = sub_1D160F4A0(inited);
      goto LABEL_28;
    }
    v33 = (void *)objc_opt_self();
    v150 = 0;
    v34 = objc_msgSend(v33, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v24, 1, &v150);
    v35 = v150;
    if (v34)
    {
      v36 = sub_1D166D598();
      v38 = v37;

      sub_1D141AC58((uint64_t *)&unk_1EFC631D0);
      v39 = swift_initStackObject();
      *(_OWORD *)(v39 + 16) = v133;
      *(_QWORD *)(v39 + 32) = sub_1D166DACC();
      *(_QWORD *)(v39 + 40) = v40;
      *(_QWORD *)(v39 + 72) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v39 + 48) = v21;
      *(_QWORD *)(v39 + 56) = v20;
      *(_QWORD *)(v39 + 80) = sub_1D166DACC();
      *(_QWORD *)(v39 + 88) = v41;
      *(_QWORD *)(v39 + 120) = MEMORY[0x1E0CB0338];
      *(_QWORD *)(v39 + 96) = v36;
      *(_QWORD *)(v39 + 104) = v38;
      *(_QWORD *)(v39 + 128) = sub_1D166DACC();
      *(_QWORD *)(v39 + 136) = v42;
      *(_QWORD *)(v39 + 168) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)(v39 + 144) = 0;
      sub_1D15FF574(v36, v38);
      v43 = v39;
      a1 = v143;
      v44 = sub_1D160F4A0(v43);
      v45 = swift_initStackObject();
      *(_OWORD *)(v45 + 16) = v141;
      *(_QWORD *)(v45 + 32) = sub_1D166DACC();
      *(_QWORD *)(v45 + 40) = v46;
      *(_QWORD *)(v45 + 72) = sub_1D141AC58(&qword_1EFC61E18);
      *(_QWORD *)(v45 + 48) = v44;
      v47 = sub_1D160F4A0(v45);
      sub_1D15FF5B8(v36, v38);
LABEL_28:
      sub_1D16504F8(v47);
      swift_bridgeObjectRelease();
      v51 = (void *)sub_1D166DA18();
      swift_bridgeObjectRelease();
      v52 = objc_msgSend(v27, sel_updateProperties_, v51);

      v13 = (int64_t)v146;
      if ((_DWORD)v52)
      {
        v53 = objc_msgSend(v27, sel_guid);
        if (!v53)
        {
          __break(1u);
LABEL_83:

          __break(1u);
        }
        v54 = v53;
        v55 = sub_1D166DACC();
        v57 = v56;

        v58 = objc_msgSend(v27, sel_properties);
        if (v58)
        {
          v59 = v58;
          v60 = sub_1D166DA30();

          v61 = (void *)v151[0];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v150 = v61;
          v151[0] = 0x8000000000000000;
          v63 = v60;
          a1 = v143;
          sub_1D164C7A4(v63, v55, v57, isUniquelyReferenced_nonNull_native);
          v151[0] = (uint64_t)v150;
        }
        else
        {
          sub_1D15FD7E0(v55, v57);
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = (unint64_t)v147;
      }
      else
      {
        v139 = v24;
        if (qword_1EFC61530 != -1)
          swift_once();
        v64 = sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
        v66 = v137;
        v65 = v138;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 16))(v137, v64, v2);
        v52 = v27;
        v67 = sub_1D166D94C();
        v68 = sub_1D166DD84();
        if (os_log_type_enabled(v67, v68))
        {
          v69 = (uint8_t *)swift_slowAlloc();
          v70 = (void *)swift_slowAlloc();
          v150 = v70;
          *(_DWORD *)v69 = v131;
          v71 = objc_msgSend(v52, sel_guid);
          if (!v71)
            goto LABEL_83;
          v72 = v71;
          v73 = sub_1D166DACC();
          v75 = v74;

          v148 = sub_1D141BCB4(v73, v75, (uint64_t *)&v150);
          sub_1D166DF28();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1D1413000, v67, v68, "Failed to update summary property on chat with guid %s.", v69, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17EB0AC](v70, -1, -1);
          MEMORY[0x1D17EB0AC](v69, -1, -1);

          v2 = v130;
          (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v130);
          a1 = v143;
          v13 = (int64_t)v146;
          v12 = (unint64_t)v147;
        }
        else
        {

          (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v2);
          v12 = (unint64_t)v147;
        }
      }
    }
    else
    {
      v76 = v35;
      swift_bridgeObjectRelease();
      v77 = (void *)sub_1D166D4B4();

      swift_willThrow();
      if (qword_1EFC61530 != -1)
        swift_once();
      sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
      v78 = v77;
      v79 = v77;
      v80 = sub_1D166D94C();
      v81 = sub_1D166DD84();
      v82 = os_log_type_enabled(v80, v81);
      v13 = (int64_t)v146;
      if (v82)
      {
        v83 = v24;
        v84 = swift_slowAlloc();
        v85 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v84 = v127;
        v86 = v77;
        v87 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)(v84 + 4) = v87;
        *v85 = v87;

        _os_log_impl(&dword_1D1413000, v80, v81, "Failed to encode summary: %@", (uint8_t *)v84, 0xCu);
        sub_1D141AC58(&qword_1ED935810);
        swift_arrayDestroy();
        v88 = v85;
        a1 = v143;
        MEMORY[0x1D17EB0AC](v88, -1, -1);
        MEMORY[0x1D17EB0AC](v84, -1, -1);

      }
      else
      {

      }
      v132 = 0;
      v12 = (unint64_t)v147;
    }
  }
  v139 = v24;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (qword_1EFC61530 != -1)
    swift_once();
  v109 = sub_1D141AC1C(v2, (uint64_t)qword_1EFC65E28);
  v110 = v138;
  v111 = v125;
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v125, v109, v2);
  v112 = v27;
  v113 = sub_1D166D94C();
  v114 = sub_1D166DD6C();
  if (!os_log_type_enabled(v113, v114))
  {

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v2);
    goto LABEL_70;
  }
  v147 = v113;
  v115 = (uint8_t *)swift_slowAlloc();
  v116 = (void *)swift_slowAlloc();
  v150 = v116;
  *(_DWORD *)v115 = v131;
  v117 = objc_msgSend(v112, sel_guid);
  if (v117)
  {
    v118 = v117;
    v146 = v115 + 4;
    v119 = sub_1D166DACC();
    v121 = v120;

    v148 = sub_1D141BCB4(v119, v121, (uint64_t *)&v150);
    sub_1D166DF28();

    swift_bridgeObjectRelease();
    v122 = v147;
    _os_log_impl(&dword_1D1413000, v147, v114, "Received summary for chat with GUID %s but chat is already marked as read (likely via another device). Not writing summary to chat.", v115, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v116, -1, -1);
    MEMORY[0x1D17EB0AC](v115, -1, -1);

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v138 + 8))(v125, v2);
LABEL_70:
    swift_release();
    return;
  }

  __break(1u);
}

uint64_t sub_1D15FF574(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_1D15FF5B8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1D15FF5FC()
{
  return swift_release();
}

uint64_t sub_1D15FF604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecoverableMessageStore.RecoverableMessageMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

NSNumber __swiftcall NSNumber.round(toSignificantDigit:)(Swift::Int64 toSignificantDigit)
{
  void *v1;
  Swift::Int64 v2;
  uint64_t v3;
  BOOL v4;
  double v5;

  if (toSignificantDigit <= 1)
    v2 = 1;
  else
    v2 = toSignificantDigit;
  v3 = (uint64_t)objc_msgSend(v1, sel_longLongValue);
  if (v3 && (v3 <= 9 ? (v4 = (unint64_t)v2 > 1) : (v4 = 1), v4))
  {
    v5 = log10(fabs((double)v3));
    __exp10(round(v5) - (double)v2 + 1.0);
    return (NSNumber)sub_1D166DCD0();
  }
  else
  {
    sub_1D15FF710();
    return (NSNumber)sub_1D166DEC8();
  }
}

unint64_t sub_1D15FF710()
{
  unint64_t result;

  result = qword_1ED935800;
  if (!qword_1ED935800)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED935800);
  }
  return result;
}

Class sub_1D15FF74C(void *a1, uint64_t a2, Swift::Int64 a3)
{
  id v4;
  Class isa;

  v4 = a1;
  isa = NSNumber.round(toSignificantDigit:)(a3).super.super.isa;

  return isa;
}

NSNumber __swiftcall NSNumber.bucket()()
{
  void *v0;
  uint64_t v1;

  if ((uint64_t)objc_msgSend(v0, sel_longLongValue) < 100)
    v1 = 1;
  else
    v1 = 2;
  return (NSNumber)objc_msgSend(v0, sel_roundToSignificantDigit_, v1);
}

id sub_1D15FF7C4(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = a1;
  if ((uint64_t)objc_msgSend(v1, sel_longLongValue) < 100)
    v2 = 1;
  else
    v2 = 2;
  v3 = objc_msgSend(v1, sel_roundToSignificantDigit_, v2);

  return v3;
}

uint64_t sub_1D15FF820()
{
  sub_1D166D79C();
  return sub_1D166D760();
}

id DaemonCoreHelloWorldClass.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id DaemonCoreHelloWorldClass.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = OBJC_IVAR___IMDaemonCoreHelloWorldClass_Impl_sharedUtilitiesHelloWorld;
  v2 = objc_allocWithZone((Class)sub_1D166D7A8());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR___IMDaemonCoreHelloWorldClass_Impl_persistenceHelloWorld;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)sub_1D166D76C()), sel_init);

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for DaemonCoreHelloWorldClass();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for DaemonCoreHelloWorldClass()
{
  return objc_opt_self();
}

id DaemonCoreHelloWorldClass.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DaemonCoreHelloWorldClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t IMDaemonCoreHelloWorld.init()()
{
  sub_1D166D748();
  type metadata accessor for IMDaemonCoreHelloWorld();
  return sub_1D166D748();
}

uint64_t type metadata accessor for IMDaemonCoreHelloWorld()
{
  uint64_t result;

  result = qword_1EFC61EB8;
  if (!qword_1EFC61EB8)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall IMDaemonCoreHelloWorld.printGreeting()()
{
  sub_1D166D73C();
  type metadata accessor for IMDaemonCoreHelloWorld();
  sub_1D166D73C();
}

uint64_t method lookup function for DaemonCoreHelloWorldClass()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DaemonCoreHelloWorldClass.printGreeting()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t *initializeBufferWithCopyOfBuffer for IMDaemonCoreHelloWorld(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1D166D790();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1D166D754();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1D166D790();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_1D166D754();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1D166D790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D166D754();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1D166D790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D166D754();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1D166D790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D166D754();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_1D166D790();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1D166D754();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for IMDaemonCoreHelloWorld()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D15FFE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_1D166D790();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1D166D754();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for IMDaemonCoreHelloWorld()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1D15FFED8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_1D166D790();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1D166D754();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1D15FFF54()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_1D166D790();
  if (v1 <= 0x3F)
  {
    result = sub_1D166D754();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D15FFFD8()
{
  uint64_t v0;

  v0 = sub_1D166D964();
  sub_1D15FD440(v0, qword_1ED9364D0);
  sub_1D141AC1C(v0, (uint64_t)qword_1ED9364D0);
  return sub_1D166D958();
}

char *CallManager.__allocating_init(serviceSession:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  char *v9;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  v5 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v6 = objc_msgSend(v5, sel_conversationManager);

  v7 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
  v8 = objc_allocWithZone((Class)type metadata accessor for CallManager());
  v9 = sub_1D1600304(a1, v6, v7);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v9;
}

char *CallManager.init(serviceSession:)(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  char *v6;

  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v3 = objc_msgSend(v2, sel_conversationManager);

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedFeatureFlags);
  v5 = objc_allocWithZone((Class)type metadata accessor for CallManager());
  v6 = sub_1D1600304(a1, v3, v4);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t type metadata accessor for CallManager()
{
  return objc_opt_self();
}

char *sub_1D1600304(void *a1, void *a2, void *a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  objc_class *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  char *v40;
  _QWORD aBlock[6];
  objc_super v42;

  v38 = a2;
  v39 = a3;
  v37 = a1;
  v4 = sub_1D141AC58((uint64_t *)&unk_1ED935780);
  MEMORY[0x1E0C80A78](v4);
  v40 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_1D166DDFC();
  v6 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D166DDF0();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v9);
  v11 = sub_1D166D9F4();
  MEMORY[0x1E0C80A78](v11);
  v35 = OBJC_IVAR___IMDCallManager_Impl_queue;
  sub_1D15FD3C0(0, (unint64_t *)&qword_1ED9357D0);
  v12 = v3;
  sub_1D166DE08();
  sub_1D166D9E8();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  sub_1D15FC784((unint64_t *)&qword_1ED9357C0, v10, MEMORY[0x1E0DEF828]);
  sub_1D141AC58((uint64_t *)&unk_1ED935760);
  sub_1D1607B10();
  sub_1D166DF88();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF8D0], v36);
  *(_QWORD *)(v34[1] + v35) = sub_1D166DE2C();
  *(_QWORD *)&v12[OBJC_IVAR___IMDCallManager_Impl_newChatListenerTask] = 0;
  v13 = v37;
  v14 = v38;
  *(_QWORD *)&v12[OBJC_IVAR___IMDCallManager_Impl_serviceSession] = v37;
  *(_QWORD *)&v12[OBJC_IVAR___IMDCallManager_Impl_conversationManager] = v14;
  v15 = v39;
  *(_QWORD *)&v12[OBJC_IVAR___IMDCallManager_Impl_featureFlags] = v39;
  v16 = v13;
  v17 = v14;
  v18 = v15;

  v19 = (objc_class *)type metadata accessor for CallManager();
  v42.receiver = v12;
  v42.super_class = v19;
  v20 = (char *)objc_msgSendSuper2(&v42, sel_init);
  v21 = *(void **)&v20[OBJC_IVAR___IMDCallManager_Impl_conversationManager];
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v20;
  aBlock[4] = sub_1D1607B80;
  aBlock[5] = v22;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D141BC88;
  aBlock[3] = &unk_1E92303F0;
  v23 = _Block_copy(aBlock);
  v24 = v20;
  v25 = v21;
  swift_release();
  objc_msgSend(v25, sel_registerWithCompletionHandler_, v23);
  _Block_release(v23);

  v26 = sub_1D166DCB8();
  v27 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v40, 1, 1, v26);
  v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1D166DCA0();
  swift_retain();
  v29 = sub_1D166DC94();
  v30 = (_QWORD *)swift_allocObject();
  v31 = MEMORY[0x1E0DF06E8];
  v30[2] = v29;
  v30[3] = v31;
  v30[4] = v28;
  swift_release();
  v32 = sub_1D1641B5C(v27, (uint64_t)&unk_1EFC62040, (uint64_t)v30);

  *(_QWORD *)&v24[OBJC_IVAR___IMDCallManager_Impl_newChatListenerTask] = v32;
  swift_release();
  return v24;
}

id sub_1D1600718(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1ED935740 != -1)
    swift_once();
  v2 = sub_1D166D964();
  sub_1D141AC1C(v2, (uint64_t)qword_1ED936530);
  v3 = sub_1D166D94C();
  v4 = sub_1D166DD9C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1D1413000, v3, v4, "TUConversationManager registered", v5, 2u);
    MEMORY[0x1D17EB0AC](v5, -1, -1);
  }

  return objc_msgSend(*(id *)(a1 + OBJC_IVAR___IMDCallManager_Impl_conversationManager), sel_addDelegate_queue_, a1, *(_QWORD *)(a1 + OBJC_IVAR___IMDCallManager_Impl_queue));
}

uint64_t sub_1D160080C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[42] = a4;
  v5 = sub_1D166D460();
  v4[43] = v5;
  v4[44] = *(_QWORD *)(v5 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  sub_1D141AC58(&qword_1ED9356D8);
  v4[47] = swift_task_alloc();
  v6 = sub_1D166DE8C();
  v4[48] = v6;
  v4[49] = *(_QWORD *)(v6 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = sub_1D166DCA0();
  v4[52] = sub_1D166DC94();
  v4[53] = sub_1D166DC64();
  v4[54] = v7;
  return swift_task_switch();
}

uint64_t sub_1D1600900()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v0[55] = v1;
  if (qword_1ED935740 != -1)
    swift_once();
  v2 = sub_1D166D964();
  v0[56] = sub_1D141AC1C(v2, (uint64_t)qword_1ED936530);
  v3 = sub_1D166D94C();
  v4 = sub_1D166DD9C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1D1413000, v3, v4, "Waiting for new chats ", v5, 2u);
    MEMORY[0x1D17EB0AC](v5, -1, -1);
  }

  v0[7] = v0 + 70;
  v0[2] = v0;
  v0[3] = sub_1D1600A70;
  v6 = swift_continuation_init();
  v0[20] = MEMORY[0x1E0C809B0];
  v7 = v0 + 20;
  v7[1] = 0x40000000;
  v7[2] = sub_1D16017E8;
  v7[3] = &unk_1E9230468;
  v7[4] = v6;
  objc_msgSend(v1, sel_waitForLoadedChatsWithCompletionHandler_, v7);
  return swift_continuation_await();
}

uint64_t sub_1D1600A70()
{
  return swift_task_switch();
}

void sub_1D1600AB4()
{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  _QWORD *v30;

  v1 = sub_1D166D94C();
  v2 = sub_1D166DD9C();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1D1413000, v1, v2, "Notified that all IMDChats are loaded.", v3, 2u);
    MEMORY[0x1D17EB0AC](v3, -1, -1);
  }
  v4 = v0[42];

  swift_beginAccess();
  v5 = MEMORY[0x1D17EB154](v4 + 16);
  v0[57] = v5;
  if (!v5)
    goto LABEL_32;
  v6 = objc_msgSend(*(id *)(v5 + OBJC_IVAR___IMDCallManager_Impl_conversationManager), sel_activeConversations);
  v0[58] = sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357A0);
  sub_1D1607A20((unint64_t *)&unk_1ED9357B0, (unint64_t *)&unk_1ED9357A0);
  v7 = sub_1D166DCE8();

  if ((v7 & 0xC000000000000001) != 0)
  {
    sub_1D166DFB8();
    sub_1D166DD0C();
    v7 = v0[10];
    v8 = v0[11];
    v9 = v0[12];
    v10 = v0[13];
    v11 = v0[14];
    v0[60] = v8;
    v0[61] = v9;
    v0[59] = v7;
    if (v7 < 0)
    {
      v26 = sub_1D166E00C();
      if (v26)
      {
        v0[38] = v26;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v15 = (id)v0[41];
        swift_unknownObjectRelease();
        v14 = v10;
        v12 = v11;
LABEL_9:
        v0[63] = v14;
        v0[64] = v12;
        v0[62] = v15;
        if (v15)
        {
          v16 = (_QWORD *)swift_task_alloc();
          v0[65] = v16;
          *v16 = v0;
          v16[1] = sub_1D1600EF4;
          sub_1D16017FC((uint64_t)v15);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v11)
    {
LABEL_7:
      v12 = (v11 - 1) & v11;
      v13 = __clz(__rbit64(v11)) | (v10 << 6);
      v14 = v10;
LABEL_8:
      v15 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v13);
      goto LABEL_9;
    }
  }
  else
  {
    v10 = 0;
    v17 = -1;
    v18 = -1 << *(_BYTE *)(v7 + 32);
    v9 = ~v18;
    v8 = v7 + 56;
    v19 = *(_QWORD *)(v7 + 56);
    v20 = -v18;
    v21 = v20 < 64;
    v22 = -1 << v20;
    v0[60] = v7 + 56;
    v0[61] = v9;
    if (v21)
      v17 = ~v22;
    v11 = v17 & v19;
    v0[59] = v7;
    if ((v17 & v19) != 0)
      goto LABEL_7;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    v24 = (unint64_t)(v9 + 64) >> 6;
    if (v23 < v24)
    {
      v25 = *(_QWORD *)(v8 + 8 * v23);
      v14 = v10 + 1;
      if (v25)
      {
LABEL_18:
        v12 = (v25 - 1) & v25;
        v13 = __clz(__rbit64(v25)) + (v14 << 6);
        goto LABEL_8;
      }
      v14 = v10 + 2;
      if (v10 + 2 < v24)
      {
        v25 = *(_QWORD *)(v8 + 8 * v14);
        if (v25)
          goto LABEL_18;
        v14 = v10 + 3;
        if (v10 + 3 < v24)
        {
          v25 = *(_QWORD *)(v8 + 8 * v14);
          if (v25)
            goto LABEL_18;
          v14 = v10 + 4;
          if (v10 + 4 < v24)
          {
            v25 = *(_QWORD *)(v8 + 8 * v14);
            if (v25)
              goto LABEL_18;
            v27 = v10 + 5;
            while (v24 != v27)
            {
              v25 = *(_QWORD *)(v8 + 8 * v27++);
              if (v25)
              {
                v14 = v27 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    v28 = (void *)v0[57];
    sub_1D15FF5FC();

LABEL_32:
    v29 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    sub_1D166DE98();

    sub_1D166DE80();
    swift_beginAccess();
    v0[66] = CFSTR("__kIMDChatRegistryChatKey");
    v0[67] = sub_1D166DC94();
    sub_1D15FC784(&qword_1ED935610, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1EE0], MEMORY[0x1E0CB1EE8]);
    v30 = (_QWORD *)swift_task_alloc();
    v0[68] = v30;
    *v30 = v0;
    v30[1] = sub_1D1601200;
    sub_1D166DC88();
    return;
  }
  __break(1u);
}

uint64_t sub_1D1600EF4()
{
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1D1600F40()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 472);
  if (v3 < 0)
  {
    v8 = sub_1D166E00C();
    if (v8)
    {
      *(_QWORD *)(v0 + 304) = v8;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v7 = *(id *)(v0 + 328);
      swift_unknownObjectRelease();
      v6 = v1;
      v4 = v2;
LABEL_7:
      *(_QWORD *)(v0 + 504) = v6;
      *(_QWORD *)(v0 + 512) = v4;
      *(_QWORD *)(v0 + 496) = v7;
      if (v7)
      {
        v9 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 520) = v9;
        *v9 = v0;
        v9[1] = sub_1D1600EF4;
        sub_1D16017FC((uint64_t)v7);
        return;
      }
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (v2)
  {
    v4 = (v2 - 1) & v2;
    v5 = __clz(__rbit64(v2)) | (v1 << 6);
    v6 = *(_QWORD *)(v0 + 504);
LABEL_4:
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v5);
    goto LABEL_7;
  }
  v10 = v1 + 1;
  if (!__OFADD__(v1, 1))
  {
    v11 = (unint64_t)(*(_QWORD *)(v0 + 488) + 64) >> 6;
    if (v10 < v11)
    {
      v12 = *(_QWORD *)(v0 + 480);
      v13 = *(_QWORD *)(v12 + 8 * v10);
      v6 = v1 + 1;
      if (v13)
      {
LABEL_12:
        v4 = (v13 - 1) & v13;
        v5 = __clz(__rbit64(v13)) + (v6 << 6);
        goto LABEL_4;
      }
      v6 = v1 + 2;
      if (v1 + 2 < v11)
      {
        v13 = *(_QWORD *)(v12 + 8 * v6);
        if (v13)
          goto LABEL_12;
        v6 = v1 + 3;
        if (v1 + 3 < v11)
        {
          v13 = *(_QWORD *)(v12 + 8 * v6);
          if (v13)
            goto LABEL_12;
          v6 = v1 + 4;
          if (v1 + 4 < v11)
          {
            v13 = *(_QWORD *)(v12 + 8 * v6);
            if (v13)
              goto LABEL_12;
            v14 = v1 + 5;
            while (v11 != v14)
            {
              v13 = *(_QWORD *)(v12 + 8 * v14++);
              if (v13)
              {
                v6 = v14 - 1;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
LABEL_23:
    v15 = *(void **)(v0 + 456);
    sub_1D15FF5FC();

    v16 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    sub_1D166DE98();

    sub_1D166DE80();
    swift_beginAccess();
    *(_QWORD *)(v0 + 528) = CFSTR("__kIMDChatRegistryChatKey");
    *(_QWORD *)(v0 + 536) = sub_1D166DC94();
    sub_1D15FC784(&qword_1ED935610, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1EE0], MEMORY[0x1E0CB1EE8]);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 544) = v17;
    *v17 = v0;
    v17[1] = sub_1D1601200;
    sub_1D166DC88();
    return;
  }
  __break(1u);
}

uint64_t sub_1D1601200()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 552) = v0;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + 536);
  if (v0)
  {
    if (v3)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    swift_getObjectType();
    sub_1D166DC64();
  }
  return swift_task_switch();
}

uint64_t sub_1D16012C4()
{
  swift_release();
  return swift_task_switch();
}

uint64_t sub_1D16012FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 440);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 392) + 8))(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 384));

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = (_OWORD *)(v0 + 200);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 368), v1, v2);
  v7 = sub_1D166D454();
  if (!v7)
  {
    *v6 = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
LABEL_13:
    sub_1D141BA80(v0 + 200, &qword_1ED935840);
    goto LABEL_14;
  }
  v8 = v7;
  *(_QWORD *)(v0 + 280) = sub_1D166DACC();
  *(_QWORD *)(v0 + 288) = v9;
  sub_1D166E048();
  if (*(_QWORD *)(v8 + 16) && (v10 = sub_1D141B48C(v0 + 120), (v11 & 1) != 0))
  {
    sub_1D141B3A8(*(_QWORD *)(v8 + 56) + 32 * v10, v0 + 200);
  }
  else
  {
    *v6 = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1D1607C44(v0 + 120);
  if (!*(_QWORD *)(v0 + 224))
    goto LABEL_13;
  sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357F0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = *(id *)(v0 + 320);
    v13 = sub_1D166D94C();
    v14 = sub_1D166DD9C();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v16 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v15 = 138412290;
      *(_QWORD *)(v15 + 4) = v12;
      *v16 = v12;
      _os_log_impl(&dword_1D1413000, v13, v14, "Notified that chat was added %@", (uint8_t *)v15, 0xCu);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v16, -1, -1);
      MEMORY[0x1D17EB0AC](v15, -1, -1);
    }
    else
    {

      v13 = v12;
    }
    v30 = *(_QWORD *)(v0 + 336);

    v31 = MEMORY[0x1D17EB154](v30 + 16);
    if (v31)
    {
      v32 = (void *)v31;
      sub_1D1601FA4(v12);

    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
    goto LABEL_21;
  }
LABEL_14:
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 16))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
  v17 = sub_1D166D94C();
  v18 = sub_1D166DD90();
  v19 = os_log_type_enabled(v17, v18);
  v20 = *(_QWORD *)(v0 + 360);
  v21 = *(_QWORD *)(v0 + 368);
  v22 = *(_QWORD *)(v0 + 344);
  v23 = *(_QWORD *)(v0 + 352);
  if (v19)
  {
    v24 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v34 = v25;
    *(_DWORD *)v24 = 136315138;
    *(_QWORD *)(v0 + 296) = sub_1D166D454();
    sub_1D141AC58(&qword_1EFC62048);
    v26 = sub_1D166DAF0();
    *(_QWORD *)(v24 + 4) = sub_1D141BCB4(v26, v27, &v34);
    swift_bridgeObjectRelease();
    v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v28(v20, v22);
    _os_log_impl(&dword_1D1413000, v17, v18, "Received invalid object type from IMDChatAddedNotification %s", (uint8_t *)v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v25, -1, -1);
    MEMORY[0x1D17EB0AC](v24, -1, -1);

    v28(v21, v22);
  }
  else
  {

    v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v29(v20, v22);
    v29(v21, v22);
  }
LABEL_21:
  *(_QWORD *)(v0 + 536) = sub_1D166DC94();
  sub_1D15FC784(&qword_1ED935610, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1EE0], MEMORY[0x1E0CB1EE8]);
  v33 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 544) = v33;
  *v33 = v0;
  v33[1] = sub_1D1601200;
  return sub_1D166DC88();
}

uint64_t sub_1D1601784()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 552);
  sub_1D141AC58(&qword_1ED935C28);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t sub_1D16017E8(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_1D16017FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = v1;
  sub_1D166DCA0();
  v2[6] = sub_1D166DC94();
  v2[7] = sub_1D166DC64();
  v2[8] = v3;
  return swift_task_switch();
}

uint64_t sub_1D1601868()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  os_log_type_t v13;
  _BOOL4 v14;
  id v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  id v25;
  uint8_t *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (id *)(v0 + 32);
  v2 = sub_1D1605D0C(*(_QWORD *)(v0 + 32));
  if (v2)
  {
    v3 = (void *)v2;
    swift_release();
    v4 = *(void **)(v0 + 32);
    v5 = v3;
    sub_1D1606740(v4, v5);
    if ((objc_msgSend(v4, sel_isLocallyCreated) & 1) == 0
      && !objc_msgSend(*v1, sel_state)
      && !objc_msgSend(*v1, sel_avMode))
    {
      sub_1D160243C(*(void **)(v0 + 32), v5);
    }

LABEL_7:
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v7 = objc_msgSend(*v1, sel_remoteMembers);
  sub_1D15FD3C0(0, &qword_1EFC61FA8);
  sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
  v8 = sub_1D166DCE8();

  if ((v8 & 0xC000000000000001) != 0)
    v9 = sub_1D166DFE8();
  else
    v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRelease();
  if (v9 != 1 || objc_msgSend(*v1, sel_avMode))
  {
    swift_release();
    if (qword_1ED935740 != -1)
      swift_once();
    v10 = *v1;
    v11 = sub_1D166D964();
    sub_1D141AC1C(v11, (uint64_t)qword_1ED936530);
    v12 = v10;
    v5 = sub_1D166D94C();
    v13 = sub_1D166DD84();
    v14 = os_log_type_enabled(v5, v13);
    v15 = *v1;
    if (v14)
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v16 = 138412290;
      *(_QWORD *)(v0 + 16) = v15;
      v18 = v15;
      sub_1D166DF28();
      *v17 = v15;

      _os_log_impl(&dword_1D1413000, v5, v13, "Couldn't find chat for conversation %@", v16, 0xCu);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v17, -1, -1);
      MEMORY[0x1D17EB0AC](v16, -1, -1);
    }
    else
    {

    }
    goto LABEL_7;
  }
  if (qword_1ED935740 != -1)
    swift_once();
  v19 = *v1;
  v20 = sub_1D166D964();
  sub_1D141AC1C(v20, (uint64_t)qword_1ED936530);
  v21 = v19;
  v22 = sub_1D166D94C();
  v23 = sub_1D166DD9C();
  v24 = os_log_type_enabled(v22, v23);
  v25 = *v1;
  if (v24)
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v33 = v32;
    *(_DWORD *)v26 = 136315138;
    v27 = objc_msgSend(v25, sel_remoteMembers);
    sub_1D166DCE8();

    v28 = sub_1D166DCF4();
    v30 = v29;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = sub_1D141BCB4(v28, v30, &v33);
    sub_1D166DF28();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D1413000, v22, v23, "Couldn't find chat for 1-1 conversation with %s, attempting chat creation!", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v32, -1, -1);
    MEMORY[0x1D17EB0AC](v26, -1, -1);
  }
  else
  {

  }
  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v31;
  *v31 = v0;
  v31[1] = sub_1D1601D38;
  return sub_1D1603D78(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1D1601D38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1D1601D90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  id v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release();
  if (v1)
  {
    v2 = *(void **)(v0 + 32);
    v3 = *(id *)(v0 + 80);
    sub_1D1606740(v2, v3);
    if (!objc_msgSend(v2, sel_isLocallyCreated)
      && !objc_msgSend(*(id *)(v0 + 32), sel_state)
      && !objc_msgSend(*(id *)(v0 + 32), sel_avMode))
    {
      sub_1D160243C(*(void **)(v0 + 32), v3);
    }

  }
  else
  {
    if (qword_1ED935740 != -1)
      swift_once();
    v4 = *(void **)(v0 + 32);
    v5 = sub_1D166D964();
    sub_1D141AC1C(v5, (uint64_t)qword_1ED936530);
    v6 = v4;
    v3 = sub_1D166D94C();
    v7 = sub_1D166DD84();
    v8 = os_log_type_enabled(v3, v7);
    v9 = *(void **)(v0 + 32);
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      *(_QWORD *)(v0 + 16) = v9;
      v12 = v9;
      sub_1D166DF28();
      *v11 = v9;

      _os_log_impl(&dword_1D1413000, v3, v7, "Couldn't find chat for conversation %@", v10, 0xCu);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v11, -1, -1);
      MEMORY[0x1D17EB0AC](v10, -1, -1);
    }
    else
    {

    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1D1601FA4(void *a1)
{
  char *v1;
  id v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  id v15;

  v3 = objc_msgSend(*(id *)&v1[OBJC_IVAR___IMDCallManager_Impl_conversationManager], sel_activeConversations);
  sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357A0);
  sub_1D1607A20((unint64_t *)&unk_1ED9357B0, (unint64_t *)&unk_1ED9357A0);
  v4 = sub_1D166DCE8();

  v5 = v1;
  v6 = a1;
  sub_1D160722C(v4, v6);
  v8 = v7;
  swift_bridgeObjectRelease();

  if (v8)
  {
    v15 = v8;
    sub_1D1606740(v15, v6);
    if (!objc_msgSend(v15, sel_isLocallyCreated)
      && !objc_msgSend(v15, sel_state)
      && !objc_msgSend(v15, sel_avMode))
    {
      sub_1D160243C(v15, v6);
    }
  }
  else
  {
    if (qword_1ED935740 != -1)
      swift_once();
    v9 = sub_1D166D964();
    sub_1D141AC1C(v9, (uint64_t)qword_1ED936530);
    v15 = v6;
    v10 = sub_1D166D94C();
    v11 = sub_1D166DD9C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v12 = 138412290;
      v14 = v15;
      sub_1D166DF28();
      *v13 = v15;

      _os_log_impl(&dword_1D1413000, v10, v11, "Couldn't find conversation for chat %@", v12, 0xCu);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v13, -1, -1);
      MEMORY[0x1D17EB0AC](v12, -1, -1);

      return;
    }

  }
}

id CallManager.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  if (*(_QWORD *)&v0[OBJC_IVAR___IMDCallManager_Impl_newChatListenerTask])
  {
    swift_retain();
    sub_1D166DCC4();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CallManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CallManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1D160243C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  _QWORD *v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  id v66;
  char *v67;
  void *v68;
  void *v69;
  id v70;
  _QWORD v71[2];
  id v72;
  id v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v5 = sub_1D166D658();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(*(id *)(v2 + OBJC_IVAR___IMDCallManager_Impl_featureFlags), sel_isAVLessSharePlayEnabled))return;
  if (qword_1ED935740 != -1)
    swift_once();
  v9 = sub_1D166D964();
  v10 = sub_1D141AC1C(v9, (uint64_t)qword_1ED936530);
  v11 = a1;
  v12 = a2;
  v13 = v11;
  v14 = v12;
  v77 = v10;
  v15 = sub_1D166D94C();
  v16 = sub_1D166DD9C();
  v17 = os_log_type_enabled(v15, v16);
  v74 = v5;
  v75 = v8;
  v76 = v6;
  v72 = v14;
  if (v17)
  {
    v18 = v13;
    v19 = v14;
    v20 = swift_slowAlloc();
    v21 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v20 = 138412546;
    v79 = (uint64_t)v18;
    v22 = v18;
    sub_1D166DF28();
    *v21 = v18;

    *(_WORD *)(v20 + 12) = 2112;
    v79 = (uint64_t)v19;
    v23 = v19;
    sub_1D166DF28();
    v21[1] = v19;
    v13 = v18;

    _os_log_impl(&dword_1D1413000, v15, v16, "Received request to post notification for conversation %@ on chat %@", (uint8_t *)v20, 0x16u);
    sub_1D141AC58(&qword_1ED935810);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v21, -1, -1);
    MEMORY[0x1D17EB0AC](v20, -1, -1);

  }
  else
  {

  }
  v24 = objc_msgSend(v13, sel_initiator);
  v25 = objc_msgSend(v24, sel_normalizedValue);

  v73 = v25;
  if (!v25)
  {
    v30 = v13;
    v31 = sub_1D166D94C();
    v32 = sub_1D166DD84();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v33 = 138412290;
      v79 = (uint64_t)v30;
      v35 = v30;
      sub_1D166DF28();
      *v34 = v30;

      _os_log_impl(&dword_1D1413000, v31, v32, "Can't post notification since we couldn't fetch initiator from conversation %@", v33, 0xCu);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v34, -1, -1);
      MEMORY[0x1D17EB0AC](v33, -1, -1);

    }
    else
    {

    }
    return;
  }
  v81 = 0;
  v82 = 0;
  v26 = objc_msgSend(v13, sel_stagedActivitySession);
  if (v26)
  {
    v27 = v26;
    v28 = objc_msgSend(v26, sel_activity);
    v29 = objc_msgSend(v28, sel_localizedApplicationName);
LABEL_14:
    v38 = v29;

    if (v38)
    {
      v39 = sub_1D166DACC();
      v41 = v40;

    }
    else
    {

      v41 = 0;
      v39 = 0;
    }
    v81 = v39;
    v82 = v41;
    goto LABEL_18;
  }
  v36 = objc_msgSend(v13, sel_activitySessions);
  sub_1D15FD3C0(0, &qword_1EFC61FD0);
  sub_1D1607A20(&qword_1EFC61FD8, &qword_1EFC61FD0);
  v37 = sub_1D166DCE8();

  v27 = (void *)sub_1D1602D1C(v37, &qword_1EFC61FD0);
  swift_bridgeObjectRelease();
  if (v27)
  {
    v28 = objc_msgSend(v27, sel_activity);
    v29 = objc_msgSend(v28, sel_localizedApplicationName);
    goto LABEL_14;
  }
  v39 = 0;
  v41 = 0;
LABEL_18:
  v42 = v72;
  swift_bridgeObjectRetain_n();
  v43 = v13;
  v44 = v42;
  v45 = v43;
  v46 = v44;
  v47 = sub_1D166D94C();
  v48 = sub_1D166DD9C();
  v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    v50 = swift_slowAlloc();
    v51 = (_QWORD *)swift_slowAlloc();
    v77 = swift_slowAlloc();
    v78 = v77;
    *(_DWORD *)v50 = 136315650;
    v79 = v39;
    v80 = v41;
    swift_bridgeObjectRetain();
    sub_1D141AC58(&qword_1EFC61FE0);
    v52 = sub_1D166DAF0();
    LODWORD(v72) = v49;
    v79 = sub_1D141BCB4(v52, v53, &v78);
    sub_1D166DF28();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2112;
    v79 = (uint64_t)v46;
    v54 = v46;
    sub_1D166DF28();
    *v51 = v46;
    v55 = v51;

    *(_WORD *)(v50 + 22) = 2080;
    v71[1] = v50 + 24;
    v56 = objc_msgSend(v45, sel_UUID);
    v57 = v75;
    sub_1D166D640();

    sub_1D15FC784(&qword_1EFC61FE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v58 = v74;
    v59 = sub_1D166E1BC();
    v61 = v60;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v57, v58);
    v79 = sub_1D141BCB4(v59, v61, &v78);
    sub_1D166DF28();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D1413000, v47, (os_log_type_t)v72, "SharePlay notification will be posted for \"%s\" app in chat %@ and conversation %s", (uint8_t *)v50, 0x20u);
    sub_1D141AC58(&qword_1ED935810);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v55, -1, -1);
    v62 = v77;
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v62, -1, -1);
    MEMORY[0x1D17EB0AC](v50, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    v58 = v74;
  }
  v63 = objc_msgSend((id)objc_opt_self(), sel_synchronousDatabase);
  v64 = objc_msgSend(v46, sel_guid);
  if (v64)
  {
    v65 = v64;
    v66 = objc_msgSend(v45, sel_UUID);
    v67 = v75;
    sub_1D166D640();

    sub_1D166D634();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v67, v58);
    v68 = (void *)sub_1D166DAA8();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v82)
    {
      v69 = (void *)sub_1D166DAA8();
      swift_bridgeObjectRelease();
    }
    else
    {
      v69 = 0;
    }
    v70 = v73;
    objc_msgSend(v63, sel_postSharePlayNotificationForChatGUID_faceTimeConversationUUID_handleIdentifier_localizedApplicationName_, v65, v68, v73, v69);
    swift_unknownObjectRelease();

  }
  else
  {

    __break(1u);
  }
}

uint64_t sub_1D1602D1C(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = sub_1D166DFAC();
    v7 = v6;
    v8 = sub_1D166E024();
    v10 = MEMORY[0x1D17E8ED4](v5, v7, v8, v9);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_3:
      sub_1D1607A14(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    sub_1D16051E0(v5, v7, v4 != 0, a1, a2);
    v11 = v15;
    sub_1D1607A14(v5, v7, v4 != 0);
    return v11;
  }
  result = sub_1D1605440(a1);
  if ((v14 & 1) == 0)
  {
    v7 = v13;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v13)
    {
      v5 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CallManager.conversationManager(_:addedActiveConversation:)(uint64_t a1, void *a2)
{
  return sub_1D160763C(a2, "Received notification that conversation was added: %@", (uint64_t)&unk_1E92303B0, (uint64_t)&unk_1EFC62028);
}

uint64_t sub_1D1602E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;

  v5[2] = sub_1D166DCA0();
  v5[3] = sub_1D166DC94();
  v7 = (_QWORD *)swift_task_alloc();
  v5[4] = v7;
  *v7 = v5;
  v7[1] = sub_1D1602EE4;
  return sub_1D16017FC(a5);
}

uint64_t sub_1D1602EE4()
{
  swift_task_dealloc();
  sub_1D166DC64();
  return swift_task_switch();
}

uint64_t CallManager.conversationManager(_:conversationUpdatedMessagesGroupUUID:)(uint64_t a1, void *a2)
{
  return sub_1D160763C(a2, "Received notification that conversation messagesGroupUUID was added: %@", (uint64_t)&unk_1E9230338, (uint64_t)&unk_1EFC61F90);
}

uint64_t sub_1D1603000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;

  v5[2] = sub_1D166DCA0();
  v5[3] = sub_1D166DC94();
  v7 = (_QWORD *)swift_task_alloc();
  v5[4] = v7;
  *v7 = v5;
  v7[1] = sub_1D1603074;
  return sub_1D16017FC(a5);
}

uint64_t sub_1D1603074()
{
  swift_task_dealloc();
  sub_1D166DC64();
  return swift_task_switch();
}

uint64_t sub_1D16030E4()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1D1603190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  id v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = a1;
  v25 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D166DFB8();
    sub_1D15FD3C0(0, &qword_1EFC61FA8);
    sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
    sub_1D166DD0C();
    v1 = v20;
    v18 = v21;
    v2 = v22;
    v3 = v23;
    v4 = v24;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v18 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v17 = v2;
  v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!sub_1D166E00C())
      goto LABEL_36;
    sub_1D15FD3C0(0, &qword_1EFC61FA8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v12 = v19;
    swift_unknownObjectRelease();
    v11 = v3;
    v9 = v4;
    if (!v19)
      goto LABEL_36;
LABEL_26:
    v15 = objc_msgSend(v12, sel_handle, v17);

    v3 = v11;
    v4 = v9;
    if (v15)
    {
      MEMORY[0x1D17E8AD8]();
      if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1D166DC1C();
      sub_1D166DC34();
      sub_1D166DC04();
      v3 = v11;
      v4 = v9;
    }
  }
  if (v4)
  {
    v9 = (v4 - 1) & v4;
    v10 = __clz(__rbit64(v4)) | (v3 << 6);
    v11 = v3;
LABEL_25:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_36;
    goto LABEL_26;
  }
  v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v8)
      goto LABEL_36;
    v13 = *(_QWORD *)(v18 + 8 * v11);
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v8)
        goto LABEL_36;
      v13 = *(_QWORD *)(v18 + 8 * v14);
      if (v13)
        goto LABEL_23;
      v14 = v3 + 3;
      if (v3 + 3 >= v8)
        goto LABEL_36;
      v13 = *(_QWORD *)(v18 + 8 * v14);
      if (v13)
        goto LABEL_23;
      v14 = v3 + 4;
      if (v3 + 4 >= v8)
        goto LABEL_36;
      v13 = *(_QWORD *)(v18 + 8 * v14);
      if (v13)
      {
LABEL_23:
        v11 = v14;
      }
      else
      {
        v11 = v3 + 5;
        if (v3 + 5 >= v8)
          goto LABEL_36;
        v13 = *(_QWORD *)(v18 + 8 * v11);
        if (!v13)
        {
          v16 = v3 + 6;
          while (v8 != v16)
          {
            v13 = *(_QWORD *)(v18 + 8 * v16++);
            if (v13)
            {
              v11 = v16 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          sub_1D15FF5FC();
          return;
        }
      }
    }
LABEL_24:
    v9 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v11 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t sub_1D16034CC(id *a1, char a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  id v24;
  uint64_t result;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  void *v56;
  NSObject *loga;
  os_log_t logb;
  void *type;
  NSObject *typea;
  unint64_t v62;

  v6 = *a1;
  v7 = objc_msgSend(*a1, sel_serviceName);
  if (v7)
  {
    v8 = v7;
    v9 = sub_1D166DACC();
    v11 = v10;

    if (v9 == 0x6567617373654D69 && v11 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v13 = sub_1D166E1E0();
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_13;
  }
  if ((a2 & 1) != 0)
  {
    if (qword_1ED935740 != -1)
      swift_once();
    v14 = sub_1D166D964();
    sub_1D141AC1C(v14, (uint64_t)qword_1ED936530);
    v15 = a3;
    v16 = v6;
    v17 = v15;
    v18 = v16;
    v19 = sub_1D166D94C();
    v20 = sub_1D166DD78();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v22 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v21 = 138412546;
      loga = v19;
      v23 = v17;
      sub_1D166DF28();
      *v22 = v17;

      *(_WORD *)(v21 + 12) = 2112;
      v62 = (unint64_t)v18;
      v24 = v18;
      sub_1D166DF28();
      v22[1] = v18;

      _os_log_impl(&dword_1D1413000, loga, v20, "Not mapping %@ to chat %@ because an iMessage variant of the chat exists", (uint8_t *)v21, 0x16u);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v22, -1, -1);
      MEMORY[0x1D17EB0AC](v21, -1, -1);

    }
    else
    {

    }
    return 0;
  }
LABEL_13:
  result = (uint64_t)objc_msgSend(v6, sel_participants);
  if (!result)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  v26 = (void *)result;
  sub_1D15FD3C0(0, (unint64_t *)&qword_1EFC62000);
  v27 = sub_1D166DBEC();

  v62 = MEMORY[0x1E0DEE9D8];
  if (v27 >> 62)
  {
LABEL_43:
    swift_bridgeObjectRetain();
    v28 = sub_1D166E15C();
  }
  else
  {
    v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v55 = a3;
  v56 = v6;
  if (v28)
  {
    type = (void *)objc_opt_self();
    a3 = (void *)(v27 & 0xC000000000000001);
    v29 = 4;
    v30 = v28;
    while (1)
    {
      if (a3)
        v31 = (id)MEMORY[0x1D17E8FD0](v29 - 4, v27);
      else
        v31 = *(id *)(v27 + 8 * v29);
      v32 = v31;
      v33 = v29 - 3;
      if (__OFADD__(v29 - 4, 1))
      {
        __break(1u);
        goto LABEL_43;
      }
      result = (uint64_t)objc_msgSend(v31, sel_ID, v55, v56);
      if (!result)
        break;
      v34 = (void *)result;
      sub_1D166DACC();
      v6 = v35;

      v36 = (void *)sub_1D166DAA8();
      swift_bridgeObjectRelease();
      v37 = objc_msgSend(type, sel_normalizedHandleWithDestinationID_, v36);

      if (v37)
      {
        MEMORY[0x1D17E8AD8]();
        if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1D166DC1C();
        sub_1D166DC34();
        sub_1D166DC04();
      }
      ++v29;
      if (v33 == v30)
      {
        swift_bridgeObjectRelease();
        v38 = v62;
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  v38 = MEMORY[0x1E0DEE9D8];
LABEL_30:
  swift_bridgeObjectRelease();
  v39 = sub_1D1630710(v38);
  swift_bridgeObjectRelease();
  v40 = sub_1D1603C84(a4, v39);
  if ((v40 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v40 + 16))
      goto LABEL_32;
LABEL_37:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (!sub_1D166DFE8())
    goto LABEL_37;
LABEL_32:
  if (qword_1ED935740 != -1)
    swift_once();
  v41 = sub_1D166D964();
  sub_1D141AC1C(v41, (uint64_t)qword_1ED936530);
  v42 = v55;
  v43 = v56;
  v44 = v42;
  v45 = v43;
  swift_bridgeObjectRetain();
  v46 = sub_1D166D94C();
  v47 = sub_1D166DD84();
  typea = v46;
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc();
    v49 = (_QWORD *)swift_slowAlloc();
    logb = (os_log_t)swift_slowAlloc();
    v62 = (unint64_t)logb;
    *(_DWORD *)v48 = 138412802;
    v50 = v44;
    sub_1D166DF28();
    *v49 = v44;

    *(_WORD *)(v48 + 12) = 2112;
    v51 = v45;
    sub_1D166DF28();
    v49[1] = v45;

    *(_WORD *)(v48 + 22) = 2080;
    sub_1D15FD3C0(0, (unint64_t *)&unk_1EFC62E90);
    sub_1D1607A20((unint64_t *)&qword_1EFC62010, (unint64_t *)&unk_1EFC62E90);
    swift_bridgeObjectRetain();
    v52 = sub_1D166DCF4();
    v54 = v53;
    swift_bridgeObjectRelease();
    sub_1D141BCB4(v52, v54, (uint64_t *)&v62);
    sub_1D166DF28();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D1413000, typea, v47, "Not mapping conversation %@ to chat %@ because of remaining handles %s", (uint8_t *)v48, 0x20u);
    sub_1D141AC58(&qword_1ED935810);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v49, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](logb, -1, -1);
    MEMORY[0x1D17EB0AC](v48, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t sub_1D1603C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v4 = sub_1D166DFE8();
    if ((v2 & 0xC000000000000001) != 0)
      goto LABEL_3;
LABEL_9:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_1D16299E4(a1, v2);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0)
    goto LABEL_9;
LABEL_3:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > sub_1D166DFE8() / 8)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1D166DFE8();
    v7 = sub_1D1662264(v5, v6);
    swift_bridgeObjectRelease();
    v2 = v7;
    return sub_1D16299E4(a1, v2);
  }
LABEL_11:
  sub_1D1604EEC(a1);
  return v2;
}

uint64_t sub_1D1603D78(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = sub_1D166DCA0();
  v2[8] = sub_1D166DC94();
  v2[9] = sub_1D166DC64();
  v2[10] = v3;
  return swift_task_switch();
}

uint64_t sub_1D1603DE8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void *v21;
  uint8_t *v22;
  _QWORD *v23;
  id v24;

  v1 = objc_msgSend(*(id *)(v0 + 40), sel_remoteMembers);
  sub_1D15FD3C0(0, &qword_1EFC61FA8);
  sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
  v2 = sub_1D166DCE8();

  if ((v2 & 0xC000000000000001) != 0)
    v3 = sub_1D166DFE8();
  else
    v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  if (v3 != 1)
    goto LABEL_8;
  v4 = objc_msgSend(*(id *)(v0 + 40), sel_remoteMembers);
  v5 = sub_1D166DCE8();

  v6 = (void *)sub_1D1602D1C(v5, &qword_1EFC61FA8);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_8;
  v7 = objc_msgSend(v6, sel_handle);

  v8 = objc_msgSend(v7, sel_normalizedValue);
  if (v8)
  {
    v9 = sub_1D166DACC();
    v11 = v10;

    *(_QWORD *)(v0 + 88) = v9;
    *(_QWORD *)(v0 + 96) = v11;
    *(_QWORD *)(v0 + 104) = sub_1D166DC94();
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v12;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v13;
    *v13 = v0;
    v13[1] = sub_1D160418C;
    return sub_1D166E1C8();
  }
  else
  {
LABEL_8:
    swift_release();
    if (qword_1ED935740 != -1)
      swift_once();
    v15 = *(void **)(v0 + 40);
    v16 = sub_1D166D964();
    sub_1D141AC1C(v16, (uint64_t)qword_1ED936530);
    v17 = v15;
    v18 = sub_1D166D94C();
    v19 = sub_1D166DD90();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(void **)(v0 + 40);
    if (v20)
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v22 = 138412290;
      *(_QWORD *)(v0 + 16) = v21;
      v24 = v21;
      sub_1D166DF28();
      *v23 = v21;

      _os_log_impl(&dword_1D1413000, v18, v19, "Invalid call to CallManager's registerChat function for conversation %@", v22, 0xCu);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v23, -1, -1);
      MEMORY[0x1D17EB0AC](v22, -1, -1);
    }
    else
    {

    }
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1D160418C()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1D16041F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  swift_release();
  if (*(_BYTE *)(v0 + 128) == 1)
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(void **)(*(_QWORD *)(v0 + 48) + OBJC_IVAR___IMDCallManager_Impl_serviceSession);
    v3 = (void *)sub_1D166DAA8();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_registerChat_style_, v3, 45);

    v4 = sub_1D1605D0C(v1);
  }
  else
  {
    if (qword_1ED935740 != -1)
      swift_once();
    v5 = *(void **)(v0 + 40);
    v6 = sub_1D166D964();
    sub_1D141AC1C(v6, (uint64_t)qword_1ED936530);
    v7 = v5;
    swift_bridgeObjectRetain();
    v8 = sub_1D166D94C();
    v9 = sub_1D166DD84();
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 96);
    if (v10)
    {
      v18 = *(_QWORD *)(v0 + 88);
      v12 = *(void **)(v0 + 40);
      v13 = swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v20 = v19;
      *(_DWORD *)v13 = 138412546;
      *(_QWORD *)(v0 + 24) = v12;
      v14 = v12;
      sub_1D166DF28();
      *v17 = v12;

      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 32) = sub_1D141BCB4(v18, v11, &v20);
      sub_1D166DF28();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D1413000, v8, v9, "Can't create chat for conversation %@ since the remoteMember %s isn't iMessage-able", (uint8_t *)v13, 0x16u);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v17, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v19, -1, -1);
      MEMORY[0x1D17EB0AC](v13, -1, -1);
    }
    else
    {
      v15 = *(void **)(v0 + 40);

      swift_bridgeObjectRelease_n();
    }

    v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

void sub_1D16044B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD aBlock[6];

  v2 = sub_1D141AC58((uint64_t *)&unk_1EFC61FC0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v14 = (id)objc_opt_self();
  v5 = (void *)sub_1D166DAA8();
  v6 = (id)IMChatCanonicalIDSIDsForAddress();

  v7 = (id)*MEMORY[0x1E0D34240];
  v8 = (void *)sub_1D166DAA8();
  sub_1D15FD3C0(0, (unint64_t *)&qword_1ED9357D0);
  v9 = (void *)sub_1D166DE08();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v10 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v11 + v10, (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1D16079A4;
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D16046A0;
  aBlock[3] = &unk_1E9230378;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v14, sel_refreshIDStatusForDestination_service_listenerID_queue_completionBlock_, v6, v7, v8, v9, v12);
  _Block_release(v12);

}

uint64_t sub_1D16046A0(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

id sub_1D16046DC(id a1, NSObject *a2)
{
  void *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id result;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  id i;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  _QWORD *v55;
  NSObject *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  unint64_t v61;
  NSObject *v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (_QWORD *)sub_1D166D658();
  v6 = *(v5 - 1);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(a1, sel_isLocallyCreated))
  {
    v12 = objc_msgSend(a1, sel_initiator);
    v13 = objc_msgSend(v12, sel_normalizedValue);
    goto LABEL_7;
  }
  v9 = -[NSObject lastAddressedLocalHandle](a2, sel_lastAddressedLocalHandle);
  if (v9)
  {
LABEL_8:
    v63 = v2;
    v14 = sub_1D166DACC();
    v64 = v5;
    v16 = v15;

    sub_1D141AC58(&qword_1ED9356C0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1D1683B20;
    v66 = sub_1D166DACC();
    v67 = v18;
    v19 = MEMORY[0x1E0DEA968];
    sub_1D166E048();
    *(_QWORD *)(inited + 96) = v19;
    v65 = v14;
    *(_QWORD *)(inited + 72) = v14;
    *(_QWORD *)(inited + 80) = v16;
    swift_bridgeObjectRetain();
    sub_1D141BB00(inited);
    v20 = (void *)sub_1D166DA18();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(a1, sel_UUID);
    sub_1D166D640();

    sub_1D166D634();
    (*(void (**)(char *, id))(v6 + 8))(v8, v64);
    v22 = (void *)sub_1D166DAA8();
    swift_bridgeObjectRelease();
    result = -[NSObject account](a2, sel_account);
    if (!result)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v23 = result;
    v64 = a1;
    v24 = objc_msgSend(result, sel_loginID);

    result = -[NSObject account](a2, sel_account);
    if (!result)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v25 = result;
    v26 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v27 = objc_msgSend(v25, sel_loginID);

    a1 = -[NSObject serviceName](a2, sel_serviceName);
    v28 = (void *)sub_1D166DAA8();
    v29 = -[NSObject roomName](a2, sel_roomName);
    v63 = objc_msgSend(v26, sel_initWithSenderInfo_time_guid_messageID_account_accountID_service_handle_roomName_unformattedID_countryCode_type_, v20, 0, v22, 0, v24, v27, a1, v28, v29, 0, 0, 6);
    v30 = v63;

    if (!v30)
    {
      swift_bridgeObjectRelease();

      v57 = 0;
LABEL_41:

      return v57;
    }

    v31 = v30;
    result = -[NSObject participants](a2, sel_participants);
    if (!result)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v32 = result;
    sub_1D15FD3C0(0, (unint64_t *)&qword_1EFC62000);
    v33 = sub_1D166DBEC();

    v62 = a2;
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      result = (id)sub_1D166E15C();
      v34 = (uint64_t)result;
      if (result)
        goto LABEL_14;
    }
    else
    {
      v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (id)swift_bridgeObjectRetain();
      if (v34)
      {
LABEL_14:
        a1 = (id)(v34 - 1);
        if (v34 >= 1)
        {
          v35 = 0;
          if ((v33 & 0xC000000000000001) == 0)
            goto LABEL_17;
LABEL_16:
          for (i = (id)MEMORY[0x1D17E8FD0](v35, v33); ; i = *(id *)(v33 + 8 * (_QWORD)v35 + 32))
          {
            v37 = i;
            v38 = objc_msgSend(i, sel_ID, v62);
            if (!v38)
              break;
            v39 = v38;
            v40 = sub_1D166DACC();
            v42 = v41;

            if (v40 == v65 && v42 == v16)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v44 = sub_1D166E1E0();
              swift_bridgeObjectRelease();
              if ((v44 & 1) == 0)
                break;
            }
            v45 = objc_msgSend(v37, sel_unformattedID);
            objc_msgSend(v31, sel_setUnformattedID_, v45);

            v46 = objc_msgSend(v37, sel_countryCode);
            objc_msgSend(v31, sel_setCountryCode_, v46);

            if (a1 == v35)
              goto LABEL_37;
LABEL_28:
            v35 = (char *)v35 + 1;
            if ((v33 & 0xC000000000000001) != 0)
              goto LABEL_16;
LABEL_17:
            ;
          }

          if (a1 == v35)
            goto LABEL_37;
          goto LABEL_28;
        }
        __break(1u);
        goto LABEL_45;
      }
    }
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v58 = v31;
    a2 = v62;
    v59 = -[NSObject lastAddressedLocalHandle](v62, sel_lastAddressedLocalHandle);
    objc_msgSend(v58, sel_setDestinationCallerID_, v59);

    v60 = v64;
    if ((objc_msgSend(v64, sel_isLocallyCreated) & 1) != 0)
      objc_msgSend(v58, sel_setFlags_, 4);
    v61 = (unint64_t)objc_msgSend(v60, sel_avMode, v62);
    if ((v61 & 0x8000000000000000) == 0)
    {
      objc_msgSend(v58, sel_setAvMode_, v61);

      v57 = v63;
      goto LABEL_41;
    }
    __break(1u);
    goto LABEL_43;
  }
  result = -[NSObject account](a2, sel_account);
  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(result, sel_loginID);

    if (!v12)
      goto LABEL_30;
    v13 = objc_msgSend(v12, sel__stripFZIDPrefix);
LABEL_7:
    v9 = v13;

    if (v9)
      goto LABEL_8;
LABEL_30:
    if (qword_1ED935740 == -1)
    {
LABEL_31:
      v47 = sub_1D166D964();
      sub_1D141AC1C(v47, (uint64_t)qword_1ED936530);
      v48 = a1;
      v49 = a2;
      v50 = v48;
      v51 = v49;
      v52 = sub_1D166D94C();
      v53 = sub_1D166DD84();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc();
        v55 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v54 = 138412546;
        v66 = (uint64_t)v50;
        v56 = v50;
        sub_1D166DF28();
        *v55 = v50;

        *(_WORD *)(v54 + 12) = 2112;
        v66 = (uint64_t)v51;
        v50 = v51;
        sub_1D166DF28();
        v55[1] = v51;

        _os_log_impl(&dword_1D1413000, v52, v53, "Couldn't pick initiator for conversation %@ on chat %@", (uint8_t *)v54, 0x16u);
        sub_1D141AC58(&qword_1ED935810);
        swift_arrayDestroy();
        MEMORY[0x1D17EB0AC](v55, -1, -1);
        MEMORY[0x1D17EB0AC](v54, -1, -1);

      }
      else
      {

      }
      v57 = 0;
      a2 = v52;
      goto LABEL_41;
    }
LABEL_43:
    swift_once();
    goto LABEL_31;
  }
LABEL_48:
  __break(1u);
  return result;
}

void sub_1D1604EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if ((*(_QWORD *)v1 & 0xC000000000000001) != 0)
  {
    if (!sub_1D166DFE8())
      return;
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      sub_1D166DFB8();
      sub_1D15FD3C0(0, (unint64_t *)&unk_1EFC62E90);
      sub_1D1607A20((unint64_t *)&qword_1EFC62010, (unint64_t *)&unk_1EFC62E90);
      sub_1D166DD0C();
      a1 = v20;
      v18 = v21;
      v3 = v22;
      v4 = v23;
      v5 = v24;
    }
    else
    {
      v6 = -1 << *(_BYTE *)(a1 + 32);
      v18 = a1 + 56;
      v3 = ~v6;
      v7 = -v6;
      if (v7 < 64)
        v8 = ~(-1 << v7);
      else
        v8 = -1;
      v5 = v8 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v4 = 0;
    }
    v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_14;
    while (1)
    {
      if (v5)
      {
        v10 = (v5 - 1) & v5;
        v11 = __clz(__rbit64(v5)) | (v4 << 6);
        v12 = v4;
      }
      else
      {
        v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9)
          goto LABEL_36;
        v15 = *(_QWORD *)(v18 + 8 * v14);
        v12 = v4 + 1;
        if (!v15)
        {
          v12 = v4 + 2;
          if (v4 + 2 >= v9)
            goto LABEL_36;
          v15 = *(_QWORD *)(v18 + 8 * v12);
          if (!v15)
          {
            v12 = v4 + 3;
            if (v4 + 3 >= v9)
              goto LABEL_36;
            v15 = *(_QWORD *)(v18 + 8 * v12);
            if (!v15)
            {
              v12 = v4 + 4;
              if (v4 + 4 >= v9)
                goto LABEL_36;
              v15 = *(_QWORD *)(v18 + 8 * v12);
              if (!v15)
              {
                v12 = v4 + 5;
                if (v4 + 5 >= v9)
                  goto LABEL_36;
                v15 = *(_QWORD *)(v18 + 8 * v12);
                if (!v15)
                {
                  v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    v15 = *(_QWORD *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  sub_1D15FF5FC();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        v10 = (v15 - 1) & v15;
        v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v11);
      if (!v13)
        goto LABEL_36;
      while (1)
      {
        v17 = (void *)sub_1D162BA20(v13);

        v4 = v12;
        v5 = v10;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_14:
        if (sub_1D166E00C())
        {
          sub_1D15FD3C0(0, (unint64_t *)&unk_1EFC62E90);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v13 = v19;
          swift_unknownObjectRelease();
          v12 = v4;
          v10 = v5;
          if (v19)
            continue;
        }
        goto LABEL_36;
      }
    }
  }
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
    goto LABEL_5;
}

void sub_1D16051E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  unint64_t *v17;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1D166DFD0() == *(_DWORD *)(a4 + 36))
      {
        sub_1D166DFDC();
        sub_1D15FD3C0(0, a5);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        a5 = v17;
        swift_unknownObjectRelease();
        v9 = sub_1D166DED4();
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v12 = sub_1D166DEE0();

          if ((v12 & 1) == 0)
          {
            v13 = ~v10;
            do
            {
              v7 = (v7 + 1) & v13;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v14 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v15 = sub_1D166DEE0();

            }
            while ((v15 & 1) == 0);
          }

LABEL_20:
          v16 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1D17E8F10](a1, a2, v8);
  sub_1D15FD3C0(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1D1605440(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_1D16054C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  char v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  char v24;
  int64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D166DFB8();
    sub_1D15FD3C0(0, &qword_1EFC61FA8);
    sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
    sub_1D166DD0C();
    v3 = v29;
    v27 = v30;
    v4 = v31;
    v5 = v32;
    v6 = v33;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v27 = a1 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v5 = 0;
  }
  v26 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    v10 = v5;
    if ((v3 & 0x8000000000000000) == 0)
      break;
    if (!sub_1D166E00C())
      goto LABEL_39;
    sub_1D15FD3C0(0, &qword_1EFC61FA8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = v34;
    swift_unknownObjectRelease();
    if (!v34)
      goto LABEL_39;
LABEL_32:
    sub_1D15FD3C0(0, &qword_1ED935878);
    v17 = objc_msgSend(v13, sel_handle);
    v18 = objc_msgSend(a2, sel_handle);
    v19 = sub_1D166DEE0();

    if ((v19 & 1) == 0)
      goto LABEL_8;
    v20 = objc_msgSend(v13, sel_association);
    if (!v20)
      goto LABEL_8;
    v21 = v20;
    if (objc_msgSend(v20, sel_isPrimary))
    {
      v22 = objc_msgSend(v21, sel_handle);
      v23 = objc_msgSend(a3, sel_handle);
      v24 = sub_1D166DEE0();

      if ((v24 & 1) != 0)
        goto LABEL_39;
LABEL_8:

    }
    else
    {

    }
  }
  if (v6)
  {
    v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v12 = v11 | (v5 << 6);
LABEL_31:
    v13 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v12);
    if (!v13)
      goto LABEL_39;
    goto LABEL_32;
  }
  v14 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v14 >= v26)
      goto LABEL_39;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    ++v5;
    if (!v15)
    {
      v5 = v10 + 2;
      if (v10 + 2 >= v26)
        goto LABEL_39;
      v15 = *(_QWORD *)(v27 + 8 * v5);
      if (!v15)
      {
        v5 = v10 + 3;
        if (v10 + 3 >= v26)
          goto LABEL_39;
        v15 = *(_QWORD *)(v27 + 8 * v5);
        if (!v15)
        {
          v5 = v10 + 4;
          if (v10 + 4 >= v26)
            goto LABEL_39;
          v15 = *(_QWORD *)(v27 + 8 * v5);
          if (!v15)
          {
            v5 = v10 + 5;
            if (v10 + 5 >= v26)
              goto LABEL_39;
            v15 = *(_QWORD *)(v27 + 8 * v5);
            if (!v15)
            {
              v16 = v10 + 6;
              while (v26 != v16)
              {
                v15 = *(_QWORD *)(v27 + 8 * v16++);
                if (v15)
                {
                  v5 = v16 - 1;
                  goto LABEL_30;
                }
              }
LABEL_39:
              sub_1D15FF5FC();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v6 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v5 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t sub_1D16058CC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char **v12;
  id v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  id v20;
  char **v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;

  v2 = a1;
  v38 = MEMORY[0x1E0DEE9D8];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D166DFB8();
    sub_1D15FD3C0(0, &qword_1EFC61FA8);
    sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
    result = sub_1D166DD0C();
    v2 = v33;
    v31 = v34;
    v4 = v35;
    v5 = v36;
    v6 = v37;
  }
  else
  {
    v7 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v8 = ~v7;
    v9 = -v7;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v6 = v10 & *(_QWORD *)(a1 + 56);
    result = swift_bridgeObjectRetain();
    v4 = v8;
    v5 = 0;
  }
  v30 = (unint64_t)(v4 + 64) >> 6;
  v11 = &selRef__truthContainer;
  v12 = &selRef_idsTransportLogNeedsSync;
  v28 = v2;
  if ((v2 & 0x8000000000000000) == 0)
    goto LABEL_11;
LABEL_8:
  if (!sub_1D166E00C())
    goto LABEL_41;
  sub_1D15FD3C0(0, &qword_1EFC61FA8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v13 = v32;
  swift_unknownObjectRelease();
  v14 = v5;
  v15 = v6;
  if (!v32)
    goto LABEL_41;
  while (1)
  {
    v19 = objc_msgSend(v13, v11[353]);
    if (!v19)
      goto LABEL_30;
    v20 = v19;
    if ((objc_msgSend(v19, v12[395]) & 1) != 0)
      goto LABEL_29;
    v21 = v11;
    v22 = objc_msgSend(a2, sel_remoteMembers);
    sub_1D15FD3C0(0, &qword_1EFC61FA8);
    sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
    v23 = sub_1D166DCE8();

    v24 = v20;
    v20 = v13;
    sub_1D16054C8(v23, v24, v20);
    v26 = v25;
    swift_bridgeObjectRelease();

    if (v26)
    {
      v11 = v21;
      v12 = &selRef_idsTransportLogNeedsSync;
      v2 = v28;
LABEL_29:

      goto LABEL_30;
    }
    v11 = v21;
    v12 = &selRef_idsTransportLogNeedsSync;
    v2 = v28;
LABEL_30:
    MEMORY[0x1D17E8AD8]();
    if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1D166DC1C();
    sub_1D166DC34();
    result = sub_1D166DC04();
    v5 = v14;
    v6 = v15;
    if (v2 < 0)
      goto LABEL_8;
LABEL_11:
    if (!v6)
      break;
    v15 = (v6 - 1) & v6;
    v16 = __clz(__rbit64(v6)) | (v5 << 6);
    v14 = v5;
LABEL_24:
    v13 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v16);
    if (!v13)
      goto LABEL_41;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v14 >= v30)
    goto LABEL_41;
  v17 = *(_QWORD *)(v31 + 8 * v14);
  if (v17)
    goto LABEL_23;
  v18 = v5 + 2;
  if (v5 + 2 >= v30)
    goto LABEL_41;
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
    goto LABEL_22;
  v18 = v5 + 3;
  if (v5 + 3 >= v30)
    goto LABEL_41;
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
    goto LABEL_22;
  v18 = v5 + 4;
  if (v5 + 4 >= v30)
    goto LABEL_41;
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
  {
LABEL_22:
    v14 = v18;
LABEL_23:
    v15 = (v17 - 1) & v17;
    v16 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_24;
  }
  v14 = v5 + 5;
  if (v5 + 5 >= v30)
    goto LABEL_41;
  v17 = *(_QWORD *)(v31 + 8 * v14);
  if (v17)
    goto LABEL_23;
  v27 = v5 + 6;
  while (v30 != v27)
  {
    v17 = *(_QWORD *)(v31 + 8 * v27++);
    if (v17)
    {
      v14 = v27 - 1;
      goto LABEL_23;
    }
  }
LABEL_41:
  sub_1D15FF5FC();
  return v38;
}

uint64_t sub_1D1605D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  char **v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  void *v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  id v83;
  void *v84;
  uint64_t result;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v2 = sub_1D141AC58(&qword_1EFC62008);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D166D658();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v86 - v10;
  v12 = objc_msgSend((id)a1, sel_messagesGroupUUID);
  v13 = &selRef_presentApprovalSheetWithRequestIdentifier_completion_;
  if (v12)
  {
    v14 = v12;
    sub_1D166D640();

    v15 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v15(v4, v9, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v15(v11, v4, v5);
      v16 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
      sub_1D166D634();
      v17 = (void *)sub_1D166DAA8();
      swift_bridgeObjectRelease();
      v18 = objc_msgSend(v16, sel_existingChatsWithGroupID_, v17);

      sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357F0);
      v19 = sub_1D166DBEC();

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      if (!(v19 >> 62))
        goto LABEL_4;
LABEL_37:
      swift_bridgeObjectRetain();
      v57 = sub_1D166E15C();
      v89 = v19;
      v90 = v57;
      if (v57)
        goto LABEL_5;
      goto LABEL_38;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_1D141BA80((uint64_t)v4, &qword_1EFC62008);
  v33 = objc_msgSend((id)a1, sel_remoteMembers);
  sub_1D15FD3C0(0, &qword_1EFC61FA8);
  sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
  v34 = sub_1D166DCE8();

  if ((v34 & 0xC000000000000001) != 0)
    v35 = sub_1D166DFE8();
  else
    v35 = *(_QWORD *)(v34 + 16);
  swift_bridgeObjectRelease();
  if (v35 != 1)
    goto LABEL_28;
  v36 = objc_msgSend((id)a1, sel_remoteMembers);
  v37 = sub_1D166DCE8();

  v38 = (void *)sub_1D1602D1C(v37, &qword_1EFC61FA8);
  swift_bridgeObjectRelease();
  if (!v38
    || (v39 = objc_msgSend(v38, sel_handle),
        v38,
        v40 = objc_msgSend(v39, sel_normalizedValue),
        v39,
        !v40))
  {
LABEL_28:
    if (qword_1ED935740 == -1)
      goto LABEL_29;
    goto LABEL_76;
  }
  v41 = sub_1D166DACC();
  v43 = v42;

  if (objc_msgSend((id)a1, sel_avMode))
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v53 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  sub_1D141AC58(&qword_1ED935820);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_1D1683B20;
  *(_QWORD *)(v54 + 32) = v41;
  *(_QWORD *)(v54 + 40) = v43;
  v55 = (void *)sub_1D166DBD4();
  swift_bridgeObjectRelease();
  v56 = objc_msgSend(v53, sel_existingChatsForIDs_displayName_groupID_style_, v55, 0, 0, 45);

  sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357F0);
  v19 = sub_1D166DBEC();

  if (v19 >> 62)
    goto LABEL_37;
LABEL_4:
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v89 = v19;
  v90 = v20;
  if (v20)
  {
LABEL_5:
    v87 = a1;
    a1 = 0x6567617373654D69;
    v21 = v19 & 0xC000000000000001;
    v22 = 4;
    while (1)
    {
      if (v21)
        v23 = (id)MEMORY[0x1D17E8FD0](v22 - 4, v89);
      else
        v23 = *(id *)(v89 + 8 * v22);
      v24 = v23;
      v25 = v22 - 3;
      if (__OFADD__(v22 - 4, 1))
        goto LABEL_75;
      v26 = objc_msgSend(v23, sel_serviceName);
      if (v26)
      {
        v27 = v26;
        v28 = sub_1D166DACC();
        v30 = v29;

        if (v28 == 0x6567617373654D69 && v30 == 0xE800000000000000)
        {
          v19 = v89;
          swift_bridgeObjectRelease();

LABEL_34:
          swift_bridgeObjectRelease();
          v88 = 1;
LABEL_35:
          a1 = v87;
          v13 = &selRef_presentApprovalSheetWithRequestIdentifier_completion_;
          goto LABEL_39;
        }
        v32 = sub_1D166E1E0();

        swift_bridgeObjectRelease();
        if ((v32 & 1) != 0)
        {
          v19 = v89;
          goto LABEL_34;
        }
      }
      else
      {

      }
      ++v22;
      if (v25 == v90)
      {
        v19 = v89;
        swift_bridgeObjectRelease();
        v88 = 0;
        goto LABEL_35;
      }
    }
  }
LABEL_38:
  swift_bridgeObjectRelease();
  v88 = 0;
LABEL_39:
  v58 = objc_msgSend((id)a1, v13[182]);
  sub_1D15FD3C0(0, &qword_1EFC61FA8);
  sub_1D1607A20(&qword_1EFC61FB0, &qword_1EFC61FA8);
  v59 = sub_1D166DCE8();

  v60 = (id)a1;
  v61 = sub_1D16058CC(v59, v60);
  swift_bridgeObjectRelease();

  v62 = sub_1D16306EC(v61);
  swift_bridgeObjectRelease();
  sub_1D1603190(v62);
  v64 = v63;
  swift_bridgeObjectRelease();
  v65 = sub_1D1630710(v64);
  swift_bridgeObjectRelease();
  v66 = MEMORY[0x1E0DEE9D8];
  v92 = MEMORY[0x1E0DEE9D8];
  v67 = v90;
  if (v90)
  {
    v68 = 0;
    v69 = v19 & 0xC000000000000001;
    v70 = v19 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v69)
      {
        v71 = (id)MEMORY[0x1D17E8FD0](v68, v19);
      }
      else
      {
        if (v68 >= *(_QWORD *)(v70 + 16))
          goto LABEL_74;
        v71 = *(id *)(v19 + 8 * v68 + 32);
      }
      a1 = (uint64_t)v71;
      v72 = v68 + 1;
      if (__OFADD__(v68, 1))
        break;
      v91 = (uint64_t)v71;
      if ((sub_1D16034CC((id *)&v91, v88, v60, v65) & 1) != 0)
      {
        sub_1D166E0E4();
        sub_1D166E108();
        v19 = v89;
        sub_1D166E114();
        sub_1D166E0F0();
        v67 = v90;
      }
      else
      {

      }
      ++v68;
      if (v72 == v67)
      {
        v66 = v92;
        goto LABEL_51;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_once();
LABEL_29:
    v44 = sub_1D166D964();
    sub_1D141AC1C(v44, (uint64_t)qword_1ED936530);
    v45 = (id)a1;
    v46 = sub_1D166D94C();
    v47 = sub_1D166DD9C();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v91 = (uint64_t)v45;
      v92 = v49;
      *(_DWORD *)v48 = 136315138;
      sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357A0);
      v50 = v45;
      v51 = sub_1D166DAF0();
      v91 = sub_1D141BCB4(v51, v52, &v92);
      sub_1D166DF28();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D1413000, v46, v47, "Failed to find existing chat for conversation: %s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v49, -1, -1);
      MEMORY[0x1D17EB0AC](v48, -1, -1);

    }
    else
    {

    }
    return 0;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 0x8000000000000000) == 0 && (v66 & 0x4000000000000000) == 0)
  {
    v73 = *(_QWORD *)(v66 + 16);
    swift_retain();
    if (v73)
      goto LABEL_54;
LABEL_78:
    swift_release_n();
    return 0;
  }
  swift_retain();
  v73 = sub_1D166E15C();
  if (!v73)
    goto LABEL_78;
LABEL_54:
  v74 = v66 & 0xC000000000000001;
  if ((v66 & 0xC000000000000001) != 0)
  {
    v75 = (id)MEMORY[0x1D17E8FD0](0, v66);
  }
  else
  {
    if (!*(_QWORD *)(v66 + 16))
    {
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    v75 = *(id *)(v66 + 32);
  }
  v76 = v75;
  v77 = v73 - 1;
  if (v73 == 1)
  {
LABEL_58:
    swift_release_n();
    return (uint64_t)v76;
  }
  if (v73 < 2)
    goto LABEL_83;
  if (v74 || (v78 = *(_QWORD *)(v66 + 16), v78 >= 2) && v77 < v78)
  {
    v79 = 0;
    do
    {
      if (v74)
        v80 = (id)MEMORY[0x1D17E8FD0](v79 + 1, v66);
      else
        v80 = *(id *)(v66 + 8 * v79 + 40);
      v81 = v80;
      v82 = objc_msgSend(v76, sel_lastMessageTimeStampOnLoad);
      v83 = objc_msgSend(v81, sel_lastMessageTimeStampOnLoad);
      if ((uint64_t)v83 >= (uint64_t)v82)
        v84 = v81;
      else
        v84 = v76;
      if ((uint64_t)v83 < (uint64_t)v82)
        v76 = v81;

      ++v79;
    }
    while (v77 != v79);
    goto LABEL_58;
  }
LABEL_84:
  __break(1u);
  swift_bridgeObjectRelease();

  result = swift_release();
  __break(1u);
  return result;
}

void sub_1D1606740(void *a1, void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, id);
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, id);
  id v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  NSObject *v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  id v55;
  id v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  void *v71;
  _QWORD *v72;
  NSObject *v73;
  id v74;
  void *v75;
  char v76;
  char *v77;
  id v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  id v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, id);
  char *v95;
  NSObject *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;

  v4 = (_QWORD *)sub_1D166D964();
  v5 = *(v4 - 1);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v90 - v9;
  sub_1D15FD3C0(0, (unint64_t *)&unk_1EFC61FF0);
  v11 = a1;
  v12 = a2;
  v13 = sub_1D16046DC(v11, v12);
  if (!v13)
  {
    if (qword_1ED935740 != -1)
      swift_once();
    sub_1D141AC1C((uint64_t)v4, (uint64_t)qword_1ED936530);
    v33 = v11;
    v34 = v12;
    v97 = v33;
    v35 = v34;
    v36 = sub_1D166D94C();
    v37 = sub_1D166DD84();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc();
      v39 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v38 = 138412546;
      v99 = (uint64_t)v97;
      v40 = v97;
      sub_1D166DF28();
      *v39 = v97;

      *(_WORD *)(v38 + 12) = 2112;
      v99 = (uint64_t)v35;
      v41 = v35;
      sub_1D166DF28();
      v39[1] = v35;

      _os_log_impl(&dword_1D1413000, v36, v37, "Failed to create IMTUConversationItem for conversation %@ on chat %@", (uint8_t *)v38, 0x16u);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v39, -1, -1);
      MEMORY[0x1D17EB0AC](v38, -1, -1);

    }
    else
    {

    }
    return;
  }
  v14 = v13;
  v15 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v16 = objc_msgSend(v14, sel_guid);
  if (!v16)
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v17 = v16;
  v18 = objc_msgSend(v15, sel_chatForMessageGUID_, v16);

  if (v18)
  {
    v95 = v8;
    v96 = v12;
    if (qword_1ED935740 != -1)
      swift_once();
    v19 = sub_1D141AC1C((uint64_t)v4, (uint64_t)qword_1ED936530);
    v20 = *(void (**)(char *, uint64_t, id))(v5 + 16);
    v93 = v19;
    v94 = v20;
    ((void (*)(char *))v20)(v10);
    v21 = v18;
    v22 = sub_1D166D94C();
    v23 = sub_1D166DD9C();
    v24 = os_log_type_enabled(v22, v23);
    v97 = v4;
    if (v24)
    {
      v91 = v14;
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v99 = v26;
      *(_DWORD *)v25 = 136315138;
      v27 = objc_msgSend(v21, sel_chatIdentifier);
      v92 = v21;
      if (!v27)
      {
LABEL_51:

        __break(1u);
LABEL_52:

        __break(1u);
        return;
      }
      v28 = v27;
      v29 = sub_1D166DACC();
      v31 = v30;

      v98 = sub_1D141BCB4(v29, v31, &v99);
      sub_1D166DF28();
      v21 = v92;

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D1413000, v22, v23, "Found existing item mapping to chatIdentifier: %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v26, -1, -1);
      MEMORY[0x1D17EB0AC](v25, -1, -1);

      v32 = *(void (**)(char *, id))(v5 + 8);
      v32(v10, v97);
      v14 = v91;
    }
    else
    {

      v32 = *(void (**)(char *, id))(v5 + 8);
      v32(v10, v4);
    }
    v42 = objc_msgSend(v21, sel_guid);
    if (v42)
    {
      v43 = v42;
      v44 = sub_1D166DACC();
      v46 = v45;

    }
    else
    {
      v44 = 0;
      v46 = 0;
    }
    v47 = -[NSObject guid](v96, sel_guid);
    if (v47)
    {
      v48 = v47;
      v49 = sub_1D166DACC();
      v51 = v50;

      if (v46)
      {
        if (v51)
        {
          if (v44 == v49 && v46 == v51)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_43:
            v77 = v95;
            v78 = v97;
            v94(v95, v93, v97);
            v14 = v14;
            v79 = sub_1D166D94C();
            v80 = sub_1D166DD9C();
            if (!os_log_type_enabled(v79, v80))
            {

              v88 = v77;
              v89 = v78;
              goto LABEL_47;
            }
            v92 = v21;
            v81 = (uint8_t *)swift_slowAlloc();
            v82 = swift_slowAlloc();
            v99 = v82;
            *(_DWORD *)v81 = 136315138;
            v83 = objc_msgSend(v14, (SEL)&selRef_groupTitle);
            if (v83)
            {
              v84 = v83;
              v85 = sub_1D166DACC();
              v87 = v86;

              v98 = sub_1D141BCB4(v85, v87, &v99);
              sub_1D166DF28();

              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1D1413000, v79, v80, "Not adding IMTUConversationItem since item GUID %s already exists", v81, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1D17EB0AC](v82, -1, -1);
              MEMORY[0x1D17EB0AC](v81, -1, -1);

              v88 = v95;
              v89 = v97;
LABEL_47:
              v32(v88, v89);
              return;
            }
            goto LABEL_52;
          }
          v76 = sub_1D166E1E0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) != 0)
            goto LABEL_43;

          goto LABEL_28;
        }
      }
      else if (!v51)
      {
        goto LABEL_43;
      }
    }
    else if (!v46)
    {
      goto LABEL_43;
    }

    swift_bridgeObjectRelease();
LABEL_28:
    v12 = v96;
    v4 = v97;
  }
  v52 = -[NSObject serviceSession](v12, sel_serviceSession);
  if (v52)
  {
    v53 = v52;
    if (qword_1ED935740 != -1)
      swift_once();
    sub_1D141AC1C((uint64_t)v4, (uint64_t)qword_1ED936530);
    v54 = v12;
    v55 = v14;
    v56 = v14;
    v57 = v54;
    v58 = v56;
    v59 = sub_1D166D94C();
    v60 = sub_1D166DD9C();
    v14 = (id)v60;
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc();
      v97 = v53;
      v62 = v61;
      v63 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v62 = 138412546;
      LODWORD(v96) = (_DWORD)v14;
      v99 = (uint64_t)v58;
      v64 = v58;
      sub_1D166DF28();
      *v63 = v55;

      *(_WORD *)(v62 + 12) = 2112;
      v14 = (id)(v62 + 14);
      v99 = (uint64_t)v57;
      v65 = v57;
      sub_1D166DF28();
      v63[1] = v57;

      _os_log_impl(&dword_1D1413000, v59, (os_log_type_t)v96, "Storing conversationItem %@ on chat %@", (uint8_t *)v62, 0x16u);
      sub_1D141AC58(&qword_1ED935810);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v63, -1, -1);
      v66 = v62;
      v53 = v97;
      MEMORY[0x1D17EB0AC](v66, -1, -1);
    }
    else
    {

      v59 = v58;
    }

    v74 = -[NSObject chatIdentifier](v57, sel_chatIdentifier);
    if (v74)
    {
      v75 = v74;
      objc_msgSend(v53, sel_storeItem_toChat_style_, v58, v74, -[NSObject style](v57, sel_style));

      return;
    }
    goto LABEL_50;
  }
  if (qword_1ED935740 != -1)
    swift_once();
  sub_1D141AC1C((uint64_t)v4, (uint64_t)qword_1ED936530);
  v67 = v12;
  v68 = sub_1D166D94C();
  v69 = sub_1D166DD84();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc();
    v71 = v14;
    v72 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v70 = 138412290;
    v99 = (uint64_t)v67;
    v73 = v67;
    sub_1D166DF28();
    *v72 = v67;

    _os_log_impl(&dword_1D1413000, v68, v69, "Failed to find service session for chat %@", v70, 0xCu);
    sub_1D141AC58(&qword_1ED935810);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v72, -1, -1);
    MEMORY[0x1D17EB0AC](v70, -1, -1);

  }
  else
  {

  }
}

void sub_1D160722C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;

  v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D166DFB8();
    sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357A0);
    sub_1D1607A20((unint64_t *)&unk_1ED9357B0, (unint64_t *)&unk_1ED9357A0);
    sub_1D166DD0C();
    v2 = v32;
    v29 = v33;
    v3 = v34;
    v4 = v35;
    v5 = v36;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v7 = ~v6;
    v8 = -v6;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = v7;
    v4 = 0;
  }
  v28 = (unint64_t)(v3 + 64) >> 6;
  v30 = v2;
  while (v2 < 0)
  {
    if (!sub_1D166E00C())
      goto LABEL_50;
    sub_1D15FD3C0(0, (unint64_t *)&unk_1ED9357A0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v13 = v37;
    swift_unknownObjectRelease();
    v12 = v4;
    v10 = v5;
    if (!v37)
      goto LABEL_50;
LABEL_34:
    v17 = (void *)sub_1D1605D0C((uint64_t)v13);
    v18 = v17;
    if (v17)
    {
      v19 = objc_msgSend(v17, sel_guid);

      if (v19)
      {
        v20 = sub_1D166DACC();
        v18 = v21;

      }
      else
      {
        v20 = 0;
        v18 = 0;
      }
    }
    else
    {
      v20 = 0;
    }
    v22 = objc_msgSend(a2, sel_guid);
    if (!v22)
    {
      if (!v18)
        goto LABEL_50;
LABEL_9:

      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    v23 = v22;
    v24 = sub_1D166DACC();
    v26 = v25;

    if (!v18)
    {
      if (!v26)
        goto LABEL_50;
      goto LABEL_9;
    }
    if (!v26)
      goto LABEL_9;
    if (v20 == v24 && v18 == v26)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_50:
      sub_1D15FF5FC();
      return;
    }
    v27 = sub_1D166E1E0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
      goto LABEL_50;

LABEL_10:
    v4 = v12;
    v5 = v10;
    v2 = v30;
  }
  if (v5)
  {
    v10 = (v5 - 1) & v5;
    v11 = __clz(__rbit64(v5)) | (v4 << 6);
    v12 = v4;
LABEL_33:
    v13 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    if (!v13)
      goto LABEL_50;
    goto LABEL_34;
  }
  v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v28)
      goto LABEL_50;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v12 = v4 + 1;
    if (!v15)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v28)
        goto LABEL_50;
      v15 = *(_QWORD *)(v29 + 8 * v12);
      if (!v15)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v28)
          goto LABEL_50;
        v15 = *(_QWORD *)(v29 + 8 * v12);
        if (!v15)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v28)
            goto LABEL_50;
          v15 = *(_QWORD *)(v29 + 8 * v12);
          if (!v15)
          {
            v12 = v4 + 5;
            if (v4 + 5 >= v28)
              goto LABEL_50;
            v15 = *(_QWORD *)(v29 + 8 * v12);
            if (!v15)
            {
              v16 = v4 + 6;
              while (v28 != v16)
              {
                v15 = *(_QWORD *)(v29 + 8 * v16++);
                if (v15)
                {
                  v12 = v16 - 1;
                  goto LABEL_32;
                }
              }
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_32:
    v10 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v12 << 6);
    goto LABEL_33;
  }
  __break(1u);
}

uint64_t sub_1D160763C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  id v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  _QWORD *v29;
  const char *v30;
  void *v31;
  char *v32;
  id v33;

  v7 = v4;
  v9 = sub_1D141AC58((uint64_t *)&unk_1ED935780);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED935740 != -1)
    swift_once();
  v12 = sub_1D166D964();
  sub_1D141AC1C(v12, (uint64_t)qword_1ED936530);
  v13 = a1;
  v14 = sub_1D166D94C();
  v15 = sub_1D166DD9C();
  if (os_log_type_enabled(v14, v15))
  {
    v31 = v7;
    v16 = swift_slowAlloc();
    v30 = a2;
    v17 = (uint8_t *)v16;
    v29 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v17 = 138412290;
    v33 = v13;
    v18 = v13;
    v32 = v11;
    v19 = v18;
    v7 = v31;
    sub_1D166DF28();
    v20 = v29;
    *v29 = v13;

    v11 = v32;
    _os_log_impl(&dword_1D1413000, v14, v15, v30, v17, 0xCu);
    sub_1D141AC58(&qword_1ED935810);
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v20, -1, -1);
    MEMORY[0x1D17EB0AC](v17, -1, -1);

  }
  else
  {

  }
  v21 = sub_1D166DCB8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 1, 1, v21);
  sub_1D166DCA0();
  v22 = v13;
  v23 = v7;
  v24 = sub_1D166DC94();
  v25 = (_QWORD *)swift_allocObject();
  v26 = MEMORY[0x1E0DF06E8];
  v25[2] = v24;
  v25[3] = v26;
  v25[4] = v23;
  v25[5] = v22;
  sub_1D1641B5C((uint64_t)v11, a4, (uint64_t)v25);
  return swift_release();
}

uint64_t method lookup function for CallManager()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1D16078C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1D141C488;
  return sub_1D1603000(a1, v4, v5, v7, v6);
}

void sub_1D1607938(uint64_t a1)
{
  sub_1D16044B4(a1);
}

uint64_t sub_1D1607940()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1D141AC58((uint64_t *)&unk_1EFC61FC0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1D16079A4()
{
  sub_1D141AC58((uint64_t *)&unk_1EFC61FC0);
  sub_1D141AC58((uint64_t *)&unk_1EFC61FC0);
  return sub_1D166DC7C();
}

uint64_t sub_1D1607A14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1D1607A20(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1D15FD3C0(255, a2);
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D1607A64()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1D1607A98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_1D1607C7C;
  return sub_1D1602E70(a1, v4, v5, v7, v6);
}

unint64_t sub_1D1607B10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED935770;
  if (!qword_1ED935770)
  {
    v1 = sub_1D15FC6A0((uint64_t *)&unk_1ED935760);
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED935770);
  }
  return result;
}

uint64_t sub_1D1607B5C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1D1607B80()
{
  uint64_t v0;

  return sub_1D1600718(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1D1607B88()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1D1607BAC()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1D1607BD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1D1607C7C;
  return sub_1D160080C(a1, v4, v5, v6);
}

uint64_t sub_1D1607C44(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t sub_1D1607C88(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (qword_1ED935578 != -1)
      swift_once();
    v3 = sub_1D166D964();
    sub_1D141AC1C(v3, (uint64_t)qword_1ED9364E8);
    swift_bridgeObjectRetain_n();
    v4 = sub_1D166D94C();
    v5 = sub_1D166DD9C();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v12 = v7;
      *(_DWORD *)v6 = 136315138;
      v8 = swift_bridgeObjectRetain();
      v9 = MEMORY[0x1D17E8B08](v8, MEMORY[0x1E0DEA968]);
      v11 = v10;
      swift_bridgeObjectRelease();
      sub_1D141BCB4(v9, v11, &v12);
      sub_1D166DF28();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D1413000, v4, v5, "Observed blockedHandles: %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D17EB0AC](v7, -1, -1);
      MEMORY[0x1D17EB0AC](v6, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1D1607E88(v1);
    return swift_release();
  }
  return result;
}

id sub_1D1607E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v16;
  void *v17;
  id result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;

  v2 = v1;
  swift_retain();
  v4 = sub_1D1608308(a1, v1);
  swift_release();
  if (qword_1ED935578 != -1)
LABEL_39:
    swift_once();
  v5 = sub_1D166D964();
  sub_1D141AC1C(v5, (uint64_t)qword_1ED9364E8);
  swift_bridgeObjectRetain_n();
  v6 = sub_1D166D94C();
  v7 = sub_1D166DD9C();
  v8 = v4 >> 62;
  if (os_log_type_enabled(v6, v7))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v9 = 134217984;
    if (v8)
    {
      swift_bridgeObjectRetain();
      sub_1D166E15C();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_1D166DF28();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D1413000, v6, v7, "Found %ld blocked Chats. Cancelling scheduled messages for these if any.", v9, 0xCu);
    MEMORY[0x1D17EB0AC](v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1D166E15C();
    if (v10)
      goto LABEL_9;
    return (id)swift_bridgeObjectRelease_n();
  }
  v10 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
    return (id)swift_bridgeObjectRelease_n();
LABEL_9:
  v11 = 0;
  v34 = v2 + 16;
  v35 = v4 & 0xC000000000000001;
  v31 = v4 + 32;
  v32 = v10;
  v33 = v4;
  while (1)
  {
    while (1)
    {
      if (v35)
        v13 = (id)MEMORY[0x1D17E8FD0](v11, v4);
      else
        v13 = *(id *)(v31 + 8 * v11);
      v14 = v13;
      if (__OFADD__(v11++, 1))
      {
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      v16 = MEMORY[0x1D17EB154](v34);
      if (v16)
        break;

      if (v11 == v10)
        return (id)swift_bridgeObjectRelease_n();
    }
    v17 = (void *)v16;
    result = objc_msgSend(v14, sel_participants);
    if (!result)
      break;
    v19 = result;
    sub_1D160859C();
    v4 = sub_1D166DBEC();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1D166E15C();
      v36 = v17;
      v37 = v14;
      if (!v20)
      {
LABEL_10:
        v12 = (char *)MEMORY[0x1E0DEE9D8];
        goto LABEL_11;
      }
    }
    else
    {
      v20 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v36 = v17;
      v37 = v14;
      if (!v20)
        goto LABEL_10;
    }
    if (v20 < 1)
      goto LABEL_38;
    v21 = 0;
    v12 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v4 & 0xC000000000000001) != 0)
        v22 = (id)MEMORY[0x1D17E8FD0](v21, v4);
      else
        v22 = *(id *)(v4 + 8 * v21 + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, sel_ID);
      if (v24)
      {
        v25 = v24;
        v26 = sub_1D166DACC();
        v2 = v27;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = (char *)sub_1D160DB14(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
        v29 = *((_QWORD *)v12 + 2);
        v28 = *((_QWORD *)v12 + 3);
        if (v29 >= v28 >> 1)
          v12 = (char *)sub_1D160DB14((_QWORD *)(v28 > 1), v29 + 1, 1, v12);
        *((_QWORD *)v12 + 2) = v29 + 1;
        v30 = &v12[16 * v29];
        *((_QWORD *)v30 + 4) = v26;
        *((_QWORD *)v30 + 5) = v2;
      }
      else
      {

      }
      ++v21;
    }
    while (v20 != v21);
LABEL_11:
    swift_bridgeObjectRelease_n();
    sub_1D163866C(v37, v12, 4);

    swift_bridgeObjectRelease();
    v10 = v32;
    v4 = v33;
    if (v11 == v32)
      return (id)swift_bridgeObjectRelease_n();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D16082AC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();

  sub_1D141AC98(v0 + 32);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScheduledMessageBlocklistObserver()
{
  return objc_opt_self();
}

uint64_t sub_1D1608308(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  void *v5;
  unint64_t *v6;
  char **v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  result = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(void **)(a2 + 24);
    swift_bridgeObjectRetain();
    v6 = (unint64_t *)(a1 + 40);
    v7 = &selRef_didReceiveReplaceMessageID_forChat_style_;
    v8 = &qword_1ED935000;
    v22 = v5;
    do
    {
      v9 = *(v6 - 1);
      v10 = *v6;
      swift_bridgeObjectRetain();
      v11 = (void *)sub_1D166DAA8();
      v12 = objc_msgSend(v5, v7[156], v11);

      if (v12)
      {
        v13 = swift_bridgeObjectRelease();
        MEMORY[0x1D17E8AD8](v13);
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1D166DC1C();
        sub_1D166DC34();
        sub_1D166DC04();
      }
      else
      {
        if (v8[175] != -1)
          swift_once();
        v14 = sub_1D166D964();
        sub_1D141AC1C(v14, (uint64_t)qword_1ED9364E8);
        swift_bridgeObjectRetain_n();
        v15 = sub_1D166D94C();
        v16 = sub_1D166DD6C();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc();
          v18 = v7;
          v19 = swift_slowAlloc();
          v23 = v19;
          *(_DWORD *)v17 = 136315138;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v17 + 4) = sub_1D141BCB4(v9, v10, &v23);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1D1413000, v15, v16, "No chat found for blocked handle: %s", (uint8_t *)v17, 0xCu);
          swift_arrayDestroy();
          v20 = v19;
          v7 = v18;
          v5 = v22;
          MEMORY[0x1D17EB0AC](v20, -1, -1);
          v21 = v17;
          v8 = &qword_1ED935000;
          MEMORY[0x1D17EB0AC](v21, -1, -1);
          swift_bridgeObjectRelease();

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

unint64_t sub_1D160859C()
{
  unint64_t result;

  result = qword_1EFC62000;
  if (!qword_1EFC62000)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EFC62000);
  }
  return result;
}

uint64_t IMDLiteMessageCompressor.compress(_:)()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedCompressor, 0, v6);
  v1 = (void *)sub_1D166D58C();
  v2 = objc_msgSend(v0, sel_compressData_codecID_, v1, &v5);

  if (!v2)
    return 0;
  v3 = sub_1D166D598();

  return v3;
}

uint64_t IMDCKSyncController.bridgeClass()()
{
  uint64_t v0;

  v0 = type metadata accessor for IMDaemonCoreBridgeDelegate();
  sub_1D16086FC();
  return v0;
}

unint64_t sub_1D16086FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED9356E8;
  if (!qword_1ED9356E8)
  {
    v1 = type metadata accessor for IMDaemonCoreBridgeDelegate();
    result = MEMORY[0x1D17EAFE0](&protocol conformance descriptor for IMDaemonCoreBridgeDelegate, v1);
    atomic_store(result, (unint64_t *)&qword_1ED9356E8);
  }
  return result;
}

uint64_t sub_1D1608744()
{
  uint64_t v0;

  v0 = type metadata accessor for IMDaemonCoreBridgeDelegate();
  sub_1D16086FC();
  return v0;
}

uint64_t XPCClientConnectionRouteProvider.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t XPCClientConnectionRouteProvider.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

id sub_1D16087B4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_processIdentifier);
  *a2 = (_DWORD)result;
  return result;
}

uint64_t sub_1D16087E4(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_remoteObjectProxy);
  sub_1D166DF70();
  swift_unknownObjectRelease();
  sub_1D141AC58((uint64_t *)&unk_1ED9357E0);
  return swift_dynamicCast();
}

void sub_1D1608860(void **a1@<X0>, char *a2@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  unsigned __int8 v6;
  char v7;
  id v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v3 = *a1;
  v4 = (void *)sub_1D166DAA8();
  v5 = objc_msgSend(v3, sel_valueForEntitlement_, v4);

  if (v5)
  {
    sub_1D166DF70();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1D141B3F4((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    sub_1D1608CC4((uint64_t)v10);
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
  sub_1D15FF710();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_9;
  v6 = objc_msgSend(v8, sel_BOOLValue);

  if ((v6 & 1) == 0)
    goto LABEL_9;
  v7 = 1;
LABEL_10:
  *a2 = v7;
}

uint64_t sub_1D1608960()
{
  sub_1D166D7CC();
  sub_1D166E1BC();
  sub_1D166DB5C();
  swift_bridgeObjectRelease();
  return 0x203A444950;
}

uint64_t sub_1D16089E8()
{
  unsigned __int8 v1;

  sub_1D166D7CC();
  return v1;
}

uint64_t sub_1D1608A34()
{
  uint64_t v1;

  sub_1D141AC58((uint64_t *)&unk_1ED9357E0);
  sub_1D166D7CC();
  return v1;
}

uint64_t type metadata accessor for XPCClientConnectionRouteProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCClientConnectionRouteProvider()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for XPCClientConnectionRouteProvider.State()
{
  return &type metadata for XPCClientConnectionRouteProvider.State;
}

uint64_t sub_1D1608AC0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  id v12;

  v3 = sub_1D166DDFC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D166DDF0();
  MEMORY[0x1E0C80A78](v7);
  v8 = sub_1D166D9F4();
  MEMORY[0x1E0C80A78](v8);
  v9 = a1;
  sub_1D166D9E8();
  v12 = (id)MEMORY[0x1E0DEE9D8];
  sub_1D1608C74();
  sub_1D141AC58((uint64_t *)&unk_1ED935760);
  sub_1D1607B10();
  sub_1D166DF88();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF8D0], v3);
  v12 = v9;
  sub_1D141AC58((uint64_t *)&unk_1ED935B58);
  swift_allocObject();
  *(_QWORD *)(v1 + 16) = sub_1D166D7D8();
  return v1;
}

unint64_t sub_1D1608C74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED9357C0;
  if (!qword_1ED9357C0)
  {
    v1 = sub_1D166DDF0();
    result = MEMORY[0x1D17EAFE0](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&qword_1ED9357C0);
  }
  return result;
}

void sub_1D1608CBC(void **a1@<X0>, char *a2@<X8>)
{
  sub_1D1608860(a1, a2);
}

uint64_t sub_1D1608CC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1D141AC58(&qword_1ED935840);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id IMDCollaborationClearNoticeRateLimiter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id IMDCollaborationClearNoticeRateLimiter.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  objc_class *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;
  uint64_t v19;

  v1 = v0;
  v2 = sub_1D166DDFC();
  v16 = *(_QWORD *)(v2 - 8);
  v17 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1D166DDF0();
  MEMORY[0x1E0C80A78](v5);
  v6 = sub_1D166D9F4();
  MEMORY[0x1E0C80A78](v6);
  v7 = &v0[OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_rateLimiterOverride];
  *(_QWORD *)v7 = 0xD00000000000002BLL;
  *((_QWORD *)v7 + 1) = 0x80000001D16953A0;
  v8 = OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_noticeEventHistory;
  sub_1D15FD3C0(0, &qword_1ED9357D8);
  v9 = v0;
  v10 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[v8] = sub_1D166DD60();
  sub_1D15FD3C0(0, (unint64_t *)&qword_1ED9357D0);
  sub_1D166D9E8();
  v19 = v10;
  sub_1D15FC784((unint64_t *)&qword_1ED9357C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  sub_1D141AC58((uint64_t *)&unk_1ED935760);
  sub_1D1607B10();
  sub_1D166DF88();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v4, *MEMORY[0x1E0DEF8D0], v17);
  *(_QWORD *)&v9[OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_persistenceQueue] = sub_1D166DE2C();
  v11 = sub_1D160A448();
  v12 = *(void **)&v0[v8];
  *(_QWORD *)&v1[v8] = v11;

  v13 = (objc_class *)type metadata accessor for IMDCollaborationClearNoticeRateLimiter();
  v18.receiver = v9;
  v18.super_class = v13;
  return objc_msgSendSuper2(&v18, sel_init);
}

uint64_t sub_1D1608F98(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  int v23;
  void (*v24)(char *, char *);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void (*v80)(char *, uint64_t);
  void (*v81)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  id v93;
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96[5];

  v3 = sub_1D166D688();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1D166D478();
  v88 = *(_QWORD *)(v7 - 8);
  v89 = v7;
  MEMORY[0x1E0C80A78](v7);
  v91 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1D141AC58(&qword_1ED9354E8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1D166D628();
  v94 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v90 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v92 = (char *)&v83 - v15;
  v86 = OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_noticeEventHistory;
  v87 = v1;
  v16 = *(id *)(v1 + OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_noticeEventHistory);
  v93 = a1;
  v17 = objc_msgSend(a1, sel_collaborationId);
  v18 = sub_1D166DACC();
  v20 = v19;

  *(_QWORD *)&v95[0] = v18;
  *((_QWORD *)&v95[0] + 1) = v20;
  swift_bridgeObjectRetain();
  v21 = objc_msgSend(v16, sel___swift_objectForKeyedSubscript_, sub_1D166E204());
  swift_unknownObjectRelease();

  if (v21)
  {
    sub_1D166DF70();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v95, 0, sizeof(v95));
  }
  sub_1D141B3F4((uint64_t)v95, (uint64_t)v96);
  v22 = v94;
  if (v96[3])
  {
    v23 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v11, v23 ^ 1u, 1, v12);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v11, 1, v12) != 1)
    {
      v24 = *(void (**)(char *, char *))(v22 + 32);
      v85 = v12;
      v24(v92, v11);
      sub_1D166D61C();
      sub_1D166D670();
      sub_1D141AC58(&qword_1EFC620C8);
      v25 = sub_1D166D67C();
      v26 = *(_QWORD *)(v25 - 8);
      v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1D1683B20;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v26 + 104))(v28 + v27, *MEMORY[0x1E0CB1178], v25);
      sub_1D160A87C(v28);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      sub_1D166D664();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v29 = sub_1D166D46C();
      if ((v30 & 1) != 0)
      {
        if (qword_1ED935750 != -1)
          swift_once();
        v68 = sub_1D166D964();
        sub_1D141AC1C(v68, (uint64_t)qword_1ED936560);
        v69 = v93;
        v70 = sub_1D166D94C();
        v71 = sub_1D166DD84();
        v72 = os_log_type_enabled(v70, v71);
        v73 = v85;
        if (v72)
        {
          v74 = (uint8_t *)swift_slowAlloc();
          v75 = swift_slowAlloc();
          v96[0] = v75;
          *(_DWORD *)v74 = 136315138;
          v93 = v74 + 4;
          v76 = objc_msgSend(v69, sel_collaborationId);
          v77 = sub_1D166DACC();
          v79 = v78;

          *(_QWORD *)&v95[0] = sub_1D141BCB4(v77, v79, v96);
          sub_1D166DF28();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1D1413000, v70, v71, "RateLimiter: clear notice for collaboration id %s couldn't calculate elapsed time.", v74, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1D17EB0AC](v75, -1, -1);
          MEMORY[0x1D17EB0AC](v74, -1, -1);
        }
        else
        {

        }
        (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v89);
        v81 = *(void (**)(char *, uint64_t))(v94 + 8);
        v81(v90, v73);
        v81(v92, v73);
        return 0;
      }
      v31 = v29;
      v32 = (id)*MEMORY[0x1E0D37EA0];
      v33 = (void *)sub_1D166DAA8();
      v34 = (void *)IMGetCachedDomainIntForKeyWithDefaultValue();

      if (qword_1ED935750 != -1)
        swift_once();
      v35 = sub_1D166D964();
      sub_1D141AC1C(v35, (uint64_t)qword_1ED936560);
      v36 = v93;
      v37 = sub_1D166D94C();
      v38 = sub_1D166DD6C();
      v39 = os_log_type_enabled(v37, v38);
      v40 = v85;
      if (v39)
      {
        v93 = v34;
        v41 = swift_slowAlloc();
        v84 = swift_slowAlloc();
        v96[0] = v84;
        *(_DWORD *)v41 = 67109890;
        LODWORD(v95[0]) = v31 >= (uint64_t)v34;
        sub_1D166DF28();
        *(_WORD *)(v41 + 8) = 2080;
        v42 = objc_msgSend(v36, sel_collaborationId);
        v43 = v31;
        v44 = sub_1D166DACC();
        v46 = v45;

        *(_QWORD *)&v95[0] = sub_1D141BCB4(v44, v46, v96);
        sub_1D166DF28();

        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 18) = 2048;
        *(_QWORD *)&v95[0] = v43;
        sub_1D166DF28();
        *(_WORD *)(v41 + 28) = 2048;
        v47 = (uint64_t)v93;
        *(_QWORD *)&v95[0] = v93;
        sub_1D166DF28();
        _os_log_impl(&dword_1D1413000, v37, v38, "RateLimiter: result=%{BOOL}d for notice collaboration id %s, elapsedMinutes: %ld < threshold: %ld", (uint8_t *)v41, 0x26u);
        v48 = v84;
        swift_arrayDestroy();
        MEMORY[0x1D17EB0AC](v48, -1, -1);
        MEMORY[0x1D17EB0AC](v41, -1, -1);

        if (v43 < v47)
        {
LABEL_11:
          v49 = *(id *)(v87 + v86);
          v50 = objc_msgSend(v36, sel_collaborationId);
          v51 = sub_1D166DACC();
          v53 = v52;

          v54 = v90;
          v55 = (void *)sub_1D166D5BC();
          v96[0] = v51;
          v96[1] = v53;
          swift_bridgeObjectRetain();
          objc_msgSend(v49, sel___swift_setObject_forKeyedSubscript_, v55, sub_1D166E204());

          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v89);
          v56 = *(void (**)(char *, uint64_t))(v94 + 8);
          v56(v54, v40);
          v56(v92, v40);
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {

        if (v31 < (uint64_t)v34)
          goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v89);
      v80 = *(void (**)(char *, uint64_t))(v94 + 8);
      v80(v90, v40);
      v80(v92, v40);
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1D141BA80((uint64_t)v96, &qword_1ED935840);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v11, 1, 1, v12);
  }
  sub_1D141BA80((uint64_t)v11, &qword_1ED9354E8);
  if (qword_1ED935750 != -1)
    swift_once();
  v57 = sub_1D166D964();
  sub_1D141AC1C(v57, (uint64_t)qword_1ED936560);
  v58 = v93;
  v59 = sub_1D166D94C();
  v60 = sub_1D166DD6C();
  if (!os_log_type_enabled(v59, v60))
  {

    return 1;
  }
  v61 = (uint8_t *)swift_slowAlloc();
  v62 = swift_slowAlloc();
  v96[0] = v62;
  *(_DWORD *)v61 = 136315138;
  v63 = objc_msgSend(v58, sel_collaborationId);
  v64 = sub_1D166DACC();
  v66 = v65;

  *(_QWORD *)&v95[0] = sub_1D141BCB4(v64, v66, v96);
  sub_1D166DF28();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1D1413000, v59, v60, "RateLimiter: clear notice for collaboration id %s hasn't been sent before, approved to send.", v61, 0xCu);
  v67 = 1;
  swift_arrayDestroy();
  MEMORY[0x1D17EB0AC](v62, -1, -1);
  MEMORY[0x1D17EB0AC](v61, -1, -1);

  return v67;
}

uint64_t sub_1D1609A6C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  void *v49;
  uint64_t (*v50)();
  uint64_t v51;

  v2 = sub_1D166D628();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v40 - v7;
  sub_1D166D61C();
  if (qword_1ED935750 != -1)
    swift_once();
  v9 = sub_1D166D964();
  sub_1D141AC1C(v9, (uint64_t)qword_1ED936560);
  v10 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v43 = v8;
  v10(v6, v8, v2);
  v11 = a1;
  v12 = sub_1D166D94C();
  v13 = sub_1D166DD6C();
  v14 = &selRef_canMakeExpireStateChecks;
  if (os_log_type_enabled(v12, v13))
  {
    v15 = swift_slowAlloc();
    v44 = v2;
    v16 = v15;
    v41 = swift_slowAlloc();
    aBlock = v41;
    *(_DWORD *)v16 = 136315394;
    v17 = objc_msgSend(v11, sel_collaborationId);
    v18 = sub_1D166DACC();
    v20 = v19;

    v45 = sub_1D141BCB4(v18, v20, &aBlock);
    sub_1D166DF28();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    sub_1D15FC784((unint64_t *)&unk_1EFC63210, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    v21 = sub_1D166E1BC();
    v45 = sub_1D141BCB4(v21, v22, &aBlock);
    v14 = &selRef_canMakeExpireStateChecks;
    sub_1D166DF28();
    swift_bridgeObjectRelease();
    v23 = *(void (**)(char *, uint64_t))(v3 + 8);
    v23(v6, v44);
    _os_log_impl(&dword_1D1413000, v12, v13, "IMDCollaborationNoticeRateLimiter: collaboration id %s => %s", (uint8_t *)v16, 0x16u);
    v24 = v41;
    swift_arrayDestroy();
    MEMORY[0x1D17EB0AC](v24, -1, -1);
    v25 = v16;
    v2 = v44;
    MEMORY[0x1D17EB0AC](v25, -1, -1);
  }
  else
  {

    v23 = *(void (**)(char *, uint64_t))(v3 + 8);
    v23(v6, v2);
  }

  v26 = v42;
  v27 = *(id *)&v42[OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_noticeEventHistory];
  v28 = objc_msgSend(v11, v14[164]);
  v29 = sub_1D166DACC();
  v31 = v30;

  v32 = v43;
  v33 = (void *)sub_1D166D5BC();
  aBlock = v29;
  v47 = v31;
  swift_bridgeObjectRetain();
  objc_msgSend(v27, sel___swift_setObject_forKeyedSubscript_, v33, sub_1D166E204());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v34 = *(NSObject **)&v26[OBJC_IVAR___IMDCollaborationClearNoticeRateLimiter_persistenceQueue];
  v35 = swift_allocObject();
  *(_QWORD *)(v35 + 16) = v26;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = sub_1D160AB08;
  *(_QWORD *)(v36 + 24) = v35;
  v50 = sub_1D141B388;
  v51 = v36;
  aBlock = MEMORY[0x1E0C809B0];
  v47 = 1107296256;
  v48 = sub_1D141BC68;
  v49 = &unk_1E9230530;
  v37 = _Block_copy(&aBlock);
  v38 = v26;
  swift_retain();
  swift_release();
  dispatch_sync(v34, v37);
  _Block_release(v37);
  LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v37 & 1) == 0)
    return ((uint64_t (*)(char *, uint64_t))v23)(v32, v2);
  __break(1u);
  return result;
}

