uint64_t sub_21B81C314(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_21B81C394(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36D98;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_21B81C3AC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B81C3D0(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  char v7;
  char v8;
  int v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF36D98;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) != 0)
  {
    result = *(double *)(a2 + 64);
    v3 = 128;
    *(_WORD *)(a1 + 88) = 128;
    *(double *)(a1 + 64) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v5 = *(_DWORD *)(a2 + 76);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 88) = v3;
    *(_DWORD *)(a1 + 76) = v5;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v6 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 72) = v6;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *(_BYTE *)(a2 + 84);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 84) = v7;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *(_BYTE *)(a2 + 85);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 85) = v8;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v9;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_30:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_29:
  v10 = *(_BYTE *)(a2 + 86);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 86) = v10;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_21B81C574(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "hasGps");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "hasStrideCal");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "heartRateConfidence", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isStroller");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "metSource");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "pace", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81C764(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_107:
                    v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_107;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_108;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_119;
            case 4u:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_112;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_113;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_119;
            case 8u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 84) = v34;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 85) = v36;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v55 = v37++;
                  v56 = *(_BYTE *)(v38 + v55);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_117:
                    v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_117;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_118;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 80) = v41;
LABEL_119:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 86) = v44;
              goto LABEL_119;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_103:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B81CE30(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_28:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B81CFDC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36DD0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B81CFF4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B81D018(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36DD0;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 40) = 4;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B81D0A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "hr", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "time", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "vo2", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81D154(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B81D3B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32));
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_21B81D444(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36E08;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_21B81D45C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81D480(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)result = &off_24DF36E08;
  *(_DWORD *)(result + 72) = 0;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v3 = 32;
    *(_WORD *)(result + 72) = 32;
    *(_QWORD *)(result + 48) = v4;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 72) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    v6 = *(_DWORD *)(a2 + 68);
    v3 |= 0x100u;
    *(_WORD *)(result + 72) = v3;
    *(_DWORD *)(result + 68) = v6;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 32) = v8;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 64);
    *(_WORD *)(result + 72) = v3 | 0x80;
    *(_DWORD *)(result + 64) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 72) & 0x80) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B81D598(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "durationInSeconds", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedVo2Max", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "filteredVo2Max", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "hrMax", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "hrMin", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "sessionType");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "variance", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 72) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81D6E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 72) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 72) |= 0x100u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    v2 = v35 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_78;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_79;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_85;
            case 4u:
              *(_WORD *)(a1 + 72) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 72) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_83:
                    v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_83;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_84;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 64) = v31;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B81DBC4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_WORD *)(v3 + 72) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B81DCE4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36E40;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B81DCFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81DD20(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;

  *(_QWORD *)result = &off_24DF36E40;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_BYTE *)(a2 + 15);
    v3 = 16;
    *(_BYTE *)(result + 20) = 16;
    *(_BYTE *)(result + 15) = v4;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 8) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 14);
    v3 |= 8u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 14) = v5;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_BYTE *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(result + 20) = v3;
    *(_BYTE *)(result + 12) = v6;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 16);
  v3 |= 0x20u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 16) = v7;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v3 | 1;
    *(_DWORD *)(result + 8) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_BYTE *)(a2 + 13);
  v3 |= 4u;
  *(_BYTE *)(result + 20) = v3;
  *(_BYTE *)(result + 13) = v8;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B81DDE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "basebandHint");
    v5 = *(_BYTE *)(a1 + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btHint");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "gpsHint");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "vehicularData");
    if ((*(_BYTE *)(a1 + 20) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "motionHint");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "wifiHint");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81DED4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 20) |= 0x10u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_64;
            case 2u:
              *(_BYTE *)(a1 + 20) |= 8u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 14) = v24;
              goto LABEL_64;
            case 3u:
              *(_BYTE *)(a1 + 20) |= 2u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 12) = v26;
              goto LABEL_64;
            case 4u:
              *(_BYTE *)(a1 + 20) |= 0x20u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 16) = v28;
              goto LABEL_64;
            case 5u:
              *(_BYTE *)(a1 + 20) |= 4u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 13) = v30;
              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 20) |= 1u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  v39 = v31++;
                  v40 = *(_BYTE *)(v32 + v39);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_62:
                    v3 = v39 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_62;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v3 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_63;
                v33 += 7;
                v31 = v3;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 8) = v35;
LABEL_64:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B81E278(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_12:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B81E344(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36E78;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B81E35C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B81E380(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)a1 = &off_24DF36E78;
  *(_DWORD *)(a1 + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 60) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 48);
    v3 |= 0x100u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + 48) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + 52) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 28) = v6;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 60) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_23:
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 60) = v3;
  *(_DWORD *)(a1 + 32) = v7;
  if ((*(_WORD *)(a2 + 60) & 2) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B81E4D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "sourceX");
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sourceY");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "sourceZ");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 60) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81E660(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_45;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_45:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_93;
            case 8u:
              *(_WORD *)(a1 + 60) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v41 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_109;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_102:
                    v2 = v45 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_102;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_103;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_109;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_107:
                    v2 = v49 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_107;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_108;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_109:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_92:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_93:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_69:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_109;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_109;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B81EC68(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B81EDC0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36EB0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B81EDD8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81EDFC(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_24DF36EB0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B81EE28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isDeviceVibrating");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81EE74(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B81F000(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B81F020(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36EE8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B81F038(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81F05C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF36EE8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B81F0AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "shouldSuppress");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81F114(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v27 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v27 = v26 != 0;
        }
        *(_BYTE *)(a1 + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v29 = 0;
          v30 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v31 = v20++;
            v32 = *(_BYTE *)(v21 + v31);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v14 = v30++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_47:
          v2 = v31 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B81F394(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B81F3EC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36F20;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_21B81F404(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B81F428(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;

  *(_QWORD *)a1 = &off_24DF36F20;
  *(_DWORD *)(a1 + 116) = 0;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 116) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 68);
    v3 |= 0x4000u;
    *(_DWORD *)(a1 + 116) = v3;
    *(float *)(a1 + 68) = result;
    v2 = *(_DWORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 0x8000) != 0)
  {
    result = *(float *)(a2 + 72);
    v3 |= 0x8000u;
    *(_DWORD *)(a1 + 116) = v3;
    *(float *)(a1 + 72) = result;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 112);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *(float *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 84) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 8) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *(float *)(a2 + 88);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100000) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *(float *)(a2 + 92);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 92) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *(float *)(a2 + 96);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *(float *)(a2 + 100);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 100) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *(float *)(a2 + 104);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *(float *)(a2 + 108);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 108) = result;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_29:
    if ((v2 & 2) == 0)
      return result;
LABEL_54:
    result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 116) = v3 | 2;
    *(float *)(a1 + 16) = result;
    return result;
  }
LABEL_53:
  result = *(float *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 116) = v3;
  *(float *)(a1 + 44) = result;
  if ((*(_DWORD *)(a2 + 116) & 2) != 0)
    goto LABEL_54;
  return result;
}

uint64_t sub_21B81F71C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "absMeanGravX", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelFFTBin1", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "accelFFTBin2", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "accelFFTBin3", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "accelFFTBin4", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "accelFFTBin5", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "accelFFTBin6", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "accelFFTBinDotPressureFFTBin", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "fFTBin1", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "fFTBin2", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "fFTBin3", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "fFTBin4", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "fFTBin5", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "meanGravX", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "meanGravY", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "meanGravZ", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "medianLux", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "medianPocketProbability", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "pressureFFTBin1", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "pressureFFTBin2", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "pressureFFTBin3", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "pressureFFTBin4", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pressureFFTBin5", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "stdPressure", *(float *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 116) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "pressureFFTBin6", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81FA8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_123:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_124;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_124:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_115;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x17u:
              *(_DWORD *)(a1 + 116) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x18u:
              *(_DWORD *)(a1 + 116) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x19u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_105;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_114;
            case 0x1Au:
              *(_DWORD *)(a1 + 116) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_114:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_105:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_115;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_115:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B820270(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 116) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_21B82056C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36F58;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B820584(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B8205A8(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  float result;

  *(_QWORD *)a1 = &off_24DF36F58;
  *(_DWORD *)(a1 + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 64) = v3;
    *(float *)(a1 + 28) = result;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *(float *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  result = *(float *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_28:
    result = *(float *)(a2 + 40);
    *(_WORD *)(a1 + 64) = v3 | 0x80;
    *(float *)(a1 + 40) = result;
    return result;
  }
LABEL_27:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 64) = v3;
  *(float *)(a1 + 24) = result;
  if ((*(_WORD *)(a2 + 64) & 0x80) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B820730(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "bagObstructed", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "closeCoveredBagObstructed", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "closeCoveredObstructed", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "closeCoveredPocketObstructed", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inHandObstructed", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "looseCoveredBagObstructed", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "looseCoveredObstructed", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "looseCoveredPocketObstructed", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "obstructed", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "otherObstructed", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_WORD *)(a1 + 64) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "pocketObstructed", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "visible", *(float *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B820900(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_80;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_79:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_80;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_80:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_81;
            case 2u:
              *(_WORD *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 9u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_75;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_75:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_81;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_81:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B820E08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 40));
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 40));
  return result;
}

uint64_t sub_21B820F98(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36F90;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_21B820FB0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B820FD4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)result = &off_24DF36F90;
  *(_DWORD *)(result + 84) = 0;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(result + 84) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 80);
    v3 |= 0x20000u;
    *(_DWORD *)(result + 84) = v3;
    *(_BYTE *)(result + 80) = v5;
    v2 = *(_DWORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(result + 84) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 64) = v7;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 60) = v8;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 48) = v9;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 76) = v10;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 52) = v11;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 56) = v12;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 36) = v13;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 40) = v14;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 24) = v15;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 28) = v16;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 32) = v17;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 68) = v18;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 72) = v19;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 2) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 44) = v20;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 2) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      return result;
LABEL_40:
    v22 = *(_BYTE *)(a2 + 81);
    *(_DWORD *)(result + 84) = v3 | 0x40000;
    *(_BYTE *)(result + 81) = v22;
    return result;
  }
LABEL_39:
  v21 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 16) = v21;
  if ((*(_DWORD *)(a2 + 84) & 0x40000) != 0)
    goto LABEL_40;
  return result;
}

uint64_t sub_21B821204(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentEventTag");
    v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentState");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "filteredGravityX", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "filteredGravityY", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "filteredGravityZ", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "gravityShift", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isMovingFiltered", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "luxBaseline", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "luxShift", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "motionType");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "orientation");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "pocketProbEnter", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "pocketProbExit", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "sufficientMotion");
    if ((*(_DWORD *)(a1 + 84) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "shouldSuppress");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B821494(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  int v53;
  BOOL v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_144;
                  }
                  v57 = v20++;
                  v58 = *(_BYTE *)(v21 + v57);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_143;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_143:
                v2 = v57 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_144;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_144:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_165;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_165;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_149;
                  }
                  v61 = v29++;
                  v62 = *(_BYTE *)(v30 + v61);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_148:
                    v2 = v61 + 1;
                    goto LABEL_149;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_148;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_149;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_149:
              *(_DWORD *)(a1 + 20) = v33;
              goto LABEL_165;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_154;
                  }
                  v65 = v35++;
                  v66 = *(_BYTE *)(v36 + v65);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_153:
                    v2 = v65 + 1;
                    goto LABEL_154;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_153;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_154;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_154:
              *(_DWORD *)(a1 + 64) = v39;
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_159;
                  }
                  v69 = v41++;
                  v70 = *(_BYTE *)(v42 + v69);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_158:
                    v2 = v69 + 1;
                    goto LABEL_159;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_158;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_159;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_159:
              *(_DWORD *)(a1 + 60) = v45;
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_89;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_139:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_89:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_165;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_164;
                  }
                  v73 = v47++;
                  v74 = *(_BYTE *)(v48 + v73);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_163:
                    v2 = v73 + 1;
                    goto LABEL_164;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_163;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_164;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_164:
              *(_DWORD *)(a1 + 16) = v51;
LABEL_165:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 84) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v54 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v53 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v54 = v53 != 0;
              }
              *(_BYTE *)(a1 + 81) = v54;
              goto LABEL_165;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_165;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B821DD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 84);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 84) & 0x40000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B82200C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36FC8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_21B822024(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF36FC8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B822064(PB::Base *a1)
{
  sub_21B822024(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B822088(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *(_QWORD *)a1 = &off_24DF36FC8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 76) = 0;
  v5 = *(_WORD *)(a2 + 76);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v6 = 1;
    *(_WORD *)(a1 + 76) = 1;
    *(_QWORD *)(a1 + 32) = v7;
    v5 = *(_WORD *)(a2 + 76);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 2) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 40);
    v6 |= 2u;
    *(_WORD *)(a1 + 76) = v6;
    *(_QWORD *)(a1 + 40) = v8;
    v5 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v13 = *(_DWORD *)(a2 + 48);
    v6 |= 4u;
    *(_WORD *)(a1 + 76) = v6;
    *(_DWORD *)(a1 + 48) = v13;
    v5 = *(_WORD *)(a2 + 76);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 56);
  v6 |= 0x10u;
  *(_WORD *)(a1 + 76) = v6;
  *(_DWORD *)(a1 + 56) = v14;
  if ((*(_WORD *)(a2 + 76) & 8) != 0)
  {
LABEL_9:
    v9 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(a1 + 76) = v6 | 8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_10:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = *(_WORD *)(a2 + 76);
  if ((v10 & 0x40) != 0)
  {
    v15 = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 76) |= 0x40u;
    *(_DWORD *)(a1 + 64) = v15;
    v10 = *(_WORD *)(a2 + 76);
    if ((v10 & 0x80) == 0)
    {
LABEL_14:
      if ((v10 & 0x100) == 0)
        goto LABEL_15;
LABEL_23:
      v17 = *(_DWORD *)(a2 + 72);
      *(_WORD *)(a1 + 76) |= 0x100u;
      *(_DWORD *)(a1 + 72) = v17;
      if ((*(_WORD *)(a2 + 76) & 0x20) == 0)
        return a1;
      goto LABEL_16;
    }
  }
  else if ((v10 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  v16 = *(_DWORD *)(a2 + 68);
  *(_WORD *)(a1 + 76) |= 0x80u;
  *(_DWORD *)(a1 + 68) = v16;
  v10 = *(_WORD *)(a2 + 76);
  if ((v10 & 0x100) != 0)
    goto LABEL_23;
LABEL_15:
  if ((v10 & 0x20) != 0)
  {
LABEL_16:
    v11 = *(_DWORD *)(a2 + 60);
    *(_WORD *)(a1 + 76) |= 0x20u;
    *(_DWORD *)(a1 + 60) = v11;
  }
  return a1;
}

uint64_t sub_21B8221F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "compassBias", *(float *)(a1 + 48));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedBiasUncertainty", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_17:
  PB::TextFormatter::format(this, "estimatedHeading", *(float *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x20) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "globalReferenceFrame");
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "lslHeadingAccuracy", *(float *)(a1 + 64));
    v9 = *(_WORD *)(a1 + 76);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "lslHeadingConfidence", *(float *)(a1 + 68));
  v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
LABEL_22:
    PB::TextFormatter::format(this, "roadID");
    if ((*(_WORD *)(a1 + 76) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_21:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x100) != 0)
    goto LABEL_22;
LABEL_12:
  if ((v9 & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B822380(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  unint64_t v79;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_31;
        case 2u:
          *(_WORD *)(a1 + 76) |= 2u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v23);
LABEL_31:
          v24 = *((_QWORD *)this + 1) + 8;
          goto LABEL_130;
        case 3u:
          *(_WORD *)(a1 + 76) |= 4u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_129;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_129;
        case 5u:
          *(_WORD *)(a1 + 76) |= 8u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_129;
        case 6u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v28 = *((_QWORD *)this + 1);
            v29 = *((_QWORD *)this + 2);
            while (v28 < v29 && !*((_BYTE *)this + 24))
            {
              v31 = *(char **)(a1 + 16);
              v30 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v31 >= v30)
              {
                v33 = (char *)*v8;
                v34 = (v31 - (_BYTE *)*v8) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
                  goto LABEL_141;
                v36 = v30 - (_QWORD)v33;
                if (v36 >> 1 > v35)
                  v35 = v36 >> 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v37 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  v38 = (char *)sub_21B796CD8(v9, v37);
                  v33 = *(char **)(a1 + 8);
                  v31 = *(char **)(a1 + 16);
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[4 * v34];
                *(_DWORD *)v39 = 0;
                v32 = v39 + 4;
                while (v31 != v33)
                {
                  v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v39;
                *(_QWORD *)(a1 + 16) = v32;
                *(_QWORD *)(a1 + 24) = &v38[4 * v37];
                if (v33)
                  operator delete(v33);
              }
              else
              {
                *(_DWORD *)v31 = 0;
                v32 = v31 + 4;
              }
              *(_QWORD *)(a1 + 16) = v32;
              v41 = *((_QWORD *)this + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(_QWORD *)this + v41);
              v29 = *((_QWORD *)this + 2);
              v28 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v28;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v61 = *(char **)(a1 + 16);
            v60 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v61 >= v60)
            {
              v71 = (char *)*v8;
              v72 = (v61 - (_BYTE *)*v8) >> 2;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
LABEL_141:
                sub_21B796A0C();
              v74 = v60 - (_QWORD)v71;
              if (v74 >> 1 > v73)
                v73 = v74 >> 1;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                v75 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75)
              {
                v76 = (char *)sub_21B796CD8(v9, v75);
                v71 = *(char **)(a1 + 8);
                v61 = *(char **)(a1 + 16);
              }
              else
              {
                v76 = 0;
              }
              v77 = &v76[4 * v72];
              *(_DWORD *)v77 = 0;
              v62 = v77 + 4;
              while (v61 != v71)
              {
                v78 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v77 - 1) = v78;
                v77 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v77;
              *(_QWORD *)(a1 + 16) = v62;
              *(_QWORD *)(a1 + 24) = &v76[4 * v75];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *(_DWORD *)v61 = 0;
              v62 = v61 + 4;
            }
            *(_QWORD *)(a1 + 16) = v62;
            v79 = *((_QWORD *)this + 1);
            if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *((_QWORD *)this + 2))
            {
              *(v62 - 1) = *(_DWORD *)(*(_QWORD *)this + v79);
LABEL_129:
              v24 = *((_QWORD *)this + 1) + 4;
LABEL_130:
              *((_QWORD *)this + 1) = v24;
            }
            else
            {
LABEL_127:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_131:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          v42 = *((_QWORD *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v42);
          goto LABEL_129;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            goto LABEL_127;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v43);
          goto LABEL_129;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          v46 = *(_QWORD *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v50 = v44 + 1;
              *((_QWORD *)this + 1) = v44 + 1;
              v51 = *(_BYTE *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0)
                goto LABEL_113;
              v47 += 7;
              v44 = v50;
              v16 = v48++ > 8;
            }
            while (!v16);
LABEL_93:
            LODWORD(v49) = 0;
            goto LABEL_113;
          }
          v63 = 0;
          v64 = 0;
          v49 = 0;
          if (v45 <= v44)
            v45 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v65 = v44 + 1;
              v66 = *(_BYTE *)(v46 + v44);
              *((_QWORD *)this + 1) = v65;
              v49 |= (unint64_t)(v66 & 0x7F) << v63;
              if (v66 < 0)
              {
                v63 += 7;
                v44 = v65;
                v16 = v64++ > 8;
                if (v16)
                  goto LABEL_93;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v49) = 0;
            }
            break;
          }
LABEL_113:
          *(_DWORD *)(a1 + 72) = v49;
          goto LABEL_131;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 0x20u;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          v54 = *(_QWORD *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)this + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_116;
              v55 += 7;
              v52 = v58;
              v16 = v56++ > 8;
            }
            while (!v16);
LABEL_100:
            LODWORD(v57) = 0;
            goto LABEL_116;
          }
          v67 = 0;
          v68 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v53 == v52)
            {
              LODWORD(v57) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v69 = v52 + 1;
              v70 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)this + 1) = v69;
              v57 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                v52 = v69;
                v16 = v68++ > 8;
                if (v16)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v57) = 0;
            }
            break;
          }
LABEL_116:
          *(_DWORD *)(a1 + 60) = v57;
          goto LABEL_131;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_131;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B822A6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
LABEL_18:
    result = PB::Writer::write(this, *(float *)(v3 + 56));
    if ((*(_WORD *)(v3 + 76) & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 8) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(float *)(v3 + 52));
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 64));
    v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 76) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B822BB8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF37000;
  *(_DWORD *)(a1 + 100) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B822BDC(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF37000;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B822C2C(PB::Base *a1)
{
  sub_21B822BDC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B822C50(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_24DF37000;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 100) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_BYTE *)(a2 + 100);
  if ((v5 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 88);
    v6 = 16;
    *(_BYTE *)(a1 + 100) = 16;
    *(_QWORD *)(a1 + 88) = v7;
    v5 = *(_BYTE *)(a2 + 100);
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 100) & 4) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 72);
    v6 |= 4u;
    *(_BYTE *)(a1 + 100) = v6;
    *(_QWORD *)(a1 + 72) = v8;
    v5 = *(_BYTE *)(a2 + 100);
  }
LABEL_6:
  if ((v5 & 8) != 0)
  {
    v12 = *(_QWORD *)(a2 + 80);
    v6 |= 8u;
    *(_BYTE *)(a1 + 100) = v6;
    *(_QWORD *)(a1 + 80) = v12;
    v5 = *(_BYTE *)(a2 + 100);
    if ((v5 & 1) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(a2 + 56);
  v6 |= 1u;
  *(_BYTE *)(a1 + 100) = v6;
  *(_QWORD *)(a1 + 56) = v13;
  if ((*(_BYTE *)(a2 + 100) & 2) != 0)
  {
LABEL_9:
    v9 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 100) = v6 | 2;
    *(_QWORD *)(a1 + 64) = v9;
  }
LABEL_10:
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 100) & 0x20) != 0)
  {
    v10 = *(_DWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 100) |= 0x20u;
    *(_DWORD *)(a1 + 96) = v10;
  }
  return a1;
}

uint64_t sub_21B822D84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  char v9;
  double *v10;
  double *v11;
  double v12;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 56));
    v5 = *(_BYTE *)(a1 + 100);
  }
  if ((v5 & 0x20) != 0)
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 96));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "covariance", v8);
  }
  v9 = *(_BYTE *)(a1 + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(this, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 64));
    v9 = *(_BYTE *)(a1 + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a1 + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "latitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 72));
  v9 = *(_BYTE *)(a1 + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_17:
  PB::TextFormatter::format(this, "longitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 100) & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
LABEL_12:
  v10 = *(double **)(a1 + 32);
  v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "transformMatrixFromCameraToEcefCoordinate", v12);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B822ED4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  unint64_t v62;
  char *v63;
  _DWORD *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  unint64_t v83;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 100) |= 0x10u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_122;
        case 2u:
          *(_BYTE *)(a1 + 100) |= 4u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v26);
          goto LABEL_122;
        case 3u:
          *(_BYTE *)(a1 + 100) |= 8u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v27);
          goto LABEL_122;
        case 4u:
          *(_BYTE *)(a1 + 100) |= 1u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v28);
          goto LABEL_122;
        case 5u:
          *(_BYTE *)(a1 + 100) |= 2u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v29);
          goto LABEL_122;
        case 6u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v30 = *((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              v33 = *(char **)(a1 + 40);
              v32 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*v10;
                v36 = (v33 - (_BYTE *)*v10) >> 3;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61)
                  goto LABEL_143;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 2 > v37)
                  v37 = v38 >> 2;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
                  v39 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v40 = (char *)sub_21B796A20(v11, v39);
                  v35 = *(char **)(a1 + 32);
                  v33 = *(char **)(a1 + 40);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[8 * v36];
                *(_QWORD *)v41 = 0;
                v34 = v41 + 8;
                while (v33 != v35)
                {
                  v42 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v41 - 1) = v42;
                  v41 -= 8;
                }
                *(_QWORD *)(a1 + 32) = v41;
                *(_QWORD *)(a1 + 40) = v34;
                *(_QWORD *)(a1 + 48) = &v40[8 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_QWORD *)v33 = 0;
                v34 = v33 + 8;
              }
              *(_QWORD *)(a1 + 40) = v34;
              v43 = *((_QWORD *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)this + 2))
                goto LABEL_95;
              *(v34 - 1) = *(_QWORD *)(*(_QWORD *)this + v43);
              v31 = *((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v30;
            }
            goto LABEL_96;
          }
          v60 = *(char **)(a1 + 40);
          v59 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v60 >= v59)
          {
            v65 = (char *)*v10;
            v66 = (v60 - (_BYTE *)*v10) >> 3;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61)
LABEL_143:
              sub_21B796A0C();
            v68 = v59 - (_QWORD)v65;
            if (v68 >> 2 > v67)
              v67 = v68 >> 2;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)sub_21B796A20(v11, v69);
              v65 = *(char **)(a1 + 32);
              v60 = *(char **)(a1 + 40);
            }
            else
            {
              v70 = 0;
            }
            v77 = &v70[8 * v66];
            *(_QWORD *)v77 = 0;
            v61 = v77 + 8;
            while (v60 != v65)
            {
              v78 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v77 - 1) = v78;
              v77 -= 8;
            }
            *(_QWORD *)(a1 + 32) = v77;
            *(_QWORD *)(a1 + 40) = v61;
            *(_QWORD *)(a1 + 48) = &v70[8 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *(_QWORD *)v60 = 0;
            v61 = v60 + 8;
          }
          *(_QWORD *)(a1 + 40) = v61;
          v79 = *((_QWORD *)this + 1);
          if (v79 <= 0xFFFFFFFFFFFFFFF7 && v79 + 8 <= *((_QWORD *)this + 2))
          {
            *(v61 - 1) = *(_QWORD *)(*(_QWORD *)this + v79);
LABEL_122:
            v80 = *((_QWORD *)this + 1) + 8;
            goto LABEL_134;
          }
          goto LABEL_131;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v44 = *((_QWORD *)this + 1);
            v45 = *((_QWORD *)this + 2);
            while (v44 < v45 && !*((_BYTE *)this + 24))
            {
              v47 = *(char **)(a1 + 16);
              v46 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v47 >= v46)
              {
                v49 = (char *)*v8;
                v50 = (v47 - (_BYTE *)*v8) >> 2;
                v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62)
                  goto LABEL_144;
                v52 = v46 - (_QWORD)v49;
                if (v52 >> 1 > v51)
                  v51 = v52 >> 1;
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                  v53 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v53 = v51;
                if (v53)
                {
                  v54 = (char *)sub_21B796CD8(v9, v53);
                  v49 = *(char **)(a1 + 8);
                  v47 = *(char **)(a1 + 16);
                }
                else
                {
                  v54 = 0;
                }
                v55 = &v54[4 * v50];
                *(_DWORD *)v55 = 0;
                v48 = v55 + 4;
                while (v47 != v49)
                {
                  v56 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  *((_DWORD *)v55 - 1) = v56;
                  v55 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v55;
                *(_QWORD *)(a1 + 16) = v48;
                *(_QWORD *)(a1 + 24) = &v54[4 * v53];
                if (v49)
                  operator delete(v49);
              }
              else
              {
                *(_DWORD *)v47 = 0;
                v48 = v47 + 4;
              }
              *(_QWORD *)(a1 + 16) = v48;
              v57 = *((_QWORD *)this + 1);
              if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
              {
LABEL_95:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v48 - 1) = *(_DWORD *)(*(_QWORD *)this + v57);
              v45 = *((_QWORD *)this + 2);
              v44 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v44;
            }
LABEL_96:
            PB::Reader::recallMark();
          }
          else
          {
            v63 = *(char **)(a1 + 16);
            v62 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v63 >= v62)
            {
              v71 = (char *)*v8;
              v72 = (v63 - (_BYTE *)*v8) >> 2;
              v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62)
LABEL_144:
                sub_21B796A0C();
              v74 = v62 - (_QWORD)v71;
              if (v74 >> 1 > v73)
                v73 = v74 >> 1;
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                v75 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v75 = v73;
              if (v75)
              {
                v76 = (char *)sub_21B796CD8(v9, v75);
                v71 = *(char **)(a1 + 8);
                v63 = *(char **)(a1 + 16);
              }
              else
              {
                v76 = 0;
              }
              v81 = &v76[4 * v72];
              *(_DWORD *)v81 = 0;
              v64 = v81 + 4;
              while (v63 != v71)
              {
                v82 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v81;
              *(_QWORD *)(a1 + 16) = v64;
              *(_QWORD *)(a1 + 24) = &v76[4 * v75];
              if (v71)
                operator delete(v71);
            }
            else
            {
              *(_DWORD *)v63 = 0;
              v64 = v63 + 4;
            }
            *(_QWORD *)(a1 + 16) = v64;
            v83 = *((_QWORD *)this + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((_QWORD *)this + 2))
            {
              *(v64 - 1) = *(_DWORD *)(*(_QWORD *)this + v83);
LABEL_133:
              v80 = *((_QWORD *)this + 1) + 4;
LABEL_134:
              *((_QWORD *)this + 1) = v80;
            }
            else
            {
LABEL_131:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_135:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 8u:
          *(_BYTE *)(a1 + 100) |= 0x20u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
            goto LABEL_131;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v58);
          goto LABEL_133;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_135;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8235AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 100);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 88));
    v4 = *(_BYTE *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(result + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
LABEL_18:
    result = PB::Writer::write(this, *(double *)(v3 + 56));
    if ((*(_BYTE *)(v3 + 100) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_BYTE *)(v3 + 100);
  if ((v4 & 1) != 0)
    goto LABEL_18;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(double *)(v3 + 64));
LABEL_7:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  if ((*(_BYTE *)(v3 + 100) & 0x20) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 96));
  return result;
}

uint64_t sub_21B8236C4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37038;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B8236DC(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF37038;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B82371C(PB::Base *a1)
{
  sub_21B8236DC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B823740(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v12;

  *(_QWORD *)a1 = &off_24DF37038;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  v5 = *(_BYTE *)(a2 + 60);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v6 = 2;
    *(_BYTE *)(a1 + 60) = 2;
    *(_QWORD *)(a1 + 40) = v7;
    v5 = *(_BYTE *)(a2 + 60);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 32);
    v6 |= 1u;
    *(_BYTE *)(a1 + 60) = v6;
    *(_QWORD *)(a1 + 32) = v8;
    v5 = *(_BYTE *)(a2 + 60);
  }
LABEL_6:
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v12 = *(_DWORD *)(a2 + 56);
  v6 |= 0x10u;
  *(_BYTE *)(a1 + 60) = v6;
  *(_DWORD *)(a1 + 56) = v12;
  if ((*(_BYTE *)(a2 + 60) & 8) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 60) = v6 | 8;
    *(_DWORD *)(a1 + 52) = v9;
  }
LABEL_9:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    v10 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_DWORD *)(a1 + 48) = v10;
  }
  return a1;
}

uint64_t sub_21B82382C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "deltaHeading", *(float *)(a1 + 48));
    v5 = *(_BYTE *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 52));
  v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 60) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "meanRotRate", *(float *)(a1 + 56));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B823934(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 60) |= 2u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 60) |= 1u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v23);
LABEL_31:
          v24 = *((_QWORD *)this + 1) + 8;
          goto LABEL_88;
        case 3u:
          *(_BYTE *)(a1 + 60) |= 0x10u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_87;
        case 4u:
          *(_BYTE *)(a1 + 60) |= 8u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_87;
        case 5u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v27 = *((_QWORD *)this + 1);
            v28 = *((_QWORD *)this + 2);
            while (v27 < v28 && !*((_BYTE *)this + 24))
            {
              v30 = *(char **)(a1 + 16);
              v29 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v30 >= v29)
              {
                v32 = (char *)*v8;
                v33 = (v30 - (_BYTE *)*v8) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  goto LABEL_97;
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 1 > v34)
                  v34 = v35 >> 1;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v37 = (char *)sub_21B796CD8(v9, v36);
                  v32 = *(char **)(a1 + 8);
                  v30 = *(char **)(a1 + 16);
                }
                else
                {
                  v37 = 0;
                }
                v38 = &v37[4 * v33];
                *(_DWORD *)v38 = 0;
                v31 = v38 + 4;
                while (v30 != v32)
                {
                  v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v31;
                *(_QWORD *)(a1 + 24) = &v37[4 * v36];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_DWORD *)v30 = 0;
                v31 = v30 + 4;
              }
              *(_QWORD *)(a1 + 16) = v31;
              v40 = *((_QWORD *)this + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
              v28 = *((_QWORD *)this + 2);
              v27 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v43 = *(char **)(a1 + 16);
            v42 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v8;
              v46 = (v43 - (_BYTE *)*v8) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
LABEL_97:
                sub_21B796A0C();
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_21B796CD8(v9, v49);
                v45 = *(char **)(a1 + 8);
                v43 = *(char **)(a1 + 16);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = 0;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v51;
              *(_QWORD *)(a1 + 16) = v44;
              *(_QWORD *)(a1 + 24) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = 0;
              v44 = v43 + 4;
            }
            *(_QWORD *)(a1 + 16) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *((_QWORD *)this + 2))
            {
              *(v44 - 1) = *(_DWORD *)(*(_QWORD *)this + v53);
LABEL_87:
              v24 = *((_QWORD *)this + 1) + 4;
LABEL_88:
              *((_QWORD *)this + 1) = v24;
            }
            else
            {
LABEL_85:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_89:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 60) |= 4u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_85;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_87;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_89;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B823DE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 60);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
LABEL_13:
      result = PB::Writer::write(this, *(float *)(v3 + 56));
      if ((*(_BYTE *)(v3 + 60) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 0x10) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 52));
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 60) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48));
  return result;
}

_QWORD *sub_21B823EC4(_QWORD *result)
{
  *result = &off_24DF37070;
  result[1] = 0;
  return result;
}

void sub_21B823ED4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37070;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B823F14(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37070;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B823F68(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37070;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7AC098(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B823FE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B824034(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_21B7AC368(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8241FC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

double sub_21B824218(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF370A8;
  *(_DWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_21B824244(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24DF370A8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_21B8242A4(PB::Base *a1)
{
  sub_21B824244(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8242C8(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_24DF370A8;
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_BYTE *)(a2 + 96) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = 1;
    *(_QWORD *)(a1 + 80) = v5;
  }
  if (a1 != a2)
  {
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B7968C4((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v6 = *(_BYTE *)(a2 + 96);
  if ((v6 & 4) != 0)
  {
    v7 = *(_BYTE *)(a2 + 92);
    *(_BYTE *)(a1 + 96) |= 4u;
    *(_BYTE *)(a1 + 92) = v7;
    v6 = *(_BYTE *)(a2 + 96);
  }
  if ((v6 & 2) != 0)
  {
    v8 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) |= 2u;
    *(_DWORD *)(a1 + 88) = v8;
  }
  return a1;
}

uint64_t sub_21B8243B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(_BYTE *)(a1 + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(this, "isInitFinished");
    v8 = *(_BYTE *)(a1 + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(a1 + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 96) & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "trackingState");
LABEL_7:
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "velocity", v14);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8244DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v118;
  uint64_t v119;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 32);
    v118 = a1 + 48;
    v119 = a1 + 72;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 96) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_177;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_179;
        case 2u:
          if (v24 != 2)
          {
            v81 = *(char **)(a1 + 16);
            v80 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v81 >= v80)
            {
              v91 = (char *)*v10;
              v92 = (v81 - (_BYTE *)*v10) >> 3;
              v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 61)
LABEL_190:
                sub_21B796A0C();
              v94 = v80 - (_QWORD)v91;
              if (v94 >> 2 > v93)
                v93 = v94 >> 2;
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                v95 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v95 = v93;
              if (v95)
              {
                v96 = (char *)sub_21B796A20(v11, v95);
                v91 = *(char **)(a1 + 8);
                v81 = *(char **)(a1 + 16);
              }
              else
              {
                v96 = 0;
              }
              v109 = &v96[8 * v92];
              *(_QWORD *)v109 = 0;
              v82 = v109 + 8;
              while (v81 != v91)
              {
                v110 = *((_QWORD *)v81 - 1);
                v81 -= 8;
                *((_QWORD *)v109 - 1) = v110;
                v109 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v109;
              *(_QWORD *)(a1 + 16) = v82;
              *(_QWORD *)(a1 + 24) = &v96[8 * v95];
              if (v91)
                operator delete(v91);
            }
            else
            {
              *(_QWORD *)v81 = 0;
              v82 = v81 + 8;
            }
            *(_QWORD *)(a1 + 16) = v82;
            goto LABEL_175;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_190;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_21B796A20(v11, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_125;
        case 3u:
          if (v24 != 2)
          {
            v84 = *(char **)(a1 + 40);
            v83 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v84 >= v83)
            {
              v97 = (char *)*v9;
              v98 = (v84 - (_BYTE *)*v9) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61)
LABEL_191:
                sub_21B796A0C();
              v100 = v83 - (_QWORD)v97;
              if (v100 >> 2 > v99)
                v99 = v100 >> 2;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_21B796A20(v118, v101);
                v97 = *(char **)(a1 + 32);
                v84 = *(char **)(a1 + 40);
              }
              else
              {
                v102 = 0;
              }
              v111 = &v102[8 * v98];
              *(_QWORD *)v111 = 0;
              v82 = v111 + 8;
              while (v84 != v97)
              {
                v112 = *((_QWORD *)v84 - 1);
                v84 -= 8;
                *((_QWORD *)v111 - 1) = v112;
                v111 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v111;
              *(_QWORD *)(a1 + 40) = v82;
              *(_QWORD *)(a1 + 48) = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v84 = 0;
              v82 = v84 + 8;
            }
            *(_QWORD *)(a1 + 40) = v82;
            goto LABEL_175;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            v43 = *(char **)(a1 + 40);
            v42 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v9;
              v46 = (v43 - (_BYTE *)*v9) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                goto LABEL_191;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_21B796A20(v118, v49);
                v45 = *(char **)(a1 + 32);
                v43 = *(char **)(a1 + 40);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v51;
              *(_QWORD *)(a1 + 40) = v44;
              *(_QWORD *)(a1 + 48) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *(_QWORD *)(a1 + 40) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
            v41 = *((_QWORD *)this + 2);
            v40 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v40;
          }
          goto LABEL_125;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            while (v54 < v55 && !*((_BYTE *)this + 24))
            {
              v57 = *(char **)(a1 + 64);
              v56 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v57 >= v56)
              {
                v59 = (char *)*v8;
                v60 = (v57 - (_BYTE *)*v8) >> 3;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61)
                  goto LABEL_192;
                v62 = v56 - (_QWORD)v59;
                if (v62 >> 2 > v61)
                  v61 = v62 >> 2;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                  v63 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v63 = v61;
                if (v63)
                {
                  v64 = (char *)sub_21B796A20(v119, v63);
                  v59 = *(char **)(a1 + 56);
                  v57 = *(char **)(a1 + 64);
                }
                else
                {
                  v64 = 0;
                }
                v65 = &v64[8 * v60];
                *(_QWORD *)v65 = 0;
                v58 = v65 + 8;
                while (v57 != v59)
                {
                  v66 = *((_QWORD *)v57 - 1);
                  v57 -= 8;
                  *((_QWORD *)v65 - 1) = v66;
                  v65 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v65;
                *(_QWORD *)(a1 + 64) = v58;
                *(_QWORD *)(a1 + 72) = &v64[8 * v63];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *(_QWORD *)v57 = 0;
                v58 = v57 + 8;
              }
              *(_QWORD *)(a1 + 64) = v58;
              v67 = *((_QWORD *)this + 1);
              if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)this + v67);
              v55 = *((_QWORD *)this + 2);
              v54 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v54;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            v86 = *(char **)(a1 + 64);
            v85 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v86 >= v85)
            {
              v103 = (char *)*v8;
              v104 = (v86 - (_BYTE *)*v8) >> 3;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 61)
LABEL_192:
                sub_21B796A0C();
              v106 = v85 - (_QWORD)v103;
              if (v106 >> 2 > v105)
                v105 = v106 >> 2;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_21B796A20(v119, v107);
                v103 = *(char **)(a1 + 56);
                v86 = *(char **)(a1 + 64);
              }
              else
              {
                v108 = 0;
              }
              v113 = &v108[8 * v104];
              *(_QWORD *)v113 = 0;
              v82 = v113 + 8;
              while (v86 != v103)
              {
                v114 = *((_QWORD *)v86 - 1);
                v86 -= 8;
                *((_QWORD *)v113 - 1) = v114;
                v113 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v113;
              *(_QWORD *)(a1 + 64) = v82;
              *(_QWORD *)(a1 + 72) = &v108[8 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_QWORD *)v86 = 0;
              v82 = v86 + 8;
            }
            *(_QWORD *)(a1 + 64) = v82;
LABEL_175:
            v115 = *((_QWORD *)this + 1);
            if (v115 <= 0xFFFFFFFFFFFFFFF7 && v115 + 8 <= *((_QWORD *)this + 2))
            {
              *(v82 - 1) = *(_QWORD *)(*(_QWORD *)this + v115);
LABEL_179:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_177:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_180:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 5u:
          *(_BYTE *)(a1 + 96) |= 4u;
          v68 = *((_QWORD *)this + 1);
          if (v68 >= *((_QWORD *)this + 2))
          {
            v71 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v69 = v68 + 1;
            v70 = *(unsigned __int8 *)(*(_QWORD *)this + v68);
            *((_QWORD *)this + 1) = v69;
            v71 = v70 != 0;
          }
          *(_BYTE *)(a1 + 92) = v71;
          goto LABEL_180;
        case 6u:
          *(_BYTE *)(a1 + 96) |= 2u;
          v72 = *((_QWORD *)this + 1);
          v73 = *((_QWORD *)this + 2);
          v74 = *(_QWORD *)this;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v72 + 1;
              *((_QWORD *)this + 1) = v72 + 1;
              v79 = *(_BYTE *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0)
                goto LABEL_153;
              v75 += 7;
              v72 = v78;
              v18 = v76++ > 8;
            }
            while (!v18);
LABEL_123:
            LODWORD(v77) = 0;
            goto LABEL_153;
          }
          v87 = 0;
          v88 = 0;
          v77 = 0;
          if (v73 <= v72)
            v73 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v89 = v72 + 1;
              v90 = *(_BYTE *)(v74 + v72);
              *((_QWORD *)this + 1) = v89;
              v77 |= (unint64_t)(v90 & 0x7F) << v87;
              if (v90 < 0)
              {
                v87 += 7;
                v72 = v89;
                v18 = v88++ > 8;
                if (v18)
                  goto LABEL_123;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v77) = 0;
            }
            break;
          }
LABEL_153:
          *(_DWORD *)(a1 + 88) = v77;
          goto LABEL_180;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_180;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B824D40(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  char v13;

  v3 = result;
  if ((*(_BYTE *)(result + 96) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 80));
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(_BYTE *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    result = PB::Writer::write(this);
    v13 = *(_BYTE *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B824E1C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF370E0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B824E34(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B824E58(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  int v6;
  int v7;
  char v8;

  *(_QWORD *)a1 = &off_24DF370E0;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 44) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 36) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 44) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_13:
  v8 = *(_BYTE *)(a2 + 40);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_BYTE *)(a1 + 40) = v8;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B824F1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gestureType");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hostPowerState");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "machContinuousTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "state");
    if ((*(_BYTE *)(a1 + 44) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "receivedTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "timestampPossible");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82500C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  v43 = v21++;
                  v44 = *(_BYTE *)(v22 + v43);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_81:
                    v2 = v43 + 1;
                    goto LABEL_82;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_81;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_82;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_82:
              *(_QWORD *)(a1 + 24) = v25;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_86:
                    v2 = v47 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_86;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_87;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  v51 = v33++;
                  v52 = *(_BYTE *)(v34 + v51);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_91:
                    v2 = v51 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_91;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_92;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_93:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 40) = v40;
              goto LABEL_93;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_52:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_93;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B825500(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_12:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B8255CC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37118;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_21B8255E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B825608(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  *(_QWORD *)result = &off_24DF37118;
  *(_DWORD *)(result + 84) = 0;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_DWORD *)(result + 84) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 84) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_DWORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_DWORD *)(a2 + 68);
    v3 |= 0x200u;
    *(_DWORD *)(result + 84) = v3;
    *(_DWORD *)(result + 68) = v6;
    v2 = *(_DWORD *)(a2 + 84);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 72);
  v3 |= 0x400u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 72) = v7;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *(_BYTE *)(a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 76) = v8;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *(_BYTE *)(a2 + 81);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 81) = v9;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *(_BYTE *)(a2 + 79);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 79) = v10;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *(_BYTE *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 80) = v11;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *(_BYTE *)(a2 + 78);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 78) = v12;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *(_BYTE *)(a2 + 82);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 82) = v13;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *(_BYTE *)(a2 + 77);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 84) = v3;
  *(_BYTE *)(result + 77) = v14;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 16) = v15;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 8) = v16;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 8) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *(_DWORD *)(a2 + 60);
  v3 |= 0x80u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 60) = v17;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 32) = v18;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *(_DWORD *)(a2 + 64);
  v3 |= 0x100u;
  *(_DWORD *)(result + 84) = v3;
  *(_DWORD *)(result + 64) = v19;
  v2 = *(_DWORD *)(a2 + 84);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_38:
    v21 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(result + 84) = v3 | 0x40;
    *(_DWORD *)(result + 56) = v21;
    return result;
  }
LABEL_37:
  v20 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 84) = v3;
  *(_QWORD *)(result + 24) = v20;
  if ((*(_DWORD *)(a2 + 84) & 0x40) != 0)
    goto LABEL_38;
  return result;
}

uint64_t sub_21B82581C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "detectionMode");
    v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "detectorRunning");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "enableStateDetected");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "fireAll");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "gestureDetectionDelay", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "gyroInUse");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "hostAwake");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "hostWakeCount");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hostWakeDelay", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "invertSensors");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "runningModeDuration", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "runningModeStartTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "runningSwitchCount");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "state");
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "type");
    if ((*(_DWORD *)(a1 + 84) & 0x20000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "timestampPossible", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x20000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "wakePending");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B825A8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v67 = v21++;
                  v68 = *(_BYTE *)(v22 + v67);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_145:
                    v2 = v67 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_145;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_146;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  v71 = v27++;
                  v72 = *(_BYTE *)(v28 + v71);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_150:
                    v2 = v71 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_150;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_151;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_167;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 76) = v34;
              goto LABEL_167;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 81) = v36;
              goto LABEL_167;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 79) = v38;
              goto LABEL_167;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 80) = v40;
              goto LABEL_167;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 78) = v42;
              goto LABEL_167;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 82) = v44;
              goto LABEL_167;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 77) = v46;
              goto LABEL_167;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  v75 = v47++;
                  v76 = *(_BYTE *)(v48 + v75);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_155:
                    v2 = v75 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_155;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_156;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 60) = v51;
              goto LABEL_167;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v79 = v53++;
                  v80 = *(_BYTE *)(v54 + v79);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_160:
                    v2 = v79 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_160;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_161;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 64) = v57;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_141:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_167;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              v59 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v60 = *(_QWORD *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    LODWORD(v63) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  v83 = v59++;
                  v84 = *(_BYTE *)(v60 + v83);
                  *((_QWORD *)this + 1) = v59;
                  v63 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v63) = 0;
LABEL_165:
                    v2 = v83 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v63) = 0;
                goto LABEL_165;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_166;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              LODWORD(v63) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 56) = v63;
LABEL_167:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_167;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8263D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 84);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_DWORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B8265EC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37150;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B826604(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B826628(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;

  *(_QWORD *)result = &off_24DF37150;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    v3 = 8;
    *(_WORD *)(result + 60) = 8;
    *(_DWORD *)(result + 24) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v10 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v11 = *(_BYTE *)(a2 + 59);
  v3 |= 0x4000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 59) = v11;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v12 = *(_BYTE *)(a2 + 58);
  v3 |= 0x2000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 58) = v12;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  v13 = *(_BYTE *)(a2 + 57);
  v3 |= 0x1000u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 57) = v13;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  v14 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 8) = v14;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *(_BYTE *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 56) = v15;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 16) = v16;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_32:
    v18 = *(_DWORD *)(a2 + 40);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(_DWORD *)(result + 40) = v18;
    return result;
  }
LABEL_31:
  v17 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 20) = v17;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0)
    goto LABEL_32;
  return result;
}

uint64_t sub_21B8267E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dataRate", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(a1 + 60) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isInterpolated");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isMissingSamples");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isWalkingFiltered");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isWalkingRaw");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "maxSampleDeltaInSecond", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "pedEnergyPlane", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "pedEnergyZ", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "pedEnergyZByPlane", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "pedEnergyZPeak", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "reversedTimestampCounts");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(this, "thetaYawFaceDeg", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 60) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "thetaRollFaceDeg", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 1) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8269F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 59) = v22;
              goto LABEL_107;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 58) = v24;
              goto LABEL_107;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 57) = v26;
              goto LABEL_107;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  v43 = v27++;
                  v44 = *(_BYTE *)(v28 + v43);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_100:
                    v2 = v43 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_100;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_101;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_101:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_107;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 56) = v34;
              goto LABEL_107;
            case 0xDu:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_65;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_96;
            case 0xEu:
              *(_WORD *)(a1 + 60) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_96:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_65:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_107;
            case 0xFu:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v47 = v35++;
                  v48 = *(_BYTE *)(v36 + v47);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_105:
                    v2 = v47 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_105;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_106;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 40) = v39;
LABEL_107:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_107;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B827054(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B82721C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF37188;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

void sub_21B827250(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_24DF37188;
  v2 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  PB::Base::~Base(this);
}

void sub_21B8273A0(PB::Base *a1)
{
  sub_21B827250(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8273C4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  int v59;
  int v60;
  int v61;
  char v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;

  *(_QWORD *)a1 = &off_24DF37188;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  v4 = (uint64_t *)(a1 + 88);
  *(_DWORD *)(a1 + 244) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x100) != 0)
  {
    v7 = *(_QWORD *)(a2 + 80);
    v6 = 256;
    *(_DWORD *)(a1 + 244) = 256;
    *(_QWORD *)(a1 + 80) = v7;
    v5 = *(_DWORD *)(a2 + 244);
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 72);
    v6 |= 0x80u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_QWORD *)(a1 + 72) = v8;
    v5 = *(_DWORD *)(a2 + 244);
  }
LABEL_6:
  if ((v5 & 0x10000) != 0)
  {
    v59 = *(_DWORD *)(a2 + 220);
    v6 |= 0x10000u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_DWORD *)(a1 + 220) = v59;
    v5 = *(_DWORD *)(a2 + 244);
    if ((v5 & 0x8000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_74;
    }
  }
  else if ((v5 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v60 = *(_DWORD *)(a2 + 216);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 216) = v60;
  v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_75;
  }
LABEL_74:
  v61 = *(_DWORD *)(a2 + 228);
  v6 |= 0x40000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 228) = v61;
  v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_76;
  }
LABEL_75:
  v62 = *(_BYTE *)(a2 + 241);
  v6 |= 0x2000000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_BYTE *)(a1 + 241) = v62;
  v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x80000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_77;
  }
LABEL_76:
  v63 = *(_DWORD *)(a2 + 232);
  v6 |= 0x80000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_DWORD *)(a1 + 232) = v63;
  v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
LABEL_78:
    v65 = *(_QWORD *)(a2 + 176);
    v6 |= 0x200u;
    *(_DWORD *)(a1 + 244) = v6;
    *(_QWORD *)(a1 + 176) = v65;
    if ((*(_DWORD *)(a2 + 244) & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_77:
  v64 = *(_BYTE *)(a2 + 242);
  v6 |= 0x4000000u;
  *(_DWORD *)(a1 + 244) = v6;
  *(_BYTE *)(a1 + 242) = v64;
  v5 = *(_DWORD *)(a2 + 244);
  if ((v5 & 0x200) != 0)
    goto LABEL_78;
LABEL_13:
  if ((v5 & 0x400000) != 0)
  {
LABEL_14:
    v9 = *(_BYTE *)(a2 + 238);
    *(_DWORD *)(a1 + 244) = v6 | 0x400000;
    *(_BYTE *)(a1 + 238) = v9;
  }
LABEL_15:
  if (*(_QWORD *)(a2 + 64))
  {
    v10 = operator new();
    v11 = sub_21B808148(v10, *(_QWORD *)(a2 + 64));
    v12 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v13;
    if (v12)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v12 + 8))(v12, v11);
  }
  v14 = *(_DWORD *)(a2 + 244);
  if ((v14 & 0x800) != 0)
  {
    v66 = *(_QWORD *)(a2 + 192);
    *(_DWORD *)(a1 + 244) |= 0x800u;
    *(_QWORD *)(a1 + 192) = v66;
    v14 = *(_DWORD *)(a2 + 244);
    if ((v14 & 0x800000) == 0)
    {
LABEL_20:
      if ((v14 & 0x400) == 0)
        goto LABEL_21;
LABEL_82:
      v68 = *(_QWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 244) |= 0x400u;
      *(_QWORD *)(a1 + 184) = v68;
      if ((*(_DWORD *)(a2 + 244) & 0x200000) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  else if ((v14 & 0x800000) == 0)
  {
    goto LABEL_20;
  }
  v67 = *(_BYTE *)(a2 + 239);
  *(_DWORD *)(a1 + 244) |= 0x800000u;
  *(_BYTE *)(a1 + 239) = v67;
  v14 = *(_DWORD *)(a2 + 244);
  if ((v14 & 0x400) != 0)
    goto LABEL_82;
LABEL_21:
  if ((v14 & 0x200000) != 0)
  {
LABEL_22:
    v15 = *(_BYTE *)(a2 + 237);
    *(_DWORD *)(a1 + 244) |= 0x200000u;
    *(_BYTE *)(a1 + 237) = v15;
  }
LABEL_23:
  if (*(_QWORD *)(a2 + 120))
  {
    v16 = operator new();
    v17 = sub_21B80B7C0(v16, *(_QWORD *)(a2 + 120));
    v18 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (*(_QWORD *)(a2 + 112))
  {
    v19 = operator new();
    v20 = sub_21B809CF0(v19, *(_QWORD *)(a2 + 112));
    v21 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v22;
    if (v21)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v21 + 8))(v21, v20);
  }
  if (*(_QWORD *)(a2 + 104))
  {
    v23 = operator new();
    v24 = sub_21B80B7C0(v23, *(_QWORD *)(a2 + 104));
    v25 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (*(_QWORD *)(a2 + 96))
  {
    v26 = operator new();
    v27 = sub_21B808EF8(v26, *(_QWORD *)(a2 + 96));
    v28 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v29;
    if (v28)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v28 + 8))(v28, v27);
  }
  if (*(_QWORD *)(a2 + 152))
  {
    v30 = operator new();
    v31 = sub_21B80B7C0(v30, *(_QWORD *)(a2 + 152));
    v32 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v31;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  if (*(_QWORD *)(a2 + 144))
  {
    v33 = operator new();
    v34 = sub_21B80C1EC(v33, *(_QWORD *)(a2 + 144));
    v35 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v36;
    if (v35)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v35 + 8))(v35, v34);
  }
  if (*(_QWORD *)(a2 + 168))
  {
    v37 = operator new();
    v38 = sub_21B80B7C0(v37, *(_QWORD *)(a2 + 168));
    v39 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v38;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  if (*(_QWORD *)(a2 + 160))
  {
    v40 = operator new();
    v41 = sub_21B80C654(v40, *(_QWORD *)(a2 + 160));
    v42 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v43;
    if (v42)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v42 + 8))(v42, v41);
  }
  if ((*(_BYTE *)(a2 + 246) & 0x10) != 0)
  {
    v44 = *(_BYTE *)(a2 + 236);
    *(_DWORD *)(a1 + 244) |= 0x100000u;
    *(_BYTE *)(a1 + 236) = v44;
  }
  if (*(_QWORD *)(a2 + 88))
  {
    v45 = operator new();
    v46 = sub_21B808A90(v45, *(_QWORD *)(a2 + 88));
    v47 = *v4;
    *v4 = v48;
    if (v47)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v47 + 8))(v47, v46);
  }
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 1) != 0)
  {
    v69 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 244) |= 1u;
    *(_QWORD *)(a1 + 8) = v69;
    v49 = *(_DWORD *)(a2 + 244);
    if ((v49 & 8) == 0)
    {
LABEL_54:
      if ((v49 & 0x20000) == 0)
        goto LABEL_55;
      goto LABEL_86;
    }
  }
  else if ((v49 & 8) == 0)
  {
    goto LABEL_54;
  }
  v70 = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 244) |= 8u;
  *(_QWORD *)(a1 + 32) = v70;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x20000) == 0)
  {
LABEL_55:
    if ((v49 & 0x1000000) == 0)
      goto LABEL_56;
    goto LABEL_87;
  }
LABEL_86:
  v71 = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 244) |= 0x20000u;
  *(_DWORD *)(a1 + 224) = v71;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x1000000) == 0)
  {
LABEL_56:
    if ((v49 & 0x1000) == 0)
      goto LABEL_57;
    goto LABEL_88;
  }
LABEL_87:
  v72 = *(_BYTE *)(a2 + 240);
  *(_DWORD *)(a1 + 244) |= 0x1000000u;
  *(_BYTE *)(a1 + 240) = v72;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x1000) == 0)
  {
LABEL_57:
    if ((v49 & 0x40) == 0)
      goto LABEL_58;
    goto LABEL_89;
  }
LABEL_88:
  v73 = *(_QWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 244) |= 0x1000u;
  *(_QWORD *)(a1 + 200) = v73;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x40) == 0)
  {
LABEL_58:
    if ((v49 & 2) == 0)
      goto LABEL_59;
    goto LABEL_90;
  }
LABEL_89:
  v74 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 244) |= 0x40u;
  *(_QWORD *)(a1 + 56) = v74;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 2) == 0)
  {
LABEL_59:
    if ((v49 & 0x10) == 0)
      goto LABEL_60;
    goto LABEL_91;
  }
LABEL_90:
  v75 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 244) |= 2u;
  *(_QWORD *)(a1 + 16) = v75;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x10) == 0)
  {
LABEL_60:
    if ((v49 & 0x4000) == 0)
      goto LABEL_61;
    goto LABEL_92;
  }
LABEL_91:
  v76 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 244) |= 0x10u;
  *(_QWORD *)(a1 + 40) = v76;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x4000) == 0)
  {
LABEL_61:
    if ((v49 & 0x2000) == 0)
      goto LABEL_62;
    goto LABEL_93;
  }
LABEL_92:
  v77 = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 244) |= 0x4000u;
  *(_DWORD *)(a1 + 212) = v77;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x2000) == 0)
  {
LABEL_62:
    if ((v49 & 0x20) == 0)
      goto LABEL_63;
LABEL_94:
    v79 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 244) |= 0x20u;
    *(_QWORD *)(a1 + 48) = v79;
    if ((*(_DWORD *)(a2 + 244) & 4) == 0)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_93:
  v78 = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 244) |= 0x2000u;
  *(_DWORD *)(a1 + 208) = v78;
  v49 = *(_DWORD *)(a2 + 244);
  if ((v49 & 0x20) != 0)
    goto LABEL_94;
LABEL_63:
  if ((v49 & 4) != 0)
  {
LABEL_64:
    v50 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 244) |= 4u;
    *(_QWORD *)(a1 + 24) = v50;
  }
LABEL_65:
  if (*(_QWORD *)(a2 + 136))
  {
    v51 = operator new();
    v52 = sub_21B80B7C0(v51, *(_QWORD *)(a2 + 136));
    v53 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v52;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  if (*(_QWORD *)(a2 + 128))
  {
    v54 = operator new();
    v55 = sub_21B80A4B8(v54, *(_QWORD *)(a2 + 128));
    v56 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v57;
    if (v56)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v56 + 8))(v56, v55);
  }
  return a1;
}

uint64_t sub_21B827A94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(this, "appliedBoutMetricCorrections");
    v5 = *(_DWORD *)(a1 + 244);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dailyFlights30daysMax", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "dailyFlights30daysMean", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "dailySteps30DaysTotal", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "dailySteps30daysMax", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "dailySteps30daysMean", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "dailySteps7DaysTotal", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "dailySteps7daysMean", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "daysWithSteps30Days");
  v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_65:
  PB::TextFormatter::format(this, "daysWithSteps7Days");
  if ((*(_DWORD *)(a1 + 244) & 0x8000) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "errorStatus");
LABEL_13:
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "eventResult");
  v7 = *(_DWORD *)(a1 + 244);
  if ((v7 & 0x200000) != 0)
  {
    PB::TextFormatter::format(this, "fusionSuccess");
    v7 = *(_DWORD *)(a1 + 244);
    if ((v7 & 0x80) == 0)
    {
LABEL_17:
      if ((v7 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_69;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(this, "hkEndTime", *(double *)(a1 + 72));
  v7 = *(_DWORD *)(a1 + 244);
  if ((v7 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_69:
  PB::TextFormatter::format(this, "hkStartTime", *(double *)(a1 + 80));
  if ((*(_DWORD *)(a1 + 244) & 0x400000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "isHistoricalCompute");
LABEL_20:
  v8 = *(_QWORD *)(a1 + 88);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "modelBalanceFeatures");
  v9 = *(_QWORD *)(a1 + 96);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "modelContinuousWalkingFeatures");
  v10 = *(_QWORD *)(a1 + 104);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "modelContinuousWalkingResult");
  v11 = *(_QWORD *)(a1 + 112);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "modelGaitBaselineFeatures");
  v12 = *(_QWORD *)(a1 + 120);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, this, "modelGaitBaselineResult");
  v13 = *(_QWORD *)(a1 + 128);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "modelHarmonicFeatures");
  v14 = *(_QWORD *)(a1 + 136);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "modelHarmonicResult");
  v15 = *(_QWORD *)(a1 + 144);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, this, "modelTemporalDispersionFeatures");
  v16 = *(_QWORD *)(a1 + 152);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, this, "modelTemporalDispersionResult");
  v17 = *(_QWORD *)(a1 + 160);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "modelTemporalEntropyFeatures");
  v18 = *(_QWORD *)(a1 + 168);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, this, "modelTemporalEntropyResult");
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "nextClassificationTime", *(double *)(a1 + 176));
    v19 = *(_DWORD *)(a1 + 244);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0)
        goto LABEL_45;
      goto LABEL_73;
    }
  }
  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }
  PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 184));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0)
      goto LABEL_46;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "rejectionStatus");
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "steadinessScore", *(double *)(a1 + 192));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "steadinessScoreIsValid");
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "unadjustedScore", *(double *)(a1 + 200));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0)
      goto LABEL_50;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "userAge", *(float *)(a1 + 224));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x40000) == 0)
  {
LABEL_50:
    if ((v19 & 0x1000000) == 0)
      goto LABEL_51;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 228));
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0)
      goto LABEL_52;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "userIsAgeSet");
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0)
      goto LABEL_53;
LABEL_81:
    PB::TextFormatter::format(this, "userIsWeightSet");
    if ((*(_DWORD *)(a1 + 244) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_54;
  }
LABEL_80:
  PB::TextFormatter::format(this, "userIsHeightSet");
  v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x4000000) != 0)
    goto LABEL_81;
LABEL_53:
  if ((v19 & 0x80000) != 0)
LABEL_54:
    PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 232));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B827FA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 244) |= 0x100u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v20);
        goto LABEL_185;
      case 2u:
        *(_DWORD *)(a1 + 244) |= 0x80u;
        v21 = *((_QWORD *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v21);
        goto LABEL_185;
      case 4u:
        *(_DWORD *)(a1 + 244) |= 0x10000u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_190;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_148:
          LODWORD(v28) = 0;
          goto LABEL_190;
        }
        v111 = 0;
        v112 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v113 = v23 + 1;
            v114 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v113;
            v28 |= (unint64_t)(v114 & 0x7F) << v111;
            if (v114 < 0)
            {
              v111 += 7;
              v23 = v113;
              v14 = v112++ > 8;
              if (v14)
                goto LABEL_148;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_190:
        *(_DWORD *)(a1 + 220) = v28;
        goto LABEL_203;
      case 5u:
        *(_DWORD *)(a1 + 244) |= 0x8000u;
        v31 = *((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        v33 = *(_QWORD *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)this + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_194;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_155:
          LODWORD(v36) = 0;
          goto LABEL_194;
        }
        v115 = 0;
        v116 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v117 = v31 + 1;
            v118 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)this + 1) = v117;
            v36 |= (unint64_t)(v118 & 0x7F) << v115;
            if (v118 < 0)
            {
              v115 += 7;
              v31 = v117;
              v14 = v116++ > 8;
              if (v14)
                goto LABEL_155;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v36) = 0;
          }
          break;
        }
LABEL_194:
        *(_DWORD *)(a1 + 216) = v36;
        goto LABEL_203;
      case 6u:
        *(_DWORD *)(a1 + 244) |= 0x40000u;
        v39 = *((_QWORD *)this + 1);
        if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v39);
        goto LABEL_100;
      case 7u:
        *(_DWORD *)(a1 + 244) |= 0x2000000u;
        v40 = *((_QWORD *)this + 1);
        if (v40 >= *((_QWORD *)this + 2))
        {
          v43 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v41 = v40 + 1;
          v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
          *((_QWORD *)this + 1) = v41;
          v43 = v42 != 0;
        }
        *(_BYTE *)(a1 + 241) = v43;
        goto LABEL_203;
      case 8u:
        *(_DWORD *)(a1 + 244) |= 0x80000u;
        v44 = *((_QWORD *)this + 1);
        if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v44);
        goto LABEL_100;
      case 9u:
        *(_DWORD *)(a1 + 244) |= 0x4000000u;
        v45 = *((_QWORD *)this + 1);
        if (v45 >= *((_QWORD *)this + 2))
        {
          v48 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
          *((_QWORD *)this + 1) = v46;
          v48 = v47 != 0;
        }
        *(_BYTE *)(a1 + 242) = v48;
        goto LABEL_203;
      case 0xAu:
        *(_DWORD *)(a1 + 244) |= 0x200u;
        v49 = *((_QWORD *)this + 1);
        if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v49);
        goto LABEL_185;
      case 0xBu:
        *(_DWORD *)(a1 + 244) |= 0x400000u;
        v50 = *((_QWORD *)this + 1);
        if (v50 >= *((_QWORD *)this + 2))
        {
          v53 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v51 = v50 + 1;
          v52 = *(unsigned __int8 *)(*(_QWORD *)this + v50);
          *((_QWORD *)this + 1) = v51;
          v53 = v52 != 0;
        }
        *(_BYTE *)(a1 + 238) = v53;
        goto LABEL_203;
      case 0xCu:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF36698;
        v54[15] = 0;
        v55 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v54;
        if (v55)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
          v54 = *(_DWORD **)(a1 + 64);
        }
        goto LABEL_139;
      case 0xDu:
        *(_DWORD *)(a1 + 244) |= 0x800u;
        v56 = *((_QWORD *)this + 1);
        if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v56);
        goto LABEL_185;
      case 0xEu:
        *(_DWORD *)(a1 + 244) |= 0x800000u;
        v57 = *((_QWORD *)this + 1);
        if (v57 >= *((_QWORD *)this + 2))
        {
          v60 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v58 = v57 + 1;
          v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
          *((_QWORD *)this + 1) = v58;
          v60 = v59 != 0;
        }
        *(_BYTE *)(a1 + 239) = v60;
        goto LABEL_203;
      case 0xFu:
        *(_DWORD *)(a1 + 244) |= 0x400u;
        v61 = *((_QWORD *)this + 1);
        if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v61);
        goto LABEL_185;
      case 0x10u:
        *(_DWORD *)(a1 + 244) |= 0x200000u;
        v62 = *((_QWORD *)this + 1);
        if (v62 >= *((_QWORD *)this + 2))
        {
          v65 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v63 = v62 + 1;
          v64 = *(unsigned __int8 *)(*(_QWORD *)this + v62);
          *((_QWORD *)this + 1) = v63;
          v65 = v64 != 0;
        }
        *(_BYTE *)(a1 + 237) = v65;
        goto LABEL_203;
      case 0x11u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF367B0;
        v54[13] = 0;
        v66 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v54;
        if (v66)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
          v54 = *(_DWORD **)(a1 + 120);
        }
        goto LABEL_139;
      case 0x12u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF36740;
        v54[22] = 0;
        v67 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v54;
        if (v67)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
          v54 = *(_DWORD **)(a1 + 112);
        }
        goto LABEL_139;
      case 0x13u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF367B0;
        v54[13] = 0;
        v68 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 104) = v54;
        if (v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
          v54 = *(_DWORD **)(a1 + 104);
        }
        goto LABEL_139;
      case 0x14u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF36708;
        v54[44] = 0;
        v69 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v54;
        if (v69)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
          v54 = *(_DWORD **)(a1 + 96);
        }
        goto LABEL_139;
      case 0x15u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF367B0;
        v54[13] = 0;
        v70 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v54;
        if (v70)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          v54 = *(_DWORD **)(a1 + 152);
        }
        goto LABEL_139;
      case 0x16u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF367E8;
        v54[10] = 0;
        v71 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v54;
        if (v71)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
          v54 = *(_DWORD **)(a1 + 144);
        }
        goto LABEL_139;
      case 0x17u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF367B0;
        v54[13] = 0;
        v72 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v54;
        if (v72)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
          v54 = *(_DWORD **)(a1 + 168);
        }
        goto LABEL_139;
      case 0x18u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF36820;
        v54[54] = 0;
        v73 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = v54;
        if (v73)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
          v54 = *(_DWORD **)(a1 + 160);
        }
        goto LABEL_139;
      case 0x19u:
        *(_DWORD *)(a1 + 244) |= 0x100000u;
        v74 = *((_QWORD *)this + 1);
        if (v74 >= *((_QWORD *)this + 2))
        {
          v77 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v75 = v74 + 1;
          v76 = *(unsigned __int8 *)(*(_QWORD *)this + v74);
          *((_QWORD *)this + 1) = v75;
          v77 = v76 != 0;
        }
        *(_BYTE *)(a1 + 236) = v77;
        goto LABEL_203;
      case 0x1Au:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF366D0;
        v54[10] = 0;
        v78 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v54;
        if (v78)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
          v54 = *(_DWORD **)(a1 + 88);
        }
        goto LABEL_139;
      case 0x1Bu:
        *(_DWORD *)(a1 + 244) |= 1u;
        v79 = *((_QWORD *)this + 1);
        if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v79);
        goto LABEL_185;
      case 0x1Cu:
        *(_DWORD *)(a1 + 244) |= 8u;
        v80 = *((_QWORD *)this + 1);
        if (v80 > 0xFFFFFFFFFFFFFFF7 || v80 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v80);
        goto LABEL_185;
      case 0x1Du:
        *(_DWORD *)(a1 + 244) |= 0x20000u;
        v81 = *((_QWORD *)this + 1);
        if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v81);
LABEL_100:
        v82 = *((_QWORD *)this + 1) + 4;
        goto LABEL_186;
      case 0x1Eu:
        *(_DWORD *)(a1 + 244) |= 0x1000000u;
        v83 = *((_QWORD *)this + 1);
        if (v83 >= *((_QWORD *)this + 2))
        {
          v86 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v84 = v83 + 1;
          v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
          *((_QWORD *)this + 1) = v84;
          v86 = v85 != 0;
        }
        *(_BYTE *)(a1 + 240) = v86;
        goto LABEL_203;
      case 0x1Fu:
        *(_DWORD *)(a1 + 244) |= 0x1000u;
        v87 = *((_QWORD *)this + 1);
        if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v87);
        goto LABEL_185;
      case 0x20u:
        *(_DWORD *)(a1 + 244) |= 0x40u;
        v88 = *((_QWORD *)this + 1);
        if (v88 > 0xFFFFFFFFFFFFFFF7 || v88 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v88);
        goto LABEL_185;
      case 0x21u:
        *(_DWORD *)(a1 + 244) |= 2u;
        v89 = *((_QWORD *)this + 1);
        if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v89);
        goto LABEL_185;
      case 0x22u:
        *(_DWORD *)(a1 + 244) |= 0x10u;
        v90 = *((_QWORD *)this + 1);
        if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v90);
        goto LABEL_185;
      case 0x23u:
        *(_DWORD *)(a1 + 244) |= 0x4000u;
        v91 = *((_QWORD *)this + 1);
        v92 = *((_QWORD *)this + 2);
        v93 = *(_QWORD *)this;
        if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
        {
          v94 = 0;
          v95 = 0;
          v96 = 0;
          do
          {
            v97 = v91 + 1;
            *((_QWORD *)this + 1) = v91 + 1;
            v98 = *(_BYTE *)(v93 + v91);
            v96 |= (unint64_t)(v98 & 0x7F) << v94;
            if ((v98 & 0x80) == 0)
              goto LABEL_198;
            v94 += 7;
            v91 = v97;
            v14 = v95++ > 8;
          }
          while (!v14);
LABEL_176:
          LODWORD(v96) = 0;
          goto LABEL_198;
        }
        v119 = 0;
        v120 = 0;
        v96 = 0;
        if (v92 <= v91)
          v92 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v92 == v91)
          {
            LODWORD(v96) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v121 = v91 + 1;
            v122 = *(_BYTE *)(v93 + v91);
            *((_QWORD *)this + 1) = v121;
            v96 |= (unint64_t)(v122 & 0x7F) << v119;
            if (v122 < 0)
            {
              v119 += 7;
              v91 = v121;
              v14 = v120++ > 8;
              if (v14)
                goto LABEL_176;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v96) = 0;
          }
          break;
        }
LABEL_198:
        *(_DWORD *)(a1 + 212) = v96;
        goto LABEL_203;
      case 0x24u:
        *(_DWORD *)(a1 + 244) |= 0x2000u;
        v99 = *((_QWORD *)this + 1);
        v100 = *((_QWORD *)this + 2);
        v101 = *(_QWORD *)this;
        if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
        {
          v102 = 0;
          v103 = 0;
          v104 = 0;
          do
          {
            v105 = v99 + 1;
            *((_QWORD *)this + 1) = v99 + 1;
            v106 = *(_BYTE *)(v101 + v99);
            v104 |= (unint64_t)(v106 & 0x7F) << v102;
            if ((v106 & 0x80) == 0)
              goto LABEL_202;
            v102 += 7;
            v99 = v105;
            v14 = v103++ > 8;
          }
          while (!v14);
LABEL_183:
          LODWORD(v104) = 0;
          goto LABEL_202;
        }
        v123 = 0;
        v124 = 0;
        v104 = 0;
        if (v100 <= v99)
          v100 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v100 == v99)
          {
            LODWORD(v104) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v125 = v99 + 1;
            v126 = *(_BYTE *)(v101 + v99);
            *((_QWORD *)this + 1) = v125;
            v104 |= (unint64_t)(v126 & 0x7F) << v123;
            if (v126 < 0)
            {
              v123 += 7;
              v99 = v125;
              v14 = v124++ > 8;
              if (v14)
                goto LABEL_183;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v104) = 0;
          }
          break;
        }
LABEL_202:
        *(_DWORD *)(a1 + 208) = v104;
        goto LABEL_203;
      case 0x25u:
        *(_DWORD *)(a1 + 244) |= 0x20u;
        v107 = *((_QWORD *)this + 1);
        if (v107 > 0xFFFFFFFFFFFFFFF7 || v107 + 8 > *((_QWORD *)this + 2))
          goto LABEL_134;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v107);
        goto LABEL_185;
      case 0x26u:
        *(_DWORD *)(a1 + 244) |= 4u;
        v108 = *((_QWORD *)this + 1);
        if (v108 <= 0xFFFFFFFFFFFFFFF7 && v108 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v108);
LABEL_185:
          v82 = *((_QWORD *)this + 1) + 8;
LABEL_186:
          *((_QWORD *)this + 1) = v82;
        }
        else
        {
LABEL_134:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_203;
      case 0x27u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF367B0;
        v54[13] = 0;
        v109 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v54;
        if (v109)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
          v54 = *(_DWORD **)(a1 + 136);
        }
        goto LABEL_139;
      case 0x28u:
        v54 = (_DWORD *)operator new();
        *(_QWORD *)v54 = &off_24DF36778;
        v54[62] = 0;
        v110 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v54;
        if (v110)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
          v54 = *(_DWORD **)(a1 + 128);
        }
LABEL_139:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v54 + 16))(v54, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_203:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_203;
    }
  }
}

uint64_t sub_21B828E10(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  int v16;
  const PB::Base *v17;
  const PB::Base *v18;

  v3 = result;
  v4 = *(_DWORD *)(result + 244);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80));
    v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 228));
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 232));
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 176));
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0)
LABEL_11:
    result = PB::Writer::write(this);
LABEL_12:
  v5 = *(const PB::Base **)(v3 + 64);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 192));
    v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_68;
    }
  }
  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::write(this);
  v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_68:
  result = PB::Writer::write(this, *(double *)(v3 + 184));
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0)
LABEL_18:
    result = PB::Writer::write(this);
LABEL_19:
  v7 = *(const PB::Base **)(v3 + 120);
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7);
  v8 = *(const PB::Base **)(v3 + 112);
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  v9 = *(const PB::Base **)(v3 + 104);
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9);
  v10 = *(const PB::Base **)(v3 + 96);
  if (v10)
    result = PB::Writer::writeSubmessage(this, v10);
  v11 = *(const PB::Base **)(v3 + 152);
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11);
  v12 = *(const PB::Base **)(v3 + 144);
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12);
  v13 = *(const PB::Base **)(v3 + 168);
  if (v13)
    result = PB::Writer::writeSubmessage(this, v13);
  v14 = *(const PB::Base **)(v3 + 160);
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14);
  if ((*(_BYTE *)(v3 + 246) & 0x10) != 0)
    result = PB::Writer::write(this);
  v15 = *(const PB::Base **)(v3 + 88);
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 8));
    v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0)
        goto LABEL_42;
      goto LABEL_72;
    }
  }
  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 224));
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0)
      goto LABEL_44;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(double *)(v3 + 200));
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0)
      goto LABEL_46;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0)
      goto LABEL_47;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0)
      goto LABEL_48;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x4000) == 0)
  {
LABEL_48:
    if ((v16 & 0x2000) == 0)
      goto LABEL_49;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_80:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_DWORD *)(v3 + 244) & 4) != 0)
LABEL_51:
    result = PB::Writer::write(this, *(double *)(v3 + 24));
LABEL_52:
  v17 = *(const PB::Base **)(v3 + 136);
  if (v17)
    result = PB::Writer::writeSubmessage(this, v17);
  v18 = *(const PB::Base **)(v3 + 128);
  if (v18)
    return PB::Writer::writeSubmessage(this, v18);
  return result;
}

uint64_t sub_21B829218(uint64_t result)
{
  *(_QWORD *)result = &off_24DF371C0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B829230(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B829254(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF371C0;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B8292C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B829354(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 28) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 4;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 28) |= 1u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_21B829574(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B8295EC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF371F8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B829604(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B829628(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF371F8;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 28) = v3 | 1;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B829698(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B829728(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 28) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 4;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 28) |= 1u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_21B829948(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B8299C0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37230;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B8299D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8299FC(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)result = &off_24DF37230;
  *(_DWORD *)(result + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = 2;
    *(_QWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 24) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_21B829A4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "enclosureMaterial");
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B829AB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B829D40(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B829D98(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37268;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B829DB0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF37268;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B829DF4(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF37268;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B829E4C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_24DF37268;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) == 0)
  {
    v4 = 1;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 16) = v5;
  v4 = 3;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v6 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 8) = v6;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
  {
    v7 = operator new();
    v8 = sub_21B84BAE4(v7, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return a1;
}

uint64_t sub_21B829F0C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B829F94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v22 = operator new();
        sub_21B84B978(v22);
        v23 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *(_QWORD *)(a1 + 24);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
            goto LABEL_34;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v24);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            goto LABEL_39;
          }
          *(_BYTE *)(a1 + 32) |= 2u;
          v21 = *((_QWORD *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
          {
LABEL_34:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_39;
          }
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
        }
        *((_QWORD *)this + 1) += 8;
      }
LABEL_39:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B82A1F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 8));
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

uint64_t sub_21B82A260(uint64_t result)
{
  *(_QWORD *)result = &off_24DF372A0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B82A278(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B82A29C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  *(_QWORD *)result = &off_24DF372A0;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 40) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x10u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_BYTE *)(a2 + 37);
  v3 |= 0x40u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 37) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_BYTE *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 36) = v9;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return result;
LABEL_18:
    v11 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 40) = v3 | 2;
    *(_QWORD *)(result + 16) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_BYTE *)(a2 + 38);
  v3 |= 0x80u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 38) = v10;
  if ((*(_BYTE *)(a2 + 40) & 2) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_21B82A398(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "date", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isForcedOnWristEnabled");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isOnCharger");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isWristDetectionEnabled");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "onWrist");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "onWristSensor");
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "onWristConfidence");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82A4C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_116;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_100;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_99:
                    v2 = v53 + 1;
                    goto LABEL_100;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_99;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_100;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_100:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_116;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_104:
                    v2 = v57 + 1;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_104;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_105;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_105:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_116;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_109:
                    v2 = v61 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_109;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_110;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 28) = v37;
              goto LABEL_116;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 37) = v40;
              goto LABEL_116;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 36) = v42;
              goto LABEL_116;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 38) = v44;
              goto LABEL_116;
            case 8u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v65 = v45++;
                  v66 = *(_BYTE *)(v46 + v65);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_114:
                    v2 = v65 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_114;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_115;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_115:
              *(_QWORD *)(a1 + 16) = v49;
LABEL_116:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_116;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B82AAF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_16:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B82ABFC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF372D8;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_21B82AC14(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B82AC38(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_24DF372D8;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_21B82AC88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "crown");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "wrist");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82ACF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 8) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 12) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82B018(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_21B82B074(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B82B098(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)result = &off_24DF37310;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_BYTE *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_BYTE *)(result + 28) = v7;
    return result;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(_QWORD *)(result + 16) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B82B120(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "entryId");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "rssi");
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isMoving");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82B1D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  v37 = v20++;
                  v38 = *(_BYTE *)(v21 + v37);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_63:
                v2 = v37 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_64;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_64:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_70;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_68;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_69;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = -(v31 & 1) ^ ((int)v31 >> 1);
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 28) = v34;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B82B5AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeSInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B82B640(_QWORD *result)
{
  *result = off_24DF37348;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B82B654(void **a1)
{
  void **v2;

  *a1 = off_24DF37348;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B82B69C(void **a1)
{
  void **v3;

  *a1 = off_24DF37348;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

_QWORD *sub_21B82B6F8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  a1[1] = 0;
  v3 = (uint64_t **)(a1 + 1);
  *a1 = off_24DF37348;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_21B82B75C(v3, *v4++);
  return a1;
}

uint64_t sub_21B82B75C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B82B098(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B82B890(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B82B8B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "entries");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82B91C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_21B82BABC(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82BABC(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF37310;
  *(_DWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B82BBF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B82BC10(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_21B82BC58(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37380;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_21B82BC70(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B82BC94(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_24DF37380;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_21B82BCE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "motionNotification");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82BD4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 8) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 12) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82C074(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B82C0CC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF373B8;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B82C0E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B82C108(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  *(_QWORD *)result = &off_24DF373B8;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) != 0)
  {
    v4 = *(_DWORD *)(a2 + 60);
    v3 = 512;
    *(_WORD *)(result + 64) = 512;
    *(_DWORD *)(result + 60) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 40) = v5;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 64) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v9;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    v13 = *(_DWORD *)(a2 + 44);
    *(_WORD *)(result + 64) = v3 | 0x20;
    *(_DWORD *)(result + 44) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 24) = v12;
  if ((*(_WORD *)(a2 + 64) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_21B82C23C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "eventType");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "genericWorkoutLabel");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "swimLocation");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "workoutMode");
    if ((*(_WORD *)(a1 + 64) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "workoutLocationType");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82C3AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v59 = v20++;
                  v60 = *(_BYTE *)(v21 + v59);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_125:
                v2 = v59 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_126;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_126:
              *(_DWORD *)(a1 + 60) = v24;
              goto LABEL_152;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  v63 = v27++;
                  v64 = *(_BYTE *)(v28 + v63);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_130:
                    v2 = v63 + 1;
                    goto LABEL_131;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_130;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_131;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_131:
              *(_DWORD *)(a1 + 40) = v31;
              goto LABEL_152;
            case 3u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 4u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 5u:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  v67 = v33++;
                  v68 = *(_BYTE *)(v34 + v67);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_135:
                    v2 = v67 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_135;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_136;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_152;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_140:
                    v2 = v71 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_140;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_141;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 56) = v43;
              goto LABEL_152;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_145:
                    v2 = v75 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_145;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_146;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_152;
            case 9u:
              *(_WORD *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_121:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_152;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_150:
                    v2 = v79 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_150;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_151;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_152:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_152;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B82CB90(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_WORD *)(v3 + 64) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_21B82CCD0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B82CCF4(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)result = &off_24DF373F0;
  *(_DWORD *)(result + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_DWORD *)(a2 + 28);
    v3 = 16;
    *(_BYTE *)(result + 32) = 16;
    *(_DWORD *)(result + 28) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 32) = v3 | 2;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 32) = v3;
  *(_QWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B82CD98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "genericWorkoutLabel");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "workoutLocationType");
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "swimLocation");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82CE68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_88:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B82D3CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B82D47C(_QWORD *result)
{
  *result = &off_24DF37428;
  result[1] = 0;
  return result;
}

void sub_21B82D48C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37428;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82D4CC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37428;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82D520(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF37428;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7987C8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B82D59C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82D5EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B79878C(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82D7B4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82D7D0(_QWORD *result)
{
  *result = &off_24DF37460;
  result[1] = 0;
  return result;
}

void sub_21B82D7E0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37460;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82D820(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37460;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82D874(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37460;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B799F04(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82D8F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82D940(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B799E24(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82DB08(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82DB24(_QWORD *result)
{
  *result = &off_24DF37498;
  result[1] = 0;
  return result;
}

void sub_21B82DB34(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37498;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82DB74(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37498;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82DBC8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37498;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B799F04(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82DC44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82DC94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B799E24(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82DE5C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82DE78(_QWORD *result)
{
  *result = &off_24DF374D0;
  result[1] = 0;
  return result;
}

void sub_21B82DE88(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF374D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82DEC8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF374D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82DF1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF374D0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7AF22C(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B82DF98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82DFE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7AF1F0(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82E1B0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82E1CC(_QWORD *result)
{
  *result = &off_24DF37508;
  result[1] = 0;
  return result;
}

void sub_21B82E1DC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82E21C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37508;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82E270(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF37508;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B6CEC(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B82E2EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82E33C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7B6B10(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82E504(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82E520(_QWORD *result)
{
  *result = &off_24DF37540;
  result[1] = 0;
  return result;
}

void sub_21B82E530(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37540;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82E570(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37540;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82E5C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF37540;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7C060C(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B82E640(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82E690(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7C03C0(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82E858(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82E874(_QWORD *result)
{
  *result = &off_24DF37578;
  result[1] = 0;
  return result;
}

void sub_21B82E884(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37578;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82E8C4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37578;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82E918(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37578;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7D0F74(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82E994(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82E9E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7D0DEC(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82EBAC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82EBC8(_QWORD *result)
{
  *result = &off_24DF375B0;
  result[1] = 0;
  return result;
}

void sub_21B82EBD8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF375B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82EC18(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF375B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82EC6C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF375B0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7D4AC4(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82ECE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82ED38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7D4A88(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82EF00(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82EF1C(_QWORD *result)
{
  *result = &off_24DF375E8;
  result[1] = 0;
  return result;
}

void sub_21B82EF2C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF375E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82EF6C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF375E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82EFC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF375E8;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B73F174(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B82F03C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82F08C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B73EEBC(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82F254(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B82F270(uint64_t result)
{
  *(_QWORD *)result = &off_24DF37620;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B82F288(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B82F2AC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  double result;

  *(_QWORD *)a1 = &off_24DF37620;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 4) != 0)
  {
    v4 = *(_DWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(a1 + 28) = 4;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 28) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_21B82F31C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "walkingHeartRateAverage", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 28) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "restingHeartRate", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "workoutActivityType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82F3AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 28) |= 4u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v25) = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }
LABEL_52:
          *(_DWORD *)(a1 + 24) = v25;
        }
        else
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
        }
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_21B82F678(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_21B82F6F0(_QWORD *result)
{
  *result = &off_24DF37658;
  result[1] = 0;
  return result;
}

void sub_21B82F700(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37658;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82F740(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37658;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82F794(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37658;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B84BAE4(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82F810(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82F860(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B84B978(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82FA28(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82FA44(_QWORD *result)
{
  *result = &off_24DF37690;
  result[1] = 0;
  return result;
}

void sub_21B82FA54(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37690;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82FA94(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37690;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82FAE8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37690;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B836D98(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82FB64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82FBB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B836C9C(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B82FD7C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B82FD98(_QWORD *result)
{
  *result = &off_24DF376C8;
  result[1] = 0;
  return result;
}

void sub_21B82FDA8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF376C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B82FDE8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF376C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B82FE3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF376C8;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B84B33C(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B82FEB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B82FF08(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B84B108(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8300D0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B8300EC(_QWORD *result)
{
  *result = &off_24DF37700;
  result[1] = 0;
  return result;
}

void sub_21B8300FC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37700;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B83013C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37700;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B830190(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF37700;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B861D64(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B83020C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83025C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B861CBC(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B830424(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B830440(_QWORD *result)
{
  *result = &off_24DF37738;
  result[1] = 0;
  return result;
}

void sub_21B830450(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37738;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B830490(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37738;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B8304E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF37738;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B86D678(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B830560(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8305B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B86D5B4(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B830778(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B830794(_QWORD *result)
{
  *result = &off_24DF37770;
  result[1] = 0;
  return result;
}

void sub_21B8307A4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37770;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B8307E4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37770;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B830838(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37770;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B82A29C(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B8308B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B830904(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF372A0;
        v20[10] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B830AD8(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B830AF4(_QWORD *result)
{
  *result = &off_24DF377A8;
  result[1] = 0;
  return result;
}

void sub_21B830B04(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF377A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B830B44(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF377A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B830B98(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;

  *a1 = &off_24DF377A8;
  a1[1] = 0;
  if (!*(_QWORD *)(a2 + 8))
    return a1;
  v4 = operator new();
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v4 = &off_24DF372D8;
  *(_DWORD *)(v4 + 16) = 0;
  v6 = *(_BYTE *)(v5 + 16);
  if ((v6 & 2) != 0)
  {
    v8 = *(_DWORD *)(v5 + 12);
    *(_BYTE *)(v4 + 16) = 2;
    *(_DWORD *)(v4 + 12) = v8;
    v7 = 3;
    if ((v6 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = 1;
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
  {
LABEL_6:
    v9 = *(_DWORD *)(v5 + 8);
    *(_BYTE *)(v4 + 16) = v7;
    *(_DWORD *)(v4 + 8) = v9;
  }
LABEL_7:
  v10 = a1[1];
  a1[1] = v4;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t sub_21B830C58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B830CA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF372D8;
        v20[4] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B830E7C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B830E98(_QWORD *result)
{
  *result = &off_24DF377E0;
  result[1] = 0;
  return result;
}

void sub_21B830EA8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF377E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B830EE8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF377E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B830F3C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24DF377E0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = (_QWORD *)operator new();
    v5 = sub_21B82B6F8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B830FB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B831008(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        *v20 = off_24DF37348;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8311DC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B8311F8(_QWORD *result)
{
  *result = &off_24DF37818;
  result[1] = 0;
  return result;
}

void sub_21B831208(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37818;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B831248(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37818;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B83129C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF37818;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B82C108(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B831318(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B831368(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF373B8;
        v20[16] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B83153C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B831558(_QWORD *result)
{
  *result = &off_24DF37850;
  result[1] = 0;
  return result;
}

void sub_21B831568(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37850;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B8315A8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF37850;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B8315FC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24DF37850;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = (_QWORD *)operator new();
    v5 = sub_21B831974(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B83167C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8316CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        *v20 = off_24DF37888;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

_QWORD *sub_21B8318A0(_QWORD *result)
{
  *result = off_24DF37888;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_21B8318B4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

void sub_21B8318D0(void **a1)
{
  void **v2;

  *a1 = off_24DF37888;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B831918(void **a1)
{
  void **v3;

  *a1 = off_24DF37888;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

_QWORD *sub_21B831974(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  a1[1] = 0;
  v3 = (uint64_t **)(a1 + 1);
  *a1 = off_24DF37888;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_21B8319D8(v3, *v4++);
  return a1;
}

uint64_t sub_21B8319D8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B82CCF4(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B831B0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B831B28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "workoutPriors");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B831B94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        sub_21B831D34(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B831D34(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF373F0;
  *(_DWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B831E6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B831E88(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

_QWORD *sub_21B831ED0(_QWORD *result)
{
  *result = &off_24DF378C0;
  result[1] = 0;
  return result;
}

void sub_21B831EE0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF378C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B831F20(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF378C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B831F74(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF378C0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7AC098(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B831FF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B832040(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_21B7AC368(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B832208(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B832224(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  const char *v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  id v17;
  char v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  objc_msgSend_defaultManager(MEMORY[0x24BDD1580], a2, a3, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a1 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v5, a1, v6);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v5, *(_QWORD *)a1, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  if ((objc_msgSend_fileExistsAtPath_isDirectory_(v7, v9, (uint64_t)v8, (uint64_t)&v18) & 1) != 0)
  {
    if (!v18)
    {
LABEL_15:
      v14 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v17 = 0;
    v11 = objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v7, v10, (uint64_t)v8, 1, 0, &v17);
    v12 = v17;
    v13 = v12;
    if ((v11 & 1) == 0)
    {
      if (qword_25518E2F0 != -1)
        dispatch_once(&qword_25518E2F0, &unk_24DF38338);
      v15 = qword_25518E2E8;
      if (os_log_type_enabled((os_log_t)qword_25518E2E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        v20 = v8;
        v21 = 2114;
        v22 = v13;
        _os_log_impl(&dword_21B72A000, v15, OS_LOG_TYPE_INFO, "Unable to create directory at path: %{public}@, error, %{public}@", buf, 0x16u);
      }

      goto LABEL_15;
    }

  }
  v14 = 1;
LABEL_16:

  return v14;
}

void sub_21B8323A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21B8323D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  const char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  id v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  void *v32;
  const char *v33;
  _BOOL4 v34;
  id v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  const void **v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  id v50;
  char v51;
  _BYTE v52[128];
  _BYTE buf[12];
  __int16 v54;
  id v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  objc_msgSend_defaultManager(MEMORY[0x24BDD1580], (const char *)a2, a3, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (void *)MEMORY[0x24BDBCF48];
  if (*(char *)(a1 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v8, a1, v9);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v8, *(_QWORD *)a1, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v11, v13, (uint64_t)v12, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v50 = 0;
  objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(v10, v16, (uint64_t)v15, 0, 4, &v50);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v50;

  if (v17)
  {
    if (qword_25518E2F0 != -1)
      dispatch_once(&qword_25518E2F0, &unk_24DF38338);
    v20 = qword_25518E2E8;
    if (os_log_type_enabled((os_log_t)qword_25518E2E8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0)
        v21 = a1;
      else
        v21 = *(_QWORD *)a1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v21;
      v54 = 2114;
      v55 = v17;
      _os_log_impl(&dword_21B72A000, v20, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v18, a2, v19);
    else
      objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v18, *(_QWORD *)a2, v19);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v23 = v45;
    v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v24, (uint64_t)&v46, (uint64_t)v52, 16);
    if (v28)
    {
      v29 = *(_QWORD *)v47;
      do
      {
        for (i = 0; i != v28; ++i)
        {
          if (*(_QWORD *)v47 != v29)
            objc_enumerationMutation(v23);
          v31 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
          objc_msgSend_pathExtension(v31, v25, v26, v27);
          v32 = (void *)objc_claimAutoreleasedReturnValue();
          v34 = objc_msgSend_compare_options_(v32, v33, (uint64_t)v22, 1) == 0;

          if (v34)
          {
            v35 = objc_retainAutorelease(v31);
            v39 = (char *)objc_msgSend_fileSystemRepresentation(v35, v36, v37, v38);
            *(_QWORD *)buf = v39;
            v40 = a5[1];
            if (v40 >= a5[2])
            {
              v41 = sub_21B83291C(a5, (char **)buf);
            }
            else
            {
              sub_21B797DBC((_QWORD *)a5[1], v39);
              v41 = v40 + 24;
              a5[1] = v40 + 24;
            }
            a5[1] = v41;
          }
        }
        v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v23, v25, (uint64_t)&v46, (uint64_t)v52, 16);
      }
      while (v28);
    }

    v42 = (const void **)a5[1];
    v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v42 - *a5) >> 3));
    if (v42 == (const void **)*a5)
      v44 = 0;
    else
      v44 = v43;
    sub_21B832A20(*a5, v42, (uint64_t)&v51, v44, 1);

  }
}

void sub_21B8326DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 128) = v10;
  sub_21B7D94C0((void ***)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_21B83276C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  char v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  objc_msgSend_defaultManager(MEMORY[0x24BDD1580], a2, a3, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a1 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v5, a1, v6);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], v5, *(_QWORD *)a1, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v10 = objc_msgSend_removeItemAtPath_error_(v7, v9, (uint64_t)v8, (uint64_t)&v14);
  v11 = v14;

  if ((v10 & 1) == 0)
  {
    if (qword_25518E2F0 != -1)
      dispatch_once(&qword_25518E2F0, &unk_24DF38338);
    v12 = qword_25518E2E8;
    if (os_log_type_enabled((os_log_t)qword_25518E2E8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0)
        v13 = a1;
      else
        v13 = *(_QWORD *)a1;
      *(_DWORD *)buf = 136446466;
      v16 = v13;
      v17 = 2114;
      v18 = v11;
      _os_log_impl(&dword_21B72A000, v12, OS_LOG_TYPE_INFO, "Unable to delete file %{public}s, error, %{public}@", buf, 0x16u);
    }
  }

}

void sub_21B8328C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_21B8328EC()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v1 = (void *)qword_25518E2E8;
  qword_25518E2E8 = (uint64_t)v0;

}

uint64_t sub_21B83291C(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_21B796A0C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_21B7DB8BC(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  sub_21B797DBC(v14, *a2);
  v15 = v14 + 24;
  sub_21B7DFE1C(a1, &v13);
  v11 = a1[1];
  sub_21B7DFFA4((uint64_t)&v13);
  return v11;
}

void sub_21B832A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21B7DFFA4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21B832A20(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

LABEL_1:
  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_21B7E364C(a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        sub_21B832FE8(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_21B83367C((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        sub_21B833764((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_21B832DC4((uint64_t)v10, a2, a3);
          else
            sub_21B832EE4(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_21B832FE8(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_21B832FE8(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_21B832FE8(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_21B832FE8(v19, v20, a2 - 9, a3);
            sub_21B832FE8(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_21B7E364C(a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = sub_21B833130((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_21B8332C0((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_21B83344C(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!sub_21B83344C(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_21B832A20(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_21B833884((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

void sub_21B832DC4(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (sub_21B7E364C(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_21B7E364C(a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_21B832EE4(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (sub_21B7E364C(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_21B7E364C(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_21B832FE8(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_21B7E364C(a4, a2, a1);
  result = sub_21B7E364C(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_21B7E364C(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_21B7E364C(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_21B833130(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_21B7E364C(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_21B7E364C(a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_21B7E364C(a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_21B7E364C(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_21B7E364C(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_21B7E364C(a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t sub_21B8332C0(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_21B7E364C(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_21B7E364C(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_21B7E364C(a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (sub_21B7E364C(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_21B7E364C(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL sub_21B83344C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (sub_21B7E364C(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_21B832FE8((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_21B83367C(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_21B833764(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_21B832FE8((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_21B7E364C(a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_21B7E364C(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_21B83367C(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_21B832FE8((const void **)a1, a2, a3, a5);
  if (sub_21B7E364C(a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (sub_21B7E364C(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_21B7E364C(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_21B833764(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_21B83367C(a1, a2, a3, a4, a6);
  if (sub_21B7E364C(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (sub_21B7E364C(a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (sub_21B7E364C(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_21B7E364C(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *sub_21B833884(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_21B833ACC(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_21B7E364C(a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_21B833ACC(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_21B833C60(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_21B833D38(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_21B833AB4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_21B833ACC(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_21B7E364C(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_21B7E364C(a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_21B7E364C(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_21B7E364C(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_21B833C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_21B7E364C(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_21B833D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_21B7E364C(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_21B7E364C(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

double sub_21B833E34(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_25518E2F8;
  if (*(double *)&qword_25518E2F8 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_25518E2F8 = v2;
  }
  return v2 * (double)a1;
}

double sub_21B833EF0()
{
  uint64_t v0;

  v0 = mach_absolute_time();
  return sub_21B833E34(v0);
}

double sub_21B833F04()
{
  uint64_t v0;

  v0 = mach_continuous_time();
  return sub_21B833E34(v0);
}

uint64_t sub_21B833F18(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38368;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B833F30(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B833F54(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  int v5;

  *(_QWORD *)a1 = &off_24DF38368;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_21B833FC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "state");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B834054(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_21B834320(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B834398(uint64_t result)
{
  *(_QWORD *)result = &off_24DF383A0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B8343B0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8343D4(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)result = &off_24DF383A0;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 64) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 64) & 0x800) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 60);
    v3 |= 0x800u;
    *(_WORD *)(result + 64) = v3;
    *(_BYTE *)(result + 60) = v5;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 16) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_BYTE *)(a2 + 61);
  v3 |= 0x1000u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 61) = v8;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 44) = v10;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 28) = v12;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 32) = v13;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 36) = v14;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(result + 64) = v3 | 0x200;
    *(_DWORD *)(result + 52) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 24) = v15;
  if ((*(_WORD *)(a2 + 64) & 0x200) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B83455C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "classificationType");
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intervalSleepBeginToSleepDetected", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intervalSleepDetectedToGazeDetected", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intervalSleepDetectedToWakeDetected", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intervalWakeBeginToWakeDetected", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "intervalWakeDetectedToGazeDetected", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "intervalWakeDetectedToSleepDetected", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "shouldNotify");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "shouldNotifyStats");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "sleepType");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 64) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "state");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83472C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 60) = v22;
              goto LABEL_117;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v45 = v23++;
                  v46 = *(_BYTE *)(v24 + v45);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_105;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_106;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 56) = v27;
              goto LABEL_117;
            case 4u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 61) = v30;
              goto LABEL_117;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 9u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_100:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_101:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 4u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v49 = v31++;
                  v50 = *(_BYTE *)(v32 + v49);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_110;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_111;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 24) = v35;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_115;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_116;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 52) = v41;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B834DBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 64) & 0x200) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B834F4C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF383D8;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_21B834F64(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B834F88(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;

  *(_QWORD *)result = &off_24DF383D8;
  *(_DWORD *)(result + 100) = 0;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_WORD *)(result + 100) = 256;
    *(_QWORD *)(result + 72) = v4;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 100) & 0x1000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 96);
    v3 |= 0x1000u;
    *(_WORD *)(result + 100) = v3;
    *(_DWORD *)(result + 96) = v5;
    v2 = *(_WORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *(_QWORD *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 100) = v3;
    *(_QWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 48) = v9;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 32) = v10;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 8) = v11;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 80) = v12;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 16) = v13;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 24) = v14;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(result + 100) = v3 | 0x800;
    *(_DWORD *)(result + 92) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v15;
  if ((*(_WORD *)(a2 + 100) & 0x800) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B835110(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "locationLoggingEnabled");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "type");
    if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x1000) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x200) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8352E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 96) = v25;
              goto LABEL_113;
            case 3u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 100) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 100) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_60:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_113;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_106;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_107;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_113;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_112;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_111;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_112;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *(_DWORD *)(a1 + 92) = v37;
LABEL_113:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_113;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B835950(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72));
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 100) & 0x800) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B835AE0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38410;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B835AF8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B835B1C(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_24DF38410;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B835B48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "lockScreen");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B835B94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B835D20(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B835D40(_QWORD *result)
{
  *result = &off_24DF38448;
  result[1] = 0;
  return result;
}

void sub_21B835D50(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38448;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B835D90(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38448;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B835DE4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF38448;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B3598(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B835E60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B835EB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7B34B8(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B836078(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B836094(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38480;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B8360AC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8360D0(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF38480;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B836120(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B836188(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8364B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B836508(uint64_t result)
{
  *(_QWORD *)result = &off_24DF384B8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B83651C(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24DF384B8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_21B83655C(PB::Base *a1)
{
  sub_21B83651C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B836580(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;

  *(_QWORD *)a1 = &off_24DF384B8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v5 = operator new();
    v6 = v5;
    v7 = *(__int128 **)(a2 + 8);
    if (*((char *)v7 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v5 = v8;
    }
    v9 = *v4;
    *v4 = v6;
    if (v9)
      sub_21B796830((uint64_t)v4, v9);
  }
  v10 = *(_BYTE *)(a2 + 24);
  if ((v10 & 1) != 0)
  {
    v11 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_DWORD *)(a1 + 16) = v11;
    v10 = *(_BYTE *)(a2 + 24);
  }
  if ((v10 & 2) != 0)
  {
    v12 = *(_BYTE *)(a2 + 20);
    *(_BYTE *)(a1 + 24) |= 2u;
    *(_BYTE *)(a1 + 20) = v12;
  }
  return a1;
}

uint64_t sub_21B836668(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accessoryType");
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "isAttached");
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8366E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  uint64_t v43;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v25 = *((_QWORD *)this + 1);
        if (v25 >= *((_QWORD *)this + 2))
        {
          v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
          *((_QWORD *)this + 1) = v26;
          v28 = v27 != 0;
        }
        *(_BYTE *)(a1 + 20) = v28;
      }
      else if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v30)
        {
          v38 = 0;
          v39 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v40 = v29 + 1;
            v41 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v40;
            v34 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v29 = v40;
            v15 = v39++ > 8;
            if (v15)
            {
LABEL_48:
              LODWORD(v34) = 0;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v34) = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              break;
            v32 += 7;
            v29 = v35;
            v15 = v33++ > 8;
            if (v15)
              goto LABEL_48;
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 16) = v34;
      }
      else if ((_DWORD)v21 == 1)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v43 = 0;
        v23 = *v8;
        *v8 = (uint64_t)v22;
        if (v23)
        {
          sub_21B796830((uint64_t)v8, v23);
          v24 = v43;
          v43 = 0;
          if (v24)
            sub_21B796830((uint64_t)&v43, v24);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8369D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  if (*(_QWORD *)(result + 8))
    result = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B836A3C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF384F0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B836A54(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B836A78(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_24DF384F0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B836AA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isCharging");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B836AF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B836C7C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B836C9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38528;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_21B836CB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B836CD8(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)result = &off_24DF38528;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v6;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 36) = v3 | 2;
    *(_DWORD *)(result + 16) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 20) = v8;
  if ((*(_BYTE *)(a2 + 36) & 2) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B836D9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B836E8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_55;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_54:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_55:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_61;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_59;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_60;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_61:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B837214(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B8372E0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF38560;
  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_21B837310(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24DF38560;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_21B837380(PB::Base *a1)
{
  sub_21B837310(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8373A4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24DF38560;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if ((*(_BYTE *)(a2 + 112) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 112) = 1;
    *(_QWORD *)(a1 + 104) = v6;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_21B796B90(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_21B83747C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 32);
  v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "biasEst", v7);
  }
  v8 = *(float **)(a1 + 8);
  v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "biasEstVar", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "residual", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "temperature", v16);
  }
  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B837588(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  int v119;
  char *v120;
  int v121;
  char *v122;
  int v123;
  unint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 80);
    v128 = a1 + 96;
    v129 = a1 + 72;
    v10 = (void **)(a1 + 8);
    v11 = (void **)(a1 + 32);
    v126 = a1 + 48;
    v127 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 112) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_196;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_198;
        case 2u:
          if (v24 != 2)
          {
            v84 = *(char **)(a1 + 40);
            v83 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v84 >= v83)
            {
              v92 = (char *)*v11;
              v93 = (v84 - (_BYTE *)*v11) >> 2;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62)
LABEL_207:
                sub_21B796A0C();
              v95 = v83 - (_QWORD)v92;
              if (v95 >> 1 > v94)
                v94 = v95 >> 1;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                v96 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (v96)
              {
                v97 = (char *)sub_21B796CD8(v126, v96);
                v92 = *(char **)(a1 + 32);
                v84 = *(char **)(a1 + 40);
              }
              else
              {
                v97 = 0;
              }
              v116 = &v97[4 * v93];
              *(_DWORD *)v116 = 0;
              v85 = v116 + 4;
              while (v84 != v92)
              {
                v117 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v116;
              *(_QWORD *)(a1 + 40) = v85;
              *(_QWORD *)(a1 + 48) = &v97[4 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_DWORD *)v84 = 0;
              v85 = v84 + 4;
            }
            *(_QWORD *)(a1 + 40) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 40);
            v29 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_207;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v126, v36);
                v32 = *(char **)(a1 + 32);
                v30 = *(char **)(a1 + 40);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v38;
              *(_QWORD *)(a1 + 40) = v31;
              *(_QWORD *)(a1 + 48) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 40) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_125;
        case 3u:
          if (v24 != 2)
          {
            v87 = *(char **)(a1 + 16);
            v86 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v87 >= v86)
            {
              v98 = (char *)*v10;
              v99 = (v87 - (_BYTE *)*v10) >> 2;
              v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62)
LABEL_208:
                sub_21B796A0C();
              v101 = v86 - (_QWORD)v98;
              if (v101 >> 1 > v100)
                v100 = v101 >> 1;
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                v102 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v102 = v100;
              if (v102)
              {
                v103 = (char *)sub_21B796CD8(v127, v102);
                v98 = *(char **)(a1 + 8);
                v87 = *(char **)(a1 + 16);
              }
              else
              {
                v103 = 0;
              }
              v118 = &v103[4 * v99];
              *(_DWORD *)v118 = 0;
              v85 = v118 + 4;
              while (v87 != v98)
              {
                v119 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v118;
              *(_QWORD *)(a1 + 16) = v85;
              *(_QWORD *)(a1 + 24) = &v103[4 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v85 = v87 + 4;
            }
            *(_QWORD *)(a1 + 16) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_208;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796CD8(v127, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_125;
        case 4u:
          if (v24 != 2)
          {
            v89 = *(char **)(a1 + 88);
            v88 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v89 >= v88)
            {
              v104 = (char *)*v9;
              v105 = (v89 - (_BYTE *)*v9) >> 2;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 62)
LABEL_209:
                sub_21B796A0C();
              v107 = v88 - (_QWORD)v104;
              if (v107 >> 1 > v106)
                v106 = v107 >> 1;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                v108 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              if (v108)
              {
                v109 = (char *)sub_21B796CD8(v128, v108);
                v104 = *(char **)(a1 + 80);
                v89 = *(char **)(a1 + 88);
              }
              else
              {
                v109 = 0;
              }
              v120 = &v109[4 * v105];
              *(_DWORD *)v120 = 0;
              v85 = v120 + 4;
              while (v89 != v104)
              {
                v121 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v120;
              *(_QWORD *)(a1 + 88) = v85;
              *(_QWORD *)(a1 + 96) = &v109[4 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_DWORD *)v89 = 0;
              v85 = v89 + 4;
            }
            *(_QWORD *)(a1 + 88) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 88);
            v57 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_209;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_21B796CD8(v128, v64);
                v60 = *(char **)(a1 + 80);
                v58 = *(char **)(a1 + 88);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v66;
              *(_QWORD *)(a1 + 88) = v59;
              *(_QWORD *)(a1 + 96) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *(_QWORD *)(a1 + 88) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_125;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v69 = *((_QWORD *)this + 1);
            v70 = *((_QWORD *)this + 2);
            while (v69 < v70 && !*((_BYTE *)this + 24))
            {
              v72 = *(char **)(a1 + 64);
              v71 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v72 >= v71)
              {
                v74 = (char *)*v8;
                v75 = (v72 - (_BYTE *)*v8) >> 2;
                v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 62)
                  goto LABEL_210;
                v77 = v71 - (_QWORD)v74;
                if (v77 >> 1 > v76)
                  v76 = v77 >> 1;
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v79 = (char *)sub_21B796CD8(v129, v78);
                  v74 = *(char **)(a1 + 56);
                  v72 = *(char **)(a1 + 64);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[4 * v75];
                *(_DWORD *)v80 = 0;
                v73 = v80 + 4;
                while (v72 != v74)
                {
                  v81 = *((_DWORD *)v72 - 1);
                  v72 -= 4;
                  *((_DWORD *)v80 - 1) = v81;
                  v80 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v80;
                *(_QWORD *)(a1 + 64) = v73;
                *(_QWORD *)(a1 + 72) = &v79[4 * v78];
                if (v74)
                  operator delete(v74);
              }
              else
              {
                *(_DWORD *)v72 = 0;
                v73 = v72 + 4;
              }
              *(_QWORD *)(a1 + 64) = v73;
              v82 = *((_QWORD *)this + 1);
              if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v73 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
              v70 = *((_QWORD *)this + 2);
              v69 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v69;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            v91 = *(char **)(a1 + 64);
            v90 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v91 >= v90)
            {
              v110 = (char *)*v8;
              v111 = (v91 - (_BYTE *)*v8) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
LABEL_210:
                sub_21B796A0C();
              v113 = v90 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_21B796CD8(v129, v114);
                v110 = *(char **)(a1 + 56);
                v91 = *(char **)(a1 + 64);
              }
              else
              {
                v115 = 0;
              }
              v122 = &v115[4 * v111];
              *(_DWORD *)v122 = 0;
              v85 = v122 + 4;
              while (v91 != v110)
              {
                v123 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v122;
              *(_QWORD *)(a1 + 64) = v85;
              *(_QWORD *)(a1 + 72) = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v91 = 0;
              v85 = v91 + 4;
            }
            *(_QWORD *)(a1 + 64) = v85;
LABEL_194:
            v124 = *((_QWORD *)this + 1);
            if (v124 <= 0xFFFFFFFFFFFFFFFBLL && v124 + 4 <= *((_QWORD *)this + 2))
            {
              *(v85 - 1) = *(_DWORD *)(*(_QWORD *)this + v124);
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_198:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_196:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_199:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_199;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B837E78(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 112) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 104));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = (float *)v3[1];
  v8 = (float *)v3[2];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = (float *)v3[10];
  v11 = (float *)v3[11];
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v14 = (float *)v3[7];
  v13 = (float *)v3[8];
  while (v14 != v13)
  {
    v15 = *v14++;
    result = PB::Writer::write(this, v15);
  }
  return result;
}

uint64_t sub_21B837F38(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38598;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B837F50(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B837F74(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)result = &off_24DF38598;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 44) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_BYTE *)(a2 + 42);
  v3 |= 0x40u;
  *(_BYTE *)(result + 44) = v3;
  *(_BYTE *)(result + 42) = v8;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_16:
    v10 = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_BYTE *)(result + 41) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_BYTE *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_BYTE *)(result + 40) = v9;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B838054(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "exitingSaturation");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extendedSaturation");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "shiftInSaturation");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timeSinceLastRemag");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeSinceLastRemagTrigger");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 8) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "triggerCount");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B838164(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_97;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_85:
                    v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_86:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_90:
                    v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_91:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_95:
                    v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_96:
              *(_QWORD *)(a1 + 32) = v37;
LABEL_97:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 42) = v40;
              goto LABEL_97;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 40) = v42;
              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 41) = v44;
              goto LABEL_97;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8386A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B838790(uint64_t result)
{
  *(_QWORD *)result = &off_24DF385D0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B8387A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8387CC(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)result = &off_24DF385D0;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_BYTE *)(a2 + 15);
    v3 = 128;
    *(_WORD *)(result + 20) = 128;
    *(_BYTE *)(result + 15) = v4;
    v2 = *(_WORD *)(a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 9);
    v3 |= 2u;
    *(_WORD *)(result + 20) = v3;
    *(_BYTE *)(result + 9) = v5;
    v2 = *(_WORD *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_BYTE *)(a2 + 11);
    v3 |= 8u;
    *(_WORD *)(result + 20) = v3;
    *(_BYTE *)(result + 11) = v6;
    v2 = *(_WORD *)(a2 + 20);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 13);
  v3 |= 0x20u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 13) = v7;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_BYTE *)(a2 + 14);
  v3 |= 0x40u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 14) = v8;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_BYTE *)(a2 + 12);
  v3 |= 0x10u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 12) = v9;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 16);
  v3 |= 0x100u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 16) = v10;
  v2 = *(_WORD *)(a2 + 20);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      return result;
LABEL_20:
    v12 = *(_BYTE *)(a2 + 8);
    *(_WORD *)(result + 20) = v3 | 1;
    *(_BYTE *)(result + 8) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_BYTE *)(a2 + 10);
  v3 |= 4u;
  *(_WORD *)(result + 20) = v3;
  *(_BYTE *)(result + 10) = v11;
  if ((*(_WORD *)(a2 + 20) & 1) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B8388E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "isAppleMapsRoutingActive");
    v5 = *(_WORD *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBicycleRouting");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isBicycleRoutingActive");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isPedestrianRouting");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isPedestrianRoutingActive");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isStepTypeBicycle");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "isVehicularRouting");
    if ((*(_WORD *)(a1 + 20) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isStepTypePedestrian");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "isVehicularRoutingActive");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B838A34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 20) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_60;
            case 2u:
              *(_WORD *)(a1 + 20) |= 2u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 9) = v24;
              goto LABEL_60;
            case 3u:
              *(_WORD *)(a1 + 20) |= 8u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 11) = v26;
              goto LABEL_60;
            case 4u:
              *(_WORD *)(a1 + 20) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 13) = v28;
              goto LABEL_60;
            case 5u:
              *(_WORD *)(a1 + 20) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 14) = v30;
              goto LABEL_60;
            case 6u:
              *(_WORD *)(a1 + 20) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 12) = v32;
              goto LABEL_60;
            case 7u:
              *(_WORD *)(a1 + 20) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 16) = v34;
              goto LABEL_60;
            case 8u:
              *(_WORD *)(a1 + 20) |= 4u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 10) = v36;
              goto LABEL_60;
            case 9u:
              *(_WORD *)(a1 + 20) |= 1u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 8) = v38;
              goto LABEL_60;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
LABEL_60:
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B838DFC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 20);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_18:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B838F1C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38608;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B838F34(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B838F58(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;
  int v5;

  *(_QWORD *)a1 = &off_24DF38608;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(float *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        return result;
LABEL_12:
      result = *(float *)(a2 + 12);
      *(_BYTE *)(a1 + 28) = v3 | 2;
      *(float *)(a1 + 12) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v5 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 28) = v3;
  *(_DWORD *)(a1 + 24) = v5;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B839000(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "mets", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "metsDiff", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "metsWR", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "metsHR", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "source");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8390D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_42:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B839418(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 12));
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12));
  return result;
}

_QWORD *sub_21B8394C8(_QWORD *result)
{
  *result = &off_24DF38640;
  result[23] = 0;
  return result;
}

void sub_21B8394E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B839504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  int v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  char v26;
  int v27;

  *(_QWORD *)a1 = &off_24DF38640;
  *(_QWORD *)(a1 + 184) = 0;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_QWORD *)(a1 + 184) = 4;
    *(_QWORD *)(a1 + 24) = v4;
    v2 = *(_QWORD *)(a2 + 184);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    v3 |= 1uLL;
    *(_QWORD *)(a1 + 184) = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_QWORD *)(a2 + 184);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x200000uLL;
    *(_QWORD *)(a1 + 184) = v3;
    *(_DWORD *)(a1 + 104) = v5;
    v2 = *(_QWORD *)(a2 + 184);
    if ((v2 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000000000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 164);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 164) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v6 = *(_BYTE *)(a2 + 181);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 181) = v6;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v7 = *(_BYTE *)(a2 + 177);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 177) = v7;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v8 = *(_BYTE *)(a2 + 180);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 180) = v8;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 76) = v9;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v4 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v10 = *(_BYTE *)(a2 + 176);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 176) = v10;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v11 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 72) = v11;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v12 = *(_DWORD *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 152) = v12;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v13 = *(_DWORD *)(a2 + 172);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 172) = v13;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x100000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v14 = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 100) = v14;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v15 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 88) = v15;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v16 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 84) = v16;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v17 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 92) = v17;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v18 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 96) = v18;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v19 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 80) = v19;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v20 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 60) = v20;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v21 = *(_DWORD *)(a2 + 168);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 168) = v21;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x1000) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v22 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 68) = v22;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v23 = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 136) = v23;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v24 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 36) = v24;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *(_DWORD *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 156) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v25 = *(_BYTE *)(a2 + 178);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 178) = v25;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *(_DWORD *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 160) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v26 = *(_BYTE *)(a2 + 179);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_BYTE *)(a1 + 179) = v26;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x20) == 0)
  {
LABEL_36:
    if ((v2 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v27 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 40) = v27;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80) == 0)
  {
LABEL_37:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x40) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40) == 0)
  {
LABEL_41:
    if ((v2 & 0x100) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x100) == 0)
  {
LABEL_42:
    if ((v2 & 0x200) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x200) == 0)
  {
LABEL_43:
    if ((v2 & 0x400000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x400000) == 0)
  {
LABEL_44:
    if ((v2 & 0x800000) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x800000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  v2 = *(_QWORD *)(a2 + 184);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x100000000) == 0)
      return *(float *)&v4;
    goto LABEL_92;
  }
LABEL_91:
  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 184) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  if ((*(_QWORD *)(a2 + 184) & 0x100000000) == 0)
    return *(float *)&v4;
LABEL_92:
  LODWORD(v4) = *(_DWORD *)(a2 + 148);
  *(_QWORD *)(a1 + 184) = v3 | 0x100000000;
  *(_DWORD *)(a1 + 148) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B839A0C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentage", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 184);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "asymmetryPercentageRejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "boundaryType");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "cycleTimeEntropy", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "cycleTimeMean", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "cycleTimePoincareSD1", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "cycleTimePoincareSD2", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "deviceSide");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "doubleSupportPercentageIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "doubleSupportPercentageRejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "invalidGradePercentage", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "isHeightSet");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "isWeightSet");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "numGaitMetrics");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "stepCount");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "stepLengthEntropy", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "stepLengthIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "stepLengthPoincareSD1", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "stepLengthPoincareSD2", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "stepLengthRejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "terminationReason");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(this, "walkingSpeedRejectionStatus");
    if ((*(_QWORD *)(a1 + 184) & 0x4000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(this, "walkingSpeedIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v5 & 0x4000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B839FDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  BOOL v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  unint64_t v214;
  char v215;
  char v216;
  unsigned int v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 184) |= 4uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_62;
        case 2u:
          *(_QWORD *)(a1 + 184) |= 1uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_62;
        case 3u:
          *(_QWORD *)(a1 + 184) |= 0x200000uLL;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_364;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }
          v204 = 0;
          v205 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v206 = v23 + 1;
              v207 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                v23 = v206;
                v14 = v205++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_364:
          *(_DWORD *)(a1 + 104) = v28;
          goto LABEL_356;
        case 4u:
          *(_QWORD *)(a1 + 184) |= 0x1000000000uLL;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_354;
        case 5u:
          *(_QWORD *)(a1 + 184) |= 0x100000000000uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 >= *((_QWORD *)this + 2))
          {
            v35 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v33 = v32 + 1;
            v34 = *(unsigned __int8 *)(*(_QWORD *)this + v32);
            *((_QWORD *)this + 1) = v33;
            v35 = v34 != 0;
          }
          *(_BYTE *)(a1 + 181) = v35;
          goto LABEL_356;
        case 6u:
          *(_QWORD *)(a1 + 184) |= 0x800uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_354;
        case 7u:
          *(_QWORD *)(a1 + 184) |= 0x10000000000uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 >= *((_QWORD *)this + 2))
          {
            v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)this + v37);
            *((_QWORD *)this + 1) = v38;
            v40 = v39 != 0;
          }
          *(_BYTE *)(a1 + 177) = v40;
          goto LABEL_356;
        case 8u:
          *(_QWORD *)(a1 + 184) |= 0x2000000uLL;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_354;
        case 9u:
          *(_QWORD *)(a1 + 184) |= 0x80000000000uLL;
          v42 = *((_QWORD *)this + 1);
          if (v42 >= *((_QWORD *)this + 2))
          {
            v45 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v43 = v42 + 1;
            v44 = *(unsigned __int8 *)(*(_QWORD *)this + v42);
            *((_QWORD *)this + 1) = v43;
            v45 = v44 != 0;
          }
          *(_BYTE *)(a1 + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *(_QWORD *)(a1 + 184) |= 0x4000uLL;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_368;
              v49 += 7;
              v46 = v52;
              v14 = v50++ > 8;
            }
            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }
          v208 = 0;
          v209 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v210 = v46 + 1;
              v211 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                v46 = v210;
                v14 = v209++ > 8;
                if (v14)
                  goto LABEL_241;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v51) = 0;
            }
            break;
          }
LABEL_368:
          *(_DWORD *)(a1 + 76) = v51;
          goto LABEL_356;
        case 0xBu:
          *(_QWORD *)(a1 + 184) |= 2uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v54);
LABEL_62:
          v55 = *((_QWORD *)this + 1) + 8;
          goto LABEL_355;
        case 0xCu:
          *(_QWORD *)(a1 + 184) |= 8uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_354;
        case 0xDu:
          *(_QWORD *)(a1 + 184) |= 0x8000000000uLL;
          v57 = *((_QWORD *)this + 1);
          if (v57 >= *((_QWORD *)this + 2))
          {
            v60 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v58 = v57 + 1;
            v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
            *((_QWORD *)this + 1) = v58;
            v60 = v59 != 0;
          }
          *(_BYTE *)(a1 + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *(_QWORD *)(a1 + 184) |= 0x2000uLL;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_372;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }
          v212 = 0;
          v213 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v214 = v61 + 1;
              v215 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                v61 = v214;
                v14 = v213++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_372:
          *(_DWORD *)(a1 + 72) = v66;
          goto LABEL_356;
        case 0xFu:
          *(_QWORD *)(a1 + 184) |= 0x200000000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_376;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }
          v216 = 0;
          v217 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v218 = v69 + 1;
              v219 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                v69 = v218;
                v14 = v217++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 152) = v74;
          goto LABEL_356;
        case 0x10u:
          *(_QWORD *)(a1 + 184) |= 0x4000000000uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_380;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v82) = 0;
            goto LABEL_380;
          }
          v220 = 0;
          v221 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v222 = v77 + 1;
              v223 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v222;
              v82 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                v77 = v222;
                v14 = v221++ > 8;
                if (v14)
                  goto LABEL_264;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 172) = v82;
          goto LABEL_356;
        case 0x11u:
          *(_QWORD *)(a1 + 184) |= 0x100000uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_384;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }
          v224 = 0;
          v225 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v226 = v85 + 1;
              v227 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v85 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 100) = v90;
          goto LABEL_356;
        case 0x12u:
          *(_QWORD *)(a1 + 184) |= 0x20000uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_388;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_278:
            LODWORD(v98) = 0;
            goto LABEL_388;
          }
          v228 = 0;
          v229 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v230 = v93 + 1;
              v231 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v230;
              v98 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v93 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_278;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 88) = v98;
          goto LABEL_356;
        case 0x13u:
          *(_QWORD *)(a1 + 184) |= 0x10000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_392;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }
          v232 = 0;
          v233 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v234 = v101 + 1;
              v235 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v101 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_285;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 84) = v106;
          goto LABEL_356;
        case 0x14u:
          *(_QWORD *)(a1 + 184) |= 0x40000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_396;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }
          v236 = 0;
          v237 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v238 = v109 + 1;
              v239 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v109 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_292;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 92) = v114;
          goto LABEL_356;
        case 0x15u:
          *(_QWORD *)(a1 + 184) |= 0x80000uLL;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_400;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }
          v240 = 0;
          v241 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v242 = v117 + 1;
              v243 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v117 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 96) = v122;
          goto LABEL_356;
        case 0x16u:
          *(_QWORD *)(a1 + 184) |= 0x8000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_404;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }
          v244 = 0;
          v245 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v246 = v125 + 1;
              v247 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v125 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 80) = v130;
          goto LABEL_356;
        case 0x17u:
          *(_QWORD *)(a1 + 184) |= 0x400uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_408;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v138) = 0;
            goto LABEL_408;
          }
          v248 = 0;
          v249 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v250 = v133 + 1;
              v251 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v133 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 60) = v138;
          goto LABEL_356;
        case 0x18u:
          *(_QWORD *)(a1 + 184) |= 0x2000000000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_412;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }
          v252 = 0;
          v253 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v254 = v141 + 1;
              v255 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v141 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 168) = v146;
          goto LABEL_356;
        case 0x19u:
          *(_QWORD *)(a1 + 184) |= 0x1000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_416;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }
          v256 = 0;
          v257 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v258 = v149 + 1;
              v259 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v149 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v154;
          goto LABEL_356;
        case 0x1Au:
          *(_QWORD *)(a1 + 184) |= 0x20000000uLL;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_420;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }
          v260 = 0;
          v261 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v262 = v157 + 1;
              v263 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v157 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 136) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *(_QWORD *)(a1 + 184) |= 0x10uLL;
          v165 = *((_QWORD *)this + 1);
          v166 = *((_QWORD *)this + 2);
          v167 = *(_QWORD *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              v171 = v165 + 1;
              *((_QWORD *)this + 1) = v165 + 1;
              v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0)
                goto LABEL_424;
              v168 += 7;
              v165 = v171;
              v14 = v169++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }
          v264 = 0;
          v265 = 0;
          v170 = 0;
          if (v166 <= v165)
            v166 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v266 = v165 + 1;
              v267 = *(_BYTE *)(v167 + v165);
              *((_QWORD *)this + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v165 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v170) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 36) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *(_QWORD *)(a1 + 184) |= 0x400000000uLL;
          v173 = *((_QWORD *)this + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v173);
          goto LABEL_354;
        case 0x1Du:
          *(_QWORD *)(a1 + 184) |= 0x20000000000uLL;
          v174 = *((_QWORD *)this + 1);
          if (v174 >= *((_QWORD *)this + 2))
          {
            v177 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v175 = v174 + 1;
            v176 = *(unsigned __int8 *)(*(_QWORD *)this + v174);
            *((_QWORD *)this + 1) = v175;
            v177 = v176 != 0;
          }
          *(_BYTE *)(a1 + 178) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *(_QWORD *)(a1 + 184) |= 0x800000000uLL;
          v178 = *((_QWORD *)this + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v178);
          goto LABEL_354;
        case 0x1Fu:
          *(_QWORD *)(a1 + 184) |= 0x40000000000uLL;
          v179 = *((_QWORD *)this + 1);
          if (v179 >= *((_QWORD *)this + 2))
          {
            v182 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v180 = v179 + 1;
            v181 = *(unsigned __int8 *)(*(_QWORD *)this + v179);
            *((_QWORD *)this + 1) = v180;
            v182 = v181 != 0;
          }
          *(_BYTE *)(a1 + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *(_QWORD *)(a1 + 184) |= 0x20uLL;
          v183 = *((_QWORD *)this + 1);
          v184 = *((_QWORD *)this + 2);
          v185 = *(_QWORD *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)this + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_428;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_352:
            LODWORD(v188) = 0;
            goto LABEL_428;
          }
          v268 = 0;
          v269 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)this + 1);
          break;
        case 0x21u:
          *(_QWORD *)(a1 + 184) |= 0x80uLL;
          v191 = *((_QWORD *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v191);
          goto LABEL_354;
        case 0x22u:
          *(_QWORD *)(a1 + 184) |= 0x4000000uLL;
          v192 = *((_QWORD *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v192);
          goto LABEL_354;
        case 0x23u:
          *(_QWORD *)(a1 + 184) |= 0x8000000uLL;
          v193 = *((_QWORD *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v193);
          goto LABEL_354;
        case 0x24u:
          *(_QWORD *)(a1 + 184) |= 0x10000000uLL;
          v194 = *((_QWORD *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v194);
          goto LABEL_354;
        case 0x25u:
          *(_QWORD *)(a1 + 184) |= 0x40uLL;
          v195 = *((_QWORD *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v195);
          goto LABEL_354;
        case 0x26u:
          *(_QWORD *)(a1 + 184) |= 0x100uLL;
          v196 = *((_QWORD *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v196);
          goto LABEL_354;
        case 0x27u:
          *(_QWORD *)(a1 + 184) |= 0x200uLL;
          v197 = *((_QWORD *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v197);
          goto LABEL_354;
        case 0x28u:
          *(_QWORD *)(a1 + 184) |= 0x400000uLL;
          v198 = *((_QWORD *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v198);
          goto LABEL_354;
        case 0x29u:
          *(_QWORD *)(a1 + 184) |= 0x800000uLL;
          v199 = *((_QWORD *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v199);
          goto LABEL_354;
        case 0x2Au:
          *(_QWORD *)(a1 + 184) |= 0x1000000uLL;
          v200 = *((_QWORD *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v200);
          goto LABEL_354;
        case 0x2Bu:
          *(_QWORD *)(a1 + 184) |= 0x40000000uLL;
          v201 = *((_QWORD *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v201);
          goto LABEL_354;
        case 0x2Cu:
          *(_QWORD *)(a1 + 184) |= 0x80000000uLL;
          v202 = *((_QWORD *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v202);
          goto LABEL_354;
        case 0x2Du:
          *(_QWORD *)(a1 + 184) |= 0x100000000uLL;
          v203 = *((_QWORD *)this + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v203);
LABEL_354:
            v55 = *((_QWORD *)this + 1) + 4;
LABEL_355:
            *((_QWORD *)this + 1) = v55;
          }
          else
          {
LABEL_221:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_356;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_356;
      }
      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v188) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_428;
        }
        v270 = v183 + 1;
        v271 = *(_BYTE *)(v185 + v183);
        *((_QWORD *)this + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0)
          break;
        v268 += 7;
        v183 = v270;
        v14 = v269++ > 8;
        if (v14)
          goto LABEL_352;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v188) = 0;
LABEL_428:
      *(_DWORD *)(a1 + 40) = v188;
LABEL_356:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B83B744(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 184);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_QWORD *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 148));
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  if ((*(_QWORD *)(v3 + 184) & 0x100000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 148));
  return result;
}

uint64_t sub_21B83BC54(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38678;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B83BC6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B83BC90(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF38678;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 36) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(_BYTE *)(a2 + 40) & 2) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = v3 | 2;
  *(_DWORD *)(a1 + 16) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B83BD70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbability", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83BE80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B83C18C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_21B83C274(_QWORD *result)
{
  *result = &off_24DF386B0;
  result[1] = 0;
  return result;
}

void sub_21B83C284(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF386B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B83C2C4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF386B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B83C318(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF386B0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B3598(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B83C394(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83C3E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7B34B8(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B83C5AC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B83C5C8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF386E8;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_21B83C5E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B83C604(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;

  *(_QWORD *)result = &off_24DF386E8;
  *(_DWORD *)(result + 116) = 0;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) != 0)
  {
    v4 = *(_DWORD *)(a2 + 92);
    v3 = 0x10000;
    *(_DWORD *)(result + 116) = 0x10000;
    *(_DWORD *)(result + 92) = v4;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 64);
    v3 |= 0x200u;
    *(_DWORD *)(result + 116) = v3;
    *(_DWORD *)(result + 64) = v5;
    v2 = *(_DWORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(result + 116) = v3;
    *(_DWORD *)(result + 48) = v6;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 68) = v7;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  v8 = *(_BYTE *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 108) = v8;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  v9 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 88) = v9;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v10 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 24) = v10;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v11 = *(_BYTE *)(a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 109) = v11;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 60) = v12;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  v13 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 8) = v13;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  v14 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 16) = v14;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v15 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 76) = v15;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  v16 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 72) = v16;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  v17 = *(_BYTE *)(a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 113) = v17;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  v18 = *(_BYTE *)(a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v18;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  v19 = *(_BYTE *)(a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 110) = v19;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v20 = *(_BYTE *)(a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 114) = v20;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  v21 = *(_BYTE *)(a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 111) = v21;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  v22 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 100) = v22;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  v23 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 56) = v23;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  v24 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 52) = v24;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v25 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 84) = v25;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  v26 = *(_DWORD *)(a2 + 104);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 104) = v26;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  v27 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 32) = v27;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  v28 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 40) = v28;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0)
      return result;
LABEL_56:
    v30 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(result + 116) = v3 | 0x2000;
    *(_DWORD *)(result + 80) = v30;
    return result;
  }
LABEL_55:
  v29 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 96) = v29;
  if ((*(_DWORD *)(a2 + 116) & 0x2000) != 0)
    goto LABEL_56;
  return result;
}

uint64_t sub_21B83C914(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "confidence");
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "estExitTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "exitState");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isStanding");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isVehicleConnected");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "mountedConfidence");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "mountedState");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rawConfidence");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "rawType");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "source");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "type");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "typeYouth");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "vehicularBasebandHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "vehicularBtHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "vehicularConfidence");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "vehicularGpsHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "vehicularMotionHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "vehicularWifiHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(this, "workoutDetectionType");
    if ((*(_DWORD *)(a1 + 116) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(this, "workoutDetectionTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 0x10) != 0)
LABEL_28:
    PB::TextFormatter::format(this, "workoutEscalationTime");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83CCA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 116) |= 0x10000u;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v154 = 0;
            v155 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_251;
              }
              v156 = v20 + 1;
              v157 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_251;
              }
              v154 += 7;
              v20 = v156;
              v14 = v155++ > 8;
            }
            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_153;
            }
          }
LABEL_251:
          *(_DWORD *)(a1 + 92) = v25;
          goto LABEL_296;
        case 2u:
          *(_DWORD *)(a1 + 116) |= 0x200u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_255;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }
          v158 = 0;
          v159 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v160 = v29 + 1;
              v161 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                v29 = v160;
                v14 = v159++ > 8;
                if (v14)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 64) = v34;
          goto LABEL_296;
        case 3u:
          *(_DWORD *)(a1 + 116) |= 0x20u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_259;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_167:
            LODWORD(v42) = 0;
            goto LABEL_259;
          }
          v162 = 0;
          v163 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v164 = v37 + 1;
              v165 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v164;
              v42 |= (unint64_t)(v165 & 0x7F) << v162;
              if (v165 < 0)
              {
                v162 += 7;
                v37 = v164;
                v14 = v163++ > 8;
                if (v14)
                  goto LABEL_167;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_259:
          *(_DWORD *)(a1 + 48) = v42;
          goto LABEL_296;
        case 4u:
          *(_DWORD *)(a1 + 116) |= 0x400u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_263;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_174:
            LODWORD(v50) = 0;
            goto LABEL_263;
          }
          v166 = 0;
          v167 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v168 = v45 + 1;
              v169 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v168;
              v50 |= (unint64_t)(v169 & 0x7F) << v166;
              if (v169 < 0)
              {
                v166 += 7;
                v45 = v168;
                v14 = v167++ > 8;
                if (v14)
                  goto LABEL_174;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_263:
          *(_DWORD *)(a1 + 68) = v50;
          goto LABEL_296;
        case 5u:
          *(_DWORD *)(a1 + 116) |= 0x100000u;
          v53 = *((_QWORD *)this + 1);
          if (v53 >= *((_QWORD *)this + 2))
          {
            v56 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
            *((_QWORD *)this + 1) = v54;
            v56 = v55 != 0;
          }
          *(_BYTE *)(a1 + 108) = v56;
          goto LABEL_296;
        case 6u:
          *(_DWORD *)(a1 + 116) |= 0x8000u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 116) |= 4u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v58);
          goto LABEL_246;
        case 8u:
          *(_DWORD *)(a1 + 116) |= 0x200000u;
          v59 = *((_QWORD *)this + 1);
          if (v59 >= *((_QWORD *)this + 2))
          {
            v62 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v60 = v59 + 1;
            v61 = *(unsigned __int8 *)(*(_QWORD *)this + v59);
            *((_QWORD *)this + 1) = v60;
            v62 = v61 != 0;
          }
          *(_BYTE *)(a1 + 109) = v62;
          goto LABEL_296;
        case 9u:
          *(_DWORD *)(a1 + 116) |= 0x100u;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          v65 = *(_QWORD *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_267;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v68) = 0;
            goto LABEL_267;
          }
          v170 = 0;
          v171 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v172 = v63 + 1;
              v173 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)this + 1) = v172;
              v68 |= (unint64_t)(v173 & 0x7F) << v170;
              if (v173 < 0)
              {
                v170 += 7;
                v63 = v172;
                v14 = v171++ > 8;
                if (v14)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v68) = 0;
            }
            break;
          }
LABEL_267:
          *(_DWORD *)(a1 + 60) = v68;
          goto LABEL_296;
        case 0xAu:
          *(_DWORD *)(a1 + 116) |= 1u;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v71);
          goto LABEL_246;
        case 0xBu:
          *(_DWORD *)(a1 + 116) |= 2u;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v72);
          goto LABEL_246;
        case 0xCu:
          *(_DWORD *)(a1 + 116) |= 0x1000u;
          v73 = *((_QWORD *)this + 1);
          v74 = *((_QWORD *)this + 2);
          v75 = *(_QWORD *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)this + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_271;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_192:
            LODWORD(v78) = 0;
            goto LABEL_271;
          }
          v174 = 0;
          v175 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v176 = v73 + 1;
              v177 = *(_BYTE *)(v75 + v73);
              *((_QWORD *)this + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                v73 = v176;
                v14 = v175++ > 8;
                if (v14)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v78) = 0;
            }
            break;
          }
LABEL_271:
          *(_DWORD *)(a1 + 76) = v78;
          goto LABEL_296;
        case 0xDu:
          *(_DWORD *)(a1 + 116) |= 0x800u;
          v81 = *((_QWORD *)this + 1);
          v82 = *((_QWORD *)this + 2);
          v83 = *(_QWORD *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            do
            {
              v87 = v81 + 1;
              *((_QWORD *)this + 1) = v81 + 1;
              v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0)
                goto LABEL_275;
              v84 += 7;
              v81 = v87;
              v14 = v85++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }
          v178 = 0;
          v179 = 0;
          v86 = 0;
          if (v82 <= v81)
            v82 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v180 = v81 + 1;
              v181 = *(_BYTE *)(v83 + v81);
              *((_QWORD *)this + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                v81 = v180;
                v14 = v179++ > 8;
                if (v14)
                  goto LABEL_199;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v86) = 0;
            }
            break;
          }
LABEL_275:
          *(_DWORD *)(a1 + 72) = v86;
          goto LABEL_296;
        case 0xEu:
          *(_DWORD *)(a1 + 116) |= 0x2000000u;
          v89 = *((_QWORD *)this + 1);
          if (v89 >= *((_QWORD *)this + 2))
          {
            v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) = v90;
            v92 = v91 != 0;
          }
          *(_BYTE *)(a1 + 113) = v92;
          goto LABEL_296;
        case 0xFu:
          *(_DWORD *)(a1 + 116) |= 0x1000000u;
          v93 = *((_QWORD *)this + 1);
          if (v93 >= *((_QWORD *)this + 2))
          {
            v96 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v94 = v93 + 1;
            v95 = *(unsigned __int8 *)(*(_QWORD *)this + v93);
            *((_QWORD *)this + 1) = v94;
            v96 = v95 != 0;
          }
          *(_BYTE *)(a1 + 112) = v96;
          goto LABEL_296;
        case 0x10u:
          *(_DWORD *)(a1 + 116) |= 0x400000u;
          v97 = *((_QWORD *)this + 1);
          if (v97 >= *((_QWORD *)this + 2))
          {
            v100 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v98 = v97 + 1;
            v99 = *(unsigned __int8 *)(*(_QWORD *)this + v97);
            *((_QWORD *)this + 1) = v98;
            v100 = v99 != 0;
          }
          *(_BYTE *)(a1 + 110) = v100;
          goto LABEL_296;
        case 0x11u:
          *(_DWORD *)(a1 + 116) |= 0x4000000u;
          v101 = *((_QWORD *)this + 1);
          if (v101 >= *((_QWORD *)this + 2))
          {
            v104 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v102 = v101 + 1;
            v103 = *(unsigned __int8 *)(*(_QWORD *)this + v101);
            *((_QWORD *)this + 1) = v102;
            v104 = v103 != 0;
          }
          *(_BYTE *)(a1 + 114) = v104;
          goto LABEL_296;
        case 0x12u:
          *(_DWORD *)(a1 + 116) |= 0x800000u;
          v105 = *((_QWORD *)this + 1);
          if (v105 >= *((_QWORD *)this + 2))
          {
            v108 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v106 = v105 + 1;
            v107 = *(unsigned __int8 *)(*(_QWORD *)this + v105);
            *((_QWORD *)this + 1) = v106;
            v108 = v107 != 0;
          }
          *(_BYTE *)(a1 + 111) = v108;
          goto LABEL_296;
        case 0x13u:
          *(_DWORD *)(a1 + 116) |= 0x40000u;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_279;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_216:
            LODWORD(v114) = 0;
            goto LABEL_279;
          }
          v182 = 0;
          v183 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v184 = v109 + 1;
              v185 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v184;
              v114 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                v109 = v184;
                v14 = v183++ > 8;
                if (v14)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_279:
          *(_DWORD *)(a1 + 100) = v114;
          goto LABEL_296;
        case 0x14u:
          *(_DWORD *)(a1 + 116) |= 0x80u;
          v117 = *((_QWORD *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v117);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 116) |= 0x40u;
          v118 = *((_QWORD *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v118);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 116) |= 0x4000u;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v119);
LABEL_115:
          v120 = *((_QWORD *)this + 1) + 4;
          goto LABEL_247;
        case 0x17u:
          *(_DWORD *)(a1 + 116) |= 0x80000u;
          v121 = *((_QWORD *)this + 1);
          v122 = *((_QWORD *)this + 2);
          v123 = *(_QWORD *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            v124 = 0;
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = v121 + 1;
              *((_QWORD *)this + 1) = v121 + 1;
              v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0)
                goto LABEL_283;
              v124 += 7;
              v121 = v127;
              v14 = v125++ > 8;
            }
            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }
          v186 = 0;
          v187 = 0;
          v126 = 0;
          if (v122 <= v121)
            v122 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v188 = v121 + 1;
              v189 = *(_BYTE *)(v123 + v121);
              *((_QWORD *)this + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                v121 = v188;
                v14 = v187++ > 8;
                if (v14)
                  goto LABEL_223;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v126) = 0;
            }
            break;
          }
LABEL_283:
          *(_DWORD *)(a1 + 104) = v126;
          goto LABEL_296;
        case 0x18u:
          *(_DWORD *)(a1 + 116) |= 8u;
          v129 = *((_QWORD *)this + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v129);
LABEL_246:
            v120 = *((_QWORD *)this + 1) + 8;
LABEL_247:
            *((_QWORD *)this + 1) = v120;
          }
          else
          {
LABEL_125:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_296;
        case 0x19u:
          *(_DWORD *)(a1 + 116) |= 0x10u;
          v130 = *((_QWORD *)this + 1);
          v131 = *((_QWORD *)this + 2);
          v132 = *(_QWORD *)this;
          if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            do
            {
              v136 = v130 + 1;
              *((_QWORD *)this + 1) = v130 + 1;
              v137 = *(_BYTE *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0)
                goto LABEL_287;
              v133 += 7;
              v130 = v136;
              v14 = v134++ > 8;
            }
            while (!v14);
LABEL_230:
            v135 = 0;
            goto LABEL_287;
          }
          v190 = 0;
          v191 = 0;
          v135 = 0;
          if (v131 <= v130)
            v131 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v131 == v130)
            {
              v135 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v192 = v130 + 1;
              v193 = *(_BYTE *)(v132 + v130);
              *((_QWORD *)this + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                v130 = v192;
                v14 = v191++ > 8;
                if (v14)
                  goto LABEL_230;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v135 = 0;
            }
            break;
          }
LABEL_287:
          *(_QWORD *)(a1 + 40) = v135;
          goto LABEL_296;
        case 0x1Au:
          *(_DWORD *)(a1 + 116) |= 0x20000u;
          v138 = *((_QWORD *)this + 1);
          v139 = *((_QWORD *)this + 2);
          v140 = *(_QWORD *)this;
          if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
          {
            v141 = 0;
            v142 = 0;
            v143 = 0;
            do
            {
              v144 = v138 + 1;
              *((_QWORD *)this + 1) = v138 + 1;
              v145 = *(_BYTE *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0)
                goto LABEL_291;
              v141 += 7;
              v138 = v144;
              v14 = v142++ > 8;
            }
            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }
          v194 = 0;
          v195 = 0;
          v143 = 0;
          if (v139 <= v138)
            v139 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v196 = v138 + 1;
              v197 = *(_BYTE *)(v140 + v138);
              *((_QWORD *)this + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                v138 = v196;
                v14 = v195++ > 8;
                if (v14)
                  goto LABEL_237;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v143) = 0;
            }
            break;
          }
LABEL_291:
          *(_DWORD *)(a1 + 96) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *(_DWORD *)(a1 + 116) |= 0x2000u;
          v146 = *((_QWORD *)this + 1);
          v147 = *((_QWORD *)this + 2);
          v148 = *(_QWORD *)this;
          if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
          {
            v149 = 0;
            v150 = 0;
            v151 = 0;
            do
            {
              v152 = v146 + 1;
              *((_QWORD *)this + 1) = v146 + 1;
              v153 = *(_BYTE *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0)
                goto LABEL_295;
              v149 += 7;
              v146 = v152;
              v14 = v150++ > 8;
            }
            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }
          v198 = 0;
          v199 = 0;
          v151 = 0;
          if (v147 <= v146)
            v147 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_296;
      }
      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_295;
        }
        v200 = v146 + 1;
        v201 = *(_BYTE *)(v148 + v146);
        *((_QWORD *)this + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0)
          break;
        v198 += 7;
        v146 = v200;
        v14 = v199++ > 8;
        if (v14)
          goto LABEL_244;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v151) = 0;
LABEL_295:
      *(_DWORD *)(a1 + 80) = v151;
LABEL_296:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B83DCBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x10000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_27:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 116) & 0x2000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B83DFD4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38720;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_21B83DFEC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B83E010(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;

  *(_QWORD *)result = &off_24DF38720;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 36) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 36);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 36) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_WORD *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 36);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 34) = v7;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_BYTE *)(a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 35) = v8;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_BYTE *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 32) = v9;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(result + 36) = v3;
  *(_BYTE *)(result + 33) = v10;
  v2 = *(_WORD *)(a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 36) = v3 | 4;
    *(_DWORD *)(result + 20) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 36) = v3;
  *(_DWORD *)(result + 16) = v11;
  if ((*(_WORD *)(a2 + 36) & 4) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B83E128(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineFrom");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineTo");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "workoutLocationType");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "workoutPause");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "workoutResume");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "workoutStop");
    if ((*(_WORD *)(a1 + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "workoutStart");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x10) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83E278(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_120;
            case 2u:
              *(_WORD *)(a1 + 36) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
                goto LABEL_103;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_104;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_120;
            case 3u:
              *(_WORD *)(a1 + 36) |= 8u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v59 = v26++;
                  v60 = *(_BYTE *)(v27 + v59);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v30) = 0;
                goto LABEL_108;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_109;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 24) = v30;
              goto LABEL_120;
            case 0xAu:
              *(_WORD *)(a1 + 36) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *(_WORD *)(a1 + 36) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *(_WORD *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *(_WORD *)(a1 + 36) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *(_WORD *)(a1 + 36) |= 2u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_113;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_114;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_120;
            case 0x16u:
              *(_WORD *)(a1 + 36) |= 4u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v67 = v47++;
                  v68 = *(_BYTE *)(v48 + v67);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_118;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_119;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 20) = v51;
LABEL_120:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_120;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B83E8EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 36) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B83EA0C(_QWORD *result)
{
  *result = &off_24DF38758;
  result[1] = 0;
  result[3] = 0;
  return result;
}

void sub_21B83EA20(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B83EA60(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38758;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B83EAB4(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_24DF38758;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
    v5 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = 2;
    *(_DWORD *)(a1 + 24) = v5;
    v4 = 3;
    if ((*(_BYTE *)(a2 + 28) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 1;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    v6 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v4;
    *(_QWORD *)(a1 + 16) = v6;
  }
LABEL_6:
  if (!*(_QWORD *)(a2 + 8))
    return a1;
  v7 = operator new();
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v7 = &off_24DF38E20;
  *(_DWORD *)(v7 + 20) = 0;
  v9 = *(_BYTE *)(v8 + 20);
  if ((v9 & 2) != 0)
  {
    v11 = *(_DWORD *)(v8 + 16);
    *(_BYTE *)(v7 + 20) = 2;
    *(_DWORD *)(v7 + 16) = v11;
    v10 = 3;
    if ((v9 & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v10 = 1;
  if ((*(_BYTE *)(v8 + 20) & 1) != 0)
  {
LABEL_11:
    v12 = *(_QWORD *)(v8 + 8);
    *(_BYTE *)(v7 + 20) = v10;
    *(_QWORD *)(v7 + 8) = v12;
  }
LABEL_12:
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

double sub_21B83EBB0(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38E20;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B83EC04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "impulse");
  v6 = *(_BYTE *)(a1 + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v6 = *(_BYTE *)(a1 + 28);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83EC8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v29 = (_DWORD *)operator new();
        *(_QWORD *)v29 = &off_24DF38E20;
        v29[5] = 0;
        v30 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v29;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v29 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v31 = *((_QWORD *)this + 1);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v31);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v33 = 0;
          v34 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v35 = v21 + 1;
            v36 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v35;
            v26 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v21 = v35;
            v14 = v34++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v26) = 0;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_47;
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B83EFAC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38E20;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_21B83EFC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 16));
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

uint64_t sub_21B83F02C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38790;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 180) = 0;
  return result;
}

void sub_21B83F044(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF38790;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B83F088(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF38790;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B83F0E0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;

  *(_QWORD *)a1 = &off_24DF38790;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x800) != 0)
  {
    v6 = *(_QWORD *)(a2 + 96);
    v5 = 2048;
    *(_DWORD *)(a1 + 180) = 2048;
    *(_QWORD *)(a1 + 96) = v6;
    v4 = *(_DWORD *)(a2 + 180);
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x40) != 0)
  {
LABEL_5:
    v7 = *(_QWORD *)(a2 + 56);
    v5 |= 0x40u;
    *(_DWORD *)(a1 + 180) = v5;
    *(_QWORD *)(a1 + 56) = v7;
    v4 = *(_DWORD *)(a2 + 180);
  }
LABEL_6:
  if ((v4 & 0x80) != 0)
  {
    v16 = *(_QWORD *)(a2 + 64);
    v5 |= 0x80u;
    *(_DWORD *)(a1 + 180) = v5;
    *(_QWORD *)(a1 + 64) = v16;
    v4 = *(_DWORD *)(a2 + 180);
    if ((v4 & 0x200) == 0)
    {
LABEL_8:
      if ((v4 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_40;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(a2 + 80);
  v5 |= 0x200u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 80) = v17;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  v18 = *(_QWORD *)(a2 + 88);
  v5 |= 0x400u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 88) = v18;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  v19 = *(_QWORD *)(a2 + 48);
  v5 |= 0x20u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 48) = v19;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  v20 = *(_QWORD *)(a2 + 16);
  v5 |= 2u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 16) = v20;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  v21 = *(_QWORD *)(a2 + 24);
  v5 |= 4u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 24) = v21;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  v22 = *(_QWORD *)(a2 + 8);
  v5 |= 1u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 8) = v22;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  v23 = *(_QWORD *)(a2 + 120);
  v5 |= 0x2000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 120) = v23;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  v24 = *(_DWORD *)(a2 + 164);
  v5 |= 0x800000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 164) = v24;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  v25 = *(_QWORD *)(a2 + 104);
  v5 |= 0x1000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 104) = v25;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  v26 = *(_DWORD *)(a2 + 168);
  v5 |= 0x1000000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 168) = v26;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  v27 = *(_DWORD *)(a2 + 172);
  v5 |= 0x2000000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 172) = v27;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  v28 = *(_DWORD *)(a2 + 140);
  v5 |= 0x20000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 140) = v28;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  v29 = *(_DWORD *)(a2 + 148);
  v5 |= 0x80000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 148) = v29;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  v30 = *(_DWORD *)(a2 + 144);
  v5 |= 0x40000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 144) = v30;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  v31 = *(_QWORD *)(a2 + 72);
  v5 |= 0x100u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 72) = v31;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  v32 = *(_QWORD *)(a2 + 32);
  v5 |= 8u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 32) = v32;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  v33 = *(_QWORD *)(a2 + 40);
  v5 |= 0x10u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_QWORD *)(a1 + 40) = v33;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  v34 = *(_DWORD *)(a2 + 156);
  v5 |= 0x200000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 156) = v34;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  v5 |= 0x4000000u;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = v5;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0)
      goto LABEL_28;
LABEL_59:
    v36 = *(_DWORD *)(a2 + 136);
    v5 |= 0x10000u;
    *(_DWORD *)(a1 + 180) = v5;
    *(_DWORD *)(a1 + 136) = v36;
    if ((*(_DWORD *)(a2 + 180) & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_58:
  v35 = *(_DWORD *)(a2 + 160);
  v5 |= 0x400000u;
  *(_DWORD *)(a1 + 180) = v5;
  *(_DWORD *)(a1 + 160) = v35;
  v4 = *(_DWORD *)(a2 + 180);
  if ((v4 & 0x10000) != 0)
    goto LABEL_59;
LABEL_28:
  if ((v4 & 0x100000) != 0)
  {
LABEL_29:
    v8 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 180) = v5 | 0x100000;
    *(_DWORD *)(a1 + 152) = v8;
  }
LABEL_30:
  if (*(_QWORD *)(a2 + 112))
  {
    v9 = operator new();
    v10 = sub_21B817650(v9, *(_QWORD *)(a2 + 112));
    v11 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *(_DWORD *)(a2 + 180);
  if ((v12 & 0x8000) != 0)
  {
    v13 = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a1 + 180) |= 0x8000u;
    *(_DWORD *)(a1 + 132) = v13;
    v12 = *(_DWORD *)(a2 + 180);
  }
  if ((v12 & 0x4000) != 0)
  {
    v14 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 180) |= 0x4000u;
    *(_DWORD *)(a1 + 128) = v14;
  }
  return a1;
}

uint64_t sub_21B83F458(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 180);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "demConfidence", *(float *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "demNumContiguousFlatPoints");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gnssModesOfOperation");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 140));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 148));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "notificationType");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "originDevice");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "roadClass");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_53:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 180) & 0x1000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 104));
LABEL_24:
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "trackRunData");
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(this, "type");
    v7 = *(_DWORD *)(a1 + 180);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_29;
      goto LABEL_57;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 168));
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0)
      goto LABEL_30;
LABEL_58:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 180) & 0x4000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_57:
  PB::TextFormatter::format(this, "undulationModel");
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000) != 0)
    goto LABEL_58;
LABEL_30:
  if ((v7 & 0x4000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "wayForm");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B83F808(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 180) |= 0x800u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v20);
        goto LABEL_92;
      case 2u:
        *(_DWORD *)(a1 + 180) |= 0x40u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v22);
        goto LABEL_92;
      case 3u:
        *(_DWORD *)(a1 + 180) |= 0x80u;
        v23 = *((_QWORD *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v23);
        goto LABEL_92;
      case 4u:
        *(_DWORD *)(a1 + 180) |= 0x200u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v24);
        goto LABEL_92;
      case 5u:
        *(_DWORD *)(a1 + 180) |= 0x400u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_92;
      case 6u:
        *(_DWORD *)(a1 + 180) |= 0x20u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v26);
        goto LABEL_92;
      case 7u:
        *(_DWORD *)(a1 + 180) |= 2u;
        v27 = *((_QWORD *)this + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v27);
        goto LABEL_92;
      case 8u:
        *(_DWORD *)(a1 + 180) |= 4u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v28);
        goto LABEL_92;
      case 9u:
        *(_DWORD *)(a1 + 180) |= 1u;
        v29 = *((_QWORD *)this + 1);
        if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v29);
        goto LABEL_92;
      case 0xAu:
        *(_DWORD *)(a1 + 180) |= 0x2000u;
        v30 = *((_QWORD *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v30);
        goto LABEL_92;
      case 0xBu:
        *(_DWORD *)(a1 + 180) |= 0x800000u;
        v31 = *((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        v33 = *(_QWORD *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)this + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_217;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_149:
          LODWORD(v36) = 0;
          goto LABEL_217;
        }
        v107 = 0;
        v108 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v109 = v31 + 1;
            v110 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)this + 1) = v109;
            v36 |= (unint64_t)(v110 & 0x7F) << v107;
            if (v110 < 0)
            {
              v107 += 7;
              v31 = v109;
              v14 = v108++ > 8;
              if (v14)
                goto LABEL_149;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v36) = 0;
          }
          break;
        }
LABEL_217:
        *(_DWORD *)(a1 + 164) = v36;
        goto LABEL_202;
      case 0xCu:
        *(_DWORD *)(a1 + 180) |= 0x1000u;
        v39 = *((_QWORD *)this + 1);
        if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v39);
        goto LABEL_92;
      case 0xDu:
        *(_DWORD *)(a1 + 180) |= 0x1000000u;
        v40 = *((_QWORD *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v40);
        goto LABEL_200;
      case 0xEu:
        *(_DWORD *)(a1 + 180) |= 0x2000000u;
        v41 = *((_QWORD *)this + 1);
        v42 = *((_QWORD *)this + 2);
        v43 = *(_QWORD *)this;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = v41 + 1;
            *((_QWORD *)this + 1) = v41 + 1;
            v48 = *(_BYTE *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0)
              goto LABEL_220;
            v44 += 7;
            v41 = v47;
            v14 = v45++ > 8;
          }
          while (!v14);
LABEL_156:
          LODWORD(v46) = 0;
          goto LABEL_220;
        }
        v111 = 0;
        v112 = 0;
        v46 = 0;
        if (v42 <= v41)
          v42 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v113 = v41 + 1;
            v114 = *(_BYTE *)(v43 + v41);
            *((_QWORD *)this + 1) = v113;
            v46 |= (unint64_t)(v114 & 0x7F) << v111;
            if (v114 < 0)
            {
              v111 += 7;
              v41 = v113;
              v14 = v112++ > 8;
              if (v14)
                goto LABEL_156;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v46) = 0;
          }
          break;
        }
LABEL_220:
        *(_DWORD *)(a1 + 172) = v46;
        goto LABEL_202;
      case 0xFu:
        *(_DWORD *)(a1 + 180) |= 0x20000u;
        v49 = *((_QWORD *)this + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v49);
        goto LABEL_200;
      case 0x10u:
        *(_DWORD *)(a1 + 180) |= 0x80000u;
        v50 = *((_QWORD *)this + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v50);
        goto LABEL_200;
      case 0x11u:
        *(_DWORD *)(a1 + 180) |= 0x40000u;
        v51 = *((_QWORD *)this + 1);
        if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v51);
        goto LABEL_200;
      case 0x12u:
        *(_DWORD *)(a1 + 180) |= 0x100u;
        v52 = *((_QWORD *)this + 1);
        if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v52);
        goto LABEL_92;
      case 0x13u:
        *(_DWORD *)(a1 + 180) |= 8u;
        v53 = *((_QWORD *)this + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v53);
        goto LABEL_92;
      case 0x14u:
        *(_DWORD *)(a1 + 180) |= 0x10u;
        v54 = *((_QWORD *)this + 1);
        if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v54);
LABEL_92:
        v55 = *((_QWORD *)this + 1) + 8;
        goto LABEL_201;
      case 0x15u:
        *(_DWORD *)(a1 + 180) |= 0x200000u;
        v56 = *((_QWORD *)this + 1);
        v57 = *((_QWORD *)this + 2);
        v58 = *(_QWORD *)this;
        if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          do
          {
            v62 = v56 + 1;
            *((_QWORD *)this + 1) = v56 + 1;
            v63 = *(_BYTE *)(v58 + v56);
            v61 |= (unint64_t)(v63 & 0x7F) << v59;
            if ((v63 & 0x80) == 0)
              goto LABEL_223;
            v59 += 7;
            v56 = v62;
            v14 = v60++ > 8;
          }
          while (!v14);
LABEL_163:
          LODWORD(v61) = 0;
          goto LABEL_223;
        }
        v115 = 0;
        v116 = 0;
        v61 = 0;
        if (v57 <= v56)
          v57 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v57 == v56)
          {
            LODWORD(v61) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v117 = v56 + 1;
            v118 = *(_BYTE *)(v58 + v56);
            *((_QWORD *)this + 1) = v117;
            v61 |= (unint64_t)(v118 & 0x7F) << v115;
            if (v118 < 0)
            {
              v115 += 7;
              v56 = v117;
              v14 = v116++ > 8;
              if (v14)
                goto LABEL_163;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v61) = 0;
          }
          break;
        }
LABEL_223:
        *(_DWORD *)(a1 + 156) = v61;
        goto LABEL_202;
      case 0x16u:
        *(_DWORD *)(a1 + 180) |= 0x4000000u;
        v64 = *((_QWORD *)this + 1);
        v65 = *((_QWORD *)this + 2);
        v66 = *(_QWORD *)this;
        if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
        {
          v67 = 0;
          v68 = 0;
          v69 = 0;
          do
          {
            v70 = v64 + 1;
            *((_QWORD *)this + 1) = v64 + 1;
            v71 = *(_BYTE *)(v66 + v64);
            v69 |= (unint64_t)(v71 & 0x7F) << v67;
            if ((v71 & 0x80) == 0)
              goto LABEL_226;
            v67 += 7;
            v64 = v70;
            v14 = v68++ > 8;
          }
          while (!v14);
LABEL_170:
          LODWORD(v69) = 0;
          goto LABEL_226;
        }
        v119 = 0;
        v120 = 0;
        v69 = 0;
        if (v65 <= v64)
          v65 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v65 == v64)
          {
            LODWORD(v69) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v121 = v64 + 1;
            v122 = *(_BYTE *)(v66 + v64);
            *((_QWORD *)this + 1) = v121;
            v69 |= (unint64_t)(v122 & 0x7F) << v119;
            if (v122 < 0)
            {
              v119 += 7;
              v64 = v121;
              v14 = v120++ > 8;
              if (v14)
                goto LABEL_170;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v69) = 0;
          }
          break;
        }
LABEL_226:
        *(_DWORD *)(a1 + 176) = v69;
        goto LABEL_202;
      case 0x17u:
        *(_DWORD *)(a1 + 180) |= 0x400000u;
        v72 = *((_QWORD *)this + 1);
        v73 = *((_QWORD *)this + 2);
        v74 = *(_QWORD *)this;
        if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
        {
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v78 = v72 + 1;
            *((_QWORD *)this + 1) = v72 + 1;
            v79 = *(_BYTE *)(v74 + v72);
            v77 |= (unint64_t)(v79 & 0x7F) << v75;
            if ((v79 & 0x80) == 0)
              goto LABEL_229;
            v75 += 7;
            v72 = v78;
            v14 = v76++ > 8;
          }
          while (!v14);
LABEL_177:
          LODWORD(v77) = 0;
          goto LABEL_229;
        }
        v123 = 0;
        v124 = 0;
        v77 = 0;
        if (v73 <= v72)
          v73 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v73 == v72)
          {
            LODWORD(v77) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v125 = v72 + 1;
            v126 = *(_BYTE *)(v74 + v72);
            *((_QWORD *)this + 1) = v125;
            v77 |= (unint64_t)(v126 & 0x7F) << v123;
            if (v126 < 0)
            {
              v123 += 7;
              v72 = v125;
              v14 = v124++ > 8;
              if (v14)
                goto LABEL_177;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v77) = 0;
          }
          break;
        }
LABEL_229:
        *(_DWORD *)(a1 + 160) = v77;
        goto LABEL_202;
      case 0x18u:
        *(_DWORD *)(a1 + 180) |= 0x10000u;
        v80 = *((_QWORD *)this + 1);
        v81 = *((_QWORD *)this + 2);
        v82 = *(_QWORD *)this;
        if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
        {
          v83 = 0;
          v84 = 0;
          v85 = 0;
          do
          {
            v86 = v80 + 1;
            *((_QWORD *)this + 1) = v80 + 1;
            v87 = *(_BYTE *)(v82 + v80);
            v85 |= (unint64_t)(v87 & 0x7F) << v83;
            if ((v87 & 0x80) == 0)
              goto LABEL_232;
            v83 += 7;
            v80 = v86;
            v14 = v84++ > 8;
          }
          while (!v14);
LABEL_184:
          LODWORD(v85) = 0;
          goto LABEL_232;
        }
        v127 = 0;
        v128 = 0;
        v85 = 0;
        if (v81 <= v80)
          v81 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v81 == v80)
          {
            LODWORD(v85) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v129 = v80 + 1;
            v130 = *(_BYTE *)(v82 + v80);
            *((_QWORD *)this + 1) = v129;
            v85 |= (unint64_t)(v130 & 0x7F) << v127;
            if (v130 < 0)
            {
              v127 += 7;
              v80 = v129;
              v14 = v128++ > 8;
              if (v14)
                goto LABEL_184;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v85) = 0;
          }
          break;
        }
LABEL_232:
        *(_DWORD *)(a1 + 136) = v85;
        goto LABEL_202;
      case 0x19u:
        *(_DWORD *)(a1 + 180) |= 0x100000u;
        v88 = *((_QWORD *)this + 1);
        v89 = *((_QWORD *)this + 2);
        v90 = *(_QWORD *)this;
        if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
        {
          v91 = 0;
          v92 = 0;
          v93 = 0;
          do
          {
            v94 = v88 + 1;
            *((_QWORD *)this + 1) = v88 + 1;
            v95 = *(_BYTE *)(v90 + v88);
            v93 |= (unint64_t)(v95 & 0x7F) << v91;
            if ((v95 & 0x80) == 0)
              goto LABEL_235;
            v91 += 7;
            v88 = v94;
            v14 = v92++ > 8;
          }
          while (!v14);
LABEL_191:
          LODWORD(v93) = 0;
          goto LABEL_235;
        }
        v131 = 0;
        v132 = 0;
        v93 = 0;
        if (v89 <= v88)
          v89 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v89 == v88)
          {
            LODWORD(v93) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v133 = v88 + 1;
            v134 = *(_BYTE *)(v90 + v88);
            *((_QWORD *)this + 1) = v133;
            v93 |= (unint64_t)(v134 & 0x7F) << v131;
            if (v134 < 0)
            {
              v131 += 7;
              v88 = v133;
              v14 = v132++ > 8;
              if (v14)
                goto LABEL_191;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v93) = 0;
          }
          break;
        }
LABEL_235:
        *(_DWORD *)(a1 + 152) = v93;
        goto LABEL_202;
      case 0x1Au:
        v96 = operator new();
        sub_21B817538(v96);
        v97 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v96;
        if (v97)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
          v96 = *(_QWORD *)(a1 + 112);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v96 + 16))(v96, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_202:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 0x1Bu:
        *(_DWORD *)(a1 + 180) |= 0x8000u;
        v98 = *((_QWORD *)this + 1);
        v99 = *((_QWORD *)this + 2);
        v100 = *(_QWORD *)this;
        if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
        {
          v101 = 0;
          v102 = 0;
          v103 = 0;
          do
          {
            v104 = v98 + 1;
            *((_QWORD *)this + 1) = v98 + 1;
            v105 = *(_BYTE *)(v100 + v98);
            v103 |= (unint64_t)(v105 & 0x7F) << v101;
            if ((v105 & 0x80) == 0)
              goto LABEL_238;
            v101 += 7;
            v98 = v104;
            v14 = v102++ > 8;
          }
          while (!v14);
LABEL_198:
          LODWORD(v103) = 0;
          goto LABEL_238;
        }
        v135 = 0;
        v136 = 0;
        v103 = 0;
        if (v99 <= v98)
          v99 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v99 == v98)
          {
            LODWORD(v103) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v137 = v98 + 1;
            v138 = *(_BYTE *)(v100 + v98);
            *((_QWORD *)this + 1) = v137;
            v103 |= (unint64_t)(v138 & 0x7F) << v135;
            if (v138 < 0)
            {
              v135 += 7;
              v98 = v137;
              v14 = v136++ > 8;
              if (v14)
                goto LABEL_198;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v103) = 0;
          }
          break;
        }
LABEL_238:
        *(_DWORD *)(a1 + 132) = v103;
        goto LABEL_202;
      case 0x1Cu:
        *(_DWORD *)(a1 + 180) |= 0x4000u;
        v106 = *((_QWORD *)this + 1);
        if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v106);
LABEL_200:
          v55 = *((_QWORD *)this + 1) + 4;
LABEL_201:
          *((_QWORD *)this + 1) = v55;
        }
        else
        {
LABEL_142:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_202;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_202;
    }
  }
}

uint64_t sub_21B840574(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;

  v3 = result;
  v4 = *(_DWORD *)(result + 180);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 96));
    v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0)
LABEL_26:
    result = PB::Writer::writeVarInt(this);
LABEL_27:
  v5 = *(const PB::Base **)(v3 + 112);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 128));
  return result;
}

uint64_t sub_21B84089C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF387C8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B8408B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8408D8(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_24DF387C8;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(result + 24) = v3 | 4;
    *(_DWORD *)(result + 20) = v6;
  }
  return result;
}

uint64_t sub_21B840948(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "event");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "value");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8409D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 20) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B840D58(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B840DD0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38800;
  *(_DWORD *)(result + 220) = 0;
  return result;
}

void sub_21B840DE8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B840E0C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  *(_QWORD *)result = &off_24DF38800;
  *(_DWORD *)(result + 220) = 0;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40000) != 0)
  {
    v4 = *(_QWORD *)(a2 + 152);
    v3 = 0x40000;
    *(_DWORD *)(result + 220) = 0x40000;
    *(_QWORD *)(result + 152) = v4;
    v2 = *(_DWORD *)(a2 + 220);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 72);
    v3 |= 0x100u;
    *(_DWORD *)(result + 220) = v3;
    *(_QWORD *)(result + 72) = v5;
    v2 = *(_DWORD *)(a2 + 220);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_QWORD *)(a2 + 80);
    v3 |= 0x200u;
    *(_DWORD *)(result + 220) = v3;
    *(_QWORD *)(result + 80) = v6;
    v2 = *(_DWORD *)(a2 + 220);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 136) = v7;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *(_QWORD *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 144) = v8;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 64) = v9;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 16) = v10;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 24) = v11;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 8) = v12;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *(_QWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 168) = v13;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *(_DWORD *)(a2 + 204);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 204) = v14;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *(_QWORD *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 160) = v15;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *(_DWORD *)(a2 + 208);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 208) = v16;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *(_DWORD *)(a2 + 212);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 212) = v17;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *(_DWORD *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 176) = v18;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *(_DWORD *)(a2 + 184);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 184) = v19;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *(_DWORD *)(a2 + 180);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 180) = v20;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 96) = v21;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 32) = v22;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 40) = v23;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *(_DWORD *)(a2 + 192);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 192) = v24;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *(_DWORD *)(a2 + 200);
  v3 |= 0x8000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 200) = v25;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *(_DWORD *)(a2 + 188);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 220) = v3;
  *(_DWORD *)(result + 188) = v26;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 48) = v27;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 56) = v28;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *(_QWORD *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 128) = v29;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 88) = v30;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *(_BYTE *)(a2 + 216);
  v3 |= 0x80000000;
  *(_DWORD *)(result + 220) = v3;
  *(_BYTE *)(result + 216) = v31;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x1000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *(_QWORD *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 104) = v32;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *(_QWORD *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 120) = v33;
  v2 = *(_DWORD *)(a2 + 220);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0)
      return result;
LABEL_66:
    v35 = *(_DWORD *)(a2 + 196);
    *(_DWORD *)(result + 220) = v3 | 0x4000000;
    *(_DWORD *)(result + 196) = v35;
    return result;
  }
LABEL_65:
  v34 = *(_QWORD *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 220) = v3;
  *(_QWORD *)(result + 112) = v34;
  if ((*(_DWORD *)(a2 + 220) & 0x4000000) != 0)
    goto LABEL_66;
  return result;
}

uint64_t sub_21B8411A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 220);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 180));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isPrefilteredLocation");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "matchQuality");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "originDevice");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "rawAltitude", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rawUndulation", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawUndulationModel");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rawVerticalAccuracy", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "signalEnvironment");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "type");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(this, "undulationModel");
    if ((*(_DWORD *)(a1 + 220) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 0x100000) != 0)
LABEL_33:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8415D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 220) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 2u:
              *(_DWORD *)(a1 + 220) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 3u:
              *(_DWORD *)(a1 + 220) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 4u:
              *(_DWORD *)(a1 + 220) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 5u:
              *(_DWORD *)(a1 + 220) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 6u:
              *(_DWORD *)(a1 + 220) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 7u:
              *(_DWORD *)(a1 + 220) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 8u:
              *(_DWORD *)(a1 + 220) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 9u:
              *(_DWORD *)(a1 + 220) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xAu:
              *(_DWORD *)(a1 + 220) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xBu:
              *(_DWORD *)(a1 + 220) |= 0x10000000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_200;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_199;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_200;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *(_DWORD *)(a1 + 204) = v25;
              goto LABEL_191;
            case 0xCu:
              *(_DWORD *)(a1 + 220) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xDu:
              *(_DWORD *)(a1 + 220) |= 0x20000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xEu:
              *(_DWORD *)(a1 + 220) |= 0x40000000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_205;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_204;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_205;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *(_DWORD *)(a1 + 212) = v31;
              goto LABEL_191;
            case 0xFu:
              *(_DWORD *)(a1 + 220) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0x10u:
              *(_DWORD *)(a1 + 220) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0x11u:
              *(_DWORD *)(a1 + 220) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_83:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_190;
            case 0x12u:
              *(_DWORD *)(a1 + 220) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x13u:
              *(_DWORD *)(a1 + 220) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x14u:
              *(_DWORD *)(a1 + 220) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x15u:
              *(_DWORD *)(a1 + 220) |= 0x2000000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_210;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_209;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_210;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *(_DWORD *)(a1 + 192) = v37;
              goto LABEL_191;
            case 0x16u:
              *(_DWORD *)(a1 + 220) |= 0x8000000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_215;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_214;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_215;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *(_DWORD *)(a1 + 200) = v43;
              goto LABEL_191;
            case 0x17u:
              *(_DWORD *)(a1 + 220) |= 0x1000000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_220;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_219;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_220;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *(_DWORD *)(a1 + 188) = v49;
              goto LABEL_191;
            case 0x18u:
              *(_DWORD *)(a1 + 220) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x19u:
              *(_DWORD *)(a1 + 220) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Au:
              *(_DWORD *)(a1 + 220) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Bu:
              *(_DWORD *)(a1 + 220) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Cu:
              *(_DWORD *)(a1 + 220) |= 0x80000000;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *(_DWORD *)(a1 + 220) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Eu:
              *(_DWORD *)(a1 + 220) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Fu:
              *(_DWORD *)(a1 + 220) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_189:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_190:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_191;
            case 0x20u:
              *(_DWORD *)(a1 + 220) |= 0x4000000u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_225;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_224;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_225;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *(_DWORD *)(a1 + 196) = v57;
LABEL_191:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_191;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8422BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 220);
  if ((v4 & 0x40000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 152));
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 208));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 180));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x4000000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  if ((*(_DWORD *)(v3 + 220) & 0x4000000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B842660(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF38838;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B842680(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF38838;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B8426D0(PB::Base *a1)
{
  sub_21B842680(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8426F4(uint64_t a1, uint64_t a2)
{
  char *v3;

  *(_QWORD *)a1 = &off_24DF38838;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (a1 != a2)
  {
    sub_21B7968C4(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_21B84276C(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (double *)a1[1];
  v6 = (double *)a1[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "loiAltitude", v7);
  }
  v8 = (double *)a1[4];
  v9 = (double *)a1[5];
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "loiVerticalUncertainty", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B842804(_QWORD *a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 4);
    v9 = (uint64_t)(a1 + 6);
    v10 = (void **)(a1 + 1);
    v11 = (uint64_t)(a1 + 3);
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v15 >> 3) == 2)
        break;
      if ((v15 >> 3) == 1)
      {
        if (v24 != 2)
        {
          v54 = (char *)a1[2];
          v53 = a1[3];
          if ((unint64_t)v54 >= v53)
          {
            v58 = (char *)*v10;
            v59 = (v54 - (_BYTE *)*v10) >> 3;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 61)
LABEL_122:
              sub_21B796A0C();
            v61 = v53 - (_QWORD)v58;
            if (v61 >> 2 > v60)
              v60 = v61 >> 2;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
              v62 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              v63 = (char *)sub_21B796A20(v11, v62);
              v58 = (char *)a1[1];
              v54 = (char *)a1[2];
            }
            else
            {
              v63 = 0;
            }
            v70 = &v63[8 * v59];
            *(_QWORD *)v70 = 0;
            v55 = v70 + 8;
            while (v54 != v58)
            {
              v71 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *((_QWORD *)v70 - 1) = v71;
              v70 -= 8;
            }
            a1[1] = v70;
            a1[2] = v55;
            a1[3] = &v63[8 * v62];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *(_QWORD *)v54 = 0;
            v55 = v54 + 8;
          }
          a1[2] = v55;
LABEL_110:
          v74 = *((_QWORD *)this + 1);
          if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *((_QWORD *)this + 2))
          {
            *(v55 - 1) = *(_QWORD *)(*(_QWORD *)this + v74);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_114;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v25 = *((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        while (v25 < v26 && !*((_BYTE *)this + 24))
        {
          v28 = (char *)a1[2];
          v27 = a1[3];
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v10;
            v31 = (v28 - (_BYTE *)*v10) >> 3;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              goto LABEL_122;
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)sub_21B796A20(v11, v34);
              v30 = (char *)a1[1];
              v28 = (char *)a1[2];
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              v37 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            a1[1] = v36;
            a1[2] = v29;
            a1[3] = &v35[8 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v28 = 0;
            v29 = v28 + 8;
          }
          a1[2] = v29;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
            goto LABEL_78;
          *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
          v26 = *((_QWORD *)this + 2);
          v25 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v25;
        }
LABEL_79:
        PB::Reader::recallMark();
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_114:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v57 = (char *)a1[5];
      v56 = a1[6];
      if ((unint64_t)v57 >= v56)
      {
        v64 = (char *)*v8;
        v65 = (v57 - (_BYTE *)*v8) >> 3;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
LABEL_123:
          sub_21B796A0C();
        v67 = v56 - (_QWORD)v64;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)sub_21B796A20(v9, v68);
          v64 = (char *)a1[4];
          v57 = (char *)a1[5];
        }
        else
        {
          v69 = 0;
        }
        v72 = &v69[8 * v65];
        *(_QWORD *)v72 = 0;
        v55 = v72 + 8;
        while (v57 != v64)
        {
          v73 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *((_QWORD *)v72 - 1) = v73;
          v72 -= 8;
        }
        a1[4] = v72;
        a1[5] = v55;
        a1[6] = &v69[8 * v68];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)v57 = 0;
        v55 = v57 + 8;
      }
      a1[5] = v55;
      goto LABEL_110;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v39 = *((_QWORD *)this + 1);
    v40 = *((_QWORD *)this + 2);
    while (v39 < v40 && !*((_BYTE *)this + 24))
    {
      v42 = (char *)a1[5];
      v41 = a1[6];
      if ((unint64_t)v42 >= v41)
      {
        v44 = (char *)*v8;
        v45 = (v42 - (_BYTE *)*v8) >> 3;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61)
          goto LABEL_123;
        v47 = v41 - (_QWORD)v44;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)sub_21B796A20(v9, v48);
          v44 = (char *)a1[4];
          v42 = (char *)a1[5];
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[8 * v45];
        *(_QWORD *)v50 = 0;
        v43 = v50 + 8;
        while (v42 != v44)
        {
          v51 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *((_QWORD *)v50 - 1) = v51;
          v50 -= 8;
        }
        a1[4] = v50;
        a1[5] = v43;
        a1[6] = &v49[8 * v48];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_QWORD *)v42 = 0;
        v43 = v42 + 8;
      }
      a1[5] = v43;
      v52 = *((_QWORD *)this + 1);
      if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
      {
LABEL_78:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_79;
      }
      *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
      v40 = *((_QWORD *)this + 2);
      v39 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v39;
    }
    goto LABEL_79;
  }
  return v4 == 0;
}

uint64_t sub_21B842D34(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = *(double **)(v3 + 32);
  v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_21B842D9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38870;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_21B842DBC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B842DE0(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)result = &off_24DF38870;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v3 = 64;
    *(_WORD *)(result + 92) = 64;
    *(_QWORD *)(result + 56) = v4;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 80) = v9;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 72) = v10;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 64) = v11;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v13;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_26:
    v15 = *(_BYTE *)(a2 + 88);
    *(_WORD *)(result + 92) = v3 | 0x800;
    *(_BYTE *)(result + 88) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 32) = v14;
  if ((*(_WORD *)(a2 + 92) & 0x800) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_21B842F54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "arrivalDate", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a1 + 92) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "confidenceOfGeoLocation", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "departureDate", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "distanceToLoi", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "hashedLatLong");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "uncertaintyOfGeoLocation", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "type");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x100) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "withinDistance", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B843104(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *(_DWORD *)(a1 + 80) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 84) = v31;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_84:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 88) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B843694(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 92) & 0x800) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B843808(_QWORD *result)
{
  *result = &off_24DF388A8;
  result[4] = 0;
  result[24] = 0;
  return result;
}

void sub_21B843820(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF388A8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B843864(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF388A8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8438BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;

  *(_QWORD *)a1 = &off_24DF388A8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x8000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 100);
    v5 = 0x8000;
    *(_QWORD *)(a1 + 192) = 0x8000;
    *(_DWORD *)(a1 + 100) = v6;
    v4 = *(_QWORD *)(a2 + 192);
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x100) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 72);
    v5 |= 0x100uLL;
    *(_QWORD *)(a1 + 192) = v5;
    *(_DWORD *)(a1 + 72) = v7;
    v4 = *(_QWORD *)(a2 + 192);
  }
LABEL_6:
  if ((v4 & 0x10000) != 0)
  {
    v15 = *(_DWORD *)(a2 + 104);
    v5 |= 0x10000uLL;
    *(_QWORD *)(a1 + 192) = v5;
    *(_DWORD *)(a1 + 104) = v15;
    v4 = *(_QWORD *)(a2 + 192);
    if ((v4 & 0x20000) == 0)
    {
LABEL_8:
      if ((v4 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  v16 = *(_DWORD *)(a2 + 108);
  v5 |= 0x20000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 108) = v16;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  v17 = *(_DWORD *)(a2 + 84);
  v5 |= 0x800uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 84) = v17;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  v18 = *(_DWORD *)(a2 + 148);
  v5 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 148) = v18;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  v19 = *(_DWORD *)(a2 + 92);
  v5 |= 0x2000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 92) = v19;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *(_DWORD *)(a2 + 88);
  v5 |= 0x1000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 88) = v20;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *(_DWORD *)(a2 + 136);
  v5 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 136) = v21;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  v22 = *(_QWORD *)(a2 + 40);
  v5 |= 8uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 40) = v22;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  v23 = *(_QWORD *)(a2 + 8);
  v5 |= 1uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 8) = v23;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  v24 = *(_QWORD *)(a2 + 24);
  v5 |= 4uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 24) = v24;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  v25 = *(_QWORD *)(a2 + 16);
  v5 |= 2uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 16) = v25;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  v26 = *(_DWORD *)(a2 + 68);
  v5 |= 0x80uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 68) = v26;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  v27 = *(_DWORD *)(a2 + 156);
  v5 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 156) = v27;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *(_DWORD *)(a2 + 144);
  v5 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 144) = v28;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  v29 = *(_DWORD *)(a2 + 96);
  v5 |= 0x4000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 96) = v29;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  v30 = *(_DWORD *)(a2 + 128);
  v5 |= 0x400000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 128) = v30;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  v31 = *(_DWORD *)(a2 + 124);
  v5 |= 0x200000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 124) = v31;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  v32 = *(_DWORD *)(a2 + 132);
  v5 |= 0x800000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 132) = v32;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  v33 = *(_QWORD *)(a2 + 48);
  v5 |= 0x10uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_QWORD *)(a1 + 48) = v33;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_27;
    goto LABEL_68;
  }
LABEL_67:
  v34 = *(_DWORD *)(a2 + 180);
  v5 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 180) = v34;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x100000) == 0)
      goto LABEL_28;
    goto LABEL_69;
  }
LABEL_68:
  v35 = *(_DWORD *)(a2 + 160);
  v5 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 160) = v35;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
LABEL_70:
    v37 = *(_DWORD *)(a2 + 116);
    v5 |= 0x80000uLL;
    *(_QWORD *)(a1 + 192) = v5;
    *(_DWORD *)(a1 + 116) = v37;
    if ((*(_QWORD *)(a2 + 192) & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_69:
  v36 = *(_DWORD *)(a2 + 120);
  v5 |= 0x100000uLL;
  *(_QWORD *)(a1 + 192) = v5;
  *(_DWORD *)(a1 + 120) = v36;
  v4 = *(_QWORD *)(a2 + 192);
  if ((v4 & 0x80000) != 0)
    goto LABEL_70;
LABEL_29:
  if ((v4 & 0x40000) != 0)
  {
LABEL_30:
    v8 = *(_DWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 192) = v5 | 0x40000;
    *(_DWORD *)(a1 + 112) = v8;
  }
LABEL_31:
  if (*(_QWORD *)(a2 + 32))
  {
    v9 = operator new();
    v10 = sub_21B81DDE0(v9, *(_QWORD *)(a2 + 32));
    v11 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x400) != 0)
  {
    v38 = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 192) |= 0x400uLL;
    *(_DWORD *)(a1 + 80) = v38;
    v12 = *(_QWORD *)(a2 + 192);
    if ((v12 & 0x200) == 0)
    {
LABEL_36:
      if ((v12 & 0x2000000) == 0)
        goto LABEL_37;
      goto LABEL_74;
    }
  }
  else if ((v12 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v39 = *(_DWORD *)(a2 + 76);
  *(_QWORD *)(a1 + 192) |= 0x200uLL;
  *(_DWORD *)(a1 + 76) = v39;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x2000000) == 0)
  {
LABEL_37:
    if ((v12 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_75;
  }
LABEL_74:
  v40 = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 192) |= 0x2000000uLL;
  *(_DWORD *)(a1 + 140) = v40;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v12 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_76;
  }
LABEL_75:
  v41 = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) |= 0x1000000000uLL;
  *(_DWORD *)(a1 + 184) = v41;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x20) == 0)
  {
LABEL_39:
    if ((v12 & 0x10000000) == 0)
      goto LABEL_40;
    goto LABEL_77;
  }
LABEL_76:
  v42 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 192) |= 0x20uLL;
  *(_QWORD *)(a1 + 56) = v42;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v12 & 0x2000000000) == 0)
      goto LABEL_41;
    goto LABEL_78;
  }
LABEL_77:
  v43 = *(_DWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 192) |= 0x10000000uLL;
  *(_DWORD *)(a1 + 152) = v43;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x2000000000) == 0)
  {
LABEL_41:
    if ((v12 & 0x40) == 0)
      goto LABEL_42;
    goto LABEL_79;
  }
LABEL_78:
  v44 = *(_DWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 192) |= 0x2000000000uLL;
  *(_DWORD *)(a1 + 188) = v44;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x40) == 0)
  {
LABEL_42:
    if ((v12 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_80;
  }
LABEL_79:
  v45 = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 192) |= 0x40uLL;
  *(_DWORD *)(a1 + 64) = v45;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v12 & 0x100000000) == 0)
      goto LABEL_44;
    goto LABEL_81;
  }
LABEL_80:
  v46 = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 192) |= 0x80000000uLL;
  *(_DWORD *)(a1 + 164) = v46;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v12 & 0x200000000) == 0)
      goto LABEL_45;
LABEL_82:
    v48 = *(_DWORD *)(a2 + 172);
    *(_QWORD *)(a1 + 192) |= 0x200000000uLL;
    *(_DWORD *)(a1 + 172) = v48;
    if ((*(_QWORD *)(a2 + 192) & 0x400000000) == 0)
      return a1;
    goto LABEL_46;
  }
LABEL_81:
  v47 = *(_DWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 192) |= 0x100000000uLL;
  *(_DWORD *)(a1 + 168) = v47;
  v12 = *(_QWORD *)(a2 + 192);
  if ((v12 & 0x200000000) != 0)
    goto LABEL_82;
LABEL_45:
  if ((v12 & 0x400000000) != 0)
  {
LABEL_46:
    v13 = *(_DWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) |= 0x400000000uLL;
    *(_DWORD *)(a1 + 176) = v13;
  }
  return a1;
}

uint64_t sub_21B843D9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "alsLux");
    v5 = *(_QWORD *)(a1 + 192);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "caltype");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "confidence");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "exitState");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "hidTimestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isMoving");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "isVehicular");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "machineFrequency", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "motionType");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "mounted");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "mountedConfidence");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "now");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rawConfidence");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rawIsVehicular");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rawMotionType");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rowStrokeAmplitude", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rowStrokeFrequency", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rowStrokePower", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "seq");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_24;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0)
      goto LABEL_25;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "standing");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "startTime");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "turn");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "typeYouth");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "vectorMagnitude", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "vehicleExitState");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_31;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_75:
  PB::TextFormatter::format(this, "vehicleType");
  if ((*(_QWORD *)(a1 + 192) & 0x800000000) != 0)
LABEL_34:
    PB::TextFormatter::format(this, "vehicularConfidence");
LABEL_35:
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "vehicularFlags");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(this, "wallStartTime", *(double *)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 192);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0)
        goto LABEL_40;
      goto LABEL_79;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(this, "workoutDetectionTime");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0)
      goto LABEL_41;
LABEL_80:
    PB::TextFormatter::format(this, "workoutEscalationTime");
    if ((*(_QWORD *)(a1 + 192) & 0x2000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_42;
  }
LABEL_79:
  PB::TextFormatter::format(this, "workoutDetectionType");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 0x20) != 0)
    goto LABEL_80;
LABEL_41:
  if ((v7 & 0x2000000000) != 0)
LABEL_42:
    PB::TextFormatter::format(this, "youthClassificationReason");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8442AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  unint64_t v239;
  char v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  char v244;
  char v245;
  unsigned int v246;
  unint64_t v247;
  char v248;
  char v249;
  unsigned int v250;
  unint64_t v251;
  char v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  char v256;
  char v257;
  unsigned int v258;
  unint64_t v259;
  char v260;
  char v261;
  unsigned int v262;
  unint64_t v263;
  char v264;
  char v265;
  unsigned int v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  unint64_t v271;
  char v272;
  char v273;
  unsigned int v274;
  unint64_t v275;
  char v276;
  char v277;
  unsigned int v278;
  unint64_t v279;
  char v280;
  char v281;
  unsigned int v282;
  unint64_t v283;
  char v284;
  char v285;
  unsigned int v286;
  unint64_t v287;
  char v288;
  char v289;
  unsigned int v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  unint64_t v295;
  char v296;
  char v297;
  unsigned int v298;
  unint64_t v299;
  char v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;
  char v321;
  unsigned int v322;
  unint64_t v323;
  char v324;
  char v325;
  unsigned int v326;
  unint64_t v327;
  char v328;
  char v329;
  unsigned int v330;
  unint64_t v331;
  char v332;
  char v333;
  unsigned int v334;
  unint64_t v335;
  char v336;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)(a1 + 192) |= 0x8000uLL;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v237 = 0;
          v238 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          do
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_449;
            }
            v239 = v20 + 1;
            v240 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v239;
            v25 |= (unint64_t)(v240 & 0x7F) << v237;
            if ((v240 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
              goto LABEL_449;
            }
            v237 += 7;
            v20 = v239;
            v14 = v238++ > 8;
          }
          while (!v14);
LABEL_250:
          LODWORD(v25) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_250;
          }
        }
LABEL_449:
        *(_DWORD *)(a1 + 100) = v25;
        goto LABEL_522;
      case 2u:
        *(_QWORD *)(a1 + 192) |= 0x100uLL;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_452;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_257:
          LODWORD(v34) = 0;
          goto LABEL_452;
        }
        v241 = 0;
        v242 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v243 = v29 + 1;
            v244 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v243;
            v34 |= (unint64_t)(v244 & 0x7F) << v241;
            if (v244 < 0)
            {
              v241 += 7;
              v29 = v243;
              v14 = v242++ > 8;
              if (v14)
                goto LABEL_257;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_452:
        *(_DWORD *)(a1 + 72) = v34;
        goto LABEL_522;
      case 3u:
        *(_QWORD *)(a1 + 192) |= 0x10000uLL;
        v37 = *((_QWORD *)this + 1);
        v38 = *((_QWORD *)this + 2);
        v39 = *(_QWORD *)this;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)this + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_455;
            v40 += 7;
            v37 = v43;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_264:
          LODWORD(v42) = 0;
          goto LABEL_455;
        }
        v245 = 0;
        v246 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v247 = v37 + 1;
            v248 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)this + 1) = v247;
            v42 |= (unint64_t)(v248 & 0x7F) << v245;
            if (v248 < 0)
            {
              v245 += 7;
              v37 = v247;
              v14 = v246++ > 8;
              if (v14)
                goto LABEL_264;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v42) = 0;
          }
          break;
        }
LABEL_455:
        *(_DWORD *)(a1 + 104) = v42;
        goto LABEL_522;
      case 4u:
        *(_QWORD *)(a1 + 192) |= 0x20000uLL;
        v45 = *((_QWORD *)this + 1);
        v46 = *((_QWORD *)this + 2);
        v47 = *(_QWORD *)this;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)this + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_458;
            v48 += 7;
            v45 = v51;
            v14 = v49++ > 8;
          }
          while (!v14);
LABEL_271:
          LODWORD(v50) = 0;
          goto LABEL_458;
        }
        v249 = 0;
        v250 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v251 = v45 + 1;
            v252 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)this + 1) = v251;
            v50 |= (unint64_t)(v252 & 0x7F) << v249;
            if (v252 < 0)
            {
              v249 += 7;
              v45 = v251;
              v14 = v250++ > 8;
              if (v14)
                goto LABEL_271;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_458:
        *(_DWORD *)(a1 + 108) = v50;
        goto LABEL_522;
      case 5u:
        *(_QWORD *)(a1 + 192) |= 0x800uLL;
        v53 = *((_QWORD *)this + 1);
        v54 = *((_QWORD *)this + 2);
        v55 = *(_QWORD *)this;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          do
          {
            v59 = v53 + 1;
            *((_QWORD *)this + 1) = v53 + 1;
            v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0)
              goto LABEL_461;
            v56 += 7;
            v53 = v59;
            v14 = v57++ > 8;
          }
          while (!v14);
LABEL_278:
          LODWORD(v58) = 0;
          goto LABEL_461;
        }
        v253 = 0;
        v254 = 0;
        v58 = 0;
        if (v54 <= v53)
          v54 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v255 = v53 + 1;
            v256 = *(_BYTE *)(v55 + v53);
            *((_QWORD *)this + 1) = v255;
            v58 |= (unint64_t)(v256 & 0x7F) << v253;
            if (v256 < 0)
            {
              v253 += 7;
              v53 = v255;
              v14 = v254++ > 8;
              if (v14)
                goto LABEL_278;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v58) = 0;
          }
          break;
        }
LABEL_461:
        *(_DWORD *)(a1 + 84) = v58;
        goto LABEL_522;
      case 6u:
        *(_QWORD *)(a1 + 192) |= 0x8000000uLL;
        v61 = *((_QWORD *)this + 1);
        v62 = *((_QWORD *)this + 2);
        v63 = *(_QWORD *)this;
        if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          do
          {
            v67 = v61 + 1;
            *((_QWORD *)this + 1) = v61 + 1;
            v68 = *(_BYTE *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0)
              goto LABEL_464;
            v64 += 7;
            v61 = v67;
            v14 = v65++ > 8;
          }
          while (!v14);
LABEL_285:
          LODWORD(v66) = 0;
          goto LABEL_464;
        }
        v257 = 0;
        v258 = 0;
        v66 = 0;
        if (v62 <= v61)
          v62 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v259 = v61 + 1;
            v260 = *(_BYTE *)(v63 + v61);
            *((_QWORD *)this + 1) = v259;
            v66 |= (unint64_t)(v260 & 0x7F) << v257;
            if (v260 < 0)
            {
              v257 += 7;
              v61 = v259;
              v14 = v258++ > 8;
              if (v14)
                goto LABEL_285;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v66) = 0;
          }
          break;
        }
LABEL_464:
        *(_DWORD *)(a1 + 148) = v66;
        goto LABEL_522;
      case 7u:
        *(_QWORD *)(a1 + 192) |= 0x2000uLL;
        v69 = *((_QWORD *)this + 1);
        v70 = *((_QWORD *)this + 2);
        v71 = *(_QWORD *)this;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          v72 = 0;
          v73 = 0;
          v74 = 0;
          do
          {
            v75 = v69 + 1;
            *((_QWORD *)this + 1) = v69 + 1;
            v76 = *(_BYTE *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0)
              goto LABEL_467;
            v72 += 7;
            v69 = v75;
            v14 = v73++ > 8;
          }
          while (!v14);
LABEL_292:
          LODWORD(v74) = 0;
          goto LABEL_467;
        }
        v261 = 0;
        v262 = 0;
        v74 = 0;
        if (v70 <= v69)
          v70 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v263 = v69 + 1;
            v264 = *(_BYTE *)(v71 + v69);
            *((_QWORD *)this + 1) = v263;
            v74 |= (unint64_t)(v264 & 0x7F) << v261;
            if (v264 < 0)
            {
              v261 += 7;
              v69 = v263;
              v14 = v262++ > 8;
              if (v14)
                goto LABEL_292;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v74) = 0;
          }
          break;
        }
LABEL_467:
        *(_DWORD *)(a1 + 92) = v74;
        goto LABEL_522;
      case 8u:
        *(_QWORD *)(a1 + 192) |= 0x1000uLL;
        v77 = *((_QWORD *)this + 1);
        v78 = *((_QWORD *)this + 2);
        v79 = *(_QWORD *)this;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = v77 + 1;
            *((_QWORD *)this + 1) = v77 + 1;
            v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0)
              goto LABEL_470;
            v80 += 7;
            v77 = v83;
            v14 = v81++ > 8;
          }
          while (!v14);
LABEL_299:
          LODWORD(v82) = 0;
          goto LABEL_470;
        }
        v265 = 0;
        v266 = 0;
        v82 = 0;
        if (v78 <= v77)
          v78 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v267 = v77 + 1;
            v268 = *(_BYTE *)(v79 + v77);
            *((_QWORD *)this + 1) = v267;
            v82 |= (unint64_t)(v268 & 0x7F) << v265;
            if (v268 < 0)
            {
              v265 += 7;
              v77 = v267;
              v14 = v266++ > 8;
              if (v14)
                goto LABEL_299;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v82) = 0;
          }
          break;
        }
LABEL_470:
        *(_DWORD *)(a1 + 88) = v82;
        goto LABEL_522;
      case 9u:
        *(_QWORD *)(a1 + 192) |= 0x1000000uLL;
        v85 = *((_QWORD *)this + 1);
        v86 = *((_QWORD *)this + 2);
        v87 = *(_QWORD *)this;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          do
          {
            v91 = v85 + 1;
            *((_QWORD *)this + 1) = v85 + 1;
            v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0)
              goto LABEL_473;
            v88 += 7;
            v85 = v91;
            v14 = v89++ > 8;
          }
          while (!v14);
LABEL_306:
          LODWORD(v90) = 0;
          goto LABEL_473;
        }
        v269 = 0;
        v270 = 0;
        v90 = 0;
        if (v86 <= v85)
          v86 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v271 = v85 + 1;
            v272 = *(_BYTE *)(v87 + v85);
            *((_QWORD *)this + 1) = v271;
            v90 |= (unint64_t)(v272 & 0x7F) << v269;
            if (v272 < 0)
            {
              v269 += 7;
              v85 = v271;
              v14 = v270++ > 8;
              if (v14)
                goto LABEL_306;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v90) = 0;
          }
          break;
        }
LABEL_473:
        *(_DWORD *)(a1 + 136) = v90;
        goto LABEL_522;
      case 0xAu:
        *(_QWORD *)(a1 + 192) |= 8uLL;
        v93 = *((_QWORD *)this + 1);
        if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v93);
        goto LABEL_93;
      case 0xBu:
        *(_QWORD *)(a1 + 192) |= 1uLL;
        v94 = *((_QWORD *)this + 1);
        if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v94);
LABEL_93:
        v95 = *((_QWORD *)this + 1) + 8;
        goto LABEL_421;
      case 0xCu:
        *(_QWORD *)(a1 + 192) |= 4uLL;
        v96 = *((_QWORD *)this + 1);
        v97 = *((_QWORD *)this + 2);
        v98 = *(_QWORD *)this;
        if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          do
          {
            v102 = v96 + 1;
            *((_QWORD *)this + 1) = v96 + 1;
            v103 = *(_BYTE *)(v98 + v96);
            v101 |= (unint64_t)(v103 & 0x7F) << v99;
            if ((v103 & 0x80) == 0)
              goto LABEL_476;
            v99 += 7;
            v96 = v102;
            v14 = v100++ > 8;
          }
          while (!v14);
LABEL_313:
          v101 = 0;
          goto LABEL_476;
        }
        v273 = 0;
        v274 = 0;
        v101 = 0;
        if (v97 <= v96)
          v97 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v97 == v96)
          {
            v101 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v275 = v96 + 1;
            v276 = *(_BYTE *)(v98 + v96);
            *((_QWORD *)this + 1) = v275;
            v101 |= (unint64_t)(v276 & 0x7F) << v273;
            if (v276 < 0)
            {
              v273 += 7;
              v96 = v275;
              v14 = v274++ > 8;
              if (v14)
                goto LABEL_313;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v101 = 0;
          }
          break;
        }
LABEL_476:
        *(_QWORD *)(a1 + 24) = v101;
        goto LABEL_522;
      case 0xDu:
        *(_QWORD *)(a1 + 192) |= 2uLL;
        v104 = *((_QWORD *)this + 1);
        v105 = *((_QWORD *)this + 2);
        v106 = *(_QWORD *)this;
        if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
        {
          v107 = 0;
          v108 = 0;
          v109 = 0;
          do
          {
            v110 = v104 + 1;
            *((_QWORD *)this + 1) = v104 + 1;
            v111 = *(_BYTE *)(v106 + v104);
            v109 |= (unint64_t)(v111 & 0x7F) << v107;
            if ((v111 & 0x80) == 0)
              goto LABEL_479;
            v107 += 7;
            v104 = v110;
            v14 = v108++ > 8;
          }
          while (!v14);
LABEL_320:
          v109 = 0;
          goto LABEL_479;
        }
        v277 = 0;
        v278 = 0;
        v109 = 0;
        if (v105 <= v104)
          v105 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v105 == v104)
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v279 = v104 + 1;
            v280 = *(_BYTE *)(v106 + v104);
            *((_QWORD *)this + 1) = v279;
            v109 |= (unint64_t)(v280 & 0x7F) << v277;
            if (v280 < 0)
            {
              v277 += 7;
              v104 = v279;
              v14 = v278++ > 8;
              if (v14)
                goto LABEL_320;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v109 = 0;
          }
          break;
        }
LABEL_479:
        *(_QWORD *)(a1 + 16) = v109;
        goto LABEL_522;
      case 0xEu:
        *(_QWORD *)(a1 + 192) |= 0x80uLL;
        v112 = *((_QWORD *)this + 1);
        v113 = *((_QWORD *)this + 2);
        v114 = *(_QWORD *)this;
        if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
        {
          v115 = 0;
          v116 = 0;
          v117 = 0;
          do
          {
            v118 = v112 + 1;
            *((_QWORD *)this + 1) = v112 + 1;
            v119 = *(_BYTE *)(v114 + v112);
            v117 |= (unint64_t)(v119 & 0x7F) << v115;
            if ((v119 & 0x80) == 0)
              goto LABEL_482;
            v115 += 7;
            v112 = v118;
            v14 = v116++ > 8;
          }
          while (!v14);
LABEL_327:
          LODWORD(v117) = 0;
          goto LABEL_482;
        }
        v281 = 0;
        v282 = 0;
        v117 = 0;
        if (v113 <= v112)
          v113 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v113 == v112)
          {
            LODWORD(v117) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v283 = v112 + 1;
            v284 = *(_BYTE *)(v114 + v112);
            *((_QWORD *)this + 1) = v283;
            v117 |= (unint64_t)(v284 & 0x7F) << v281;
            if (v284 < 0)
            {
              v281 += 7;
              v112 = v283;
              v14 = v282++ > 8;
              if (v14)
                goto LABEL_327;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v117) = 0;
          }
          break;
        }
LABEL_482:
        *(_DWORD *)(a1 + 68) = v117;
        goto LABEL_522;
      case 0xFu:
        *(_QWORD *)(a1 + 192) |= 0x20000000uLL;
        v120 = *((_QWORD *)this + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v120);
        goto LABEL_420;
      case 0x10u:
        *(_QWORD *)(a1 + 192) |= 0x4000000uLL;
        v121 = *((_QWORD *)this + 1);
        v122 = *((_QWORD *)this + 2);
        v123 = *(_QWORD *)this;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)this + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_485;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_334:
          LODWORD(v126) = 0;
          goto LABEL_485;
        }
        v285 = 0;
        v286 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v287 = v121 + 1;
            v288 = *(_BYTE *)(v123 + v121);
            *((_QWORD *)this + 1) = v287;
            v126 |= (unint64_t)(v288 & 0x7F) << v285;
            if (v288 < 0)
            {
              v285 += 7;
              v121 = v287;
              v14 = v286++ > 8;
              if (v14)
                goto LABEL_334;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v126) = 0;
          }
          break;
        }
LABEL_485:
        *(_DWORD *)(a1 + 144) = v126;
        goto LABEL_522;
      case 0x11u:
        *(_QWORD *)(a1 + 192) |= 0x4000uLL;
        v129 = *((_QWORD *)this + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v129);
        goto LABEL_420;
      case 0x12u:
        *(_QWORD *)(a1 + 192) |= 0x400000uLL;
        v130 = *((_QWORD *)this + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v130);
        goto LABEL_420;
      case 0x13u:
        *(_QWORD *)(a1 + 192) |= 0x200000uLL;
        v131 = *((_QWORD *)this + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v131);
        goto LABEL_420;
      case 0x14u:
        *(_QWORD *)(a1 + 192) |= 0x800000uLL;
        v132 = *((_QWORD *)this + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v132);
        goto LABEL_420;
      case 0x15u:
        *(_QWORD *)(a1 + 192) |= 0x10uLL;
        v133 = *((_QWORD *)this + 1);
        v134 = *((_QWORD *)this + 2);
        v135 = *(_QWORD *)this;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          do
          {
            v139 = v133 + 1;
            *((_QWORD *)this + 1) = v133 + 1;
            v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0)
              goto LABEL_488;
            v136 += 7;
            v133 = v139;
            v14 = v137++ > 8;
          }
          while (!v14);
LABEL_341:
          v138 = 0;
          goto LABEL_488;
        }
        v289 = 0;
        v290 = 0;
        v138 = 0;
        if (v134 <= v133)
          v134 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v134 == v133)
          {
            v138 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v291 = v133 + 1;
            v292 = *(_BYTE *)(v135 + v133);
            *((_QWORD *)this + 1) = v291;
            v138 |= (unint64_t)(v292 & 0x7F) << v289;
            if (v292 < 0)
            {
              v289 += 7;
              v133 = v291;
              v14 = v290++ > 8;
              if (v14)
                goto LABEL_341;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v138 = 0;
          }
          break;
        }
LABEL_488:
        *(_QWORD *)(a1 + 48) = v138;
        goto LABEL_522;
      case 0x16u:
        *(_QWORD *)(a1 + 192) |= 0x800000000uLL;
        v141 = *((_QWORD *)this + 1);
        v142 = *((_QWORD *)this + 2);
        v143 = *(_QWORD *)this;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          v144 = 0;
          v145 = 0;
          v146 = 0;
          do
          {
            v147 = v141 + 1;
            *((_QWORD *)this + 1) = v141 + 1;
            v148 = *(_BYTE *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0)
              goto LABEL_491;
            v144 += 7;
            v141 = v147;
            v14 = v145++ > 8;
          }
          while (!v14);
LABEL_348:
          LODWORD(v146) = 0;
          goto LABEL_491;
        }
        v293 = 0;
        v294 = 0;
        v146 = 0;
        if (v142 <= v141)
          v142 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v295 = v141 + 1;
            v296 = *(_BYTE *)(v143 + v141);
            *((_QWORD *)this + 1) = v295;
            v146 |= (unint64_t)(v296 & 0x7F) << v293;
            if (v296 < 0)
            {
              v293 += 7;
              v141 = v295;
              v14 = v294++ > 8;
              if (v14)
                goto LABEL_348;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v146) = 0;
          }
          break;
        }
LABEL_491:
        *(_DWORD *)(a1 + 180) = v146;
        goto LABEL_522;
      case 0x17u:
        *(_QWORD *)(a1 + 192) |= 0x40000000uLL;
        v149 = *((_QWORD *)this + 1);
        v150 = *((_QWORD *)this + 2);
        v151 = *(_QWORD *)this;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          v152 = 0;
          v153 = 0;
          v154 = 0;
          do
          {
            v155 = v149 + 1;
            *((_QWORD *)this + 1) = v149 + 1;
            v156 = *(_BYTE *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0)
              goto LABEL_494;
            v152 += 7;
            v149 = v155;
            v14 = v153++ > 8;
          }
          while (!v14);
LABEL_355:
          LODWORD(v154) = 0;
          goto LABEL_494;
        }
        v297 = 0;
        v298 = 0;
        v154 = 0;
        if (v150 <= v149)
          v150 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v299 = v149 + 1;
            v300 = *(_BYTE *)(v151 + v149);
            *((_QWORD *)this + 1) = v299;
            v154 |= (unint64_t)(v300 & 0x7F) << v297;
            if (v300 < 0)
            {
              v297 += 7;
              v149 = v299;
              v14 = v298++ > 8;
              if (v14)
                goto LABEL_355;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v154) = 0;
          }
          break;
        }
LABEL_494:
        *(_DWORD *)(a1 + 160) = v154;
        goto LABEL_522;
      case 0x18u:
        *(_QWORD *)(a1 + 192) |= 0x100000uLL;
        v157 = *((_QWORD *)this + 1);
        v158 = *((_QWORD *)this + 2);
        v159 = *(_QWORD *)this;
        if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
        {
          v160 = 0;
          v161 = 0;
          v162 = 0;
          do
          {
            v163 = v157 + 1;
            *((_QWORD *)this + 1) = v157 + 1;
            v164 = *(_BYTE *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0)
              goto LABEL_497;
            v160 += 7;
            v157 = v163;
            v14 = v161++ > 8;
          }
          while (!v14);
LABEL_362:
          LODWORD(v162) = 0;
          goto LABEL_497;
        }
        v301 = 0;
        v302 = 0;
        v162 = 0;
        if (v158 <= v157)
          v158 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v303 = v157 + 1;
            v304 = *(_BYTE *)(v159 + v157);
            *((_QWORD *)this + 1) = v303;
            v162 |= (unint64_t)(v304 & 0x7F) << v301;
            if (v304 < 0)
            {
              v301 += 7;
              v157 = v303;
              v14 = v302++ > 8;
              if (v14)
                goto LABEL_362;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v162) = 0;
          }
          break;
        }
LABEL_497:
        *(_DWORD *)(a1 + 120) = v162;
        goto LABEL_522;
      case 0x19u:
        *(_QWORD *)(a1 + 192) |= 0x80000uLL;
        v165 = *((_QWORD *)this + 1);
        v166 = *((_QWORD *)this + 2);
        v167 = *(_QWORD *)this;
        if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
        {
          v168 = 0;
          v169 = 0;
          v170 = 0;
          do
          {
            v171 = v165 + 1;
            *((_QWORD *)this + 1) = v165 + 1;
            v172 = *(_BYTE *)(v167 + v165);
            v170 |= (unint64_t)(v172 & 0x7F) << v168;
            if ((v172 & 0x80) == 0)
              goto LABEL_500;
            v168 += 7;
            v165 = v171;
            v14 = v169++ > 8;
          }
          while (!v14);
LABEL_369:
          LODWORD(v170) = 0;
          goto LABEL_500;
        }
        v305 = 0;
        v306 = 0;
        v170 = 0;
        if (v166 <= v165)
          v166 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v166 == v165)
          {
            LODWORD(v170) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v307 = v165 + 1;
            v308 = *(_BYTE *)(v167 + v165);
            *((_QWORD *)this + 1) = v307;
            v170 |= (unint64_t)(v308 & 0x7F) << v305;
            if (v308 < 0)
            {
              v305 += 7;
              v165 = v307;
              v14 = v306++ > 8;
              if (v14)
                goto LABEL_369;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v170) = 0;
          }
          break;
        }
LABEL_500:
        *(_DWORD *)(a1 + 116) = v170;
        goto LABEL_522;
      case 0x1Au:
        *(_QWORD *)(a1 + 192) |= 0x40000uLL;
        v173 = *((_QWORD *)this + 1);
        v174 = *((_QWORD *)this + 2);
        v175 = *(_QWORD *)this;
        if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
        {
          v176 = 0;
          v177 = 0;
          v178 = 0;
          do
          {
            v179 = v173 + 1;
            *((_QWORD *)this + 1) = v173 + 1;
            v180 = *(_BYTE *)(v175 + v173);
            v178 |= (unint64_t)(v180 & 0x7F) << v176;
            if ((v180 & 0x80) == 0)
              goto LABEL_503;
            v176 += 7;
            v173 = v179;
            v14 = v177++ > 8;
          }
          while (!v14);
LABEL_376:
          LODWORD(v178) = 0;
          goto LABEL_503;
        }
        v309 = 0;
        v310 = 0;
        v178 = 0;
        if (v174 <= v173)
          v174 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v174 == v173)
          {
            LODWORD(v178) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v311 = v173 + 1;
            v312 = *(_BYTE *)(v175 + v173);
            *((_QWORD *)this + 1) = v311;
            v178 |= (unint64_t)(v312 & 0x7F) << v309;
            if (v312 < 0)
            {
              v309 += 7;
              v173 = v311;
              v14 = v310++ > 8;
              if (v14)
                goto LABEL_376;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v178) = 0;
          }
          break;
        }
LABEL_503:
        *(_DWORD *)(a1 + 112) = v178;
        goto LABEL_522;
      case 0x1Bu:
        v181 = operator new();
        sub_21B81DCE4(v181);
        v182 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v181;
        if (v182)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
          v181 = *(_QWORD *)(a1 + 32);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v181 + 16))(v181, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_522:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 0x1Cu:
        *(_QWORD *)(a1 + 192) |= 0x400uLL;
        v183 = *((_QWORD *)this + 1);
        if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v183);
        goto LABEL_420;
      case 0x1Du:
        *(_QWORD *)(a1 + 192) |= 0x200uLL;
        v184 = *((_QWORD *)this + 1);
        if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v184);
        goto LABEL_420;
      case 0x1Eu:
        *(_QWORD *)(a1 + 192) |= 0x2000000uLL;
        v185 = *((_QWORD *)this + 1);
        if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v185);
        goto LABEL_420;
      case 0x1Fu:
        *(_QWORD *)(a1 + 192) |= 0x1000000000uLL;
        v186 = *((_QWORD *)this + 1);
        v187 = *((_QWORD *)this + 2);
        v188 = *(_QWORD *)this;
        if (v186 <= 0xFFFFFFFFFFFFFFF5 && v186 + 10 <= v187)
        {
          v189 = 0;
          v190 = 0;
          v191 = 0;
          do
          {
            v192 = v186 + 1;
            *((_QWORD *)this + 1) = v186 + 1;
            v193 = *(_BYTE *)(v188 + v186);
            v191 |= (unint64_t)(v193 & 0x7F) << v189;
            if ((v193 & 0x80) == 0)
              goto LABEL_506;
            v189 += 7;
            v186 = v192;
            v14 = v190++ > 8;
          }
          while (!v14);
LABEL_383:
          LODWORD(v191) = 0;
          goto LABEL_506;
        }
        v313 = 0;
        v314 = 0;
        v191 = 0;
        if (v187 <= v186)
          v187 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v187 == v186)
          {
            LODWORD(v191) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v315 = v186 + 1;
            v316 = *(_BYTE *)(v188 + v186);
            *((_QWORD *)this + 1) = v315;
            v191 |= (unint64_t)(v316 & 0x7F) << v313;
            if (v316 < 0)
            {
              v313 += 7;
              v186 = v315;
              v14 = v314++ > 8;
              if (v14)
                goto LABEL_383;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v191) = 0;
          }
          break;
        }
LABEL_506:
        *(_DWORD *)(a1 + 184) = v191;
        goto LABEL_522;
      case 0x20u:
        *(_QWORD *)(a1 + 192) |= 0x20uLL;
        v194 = *((_QWORD *)this + 1);
        v195 = *((_QWORD *)this + 2);
        v196 = *(_QWORD *)this;
        if (v194 <= 0xFFFFFFFFFFFFFFF5 && v194 + 10 <= v195)
        {
          v197 = 0;
          v198 = 0;
          v199 = 0;
          do
          {
            v200 = v194 + 1;
            *((_QWORD *)this + 1) = v194 + 1;
            v201 = *(_BYTE *)(v196 + v194);
            v199 |= (unint64_t)(v201 & 0x7F) << v197;
            if ((v201 & 0x80) == 0)
              goto LABEL_509;
            v197 += 7;
            v194 = v200;
            v14 = v198++ > 8;
          }
          while (!v14);
LABEL_390:
          v199 = 0;
          goto LABEL_509;
        }
        v317 = 0;
        v318 = 0;
        v199 = 0;
        if (v195 <= v194)
          v195 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v195 == v194)
          {
            v199 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v319 = v194 + 1;
            v320 = *(_BYTE *)(v196 + v194);
            *((_QWORD *)this + 1) = v319;
            v199 |= (unint64_t)(v320 & 0x7F) << v317;
            if (v320 < 0)
            {
              v317 += 7;
              v194 = v319;
              v14 = v318++ > 8;
              if (v14)
                goto LABEL_390;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v199 = 0;
          }
          break;
        }
LABEL_509:
        *(_QWORD *)(a1 + 56) = v199;
        goto LABEL_522;
      case 0x21u:
        *(_QWORD *)(a1 + 192) |= 0x10000000uLL;
        v202 = *((_QWORD *)this + 1);
        v203 = *((_QWORD *)this + 2);
        v204 = *(_QWORD *)this;
        if (v202 <= 0xFFFFFFFFFFFFFFF5 && v202 + 10 <= v203)
        {
          v205 = 0;
          v206 = 0;
          v207 = 0;
          do
          {
            v208 = v202 + 1;
            *((_QWORD *)this + 1) = v202 + 1;
            v209 = *(_BYTE *)(v204 + v202);
            v207 |= (unint64_t)(v209 & 0x7F) << v205;
            if ((v209 & 0x80) == 0)
              goto LABEL_512;
            v205 += 7;
            v202 = v208;
            v14 = v206++ > 8;
          }
          while (!v14);
LABEL_397:
          LODWORD(v207) = 0;
          goto LABEL_512;
        }
        v321 = 0;
        v322 = 0;
        v207 = 0;
        if (v203 <= v202)
          v203 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v203 == v202)
          {
            LODWORD(v207) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v323 = v202 + 1;
            v324 = *(_BYTE *)(v204 + v202);
            *((_QWORD *)this + 1) = v323;
            v207 |= (unint64_t)(v324 & 0x7F) << v321;
            if (v324 < 0)
            {
              v321 += 7;
              v202 = v323;
              v14 = v322++ > 8;
              if (v14)
                goto LABEL_397;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v207) = 0;
          }
          break;
        }
LABEL_512:
        *(_DWORD *)(a1 + 152) = v207;
        goto LABEL_522;
      case 0x22u:
        *(_QWORD *)(a1 + 192) |= 0x2000000000uLL;
        v210 = *((_QWORD *)this + 1);
        v211 = *((_QWORD *)this + 2);
        v212 = *(_QWORD *)this;
        if (v210 <= 0xFFFFFFFFFFFFFFF5 && v210 + 10 <= v211)
        {
          v213 = 0;
          v214 = 0;
          v215 = 0;
          do
          {
            v216 = v210 + 1;
            *((_QWORD *)this + 1) = v210 + 1;
            v217 = *(_BYTE *)(v212 + v210);
            v215 |= (unint64_t)(v217 & 0x7F) << v213;
            if ((v217 & 0x80) == 0)
              goto LABEL_515;
            v213 += 7;
            v210 = v216;
            v14 = v214++ > 8;
          }
          while (!v14);
LABEL_404:
          LODWORD(v215) = 0;
          goto LABEL_515;
        }
        v325 = 0;
        v326 = 0;
        v215 = 0;
        if (v211 <= v210)
          v211 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v211 == v210)
          {
            LODWORD(v215) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v327 = v210 + 1;
            v328 = *(_BYTE *)(v212 + v210);
            *((_QWORD *)this + 1) = v327;
            v215 |= (unint64_t)(v328 & 0x7F) << v325;
            if (v328 < 0)
            {
              v325 += 7;
              v210 = v327;
              v14 = v326++ > 8;
              if (v14)
                goto LABEL_404;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v215) = 0;
          }
          break;
        }
LABEL_515:
        *(_DWORD *)(a1 + 188) = v215;
        goto LABEL_522;
      case 0x23u:
        *(_QWORD *)(a1 + 192) |= 0x40uLL;
        v218 = *((_QWORD *)this + 1);
        v219 = *((_QWORD *)this + 2);
        v220 = *(_QWORD *)this;
        if (v218 <= 0xFFFFFFFFFFFFFFF5 && v218 + 10 <= v219)
        {
          v221 = 0;
          v222 = 0;
          v223 = 0;
          do
          {
            v224 = v218 + 1;
            *((_QWORD *)this + 1) = v218 + 1;
            v225 = *(_BYTE *)(v220 + v218);
            v223 |= (unint64_t)(v225 & 0x7F) << v221;
            if ((v225 & 0x80) == 0)
              goto LABEL_518;
            v221 += 7;
            v218 = v224;
            v14 = v222++ > 8;
          }
          while (!v14);
LABEL_411:
          LODWORD(v223) = 0;
          goto LABEL_518;
        }
        v329 = 0;
        v330 = 0;
        v223 = 0;
        if (v219 <= v218)
          v219 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v219 == v218)
          {
            LODWORD(v223) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v331 = v218 + 1;
            v332 = *(_BYTE *)(v220 + v218);
            *((_QWORD *)this + 1) = v331;
            v223 |= (unint64_t)(v332 & 0x7F) << v329;
            if (v332 < 0)
            {
              v329 += 7;
              v218 = v331;
              v14 = v330++ > 8;
              if (v14)
                goto LABEL_411;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v223) = 0;
          }
          break;
        }
LABEL_518:
        *(_DWORD *)(a1 + 64) = v223;
        goto LABEL_522;
      case 0x24u:
        *(_QWORD *)(a1 + 192) |= 0x80000000uLL;
        v226 = *((_QWORD *)this + 1);
        if (v226 > 0xFFFFFFFFFFFFFFFBLL || v226 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v226);
        goto LABEL_420;
      case 0x25u:
        *(_QWORD *)(a1 + 192) |= 0x100000000uLL;
        v227 = *((_QWORD *)this + 1);
        if (v227 > 0xFFFFFFFFFFFFFFFBLL || v227 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v227);
        goto LABEL_420;
      case 0x26u:
        *(_QWORD *)(a1 + 192) |= 0x200000000uLL;
        v228 = *((_QWORD *)this + 1);
        if (v228 <= 0xFFFFFFFFFFFFFFFBLL && v228 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v228);
LABEL_420:
          v95 = *((_QWORD *)this + 1) + 4;
LABEL_421:
          *((_QWORD *)this + 1) = v95;
        }
        else
        {
LABEL_236:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_522;
      case 0x27u:
        *(_QWORD *)(a1 + 192) |= 0x400000000uLL;
        v229 = *((_QWORD *)this + 1);
        v230 = *((_QWORD *)this + 2);
        v231 = *(_QWORD *)this;
        if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
        {
          v232 = 0;
          v233 = 0;
          v234 = 0;
          do
          {
            v235 = v229 + 1;
            *((_QWORD *)this + 1) = v229 + 1;
            v236 = *(_BYTE *)(v231 + v229);
            v234 |= (unint64_t)(v236 & 0x7F) << v232;
            if ((v236 & 0x80) == 0)
              goto LABEL_521;
            v232 += 7;
            v229 = v235;
            v14 = v233++ > 8;
          }
          while (!v14);
LABEL_418:
          LODWORD(v234) = 0;
          goto LABEL_521;
        }
        v333 = 0;
        v334 = 0;
        v234 = 0;
        if (v230 <= v229)
          v230 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v230 == v229)
          {
            LODWORD(v234) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v335 = v229 + 1;
            v336 = *(_BYTE *)(v231 + v229);
            *((_QWORD *)this + 1) = v335;
            v234 |= (unint64_t)(v336 & 0x7F) << v333;
            if (v336 < 0)
            {
              v333 += 7;
              v229 = v335;
              v14 = v334++ > 8;
              if (v14)
                goto LABEL_418;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v234) = 0;
          }
          break;
        }
LABEL_521:
        *(_DWORD *)(a1 + 176) = v234;
        goto LABEL_522;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_522;
    }
  }
}

uint64_t sub_21B845E30(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  const PB::Base *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(result + 192);
  if ((v4 & 0x8000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_QWORD *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  if ((*(_QWORD *)(v3 + 192) & 0x40000) != 0)
LABEL_27:
    result = PB::Writer::writeVarInt(this);
LABEL_28:
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0)
        goto LABEL_33;
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x400000000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  if ((*(_QWORD *)(v3 + 192) & 0x400000000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B846290(uint64_t result)
{
  *(_QWORD *)result = &off_24DF388E0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B8462A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8462CC(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_24DF388E0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B8462F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isWifiAssociated");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B846344(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8464D0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B8464F0(_QWORD *result)
{
  *result = &off_24DF38918;
  result[1] = 0;
  return result;
}

void sub_21B846500(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38918;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B846540(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38918;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B846594(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF38918;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B83F0E0(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B846610(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B846660(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF38790;
        *(_QWORD *)(v20 + 112) = 0;
        *(_DWORD *)(v20 + 180) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B846838(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B846854(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38950;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B84686C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B846890(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_24DF38950;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B8468BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "walkingVariable01", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B846908(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B846AA0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8));
  return result;
}

double sub_21B846ABC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF38988;
  *(_DWORD *)(a1 + 76) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B846AE0(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF38988;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B846B30(PB::Base *a1)
{
  sub_21B846AE0(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B846B54(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  *(_QWORD *)a1 = &off_24DF38988;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_BYTE *)(a2 + 76);
  if ((v5 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 64);
    v6 = 2;
    *(_BYTE *)(a1 + 76) = 2;
    *(_QWORD *)(a1 + 64) = v7;
    v5 = *(_BYTE *)(a2 + 76);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 76) & 1) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 56);
    v6 |= 1u;
    *(_BYTE *)(a1 + 76) = v6;
    *(_QWORD *)(a1 + 56) = v8;
    v5 = *(_BYTE *)(a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    v9 = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 76) = v6 | 4;
    *(_DWORD *)(a1 + 72) = v9;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_21B846C30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  if ((*(_BYTE *)(a1 + 76) & 1) != 0)
    PB::TextFormatter::format(this, "adjustedTimestamp", *(double *)(a1 + 56));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "gravity", v10);
  }
  v11 = *(_BYTE *)(a1 + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "rawProjectedSignal", *(float *)(a1 + 72));
    v11 = *(_BYTE *)(a1 + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B846D1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  unint64_t v89;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 76) |= 2u;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          v27 = *(_QWORD *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)this + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_118;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_92:
            v30 = 0;
            goto LABEL_118;
          }
          v64 = 0;
          v65 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v66 = v25 + 1;
              v67 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)this + 1) = v66;
              v30 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                v25 = v66;
                v18 = v65++ > 8;
                if (v18)
                  goto LABEL_92;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v30 = 0;
            }
            break;
          }
LABEL_118:
          *(_QWORD *)(a1 + 64) = v30;
          goto LABEL_139;
        case 2u:
          *(_BYTE *)(a1 + 76) |= 1u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)this + 2))
            goto LABEL_135;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v33);
          v34 = *((_QWORD *)this + 1) + 8;
          goto LABEL_138;
        case 3u:
          *(_BYTE *)(a1 + 76) |= 4u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_135;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            v69 = *(char **)(a1 + 40);
            v68 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              v73 = (char *)*v10;
              v74 = (v69 - (_BYTE *)*v10) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
LABEL_149:
                sub_21B796A0C();
              v76 = v68 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_21B796CD8(v11, v77);
                v73 = *(char **)(a1 + 32);
                v69 = *(char **)(a1 + 40);
              }
              else
              {
                v78 = 0;
              }
              v85 = &v78[4 * v74];
              *(_DWORD *)v85 = 0;
              v70 = v85 + 4;
              while (v69 != v73)
              {
                v86 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v85;
              *(_QWORD *)(a1 + 40) = v70;
              *(_QWORD *)(a1 + 48) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v69 = 0;
              v70 = v69 + 4;
            }
            *(_QWORD *)(a1 + 40) = v70;
            goto LABEL_133;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v36 = *((_QWORD *)this + 1);
          v37 = *((_QWORD *)this + 2);
          while (v36 < v37 && !*((_BYTE *)this + 24))
          {
            v39 = *(char **)(a1 + 40);
            v38 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v10;
              v42 = (v39 - (_BYTE *)*v10) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                goto LABEL_149;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_21B796CD8(v11, v45);
                v41 = *(char **)(a1 + 32);
                v39 = *(char **)(a1 + 40);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = 0;
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v47;
              *(_QWORD *)(a1 + 40) = v40;
              *(_QWORD *)(a1 + 48) = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v39 = 0;
              v40 = v39 + 4;
            }
            *(_QWORD *)(a1 + 40) = v40;
            v49 = *((_QWORD *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
              goto LABEL_97;
            *(v40 - 1) = *(_DWORD *)(*(_QWORD *)this + v49);
            v37 = *((_QWORD *)this + 2);
            v36 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v36;
          }
          goto LABEL_98;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)this + 1);
            v51 = *((_QWORD *)this + 2);
            while (v50 < v51 && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 16);
              v52 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*v8;
                v56 = (v53 - (_BYTE *)*v8) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_150;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v60 = (char *)sub_21B796CD8(v9, v59);
                  v55 = *(char **)(a1 + 8);
                  v53 = *(char **)(a1 + 16);
                }
                else
                {
                  v60 = 0;
                }
                v61 = &v60[4 * v56];
                *(_DWORD *)v61 = 0;
                v54 = v61 + 4;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v61 - 1) = v62;
                  v61 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v61;
                *(_QWORD *)(a1 + 16) = v54;
                *(_QWORD *)(a1 + 24) = &v60[4 * v59];
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *(_QWORD *)(a1 + 16) = v54;
              v63 = *((_QWORD *)this + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
              {
LABEL_97:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)this + v63);
              v51 = *((_QWORD *)this + 2);
              v50 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v50;
            }
LABEL_98:
            PB::Reader::recallMark();
          }
          else
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v79 = (char *)*v8;
              v80 = (v72 - (_BYTE *)*v8) >> 2;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62)
LABEL_150:
                sub_21B796A0C();
              v82 = v71 - (_QWORD)v79;
              if (v82 >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                v84 = (char *)sub_21B796CD8(v9, v83);
                v79 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }
              else
              {
                v84 = 0;
              }
              v87 = &v84[4 * v80];
              *(_DWORD *)v87 = 0;
              v70 = v87 + 4;
              while (v72 != v79)
              {
                v88 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v87;
              *(_QWORD *)(a1 + 16) = v70;
              *(_QWORD *)(a1 + 24) = &v84[4 * v83];
              if (v79)
                operator delete(v79);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v70 = v72 + 4;
            }
            *(_QWORD *)(a1 + 16) = v70;
LABEL_133:
            v89 = *((_QWORD *)this + 1);
            if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((_QWORD *)this + 2))
            {
              *(v70 - 1) = *(_DWORD *)(*(_QWORD *)this + v89);
LABEL_137:
              v34 = *((_QWORD *)this + 1) + 4;
LABEL_138:
              *((_QWORD *)this + 1) = v34;
            }
            else
            {
LABEL_135:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_139:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_139;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8473C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(_BYTE *)(result + 76) & 1) == 0)
      goto LABEL_3;
LABEL_13:
    result = PB::Writer::write(this, *(double *)(v3 + 56));
    if ((*(_BYTE *)(v3 + 76) & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 76);
  if ((v4 & 1) != 0)
    goto LABEL_13;
LABEL_3:
  if ((v4 & 4) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(float *)(v3 + 72));
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_21B847480(uint64_t result)
{
  *(_QWORD *)result = &off_24DF389C0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B847498(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B8474BC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF389C0;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 36) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(_BYTE *)(a2 + 40) & 0x10) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 40) = v3 | 0x10;
  *(_DWORD *)(a1 + 28) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B84759C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalRotationRateFiltered", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "sample", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "verticalUserAcceleration", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "verticalRotationRateFiltered", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "walkSpeedFilteredSample", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8476AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8479B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 28));
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 28));
  return result;
}

uint64_t sub_21B847AA0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF389F8;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_21B847AB8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B847ADC(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)result = &off_24DF389F8;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_WORD *)(result + 68) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 48) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_BYTE *)(a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_BYTE *)(result + 65) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 16) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 52) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 24) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 32) = v12;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 64);
    *(_WORD *)(result + 68) = v3 | 0x200;
    *(_BYTE *)(result + 64) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 8) = v13;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B847C2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "fGpsAvailability");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "fractionalGrade", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "hrmin", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isStanding");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "metSource");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "rawGradeType");
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x10) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B847DBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_125;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 65) = v28;
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v55 = v29++;
                  v56 = *(_BYTE *)(v30 + v55);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_113;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_114;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 52) = v33;
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v59 = v35++;
                  v60 = *(_BYTE *)(v36 + v59);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_118;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_119;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_125;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_123;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_124;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 56) = v45;
LABEL_125:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_68:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_125;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 64) = v48;
              goto LABEL_125;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_125;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B848488(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_WORD *)(v3 + 68) & 0x200) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_21B8485E0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF38A30;
  *(_DWORD *)(a1 + 180) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

void sub_21B848624(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_24DF38A30;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
  PB::Base::~Base(this);
}

void sub_21B8486C4(PB::Base *a1)
{
  sub_21B848624(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8486E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;

  *(_QWORD *)a1 = &off_24DF38A30;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 180) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
    sub_21B796B90(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    sub_21B796B90(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 180) & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 176);
    *(_BYTE *)(a1 + 180) |= 1u;
    *(_DWORD *)(a1 + 176) = v8;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_21B84882C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "error");
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(this, "errorX");
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "errorY");
  }
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "errorZ");
  }
  v13 = *(float **)(a1 + 104);
  v14 = *(float **)(a1 + 112);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "intercept", v15);
  }
  if ((*(_BYTE *)(a1 + 180) & 1) != 0)
    PB::TextFormatter::format(this, "overlap", *(float *)(a1 + 176));
  v16 = *(float **)(a1 + 128);
  v17 = *(float **)(a1 + 136);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "slope", v18);
  }
  v19 = *(float **)(a1 + 152);
  v20 = *(float **)(a1 + 160);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "temperature", v21);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8489BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char *v161;
  _DWORD *v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  char *v168;
  _DWORD *v169;
  unint64_t v170;
  char *v171;
  unint64_t v172;
  char *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  char *v220;
  int v221;
  char *v222;
  int v223;
  unint64_t v224;
  char *v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char v230;
  unsigned int v231;
  unint64_t v233;
  char v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  char *v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char v243;
  unsigned int v244;
  unint64_t v246;
  char v247;
  unint64_t v248;
  char v249;
  char *v250;
  int v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char v255;
  unsigned int v256;
  unint64_t v258;
  char v259;
  unint64_t v260;
  char v261;
  char *v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  unsigned int v268;
  unint64_t v270;
  char v271;
  unint64_t v272;
  char v273;
  void **v276;
  void **v277;
  void **v278;
  void **v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void **v283;
  void **v284;
  void **v285;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)(a1 + 72);
    v277 = (void **)(a1 + 32);
    v278 = (void **)(a1 + 56);
    v9 = (_QWORD *)(a1 + 48);
    v276 = (void **)(a1 + 8);
    v10 = (_QWORD *)(a1 + 24);
    v11 = (_QWORD *)(a1 + 96);
    v285 = (void **)(a1 + 152);
    v282 = a1 + 168;
    v284 = (void **)(a1 + 104);
    v281 = a1 + 120;
    v283 = (void **)(a1 + 128);
    v279 = (void **)(a1 + 80);
    v280 = a1 + 144;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v80 = v14++ > 8;
        if (v80)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v23 != 2)
          {
            v161 = *(char **)(a1 + 136);
            v160 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v161 >= v160)
            {
              v176 = (char *)*v283;
              v177 = (v161 - (_BYTE *)*v283) >> 2;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62)
LABEL_482:
                sub_21B796A0C();
              v179 = v160 - (_QWORD)v176;
              if (v179 >> 1 > v178)
                v178 = v179 >> 1;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
                v180 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                v181 = (char *)sub_21B796CD8(v280, v180);
                v176 = *(char **)(a1 + 128);
                v161 = *(char **)(a1 + 136);
              }
              else
              {
                v181 = 0;
              }
              v218 = &v181[4 * v177];
              *(_DWORD *)v218 = 0;
              v162 = v218 + 4;
              while (v161 != v176)
              {
                v219 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                *((_DWORD *)v218 - 1) = v219;
                v218 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v218;
              *(_QWORD *)(a1 + 136) = v162;
              *(_QWORD *)(a1 + 144) = &v181[4 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_DWORD *)v161 = 0;
              v162 = v161 + 4;
            }
            *(_QWORD *)(a1 + 136) = v162;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          while (v24 < v25 && !*((_BYTE *)this + 24))
          {
            v27 = *(char **)(a1 + 136);
            v26 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*v283;
              v30 = (v27 - (_BYTE *)*v283) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_482;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)sub_21B796CD8(v280, v33);
                v29 = *(char **)(a1 + 128);
                v27 = *(char **)(a1 + 136);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = 0;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v35;
              *(_QWORD *)(a1 + 136) = v28;
              *(_QWORD *)(a1 + 144) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *(_QWORD *)(a1 + 136) = v28;
            v37 = *((_QWORD *)this + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
              goto LABEL_295;
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)this + v37);
            v25 = *((_QWORD *)this + 2);
            v24 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v24;
          }
          goto LABEL_296;
        case 2u:
          if (v23 != 2)
          {
            v164 = *(char **)(a1 + 112);
            v163 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v164 >= v163)
            {
              v182 = (char *)*v284;
              v183 = (v164 - (_BYTE *)*v284) >> 2;
              v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 62)
LABEL_483:
                sub_21B796A0C();
              v185 = v163 - (_QWORD)v182;
              if (v185 >> 1 > v184)
                v184 = v185 >> 1;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                v186 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (v186)
              {
                v187 = (char *)sub_21B796CD8(v281, v186);
                v182 = *(char **)(a1 + 104);
                v164 = *(char **)(a1 + 112);
              }
              else
              {
                v187 = 0;
              }
              v220 = &v187[4 * v183];
              *(_DWORD *)v220 = 0;
              v162 = v220 + 4;
              while (v164 != v182)
              {
                v221 = *((_DWORD *)v164 - 1);
                v164 -= 4;
                *((_DWORD *)v220 - 1) = v221;
                v220 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v220;
              *(_QWORD *)(a1 + 112) = v162;
              *(_QWORD *)(a1 + 120) = &v187[4 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_DWORD *)v164 = 0;
              v162 = v164 + 4;
            }
            *(_QWORD *)(a1 + 112) = v162;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 112);
            v40 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v284;
              v44 = (v41 - (_BYTE *)*v284) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_483;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_21B796CD8(v281, v47);
                v43 = *(char **)(a1 + 104);
                v41 = *(char **)(a1 + 112);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v49;
              *(_QWORD *)(a1 + 112) = v42;
              *(_QWORD *)(a1 + 120) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *(_QWORD *)(a1 + 112) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
              goto LABEL_295;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_296;
        case 3u:
          if (v23 != 2)
          {
            v166 = *(char **)(a1 + 160);
            v165 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v166 >= v165)
            {
              v188 = (char *)*v285;
              v189 = (v166 - (_BYTE *)*v285) >> 2;
              v190 = v189 + 1;
              if ((unint64_t)(v189 + 1) >> 62)
LABEL_484:
                sub_21B796A0C();
              v191 = v165 - (_QWORD)v188;
              if (v191 >> 1 > v190)
                v190 = v191 >> 1;
              if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                v192 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v192 = v190;
              if (v192)
              {
                v193 = (char *)sub_21B796CD8(v282, v192);
                v188 = *(char **)(a1 + 152);
                v166 = *(char **)(a1 + 160);
              }
              else
              {
                v193 = 0;
              }
              v222 = &v193[4 * v189];
              *(_DWORD *)v222 = 0;
              v162 = v222 + 4;
              while (v166 != v188)
              {
                v223 = *((_DWORD *)v166 - 1);
                v166 -= 4;
                *((_DWORD *)v222 - 1) = v223;
                v222 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v222;
              *(_QWORD *)(a1 + 160) = v162;
              *(_QWORD *)(a1 + 168) = &v193[4 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_DWORD *)v166 = 0;
              v162 = v166 + 4;
            }
            *(_QWORD *)(a1 + 160) = v162;
LABEL_374:
            v224 = *((_QWORD *)this + 1);
            if (v224 <= 0xFFFFFFFFFFFFFFFBLL && v224 + 4 <= *((_QWORD *)this + 2))
            {
              *(v162 - 1) = *(_DWORD *)(*(_QWORD *)this + v224);
LABEL_378:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_376:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_472;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          while (v52 < v53 && !*((_BYTE *)this + 24))
          {
            v55 = *(char **)(a1 + 160);
            v54 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v285;
              v58 = (v55 - (_BYTE *)*v285) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
                goto LABEL_484;
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_21B796CD8(v282, v61);
                v57 = *(char **)(a1 + 152);
                v55 = *(char **)(a1 + 160);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v63;
              *(_QWORD *)(a1 + 160) = v56;
              *(_QWORD *)(a1 + 168) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *(_QWORD *)(a1 + 160) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            {
LABEL_295:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_296;
            }
            *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
            v53 = *((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v52;
          }
          goto LABEL_296;
        case 4u:
          *(_BYTE *)(a1 + 180) |= 1u;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_376;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_378;
        case 5u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v67 >= *v11)
                {
                  v68 = (char *)*v279;
                  v69 = (v67 - (_BYTE *)*v279) >> 2;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62)
                    goto LABEL_485;
                  v71 = *v11 - (_QWORD)v68;
                  if (v71 >> 1 > v70)
                    v70 = v71 >> 1;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                    v72 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_21B796CD8((uint64_t)v11, v72);
                    v68 = *(char **)(a1 + 80);
                    v67 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[4 * v69];
                  *(_DWORD *)v74 = 0;
                  v75 = v74 + 4;
                  while (v67 != v68)
                  {
                    v76 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v74 - 1) = v76;
                    v74 -= 4;
                  }
                  *(_QWORD *)(a1 + 80) = v74;
                  *(_QWORD *)(a1 + 88) = v75;
                  *(_QWORD *)(a1 + 96) = &v73[4 * v72];
                  if (v68)
                    operator delete(v68);
                  v67 = v75;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 88) = v67;
                v78 = *((_QWORD *)this + 1);
                v77 = *((_QWORD *)this + 2);
                v79 = *(_QWORD *)this;
                v80 = v78 > 0xFFFFFFFFFFFFFFF5 || v78 + 10 > v77;
                if (v80)
                {
                  v81 = 0;
                  v82 = 0;
                  v88 = 0;
                  if (v77 <= v78)
                    v83 = *((_QWORD *)this + 1);
                  else
                    v83 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v83 == v78)
                      goto LABEL_280;
                    v84 = v78++;
                    v85 = *(_BYTE *)(v79 + v84);
                    *((_QWORD *)this + 1) = v78;
                    v88 |= (unint64_t)(v85 & 0x7F) << v81;
                    if ((v85 & 0x80) == 0)
                      break;
                    v81 += 7;
                    v80 = v82++ > 8;
                    if (v80)
                    {
                      LODWORD(v88) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v88) = 0;
LABEL_141:
                  v89 = v84 + 1;
                }
                else
                {
                  v86 = 0;
                  v87 = 0;
                  v88 = 0;
                  while (1)
                  {
                    v89 = v78 + 1;
                    *((_QWORD *)this + 1) = v78 + 1;
                    v90 = *(_BYTE *)(v79 + v78);
                    v88 |= (unint64_t)(v90 & 0x7F) << v86;
                    if ((v90 & 0x80) == 0)
                      break;
                    v86 += 7;
                    v78 = v89;
                    v80 = v87++ > 8;
                    if (v80)
                    {
                      LODWORD(v88) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v88;
              }
              while (v89 < v77 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v168 = *(char **)(a1 + 88);
          v167 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v168 >= v167)
          {
            v194 = (char *)*v279;
            v195 = (v168 - (_BYTE *)*v279) >> 2;
            v196 = v195 + 1;
            if ((unint64_t)(v195 + 1) >> 62)
LABEL_485:
              sub_21B796A0C();
            v197 = v167 - (_QWORD)v194;
            if (v197 >> 1 > v196)
              v196 = v197 >> 1;
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
              v198 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v198 = v196;
            if (v198)
            {
              v199 = (char *)sub_21B796CD8((uint64_t)v11, v198);
              v194 = *(char **)(a1 + 80);
              v168 = *(char **)(a1 + 88);
            }
            else
            {
              v199 = 0;
            }
            v225 = &v199[4 * v195];
            *(_DWORD *)v225 = 0;
            v169 = v225 + 4;
            while (v168 != v194)
            {
              v226 = *((_DWORD *)v168 - 1);
              v168 -= 4;
              *((_DWORD *)v225 - 1) = v226;
              v225 -= 4;
            }
            *(_QWORD *)(a1 + 80) = v225;
            *(_QWORD *)(a1 + 88) = v169;
            *(_QWORD *)(a1 + 96) = &v199[4 * v198];
            if (v194)
              operator delete(v194);
          }
          else
          {
            *(_DWORD *)v168 = 0;
            v169 = v168 + 4;
          }
          *(_QWORD *)(a1 + 88) = v169;
          v227 = *((_QWORD *)this + 1);
          v228 = *((_QWORD *)this + 2);
          v229 = *(_QWORD *)this;
          v230 = 0;
          v231 = 0;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            v235 = 0;
            while (1)
            {
              v236 = v227 + 1;
              *((_QWORD *)this + 1) = v227 + 1;
              v237 = *(_BYTE *)(v229 + v227);
              v235 |= (unint64_t)(v237 & 0x7F) << v230;
              if ((v237 & 0x80) == 0)
                goto LABEL_471;
              v230 += 7;
              v227 = v236;
              v80 = v231++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v228 <= v227)
            v228 = *((_QWORD *)this + 1);
          while (v228 != v227)
          {
            v233 = v227 + 1;
            v234 = *(_BYTE *)(v229 + v227);
            *((_QWORD *)this + 1) = v233;
            v235 |= (unint64_t)(v234 & 0x7F) << v230;
            if ((v234 & 0x80) == 0)
              goto LABEL_464;
            v230 += 7;
            v227 = v233;
            v80 = v231++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 6u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v67 >= *v10)
                {
                  v91 = (char *)*v276;
                  v92 = (v67 - (_BYTE *)*v276) >> 2;
                  v93 = v92 + 1;
                  if ((unint64_t)(v92 + 1) >> 62)
                    goto LABEL_486;
                  v94 = *v10 - (_QWORD)v91;
                  if (v94 >> 1 > v93)
                    v93 = v94 >> 1;
                  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                    v95 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v95 = v93;
                  if (v95)
                  {
                    v96 = (char *)sub_21B796CD8((uint64_t)v10, v95);
                    v91 = *(char **)(a1 + 8);
                    v67 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v96 = 0;
                  }
                  v97 = &v96[4 * v92];
                  *(_DWORD *)v97 = 0;
                  v98 = v97 + 4;
                  while (v67 != v91)
                  {
                    v99 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v97 - 1) = v99;
                    v97 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v97;
                  *(_QWORD *)(a1 + 16) = v98;
                  *(_QWORD *)(a1 + 24) = &v96[4 * v95];
                  if (v91)
                    operator delete(v91);
                  v67 = v98;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 16) = v67;
                v101 = *((_QWORD *)this + 1);
                v100 = *((_QWORD *)this + 2);
                v102 = *(_QWORD *)this;
                if (v101 > 0xFFFFFFFFFFFFFFF5 || v101 + 10 > v100)
                {
                  v104 = 0;
                  v105 = 0;
                  v111 = 0;
                  if (v100 <= v101)
                    v106 = *((_QWORD *)this + 1);
                  else
                    v106 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v106 == v101)
                      goto LABEL_280;
                    v107 = v101++;
                    v108 = *(_BYTE *)(v102 + v107);
                    *((_QWORD *)this + 1) = v101;
                    v111 |= (unint64_t)(v108 & 0x7F) << v104;
                    if ((v108 & 0x80) == 0)
                      break;
                    v104 += 7;
                    v80 = v105++ > 8;
                    if (v80)
                    {
                      LODWORD(v111) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v111) = 0;
LABEL_186:
                  v112 = v107 + 1;
                }
                else
                {
                  v109 = 0;
                  v110 = 0;
                  v111 = 0;
                  while (1)
                  {
                    v112 = v101 + 1;
                    *((_QWORD *)this + 1) = v101 + 1;
                    v113 = *(_BYTE *)(v102 + v101);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0)
                      break;
                    v109 += 7;
                    v101 = v112;
                    v80 = v110++ > 8;
                    if (v80)
                    {
                      LODWORD(v111) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v111;
              }
              while (v112 < v100 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v171 = *(char **)(a1 + 16);
          v170 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v171 >= v170)
          {
            v200 = (char *)*v276;
            v201 = (v171 - (_BYTE *)*v276) >> 2;
            v202 = v201 + 1;
            if ((unint64_t)(v201 + 1) >> 62)
LABEL_486:
              sub_21B796A0C();
            v203 = v170 - (_QWORD)v200;
            if (v203 >> 1 > v202)
              v202 = v203 >> 1;
            if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
              v204 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v204 = v202;
            if (v204)
            {
              v205 = (char *)sub_21B796CD8((uint64_t)v10, v204);
              v200 = *(char **)(a1 + 8);
              v171 = *(char **)(a1 + 16);
            }
            else
            {
              v205 = 0;
            }
            v238 = &v205[4 * v201];
            *(_DWORD *)v238 = 0;
            v169 = v238 + 4;
            while (v171 != v200)
            {
              v239 = *((_DWORD *)v171 - 1);
              v171 -= 4;
              *((_DWORD *)v238 - 1) = v239;
              v238 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v238;
            *(_QWORD *)(a1 + 16) = v169;
            *(_QWORD *)(a1 + 24) = &v205[4 * v204];
            if (v200)
              operator delete(v200);
          }
          else
          {
            *(_DWORD *)v171 = 0;
            v169 = v171 + 4;
          }
          *(_QWORD *)(a1 + 16) = v169;
          v240 = *((_QWORD *)this + 1);
          v241 = *((_QWORD *)this + 2);
          v242 = *(_QWORD *)this;
          v243 = 0;
          v244 = 0;
          if (v240 <= 0xFFFFFFFFFFFFFFF5 && v240 + 10 <= v241)
          {
            v235 = 0;
            while (1)
            {
              v248 = v240 + 1;
              *((_QWORD *)this + 1) = v240 + 1;
              v249 = *(_BYTE *)(v242 + v240);
              v235 |= (unint64_t)(v249 & 0x7F) << v243;
              if ((v249 & 0x80) == 0)
                goto LABEL_471;
              v243 += 7;
              v240 = v248;
              v80 = v244++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v241 <= v240)
            v241 = *((_QWORD *)this + 1);
          while (v241 != v240)
          {
            v246 = v240 + 1;
            v247 = *(_BYTE *)(v242 + v240);
            *((_QWORD *)this + 1) = v246;
            v235 |= (unint64_t)(v247 & 0x7F) << v243;
            if ((v247 & 0x80) == 0)
              goto LABEL_464;
            v243 += 7;
            v240 = v246;
            v80 = v244++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 7u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v67 >= *v9)
                {
                  v114 = (char *)*v277;
                  v115 = (v67 - (_BYTE *)*v277) >> 2;
                  v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 62)
                    goto LABEL_487;
                  v117 = *v9 - (_QWORD)v114;
                  if (v117 >> 1 > v116)
                    v116 = v117 >> 1;
                  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                    v118 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    v119 = (char *)sub_21B796CD8((uint64_t)v9, v118);
                    v114 = *(char **)(a1 + 32);
                    v67 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v120 = &v119[4 * v115];
                  *(_DWORD *)v120 = 0;
                  v121 = v120 + 4;
                  while (v67 != v114)
                  {
                    v122 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v120 - 1) = v122;
                    v120 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v120;
                  *(_QWORD *)(a1 + 40) = v121;
                  *(_QWORD *)(a1 + 48) = &v119[4 * v118];
                  if (v114)
                    operator delete(v114);
                  v67 = v121;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 40) = v67;
                v124 = *((_QWORD *)this + 1);
                v123 = *((_QWORD *)this + 2);
                v125 = *(_QWORD *)this;
                if (v124 > 0xFFFFFFFFFFFFFFF5 || v124 + 10 > v123)
                {
                  v127 = 0;
                  v128 = 0;
                  v134 = 0;
                  if (v123 <= v124)
                    v129 = *((_QWORD *)this + 1);
                  else
                    v129 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v129 == v124)
                      goto LABEL_280;
                    v130 = v124++;
                    v131 = *(_BYTE *)(v125 + v130);
                    *((_QWORD *)this + 1) = v124;
                    v134 |= (unint64_t)(v131 & 0x7F) << v127;
                    if ((v131 & 0x80) == 0)
                      break;
                    v127 += 7;
                    v80 = v128++ > 8;
                    if (v80)
                    {
                      LODWORD(v134) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v134) = 0;
LABEL_231:
                  v135 = v130 + 1;
                }
                else
                {
                  v132 = 0;
                  v133 = 0;
                  v134 = 0;
                  while (1)
                  {
                    v135 = v124 + 1;
                    *((_QWORD *)this + 1) = v124 + 1;
                    v136 = *(_BYTE *)(v125 + v124);
                    v134 |= (unint64_t)(v136 & 0x7F) << v132;
                    if ((v136 & 0x80) == 0)
                      break;
                    v132 += 7;
                    v124 = v135;
                    v80 = v133++ > 8;
                    if (v80)
                    {
                      LODWORD(v134) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v134;
              }
              while (v135 < v123 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v173 = *(char **)(a1 + 40);
          v172 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v173 >= v172)
          {
            v206 = (char *)*v277;
            v207 = (v173 - (_BYTE *)*v277) >> 2;
            v208 = v207 + 1;
            if ((unint64_t)(v207 + 1) >> 62)
LABEL_487:
              sub_21B796A0C();
            v209 = v172 - (_QWORD)v206;
            if (v209 >> 1 > v208)
              v208 = v209 >> 1;
            if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL)
              v210 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v210 = v208;
            if (v210)
            {
              v211 = (char *)sub_21B796CD8((uint64_t)v9, v210);
              v206 = *(char **)(a1 + 32);
              v173 = *(char **)(a1 + 40);
            }
            else
            {
              v211 = 0;
            }
            v250 = &v211[4 * v207];
            *(_DWORD *)v250 = 0;
            v169 = v250 + 4;
            while (v173 != v206)
            {
              v251 = *((_DWORD *)v173 - 1);
              v173 -= 4;
              *((_DWORD *)v250 - 1) = v251;
              v250 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v250;
            *(_QWORD *)(a1 + 40) = v169;
            *(_QWORD *)(a1 + 48) = &v211[4 * v210];
            if (v206)
              operator delete(v206);
          }
          else
          {
            *(_DWORD *)v173 = 0;
            v169 = v173 + 4;
          }
          *(_QWORD *)(a1 + 40) = v169;
          v252 = *((_QWORD *)this + 1);
          v253 = *((_QWORD *)this + 2);
          v254 = *(_QWORD *)this;
          v255 = 0;
          v256 = 0;
          if (v252 <= 0xFFFFFFFFFFFFFFF5 && v252 + 10 <= v253)
          {
            v235 = 0;
            while (1)
            {
              v260 = v252 + 1;
              *((_QWORD *)this + 1) = v252 + 1;
              v261 = *(_BYTE *)(v254 + v252);
              v235 |= (unint64_t)(v261 & 0x7F) << v255;
              if ((v261 & 0x80) == 0)
                goto LABEL_471;
              v255 += 7;
              v252 = v260;
              v80 = v256++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v253 <= v252)
            v253 = *((_QWORD *)this + 1);
          while (v253 != v252)
          {
            v258 = v252 + 1;
            v259 = *(_BYTE *)(v254 + v252);
            *((_QWORD *)this + 1) = v258;
            v235 |= (unint64_t)(v259 & 0x7F) << v255;
            if ((v259 & 0x80) == 0)
              goto LABEL_464;
            v255 += 7;
            v252 = v258;
            v80 = v256++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 8u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v67 >= *v8)
                {
                  v137 = (char *)*v278;
                  v138 = (v67 - (_BYTE *)*v278) >> 2;
                  v139 = v138 + 1;
                  if ((unint64_t)(v138 + 1) >> 62)
                    goto LABEL_488;
                  v140 = *v8 - (_QWORD)v137;
                  if (v140 >> 1 > v139)
                    v139 = v140 >> 1;
                  if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
                    v141 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v141 = v139;
                  if (v141)
                  {
                    v142 = (char *)sub_21B796CD8((uint64_t)v8, v141);
                    v137 = *(char **)(a1 + 56);
                    v67 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v142 = 0;
                  }
                  v143 = &v142[4 * v138];
                  *(_DWORD *)v143 = 0;
                  v144 = v143 + 4;
                  while (v67 != v137)
                  {
                    v145 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v143 - 1) = v145;
                    v143 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v143;
                  *(_QWORD *)(a1 + 64) = v144;
                  *(_QWORD *)(a1 + 72) = &v142[4 * v141];
                  if (v137)
                    operator delete(v137);
                  v67 = v144;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 64) = v67;
                v147 = *((_QWORD *)this + 1);
                v146 = *((_QWORD *)this + 2);
                v148 = *(_QWORD *)this;
                if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v146)
                {
                  v155 = 0;
                  v156 = 0;
                  v157 = 0;
                  while (1)
                  {
                    v158 = v147 + 1;
                    *((_QWORD *)this + 1) = v147 + 1;
                    v159 = *(_BYTE *)(v148 + v147);
                    v157 |= (unint64_t)(v159 & 0x7F) << v155;
                    if ((v159 & 0x80) == 0)
                      goto LABEL_277;
                    v155 += 7;
                    v147 = v158;
                    v80 = v156++ > 8;
                    if (v80)
                    {
                      LODWORD(v157) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                v150 = 0;
                v151 = 0;
                v157 = 0;
                if (v146 <= v147)
                  v152 = *((_QWORD *)this + 1);
                else
                  v152 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v152 == v147)
                  {
LABEL_280:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v67 - 1) = 0;
                    goto LABEL_296;
                  }
                  v153 = v147++;
                  v154 = *(_BYTE *)(v148 + v153);
                  *((_QWORD *)this + 1) = v147;
                  v157 |= (unint64_t)(v154 & 0x7F) << v150;
                  if ((v154 & 0x80) == 0)
                    break;
                  v150 += 7;
                  v80 = v151++ > 8;
                  if (v80)
                  {
                    LODWORD(v157) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v157) = 0;
LABEL_276:
                v158 = v153 + 1;
LABEL_277:
                *((_DWORD *)v67 - 1) = v157;
              }
              while (v158 < v146 && !*((_BYTE *)this + 24));
            }
LABEL_296:
            PB::Reader::recallMark();
          }
          else
          {
            v175 = *(char **)(a1 + 64);
            v174 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v175 >= v174)
            {
              v212 = (char *)*v278;
              v213 = (v175 - (_BYTE *)*v278) >> 2;
              v214 = v213 + 1;
              if ((unint64_t)(v213 + 1) >> 62)
LABEL_488:
                sub_21B796A0C();
              v215 = v174 - (_QWORD)v212;
              if (v215 >> 1 > v214)
                v214 = v215 >> 1;
              if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
                v216 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v216 = v214;
              if (v216)
              {
                v217 = (char *)sub_21B796CD8((uint64_t)v8, v216);
                v212 = *(char **)(a1 + 56);
                v175 = *(char **)(a1 + 64);
              }
              else
              {
                v217 = 0;
              }
              v262 = &v217[4 * v213];
              *(_DWORD *)v262 = 0;
              v169 = v262 + 4;
              while (v175 != v212)
              {
                v263 = *((_DWORD *)v175 - 1);
                v175 -= 4;
                *((_DWORD *)v262 - 1) = v263;
                v262 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v262;
              *(_QWORD *)(a1 + 64) = v169;
              *(_QWORD *)(a1 + 72) = &v217[4 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_DWORD *)v175 = 0;
              v169 = v175 + 4;
            }
            *(_QWORD *)(a1 + 64) = v169;
            v264 = *((_QWORD *)this + 1);
            v265 = *((_QWORD *)this + 2);
            v266 = *(_QWORD *)this;
            v267 = 0;
            v268 = 0;
            if (v264 > 0xFFFFFFFFFFFFFFF5 || v264 + 10 > v265)
            {
              v235 = 0;
              if (v265 <= v264)
                v265 = *((_QWORD *)this + 1);
              while (v265 != v264)
              {
                v270 = v264 + 1;
                v271 = *(_BYTE *)(v266 + v264);
                *((_QWORD *)this + 1) = v270;
                v235 |= (unint64_t)(v271 & 0x7F) << v267;
                if ((v271 & 0x80) == 0)
                {
LABEL_464:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v235) = 0;
                  goto LABEL_471;
                }
                v267 += 7;
                v264 = v270;
                v80 = v268++ > 8;
                if (v80)
                {
LABEL_470:
                  LODWORD(v235) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v235) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v235 = 0;
              while (1)
              {
                v272 = v264 + 1;
                *((_QWORD *)this + 1) = v264 + 1;
                v273 = *(_BYTE *)(v266 + v264);
                v235 |= (unint64_t)(v273 & 0x7F) << v267;
                if ((v273 & 0x80) == 0)
                  break;
                v267 += 7;
                v264 = v272;
                v80 = v268++ > 8;
                if (v80)
                  goto LABEL_470;
              }
            }
LABEL_471:
            *(v169 - 1) = v235;
          }
LABEL_472:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_472;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B849D7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = *(float **)(result + 128);
  v5 = *(float **)(result + 136);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 104);
  v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 152);
  v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  if ((*(_BYTE *)(v3 + 180) & 1) != 0)
    result = PB::Writer::write(this, *(float *)(v3 + 176));
  v13 = *(_QWORD *)(v3 + 80);
  v14 = *(_QWORD *)(v3 + 88);
  while (v13 != v14)
  {
    v13 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v15 = *(_QWORD *)(v3 + 8);
  v16 = *(_QWORD *)(v3 + 16);
  while (v15 != v16)
  {
    v15 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v17 = *(_QWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 40);
  while (v17 != v18)
  {
    v17 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v20 = *(_QWORD *)(v3 + 56);
  v19 = *(_QWORD *)(v3 + 64);
  while (v20 != v19)
  {
    v20 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_21B849E9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38A68;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B849EB4(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF38A68;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B849EF4(PB::Base *a1)
{
  sub_21B849EB4(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B849F18(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF38A68;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2)
    sub_21B7968C4(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_21B849F8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "pose", v7);
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B84A014(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) != 2)
        {
          v38 = *(char **)(a1 + 16);
          v37 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v38 >= v37)
          {
            v40 = (char *)*v8;
            v41 = (v38 - (_BYTE *)*v8) >> 3;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61)
LABEL_84:
              sub_21B796A0C();
            v43 = v37 - (_QWORD)v40;
            if (v43 >> 2 > v42)
              v42 = v43 >> 2;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)sub_21B796A20(v9, v44);
              v40 = *(char **)(a1 + 8);
              v38 = *(char **)(a1 + 16);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[8 * v41];
            *(_QWORD *)v46 = 0;
            v39 = v46 + 8;
            while (v38 != v40)
            {
              v47 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v46 - 1) = v47;
              v46 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v46;
            *(_QWORD *)(a1 + 16) = v39;
            *(_QWORD *)(a1 + 24) = &v45[8 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_QWORD *)v38 = 0;
            v39 = v38 + 8;
          }
          *(_QWORD *)(a1 + 16) = v39;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v39 - 1) = *(_QWORD *)(*(_QWORD *)this + v48);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        while (v23 < v24 && !*((_BYTE *)this + 24))
        {
          v26 = *(char **)(a1 + 16);
          v25 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v26 >= v25)
          {
            v28 = (char *)*v8;
            v29 = (v26 - (_BYTE *)*v8) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_84;
            v31 = v25 - (_QWORD)v28;
            if (v31 >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)sub_21B796A20(v9, v32);
              v28 = *(char **)(a1 + 8);
              v26 = *(char **)(a1 + 16);
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = 0;
            v27 = v34 + 8;
            while (v26 != v28)
            {
              v35 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v34;
            *(_QWORD *)(a1 + 16) = v27;
            *(_QWORD *)(a1 + 24) = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v26 = 0;
            v27 = v26 + 8;
          }
          *(_QWORD *)(a1 + 16) = v27;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v27 - 1) = *(_QWORD *)(*(_QWORD *)this + v36);
          v24 = *((_QWORD *)this + 2);
          v23 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v23;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v13 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_73;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_75:
          *((_QWORD *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this) & 1) == 0)
          return 0;
      }
LABEL_76:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B84A3C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 32));
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6);
  }
  return result;
}

uint64_t sub_21B84A424(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38AA0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_21B84A43C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84A460(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)result = &off_24DF38AA0;
  *(_DWORD *)(result + 100) = 0;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64);
    v3 = 128;
    *(_WORD *)(result + 100) = 128;
    *(_QWORD *)(result + 64) = v4;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 100) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 100) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_WORD *)(a2 + 100);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 24) = v7;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 56) = v8;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 48) = v9;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 40) = v10;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 32) = v11;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 100) = v3;
  *(_QWORD *)(result + 72) = v12;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 84) = v13;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v14;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *(_DWORD *)(a2 + 92);
  v3 |= 0x1000u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 92) = v15;
  v2 = *(_WORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return result;
LABEL_30:
    v17 = *(_BYTE *)(a2 + 96);
    *(_WORD *)(result + 100) = v3 | 0x2000;
    *(_BYTE *)(result + 96) = v17;
    return result;
  }
LABEL_29:
  v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 100) = v3;
  *(_DWORD *)(result + 80) = v16;
  if ((*(_WORD *)(a2 + 100) & 0x2000) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_21B84A604(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "batchedLocationFixType");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "gpsAltitude", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "gpsSpeedAccuracy", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "originDevice");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quality");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "rawSpeed", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "trackRunOdometerHasBeenCorrected");
    if ((*(_WORD *)(a1 + 100) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x2000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84A7F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 2u:
              *(_WORD *)(a1 + 100) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 3u:
              *(_WORD *)(a1 + 100) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 4u:
              *(_WORD *)(a1 + 100) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 7u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 8u:
              *(_WORD *)(a1 + 100) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_112:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_117;
                  }
                  v49 = v21++;
                  v50 = *(_BYTE *)(v22 + v49);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_116;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_117;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_133;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_122;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_121;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_122;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_133;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v57 = v33++;
                  v58 = *(_BYTE *)(v34 + v57);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_126;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_127;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 92) = v37;
              goto LABEL_133;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x200u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v39++;
                  v62 = *(_BYTE *)(v40 + v61);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_131;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_132;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 80) = v43;
LABEL_133:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 96) = v46;
              goto LABEL_133;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_133;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B84AF5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 100) & 0x2000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B84B108(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38AD8;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_21B84B120(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF38AD8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B84B164(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF38AD8;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84B1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24DF38AD8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_QWORD *)(a2 + 72))
  {
    v4 = operator new();
    v5 = sub_21B84A460(v4, *(_QWORD *)(a2 + 72));
    v6 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 4) != 0)
  {
    v10 = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 80) |= 4u;
    *(_QWORD *)(a1 + 24) = v10;
    v7 = *(_BYTE *)(a2 + 80);
    if ((v7 & 8) == 0)
    {
LABEL_6:
      if ((v7 & 0x40) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a2 + 80) & 8) == 0)
  {
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 80) |= 8u;
  *(_QWORD *)(a1 + 32) = v11;
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 0x40) == 0)
  {
LABEL_7:
    if ((v7 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v12 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 80) |= 0x40u;
  *(_QWORD *)(a1 + 56) = v12;
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 0x80) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v13 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) |= 0x80u;
  *(_QWORD *)(a1 + 64) = v13;
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 1) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v14 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 80) |= 2u;
  *(_QWORD *)(a1 + 16) = v14;
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 1) == 0)
  {
LABEL_10:
    if ((v7 & 0x20) == 0)
      goto LABEL_11;
LABEL_20:
    v16 = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 80) |= 0x20u;
    *(_QWORD *)(a1 + 48) = v16;
    if ((*(_BYTE *)(a2 + 80) & 0x10) == 0)
      return a1;
    goto LABEL_12;
  }
LABEL_19:
  v15 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 80) |= 1u;
  *(_QWORD *)(a1 + 8) = v15;
  v7 = *(_BYTE *)(a2 + 80);
  if ((v7 & 0x20) != 0)
    goto LABEL_20;
LABEL_11:
  if ((v7 & 0x10) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 80) |= 0x10u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_21B84B340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsCourseAccuracy", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsCourseRadians", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_18:
    PB::TextFormatter::format(this, "smoothedGPSAltitude", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 80) & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 48));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x40) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v5 & 0x80) == 0)
    goto LABEL_9;
LABEL_19:
  PB::TextFormatter::format(this, "smoothedGPSAltitudeUncertainty", *(double *)(a1 + 64));
LABEL_9:
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84B490(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              v20 = (_DWORD *)operator new();
              *(_QWORD *)v20 = &off_24DF38AA0;
              v20[25] = 0;
              v21 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)(a1 + 72) = v20;
              if (v21)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                v20 = *(_DWORD **)(a1 + 72);
              }
              if (PB::Reader::placeMark()
                && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) != 0)
              {
                PB::Reader::recallMark();
                goto LABEL_55;
              }
              return 0;
            case 2u:
              *(_BYTE *)(a1 + 80) |= 4u;
              v23 = *((_QWORD *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v23);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 8u;
              v24 = *((_QWORD *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v24);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 80) |= 0x40u;
              v25 = *((_QWORD *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v25);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 80) |= 0x80u;
              v26 = *((_QWORD *)this + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v26);
              goto LABEL_54;
            case 6u:
              *(_BYTE *)(a1 + 80) |= 2u;
              v27 = *((_QWORD *)this + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v27);
              goto LABEL_54;
            case 7u:
              *(_BYTE *)(a1 + 80) |= 1u;
              v28 = *((_QWORD *)this + 1);
              if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v28);
              goto LABEL_54;
            case 8u:
              *(_BYTE *)(a1 + 80) |= 0x20u;
              v29 = *((_QWORD *)this + 1);
              if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v29);
              goto LABEL_54;
            case 9u:
              *(_BYTE *)(a1 + 80) |= 0x10u;
              v30 = *((_QWORD *)this + 1);
              if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v30);
LABEL_54:
                *((_QWORD *)this + 1) += 8;
              }
              else
              {
LABEL_52:
                *((_BYTE *)this + 24) = 1;
              }
LABEL_55:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B84B860(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 72);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 24));
    v5 = *(_BYTE *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B84B978(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38B10;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_21B84B990(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84B9B4(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  *(_QWORD *)result = &off_24DF38B10;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_DWORD *)(a2 + 52);
    v3 = 64;
    *(_WORD *)(result + 68) = 64;
    *(_DWORD *)(result + 52) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 56);
    v3 |= 0x80u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 68) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_BYTE *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 40) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 32) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 24) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    v13 = *(_DWORD *)(a2 + 48);
    *(_WORD *)(result + 68) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v12;
  if ((*(_WORD *)(a2 + 68) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_21B84BAE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "context");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "dataSource");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "error");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "interpolation");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "mode");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "sinceLastGood", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84BC58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_104:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_105;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *(_DWORD *)(a1 + 52) = v24;
              goto LABEL_121;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_109;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_110;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_121;
            case 3u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 4u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_100:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_54:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_114;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_115;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_121;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_119;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_120;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 48) = v45;
LABEL_121:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_121;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B84C2E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 68) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B84C41C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38B48;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B84C434(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84C458(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF38B48;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B84C4A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "orientation");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84C510(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84C79C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B84C7F4(_QWORD *result)
{
  *result = &off_24DF38B80;
  result[1] = 0;
  return result;
}

void sub_21B84C808(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84C82C(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_24DF38B80;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B84C854(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84C8A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84CAD4(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B84CAF4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38BB8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B84CB0C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B84CB30(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38BB8;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B84CBBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84CC6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84CED0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B84CF64(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38BF0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B84CF7C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B84CFA0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38BF0;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B84D02C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84D0DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84D340(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B84D3D4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38C28;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B84D3EC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B84D410(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38C28;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B84D49C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84D54C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84D7B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

double sub_21B84D844(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF38C60;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B84D868(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF38C60;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B84D8B8(PB::Base *a1)
{
  sub_21B84D868(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84D8DC(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  int v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF38C60;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 72) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v6 = *(_BYTE *)(a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 72) & 8) == 0)
      goto LABEL_7;
LABEL_11:
    v10 = *(_BYTE *)(a2 + 69);
    *(_BYTE *)(a1 + 72) |= 8u;
    *(_BYTE *)(a1 + 69) = v10;
    if ((*(_BYTE *)(a2 + 72) & 4) == 0)
      return a1;
    goto LABEL_8;
  }
  v9 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 64) = v9;
  v6 = *(_BYTE *)(a2 + 72);
  if ((v6 & 8) != 0)
    goto LABEL_11;
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    v7 = *(_BYTE *)(a2 + 68);
    *(_BYTE *)(a1 + 72) |= 4u;
    *(_BYTE *)(a1 + 68) = v7;
  }
  return a1;
}

uint64_t sub_21B84D9CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dotVector", v7);
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
    PB::TextFormatter::format(this, "hasValidTNBFrame");
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "headingVector", v10);
  }
  v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 8) == 0)
  {
    if ((*(_BYTE *)(a1 + 72) & 1) == 0)
      goto LABEL_9;
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 72) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "isPedestrian");
  v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 1) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v11 & 2) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "uncertainty", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B84DAE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  char *v83;
  int v84;
  unint64_t v85;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_128;
        case 2u:
          if (v24 != 2)
          {
            v65 = *(char **)(a1 + 16);
            v64 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              v69 = (char *)*v10;
              v70 = (v65 - (_BYTE *)*v10) >> 2;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62)
LABEL_137:
                sub_21B796A0C();
              v72 = v64 - (_QWORD)v69;
              if (v72 >> 1 > v71)
                v71 = v72 >> 1;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                v73 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_21B796CD8(v11, v73);
                v69 = *(char **)(a1 + 8);
                v65 = *(char **)(a1 + 16);
              }
              else
              {
                v74 = 0;
              }
              v81 = &v74[4 * v70];
              *(_DWORD *)v81 = 0;
              v66 = v81 + 4;
              while (v65 != v69)
              {
                v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v81;
              *(_QWORD *)(a1 + 16) = v66;
              *(_QWORD *)(a1 + 24) = &v74[4 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_DWORD *)v65 = 0;
              v66 = v65 + 4;
            }
            *(_QWORD *)(a1 + 16) = v66;
            goto LABEL_123;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_137;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v11, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_91;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_92;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v41 = *((_QWORD *)this + 1);
            v42 = *((_QWORD *)this + 2);
            while (v41 < v42 && !*((_BYTE *)this + 24))
            {
              v44 = *(char **)(a1 + 40);
              v43 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v44 >= v43)
              {
                v46 = (char *)*v8;
                v47 = (v44 - (_BYTE *)*v8) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_138;
                v49 = v43 - (_QWORD)v46;
                if (v49 >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_21B796CD8(v9, v50);
                  v46 = *(char **)(a1 + 32);
                  v44 = *(char **)(a1 + 40);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = 0;
                v45 = v52 + 4;
                while (v44 != v46)
                {
                  v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v52;
                *(_QWORD *)(a1 + 40) = v45;
                *(_QWORD *)(a1 + 48) = &v51[4 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_DWORD *)v44 = 0;
                v45 = v44 + 4;
              }
              *(_QWORD *)(a1 + 40) = v45;
              v54 = *((_QWORD *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              {
LABEL_91:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
              v42 = *((_QWORD *)this + 2);
              v41 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v41;
            }
LABEL_92:
            PB::Reader::recallMark();
          }
          else
          {
            v68 = *(char **)(a1 + 40);
            v67 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v68 >= v67)
            {
              v75 = (char *)*v8;
              v76 = (v68 - (_BYTE *)*v8) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
LABEL_138:
                sub_21B796A0C();
              v78 = v67 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_21B796CD8(v9, v79);
                v75 = *(char **)(a1 + 32);
                v68 = *(char **)(a1 + 40);
              }
              else
              {
                v80 = 0;
              }
              v83 = &v80[4 * v76];
              *(_DWORD *)v83 = 0;
              v66 = v83 + 4;
              while (v68 != v75)
              {
                v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v83;
              *(_QWORD *)(a1 + 40) = v66;
              *(_QWORD *)(a1 + 48) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v68 = 0;
              v66 = v68 + 4;
            }
            *(_QWORD *)(a1 + 40) = v66;
LABEL_123:
            v85 = *((_QWORD *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((_QWORD *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(_QWORD *)this + v85);
LABEL_127:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_128:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_125:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_129:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_127;
        case 5u:
          *(_BYTE *)(a1 + 72) |= 8u;
          v56 = *((_QWORD *)this + 1);
          if (v56 >= *((_QWORD *)this + 2))
          {
            v59 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v57 = v56 + 1;
            v58 = *(unsigned __int8 *)(*(_QWORD *)this + v56);
            *((_QWORD *)this + 1) = v57;
            v59 = v58 != 0;
          }
          *(_BYTE *)(a1 + 69) = v59;
          goto LABEL_129;
        case 6u:
          *(_BYTE *)(a1 + 72) |= 4u;
          v60 = *((_QWORD *)this + 1);
          if (v60 >= *((_QWORD *)this + 2))
          {
            v63 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v61 = v60 + 1;
            v62 = *(unsigned __int8 *)(*(_QWORD *)this + v60);
            *((_QWORD *)this + 1) = v61;
            v63 = v62 != 0;
          }
          *(_BYTE *)(a1 + 68) = v63;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_129;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84E130(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 72) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 72);
  if ((v10 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 72);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 4) == 0)
        return result;
      return PB::Writer::write(this);
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 8) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 72) & 4) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B84E20C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38C98;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B84E224(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B84E248(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38C98;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B84E2D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dotMeasurement", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotMeasurementUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84E384(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84E5E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B84E67C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38CD0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B84E694(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B84E6B8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38CD0;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B84E744(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84E7F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84EA58(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B84EAEC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38D08;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B84EB04(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B84EB28(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF38D08;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  if ((*(_BYTE *)(a2 + 40) & 8) == 0)
    return *(float *)&v4;
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B84EC08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dotDeltaBufferMaxAbs", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotDeltaBufferVar", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "dotErrorEstimate", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "dotRelativeChangeOverBuffer", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "headingRelativeChangeOverBuffer", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "headingDeltaBufferVar", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84ED18(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84F024(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_21B84F10C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38D40;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B84F124(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF38D40;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B84F164(PB::Base *a1)
{
  sub_21B84F124(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B84F188(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24DF38D40;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_21B84F23C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "placementFiltered");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbabilityFiltered", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B84F2FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_84;
              v26 += 7;
              v23 = v29;
              v16 = v27++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v28) = 0;
            goto LABEL_84;
          }
          v47 = 0;
          v48 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v23 + 1;
              v50 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                v23 = v49;
                v16 = v48++ > 8;
                if (v16)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v28;
          goto LABEL_96;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v31 = *((_QWORD *)this + 1);
            v32 = *((_QWORD *)this + 2);
            while (v31 < v32 && !*((_BYTE *)this + 24))
            {
              v34 = *(char **)(a1 + 16);
              v33 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v8;
                v37 = (v34 - (_BYTE *)*v8) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_107;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_21B796CD8(v9, v40);
                  v36 = *(char **)(a1 + 8);
                  v34 = *(char **)(a1 + 16);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = 0;
                v35 = v42 + 4;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v42;
                *(_QWORD *)(a1 + 16) = v35;
                *(_QWORD *)(a1 + 24) = &v41[4 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *(_QWORD *)(a1 + 16) = v35;
              v44 = *((_QWORD *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)this + v44);
              v32 = *((_QWORD *)this + 2);
              v31 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v52 = *(char **)(a1 + 16);
            v51 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v8;
              v55 = (v52 - (_BYTE *)*v8) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
LABEL_107:
                sub_21B796A0C();
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_21B796CD8(v9, v58);
                v54 = *(char **)(a1 + 8);
                v52 = *(char **)(a1 + 16);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v60;
              *(_QWORD *)(a1 + 16) = v53;
              *(_QWORD *)(a1 + 24) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 16) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((_QWORD *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
              v46 = *((_QWORD *)this + 1) + 4;
LABEL_61:
              *((_QWORD *)this + 1) = v46;
            }
            else
            {
LABEL_95:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v45);
LABEL_60:
          v46 = *((_QWORD *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B84F7EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B84F888(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38D78;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_21B84F8A0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B84F8C4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38D78;
  *(_DWORD *)(a1 + 108) = 0;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 108) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 88);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 88) = LODWORD(result);
    v2 = *(_DWORD *)(a2 + 108);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 96);
    v3 |= 0x100000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 96) = LODWORD(result);
    v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 92) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 100) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 36) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *(_DWORD *)(a2 + 104);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 104) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 76) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 84) = LODWORD(result);
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      return result;
LABEL_48:
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 108) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  if ((*(_DWORD *)(a2 + 108) & 2) != 0)
    goto LABEL_48;
  return result;
}

uint64_t sub_21B84FB64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pitchMean", *(float *)(a1 + 24));
    v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pitchStd", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rollMeanAbs", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rollStd", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYHigh", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYPed", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZHigh", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZPed", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "rotRateInerXYMean", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotRateInerXYStd", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotRateInerZMean", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotRateInerZStd", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYHigh", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYPed", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZHigh", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZPed", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userAccelInerXYMean", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelInerXYStd", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(this, "userAccelInerZStd", *(float *)(a1 + 100));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelInerZMean", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "yawStd", *(float *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B84FE74(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 108) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 108) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 3u:
          *(_DWORD *)(a1 + 108) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 4u:
          *(_DWORD *)(a1 + 108) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 5u:
          *(_DWORD *)(a1 + 108) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 6u:
          *(_DWORD *)(a1 + 108) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 7u:
          *(_DWORD *)(a1 + 108) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 8u:
          *(_DWORD *)(a1 + 108) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 9u:
          *(_DWORD *)(a1 + 108) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xAu:
          *(_DWORD *)(a1 + 108) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xBu:
          *(_DWORD *)(a1 + 108) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xCu:
          *(_DWORD *)(a1 + 108) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xDu:
          *(_DWORD *)(a1 + 108) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xEu:
          *(_DWORD *)(a1 + 108) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xFu:
          *(_DWORD *)(a1 + 108) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x10u:
          *(_DWORD *)(a1 + 108) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x11u:
          *(_DWORD *)(a1 + 108) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x12u:
          *(_DWORD *)(a1 + 108) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x13u:
          *(_DWORD *)(a1 + 108) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x14u:
          *(_DWORD *)(a1 + 108) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x15u:
          *(_DWORD *)(a1 + 108) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x16u:
          *(_DWORD *)(a1 + 108) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_95:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *(_DWORD *)(a1 + 108) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_93:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_96:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B850500(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 108);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 108) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B8507A8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38DB0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B8507C0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B8507E4(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24DF38DB0;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

uint64_t sub_21B850834(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85089C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B850A7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_21B850AD4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38DE8;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_21B850AEC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B850B10(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  *(_QWORD *)result = &off_24DF38DE8;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 68) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 68) & 0x200) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x200u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 52) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 56);
    v3 |= 0x400u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_BYTE *)(a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v13;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v14;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 68) = v3 | 4;
    *(_DWORD *)(result + 24) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v15;
  if ((*(_WORD *)(a2 + 68) & 4) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B850C98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "didExceedRadius");
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fenceID");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "positionRefX", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "positionRefY", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionRefZ", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionUncX", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionUncY", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionUncZ", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionX", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionY", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionZ", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B850E68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_50;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 64) = v22;
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_50:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_78:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 4u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_84:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B851384(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  if ((*(_WORD *)(v3 + 68) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_21B851518(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85153C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8515A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B851830(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B851888(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38E58;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B8518A0(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF38E58;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B8518E0(PB::Base *a1)
{
  sub_21B8518A0(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B851904(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24DF38E58;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *(_BYTE *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_BYTE *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_21B8519B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "isPedestrian");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "pedestrianClassProbability", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B851A78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_81;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_55;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v23 = *((_QWORD *)this + 1);
          if (v23 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v24 = v23 + 1;
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v23);
            *((_QWORD *)this + 1) = v24;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 48) = v26;
          goto LABEL_82;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v27 = *((_QWORD *)this + 1);
            v28 = *((_QWORD *)this + 2);
            while (v27 < v28 && !*((_BYTE *)this + 24))
            {
              v30 = *(char **)(a1 + 16);
              v29 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v30 >= v29)
              {
                v32 = (char *)*v8;
                v33 = (v30 - (_BYTE *)*v8) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  goto LABEL_91;
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 1 > v34)
                  v34 = v35 >> 1;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v37 = (char *)sub_21B796CD8(v9, v36);
                  v32 = *(char **)(a1 + 8);
                  v30 = *(char **)(a1 + 16);
                }
                else
                {
                  v37 = 0;
                }
                v38 = &v37[4 * v33];
                *(_DWORD *)v38 = 0;
                v31 = v38 + 4;
                while (v30 != v32)
                {
                  v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v31;
                *(_QWORD *)(a1 + 24) = &v37[4 * v36];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_DWORD *)v30 = 0;
                v31 = v30 + 4;
              }
              *(_QWORD *)(a1 + 16) = v31;
              v40 = *((_QWORD *)this + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
              v28 = *((_QWORD *)this + 2);
              v27 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v8;
              v47 = (v44 - (_BYTE *)*v8) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
LABEL_91:
                sub_21B796A0C();
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796CD8(v9, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *((_QWORD *)this + 2))
            {
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
              v42 = *((_QWORD *)this + 1) + 4;
LABEL_56:
              *((_QWORD *)this + 1) = v42;
            }
            else
            {
LABEL_81:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_82:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_81;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v41);
LABEL_55:
          v42 = *((_QWORD *)this + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_82;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B851EC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::write(this);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B851F64(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38E90;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B851F7C(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF38E90;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B851FBC(PB::Base *a1)
{
  sub_21B851F7C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B851FE0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24DF38E90;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  if ((*(_BYTE *)(a2 + 52) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 52) = 1;
    *(_QWORD *)(a1 + 32) = v6;
    v5 = 5;
    if ((*(_BYTE *)(a2 + 52) & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 4;
  if ((*(_BYTE *)(a2 + 52) & 4) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 52) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 52) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_21B852094(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "placement");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbability", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B852154(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_84;
              v26 += 7;
              v23 = v29;
              v16 = v27++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v28) = 0;
            goto LABEL_84;
          }
          v47 = 0;
          v48 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v23 + 1;
              v50 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                v23 = v49;
                v16 = v48++ > 8;
                if (v16)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v28;
          goto LABEL_96;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v31 = *((_QWORD *)this + 1);
            v32 = *((_QWORD *)this + 2);
            while (v31 < v32 && !*((_BYTE *)this + 24))
            {
              v34 = *(char **)(a1 + 16);
              v33 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v8;
                v37 = (v34 - (_BYTE *)*v8) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_107;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_21B796CD8(v9, v40);
                  v36 = *(char **)(a1 + 8);
                  v34 = *(char **)(a1 + 16);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = 0;
                v35 = v42 + 4;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v42;
                *(_QWORD *)(a1 + 16) = v35;
                *(_QWORD *)(a1 + 24) = &v41[4 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *(_QWORD *)(a1 + 16) = v35;
              v44 = *((_QWORD *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)this + v44);
              v32 = *((_QWORD *)this + 2);
              v31 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v52 = *(char **)(a1 + 16);
            v51 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v8;
              v55 = (v52 - (_BYTE *)*v8) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
LABEL_107:
                sub_21B796A0C();
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_21B796CD8(v9, v58);
                v54 = *(char **)(a1 + 8);
                v52 = *(char **)(a1 + 16);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v60;
              *(_QWORD *)(a1 + 16) = v53;
              *(_QWORD *)(a1 + 24) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 16) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((_QWORD *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
              v46 = *((_QWORD *)this + 1) + 4;
LABEL_61:
              *((_QWORD *)this + 1) = v46;
            }
            else
            {
LABEL_95:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v45);
LABEL_60:
          v46 = *((_QWORD *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B852644(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B8526E0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38EC8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B8526F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85271C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38EC8;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B8527A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B852858(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B852ABC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B852B50(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38F00;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B852B68(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B852B8C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38F00;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B852C18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B852CC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B852F2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B852FC0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38F38;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B852FD8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B852FFC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF38F38;
  *(_DWORD *)(a1 + 48) = 0;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 48) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_BYTE *)(a1 + 48) = v3;
    *(_DWORD *)(a1 + 40) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      return result;
LABEL_18:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 48) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_17:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  if ((*(_BYTE *)(a2 + 48) & 2) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_21B8530F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 48) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B853228(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_50:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_51;
        case 8u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_48:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_51:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B85356C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 48) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_21B853670(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_24DF38F70;
  return result;
}

void sub_21B853684(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24DF38F70;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_21B8536E4(PB::Base *a1)
{
  sub_21B853684(a1);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B853708(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_24DF38F70;
  a1[1] = 0;
  v4 = a1 + 1;
  a1[2] = 0;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = operator new();
    v6 = sub_21B834F88(v5, *(_QWORD *)(a2 + 16));
    v7 = a1[2];
    a1[2] = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v8 = operator new();
    v9 = sub_21B802720(v8, *(_QWORD *)(a2 + 8));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

uint64_t sub_21B8537DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "signalEnvironment");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85384C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v20 = operator new();
        sub_21B8026E8((_QWORD *)v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *(_QWORD *)(a1 + 8);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_31;
        }
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF383D8;
        *(_DWORD *)(v20 + 100) = 0;
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 16);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_31:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B853A68(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

uint64_t sub_21B853AB8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF38FA8;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B853AD0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF38FA8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B853B14(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF38FA8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B853B6C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_24DF38FA8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v4 = *(_BYTE *)(a2 + 64);
  if ((v4 & 0x20) != 0)
  {
    v6 = *(_QWORD *)(a2 + 56);
    v5 = 32;
    *(_BYTE *)(a1 + 64) = 32;
    *(_QWORD *)(a1 + 56) = v6;
    v4 = *(_BYTE *)(a2 + 64);
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((*(_BYTE *)(a2 + 64) & 8) != 0)
  {
LABEL_5:
    v7 = *(_QWORD *)(a2 + 32);
    v5 |= 8u;
    *(_BYTE *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 32) = v7;
    v4 = *(_BYTE *)(a2 + 64);
  }
LABEL_6:
  if ((v4 & 0x10) != 0)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v5 |= 0x10u;
    *(_BYTE *)(a1 + 64) = v5;
    *(_QWORD *)(a1 + 40) = v13;
    v4 = *(_BYTE *)(a2 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      if ((v4 & 1) == 0)
        goto LABEL_9;
LABEL_17:
      v15 = *(_QWORD *)(a2 + 8);
      v5 |= 1u;
      *(_BYTE *)(a1 + 64) = v5;
      *(_QWORD *)(a1 + 8) = v15;
      if ((*(_BYTE *)(a2 + 64) & 2) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_QWORD *)(a2 + 24);
  v5 |= 4u;
  *(_BYTE *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 24) = v14;
  v4 = *(_BYTE *)(a2 + 64);
  if ((v4 & 1) != 0)
    goto LABEL_17;
LABEL_9:
  if ((v4 & 2) != 0)
  {
LABEL_10:
    v8 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 64) = v5 | 2;
    *(_QWORD *)(a1 + 16) = v8;
  }
LABEL_11:
  if (*(_QWORD *)(a2 + 48))
  {
    v9 = operator new();
    v10 = sub_21B802720(v9, *(_QWORD *)(a2 + 48));
    v11 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return a1;
}

uint64_t sub_21B853C9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "course", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 40));
LABEL_7:
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "signalEnvironment");
  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B853DA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      if (v10++ > 8)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 64) |= 0x20u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v20);
        goto LABEL_48;
      case 2u:
        *(_BYTE *)(a1 + 64) |= 8u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
        goto LABEL_48;
      case 3u:
        *(_BYTE *)(a1 + 64) |= 0x10u;
        v23 = *((_QWORD *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v23);
        goto LABEL_48;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 4u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v24);
        goto LABEL_48;
      case 5u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_48;
      case 6u:
        *(_BYTE *)(a1 + 64) |= 2u;
        v26 = *((_QWORD *)this + 1);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_48:
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
LABEL_41:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_49;
      case 7u:
        v27 = (_QWORD *)operator new();
        sub_21B8026E8(v27);
        v28 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v27 = *(_QWORD **)(a1 + 48);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v27 + 16))(v27, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_49:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

uint64_t sub_21B8540FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 64) & 2) != 0)
LABEL_7:
    result = PB::Writer::write(this, *(double *)(v3 + 16));
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

_QWORD *sub_21B8541E0(_QWORD *result)
{
  *result = &off_24DF38FE0;
  result[1] = 0;
  return result;
}

void sub_21B8541F0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38FE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B854230(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF38FE0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B854284(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF38FE0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B853B6C(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B854300(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B854350(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF38FA8;
        *(_QWORD *)(v20 + 48) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B854528(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B854544(_QWORD *result)
{
  *result = &off_24DF39018;
  result[1] = 0;
  return result;
}

void sub_21B854554(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39018;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B854594(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39018;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B8545E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF39018;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B853B6C(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B854664(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8546B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF38FA8;
        *(_QWORD *)(v20 + 48) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B85488C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B8548A8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39050;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B8548C0(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF39050;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B854900(PB::Base *a1)
{
  sub_21B8548C0(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B854924(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF39050;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = 1;
    *(_QWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2)
    sub_21B7968C4(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

uint64_t sub_21B854998(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "velocity", v7);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B854A18(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) != 2)
        {
          v38 = *(char **)(a1 + 16);
          v37 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v38 >= v37)
          {
            v40 = (char *)*v8;
            v41 = (v38 - (_BYTE *)*v8) >> 3;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61)
LABEL_84:
              sub_21B796A0C();
            v43 = v37 - (_QWORD)v40;
            if (v43 >> 2 > v42)
              v42 = v43 >> 2;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)sub_21B796A20(v9, v44);
              v40 = *(char **)(a1 + 8);
              v38 = *(char **)(a1 + 16);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[8 * v41];
            *(_QWORD *)v46 = 0;
            v39 = v46 + 8;
            while (v38 != v40)
            {
              v47 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v46 - 1) = v47;
              v46 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v46;
            *(_QWORD *)(a1 + 16) = v39;
            *(_QWORD *)(a1 + 24) = &v45[8 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_QWORD *)v38 = 0;
            v39 = v38 + 8;
          }
          *(_QWORD *)(a1 + 16) = v39;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v39 - 1) = *(_QWORD *)(*(_QWORD *)this + v48);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        while (v23 < v24 && !*((_BYTE *)this + 24))
        {
          v26 = *(char **)(a1 + 16);
          v25 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v26 >= v25)
          {
            v28 = (char *)*v8;
            v29 = (v26 - (_BYTE *)*v8) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_84;
            v31 = v25 - (_QWORD)v28;
            if (v31 >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)sub_21B796A20(v9, v32);
              v28 = *(char **)(a1 + 8);
              v26 = *(char **)(a1 + 16);
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = 0;
            v27 = v34 + 8;
            while (v26 != v28)
            {
              v35 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v34;
            *(_QWORD *)(a1 + 16) = v27;
            *(_QWORD *)(a1 + 24) = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v26 = 0;
            v27 = v26 + 8;
          }
          *(_QWORD *)(a1 + 16) = v27;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v27 - 1) = *(_QWORD *)(*(_QWORD *)this + v36);
          v24 = *((_QWORD *)this + 2);
          v23 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v23;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v13 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_73;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_75:
          *((_QWORD *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this) & 1) == 0)
          return 0;
      }
LABEL_76:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B854DC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 32));
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6);
  }
  return result;
}

double sub_21B854E28(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF39088;
  *(_DWORD *)(a1 + 124) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_21B854E54(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24DF39088;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_21B854EB4(PB::Base *a1)
{
  sub_21B854E54(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B854ED8(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_24DF39088;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 80);
    v6 = 1;
    *(_WORD *)(a1 + 124) = 1;
    *(_QWORD *)(a1 + 80) = v7;
    v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 108);
    v6 |= 0x40u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 108) = v8;
    v5 = *(_WORD *)(a2 + 124);
  }
LABEL_6:
  if ((v5 & 0x20) != 0)
  {
    v13 = *(_DWORD *)(a2 + 104);
    v6 |= 0x20u;
    *(_WORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 104) = v13;
    v5 = *(_WORD *)(a2 + 124);
    if ((v5 & 0x200) == 0)
    {
LABEL_8:
      if ((v5 & 2) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 120);
  v6 |= 0x200u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 120) = v14;
  v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v15 = *(_DWORD *)(a2 + 88);
  v6 |= 2u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 88) = v15;
  v5 = *(_WORD *)(a2 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_24:
  v16 = *(_DWORD *)(a2 + 112);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 112) = v16;
  if ((*(_WORD *)(a2 + 124) & 0x10) != 0)
  {
LABEL_11:
    v9 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 124) = v6 | 0x10;
    *(_DWORD *)(a1 + 100) = v9;
  }
LABEL_12:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = *(_WORD *)(a2 + 124);
  if ((v10 & 8) != 0)
  {
    v17 = *(_DWORD *)(a2 + 96);
    *(_WORD *)(a1 + 124) |= 8u;
    *(_DWORD *)(a1 + 96) = v17;
    v10 = *(_WORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_16:
      if ((v10 & 4) == 0)
        goto LABEL_18;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a2 + 124) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  v18 = *(_DWORD *)(a2 + 116);
  *(_WORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 116) = v18;
  if ((*(_WORD *)(a2 + 124) & 4) != 0)
  {
LABEL_17:
    v11 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 124) |= 4u;
    *(_DWORD *)(a1 + 92) = v11;
  }
LABEL_18:
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_21B8550A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(float *)(a1 + 88));
    v5 = *(_WORD *)(a1 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "focalLength", *(float *)(a1 + 92));
  v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_25:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 124) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "orientation");
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "origin", v8);
  }
  if ((*(_WORD *)(a1 + 124) & 0x20) != 0)
    PB::TextFormatter::format(this, "pitch", *(float *)(a1 + 104));
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "principlePoint", v11);
  }
  v12 = *(_WORD *)(a1 + 124);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "roll", *(float *)(a1 + 108));
    v12 = *(_WORD *)(a1 + 124);
  }
  if ((v12 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "transform", v15);
  }
  v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x80) == 0)
  {
    if ((*(_WORD *)(a1 + 124) & 0x100) == 0)
      goto LABEL_20;
LABEL_28:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 116));
    if ((*(_WORD *)(a1 + 124) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
  PB::TextFormatter::format(this, "type");
  v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x100) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v16 & 0x200) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8552A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  unint64_t v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  unint64_t v132;
  uint64_t v135;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v135 = a1 + 72;
    v9 = (void **)(a1 + 32);
    v10 = a1 + 48;
    v11 = (void **)(a1 + 8);
    v12 = a1 + 24;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 124) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v26);
          v27 = *((_QWORD *)this + 1) + 8;
          goto LABEL_215;
        case 2u:
          *(_WORD *)(a1 + 124) |= 0x40u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_214;
        case 3u:
          *(_WORD *)(a1 + 124) |= 0x20u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_214;
        case 4u:
          *(_WORD *)(a1 + 124) |= 0x200u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_214;
        case 5u:
          *(_WORD *)(a1 + 124) |= 2u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_214;
        case 6u:
          *(_WORD *)(a1 + 124) |= 0x80u;
          v32 = *((_QWORD *)this + 1);
          v33 = *((_QWORD *)this + 2);
          v34 = *(_QWORD *)this;
          if (v32 <= 0xFFFFFFFFFFFFFFF5 && v32 + 10 <= v33)
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            do
            {
              v38 = v32 + 1;
              *((_QWORD *)this + 1) = v32 + 1;
              v39 = *(_BYTE *)(v34 + v32);
              v37 |= (unint64_t)(v39 & 0x7F) << v35;
              if ((v39 & 0x80) == 0)
                goto LABEL_185;
              v35 += 7;
              v32 = v38;
              v19 = v36++ > 8;
            }
            while (!v19);
LABEL_141:
            LODWORD(v37) = 0;
            goto LABEL_185;
          }
          v93 = 0;
          v94 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v95 = v32 + 1;
              v96 = *(_BYTE *)(v34 + v32);
              *((_QWORD *)this + 1) = v95;
              v37 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v32 = v95;
                v19 = v94++ > 8;
                if (v19)
                  goto LABEL_141;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v37) = 0;
            }
            break;
          }
LABEL_185:
          *(_DWORD *)(a1 + 112) = v37;
          goto LABEL_216;
        case 7u:
          *(_WORD *)(a1 + 124) |= 0x10u;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          v42 = *(_QWORD *)this;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)this + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_188;
              v43 += 7;
              v40 = v46;
              v19 = v44++ > 8;
            }
            while (!v19);
LABEL_148:
            LODWORD(v45) = 0;
            goto LABEL_188;
          }
          v97 = 0;
          v98 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v99 = v40 + 1;
              v100 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)this + 1) = v99;
              v45 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v40 = v99;
                v19 = v98++ > 8;
                if (v19)
                  goto LABEL_148;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_188:
          *(_DWORD *)(a1 + 100) = v45;
          goto LABEL_216;
        case 8u:
          if (v25 != 2)
          {
            v102 = *(char **)(a1 + 16);
            v101 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v102 >= v101)
            {
              v108 = (char *)*v11;
              v109 = (v102 - (_BYTE *)*v11) >> 2;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 62)
LABEL_226:
                sub_21B796A0C();
              v111 = v101 - (_QWORD)v108;
              if (v111 >> 1 > v110)
                v110 = v111 >> 1;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
                v112 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                v113 = (char *)sub_21B796CD8(v12, v112);
                v108 = *(char **)(a1 + 8);
                v102 = *(char **)(a1 + 16);
              }
              else
              {
                v113 = 0;
              }
              v126 = &v113[4 * v109];
              *(_DWORD *)v126 = 0;
              v103 = v126 + 4;
              while (v102 != v108)
              {
                v127 = *((_DWORD *)v102 - 1);
                v102 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v126;
              *(_QWORD *)(a1 + 16) = v103;
              *(_QWORD *)(a1 + 24) = &v113[4 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_DWORD *)v102 = 0;
              v103 = v102 + 4;
            }
            *(_QWORD *)(a1 + 16) = v103;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          while (v48 < v49 && !*((_BYTE *)this + 24))
          {
            v51 = *(char **)(a1 + 16);
            v50 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v51 >= v50)
            {
              v53 = (char *)*v11;
              v54 = (v51 - (_BYTE *)*v11) >> 2;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 62)
                goto LABEL_226;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 1 > v55)
                v55 = v56 >> 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                v57 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)sub_21B796CD8(v12, v57);
                v53 = *(char **)(a1 + 8);
                v51 = *(char **)(a1 + 16);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[4 * v54];
              *(_DWORD *)v59 = 0;
              v52 = v59 + 4;
              while (v51 != v53)
              {
                v60 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *((_DWORD *)v59 - 1) = v60;
                v59 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v59;
              *(_QWORD *)(a1 + 16) = v52;
              *(_QWORD *)(a1 + 24) = &v58[4 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_DWORD *)v51 = 0;
              v52 = v51 + 4;
            }
            *(_QWORD *)(a1 + 16) = v52;
            v61 = *((_QWORD *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
              goto LABEL_155;
            *(v52 - 1) = *(_DWORD *)(*(_QWORD *)this + v61);
            v49 = *((_QWORD *)this + 2);
            v48 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v48;
          }
          goto LABEL_156;
        case 9u:
          *(_WORD *)(a1 + 124) |= 8u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v62);
          goto LABEL_214;
        case 0xAu:
          *(_WORD *)(a1 + 124) |= 0x100u;
          v63 = *((_QWORD *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v63);
          goto LABEL_214;
        case 0xBu:
          *(_WORD *)(a1 + 124) |= 4u;
          v64 = *((_QWORD *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v64);
          goto LABEL_214;
        case 0xCu:
          if (v25 != 2)
          {
            v105 = *(char **)(a1 + 40);
            v104 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v105 >= v104)
            {
              v114 = (char *)*v9;
              v115 = (v105 - (_BYTE *)*v9) >> 2;
              v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62)
LABEL_227:
                sub_21B796A0C();
              v117 = v104 - (_QWORD)v114;
              if (v117 >> 1 > v116)
                v116 = v117 >> 1;
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                v118 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v118 = v116;
              if (v118)
              {
                v119 = (char *)sub_21B796CD8(v10, v118);
                v114 = *(char **)(a1 + 32);
                v105 = *(char **)(a1 + 40);
              }
              else
              {
                v119 = 0;
              }
              v128 = &v119[4 * v115];
              *(_DWORD *)v128 = 0;
              v103 = v128 + 4;
              while (v105 != v114)
              {
                v129 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v128;
              *(_QWORD *)(a1 + 40) = v103;
              *(_QWORD *)(a1 + 48) = &v119[4 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_DWORD *)v105 = 0;
              v103 = v105 + 4;
            }
            *(_QWORD *)(a1 + 40) = v103;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v65 = *((_QWORD *)this + 1);
          v66 = *((_QWORD *)this + 2);
          while (v65 < v66 && !*((_BYTE *)this + 24))
          {
            v68 = *(char **)(a1 + 40);
            v67 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v68 >= v67)
            {
              v70 = (char *)*v9;
              v71 = (v68 - (_BYTE *)*v9) >> 2;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 62)
                goto LABEL_227;
              v73 = v67 - (_QWORD)v70;
              if (v73 >> 1 > v72)
                v72 = v73 >> 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74)
              {
                v75 = (char *)sub_21B796CD8(v10, v74);
                v70 = *(char **)(a1 + 32);
                v68 = *(char **)(a1 + 40);
              }
              else
              {
                v75 = 0;
              }
              v76 = &v75[4 * v71];
              *(_DWORD *)v76 = 0;
              v69 = v76 + 4;
              while (v68 != v70)
              {
                v77 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v76 - 1) = v77;
                v76 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v76;
              *(_QWORD *)(a1 + 40) = v69;
              *(_QWORD *)(a1 + 48) = &v75[4 * v74];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *(_DWORD *)v68 = 0;
              v69 = v68 + 4;
            }
            *(_QWORD *)(a1 + 40) = v69;
            v78 = *((_QWORD *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
              goto LABEL_155;
            *(v69 - 1) = *(_DWORD *)(*(_QWORD *)this + v78);
            v66 = *((_QWORD *)this + 2);
            v65 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v65;
          }
          goto LABEL_156;
        case 0xDu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v79 = *((_QWORD *)this + 1);
            v80 = *((_QWORD *)this + 2);
            while (v79 < v80 && !*((_BYTE *)this + 24))
            {
              v82 = *(char **)(a1 + 64);
              v81 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v82 >= v81)
              {
                v84 = (char *)*v8;
                v85 = (v82 - (_BYTE *)*v8) >> 2;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62)
                  goto LABEL_228;
                v87 = v81 - (_QWORD)v84;
                if (v87 >> 1 > v86)
                  v86 = v87 >> 1;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                  v88 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v89 = (char *)sub_21B796CD8(v135, v88);
                  v84 = *(char **)(a1 + 56);
                  v82 = *(char **)(a1 + 64);
                }
                else
                {
                  v89 = 0;
                }
                v90 = &v89[4 * v85];
                *(_DWORD *)v90 = 0;
                v83 = v90 + 4;
                while (v82 != v84)
                {
                  v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *((_DWORD *)v90 - 1) = v91;
                  v90 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v90;
                *(_QWORD *)(a1 + 64) = v83;
                *(_QWORD *)(a1 + 72) = &v89[4 * v88];
                if (v84)
                  operator delete(v84);
              }
              else
              {
                *(_DWORD *)v82 = 0;
                v83 = v82 + 4;
              }
              *(_QWORD *)(a1 + 64) = v83;
              v92 = *((_QWORD *)this + 1);
              if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
              {
LABEL_155:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v83 - 1) = *(_DWORD *)(*(_QWORD *)this + v92);
              v80 = *((_QWORD *)this + 2);
              v79 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v79;
            }
LABEL_156:
            PB::Reader::recallMark();
          }
          else
          {
            v107 = *(char **)(a1 + 64);
            v106 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v107 >= v106)
            {
              v120 = (char *)*v8;
              v121 = (v107 - (_BYTE *)*v8) >> 2;
              v122 = v121 + 1;
              if ((unint64_t)(v121 + 1) >> 62)
LABEL_228:
                sub_21B796A0C();
              v123 = v106 - (_QWORD)v120;
              if (v123 >> 1 > v122)
                v122 = v123 >> 1;
              if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                v124 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v124 = v122;
              if (v124)
              {
                v125 = (char *)sub_21B796CD8(v135, v124);
                v120 = *(char **)(a1 + 56);
                v107 = *(char **)(a1 + 64);
              }
              else
              {
                v125 = 0;
              }
              v130 = &v125[4 * v121];
              *(_DWORD *)v130 = 0;
              v103 = v130 + 4;
              while (v107 != v120)
              {
                v131 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v130;
              *(_QWORD *)(a1 + 64) = v103;
              *(_QWORD *)(a1 + 72) = &v125[4 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_DWORD *)v107 = 0;
              v103 = v107 + 4;
            }
            *(_QWORD *)(a1 + 64) = v103;
LABEL_210:
            v132 = *((_QWORD *)this + 1);
            if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *((_QWORD *)this + 2))
            {
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)this + v132);
LABEL_214:
              v27 = *((_QWORD *)this + 1) + 4;
LABEL_215:
              *((_QWORD *)this + 1) = v27;
            }
            else
            {
LABEL_212:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_216:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_216;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B855D50(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;

  v3 = result;
  v4 = *(_WORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80));
    v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
LABEL_28:
    result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0)
    goto LABEL_28;
LABEL_7:
  if ((v4 & 0x10) != 0)
LABEL_8:
    result = PB::Writer::writeVarInt(this);
LABEL_9:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0)
      goto LABEL_14;
LABEL_31:
    result = PB::Writer::write(this, *(float *)(v3 + 116));
    if ((*(_WORD *)(v3 + 124) & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v8 & 4) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 92));
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    result = PB::Writer::write(this, v11);
  }
  v13 = *(float **)(v3 + 56);
  v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    v14 = *v13++;
    result = PB::Writer::write(this, v14);
  }
  return result;
}

uint64_t sub_21B855EF0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF390C0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_21B855F08(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B855F2C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;

  *(_QWORD *)result = &off_24DF390C0;
  *(_DWORD *)(result + 56) = 0;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 56) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 56) = v3;
    *(_QWORD *)(result + 32) = v5;
    v2 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 56) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 56) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 56) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_16:
    v10 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(result + 56) = v3 | 0x20;
    *(_DWORD *)(result + 48) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_BYTE *)(a2 + 52);
  v3 |= 0x40u;
  *(_BYTE *)(result + 56) = v3;
  *(_BYTE *)(result + 52) = v9;
  if ((*(_BYTE *)(a2 + 56) & 0x20) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B85600C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "batchedLocationFixType");
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "distOdom", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distPed", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isValid");
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "uncOdom", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85611C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_58:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 52) = v22;
              goto LABEL_64;
            case 7u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_62;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_63;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 48) = v27;
LABEL_64:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8564E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B8565C8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF390F8;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_21B8565E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B856604(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  int v19;

  *(_QWORD *)result = &off_24DF390F8;
  *(_DWORD *)(result + 116) = 0;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64);
    v3 = 128;
    *(_WORD *)(result + 116) = 128;
    *(_QWORD *)(result + 64) = v4;
    v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 116) & 0x2000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 108);
    v3 |= 0x2000u;
    *(_WORD *)(result + 116) = v3;
    *(_DWORD *)(result + 108) = v5;
    v2 = *(_WORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 116) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 116);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 56) = v7;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 8) = v9;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 16) = v10;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  v11 = *(_QWORD *)(a2 + 96);
  v3 |= 0x800u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 96) = v11;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  v12 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 32) = v12;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *(_QWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 72) = v13;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 48) = v14;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *(_QWORD *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 88) = v15;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *(_QWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(result + 116) = v3;
  *(_QWORD *)(result + 80) = v16;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *(_BYTE *)(a2 + 113);
  v3 |= 0x8000u;
  *(_WORD *)(result + 116) = v3;
  *(_BYTE *)(result + 113) = v17;
  v2 = *(_WORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_34:
    v19 = *(_DWORD *)(a2 + 104);
    *(_WORD *)(result + 116) = v3 | 0x1000;
    *(_DWORD *)(result + 104) = v19;
    return result;
  }
LABEL_33:
  v18 = *(_BYTE *)(a2 + 112);
  v3 |= 0x4000u;
  *(_WORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v18;
  if ((*(_WORD *)(a2 + 116) & 0x1000) != 0)
    goto LABEL_34;
  return result;
}

uint64_t sub_21B8567E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isIndoor");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "isMotionOverrideSet");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "metsWR", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "steps");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "stepsDuration", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(this, "truthMetsStrollerCorrected", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 116) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(this, "truthMetsGradeCorrected", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x400) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x800) != 0)
LABEL_17:
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B856A10(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 116) |= 0x2000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 108) = v25;
              goto LABEL_108;
            case 3u:
              *(_WORD *)(a1 + 116) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 116) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 116) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 116) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 116) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 116) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 116) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xCu:
              *(_WORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xDu:
              *(_WORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *(_WORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *(_WORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *(_WORD *)(a1 + 116) |= 0x1000u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_106;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_107;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v35;
LABEL_108:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_108;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85708C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_32:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 116) & 0x1000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B857270(_QWORD *a1)
{
  double result;

  *a1 = &off_24DF39130;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

void sub_21B85728C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8572B0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_QWORD *)result = &off_24DF39130;
  *(_QWORD *)(result + 28) = 0xFFFFFFFFLL;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 32) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 32) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(result + 32) = v3 | 8;
    *(_DWORD *)(result + 28) = v7;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B857340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestampSet", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampExit", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "userResponse");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8573F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_33;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_33;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_49;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_49:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_33:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_53;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_54;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_55:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B857708(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B85779C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39168;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_21B8577B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B8577D8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF39168;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 40) = result;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 56) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_13:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 48) = result;
  if ((*(_BYTE *)(a2 + 56) & 1) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B85789C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "complexHandMotionPercentage", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "straightnessMetric", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "walkPercentage", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85798C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 56) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B857C58(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 56) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B857D24(uint64_t result)
{
  *(_QWORD *)result = &off_24DF391A0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B857D3C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B857D60(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF391A0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B857DB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "motionState");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B857E18(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8580A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B8580FC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF391D8;
  *(_DWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_21B85811C(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24DF391D8;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B858174(PB::Base *a1)
{
  sub_21B85811C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B858198(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;

  *(_QWORD *)a1 = &off_24DF391D8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(_QWORD *)(a2 + 32))
  {
    v5 = operator new();
    v6 = sub_21B7ACF5C(v5, *(_QWORD *)(a2 + 32));
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v8 = *(_BYTE *)(a2 + 48);
  if ((v8 & 2) != 0)
  {
    v9 = *(_DWORD *)(a2 + 44);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_DWORD *)(a1 + 44) = v9;
    v8 = *(_BYTE *)(a2 + 48);
  }
  if ((v8 & 1) != 0)
  {
    v10 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_DWORD *)(a1 + 40) = v10;
  }
  return a1;
}

uint64_t sub_21B858284(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "gyroBias", v7);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "super");
  v9 = *(_BYTE *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperatureGyro", *(float *)(a1 + 40));
    v9 = *(_BYTE *)(a1 + 48);
  }
  if ((v9 & 2) != 0)
    PB::TextFormatter::format(this, "temperatureGyroBias", *(float *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B858348(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          v23 = sub_21B7ADDE4(v22);
          v24 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v22;
          if (v24)
          {
            (*(void (**)(uint64_t, double))(*(_QWORD *)v24 + 8))(v24, v23);
            v22 = *(_QWORD *)(a1 + 32);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) != 0)
          {
            goto LABEL_27;
          }
          return 0;
        case 2u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v8;
                v31 = (v28 - (_BYTE *)*v8) >> 2;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_90;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_21B796CD8(v9, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[4 * v31];
                *(_DWORD *)v36 = 0;
                v29 = v36 + 4;
                while (v28 != v30)
                {
                  v37 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[4 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_DWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v25;
            }
LABEL_27:
            PB::Reader::recallMark();
          }
          else
          {
            v42 = *(char **)(a1 + 16);
            v41 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v8;
              v45 = (v42 - (_BYTE *)*v8) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
LABEL_90:
                sub_21B796A0C();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_21B796CD8(v9, v48);
                v44 = *(char **)(a1 + 8);
                v42 = *(char **)(a1 + 16);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = 0;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v50;
              *(_QWORD *)(a1 + 16) = v43;
              *(_QWORD *)(a1 + 24) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *(_QWORD *)(a1 + 16) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *((_QWORD *)this + 2))
            {
              *(v43 - 1) = *(_DWORD *)(*(_QWORD *)this + v52);
LABEL_81:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_79:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_82:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_79;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_81;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_79;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_81;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_82;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8587B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 44));
    v8 = *(_BYTE *)(v3 + 48);
  }
  if ((v8 & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 40));
  return result;
}

_QWORD *sub_21B85884C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  double v3;

  if (!result[4])
  {
    v1 = result;
    v2 = operator new();
    v3 = sub_21B7ADDE4(v2);
    result = (_QWORD *)v1[4];
    v1[4] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, double))(*result + 8))(result, v3);
  }
  return result;
}

uint64_t sub_21B8588B0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39210;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B8588C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8588EC(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)result = &off_24DF39210;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v3 = 32;
    *(_BYTE *)(result + 64) = 32;
    *(_QWORD *)(result + 48) = v4;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 64) = v3;
    *(_QWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 64) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_BYTE *)(a2 + 64);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_BYTE *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v7;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v9;
  v2 = *(_BYTE *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_18:
    v11 = *(_DWORD *)(a2 + 60);
    *(_BYTE *)(result + 64) = v3 | 0x80;
    *(_DWORD *)(result + 60) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 64) = v3;
  *(_QWORD *)(result + 16) = v10;
  if ((*(_BYTE *)(a2 + 64) & 0x80) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_21B8589E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "firstRingSensorTimeStampMicroSeconds");
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds");
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "medianBufferNumSamples");
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "medianNorthAlignmentEstimateRad", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "newNorthAlignmentEstimateRad", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "timeElapsedSinceLastUpdateMicroSeconds");
    if ((*(_BYTE *)(a1 + 64) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "numRingSensorSamples");
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x20) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B858B18(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 64) |= 0x40u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 64) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_114:
              *(_QWORD *)(a1 + 40) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 64) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_119:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 64) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_124:
              *(_QWORD *)(a1 + 16) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 64) |= 0x80u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 60) = v49;
LABEL_130:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8591D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B8592DC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39248;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B8592F8(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24DF39248;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B859350(PB::Base *a1)
{
  sub_21B8592F8(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B859374(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_24DF39248;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (*(_QWORD *)(a2 + 48))
  {
    v5 = operator new();
    v6 = sub_21B859D00(v5, *(_QWORD *)(a2 + 48));
    v7 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((*(_BYTE *)(a2 + 64) & 4) != 0)
  {
    v8 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) |= 4u;
    *(_QWORD *)(a1 + 56) = v8;
  }
  if (a1 != a2)
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v9 = *(_BYTE *)(a2 + 64);
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 64) |= 1u;
    *(_QWORD *)(a1 + 32) = v10;
    v9 = *(_BYTE *)(a2 + 64);
  }
  if ((v9 & 2) != 0)
  {
    v11 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 64) |= 2u;
    *(_QWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t sub_21B859480(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastAuxTimeStampMicroSeconds");
    v5 = *(_BYTE *)(a1 + 64);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "qSP", v8);
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "super");
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
    PB::TextFormatter::format(this, "timeStampMicroSeconds");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B859560(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_DWORD *)operator new();
          *(_QWORD *)v22 = &off_24DF39280;
          v22[19] = 0;
          v23 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = *(_DWORD **)(a1 + 48);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) != 0)
          {
            goto LABEL_27;
          }
          return 0;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 4u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_111;
              v27 += 7;
              v24 = v30;
              v16 = v28++ > 8;
            }
            while (!v16);
LABEL_81:
            v29 = 0;
            goto LABEL_111;
          }
          v62 = 0;
          v63 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              v29 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v64 = v24 + 1;
              v65 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v64;
              v29 |= (unint64_t)(v65 & 0x7F) << v62;
              if (v65 < 0)
              {
                v62 += 7;
                v24 = v64;
                v16 = v63++ > 8;
                if (v16)
                  goto LABEL_81;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v29 = 0;
            }
            break;
          }
LABEL_111:
          *(_QWORD *)(a1 + 56) = v29;
          goto LABEL_129;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v32 = *((_QWORD *)this + 1);
            v33 = *((_QWORD *)this + 2);
            while (v32 < v33 && !*((_BYTE *)this + 24))
            {
              v35 = *(char **)(a1 + 16);
              v34 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v35 >= v34)
              {
                v37 = (char *)*v8;
                v38 = (v35 - (_BYTE *)*v8) >> 3;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61)
                  goto LABEL_139;
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 2 > v39)
                  v39 = v40 >> 2;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v42 = (char *)sub_21B796A20(v9, v41);
                  v37 = *(char **)(a1 + 8);
                  v35 = *(char **)(a1 + 16);
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[8 * v38];
                *(_QWORD *)v43 = 0;
                v36 = v43 + 8;
                while (v35 != v37)
                {
                  v44 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *((_QWORD *)v43 - 1) = v44;
                  v43 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v43;
                *(_QWORD *)(a1 + 16) = v36;
                *(_QWORD *)(a1 + 24) = &v42[8 * v41];
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_QWORD *)v35 = 0;
                v36 = v35 + 8;
              }
              *(_QWORD *)(a1 + 16) = v36;
              v45 = *((_QWORD *)this + 1);
              if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_QWORD *)(*(_QWORD *)this + v45);
              v33 = *((_QWORD *)this + 2);
              v32 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v32;
            }
LABEL_27:
            PB::Reader::recallMark();
          }
          else
          {
            v67 = *(char **)(a1 + 16);
            v66 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v67 >= v66)
            {
              v77 = (char *)*v8;
              v78 = (v67 - (_BYTE *)*v8) >> 3;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61)
LABEL_139:
                sub_21B796A0C();
              v80 = v66 - (_QWORD)v77;
              if (v80 >> 2 > v79)
                v79 = v80 >> 2;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_21B796A20(v9, v81);
                v77 = *(char **)(a1 + 8);
                v67 = *(char **)(a1 + 16);
              }
              else
              {
                v82 = 0;
              }
              v83 = &v82[8 * v78];
              *(_QWORD *)v83 = 0;
              v68 = v83 + 8;
              while (v67 != v77)
              {
                v84 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v83 - 1) = v84;
                v83 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v83;
              *(_QWORD *)(a1 + 16) = v68;
              *(_QWORD *)(a1 + 24) = &v82[8 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *(_QWORD *)(a1 + 16) = v68;
            v85 = *((_QWORD *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFF7 && v85 + 8 <= *((_QWORD *)this + 2))
            {
              *(v68 - 1) = *(_QWORD *)(*(_QWORD *)this + v85);
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_129:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_114;
              v49 += 7;
              v46 = v52;
              v16 = v50++ > 8;
            }
            while (!v16);
LABEL_90:
            v51 = 0;
            goto LABEL_114;
          }
          v69 = 0;
          v70 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v71 = v46 + 1;
              v72 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v71;
              v51 |= (unint64_t)(v72 & 0x7F) << v69;
              if (v72 < 0)
              {
                v69 += 7;
                v46 = v71;
                v16 = v70++ > 8;
                if (v16)
                  goto LABEL_90;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v51 = 0;
            }
            break;
          }
LABEL_114:
          *(_QWORD *)(a1 + 32) = v51;
          goto LABEL_129;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          v56 = *(_QWORD *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)this + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_117;
              v57 += 7;
              v54 = v60;
              v16 = v58++ > 8;
            }
            while (!v16);
LABEL_97:
            v59 = 0;
            goto LABEL_117;
          }
          v73 = 0;
          v74 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v55 == v54)
            {
              v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v75 = v54 + 1;
              v76 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)this + 1) = v75;
              v59 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                v54 = v75;
                v16 = v74++ > 8;
                if (v16)
                  goto LABEL_97;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v59 = 0;
            }
            break;
          }
LABEL_117:
          *(_QWORD *)(a1 + 40) = v59;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_129;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B859C14(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39280;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_21B859C28(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 48);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 64) & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v8 = *(_BYTE *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_21B859CDC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B859D00(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)result = &off_24DF39280;
  *(_DWORD *)(result + 76) = 0;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_WORD *)(result + 76) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 76) = v3;
    *(_QWORD *)(result + 48) = v5;
    v2 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *(_QWORD *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(result + 76) = v3;
    *(_QWORD *)(result + 56) = v6;
    v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 2) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 16) = v9;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 32) = v10;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      return result;
LABEL_20:
    v12 = *(_BYTE *)(a2 + 72);
    *(_WORD *)(result + 76) = v3 | 0x100;
    *(_BYTE *)(result + 72) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 76) = v3;
  *(_QWORD *)(result + 24) = v11;
  if ((*(_WORD *)(a2 + 76) & 0x100) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B859E14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "estimated");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "estimationUpdateIndex");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "rollAngle", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x80) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B859F64(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 76) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 2u:
              *(_WORD *)(a1 + 76) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 3u:
              *(_WORD *)(a1 + 76) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 4u:
              *(_WORD *)(a1 + 76) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 5u:
              *(_WORD *)(a1 + 76) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 6u:
              *(_WORD *)(a1 + 76) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 7u:
              *(_WORD *)(a1 + 76) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_64:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 76) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_68:
                    v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_68;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_69;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_69:
              *(_QWORD *)(a1 + 24) = v25;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 76) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 72) = v28;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85A398(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 76) & 0x100) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B85A4B8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF392B8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B85A4D4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85A4F8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  char v5;
  int v6;

  *(_QWORD *)a1 = &off_24DF392B8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_BYTE *)(a1 + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B85A588(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgRelOmegaRps", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ringSensorTrustModelMode");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "trustPencilRingSensorBool");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85A638(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_49;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 28) = v22;
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_53;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_54;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_55:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_49:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_55;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85A954(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B85A9E8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF392F0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B85AA00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85AA24(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = &off_24DF392F0;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(double *)(a1 + 8) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_21B85AA74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tipForce", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85AADC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B85ACB4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B85AD0C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39328;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_21B85AD24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85AD48(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)a1 = &off_24DF39328;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x20) != 0)
  {
    result = *(double *)(a2 + 48);
    v3 = 32;
    *(_WORD *)(a1 + 88) = 32;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 56);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 64) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x100) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 84) = v5;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v6;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 88) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_23:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  if ((*(_WORD *)(a2 + 88) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B85AE98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeAngleConfidence", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "azimuthAngleConfidence", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pathFlags");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pathStage");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionConfidence", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x100) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85B028(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_85;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_84;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_85;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_91;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_90;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_89;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_90;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *(_DWORD *)(a1 + 80) = v31;
LABEL_91:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_80:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_91;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_91;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85B574(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B85B6CC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39360;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B85B6E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85B708(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)result = &off_24DF39360;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_DWORD *)(result + 24) = v6;
  }
  return result;
}

uint64_t sub_21B85B778(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "sampleTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "activityType");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "wrMets", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85B808(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 4u;
      v21 = *((_QWORD *)this + 1);
      v2 = *((_QWORD *)this + 2);
      v22 = *(_QWORD *)this;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        v28 = 0;
        v29 = 0;
        v25 = 0;
        if (v2 <= v21)
          v2 = *((_QWORD *)this + 1);
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_52;
          }
          v30 = v21++;
          v31 = *(_BYTE *)(v22 + v30);
          *((_QWORD *)this + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            break;
          v28 += 7;
          v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v25) = 0;
LABEL_51:
        v2 = v30 + 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v2 = v21 + 1;
          *((_QWORD *)this + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            break;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *(_DWORD *)(a1 + 24) = v25;
      goto LABEL_53;
    }
    if ((_DWORD)v20 == 2)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_21B85BAD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B85BB4C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39398;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B85BB64(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85BB88(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  *(_QWORD *)result = &off_24DF39398;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 44) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    v9 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 44) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v8;
  if ((*(_BYTE *)(a2 + 44) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B85BC4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "algorithmVersion");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sampleStopReason");
    if ((*(_BYTE *)(a1 + 44) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85BD3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_76;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_76;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_76:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_80;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_81;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_92;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_85;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_86;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_92;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_90;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_91;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_92:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85C224(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B85C2F0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF393D0;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_21B85C308(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85C32C(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  double result;
  char v6;

  *(_QWORD *)a1 = &off_24DF393D0;
  *(_DWORD *)(a1 + 84) = 0;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x200) != 0)
  {
    v4 = *(_DWORD *)(a2 + 76);
    v3 = 512;
    *(_WORD *)(a1 + 84) = 512;
    *(_DWORD *)(a1 + 76) = v4;
    v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 64) = result;
    v2 = *(_WORD *)(a2 + 84);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 84) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 84);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v6 = *(_BYTE *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 84) = v3;
  *(_BYTE *)(a1 + 80) = v6;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 84) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 84);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 56);
    *(_WORD *)(a1 + 84) = v3 | 0x40;
    *(double *)(a1 + 56) = result;
    return result;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 84) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  if ((*(_WORD *)(a2 + 84) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B85C47C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 84);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineAccuracy", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "flags", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "header");
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intensity", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intensityCalDelta", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pocketFlag");
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 84) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "pocketProbability", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "ts", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85C60C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 84) |= 0x200u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_76;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_75:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_76;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *(_DWORD *)(a1 + 76) = v24;
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 84) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 3u:
              *(_WORD *)(a1 + 84) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 4u:
              *(_WORD *)(a1 + 84) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 5u:
              *(_WORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 6u:
              *(_WORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 7u:
              *(_WORD *)(a1 + 84) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 84) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 0xAu:
              *(_WORD *)(a1 + 84) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *(_WORD *)(a1 + 84) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_70:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_71:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_77;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_77:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85CAB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 84);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 56));
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  if ((*(_WORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56));
  return result;
}

double sub_21B85CC10(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF39408;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B85CC34(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF39408;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B85CC84(PB::Base *a1)
{
  sub_21B85CC34(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85CCA8(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24DF39408;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_21B85CD38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "position", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B85CDEC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 3;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 2 > v48)
                v48 = v49 >> 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796A20(v11, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = 0;
              v45 = v52 + 8;
              while (v44 != v46)
              {
                v53 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v44 = 0;
              v45 = v44 + 8;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = *(char **)(a1 + 16);
        v58 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v10;
          v67 = (v59 - (_BYTE *)*v10) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
            sub_21B796A0C();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_21B796A20(v11, v70);
            v66 = *(char **)(a1 + 8);
            v59 = *(char **)(a1 + 16);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[8 * v67];
          *(_QWORD *)v74 = 0;
          v57 = v74 + 8;
          while (v59 != v66)
          {
            v75 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v74;
          *(_QWORD *)(a1 + 16) = v57;
          *(_QWORD *)(a1 + 24) = &v71[8 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_QWORD *)v59 = 0;
          v57 = v59 + 8;
        }
        *(_QWORD *)(a1 + 16) = v57;
LABEL_114:
        v76 = *((_QWORD *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v76);
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_118:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v27 = *((_QWORD *)this + 1);
      v28 = *((_QWORD *)this + 2);
      while (v27 < v28 && !*((_BYTE *)this + 24))
      {
        v30 = *(char **)(a1 + 40);
        v29 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v30 >= v29)
        {
          v32 = (char *)*v8;
          v33 = (v30 - (_BYTE *)*v8) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_127;
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)sub_21B796A20(v9, v36);
            v32 = *(char **)(a1 + 32);
            v30 = *(char **)(a1 + 40);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = 0;
          v31 = v38 + 8;
          while (v30 != v32)
          {
            v39 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(_QWORD *)(a1 + 32) = v38;
          *(_QWORD *)(a1 + 40) = v31;
          *(_QWORD *)(a1 + 48) = &v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v30 = 0;
          v31 = v30 + 8;
        }
        *(_QWORD *)(a1 + 40) = v31;
        v40 = *((_QWORD *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
        v28 = *((_QWORD *)this + 2);
        v27 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    v56 = *(char **)(a1 + 40);
    v55 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v56 >= v55)
    {
      v60 = (char *)*v8;
      v61 = (v56 - (_BYTE *)*v8) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
LABEL_127:
        sub_21B796A0C();
      v63 = v55 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)sub_21B796A20(v9, v64);
        v60 = *(char **)(a1 + 32);
        v56 = *(char **)(a1 + 40);
      }
      else
      {
        v65 = 0;
      }
      v72 = &v65[8 * v61];
      *(_QWORD *)v72 = 0;
      v57 = v72 + 8;
      while (v56 != v60)
      {
        v73 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *((_QWORD *)v72 - 1) = v73;
        v72 -= 8;
      }
      *(_QWORD *)(a1 + 32) = v72;
      *(_QWORD *)(a1 + 40) = v57;
      *(_QWORD *)(a1 + 48) = &v65[8 * v64];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_QWORD *)v56 = 0;
      v57 = v56 + 8;
    }
    *(_QWORD *)(a1 + 40) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_21B85D35C(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

double sub_21B85D3DC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF39440;
  *(_DWORD *)(a1 + 44) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_21B85D3FC(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24DF39440;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B85D454(PB::Base *a1)
{
  sub_21B85D3FC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85D478(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_QWORD *)a1 = &off_24DF39440;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(_QWORD *)(a2 + 32))
  {
    v5 = operator new();
    v6 = sub_21B85CCA8(v5, *(_QWORD *)(a2 + 32));
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a1 != a2)
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
    v8 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_BYTE *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_21B85D548(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "wasCorrected");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B85D5F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        v25 = *((_QWORD *)this + 1);
        if (v25 >= *((_QWORD *)this + 2))
        {
          v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
          *((_QWORD *)this + 1) = v26;
          v28 = v27 != 0;
        }
        *(_BYTE *)(a1 + 40) = v28;
        goto LABEL_81;
      }
      if ((_DWORD)v22 == 2)
        break;
      if ((_DWORD)v22 == 1)
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_24DF39408;
        *(_DWORD *)(v23 + 64) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        v24 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *(_QWORD *)(a1 + 32);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, this) & 1) == 0)
        {
          return 0;
        }
LABEL_29:
        PB::Reader::recallMark();
        goto LABEL_81;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_81:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if ((v13 & 7) != 2)
    {
      v44 = *(char **)(a1 + 16);
      v43 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v44 >= v43)
      {
        v46 = (char *)*v8;
        v47 = (v44 - (_BYTE *)*v8) >> 3;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
LABEL_89:
          sub_21B796A0C();
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_21B796A20(v9, v50);
          v46 = *(char **)(a1 + 8);
          v44 = *(char **)(a1 + 16);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[8 * v47];
        *(_QWORD *)v52 = 0;
        v45 = v52 + 8;
        while (v44 != v46)
        {
          v53 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *((_QWORD *)v52 - 1) = v53;
          v52 -= 8;
        }
        *(_QWORD *)(a1 + 8) = v52;
        *(_QWORD *)(a1 + 16) = v45;
        *(_QWORD *)(a1 + 24) = &v51[8 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_QWORD *)v44 = 0;
        v45 = v44 + 8;
      }
      *(_QWORD *)(a1 + 16) = v45;
      v54 = *((_QWORD *)this + 1);
      if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *((_QWORD *)this + 2))
      {
        *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
        *((_QWORD *)this + 1) += 8;
      }
      else
      {
        *((_BYTE *)this + 24) = 1;
      }
      goto LABEL_81;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v29 = *((_QWORD *)this + 1);
    v30 = *((_QWORD *)this + 2);
    while (v29 < v30 && !*((_BYTE *)this + 24))
    {
      v32 = *(char **)(a1 + 16);
      v31 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v32 >= v31)
      {
        v34 = (char *)*v8;
        v35 = (v32 - (_BYTE *)*v8) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          goto LABEL_89;
        v37 = v31 - (_QWORD)v34;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)sub_21B796A20(v9, v38);
          v34 = *(char **)(a1 + 8);
          v32 = *(char **)(a1 + 16);
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[8 * v35];
        *(_QWORD *)v40 = 0;
        v33 = v40 + 8;
        while (v32 != v34)
        {
          v41 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v40 - 1) = v41;
          v40 -= 8;
        }
        *(_QWORD *)(a1 + 8) = v40;
        *(_QWORD *)(a1 + 16) = v33;
        *(_QWORD *)(a1 + 24) = &v39[8 * v38];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v32 = 0;
        v33 = v32 + 8;
      }
      *(_QWORD *)(a1 + 16) = v33;
      v42 = *((_QWORD *)this + 1);
      if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)this + 2))
      {
        *((_BYTE *)this + 24) = 1;
        goto LABEL_29;
      }
      *(v33 - 1) = *(_QWORD *)(*(_QWORD *)this + v42);
      v30 = *((_QWORD *)this + 2);
      v29 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v29;
    }
    goto LABEL_29;
  }
  return v4 == 0;
}

uint64_t sub_21B85DA40(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_21B85DAC0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF39478;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

void sub_21B85DAE4(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF39478;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B85DB34(PB::Base *a1)
{
  sub_21B85DAE4(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85DB58(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;

  *(_QWORD *)a1 = &off_24DF39478;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (a1 != a2)
  {
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 56) = v5;
  }
  return a1;
}

uint64_t sub_21B85DBEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "jointName");
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotation", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B85DCA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        v40 = *((_QWORD *)this + 1);
        v41 = *((_QWORD *)this + 2);
        v42 = *(_QWORD *)this;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v41)
        {
          v65 = 0;
          v66 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }
            v67 = v40 + 1;
            v68 = *(_BYTE *)(v42 + v40);
            *((_QWORD *)this + 1) = v67;
            v45 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v40 = v67;
            v18 = v66++ > 8;
            if (v18)
            {
LABEL_90:
              LODWORD(v45) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v45) = 0;
        }
        else
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (1)
          {
            v46 = v40 + 1;
            *((_QWORD *)this + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              break;
            v43 += 7;
            v40 = v46;
            v18 = v44++ > 8;
            if (v18)
              goto LABEL_90;
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v45;
        goto LABEL_133;
      }
      if ((_DWORD)v25 == 2)
        break;
      if ((_DWORD)v25 == 1)
      {
        if (v24 != 2)
        {
          v63 = *(char **)(a1 + 16);
          v62 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v63 >= v62)
          {
            v71 = (char *)*v10;
            v72 = (v63 - (_BYTE *)*v10) >> 3;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61)
LABEL_143:
              sub_21B796A0C();
            v74 = v62 - (_QWORD)v71;
            if (v74 >> 2 > v73)
              v73 = v74 >> 2;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)sub_21B796A20(v11, v75);
              v71 = *(char **)(a1 + 8);
              v63 = *(char **)(a1 + 16);
            }
            else
            {
              v76 = 0;
            }
            v83 = &v76[8 * v72];
            *(_QWORD *)v83 = 0;
            v64 = v83 + 8;
            while (v63 != v71)
            {
              v84 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *((_QWORD *)v83 - 1) = v84;
              v83 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v83;
            *(_QWORD *)(a1 + 16) = v64;
            *(_QWORD *)(a1 + 24) = &v76[8 * v75];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_QWORD *)v63 = 0;
            v64 = v63 + 8;
          }
          *(_QWORD *)(a1 + 16) = v64;
LABEL_129:
          v87 = *((_QWORD *)this + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *((_QWORD *)this + 2))
          {
            *(v64 - 1) = *(_QWORD *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v26 = *((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        while (v26 < v27 && !*((_BYTE *)this + 24))
        {
          v29 = *(char **)(a1 + 16);
          v28 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v29 >= v28)
          {
            v31 = (char *)*v10;
            v32 = (v29 - (_BYTE *)*v10) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_143;
            v34 = v28 - (_QWORD)v31;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_21B796A20(v11, v35);
              v31 = *(char **)(a1 + 8);
              v29 = *(char **)(a1 + 16);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[8 * v32];
            *(_QWORD *)v37 = 0;
            v30 = v37 + 8;
            while (v29 != v31)
            {
              v38 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v37;
            *(_QWORD *)(a1 + 16) = v30;
            *(_QWORD *)(a1 + 24) = &v36[8 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v29 = 0;
            v30 = v29 + 8;
          }
          *(_QWORD *)(a1 + 16) = v30;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
          v27 = *((_QWORD *)this + 2);
          v26 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v26;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_133:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v70 = *(char **)(a1 + 40);
      v69 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v70 >= v69)
      {
        v77 = (char *)*v8;
        v78 = (v70 - (_BYTE *)*v8) >> 3;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 61)
LABEL_144:
          sub_21B796A0C();
        v80 = v69 - (_QWORD)v77;
        if (v80 >> 2 > v79)
          v79 = v80 >> 2;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        if (v81)
        {
          v82 = (char *)sub_21B796A20(v9, v81);
          v77 = *(char **)(a1 + 32);
          v70 = *(char **)(a1 + 40);
        }
        else
        {
          v82 = 0;
        }
        v85 = &v82[8 * v78];
        *(_QWORD *)v85 = 0;
        v64 = v85 + 8;
        while (v70 != v77)
        {
          v86 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *((_QWORD *)v85 - 1) = v86;
          v85 -= 8;
        }
        *(_QWORD *)(a1 + 32) = v85;
        *(_QWORD *)(a1 + 40) = v64;
        *(_QWORD *)(a1 + 48) = &v82[8 * v81];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v70 = 0;
        v64 = v70 + 8;
      }
      *(_QWORD *)(a1 + 40) = v64;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v48 = *((_QWORD *)this + 1);
    v49 = *((_QWORD *)this + 2);
    while (v48 < v49 && !*((_BYTE *)this + 24))
    {
      v51 = *(char **)(a1 + 40);
      v50 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v51 >= v50)
      {
        v53 = (char *)*v8;
        v54 = (v51 - (_BYTE *)*v8) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          goto LABEL_144;
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)sub_21B796A20(v9, v57);
          v53 = *(char **)(a1 + 32);
          v51 = *(char **)(a1 + 40);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[8 * v54];
        *(_QWORD *)v59 = 0;
        v52 = v59 + 8;
        while (v51 != v53)
        {
          v60 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *((_QWORD *)v59 - 1) = v60;
          v59 -= 8;
        }
        *(_QWORD *)(a1 + 32) = v59;
        *(_QWORD *)(a1 + 40) = v52;
        *(_QWORD *)(a1 + 48) = &v58[8 * v57];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v51 = 0;
        v52 = v51 + 8;
      }
      *(_QWORD *)(a1 + 40) = v52;
      v61 = *((_QWORD *)this + 1);
      if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v52 - 1) = *(_QWORD *)(*(_QWORD *)this + v61);
      v49 = *((_QWORD *)this + 2);
      v48 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v48;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t sub_21B85E2BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B85E348(_QWORD *result)
{
  *result = off_24DF394B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B85E35C(void **a1)
{
  void **v2;

  *a1 = off_24DF394B0;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B85E3A4(void **a1)
{
  void **v3;

  *a1 = off_24DF394B0;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

_QWORD *sub_21B85E400(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  a1[1] = 0;
  v3 = (uint64_t **)(a1 + 1);
  *a1 = off_24DF394B0;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_21B85E464(v3, *v4++);
  return a1;
}

uint64_t sub_21B85E464(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B85DB58(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B85E598(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B85E5B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85E624(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_21B85E7C4(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B85E7C4(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF39478;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B85E90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B85E928(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_21B85E970(uint64_t result)
{
  *(_QWORD *)result = &off_24DF394E8;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_21B85E988(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85E9AC(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)result = &off_24DF394E8;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B85E9D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    PB::TextFormatter::format(this, "userActivity");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85EA24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B85EC58(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B85EC78(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39520;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B85EC90(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85ECB4(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  *(_QWORD *)a1 = &off_24DF39520;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 2;
    *(double *)(a1 + 16) = result;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 24) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B85ED04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85ED6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B85EF44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B85EF9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39558;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B85EFB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85EFD8(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)result = &off_24DF39558;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 40) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 40) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 28) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_16:
    v10 = *(_BYTE *)(a2 + 37);
    *(_BYTE *)(result + 40) = v3 | 0x40;
    *(_BYTE *)(result + 37) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_BYTE *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_BYTE *)(result + 36) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B85F0B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "inlierCount");
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isOutlierCurrentSample");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "isValidMeasurement");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "range", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "rangeShift", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "rangeFrequency", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85F1C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_61;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_66;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_65;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_66;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_67:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_60:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_61:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 36) = v28;
              goto LABEL_67;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 37) = v30;
              goto LABEL_67;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_67;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B85F5A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B85F688(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39590;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B85F6A0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B85F6C4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF39590;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B85F714(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isStart");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85F77C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B85F960(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B85F9B8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF395C8;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_21B85F9D0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B85F9F4(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  int v6;
  char v7;

  *(_QWORD *)a1 = &off_24DF395C8;
  *(_DWORD *)(a1 + 92) = 0;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) != 0)
  {
    result = *(double *)(a2 + 56);
    v3 = 64;
    *(_WORD *)(a1 + 92) = 64;
    *(double *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 92) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 92) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v5 = *(_BYTE *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 92) = v3;
  *(_BYTE *)(a1 + 88) = v5;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 84) = v6;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_28:
    result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 92) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_27:
  v7 = *(_BYTE *)(a2 + 89);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 92) = v3;
  *(_BYTE *)(a1 + 89) = v7;
  if ((*(_WORD *)(a2 + 92) & 0x20) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B85FB7C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "distanceFromParticleFilter", *(float *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalAngle", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "horizontalAngleUncertainty", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "horizontalAngleUncertaintyUnfiltered", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isConverged");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isDistanceValid");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "revokeReason");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "velocityX", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "velocityY", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B85FD4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  v33 = v23++;
                  v34 = *(_BYTE *)(v24 + v33);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 84) = v27;
LABEL_84:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_78:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_84;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B860274(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48));
  }
LABEL_26:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 92) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48));
  return result;
}

uint64_t sub_21B860404(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39600;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B86041C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B860440(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF39600;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  if ((*(_BYTE *)(a2 + 44) & 8) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 44) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B86053C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "noiseVelocityX", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "noiseVelocityY", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "speedUncertainty", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B86066C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_49:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_50:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8609B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 44) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_21B860AB4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39638;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B860ACC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B860AF0(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  *(_QWORD *)result = &off_24DF39638;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_WORD *)(result + 60) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 60) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_QWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(result + 60) = v3;
    *(_QWORD *)(result + 48) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_QWORD *)(result + 24) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 58);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 58) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_20:
    v12 = *(_BYTE *)(a2 + 57);
    *(_WORD *)(result + 60) = v3 | 0x80;
    *(_BYTE *)(result + 57) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_BYTE *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_BYTE *)(result + 56) = v11;
  if ((*(_WORD *)(a2 + 60) & 0x80) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B860C08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "fractionAboveThreshold", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalDistance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isAboveBelow");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isAboveBelowMessageShowing");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isConverged");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "likelihoodAboveThreshold", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
    if ((*(_WORD *)(a1 + 60) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x20) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "verticalDistance", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B860D58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 60) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 60) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 60) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_43:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 60) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 58) = v24;
          break;
        case 8u:
          *(_WORD *)(a1 + 60) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 56) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 60) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 57) = v26;
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8610F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_18:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B861210(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39670;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_21B861228(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B86124C(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;

  *(_QWORD *)a1 = &off_24DF39670;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 80) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 80) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_WORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(result) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      return result;
LABEL_32:
    result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 80) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_31:
  v5 = *(_BYTE *)(a2 + 76);
  v3 |= 0x4000u;
  *(_WORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v5;
  if ((*(_WORD *)(a2 + 80) & 2) != 0)
    goto LABEL_32;
  return result;
}

uint64_t sub_21B86140C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "qStartW", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "qStartX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "qStartY", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "qStartZ", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "qStopW", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "qStopX", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "qStopY", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "qStopZ", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "rBoresightX", *(float *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rBoresightY", *(float *)(a1 + 68));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rBoresightZ", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 24));
    if ((*(_WORD *)(a1 + 80) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 0x4000) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "useForwardPrediction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B86161C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 80) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_65;
        case 2u:
          *(_WORD *)(a1 + 80) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_65;
        case 3u:
          *(_WORD *)(a1 + 80) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 4u:
          *(_WORD *)(a1 + 80) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 5u:
          *(_WORD *)(a1 + 80) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 6u:
          *(_WORD *)(a1 + 80) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 7u:
          *(_WORD *)(a1 + 80) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 8u:
          *(_WORD *)(a1 + 80) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 9u:
          *(_WORD *)(a1 + 80) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xAu:
          *(_WORD *)(a1 + 80) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xBu:
          *(_WORD *)(a1 + 80) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xCu:
          *(_WORD *)(a1 + 80) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xDu:
          *(_WORD *)(a1 + 80) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_72:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *(_WORD *)(a1 + 80) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 76) = v22;
          break;
        case 0xFu:
          *(_WORD *)(a1 + 80) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_68:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_65:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_73:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B861AF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_30:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 80) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B861CBC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF396A8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B861CD4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B861CF8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF396A8;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 4;
    *(_DWORD *)(a1 + 20) = v4;
  }
  return *(float *)&v4;
}

uint64_t sub_21B861D68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B861DF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 4;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 24) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 8;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 24) |= 4u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_21B862018(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 20));
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_21B862090(uint64_t result)
{
  *(_QWORD *)result = &off_24DF396E0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B8620A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B8620CC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)a1 = &off_24DF396E0;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 0x20) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 = 32;
    *(_BYTE *)(a1 + 32) = 32;
    *(float *)(a1 + 28) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(float *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *(float *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 32) = v3;
  *(float *)(a1 + 8) = result;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      return result;
LABEL_14:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 4;
    *(float *)(a1 + 16) = result;
    return result;
  }
LABEL_13:
  result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(a1 + 32) = v3;
  *(float *)(a1 + 12) = result;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B862190(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inertialX", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialY", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "inertialZ", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "medTocFactoryTemp", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "maxTemp", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "medianToc", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B862280(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B86254C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_21B862618(_QWORD *result)
{
  *result = &off_24DF39718;
  result[1] = 0;
  return result;
}

void sub_21B862628(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B862668(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39718;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B8626BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF39718;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B861CF8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B862738(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B862788(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF396A8;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B86295C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B862978(_QWORD *result)
{
  *result = &off_24DF39750;
  result[1] = 0;
  return result;
}

void sub_21B862988(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39750;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B8629C8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39750;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B862A1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF39750;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B861CF8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B862A98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B862AE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF396A8;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B862CBC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B862CD8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39788;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B862CF0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF39788;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B862D34(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF39788;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B862D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_24DF39788;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 8) = v4;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = operator new();
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)v5 = &off_24DF397C0;
    *(_DWORD *)(v5 + 20) = 0;
    v7 = *(_BYTE *)(v6 + 20);
    if ((v7 & 1) != 0)
    {
      v9 = *(_QWORD *)(v6 + 8);
      *(_BYTE *)(v5 + 20) = 1;
      *(_QWORD *)(v5 + 8) = v9;
      v8 = 3;
      if ((v7 & 2) == 0)
        goto LABEL_9;
    }
    else
    {
      v8 = 2;
      if ((*(_BYTE *)(v6 + 20) & 2) == 0)
      {
LABEL_9:
        v11 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v5;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        return a1;
      }
    }
    v10 = *(_DWORD *)(v6 + 16);
    *(_BYTE *)(v5 + 20) = v8;
    *(_DWORD *)(v5 + 16) = v10;
    goto LABEL_9;
  }
  return a1;
}

float sub_21B862E68(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  float result;

  *(_QWORD *)a1 = &off_24DF397C0;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_21B862EBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B862F28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_24DF397C0;
        v21[5] = 0;
        v22 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *(_DWORD **)(a1 + 16);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v20);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B86315C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF397C0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_21B863170(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 8));
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(this, v4);
  return result;
}

void sub_21B8631C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8631EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B863254(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8634E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_21B863538(_QWORD *result)
{
  *result = &off_24DF397F8;
  result[1] = 0;
  return result;
}

void sub_21B863548(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF397F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B863588(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF397F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B8635DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF397F8;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B861CF8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B863658(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8636A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF396A8;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B86387C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B863898(_QWORD *result)
{
  *result = &off_24DF39830;
  result[1] = 0;
  return result;
}

void sub_21B8638A8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39830;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B8638E8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF39830;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B86393C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF39830;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B861CF8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B8639B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B863A08(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF396A8;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B863BDC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B863BF8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39868;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B863C14(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24DF39868;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B863C6C(PB::Base *a1)
{
  sub_21B863C14(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B863C90(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_24DF39868;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a2 + 40))
  {
    v5 = operator new();
    v6 = sub_21B85CCA8(v5, *(_QWORD *)(a2 + 40));
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a1 != a2)
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 32) = v8;
  }
  return a1;
}

uint64_t sub_21B863D60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "originalTimestamp", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B863E00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
        break;
      if ((_DWORD)v22 == 2)
      {
        if ((v13 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v8;
              v32 = (v29 - (_BYTE *)*v8) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_89;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_21B796A20(v9, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
LABEL_29:
          PB::Reader::recallMark();
          goto LABEL_81;
        }
        v41 = *(char **)(a1 + 16);
        v40 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v41 >= v40)
        {
          v43 = (char *)*v8;
          v44 = (v41 - (_BYTE *)*v8) >> 3;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 61)
LABEL_89:
            sub_21B796A0C();
          v46 = v40 - (_QWORD)v43;
          if (v46 >> 2 > v45)
            v45 = v46 >> 2;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)sub_21B796A20(v9, v47);
            v43 = *(char **)(a1 + 8);
            v41 = *(char **)(a1 + 16);
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[8 * v44];
          *(_QWORD *)v49 = 0;
          v42 = v49 + 8;
          while (v41 != v43)
          {
            v50 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *((_QWORD *)v49 - 1) = v50;
            v49 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v49;
          *(_QWORD *)(a1 + 16) = v42;
          *(_QWORD *)(a1 + 24) = &v48[8 * v47];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v41 = 0;
          v42 = v41 + 8;
        }
        *(_QWORD *)(a1 + 16) = v42;
        v51 = *((_QWORD *)this + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
        {
LABEL_78:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_81;
        }
        *(v42 - 1) = *(_QWORD *)(*(_QWORD *)this + v51);
        goto LABEL_80;
      }
      if ((_DWORD)v22 == 1)
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_24DF39408;
        *(_DWORD *)(v23 + 64) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        v24 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *(_QWORD *)(a1 + 40);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, this) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_29;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_81:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v25 = *((_QWORD *)this + 1);
    if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
      goto LABEL_78;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
LABEL_80:
    *((_QWORD *)this + 1) += 8;
    goto LABEL_81;
  }
  return v4 == 0;
}

uint64_t sub_21B864244(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 40);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_21B8642C4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF398A0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B8642DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B864300(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF398A0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B864350(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectionMask");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8643B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B864644(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B86469C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF398D8;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_21B8646B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B8646D8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  char v6;

  *(_QWORD *)a1 = &off_24DF398D8;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 88) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 44);
    v3 |= 0x100u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 44) = result;
    v2 = *(_DWORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    result = *(float *)(a2 + 52);
    v3 |= 0x400u;
    *(_DWORD *)(a1 + 88) = v3;
    *(float *)(a1 + 52) = result;
    v2 = *(_DWORD *)(a2 + 88);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = *(float *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v6 = *(_BYTE *)(a2 + 84);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 84) = v6;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x4000) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 4) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 4) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_DWORD *)(a2 + 88);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_40:
    result = *(float *)(a2 + 48);
    *(_DWORD *)(a1 + 88) = v3 | 0x200;
    *(float *)(a1 + 48) = result;
    return result;
  }
LABEL_39:
  result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 88) = v3;
  *(float *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 88) & 0x200) != 0)
    goto LABEL_40;
  return result;
}

uint64_t sub_21B864908(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "baselineError", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "covariancePostMeasurement00", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "covariancePostMeasurement01", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "covariancePostMeasurement11", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "covariancePreMeasurement00", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "covariancePreMeasurement01", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "covariancePreMeasurement11", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "estimate", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "factoryXTalk", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "gain", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "measurement", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "possibleObstructed");
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "proxBufferMax", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "proxBufferVariance", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "sensitivityCal", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "temperatureCalError", *(float *)(a1 + 80));
    if ((*(_DWORD *)(a1 + 88) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B864B98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 88) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_103:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_104;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_104:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_95;
            case 2u:
              *(_DWORD *)(a1 + 88) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_DWORD *)(a1 + 88) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_DWORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_DWORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_DWORD *)(a1 + 88) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 7u:
              *(_DWORD *)(a1 + 88) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 8u:
              *(_DWORD *)(a1 + 88) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 84) = v28;
              goto LABEL_95;
            case 9u:
              *(_DWORD *)(a1 + 88) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_DWORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_DWORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xCu:
              *(_DWORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xDu:
              *(_DWORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xEu:
              *(_DWORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xFu:
              *(_DWORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x11u:
              *(_DWORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x12u:
              *(_DWORD *)(a1 + 88) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x13u:
              *(_DWORD *)(a1 + 88) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_94:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8651FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48));
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 88) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48));
  return result;
}

double sub_21B865434(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF39910;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B865458(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF39910;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B8654A8(PB::Base *a1)
{
  sub_21B865458(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8654CC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  char v6;
  int v7;
  int v8;
  int v9;
  int v11;

  *(_QWORD *)a1 = &off_24DF39910;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_BYTE *)(a2 + 72);
  if ((v5 & 2) != 0)
  {
    v7 = *(_DWORD *)(a2 + 60);
    v6 = 2;
    *(_BYTE *)(a1 + 72) = 2;
    *(_DWORD *)(a1 + 60) = v7;
    v5 = *(_BYTE *)(a2 + 72);
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_BYTE *)(a2 + 72) & 1) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 56);
    v6 |= 1u;
    *(_BYTE *)(a1 + 72) = v6;
    *(_DWORD *)(a1 + 56) = v8;
    v5 = *(_BYTE *)(a2 + 72);
  }
LABEL_6:
  if ((v5 & 4) == 0)
  {
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *(_DWORD *)(a2 + 64);
  v6 |= 4u;
  *(_BYTE *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 64) = v11;
  if ((*(_BYTE *)(a2 + 72) & 8) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 72) = v6 | 8;
    *(_DWORD *)(a1 + 68) = v9;
  }
LABEL_9:
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_21B8655B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bC150RXAVE", *(float *)(a1 + 56));
    v5 = *(_BYTE *)(a1 + 72);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "gC0RXAVE", *(float *)(a1 + 60));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "ntcRamp", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "rxXT", v11);
  }
  v12 = *(_BYTE *)(a1 + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(this, "versionPxCL");
    v12 = *(_BYTE *)(a1 + 72);
  }
  if ((v12 & 8) != 0)
    PB::TextFormatter::format(this, "versionPxTC");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8656C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unint64_t v100;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_154;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_154;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v26);
LABEL_31:
          *((_QWORD *)this + 1) += 4;
          goto LABEL_156;
        case 3u:
          *(_BYTE *)(a1 + 72) |= 4u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_134;
              v30 += 7;
              v27 = v33;
              v18 = v31++ > 8;
            }
            while (!v18);
LABEL_100:
            LODWORD(v32) = 0;
            goto LABEL_134;
          }
          v71 = 0;
          v72 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v73 = v27 + 1;
              v74 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v73;
              v32 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v27 = v73;
                v18 = v72++ > 8;
                if (v18)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_134:
          *(_DWORD *)(a1 + 64) = v32;
          goto LABEL_156;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 8u;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          v37 = *(_QWORD *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)this + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_137;
              v38 += 7;
              v35 = v41;
              v18 = v39++ > 8;
            }
            while (!v18);
LABEL_107:
            LODWORD(v40) = 0;
            goto LABEL_137;
          }
          v75 = 0;
          v76 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v77 = v35 + 1;
              v78 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)this + 1) = v77;
              v40 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                v35 = v77;
                v18 = v76++ > 8;
                if (v18)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_137:
          *(_DWORD *)(a1 + 68) = v40;
          goto LABEL_156;
        case 5u:
          if (v24 != 2)
          {
            v80 = *(char **)(a1 + 16);
            v79 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v80 >= v79)
            {
              v84 = (char *)*v10;
              v85 = (v80 - (_BYTE *)*v10) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_166:
                sub_21B796A0C();
              v87 = v79 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)sub_21B796CD8(v11, v88);
                v84 = *(char **)(a1 + 8);
                v80 = *(char **)(a1 + 16);
              }
              else
              {
                v89 = 0;
              }
              v96 = &v89[4 * v85];
              *(_DWORD *)v96 = 0;
              v81 = v96 + 4;
              while (v80 != v84)
              {
                v97 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v96;
              *(_QWORD *)(a1 + 16) = v81;
              *(_QWORD *)(a1 + 24) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v80 = 0;
              v81 = v80 + 4;
            }
            *(_QWORD *)(a1 + 16) = v81;
            goto LABEL_152;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v10;
              v49 = (v46 - (_BYTE *)*v10) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_166;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_21B796CD8(v11, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_112;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_113;
        case 6u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v57 = *((_QWORD *)this + 1);
            v58 = *((_QWORD *)this + 2);
            while (v57 < v58 && !*((_BYTE *)this + 24))
            {
              v60 = *(char **)(a1 + 40);
              v59 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v60 >= v59)
              {
                v62 = (char *)*v8;
                v63 = (v60 - (_BYTE *)*v8) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  goto LABEL_167;
                v65 = v59 - (_QWORD)v62;
                if (v65 >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)sub_21B796CD8(v9, v66);
                  v62 = *(char **)(a1 + 32);
                  v60 = *(char **)(a1 + 40);
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = 0;
                v61 = v68 + 4;
                while (v60 != v62)
                {
                  v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v68;
                *(_QWORD *)(a1 + 40) = v61;
                *(_QWORD *)(a1 + 48) = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v60 = 0;
                v61 = v60 + 4;
              }
              *(_QWORD *)(a1 + 40) = v61;
              v70 = *((_QWORD *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
              v58 = *((_QWORD *)this + 2);
              v57 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v57;
            }
LABEL_113:
            PB::Reader::recallMark();
          }
          else
          {
            v83 = *(char **)(a1 + 40);
            v82 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v83 >= v82)
            {
              v90 = (char *)*v8;
              v91 = (v83 - (_BYTE *)*v8) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_167:
                sub_21B796A0C();
              v93 = v82 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_21B796CD8(v9, v94);
                v90 = *(char **)(a1 + 32);
                v83 = *(char **)(a1 + 40);
              }
              else
              {
                v95 = 0;
              }
              v98 = &v95[4 * v91];
              *(_DWORD *)v98 = 0;
              v81 = v98 + 4;
              while (v83 != v90)
              {
                v99 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v98;
              *(_QWORD *)(a1 + 40) = v81;
              *(_QWORD *)(a1 + 48) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v83 = 0;
              v81 = v83 + 4;
            }
            *(_QWORD *)(a1 + 40) = v81;
LABEL_152:
            v100 = *((_QWORD *)this + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((_QWORD *)this + 2))
            {
              *(v81 - 1) = *(_DWORD *)(*(_QWORD *)this + v100);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_154:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_156:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B865E54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 72);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 60));
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_15:
      result = PB::Writer::writeVarInt(this);
      if ((*(_BYTE *)(v3 + 72) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
    goto LABEL_15;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v9 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_21B865F2C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39948;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B865F44(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B865F68(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;

  *(_QWORD *)result = &off_24DF39948;
  *(_DWORD *)(result + 48) = 0;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v8;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v9;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v10 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 20) = v10;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v11 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v11;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      return result;
LABEL_22:
    v13 = *(_BYTE *)(a2 + 44);
    *(_WORD *)(result + 48) = v3 | 0x100;
    *(_BYTE *)(result + 44) = v13;
    return result;
  }
LABEL_21:
  v12 = *(_BYTE *)(a2 + 45);
  v3 |= 0x200u;
  *(_WORD *)(result + 48) = v3;
  *(_BYTE *)(result + 45) = v12;
  if ((*(_WORD *)(a2 + 48) & 0x100) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_21B86609C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineConfidence", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intensityCalDelta", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pocketFlag");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "scanFlags");
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rxNtcC", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 1) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B86620C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_72:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_73;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_73:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 4u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 5u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 7u:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_68:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 44) = v30;
              goto LABEL_74;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_74:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B866684(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_20:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 48) & 0x100) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B8667C0(_QWORD *result)
{
  *result = &off_24DF39980;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B8667D4(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF39980;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B866814(PB::Base *a1)
{
  sub_21B8667D4(a1);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B866838(_QWORD *a1, uint64_t a2)
{
  char *v3;

  *a1 = &off_24DF39980;
  a1[1] = 0;
  v3 = (char *)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  if (a1 != (_QWORD *)a2)
    sub_21B796B90(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_21B866890(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "volts");
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8668F4(_QWORD *a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 1);
    v9 = a1 + 3;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v34 = v12++ > 8;
        if (v34)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        if ((v13 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
          {
            v21 = (char *)a1[2];
            do
            {
              if ((unint64_t)v21 >= *v9)
              {
                v22 = (char *)*v8;
                v23 = (v21 - (_BYTE *)*v8) >> 2;
                v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 62)
                  goto LABEL_118;
                v25 = *v9 - (_QWORD)v22;
                if (v25 >> 1 > v24)
                  v24 = v25 >> 1;
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                  v26 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v26 = v24;
                if (v26)
                {
                  v27 = (char *)sub_21B796CD8((uint64_t)v9, v26);
                  v22 = (char *)a1[1];
                  v21 = (char *)a1[2];
                }
                else
                {
                  v27 = 0;
                }
                v28 = &v27[4 * v23];
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
                while (v21 != v22)
                {
                  v30 = *((_DWORD *)v21 - 1);
                  v21 -= 4;
                  *((_DWORD *)v28 - 1) = v30;
                  v28 -= 4;
                }
                a1[1] = v28;
                a1[2] = v29;
                a1[3] = &v27[4 * v26];
                if (v22)
                  operator delete(v22);
                v21 = v29;
              }
              else
              {
                *(_DWORD *)v21 = 0;
                v21 += 4;
              }
              a1[2] = v21;
              v32 = *((_QWORD *)this + 1);
              v31 = *((_QWORD *)this + 2);
              v33 = *(_QWORD *)this;
              v34 = v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v31;
              if (!v34)
              {
                v40 = 0;
                v41 = 0;
                v42 = 0;
                while (1)
                {
                  v43 = v32 + 1;
                  *((_QWORD *)this + 1) = v32 + 1;
                  v44 = *(_BYTE *)(v33 + v32);
                  v42 |= (unint64_t)(v44 & 0x7F) << v40;
                  if ((v44 & 0x80) == 0)
                    goto LABEL_65;
                  v40 += 7;
                  v32 = v43;
                  v34 = v41++ > 8;
                  if (v34)
                  {
                    LODWORD(v42) = 0;
                    goto LABEL_65;
                  }
                }
              }
              v35 = 0;
              v36 = 0;
              v42 = 0;
              if (v31 <= v32)
                v37 = *((_QWORD *)this + 1);
              else
                v37 = *((_QWORD *)this + 2);
              while (1)
              {
                if (v37 == v32)
                {
                  *((_BYTE *)this + 24) = 1;
                  *((_DWORD *)v21 - 1) = 0;
                  goto LABEL_81;
                }
                v38 = v32++;
                v39 = *(_BYTE *)(v33 + v38);
                *((_QWORD *)this + 1) = v32;
                v42 |= (unint64_t)(v39 & 0x7F) << v35;
                if ((v39 & 0x80) == 0)
                  break;
                v35 += 7;
                v34 = v36++ > 8;
                if (v34)
                {
                  LODWORD(v42) = 0;
                  goto LABEL_64;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
LABEL_64:
              v43 = v38 + 1;
LABEL_65:
              *((_DWORD *)v21 - 1) = v42;
            }
            while (v43 < v31 && !*((_BYTE *)this + 24));
          }
LABEL_81:
          PB::Reader::recallMark();
        }
        else
        {
          v46 = (char *)a1[2];
          v45 = a1[3];
          if ((unint64_t)v46 >= v45)
          {
            v48 = (char *)*v8;
            v49 = (v46 - (_BYTE *)*v8) >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
LABEL_118:
              sub_21B796A0C();
            v51 = v45 - (_QWORD)v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v53 = (char *)sub_21B796CD8((uint64_t)v9, v52);
              v48 = (char *)a1[1];
              v46 = (char *)a1[2];
            }
            else
            {
              v53 = 0;
            }
            v54 = &v53[4 * v49];
            *(_DWORD *)v54 = 0;
            v47 = v54 + 4;
            while (v46 != v48)
            {
              v55 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v54 - 1) = v55;
              v54 -= 4;
            }
            a1[1] = v54;
            a1[2] = v47;
            a1[3] = &v53[4 * v52];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(_DWORD *)v46 = 0;
            v47 = v46 + 4;
          }
          a1[2] = v47;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          v58 = *(_QWORD *)this;
          v59 = 0;
          v60 = 0;
          if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v57)
          {
            v64 = 0;
            if (v57 <= v56)
              v57 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v57 == v56)
              {
                LODWORD(v64) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_107;
              }
              v62 = v56 + 1;
              v63 = *(_BYTE *)(v58 + v56);
              *((_QWORD *)this + 1) = v62;
              v64 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0)
                break;
              v59 += 7;
              v56 = v62;
              v34 = v60++ > 8;
              if (v34)
              {
LABEL_103:
                LODWORD(v64) = 0;
                goto LABEL_107;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v64) = 0;
          }
          else
          {
            v64 = 0;
            while (1)
            {
              v65 = v56 + 1;
              *((_QWORD *)this + 1) = v56 + 1;
              v66 = *(_BYTE *)(v58 + v56);
              v64 |= (unint64_t)(v66 & 0x7F) << v59;
              if ((v66 & 0x80) == 0)
                break;
              v59 += 7;
              v56 = v65;
              v34 = v60++ > 8;
              if (v34)
                goto LABEL_103;
            }
          }
LABEL_107:
          *(v47 - 1) = v64;
        }
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B866DA0(uint64_t result, PB::Writer *this)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 16); v2 != i; result = PB::Writer::writeVarInt(this))
    v2 += 4;
  return result;
}

uint64_t sub_21B866DE8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF399B8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B866DFC(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24DF399B8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_21B866E3C(PB::Base *a1)
{
  sub_21B866DFC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B866E60(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24DF399B8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v5 = operator new();
    v6 = v5;
    v7 = *(__int128 **)(a2 + 8);
    if (*((char *)v7 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v5, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v7 + 2);
      *(_OWORD *)v5 = v8;
    }
    v9 = *v4;
    *v4 = v6;
    if (v9)
      sub_21B796830((uint64_t)v4, v9);
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)(a1 + 16) = v10;
  }
  return a1;
}

uint64_t sub_21B866F2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "value", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B866F90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v24 = *((_QWORD *)this + 1);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v24);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v12 >> 3) == 1)
      {
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        v26 = 0;
        v22 = *v8;
        *v8 = (uint64_t)v21;
        if (v22)
        {
          sub_21B796830((uint64_t)v8, v22);
          v23 = v26;
          v26 = 0;
          if (v23)
            sub_21B796830((uint64_t)&v26, v23);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B867194(uint64_t result, PB::Writer *this)
{
  uint64_t v3;

  v3 = result;
  if (*(_QWORD *)(result + 8))
    result = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_21B8671E8(_QWORD *result)
{
  *result = &off_24DF399F0;
  *(_QWORD *)((char *)result + 188) = 0;
  return result;
}

void sub_21B867200(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B867224(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  char v37;
  int v38;
  int v39;
  char v40;
  char v41;
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  char v53;

  *(_QWORD *)result = &off_24DF399F0;
  *(_QWORD *)(result + 188) = 0;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_QWORD *)(result + 188) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x800000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x800000uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_DWORD *)(result + 104) = v5;
    v2 = *(_QWORD *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 0x1000000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_DWORD *)(result + 108) = v6;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_57;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 112) = v7;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_58;
  }
LABEL_57:
  v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 24) = v8;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_59;
  }
LABEL_58:
  v9 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 28) = v9;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_60;
  }
LABEL_59:
  v10 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 32) = v10;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_61;
  }
LABEL_60:
  v11 = *(_DWORD *)(a2 + 132);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 132) = v11;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_62;
  }
LABEL_61:
  v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 48) = v12;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_63;
  }
LABEL_62:
  v13 = *(_DWORD *)(a2 + 96);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 96) = v13;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_64;
  }
LABEL_63:
  v14 = *(_DWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 16) = v14;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_65;
  }
LABEL_64:
  v15 = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 116) = v15;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_66;
  }
LABEL_65:
  v16 = *(_DWORD *)(a2 + 120);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 120) = v16;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_67;
  }
LABEL_66:
  v17 = *(_DWORD *)(a2 + 124);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 124) = v17;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_68;
  }
LABEL_67:
  v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 36) = v18;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_69;
  }
LABEL_68:
  v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 40) = v19;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_70;
  }
LABEL_69:
  v20 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 44) = v20;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_71;
  }
LABEL_70:
  v21 = *(_DWORD *)(a2 + 136);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 136) = v21;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_72;
  }
LABEL_71:
  v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 52) = v22;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_73;
  }
LABEL_72:
  v23 = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 100) = v23;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_74;
  }
LABEL_73:
  v24 = *(_DWORD *)(a2 + 20);
  v3 |= 4uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 20) = v24;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000) == 0)
      goto LABEL_27;
    goto LABEL_75;
  }
LABEL_74:
  v25 = *(_DWORD *)(a2 + 148);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 148) = v25;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_28;
    goto LABEL_76;
  }
LABEL_75:
  v26 = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 68) = v26;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_77;
  }
LABEL_76:
  v27 = *(_DWORD *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 160) = v27;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_30;
    goto LABEL_78;
  }
LABEL_77:
  v28 = *(_DWORD *)(a2 + 80);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 80) = v28;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_79;
  }
LABEL_78:
  v29 = *(_DWORD *)(a2 + 152);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 152) = v29;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_32;
    goto LABEL_80;
  }
LABEL_79:
  v30 = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 72) = v30;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_81;
  }
LABEL_80:
  v31 = *(_DWORD *)(a2 + 164);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 164) = v31;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_82;
  }
LABEL_81:
  v32 = *(_DWORD *)(a2 + 84);
  v3 |= 0x40000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 84) = v32;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_83;
  }
LABEL_82:
  v33 = *(_DWORD *)(a2 + 156);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 156) = v33;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_84;
  }
LABEL_83:
  v34 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 76) = v34;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_85;
  }
LABEL_84:
  v35 = *(_DWORD *)(a2 + 168);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v35;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_38;
    goto LABEL_86;
  }
LABEL_85:
  v36 = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 88) = v36;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_87;
  }
LABEL_86:
  v37 = *(_BYTE *)(a2 + 183);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 183) = v37;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000) == 0)
      goto LABEL_40;
    goto LABEL_88;
  }
LABEL_87:
  v38 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 56) = v38;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_40:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_41;
    goto LABEL_89;
  }
LABEL_88:
  v39 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 60) = v39;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_42;
    goto LABEL_90;
  }
LABEL_89:
  v40 = *(_BYTE *)(a2 + 182);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 182) = v40;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x2000) == 0)
      goto LABEL_43;
    goto LABEL_91;
  }
LABEL_90:
  v41 = *(_BYTE *)(a2 + 184);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 184) = v41;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x2000) == 0)
  {
LABEL_43:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_44;
    goto LABEL_92;
  }
LABEL_91:
  v42 = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 64) = v42;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_45;
    goto LABEL_93;
  }
LABEL_92:
  v43 = *(_DWORD *)(a2 + 140);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 140) = v43;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_46;
    goto LABEL_94;
  }
LABEL_93:
  v44 = *(_DWORD *)(a2 + 144);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 144) = v44;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_47;
    goto LABEL_95;
  }
LABEL_94:
  v45 = *(_BYTE *)(a2 + 186);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 186) = v45;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_48;
    goto LABEL_96;
  }
LABEL_95:
  v46 = *(_BYTE *)(a2 + 181);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 181) = v46;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_49;
    goto LABEL_97;
  }
LABEL_96:
  v47 = *(_BYTE *)(a2 + 180);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 180) = v47;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_50;
    goto LABEL_98;
  }
LABEL_97:
  v48 = *(_DWORD *)(a2 + 128);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 128) = v48;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_99;
  }
LABEL_98:
  v49 = *(_DWORD *)(a2 + 176);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v49;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v2 & 0x100000) == 0)
      goto LABEL_52;
    goto LABEL_100;
  }
LABEL_99:
  v50 = *(_DWORD *)(a2 + 172);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v50;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_52:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_53;
    goto LABEL_101;
  }
LABEL_100:
  v51 = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 92) = v51;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_53:
    if ((v2 & 0x2000000000000) == 0)
      return result;
LABEL_102:
    v53 = *(_BYTE *)(a2 + 187);
    *(_QWORD *)(result + 188) = v3 | 0x2000000000000;
    *(_BYTE *)(result + 187) = v53;
    return result;
  }
LABEL_101:
  v52 = *(_BYTE *)(a2 + 185);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 185) = v52;
  if ((*(_QWORD *)(a2 + 188) & 0x2000000000000) != 0)
    goto LABEL_102;
  return result;
}

uint64_t sub_21B8677B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "auxHorizontalRotation", *(float *)(a1 + 16));
    v5 = *(_QWORD *)(a1 + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_55;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxHorizontalTranslation", *(float *)(a1 + 20));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "auxOmegaInertial_X", *(float *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "auxOmegaInertial_Y", *(float *)(a1 + 28));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "auxOmegaInertial_Z", *(float *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "auxUserAccelInertial_X", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Y", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Z", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "auxVerticalRotation", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "auxVerticalTranslation", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "blockHeadTurnFalsePositive");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "bodyTurnDetectionVerticalRotationSrc", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "bodyTurnMaximaBaseline", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_16;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "counterBodyTurnAboveBaseline");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "hasRecentHeadTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "horizontalRotationSimilarity", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityBaseline", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityThreshold", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarity", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityBaseline", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_23;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityThreshold", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "inBodyTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_25;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "inComplexTransitionState");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "inStrongBodyTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_27;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "longBodyTurnCounter");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_28;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "longBodyTurnState");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "overrideHeadTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "srcHorizontalRotation", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "srcHorizontalTranslation", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "srcOmegaInertial_X", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "srcOmegaInertial_Y", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "srcOmegaInertial_Z", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_35;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "srcUserAccelInertial_X", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Y", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Z", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_38;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "srcVertToHrzRotRatio", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "srcVerticalRotation", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "srcVerticalTranslation", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "srcYawRotationExtremaBuffer", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0)
      goto LABEL_42;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "srcYawRotationMaximaBaseline", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "verticalRotationSimilarity", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "verticalRotationSimilarityBaseline", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "verticalRotationSimilarityThreshold", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "verticalTranslationSimilarity", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityBaseline", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityThreshold", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_50;
LABEL_101:
    PB::TextFormatter::format(this, "yawRateSimilarity200ms", *(float *)(a1 + 176));
    if ((*(_QWORD *)(a1 + 188) & 0x2000000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_51;
  }
LABEL_100:
  PB::TextFormatter::format(this, "yawRateSimilarity1000ms", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000000) != 0)
    goto LABEL_101;
LABEL_50:
  if ((v5 & 0x2000000000000) != 0)
LABEL_51:
    PB::TextFormatter::format(this, "yawRateSimilarityState");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B867E28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 188) |= 1uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v20);
          v21 = *((_QWORD *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(_QWORD *)(a1 + 188) |= 0x800000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_205;
        case 3u:
          *(_QWORD *)(a1 + 188) |= 0x1000000uLL;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_205;
        case 4u:
          *(_QWORD *)(a1 + 188) |= 0x2000000uLL;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_205;
        case 5u:
          *(_QWORD *)(a1 + 188) |= 8uLL;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_205;
        case 6u:
          *(_QWORD *)(a1 + 188) |= 0x10uLL;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_205;
        case 7u:
          *(_QWORD *)(a1 + 188) |= 0x20uLL;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_205;
        case 8u:
          *(_QWORD *)(a1 + 188) |= 0x40000000uLL;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_205;
        case 9u:
          *(_QWORD *)(a1 + 188) |= 0x200uLL;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_205;
        case 0xAu:
          *(_QWORD *)(a1 + 188) |= 0x200000uLL;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_205;
        case 0xBu:
          *(_QWORD *)(a1 + 188) |= 2uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_205;
        case 0xCu:
          *(_QWORD *)(a1 + 188) |= 0x4000000uLL;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_205;
        case 0xDu:
          *(_QWORD *)(a1 + 188) |= 0x8000000uLL;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_205;
        case 0xEu:
          *(_QWORD *)(a1 + 188) |= 0x10000000uLL;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_205;
        case 0xFu:
          *(_QWORD *)(a1 + 188) |= 0x40uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_205;
        case 0x10u:
          *(_QWORD *)(a1 + 188) |= 0x80uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_205;
        case 0x11u:
          *(_QWORD *)(a1 + 188) |= 0x100uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_205;
        case 0x12u:
          *(_QWORD *)(a1 + 188) |= 0x80000000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_205;
        case 0x13u:
          *(_QWORD *)(a1 + 188) |= 0x400uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_205;
        case 0x14u:
          *(_QWORD *)(a1 + 188) |= 0x400000uLL;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_205;
        case 0x15u:
          *(_QWORD *)(a1 + 188) |= 4uLL;
          v42 = *((_QWORD *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v42);
          goto LABEL_205;
        case 0x16u:
          *(_QWORD *)(a1 + 188) |= 0x400000000uLL;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v43);
          goto LABEL_205;
        case 0x17u:
          *(_QWORD *)(a1 + 188) |= 0x4000uLL;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_205;
        case 0x18u:
          *(_QWORD *)(a1 + 188) |= 0x2000000000uLL;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_205;
        case 0x19u:
          *(_QWORD *)(a1 + 188) |= 0x20000uLL;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v46);
          goto LABEL_205;
        case 0x1Au:
          *(_QWORD *)(a1 + 188) |= 0x800000000uLL;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(_QWORD *)(a1 + 188) |= 0x8000uLL;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(_QWORD *)(a1 + 188) |= 0x4000000000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_205;
        case 0x1Du:
          *(_QWORD *)(a1 + 188) |= 0x40000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(_QWORD *)(a1 + 188) |= 0x1000000000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(_QWORD *)(a1 + 188) |= 0x10000uLL;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_205;
        case 0x20u:
          *(_QWORD *)(a1 + 188) |= 0x8000000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_205;
        case 0x21u:
          *(_QWORD *)(a1 + 188) |= 0x80000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_205;
        case 0x22u:
          *(_QWORD *)(a1 + 188) |= 0x200000000000uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 >= *((_QWORD *)this + 2))
          {
            v58 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)this + v55);
            *((_QWORD *)this + 1) = v56;
            v58 = v57 != 0;
          }
          *(_BYTE *)(a1 + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(_QWORD *)(a1 + 188) |= 0x800uLL;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v59);
          goto LABEL_205;
        case 0x24u:
          *(_QWORD *)(a1 + 188) |= 0x1000uLL;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_205;
        case 0x25u:
          *(_QWORD *)(a1 + 188) |= 0x100000000000uLL;
          v61 = *((_QWORD *)this + 1);
          if (v61 >= *((_QWORD *)this + 2))
          {
            v64 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
            *((_QWORD *)this + 1) = v62;
            v64 = v63 != 0;
          }
          *(_BYTE *)(a1 + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(_QWORD *)(a1 + 188) |= 0x400000000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 >= *((_QWORD *)this + 2))
          {
            v68 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
            *((_QWORD *)this + 1) = v66;
            v68 = v67 != 0;
          }
          *(_BYTE *)(a1 + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(_QWORD *)(a1 + 188) |= 0x2000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_219;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          v110 = 0;
          v111 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v112 = v69 + 1;
              v113 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                v69 = v112;
                v14 = v111++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 64) = v74;
          goto LABEL_207;
        case 0x28u:
          *(_QWORD *)(a1 + 188) |= 0x100000000uLL;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_205;
        case 0x29u:
          *(_QWORD *)(a1 + 188) |= 0x200000000uLL;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v78);
          goto LABEL_205;
        case 0x2Au:
          *(_QWORD *)(a1 + 188) |= 0x1000000000000uLL;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(_QWORD *)(a1 + 188) |= 0x80000000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(_QWORD *)(a1 + 188) |= 0x40000000000uLL;
          v87 = *((_QWORD *)this + 1);
          if (v87 >= *((_QWORD *)this + 2))
          {
            v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) = v88;
            v90 = v89 != 0;
          }
          *(_BYTE *)(a1 + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(_QWORD *)(a1 + 188) |= 0x20000000uLL;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(_QWORD *)(a1 + 188) |= 0x20000000000uLL;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(_QWORD *)(a1 + 188) |= 0x10000000000uLL;
          v93 = *((_QWORD *)this + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v93);
LABEL_205:
            v21 = *((_QWORD *)this + 1) + 4;
LABEL_206:
            *((_QWORD *)this + 1) = v21;
          }
          else
          {
LABEL_162:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(_QWORD *)(a1 + 188) |= 0x100000uLL;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          v96 = *(_QWORD *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)this + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_216;
              v97 += 7;
              v94 = v100;
              v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          v114 = 0;
          v115 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)this + 1);
          break;
        case 0x31u:
          *(_QWORD *)(a1 + 188) |= 0x800000000000uLL;
          v102 = *((_QWORD *)this + 1);
          if (v102 >= *((_QWORD *)this + 2))
          {
            v105 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)this + v102);
            *((_QWORD *)this + 1) = v103;
            v105 = v104 != 0;
          }
          *(_BYTE *)(a1 + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(_QWORD *)(a1 + 188) |= 0x2000000000000uLL;
          v106 = *((_QWORD *)this + 1);
          if (v106 >= *((_QWORD *)this + 2))
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)this + v106);
            *((_QWORD *)this + 1) = v107;
            v109 = v108 != 0;
          }
          *(_BYTE *)(a1 + 187) = v109;
          goto LABEL_207;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_216;
        }
        v116 = v94 + 1;
        v117 = *(_BYTE *)(v96 + v94);
        *((_QWORD *)this + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0)
          break;
        v114 += 7;
        v94 = v116;
        v14 = v115++ > 8;
        if (v14)
          goto LABEL_199;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v99) = 0;
LABEL_216:
      *(_DWORD *)(a1 + 92) = v99;
LABEL_207:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B868C78(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 188);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0)
      goto LABEL_49;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_50;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x2000000000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_100:
  result = PB::Writer::write(this);
  if ((*(_QWORD *)(v3 + 188) & 0x2000000000000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B869214(uint64_t result)
{
  *(_QWORD *)result = &off_24DF39A28;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_21B86922C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B869250(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;

  *(_QWORD *)result = &off_24DF39A28;
  *(_DWORD *)(result + 128) = 0;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_DWORD *)(result + 128) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 100);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 100) = v5;
    v2 = *(_DWORD *)(a2 + 128);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x80u;
    *(_DWORD *)(result + 128) = v3;
    *(_DWORD *)(result + 48) = v6;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 96) = v7;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 44) = v8;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 76) = v9;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 72) = v10;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  v11 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 68) = v11;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  v12 = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 112) = v12;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  v13 = *(_BYTE *)(a2 + 124);
  v3 |= 0x20000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 124) = v13;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  v14 = *(_BYTE *)(a2 + 120);
  v3 |= 0x2000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 120) = v14;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  v15 = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 60) = v15;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  v16 = *(_BYTE *)(a2 + 123);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 123) = v16;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  v17 = *(_BYTE *)(a2 + 125);
  v3 |= 0x40000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 125) = v17;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  v18 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 92) = v18;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 40) = v19;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  v20 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 88) = v20;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  v21 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 36) = v21;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  v22 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 52) = v22;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 108) = v23;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  v24 = *(_BYTE *)(a2 + 126);
  v3 |= 0x80000000;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 126) = v24;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  v25 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 84) = v25;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  v26 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 32) = v26;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  v27 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 56) = v27;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  v28 = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 104) = v28;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x800) == 0)
      goto LABEL_31;
    goto LABEL_61;
  }
LABEL_60:
  v29 = *(_BYTE *)(a2 + 121);
  v3 |= 0x4000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_BYTE *)(result + 121) = v29;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_31:
    if ((v2 & 1) == 0)
      goto LABEL_32;
    goto LABEL_62;
  }
LABEL_61:
  v30 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 64) = v30;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_63;
  }
LABEL_62:
  v31 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 8) = v31;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_34;
    goto LABEL_64;
  }
LABEL_63:
  v32 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 128) = v3;
  *(_QWORD *)(result + 16) = v32;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x8000) == 0)
      goto LABEL_35;
    goto LABEL_65;
  }
LABEL_64:
  v33 = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 116) = v33;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000) == 0)
      return result;
LABEL_66:
    v35 = *(_BYTE *)(a2 + 122);
    *(_DWORD *)(result + 128) = v3 | 0x8000000;
    *(_BYTE *)(result + 122) = v35;
    return result;
  }
LABEL_65:
  v34 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 128) = v3;
  *(_DWORD *)(result + 80) = v34;
  if ((*(_DWORD *)(a2 + 128) & 0x8000000) != 0)
    goto LABEL_66;
  return result;
}

uint64_t sub_21B8695EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "auxAvgOmegaAroundGrav2s", *(float *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravLong", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravShort", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "auxAvgOmegaLong", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "auxAvgOmegaShort", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "auxHistoricalOmegaStdMax", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "auxOverSrcYawDiffSum", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "dotRotGrav", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "hasUnCorrelatedSrcMotion");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "inHeadTurnState");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "inLikelySlowBodyTurnPed");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isInCorrelatedActivity");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isInCorrelatedMotion");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "lastHeadTurnStartTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lastHeadTurnStopTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "lastHeadTurnYawRadians", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "likelyOnGymMachine");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "relOmegaMeanLong", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "relOmegaVarLong", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "relOmegaVarShort", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "srcAccumulatedYaw4s", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGrav2s", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravLong", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravShort", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "srcAvgOmegaLong", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "srcAvgOmegaShort", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "srcAvgYawBufferSum", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "srcHistoricalOmegaStdMax", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "srcRotationAxisAlignment", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(this, "steadyStatePedestrian");
    if ((*(_DWORD *)(a1 + 128) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(this, "srcYawBufferLongStd", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 128);
  if (v5 < 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 4) != 0)
LABEL_33:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B869A1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 128) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_102;
        case 2u:
          *(_DWORD *)(a1 + 128) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 3u:
          *(_DWORD *)(a1 + 128) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 4u:
          *(_DWORD *)(a1 + 128) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 5u:
          *(_DWORD *)(a1 + 128) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 6u:
          *(_DWORD *)(a1 + 128) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 7u:
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 8u:
          *(_DWORD *)(a1 + 128) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 9u:
          *(_DWORD *)(a1 + 128) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0xAu:
          *(_DWORD *)(a1 + 128) |= 0x20000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 124) = v22;
          break;
        case 0xBu:
          *(_DWORD *)(a1 + 128) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 120) = v24;
          break;
        case 0xCu:
          *(_DWORD *)(a1 + 128) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0xDu:
          *(_DWORD *)(a1 + 128) |= 0x10000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 123) = v26;
          break;
        case 0xEu:
          *(_DWORD *)(a1 + 128) |= 0x40000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v28 = v27 != 0;
          }
          *(_BYTE *)(a1 + 125) = v28;
          break;
        case 0xFu:
          *(_DWORD *)(a1 + 128) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x10u:
          *(_DWORD *)(a1 + 128) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x11u:
          *(_DWORD *)(a1 + 128) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x12u:
          *(_DWORD *)(a1 + 128) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x13u:
          *(_DWORD *)(a1 + 128) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x14u:
          *(_DWORD *)(a1 + 128) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x15u:
          *(_DWORD *)(a1 + 128) |= 0x80000000;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 126) = v30;
          break;
        case 0x16u:
          *(_DWORD *)(a1 + 128) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x17u:
          *(_DWORD *)(a1 + 128) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x18u:
          *(_DWORD *)(a1 + 128) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x19u:
          *(_DWORD *)(a1 + 128) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Au:
          *(_DWORD *)(a1 + 128) |= 0x4000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v32 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v32 = v31 != 0;
          }
          *(_BYTE *)(a1 + 121) = v32;
          break;
        case 0x1Bu:
          *(_DWORD *)(a1 + 128) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Cu:
          *(_DWORD *)(a1 + 128) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_102;
        case 0x1Du:
          *(_DWORD *)(a1 + 128) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_102:
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *(_DWORD *)(a1 + 128) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Fu:
          *(_DWORD *)(a1 + 128) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_129:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_130:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        case 0x20u:
          *(_DWORD *)(a1 + 128) |= 0x8000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v34 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v34 = v33 != 0;
          }
          *(_BYTE *)(a1 + 122) = v34;
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

