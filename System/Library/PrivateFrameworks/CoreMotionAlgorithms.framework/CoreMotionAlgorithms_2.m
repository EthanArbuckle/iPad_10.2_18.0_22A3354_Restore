uint64_t sub_21B7BFE3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  if ((*(_WORD *)(v3 + 68) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_21B7BFFE8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF344C0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7C0000(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C0024(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF344C0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B7C0074(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "compassJustAlignedToStableField");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C00DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C0368(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7C03C0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF344F8;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_21B7C03D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7C03FC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;

  *(_QWORD *)a1 = &off_24DF344F8;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x8000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v5 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 28) = v5;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v6 = *(_BYTE *)(a2 + 77);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 77) = v6;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
      return *(float *)&v4;
    goto LABEL_38;
  }
LABEL_37:
  v7 = *(_BYTE *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v7;
  if ((*(_DWORD *)(a2 + 80) & 0x100) == 0)
    return *(float *)&v4;
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 80) = v3 | 0x100;
  *(_DWORD *)(a1 + 44) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7C0610(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "apAwake");
    v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "calibrationLevel");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "coverage", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hasConsistency");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "poseX", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "poseY", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "poseZ", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 72));
    if ((*(_DWORD *)(a1 + 80) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x8000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 1) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C0880(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_93;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v33 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_99:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 77) = v28;
              goto LABEL_99;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 76) = v30;
              goto LABEL_99;
            case 0x12u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_92:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_93:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_79:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_99;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_99;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7C0EC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 44));
  }
LABEL_36:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 80) & 0x100) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44));
  return result;
}

uint64_t sub_21B7C10DC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34530;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_21B7C10F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7C1118(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  int v6;

  *(_QWORD *)a1 = &off_24DF34530;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 80) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_DWORD *)(a1 + 80) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_DWORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x10000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v5 = *(_BYTE *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_BYTE *)(a1 + 76) = v5;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0)
      return *(float *)&v4;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 44) = v6;
  if ((*(_DWORD *)(a2 + 80) & 0x200) == 0)
    return *(float *)&v4;
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 80) = v3 | 0x200;
  *(_DWORD *)(a1 + 48) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7C1310(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "coverage2d", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "coverage3d", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isPlanar");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "numberOfSamples");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_DWORD *)(a1 + 80) & 0x8000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timeSpan", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 1) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x8000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C1560(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_89;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 76) = v22;
              goto LABEL_95;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_93:
                    v2 = v31 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_93;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_94;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 44) = v27;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_88:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_89:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7C1B5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48));
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 80) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48));
  return result;
}

double sub_21B7C1D5C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF34568;
  *(_DWORD *)(a1 + 124) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B7C1D80(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF34568;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B7C1DD0(PB::Base *a1)
{
  sub_21B7C1D80(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C1DF4(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  int v23;
  int v24;
  int v25;

  *(_QWORD *)a1 = &off_24DF34568;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_DWORD *)(a2 + 124);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 56);
    v6 = 1;
    *(_DWORD *)(a1 + 124) = 1;
    *(_QWORD *)(a1 + 56) = v7;
    v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x80) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 88);
    v6 |= 0x80u;
    *(_DWORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 88) = v8;
    v5 = *(_DWORD *)(a2 + 124);
  }
LABEL_6:
  if ((v5 & 0x4000) != 0)
  {
    v13 = *(_DWORD *)(a2 + 116);
    v6 |= 0x4000u;
    *(_DWORD *)(a1 + 124) = v6;
    *(_DWORD *)(a1 + 116) = v13;
    v5 = *(_DWORD *)(a2 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_8:
      if ((v5 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_DWORD *)(a2 + 68);
  v6 |= 4u;
  *(_DWORD *)(a1 + 124) = v6;
  *(_DWORD *)(a1 + 68) = v14;
  if ((*(_DWORD *)(a2 + 124) & 0x20) != 0)
  {
LABEL_9:
    v9 = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 124) = v6 | 0x20;
    *(_DWORD *)(a1 + 80) = v9;
  }
LABEL_10:
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x800) != 0)
  {
    v15 = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(a1 + 124) |= 0x800u;
    *(_DWORD *)(a1 + 104) = v15;
    v10 = *(_DWORD *)(a2 + 124);
    if ((v10 & 0x100) == 0)
    {
LABEL_14:
      if ((v10 & 2) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((v10 & 0x100) == 0)
  {
    goto LABEL_14;
  }
  v16 = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 124) |= 0x100u;
  *(_DWORD *)(a1 + 92) = v16;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 2) == 0)
  {
LABEL_15:
    if ((v10 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 124) |= 2u;
  *(_DWORD *)(a1 + 64) = v17;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x10) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 124) |= 0x10u;
  *(_DWORD *)(a1 + 76) = v18;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 124) |= 8u;
  *(_DWORD *)(a1 + 72) = v19;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x400) == 0)
  {
LABEL_18:
    if ((v10 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 124) |= 0x400u;
  *(_DWORD *)(a1 + 100) = v20;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x10000) == 0)
  {
LABEL_19:
    if ((v10 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *(_BYTE *)(a2 + 121);
  *(_DWORD *)(a1 + 124) |= 0x10000u;
  *(_BYTE *)(a1 + 121) = v21;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x8000) == 0)
  {
LABEL_20:
    if ((v10 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *(_BYTE *)(a2 + 120);
  *(_DWORD *)(a1 + 124) |= 0x8000u;
  *(_BYTE *)(a1 + 120) = v22;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x200) == 0)
  {
LABEL_21:
    if ((v10 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 124) |= 0x200u;
  *(_DWORD *)(a1 + 96) = v23;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x1000) == 0)
  {
LABEL_22:
    if ((v10 & 0x40) == 0)
      goto LABEL_23;
LABEL_39:
    v25 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(a1 + 124) |= 0x40u;
    *(_DWORD *)(a1 + 84) = v25;
    if ((*(_DWORD *)(a2 + 124) & 0x2000) == 0)
      return a1;
    goto LABEL_24;
  }
LABEL_38:
  v24 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 124) |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v24;
  v10 = *(_DWORD *)(a2 + 124);
  if ((v10 & 0x40) != 0)
    goto LABEL_39;
LABEL_23:
  if ((v10 & 0x2000) != 0)
  {
LABEL_24:
    v11 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 124) |= 0x2000u;
    *(_DWORD *)(a1 + 112) = v11;
  }
  return a1;
}

uint64_t sub_21B7C207C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  int v8;
  float *v9;
  float *v10;
  float v11;
  int v12;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 124) & 2) != 0)
    PB::TextFormatter::format(this, "attitudeDelta", *(float *)(a1 + 64));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "calibratedField", v7);
  }
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "doCorrection");
    v8 = *(_DWORD *)(a1 + 124);
    if ((v8 & 4) == 0)
    {
LABEL_7:
      if ((v8 & 8) == 0)
        goto LABEL_8;
      goto LABEL_28;
    }
  }
  else if ((v8 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 68));
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 8) == 0)
  {
LABEL_8:
    if ((v8 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isOnSphere");
  v8 = *(_DWORD *)(a1 + 124);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isRotating");
  if ((*(_DWORD *)(a1 + 124) & 0x10000) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "isTraversingSphere");
LABEL_11:
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "predictedField", v11);
  }
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "scale", *(float *)(a1 + 80));
    v12 = *(_DWORD *)(a1 + 124);
    if ((v12 & 0x40) == 0)
    {
LABEL_15:
      if ((v12 & 1) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v12 & 0x40) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "timerUnitDistanceThreshold", *(float *)(a1 + 84));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    if ((v12 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x80) == 0)
  {
LABEL_17:
    if ((v12 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 88));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x100) == 0)
  {
LABEL_18:
    if ((v12 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "unitDistanceLargeBufferDelta", *(float *)(a1 + 92));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x200) == 0)
  {
LABEL_19:
    if ((v12 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "unitDistanceLargeBufferMax", *(float *)(a1 + 96));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x400) == 0)
  {
LABEL_20:
    if ((v12 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "unitDistanceReference", *(float *)(a1 + 100));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x800) == 0)
  {
LABEL_21:
    if ((v12 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "unitDistanceSmallBufferDelta", *(float *)(a1 + 104));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x1000) == 0)
  {
LABEL_22:
    if ((v12 & 0x2000) == 0)
      goto LABEL_23;
LABEL_40:
    PB::TextFormatter::format(this, "unitDistanceThresholdApplied", *(float *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 124) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_39:
  PB::TextFormatter::format(this, "unitDistanceThreshold", *(float *)(a1 + 108));
  v12 = *(_DWORD *)(a1 + 124);
  if ((v12 & 0x2000) != 0)
    goto LABEL_40;
LABEL_23:
  if ((v12 & 0x4000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "vertical", *(float *)(a1 + 116));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7C2330(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  char *v95;
  char v96;
  unsigned int v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  int v119;
  unint64_t v120;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 124) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_197;
        case 2u:
          *(_DWORD *)(a1 + 124) |= 0x80u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_196;
        case 3u:
          *(_DWORD *)(a1 + 124) |= 0x4000u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_196;
        case 4u:
          *(_DWORD *)(a1 + 124) |= 4u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_196;
        case 5u:
          *(_DWORD *)(a1 + 124) |= 0x20u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_196;
        case 6u:
          if (v24 != 2)
          {
            v92 = *(char **)(a1 + 16);
            v91 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v92 >= v91)
            {
              v104 = (char *)*v10;
              v105 = (v92 - (_BYTE *)*v10) >> 2;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 62)
LABEL_208:
                sub_21B796A0C();
              v107 = v91 - (_QWORD)v104;
              if (v107 >> 1 > v106)
                v106 = v107 >> 1;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                v108 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              if (v108)
              {
                v109 = (char *)sub_21B796CD8(v11, v108);
                v104 = *(char **)(a1 + 8);
                v92 = *(char **)(a1 + 16);
              }
              else
              {
                v109 = 0;
              }
              v116 = &v109[4 * v105];
              *(_DWORD *)v116 = 0;
              v93 = v116 + 4;
              while (v92 != v104)
              {
                v117 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v116;
              *(_QWORD *)(a1 + 16) = v93;
              *(_QWORD *)(a1 + 24) = &v109[4 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_DWORD *)v92 = 0;
              v93 = v92 + 4;
            }
            *(_QWORD *)(a1 + 16) = v93;
            goto LABEL_192;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v31 = *((_QWORD *)this + 1);
          v32 = *((_QWORD *)this + 2);
          while (v31 < v32 && !*((_BYTE *)this + 24))
          {
            v34 = *(char **)(a1 + 16);
            v33 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v34 >= v33)
            {
              v36 = (char *)*v10;
              v37 = (v34 - (_BYTE *)*v10) >> 2;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62)
                goto LABEL_208;
              v39 = v33 - (_QWORD)v36;
              if (v39 >> 1 > v38)
                v38 = v39 >> 1;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                v40 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                v41 = (char *)sub_21B796CD8(v11, v40);
                v36 = *(char **)(a1 + 8);
                v34 = *(char **)(a1 + 16);
              }
              else
              {
                v41 = 0;
              }
              v42 = &v41[4 * v37];
              *(_DWORD *)v42 = 0;
              v35 = v42 + 4;
              while (v34 != v36)
              {
                v43 = *((_DWORD *)v34 - 1);
                v34 -= 4;
                *((_DWORD *)v42 - 1) = v43;
                v42 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v42;
              *(_QWORD *)(a1 + 16) = v35;
              *(_QWORD *)(a1 + 24) = &v41[4 * v40];
              if (v36)
                operator delete(v36);
            }
            else
            {
              *(_DWORD *)v34 = 0;
              v35 = v34 + 4;
            }
            *(_QWORD *)(a1 + 16) = v35;
            v44 = *((_QWORD *)this + 1);
            if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v35 - 1) = *(_DWORD *)(*(_QWORD *)this + v44);
            v32 = *((_QWORD *)this + 2);
            v31 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v31;
          }
          goto LABEL_153;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v45 = *((_QWORD *)this + 1);
            v46 = *((_QWORD *)this + 2);
            while (v45 < v46 && !*((_BYTE *)this + 24))
            {
              v48 = *(char **)(a1 + 40);
              v47 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v48 >= v47)
              {
                v50 = (char *)*v8;
                v51 = (v48 - (_BYTE *)*v8) >> 2;
                v52 = v51 + 1;
                if ((unint64_t)(v51 + 1) >> 62)
                  goto LABEL_209;
                v53 = v47 - (_QWORD)v50;
                if (v53 >> 1 > v52)
                  v52 = v53 >> 1;
                if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
                  v54 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v54 = v52;
                if (v54)
                {
                  v55 = (char *)sub_21B796CD8(v9, v54);
                  v50 = *(char **)(a1 + 32);
                  v48 = *(char **)(a1 + 40);
                }
                else
                {
                  v55 = 0;
                }
                v56 = &v55[4 * v51];
                *(_DWORD *)v56 = 0;
                v49 = v56 + 4;
                while (v48 != v50)
                {
                  v57 = *((_DWORD *)v48 - 1);
                  v48 -= 4;
                  *((_DWORD *)v56 - 1) = v57;
                  v56 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v56;
                *(_QWORD *)(a1 + 40) = v49;
                *(_QWORD *)(a1 + 48) = &v55[4 * v54];
                if (v50)
                  operator delete(v50);
              }
              else
              {
                *(_DWORD *)v48 = 0;
                v49 = v48 + 4;
              }
              *(_QWORD *)(a1 + 40) = v49;
              v58 = *((_QWORD *)this + 1);
              if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
              {
LABEL_152:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v49 - 1) = *(_DWORD *)(*(_QWORD *)this + v58);
              v46 = *((_QWORD *)this + 2);
              v45 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v45;
            }
LABEL_153:
            PB::Reader::recallMark();
          }
          else
          {
            v95 = *(char **)(a1 + 40);
            v94 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v95 >= v94)
            {
              v110 = (char *)*v8;
              v111 = (v95 - (_BYTE *)*v8) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
LABEL_209:
                sub_21B796A0C();
              v113 = v94 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_21B796CD8(v9, v114);
                v110 = *(char **)(a1 + 32);
                v95 = *(char **)(a1 + 40);
              }
              else
              {
                v115 = 0;
              }
              v118 = &v115[4 * v111];
              *(_DWORD *)v118 = 0;
              v93 = v118 + 4;
              while (v95 != v110)
              {
                v119 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v118;
              *(_QWORD *)(a1 + 40) = v93;
              *(_QWORD *)(a1 + 48) = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v95 = 0;
              v93 = v95 + 4;
            }
            *(_QWORD *)(a1 + 40) = v93;
LABEL_192:
            v120 = *((_QWORD *)this + 1);
            if (v120 <= 0xFFFFFFFFFFFFFFFBLL && v120 + 4 <= *((_QWORD *)this + 2))
            {
              *(v93 - 1) = *(_DWORD *)(*(_QWORD *)this + v120);
LABEL_196:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_197:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_194:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_198:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 8u:
          *(_DWORD *)(a1 + 124) |= 0x800u;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v59);
          goto LABEL_196;
        case 9u:
          *(_DWORD *)(a1 + 124) |= 0x100u;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_196;
        case 0xAu:
          *(_DWORD *)(a1 + 124) |= 2u;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v61);
          goto LABEL_196;
        case 0xBu:
          *(_DWORD *)(a1 + 124) |= 0x10u;
          v62 = *((_QWORD *)this + 1);
          v63 = *((_QWORD *)this + 2);
          v64 = *(_QWORD *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v68 = v62 + 1;
              *((_QWORD *)this + 1) = v62 + 1;
              v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0)
                goto LABEL_174;
              v65 += 7;
              v62 = v68;
              v18 = v66++ > 8;
            }
            while (!v18);
LABEL_140:
            LODWORD(v67) = 0;
            goto LABEL_174;
          }
          v96 = 0;
          v97 = 0;
          v67 = 0;
          if (v63 <= v62)
            v63 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v63 == v62)
            {
              LODWORD(v67) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v98 = v62 + 1;
              v99 = *(_BYTE *)(v64 + v62);
              *((_QWORD *)this + 1) = v98;
              v67 |= (unint64_t)(v99 & 0x7F) << v96;
              if (v99 < 0)
              {
                v96 += 7;
                v62 = v98;
                v18 = v97++ > 8;
                if (v18)
                  goto LABEL_140;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v67) = 0;
            }
            break;
          }
LABEL_174:
          *(_DWORD *)(a1 + 76) = v67;
          goto LABEL_198;
        case 0xCu:
          *(_DWORD *)(a1 + 124) |= 8u;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          v72 = *(_QWORD *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)this + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_177;
              v73 += 7;
              v70 = v76;
              v18 = v74++ > 8;
            }
            while (!v18);
LABEL_147:
            LODWORD(v75) = 0;
            goto LABEL_177;
          }
          v100 = 0;
          v101 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v71 == v70)
            {
              LODWORD(v75) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v102 = v70 + 1;
              v103 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)this + 1) = v102;
              v75 |= (unint64_t)(v103 & 0x7F) << v100;
              if (v103 < 0)
              {
                v100 += 7;
                v70 = v102;
                v18 = v101++ > 8;
                if (v18)
                  goto LABEL_147;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v75) = 0;
            }
            break;
          }
LABEL_177:
          *(_DWORD *)(a1 + 72) = v75;
          goto LABEL_198;
        case 0xDu:
          *(_DWORD *)(a1 + 124) |= 0x400u;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v78);
          goto LABEL_196;
        case 0xEu:
          *(_DWORD *)(a1 + 124) |= 0x10000u;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 121) = v82;
          goto LABEL_198;
        case 0xFu:
          *(_DWORD *)(a1 + 124) |= 0x8000u;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 120) = v86;
          goto LABEL_198;
        case 0x10u:
          *(_DWORD *)(a1 + 124) |= 0x200u;
          v87 = *((_QWORD *)this + 1);
          if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v87);
          goto LABEL_196;
        case 0x11u:
          *(_DWORD *)(a1 + 124) |= 0x1000u;
          v88 = *((_QWORD *)this + 1);
          if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v88);
          goto LABEL_196;
        case 0x12u:
          *(_DWORD *)(a1 + 124) |= 0x40u;
          v89 = *((_QWORD *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v89);
          goto LABEL_196;
        case 0x13u:
          *(_DWORD *)(a1 + 124) |= 0x2000u;
          v90 = *((_QWORD *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)this + 2))
            goto LABEL_194;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v90);
          goto LABEL_196;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_198;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C2DB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
LABEL_29:
    result = PB::Writer::write(this, *(float *)(v3 + 68));
    if ((*(_DWORD *)(v3 + 124) & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) != 0)
    goto LABEL_29;
LABEL_5:
  if ((v4 & 0x20) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(float *)(v3 + 80));
LABEL_7:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 104));
    v11 = *(_DWORD *)(v3 + 124);
    if ((v11 & 0x100) == 0)
    {
LABEL_15:
      if ((v11 & 2) == 0)
        goto LABEL_16;
      goto LABEL_33;
    }
  }
  else if ((v11 & 0x100) == 0)
  {
    goto LABEL_15;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 2) == 0)
  {
LABEL_16:
    if ((v11 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10) == 0)
  {
LABEL_17:
    if ((v11 & 8) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 8) == 0)
  {
LABEL_18:
    if ((v11 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x400) == 0)
  {
LABEL_19:
    if ((v11 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x10000) == 0)
  {
LABEL_20:
    if ((v11 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x8000) == 0)
  {
LABEL_21:
    if ((v11 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x200) == 0)
  {
LABEL_22:
    if ((v11 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x1000) == 0)
  {
LABEL_23:
    if ((v11 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v11 = *(_DWORD *)(v3 + 124);
  if ((v11 & 0x40) == 0)
  {
LABEL_24:
    if ((v11 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 112));
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  if ((*(_DWORD *)(v3 + 124) & 0x2000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 112));
  return result;
}

_QWORD *sub_21B7C2FFC(_QWORD *result)
{
  *result = &off_24DF345A0;
  result[1] = 0;
  return result;
}

void sub_21B7C300C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF345A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7C304C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF345A0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7C30A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF345A0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7C7200(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B7C311C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C316C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF34798;
        *(_DWORD *)(v20 + 160) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        *(_OWORD *)(v20 + 136) = 0u;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C3368(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B7C3384(uint64_t result)
{
  *(_QWORD *)result = &off_24DF345D8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B7C339C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C33C0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  *(_QWORD *)result = &off_24DF345D8;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 28) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 4) == 0)
      return result;
LABEL_10:
    v7 = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(result + 28) = v3 | 4;
    *(_BYTE *)(result + 24) = v7;
    return result;
  }
  v6 = *(_BYTE *)(a2 + 25);
  v3 |= 8u;
  *(_BYTE *)(result + 28) = v3;
  *(_BYTE *)(result + 25) = v6;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B7C344C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "finalDecision");
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 28) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "instantDecision");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C34FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_29;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_29:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_40;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 25) = v22;
              goto LABEL_40;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 24) = v24;
              goto LABEL_40;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_40:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7C3770(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_8:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B7C3804(_QWORD *result)
{
  *result = &off_24DF34610;
  result[1] = 0;
  return result;
}

void sub_21B7C3814(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF34610;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7C3854(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF34610;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7C38A8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF34610;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B5EAC(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B7C3924(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C3974(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF33FF0;
        *(_QWORD *)(v20 + 8) = 0;
        *(_DWORD *)(v20 + 28) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C3B48(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B7C3B64(_QWORD *result)
{
  *result = &off_24DF34648;
  result[1] = 0;
  return result;
}

void sub_21B7C3B74(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF34648;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7C3BB4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF34648;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7C3C08(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF34648;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B4DC4(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B7C3C84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C3CD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF33FB8;
        *(_DWORD *)(v20 + 144) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_QWORD *)(v20 + 120) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C3ECC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B7C3EE8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34680;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_21B7C3F00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7C3F24(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  float result;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)a1 = &off_24DF34680;
  *(_DWORD *)(a1 + 92) = 0;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 92) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 88);
    v3 |= 0x80000u;
    *(_DWORD *)(a1 + 92) = v3;
    *(float *)(a1 + 88) = result;
    v2 = *(_DWORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 |= 0x10u;
    *(_DWORD *)(a1 + 92) = v3;
    *(float *)(a1 + 28) = result;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v6 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 32) = v6;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 24) = v7;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 56) = v8;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 44) = v9;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 40) = v10;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 48) = v11;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 2) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 52) = v12;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 92) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  result = *(float *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  result = *(float *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0)
      return result;
LABEL_42:
    result = *(float *)(a2 + 84);
    *(_DWORD *)(a1 + 92) = v3 | 0x40000;
    *(float *)(a1 + 84) = result;
    return result;
  }
LABEL_41:
  result = *(float *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 92) = v3;
  *(float *)(a1 + 80) = result;
  if ((*(_DWORD *)(a2 + 92) & 0x40000) != 0)
    goto LABEL_42;
  return result;
}

uint64_t sub_21B7C4170(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "deviceSide");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gaitPhase");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_DWORD *)(a1 + 92) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x80000) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C4420(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_189;
                  }
                  v77 = v20++;
                  v78 = *(_BYTE *)(v21 + v77);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_188:
                v2 = v77 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_189;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_189:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_230;
            case 2u:
              *(_DWORD *)(a1 + 92) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 3u:
              *(_DWORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 4u:
              *(_DWORD *)(a1 + 92) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 5u:
              *(_DWORD *)(a1 + 92) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_194;
                  }
                  v81 = v27++;
                  v82 = *(_BYTE *)(v28 + v81);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_193:
                    v2 = v81 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_193;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_194;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_194:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_230;
            case 6u:
              *(_DWORD *)(a1 + 92) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_199;
                  }
                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_198:
                    v2 = v85 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_198;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_199;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_199:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_230;
            case 7u:
              *(_DWORD *)(a1 + 92) |= 0x800u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_204;
                  }
                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_203:
                    v2 = v89 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_203;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_204;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_204:
              *(_DWORD *)(a1 + 56) = v43;
              goto LABEL_230;
            case 8u:
              *(_DWORD *)(a1 + 92) |= 0x100u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_209;
                  }
                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_208:
                    v2 = v93 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_208;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_209;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_209:
              *(_DWORD *)(a1 + 44) = v49;
              goto LABEL_230;
            case 9u:
              *(_DWORD *)(a1 + 92) |= 0x80u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_214;
                  }
                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_213:
                    v2 = v97 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_213;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_214;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_214:
              *(_DWORD *)(a1 + 40) = v55;
              goto LABEL_230;
            case 0xAu:
              *(_DWORD *)(a1 + 92) |= 0x200u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_219;
                  }
                  v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_218:
                    v2 = v101 + 1;
                    goto LABEL_219;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_218;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_219;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_219:
              *(_DWORD *)(a1 + 48) = v61;
              goto LABEL_230;
            case 0xBu:
              *(_DWORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0xCu:
              *(_DWORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0xDu:
              *(_DWORD *)(a1 + 92) |= 0x400u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_224;
                  }
                  v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0)
                    break;
                  v103 += 7;
                  v14 = v104++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_223:
                    v2 = v105 + 1;
                    goto LABEL_224;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
                goto LABEL_223;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_224;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_224:
              *(_DWORD *)(a1 + 52) = v67;
              goto LABEL_230;
            case 0xEu:
              *(_DWORD *)(a1 + 92) |= 0x40u;
              v69 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v70 = *(_QWORD *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v107 = 0;
                v108 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_229;
                  }
                  v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((_QWORD *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0)
                    break;
                  v107 += 7;
                  v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_228:
                    v2 = v109 + 1;
                    goto LABEL_229;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v73) = 0;
                goto LABEL_228;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)this + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_229;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_229:
              *(_DWORD *)(a1 + 36) = v73;
LABEL_230:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x10u:
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x11u:
              *(_DWORD *)(a1 + 92) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x12u:
              *(_DWORD *)(a1 + 92) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x13u:
              *(_DWORD *)(a1 + 92) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_119;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_184;
            case 0x14u:
              *(_DWORD *)(a1 + 92) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_184:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_119:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_230;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_230;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7C5050(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 84));
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 92) & 0x40000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 84));
  return result;
}

uint64_t sub_21B7C52A4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF346B8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7C52BC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7C52E0(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24DF346B8;
  *(_DWORD *)(a1 + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) == 0)
  {
    v2 = 2;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return *(float *)&v3;
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 8) = v3;
  v2 = 3;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v2;
    *(_DWORD *)(a1 + 16) = v3;
  }
  return *(float *)&v3;
}

uint64_t sub_21B7C5330(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C5398(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B7C5578(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_21B7C55D0(_QWORD *result)
{
  *result = &off_24DF346F0;
  result[1] = 0;
  return result;
}

void sub_21B7C55E0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF346F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7C5620(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF346F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7C5674(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF346F0;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7C7200(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B7C56F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C5740(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF34798;
        *(_DWORD *)(v20 + 160) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        *(_OWORD *)(v20 + 136) = 0u;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C593C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

void sub_21B7C595C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7C5980(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF34728;
  *(_DWORD *)(a1 + 124) = 0;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_DWORD *)(a1 + 124) = 16;
    *(_QWORD *)(a1 + 40) = v4;
    v2 = *(_DWORD *)(a2 + 124);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 124) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 124);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 124) = v3;
    *(_QWORD *)(a1 + 24) = v4;
    v2 = *(_DWORD *)(a2 + 124);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  v4 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x40000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x80000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 56) = v5;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x1000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v6 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 76) = v6;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  v7 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 52) = v7;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x10000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v8 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 92) = v8;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v9 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_DWORD *)(a1 + 112) = v9;
  v2 = *(_DWORD *)(a2 + 124);
  if ((v2 & 0x800000) == 0)
  {
LABEL_27:
    if ((v2 & 0x400000) == 0)
      return *(float *)&v4;
    goto LABEL_50;
  }
LABEL_49:
  v10 = *(_BYTE *)(a2 + 120);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 124) = v3;
  *(_BYTE *)(a1 + 120) = v10;
  if ((*(_DWORD *)(a2 + 124) & 0x400000) == 0)
    return *(float *)&v4;
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 124) = v3 | 0x400000;
  *(_DWORD *)(a1 + 116) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7C5C38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 124);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "clientID");
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isGyroOn");
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel");
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "mode");
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "status");
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(this, "variant");
    if ((*(_DWORD *)(a1 + 124) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x400000) != 0)
LABEL_25:
    PB::TextFormatter::format(this, "visionCompassBias", *(float *)(a1 + 116));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C5F68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 124) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 124) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 124) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 124) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 124) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_155;
            case 6u:
              *(_DWORD *)(a1 + 124) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 7u:
              *(_DWORD *)(a1 + 124) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 8u:
              *(_DWORD *)(a1 + 124) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 9u:
              *(_DWORD *)(a1 + 124) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xAu:
              *(_DWORD *)(a1 + 124) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xBu:
              *(_DWORD *)(a1 + 124) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xCu:
              *(_DWORD *)(a1 + 124) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xDu:
              *(_DWORD *)(a1 + 124) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xEu:
              *(_DWORD *)(a1 + 124) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0xFu:
              *(_DWORD *)(a1 + 124) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_165;
                  }
                  v55 = v21++;
                  v56 = *(_BYTE *)(v22 + v55);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_164:
                    v2 = v55 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_164;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_165;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_156;
            case 0x10u:
              *(_DWORD *)(a1 + 124) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0x11u:
              *(_DWORD *)(a1 + 124) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0x12u:
              *(_DWORD *)(a1 + 124) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_115;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_154;
            case 0x13u:
              *(_DWORD *)(a1 + 124) |= 0x1000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_170;
                  }
                  v59 = v27++;
                  v60 = *(_BYTE *)(v28 + v59);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_169:
                    v2 = v59 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_169;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_170;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 76) = v31;
              goto LABEL_156;
            case 0x14u:
              *(_DWORD *)(a1 + 124) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_175;
                  }
                  v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_174:
                    v2 = v63 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_174;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_175;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_156;
            case 0x15u:
              *(_DWORD *)(a1 + 124) |= 0x10000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_180;
                  }
                  v67 = v39++;
                  v68 = *(_BYTE *)(v40 + v67);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_179:
                    v2 = v67 + 1;
                    goto LABEL_180;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_179;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_180;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_180:
              *(_DWORD *)(a1 + 92) = v43;
              goto LABEL_156;
            case 0x16u:
              *(_DWORD *)(a1 + 124) |= 0x200000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_185;
                  }
                  v71 = v45++;
                  v72 = *(_BYTE *)(v46 + v71);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_184:
                    v2 = v71 + 1;
                    goto LABEL_185;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_184;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_185;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_185:
              *(_DWORD *)(a1 + 112) = v49;
LABEL_156:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 124) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 120) = v52;
              goto LABEL_156;
            case 0x18u:
              *(_DWORD *)(a1 + 124) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_154:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_155:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_115:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_156;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_156;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7C69BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 124);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 116));
  }
LABEL_48:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 124) & 0x400000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 116));
  return result;
}

uint64_t sub_21B7C6C80(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34760;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7C6C94(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF34760;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7C6CD4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF34760;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C6D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF34760;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7C5980(v4, *(_QWORD *)(a2 + 8));
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  v8 = *(_BYTE *)(a2 + 20);
  if ((v8 & 1) != 0)
  {
    v9 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_BYTE *)(a1 + 16) = v9;
    v8 = *(_BYTE *)(a2 + 20);
  }
  if ((v8 & 2) != 0)
  {
    v10 = *(_BYTE *)(a2 + 17);
    *(_BYTE *)(a1 + 20) |= 2u;
    *(_BYTE *)(a1 + 17) = v10;
  }
  return a1;
}

uint64_t sub_21B7C6DE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "deviceMotion");
  v6 = *(_BYTE *)(a1 + 20);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inQuiescentMode");
    v6 = *(_BYTE *)(a1 + 20);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(this, "shouldGyroBeOn");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C6E68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v23 = *((_QWORD *)this + 1);
        if (v23 >= *((_QWORD *)this + 2))
        {
          v26 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v24 = v23 + 1;
          v25 = *(unsigned __int8 *)(*(_QWORD *)this + v23);
          *((_QWORD *)this + 1) = v24;
          v26 = v25 != 0;
        }
        *(_BYTE *)(a1 + 17) = v26;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v27 = *((_QWORD *)this + 1);
        if (v27 >= *((_QWORD *)this + 2))
        {
          v30 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v28 = v27 + 1;
          v29 = *(unsigned __int8 *)(*(_QWORD *)this + v27);
          *((_QWORD *)this + 1) = v28;
          v30 = v29 != 0;
        }
        *(_BYTE *)(a1 + 16) = v30;
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_24DF34728;
        v21[31] = 0;
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C70E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 20);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::write(this);
    v5 = *(_BYTE *)(v3 + 20);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

void sub_21B7C714C(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24DF34798;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

void sub_21B7C71DC(PB::Base *a1)
{
  sub_21B7C714C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C7200(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_QWORD *)a1 = &off_24DF34798;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  if ((*(_BYTE *)(a2 + 160) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 152) = v7;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_21B796B90(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_21B796B90((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  }
  return a1;
}

uint64_t sub_21B7C7314(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dx", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "estimate", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "measurement", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "noisevariance", v16);
  }
  v17 = *(float **)(a1 + 104);
  v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(this, "residual", v19);
  }
  v20 = *(float **)(a1 + 128);
  v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    PB::TextFormatter::format(this, "statevariance", v22);
  }
  if ((*(_BYTE *)(a1 + 160) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7C7478(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  _DWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  _DWORD *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  _DWORD *v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  int v161;
  char *v162;
  int v163;
  char *v164;
  int v165;
  char *v166;
  int v167;
  char *v168;
  int v169;
  char *v170;
  int v171;
  unint64_t v172;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void **v180;
  void **v181;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v179 = a1 + 144;
    v180 = (void **)(a1 + 80);
    v181 = (void **)(a1 + 128);
    v8 = (void **)(a1 + 8);
    v177 = a1 + 24;
    v178 = a1 + 96;
    v9 = (void **)(a1 + 104);
    v10 = (void **)(a1 + 56);
    v175 = a1 + 72;
    v176 = a1 + 120;
    v11 = (void **)(a1 + 32);
    v174 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 160) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_278;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_280;
        case 2u:
          if (v24 != 2)
          {
            v112 = *(char **)(a1 + 40);
            v111 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v112 >= v111)
            {
              v124 = (char *)*v11;
              v125 = (v112 - (_BYTE *)*v11) >> 2;
              v126 = v125 + 1;
              if ((unint64_t)(v125 + 1) >> 62)
LABEL_289:
                sub_21B796A0C();
              v127 = v111 - (_QWORD)v124;
              if (v127 >> 1 > v126)
                v126 = v127 >> 1;
              if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
                v128 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v128 = v126;
              if (v128)
              {
                v129 = (char *)sub_21B796CD8(v174, v128);
                v124 = *(char **)(a1 + 32);
                v112 = *(char **)(a1 + 40);
              }
              else
              {
                v129 = 0;
              }
              v160 = &v129[4 * v125];
              *(_DWORD *)v160 = 0;
              v113 = v160 + 4;
              while (v112 != v124)
              {
                v161 = *((_DWORD *)v112 - 1);
                v112 -= 4;
                *((_DWORD *)v160 - 1) = v161;
                v160 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v160;
              *(_QWORD *)(a1 + 40) = v113;
              *(_QWORD *)(a1 + 48) = &v129[4 * v128];
              if (v124)
                operator delete(v124);
            }
            else
            {
              *(_DWORD *)v112 = 0;
              v113 = v112 + 4;
            }
            *(_QWORD *)(a1 + 40) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 40);
            v29 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_289;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v174, v36);
                v32 = *(char **)(a1 + 32);
                v30 = *(char **)(a1 + 40);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v38;
              *(_QWORD *)(a1 + 40) = v31;
              *(_QWORD *)(a1 + 48) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 40) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_173;
        case 3u:
          if (v24 != 2)
          {
            v115 = *(char **)(a1 + 64);
            v114 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v115 >= v114)
            {
              v130 = (char *)*v10;
              v131 = (v115 - (_BYTE *)*v10) >> 2;
              v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 62)
LABEL_290:
                sub_21B796A0C();
              v133 = v114 - (_QWORD)v130;
              if (v133 >> 1 > v132)
                v132 = v133 >> 1;
              if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                v134 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v134 = v132;
              if (v134)
              {
                v135 = (char *)sub_21B796CD8(v175, v134);
                v130 = *(char **)(a1 + 56);
                v115 = *(char **)(a1 + 64);
              }
              else
              {
                v135 = 0;
              }
              v162 = &v135[4 * v131];
              *(_DWORD *)v162 = 0;
              v113 = v162 + 4;
              while (v115 != v130)
              {
                v163 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v162 - 1) = v163;
                v162 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v162;
              *(_QWORD *)(a1 + 64) = v113;
              *(_QWORD *)(a1 + 72) = &v135[4 * v134];
              if (v130)
                operator delete(v130);
            }
            else
            {
              *(_DWORD *)v115 = 0;
              v113 = v115 + 4;
            }
            *(_QWORD *)(a1 + 64) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 64);
            v43 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_290;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796CD8(v175, v50);
                v46 = *(char **)(a1 + 56);
                v44 = *(char **)(a1 + 64);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v52;
              *(_QWORD *)(a1 + 64) = v45;
              *(_QWORD *)(a1 + 72) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 64) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_173;
        case 4u:
          if (v24 != 2)
          {
            v117 = *(char **)(a1 + 112);
            v116 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v117 >= v116)
            {
              v136 = (char *)*v9;
              v137 = (v117 - (_BYTE *)*v9) >> 2;
              v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 62)
LABEL_291:
                sub_21B796A0C();
              v139 = v116 - (_QWORD)v136;
              if (v139 >> 1 > v138)
                v138 = v139 >> 1;
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL)
                v140 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v140 = v138;
              if (v140)
              {
                v141 = (char *)sub_21B796CD8(v176, v140);
                v136 = *(char **)(a1 + 104);
                v117 = *(char **)(a1 + 112);
              }
              else
              {
                v141 = 0;
              }
              v164 = &v141[4 * v137];
              *(_DWORD *)v164 = 0;
              v113 = v164 + 4;
              while (v117 != v136)
              {
                v165 = *((_DWORD *)v117 - 1);
                v117 -= 4;
                *((_DWORD *)v164 - 1) = v165;
                v164 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v164;
              *(_QWORD *)(a1 + 112) = v113;
              *(_QWORD *)(a1 + 120) = &v141[4 * v140];
              if (v136)
                operator delete(v136);
            }
            else
            {
              *(_DWORD *)v117 = 0;
              v113 = v117 + 4;
            }
            *(_QWORD *)(a1 + 112) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 112);
            v57 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_291;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_21B796CD8(v176, v64);
                v60 = *(char **)(a1 + 104);
                v58 = *(char **)(a1 + 112);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v66;
              *(_QWORD *)(a1 + 112) = v59;
              *(_QWORD *)(a1 + 120) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *(_QWORD *)(a1 + 112) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_173;
        case 5u:
          if (v24 != 2)
          {
            v119 = *(char **)(a1 + 16);
            v118 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v119 >= v118)
            {
              v142 = (char *)*v8;
              v143 = (v119 - (_BYTE *)*v8) >> 2;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62)
LABEL_292:
                sub_21B796A0C();
              v145 = v118 - (_QWORD)v142;
              if (v145 >> 1 > v144)
                v144 = v145 >> 1;
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                v146 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v146 = v144;
              if (v146)
              {
                v147 = (char *)sub_21B796CD8(v177, v146);
                v142 = *(char **)(a1 + 8);
                v119 = *(char **)(a1 + 16);
              }
              else
              {
                v147 = 0;
              }
              v166 = &v147[4 * v143];
              *(_DWORD *)v166 = 0;
              v113 = v166 + 4;
              while (v119 != v142)
              {
                v167 = *((_DWORD *)v119 - 1);
                v119 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v166;
              *(_QWORD *)(a1 + 16) = v113;
              *(_QWORD *)(a1 + 24) = &v147[4 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_DWORD *)v119 = 0;
              v113 = v119 + 4;
            }
            *(_QWORD *)(a1 + 16) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          while (v69 < v70 && !*((_BYTE *)this + 24))
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v8;
              v75 = (v72 - (_BYTE *)*v8) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_292;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_21B796CD8(v177, v78);
                v74 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v73 = v80 + 4;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v80;
              *(_QWORD *)(a1 + 16) = v73;
              *(_QWORD *)(a1 + 24) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v73 = v72 + 4;
            }
            *(_QWORD *)(a1 + 16) = v73;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v73 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
            v70 = *((_QWORD *)this + 2);
            v69 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v69;
          }
          goto LABEL_173;
        case 6u:
          if (v24 != 2)
          {
            v121 = *(char **)(a1 + 88);
            v120 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v121 >= v120)
            {
              v148 = (char *)*v180;
              v149 = (v121 - (_BYTE *)*v180) >> 2;
              v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62)
LABEL_293:
                sub_21B796A0C();
              v151 = v120 - (_QWORD)v148;
              if (v151 >> 1 > v150)
                v150 = v151 >> 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                v152 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v152 = v150;
              if (v152)
              {
                v153 = (char *)sub_21B796CD8(v178, v152);
                v148 = *(char **)(a1 + 80);
                v121 = *(char **)(a1 + 88);
              }
              else
              {
                v153 = 0;
              }
              v168 = &v153[4 * v149];
              *(_DWORD *)v168 = 0;
              v113 = v168 + 4;
              while (v121 != v148)
              {
                v169 = *((_DWORD *)v121 - 1);
                v121 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v168;
              *(_QWORD *)(a1 + 88) = v113;
              *(_QWORD *)(a1 + 96) = &v153[4 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_DWORD *)v121 = 0;
              v113 = v121 + 4;
            }
            *(_QWORD *)(a1 + 88) = v113;
            goto LABEL_276;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v83 = *((_QWORD *)this + 1);
          v84 = *((_QWORD *)this + 2);
          while (v83 < v84 && !*((_BYTE *)this + 24))
          {
            v86 = *(char **)(a1 + 88);
            v85 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v86 >= v85)
            {
              v88 = (char *)*v180;
              v89 = (v86 - (_BYTE *)*v180) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
                goto LABEL_293;
              v91 = v85 - (_QWORD)v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)sub_21B796CD8(v178, v92);
                v88 = *(char **)(a1 + 80);
                v86 = *(char **)(a1 + 88);
              }
              else
              {
                v93 = 0;
              }
              v94 = &v93[4 * v89];
              *(_DWORD *)v94 = 0;
              v87 = v94 + 4;
              while (v86 != v88)
              {
                v95 = *((_DWORD *)v86 - 1);
                v86 -= 4;
                *((_DWORD *)v94 - 1) = v95;
                v94 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v94;
              *(_QWORD *)(a1 + 88) = v87;
              *(_QWORD *)(a1 + 96) = &v93[4 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *(_DWORD *)v86 = 0;
              v87 = v86 + 4;
            }
            *(_QWORD *)(a1 + 88) = v87;
            v96 = *((_QWORD *)this + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)this + 2))
              goto LABEL_172;
            *(v87 - 1) = *(_DWORD *)(*(_QWORD *)this + v96);
            v84 = *((_QWORD *)this + 2);
            v83 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v83;
          }
          goto LABEL_173;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v97 = *((_QWORD *)this + 1);
            v98 = *((_QWORD *)this + 2);
            while (v97 < v98 && !*((_BYTE *)this + 24))
            {
              v100 = *(char **)(a1 + 136);
              v99 = *(_QWORD *)(a1 + 144);
              if ((unint64_t)v100 >= v99)
              {
                v102 = (char *)*v181;
                v103 = (v100 - (_BYTE *)*v181) >> 2;
                v104 = v103 + 1;
                if ((unint64_t)(v103 + 1) >> 62)
                  goto LABEL_294;
                v105 = v99 - (_QWORD)v102;
                if (v105 >> 1 > v104)
                  v104 = v105 >> 1;
                if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                  v106 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v106 = v104;
                if (v106)
                {
                  v107 = (char *)sub_21B796CD8(v179, v106);
                  v102 = *(char **)(a1 + 128);
                  v100 = *(char **)(a1 + 136);
                }
                else
                {
                  v107 = 0;
                }
                v108 = &v107[4 * v103];
                *(_DWORD *)v108 = 0;
                v101 = v108 + 4;
                while (v100 != v102)
                {
                  v109 = *((_DWORD *)v100 - 1);
                  v100 -= 4;
                  *((_DWORD *)v108 - 1) = v109;
                  v108 -= 4;
                }
                *(_QWORD *)(a1 + 128) = v108;
                *(_QWORD *)(a1 + 136) = v101;
                *(_QWORD *)(a1 + 144) = &v107[4 * v106];
                if (v102)
                  operator delete(v102);
              }
              else
              {
                *(_DWORD *)v100 = 0;
                v101 = v100 + 4;
              }
              *(_QWORD *)(a1 + 136) = v101;
              v110 = *((_QWORD *)this + 1);
              if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
              {
LABEL_172:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v101 - 1) = *(_DWORD *)(*(_QWORD *)this + v110);
              v98 = *((_QWORD *)this + 2);
              v97 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v97;
            }
LABEL_173:
            PB::Reader::recallMark();
          }
          else
          {
            v123 = *(char **)(a1 + 136);
            v122 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v123 >= v122)
            {
              v154 = (char *)*v181;
              v155 = (v123 - (_BYTE *)*v181) >> 2;
              v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62)
LABEL_294:
                sub_21B796A0C();
              v157 = v122 - (_QWORD)v154;
              if (v157 >> 1 > v156)
                v156 = v157 >> 1;
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
                v158 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v158 = v156;
              if (v158)
              {
                v159 = (char *)sub_21B796CD8(v179, v158);
                v154 = *(char **)(a1 + 128);
                v123 = *(char **)(a1 + 136);
              }
              else
              {
                v159 = 0;
              }
              v170 = &v159[4 * v155];
              *(_DWORD *)v170 = 0;
              v113 = v170 + 4;
              while (v123 != v154)
              {
                v171 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v170 - 1) = v171;
                v170 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v170;
              *(_QWORD *)(a1 + 136) = v113;
              *(_QWORD *)(a1 + 144) = &v159[4 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *(_DWORD *)v123 = 0;
              v113 = v123 + 4;
            }
            *(_QWORD *)(a1 + 136) = v113;
LABEL_276:
            v172 = *((_QWORD *)this + 1);
            if (v172 <= 0xFFFFFFFFFFFFFFFBLL && v172 + 4 <= *((_QWORD *)this + 2))
            {
              *(v113 - 1) = *(_DWORD *)(*(_QWORD *)this + v172);
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_280:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_278:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_281:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_281;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C80E4(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 160) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 152));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = (float *)v3[7];
  v8 = (float *)v3[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = (float *)v3[13];
  v11 = (float *)v3[14];
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = (float *)v3[1];
  v14 = (float *)v3[2];
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15);
  }
  v16 = (float *)v3[10];
  v17 = (float *)v3[11];
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::write(this, v18);
  }
  v20 = (float *)v3[16];
  v19 = (float *)v3[17];
  while (v20 != v19)
  {
    v21 = *v20++;
    result = PB::Writer::write(this, v21);
  }
  return result;
}

double sub_21B7C81E4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF347D0;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B7C8208(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF347D0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B7C8258(PB::Base *a1)
{
  sub_21B7C8208(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C827C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24DF347D0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_21B7C831C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "biasvariance", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "statevariance", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7C83D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  unint64_t v77;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 40);
            v44 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v10;
              v48 = (v45 - (_BYTE *)*v10) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_128;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_21B796CD8(v11, v51);
                v47 = *(char **)(a1 + 32);
                v45 = *(char **)(a1 + 40);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v53;
              *(_QWORD *)(a1 + 40) = v46;
              *(_QWORD *)(a1 + 48) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *(_QWORD *)(a1 + 40) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_83;
        }
        v60 = *(char **)(a1 + 40);
        v59 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v60 >= v59)
        {
          v67 = (char *)*v10;
          v68 = (v60 - (_BYTE *)*v10) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
LABEL_128:
            sub_21B796A0C();
          v70 = v59 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)sub_21B796CD8(v11, v71);
            v67 = *(char **)(a1 + 32);
            v60 = *(char **)(a1 + 40);
          }
          else
          {
            v72 = 0;
          }
          v75 = &v72[4 * v68];
          *(_DWORD *)v75 = 0;
          v58 = v75 + 4;
          while (v60 != v67)
          {
            v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v75;
          *(_QWORD *)(a1 + 40) = v58;
          *(_QWORD *)(a1 + 48) = &v72[4 * v71];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v60 = 0;
          v58 = v60 + 4;
        }
        *(_QWORD *)(a1 + 40) = v58;
LABEL_114:
        v77 = *((_QWORD *)this + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v77);
        v27 = *((_QWORD *)this + 1) + 4;
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v26);
        v27 = *((_QWORD *)this + 1) + 8;
LABEL_118:
        *((_QWORD *)this + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v28 = *((_QWORD *)this + 1);
      v29 = *((_QWORD *)this + 2);
      while (v28 < v29 && !*((_BYTE *)this + 24))
      {
        v31 = *(char **)(a1 + 16);
        v30 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v8;
          v34 = (v31 - (_BYTE *)*v8) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            goto LABEL_127;
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)sub_21B796CD8(v9, v37);
            v33 = *(char **)(a1 + 8);
            v31 = *(char **)(a1 + 16);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 0;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v39;
          *(_QWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 24) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = 0;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a1 + 16) = v32;
        v41 = *((_QWORD *)this + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(_QWORD *)this + v41);
        v29 = *((_QWORD *)this + 2);
        v28 = *((_QWORD *)this + 1) + 4;
        *((_QWORD *)this + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    v57 = *(char **)(a1 + 16);
    v56 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)v57 >= v56)
    {
      v61 = (char *)*v8;
      v62 = (v57 - (_BYTE *)*v8) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
LABEL_127:
        sub_21B796A0C();
      v64 = v56 - (_QWORD)v61;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)sub_21B796CD8(v9, v65);
        v61 = *(char **)(a1 + 8);
        v57 = *(char **)(a1 + 16);
      }
      else
      {
        v66 = 0;
      }
      v73 = &v66[4 * v62];
      *(_DWORD *)v73 = 0;
      v58 = v73 + 4;
      while (v57 != v61)
      {
        v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *(_QWORD *)(a1 + 8) = v73;
      *(_QWORD *)(a1 + 16) = v58;
      *(_QWORD *)(a1 + 24) = &v66[4 * v65];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v57 = 0;
      v58 = v57 + 4;
    }
    *(_QWORD *)(a1 + 16) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_21B7C8948(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (float *)v3[1];
  v7 = (float *)v3[2];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_21B7C89C8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34808;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B7C89E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7C8A04(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF34808;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 28) = 2;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 28) = v3 | 4;
    *(_DWORD *)(a1 + 24) = v4;
  }
  return *(float *)&v4;
}

uint64_t sub_21B7C8A74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "theta", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C8B04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_32;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)this + 1);
            goto LABEL_38;
          }
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_32:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_38;
          }
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        }
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B7C8D24(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 24));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_21B7C8D9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34840;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7C8DB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C8DD8(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF34840;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B7C8E28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "displacingState");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C8E90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C911C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7C9174(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34878;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B7C918C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C91B0(uint64_t result, uint64_t a2)
{
  char v2;

  *(_QWORD *)result = &off_24DF34878;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_BYTE *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B7C91DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "displayOn");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7C9228(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7C93B4(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_21B7C93D4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF348B0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_21B7C9410(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_24DF348B0;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

void sub_21B7C94B0(PB::Base *a1)
{
  sub_21B7C9410(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7C94D4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  int v20;
  uint64_t v21;
  int v22;
  char v23;
  int v24;
  int v25;
  int v26;

  *(_QWORD *)a1 = &off_24DF348B0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if ((*(_WORD *)(a2 + 168) & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 128);
    *(_WORD *)(a1 + 168) = 2;
    *(_QWORD *)(a1 + 128) = v6;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_21B796B90(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  v7 = *(_WORD *)(a2 + 168);
  if ((v7 & 0x20) == 0)
  {
    if ((v7 & 1) == 0)
      goto LABEL_7;
LABEL_26:
    v21 = *(_QWORD *)(a2 + 120);
    *(_WORD *)(a1 + 168) |= 1u;
    *(_QWORD *)(a1 + 120) = v21;
    if ((*(_WORD *)(a2 + 168) & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v20 = *(_DWORD *)(a2 + 148);
  *(_WORD *)(a1 + 168) |= 0x20u;
  *(_DWORD *)(a1 + 148) = v20;
  v7 = *(_WORD *)(a2 + 168);
  if ((v7 & 1) != 0)
    goto LABEL_26;
LABEL_7:
  if ((v7 & 0x100) != 0)
  {
LABEL_8:
    v8 = *(_DWORD *)(a2 + 160);
    *(_WORD *)(a1 + 168) |= 0x100u;
    *(_DWORD *)(a1 + 160) = v8;
  }
LABEL_9:
  if (*(_QWORD *)(a2 + 104))
  {
    v9 = operator new();
    v10 = sub_21B813ABC(v9, *(_QWORD *)(a2 + 104));
    v11 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v12;
    if (v11)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v11 + 8))(v11, v10);
  }
  if (*(_QWORD *)(a2 + 112))
  {
    v13 = operator new();
    v14 = sub_21B813ABC(v13, *(_QWORD *)(a2 + 112));
    v15 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v16;
    if (v15)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v15 + 8))(v15, v14);
  }
  v17 = *(_WORD *)(a2 + 168);
  if ((v17 & 0x10) != 0)
  {
    v22 = *(_DWORD *)(a2 + 144);
    *(_WORD *)(a1 + 168) |= 0x10u;
    *(_DWORD *)(a1 + 144) = v22;
    v17 = *(_WORD *)(a2 + 168);
    if ((v17 & 0x200) == 0)
    {
LABEL_17:
      if ((v17 & 4) == 0)
        goto LABEL_18;
      goto LABEL_30;
    }
  }
  else if ((*(_WORD *)(a2 + 168) & 0x200) == 0)
  {
    goto LABEL_17;
  }
  v23 = *(_BYTE *)(a2 + 164);
  *(_WORD *)(a1 + 168) |= 0x200u;
  *(_BYTE *)(a1 + 164) = v23;
  v17 = *(_WORD *)(a2 + 168);
  if ((v17 & 4) == 0)
  {
LABEL_18:
    if ((v17 & 8) == 0)
      goto LABEL_19;
    goto LABEL_31;
  }
LABEL_30:
  v24 = *(_DWORD *)(a2 + 136);
  *(_WORD *)(a1 + 168) |= 4u;
  *(_DWORD *)(a1 + 136) = v24;
  v17 = *(_WORD *)(a2 + 168);
  if ((v17 & 8) == 0)
  {
LABEL_19:
    if ((v17 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_32;
  }
LABEL_31:
  v25 = *(_DWORD *)(a2 + 140);
  *(_WORD *)(a1 + 168) |= 8u;
  *(_DWORD *)(a1 + 140) = v25;
  v17 = *(_WORD *)(a2 + 168);
  if ((v17 & 0x40) == 0)
  {
LABEL_20:
    if ((v17 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_32:
  v26 = *(_DWORD *)(a2 + 152);
  *(_WORD *)(a1 + 168) |= 0x40u;
  *(_DWORD *)(a1 + 152) = v26;
  if ((*(_WORD *)(a2 + 168) & 0x80) != 0)
  {
LABEL_21:
    v18 = *(_DWORD *)(a2 + 156);
    *(_WORD *)(a1 + 168) |= 0x80u;
    *(_DWORD *)(a1 + 156) = v18;
  }
LABEL_22:
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_21B7C9768(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  float *v18;
  float *v19;
  float v20;
  __int16 v21;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 168);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "AzABufferMean", *(float *)(a1 + 136));
    v5 = *(_WORD *)(a1 + 168);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(this, "AzBBufferMean", *(float *)(a1 + 140));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "cachedAttitude", v8);
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "candidateA");
  v10 = *(_QWORD *)(a1 + 112);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "candidateB");
  v11 = *(float **)(a1 + 32);
  v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "currAttitude", v13);
  }
  v14 = *(_WORD *)(a1 + 168);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "disambiguationFlag");
    v14 = *(_WORD *)(a1 + 168);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "lastDoTUpdateTime", *(double *)(a1 + 120));
  if ((*(_WORD *)(a1 + 168) & 0x20) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "lastEstimatedDoTAngleRad", *(float *)(a1 + 148));
LABEL_17:
  v15 = *(float **)(a1 + 56);
  v16 = *(float **)(a1 + 64);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v17);
  }
  v18 = *(float **)(a1 + 80);
  v19 = *(float **)(a1 + 88);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v20);
  }
  v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "newDisambiguation");
    v21 = *(_WORD *)(a1 + 168);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0)
        goto LABEL_24;
      goto LABEL_33;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(this, "numAbortedPeaks");
  v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0)
      goto LABEL_25;
LABEL_34:
    PB::TextFormatter::format(this, "stateFSM");
    if ((*(_WORD *)(a1 + 168) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_26;
  }
LABEL_33:
  PB::TextFormatter::format(this, "numLargeYawDetections");
  v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x100) != 0)
    goto LABEL_34;
LABEL_25:
  if ((v21 & 2) != 0)
LABEL_26:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7C99D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _DWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  _DWORD *v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char v138;
  unsigned int v139;
  unint64_t v140;
  char v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  int v177;
  char *v178;
  int v179;
  char *v180;
  int v181;
  char *v182;
  int v183;
  unint64_t v184;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = (void **)(a1 + 8);
    v188 = a1 + 24;
    v189 = a1 + 48;
    v10 = (void **)(a1 + 56);
    v187 = a1 + 72;
    v11 = (void **)(a1 + 80);
    v12 = a1 + 96;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 168) |= 2u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_292;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v26);
          goto LABEL_53;
        case 2u:
          if (v25 != 2)
          {
            v137 = *(char **)(a1 + 88);
            v136 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v137 >= v136)
            {
              v164 = (char *)*v11;
              v165 = (v137 - (_BYTE *)*v11) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
LABEL_308:
                sub_21B796A0C();
              v167 = v136 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v169 = (char *)sub_21B796CD8(v12, v168);
                v164 = *(char **)(a1 + 80);
                v137 = *(char **)(a1 + 88);
              }
              else
              {
                v169 = 0;
              }
              v180 = &v169[4 * v165];
              *(_DWORD *)v180 = 0;
              v129 = v180 + 4;
              while (v137 != v164)
              {
                v181 = *((_DWORD *)v137 - 1);
                v137 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v180;
              *(_QWORD *)(a1 + 88) = v129;
              *(_QWORD *)(a1 + 96) = &v169[4 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v137 = 0;
              v129 = v137 + 4;
            }
            *(_QWORD *)(a1 + 88) = v129;
            goto LABEL_290;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          while (v70 < v71 && !*((_BYTE *)this + 24))
          {
            v73 = *(char **)(a1 + 88);
            v72 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v73 >= v72)
            {
              v75 = (char *)*v11;
              v76 = (v73 - (_BYTE *)*v11) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
                goto LABEL_308;
              v78 = v72 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_21B796CD8(v12, v79);
                v75 = *(char **)(a1 + 80);
                v73 = *(char **)(a1 + 88);
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              v74 = v81 + 4;
              while (v73 != v75)
              {
                v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v81;
              *(_QWORD *)(a1 + 88) = v74;
              *(_QWORD *)(a1 + 96) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v73 = 0;
              v74 = v73 + 4;
            }
            *(_QWORD *)(a1 + 88) = v74;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_174;
            *(v74 - 1) = *(_DWORD *)(*(_QWORD *)this + v83);
            v71 = *((_QWORD *)this + 2);
            v70 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v70;
          }
          goto LABEL_175;
        case 3u:
          if (v25 != 2)
          {
            v128 = *(char **)(a1 + 64);
            v127 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v128 >= v127)
            {
              v152 = (char *)*v10;
              v153 = (v128 - (_BYTE *)*v10) >> 2;
              v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62)
LABEL_306:
                sub_21B796A0C();
              v155 = v127 - (_QWORD)v152;
              if (v155 >> 1 > v154)
                v154 = v155 >> 1;
              if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL)
                v156 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v156 = v154;
              if (v156)
              {
                v157 = (char *)sub_21B796CD8(v187, v156);
                v152 = *(char **)(a1 + 56);
                v128 = *(char **)(a1 + 64);
              }
              else
              {
                v157 = 0;
              }
              v176 = &v157[4 * v153];
              *(_DWORD *)v176 = 0;
              v129 = v176 + 4;
              while (v128 != v152)
              {
                v177 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v176;
              *(_QWORD *)(a1 + 64) = v129;
              *(_QWORD *)(a1 + 72) = &v157[4 * v156];
              if (v152)
                operator delete(v152);
            }
            else
            {
              *(_DWORD *)v128 = 0;
              v129 = v128 + 4;
            }
            *(_QWORD *)(a1 + 64) = v129;
            goto LABEL_290;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 64);
            v29 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_306;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v187, v36);
                v32 = *(char **)(a1 + 56);
                v30 = *(char **)(a1 + 64);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v38;
              *(_QWORD *)(a1 + 64) = v31;
              *(_QWORD *)(a1 + 72) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 64) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_174;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_175;
        case 4u:
          *(_WORD *)(a1 + 168) |= 0x20u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_292;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_294;
        case 5u:
          *(_WORD *)(a1 + 168) |= 1u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_292;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v41);
LABEL_53:
          v42 = *((_QWORD *)this + 1) + 8;
          goto LABEL_295;
        case 6u:
          *(_WORD *)(a1 + 168) |= 0x100u;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_255;
              v88 += 7;
              v85 = v91;
              v19 = v89++ > 8;
            }
            while (!v19);
LABEL_197:
            LODWORD(v90) = 0;
            goto LABEL_255;
          }
          v138 = 0;
          v139 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v140 = v85 + 1;
              v141 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v140;
              v90 |= (unint64_t)(v141 & 0x7F) << v138;
              if (v141 < 0)
              {
                v138 += 7;
                v85 = v140;
                v19 = v139++ > 8;
                if (v19)
                  goto LABEL_197;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 160) = v90;
          goto LABEL_296;
        case 7u:
          v93 = operator new();
          sub_21B8139F8(v93);
          v94 = *(_QWORD *)(a1 + 104);
          *(_QWORD *)(a1 + 104) = v93;
          if (v94)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
            v93 = *(_QWORD *)(a1 + 104);
          }
          goto LABEL_130;
        case 8u:
          v93 = operator new();
          sub_21B8139F8(v93);
          v95 = *(_QWORD *)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v93;
          if (v95)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
            v93 = *(_QWORD *)(a1 + 112);
          }
LABEL_130:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v93 + 16))(v93, this) & 1) == 0)
          {
            return 0;
          }
          goto LABEL_175;
        case 9u:
          *(_WORD *)(a1 + 168) |= 0x10u;
          v96 = *((_QWORD *)this + 1);
          v97 = *((_QWORD *)this + 2);
          v98 = *(_QWORD *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)this + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_258;
              v99 += 7;
              v96 = v102;
              v19 = v100++ > 8;
            }
            while (!v19);
LABEL_204:
            LODWORD(v101) = 0;
            goto LABEL_258;
          }
          v142 = 0;
          v143 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v144 = v96 + 1;
              v145 = *(_BYTE *)(v98 + v96);
              *((_QWORD *)this + 1) = v144;
              v101 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v96 = v144;
                v19 = v143++ > 8;
                if (v19)
                  goto LABEL_204;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v101) = 0;
            }
            break;
          }
LABEL_258:
          *(_DWORD *)(a1 + 144) = v101;
          goto LABEL_296;
        case 0xAu:
          *(_WORD *)(a1 + 168) |= 0x200u;
          v43 = *((_QWORD *)this + 1);
          if (v43 >= *((_QWORD *)this + 2))
          {
            v46 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v44 = v43 + 1;
            v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
            *((_QWORD *)this + 1) = v44;
            v46 = v45 != 0;
          }
          *(_BYTE *)(a1 + 164) = v46;
          goto LABEL_296;
        case 0xBu:
          *(_WORD *)(a1 + 168) |= 4u;
          v104 = *((_QWORD *)this + 1);
          if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)this + 2))
            goto LABEL_292;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v104);
          goto LABEL_294;
        case 0xCu:
          *(_WORD *)(a1 + 168) |= 8u;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_292;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_294;
        case 0xDu:
          *(_WORD *)(a1 + 168) |= 0x40u;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          v50 = *(_QWORD *)this;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)this + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_252;
              v51 += 7;
              v48 = v54;
              v19 = v52++ > 8;
            }
            while (!v19);
LABEL_186:
            LODWORD(v53) = 0;
            goto LABEL_252;
          }
          v130 = 0;
          v131 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v132 = v48 + 1;
              v133 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)this + 1) = v132;
              v53 |= (unint64_t)(v133 & 0x7F) << v130;
              if (v133 < 0)
              {
                v130 += 7;
                v48 = v132;
                v19 = v131++ > 8;
                if (v19)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_252:
          *(_DWORD *)(a1 + 152) = v53;
          goto LABEL_296;
        case 0xEu:
          *(_WORD *)(a1 + 168) |= 0x80u;
          v105 = *((_QWORD *)this + 1);
          v106 = *((_QWORD *)this + 2);
          v107 = *(_QWORD *)this;
          if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
          {
            v108 = 0;
            v109 = 0;
            v110 = 0;
            do
            {
              v111 = v105 + 1;
              *((_QWORD *)this + 1) = v105 + 1;
              v112 = *(_BYTE *)(v107 + v105);
              v110 |= (unint64_t)(v112 & 0x7F) << v108;
              if ((v112 & 0x80) == 0)
                goto LABEL_261;
              v108 += 7;
              v105 = v111;
              v19 = v109++ > 8;
            }
            while (!v19);
LABEL_211:
            LODWORD(v110) = 0;
            goto LABEL_261;
          }
          v146 = 0;
          v147 = 0;
          v110 = 0;
          if (v106 <= v105)
            v106 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v106 == v105)
            {
              LODWORD(v110) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v148 = v105 + 1;
              v149 = *(_BYTE *)(v107 + v105);
              *((_QWORD *)this + 1) = v148;
              v110 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                v105 = v148;
                v19 = v147++ > 8;
                if (v19)
                  goto LABEL_211;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v110) = 0;
            }
            break;
          }
LABEL_261:
          *(_DWORD *)(a1 + 156) = v110;
          goto LABEL_296;
        case 0xFu:
          if (v25 != 2)
          {
            v135 = *(char **)(a1 + 16);
            v134 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v135 >= v134)
            {
              v158 = (char *)*v9;
              v159 = (v135 - (_BYTE *)*v9) >> 2;
              v160 = v159 + 1;
              if ((unint64_t)(v159 + 1) >> 62)
LABEL_307:
                sub_21B796A0C();
              v161 = v134 - (_QWORD)v158;
              if (v161 >> 1 > v160)
                v160 = v161 >> 1;
              if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
                v162 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v162 = v160;
              if (v162)
              {
                v163 = (char *)sub_21B796CD8(v188, v162);
                v158 = *(char **)(a1 + 8);
                v135 = *(char **)(a1 + 16);
              }
              else
              {
                v163 = 0;
              }
              v178 = &v163[4 * v159];
              *(_DWORD *)v178 = 0;
              v129 = v178 + 4;
              while (v135 != v158)
              {
                v179 = *((_DWORD *)v135 - 1);
                v135 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v178;
              *(_QWORD *)(a1 + 16) = v129;
              *(_QWORD *)(a1 + 24) = &v163[4 * v162];
              if (v158)
                operator delete(v158);
            }
            else
            {
              *(_DWORD *)v135 = 0;
              v129 = v135 + 4;
            }
            *(_QWORD *)(a1 + 16) = v129;
            goto LABEL_290;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            v59 = *(char **)(a1 + 16);
            v58 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v9;
              v62 = (v59 - (_BYTE *)*v9) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_307;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_21B796CD8(v188, v65);
                v61 = *(char **)(a1 + 8);
                v59 = *(char **)(a1 + 16);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v67;
              *(_QWORD *)(a1 + 16) = v60;
              *(_QWORD *)(a1 + 24) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *(_QWORD *)(a1 + 16) = v60;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_174;
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)this + v69);
            v57 = *((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v56;
          }
          goto LABEL_175;
        case 0x10u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v113 = *((_QWORD *)this + 1);
            v114 = *((_QWORD *)this + 2);
            while (v113 < v114 && !*((_BYTE *)this + 24))
            {
              v116 = *(char **)(a1 + 40);
              v115 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v116 >= v115)
              {
                v118 = (char *)*v8;
                v119 = (v116 - (_BYTE *)*v8) >> 2;
                v120 = v119 + 1;
                if ((unint64_t)(v119 + 1) >> 62)
                  goto LABEL_309;
                v121 = v115 - (_QWORD)v118;
                if (v121 >> 1 > v120)
                  v120 = v121 >> 1;
                if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                  v122 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v122 = v120;
                if (v122)
                {
                  v123 = (char *)sub_21B796CD8(v189, v122);
                  v118 = *(char **)(a1 + 32);
                  v116 = *(char **)(a1 + 40);
                }
                else
                {
                  v123 = 0;
                }
                v124 = &v123[4 * v119];
                *(_DWORD *)v124 = 0;
                v117 = v124 + 4;
                while (v116 != v118)
                {
                  v125 = *((_DWORD *)v116 - 1);
                  v116 -= 4;
                  *((_DWORD *)v124 - 1) = v125;
                  v124 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v124;
                *(_QWORD *)(a1 + 40) = v117;
                *(_QWORD *)(a1 + 48) = &v123[4 * v122];
                if (v118)
                  operator delete(v118);
              }
              else
              {
                *(_DWORD *)v116 = 0;
                v117 = v116 + 4;
              }
              *(_QWORD *)(a1 + 40) = v117;
              v126 = *((_QWORD *)this + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              {
LABEL_174:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v117 - 1) = *(_DWORD *)(*(_QWORD *)this + v126);
              v114 = *((_QWORD *)this + 2);
              v113 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v113;
            }
LABEL_175:
            PB::Reader::recallMark();
          }
          else
          {
            v151 = *(char **)(a1 + 40);
            v150 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v151 >= v150)
            {
              v170 = (char *)*v8;
              v171 = (v151 - (_BYTE *)*v8) >> 2;
              v172 = v171 + 1;
              if ((unint64_t)(v171 + 1) >> 62)
LABEL_309:
                sub_21B796A0C();
              v173 = v150 - (_QWORD)v170;
              if (v173 >> 1 > v172)
                v172 = v173 >> 1;
              if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL)
                v174 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v174 = v172;
              if (v174)
              {
                v175 = (char *)sub_21B796CD8(v189, v174);
                v170 = *(char **)(a1 + 32);
                v151 = *(char **)(a1 + 40);
              }
              else
              {
                v175 = 0;
              }
              v182 = &v175[4 * v171];
              *(_DWORD *)v182 = 0;
              v129 = v182 + 4;
              while (v151 != v170)
              {
                v183 = *((_DWORD *)v151 - 1);
                v151 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v182;
              *(_QWORD *)(a1 + 40) = v129;
              *(_QWORD *)(a1 + 48) = &v175[4 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_DWORD *)v151 = 0;
              v129 = v151 + 4;
            }
            *(_QWORD *)(a1 + 40) = v129;
LABEL_290:
            v184 = *((_QWORD *)this + 1);
            if (v184 <= 0xFFFFFFFFFFFFFFFBLL && v184 + 4 <= *((_QWORD *)this + 2))
            {
              *(v129 - 1) = *(_DWORD *)(*(_QWORD *)this + v184);
LABEL_294:
              v42 = *((_QWORD *)this + 1) + 4;
LABEL_295:
              *((_QWORD *)this + 1) = v42;
            }
            else
            {
LABEL_292:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_296:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_296;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7CA850(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  __int16 v10;
  const PB::Base *v11;
  const PB::Base *v12;
  __int16 v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  v3 = result;
  if ((*(_WORD *)(result + 168) & 2) != 0)
    result = PB::Writer::write(this, *(double *)(result + 128));
  v4 = *(float **)(v3 + 80);
  v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 56);
  v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 148));
    v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0)
LABEL_12:
    result = PB::Writer::writeVarInt(this);
LABEL_13:
  v11 = *(const PB::Base **)(v3 + 104);
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11);
  v12 = *(const PB::Base **)(v3 + 112);
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0)
        goto LABEL_20;
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  result = PB::Writer::write(this);
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
LABEL_38:
    result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0)
    goto LABEL_38;
LABEL_22:
  if ((v13 & 0x80) != 0)
LABEL_23:
    result = PB::Writer::writeVarInt(this);
LABEL_24:
  v14 = *(float **)(v3 + 8);
  v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16);
  }
  v18 = *(float **)(v3 + 32);
  v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    v19 = *v18++;
    result = PB::Writer::write(this, v19);
  }
  return result;
}

double sub_21B7CAA34(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF348E8;
  *(_DWORD *)(a1 + 204) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

void sub_21B7CAA78(PB::Base *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_24DF348E8;
  v2 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

void sub_21B7CAB30(PB::Base *a1)
{
  sub_21B7CAA78(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7CAB54(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v16;
  char v17;
  char v18;

  *(_QWORD *)a1 = &off_24DF348E8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_DWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  if ((*(_BYTE *)(a2 + 204) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(a1 + 204) = 1;
    *(_QWORD *)(a1 + 184) = v8;
  }
  if (a1 != a2)
  {
    sub_21B796B90(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v9 = *(_BYTE *)(a2 + 204);
  if ((v9 & 2) != 0)
  {
    v16 = *(_DWORD *)(a2 + 192);
    *(_BYTE *)(a1 + 204) |= 2u;
    *(_DWORD *)(a1 + 192) = v16;
    v9 = *(_BYTE *)(a2 + 204);
    if ((v9 & 8) == 0)
    {
LABEL_7:
      if ((v9 & 0x10) == 0)
        goto LABEL_8;
LABEL_22:
      v18 = *(_BYTE *)(a2 + 201);
      *(_BYTE *)(a1 + 204) |= 0x10u;
      *(_BYTE *)(a1 + 201) = v18;
      if ((*(_BYTE *)(a2 + 204) & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(a2 + 204) & 8) == 0)
  {
    goto LABEL_7;
  }
  v17 = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 204) |= 8u;
  *(_BYTE *)(a1 + 200) = v17;
  v9 = *(_BYTE *)(a2 + 204);
  if ((v9 & 0x10) != 0)
    goto LABEL_22;
LABEL_8:
  if ((v9 & 0x20) != 0)
  {
LABEL_9:
    v10 = *(_BYTE *)(a2 + 202);
    *(_BYTE *)(a1 + 204) |= 0x20u;
    *(_BYTE *)(a1 + 202) = v10;
  }
LABEL_10:
  if (*(_QWORD *)(a2 + 176))
  {
    v11 = operator new();
    v12 = sub_21B79B8CC(v11, *(_QWORD *)(a2 + 176));
    v13 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  if (a1 != a2)
    sub_21B796B90(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  if ((*(_BYTE *)(a2 + 204) & 4) != 0)
  {
    v14 = *(_DWORD *)(a2 + 196);
    *(_BYTE *)(a1 + 204) |= 4u;
    *(_DWORD *)(a1 + 196) = v14;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
    sub_21B796B90(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  return a1;
}

uint64_t sub_21B7CAD74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float *v23;
  float v24;
  float *v25;
  float *v26;
  float v27;
  char v28;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "TNBFrame");
  if ((*(_BYTE *)(a1 + 204) & 2) != 0)
    PB::TextFormatter::format(this, "dotQuality", *(float *)(a1 + 192));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "dotVector", v8);
  }
  if ((*(_BYTE *)(a1 + 204) & 8) != 0)
    PB::TextFormatter::format(this, "fusingGaze");
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "gazeVector", v11);
  }
  v12 = *(_BYTE *)(a1 + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "hasStep");
    v12 = *(_BYTE *)(a1 + 204);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(this, "hasValidTNBFrame");
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v15);
  }
  v16 = *(float **)(a1 + 80);
  v17 = *(float **)(a1 + 88);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v18);
  }
  v19 = *(float **)(a1 + 104);
  v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "rawDoTVector", v21);
  }
  v22 = *(float **)(a1 + 128);
  v23 = *(float **)(a1 + 136);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(this, "rawInertialRotationRate", v24);
  }
  v25 = *(float **)(a1 + 152);
  v26 = *(float **)(a1 + 160);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(this, "rawInertialUserAccel", v27);
  }
  v28 = *(_BYTE *)(a1 + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 196));
    v28 = *(_BYTE *)(a1 + 204);
  }
  if ((v28 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 184));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7CAFB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  _DWORD *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  _DWORD *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  _DWORD *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  _DWORD *v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  unint64_t v148;
  char *v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  char *v198;
  int v199;
  char *v200;
  int v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  char *v208;
  int v209;
  char *v210;
  int v211;
  unint64_t v212;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void **v221;
  void **v222;
  void **v223;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v220 = a1 + 72;
    v222 = (void **)(a1 + 128);
    v223 = (void **)(a1 + 56);
    v221 = (void **)(a1 + 104);
    v218 = a1 + 120;
    v219 = a1 + 144;
    v8 = (void **)(a1 + 32);
    v9 = (void **)(a1 + 8);
    v216 = a1 + 24;
    v217 = a1 + 48;
    v10 = (void **)(a1 + 80);
    v11 = (void **)(a1 + 152);
    v214 = a1 + 168;
    v215 = a1 + 96;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 204) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_345;
        case 2u:
          if (v24 != 2)
          {
            v142 = *(char **)(a1 + 160);
            v141 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v142 >= v141)
            {
              v156 = (char *)*v11;
              v157 = (v142 - (_BYTE *)*v11) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_354:
                sub_21B796A0C();
              v159 = v141 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)sub_21B796CD8(v214, v160);
                v156 = *(char **)(a1 + 152);
                v142 = *(char **)(a1 + 160);
              }
              else
              {
                v161 = 0;
              }
              v198 = &v161[4 * v157];
              *(_DWORD *)v198 = 0;
              v143 = v198 + 4;
              while (v142 != v156)
              {
                v199 = *((_DWORD *)v142 - 1);
                v142 -= 4;
                *((_DWORD *)v198 - 1) = v199;
                v198 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v198;
              *(_QWORD *)(a1 + 160) = v143;
              *(_QWORD *)(a1 + 168) = &v161[4 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v142 = 0;
              v143 = v142 + 4;
            }
            *(_QWORD *)(a1 + 160) = v143;
            goto LABEL_340;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 160);
            v29 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_354;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v214, v36);
                v32 = *(char **)(a1 + 152);
                v30 = *(char **)(a1 + 160);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v38;
              *(_QWORD *)(a1 + 160) = v31;
              *(_QWORD *)(a1 + 168) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 160) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_213;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_214;
        case 3u:
          if (v24 != 2)
          {
            v145 = *(char **)(a1 + 88);
            v144 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v145 >= v144)
            {
              v162 = (char *)*v10;
              v163 = (v145 - (_BYTE *)*v10) >> 2;
              v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62)
LABEL_355:
                sub_21B796A0C();
              v165 = v144 - (_QWORD)v162;
              if (v165 >> 1 > v164)
                v164 = v165 >> 1;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                v166 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (v166)
              {
                v167 = (char *)sub_21B796CD8(v215, v166);
                v162 = *(char **)(a1 + 80);
                v145 = *(char **)(a1 + 88);
              }
              else
              {
                v167 = 0;
              }
              v200 = &v167[4 * v163];
              *(_DWORD *)v200 = 0;
              v143 = v200 + 4;
              while (v145 != v162)
              {
                v201 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v200 - 1) = v201;
                v200 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v200;
              *(_QWORD *)(a1 + 88) = v143;
              *(_QWORD *)(a1 + 96) = &v167[4 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v143 = v145 + 4;
            }
            *(_QWORD *)(a1 + 88) = v143;
            goto LABEL_340;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 88);
            v43 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_355;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796CD8(v215, v50);
                v46 = *(char **)(a1 + 80);
                v44 = *(char **)(a1 + 88);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v52;
              *(_QWORD *)(a1 + 88) = v45;
              *(_QWORD *)(a1 + 96) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 88) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_213;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_214;
        case 4u:
          if (v24 != 2)
          {
            v147 = *(char **)(a1 + 16);
            v146 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v147 >= v146)
            {
              v168 = (char *)*v9;
              v169 = (v147 - (_BYTE *)*v9) >> 2;
              v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62)
LABEL_356:
                sub_21B796A0C();
              v171 = v146 - (_QWORD)v168;
              if (v171 >> 1 > v170)
                v170 = v171 >> 1;
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
                v172 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v172 = v170;
              if (v172)
              {
                v173 = (char *)sub_21B796CD8(v216, v172);
                v168 = *(char **)(a1 + 8);
                v147 = *(char **)(a1 + 16);
              }
              else
              {
                v173 = 0;
              }
              v202 = &v173[4 * v169];
              *(_DWORD *)v202 = 0;
              v143 = v202 + 4;
              while (v147 != v168)
              {
                v203 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v202;
              *(_QWORD *)(a1 + 16) = v143;
              *(_QWORD *)(a1 + 24) = &v173[4 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_DWORD *)v147 = 0;
              v143 = v147 + 4;
            }
            *(_QWORD *)(a1 + 16) = v143;
            goto LABEL_340;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 16);
            v57 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_356;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_21B796CD8(v216, v64);
                v60 = *(char **)(a1 + 8);
                v58 = *(char **)(a1 + 16);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v66;
              *(_QWORD *)(a1 + 16) = v59;
              *(_QWORD *)(a1 + 24) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *(_QWORD *)(a1 + 16) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_213;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_214;
        case 5u:
          if (v24 != 2)
          {
            v149 = *(char **)(a1 + 40);
            v148 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v149 >= v148)
            {
              v174 = (char *)*v8;
              v175 = (v149 - (_BYTE *)*v8) >> 2;
              v176 = v175 + 1;
              if ((unint64_t)(v175 + 1) >> 62)
LABEL_357:
                sub_21B796A0C();
              v177 = v148 - (_QWORD)v174;
              if (v177 >> 1 > v176)
                v176 = v177 >> 1;
              if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL)
                v178 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v178 = v176;
              if (v178)
              {
                v179 = (char *)sub_21B796CD8(v217, v178);
                v174 = *(char **)(a1 + 32);
                v149 = *(char **)(a1 + 40);
              }
              else
              {
                v179 = 0;
              }
              v204 = &v179[4 * v175];
              *(_DWORD *)v204 = 0;
              v143 = v204 + 4;
              while (v149 != v174)
              {
                v205 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v204;
              *(_QWORD *)(a1 + 40) = v143;
              *(_QWORD *)(a1 + 48) = &v179[4 * v178];
              if (v174)
                operator delete(v174);
            }
            else
            {
              *(_DWORD *)v149 = 0;
              v143 = v149 + 4;
            }
            *(_QWORD *)(a1 + 40) = v143;
            goto LABEL_340;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          while (v69 < v70 && !*((_BYTE *)this + 24))
          {
            v72 = *(char **)(a1 + 40);
            v71 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v8;
              v75 = (v72 - (_BYTE *)*v8) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_357;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_21B796CD8(v217, v78);
                v74 = *(char **)(a1 + 32);
                v72 = *(char **)(a1 + 40);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v73 = v80 + 4;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v80;
              *(_QWORD *)(a1 + 40) = v73;
              *(_QWORD *)(a1 + 48) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v73 = v72 + 4;
            }
            *(_QWORD *)(a1 + 40) = v73;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              goto LABEL_213;
            *(v73 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
            v70 = *((_QWORD *)this + 2);
            v69 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v69;
          }
          goto LABEL_214;
        case 6u:
          *(_BYTE *)(a1 + 204) |= 2u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_344;
        case 7u:
          *(_BYTE *)(a1 + 204) |= 8u;
          v84 = *((_QWORD *)this + 1);
          if (v84 >= *((_QWORD *)this + 2))
          {
            v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v85 = v84 + 1;
            v86 = *(unsigned __int8 *)(*(_QWORD *)this + v84);
            *((_QWORD *)this + 1) = v85;
            v87 = v86 != 0;
          }
          *(_BYTE *)(a1 + 200) = v87;
          goto LABEL_346;
        case 8u:
          *(_BYTE *)(a1 + 204) |= 0x10u;
          v88 = *((_QWORD *)this + 1);
          if (v88 >= *((_QWORD *)this + 2))
          {
            v91 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v89 = v88 + 1;
            v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
            *((_QWORD *)this + 1) = v89;
            v91 = v90 != 0;
          }
          *(_BYTE *)(a1 + 201) = v91;
          goto LABEL_346;
        case 9u:
          *(_BYTE *)(a1 + 204) |= 0x20u;
          v92 = *((_QWORD *)this + 1);
          if (v92 >= *((_QWORD *)this + 2))
          {
            v95 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v93 = v92 + 1;
            v94 = *(unsigned __int8 *)(*(_QWORD *)this + v92);
            *((_QWORD *)this + 1) = v93;
            v95 = v94 != 0;
          }
          *(_BYTE *)(a1 + 202) = v95;
          goto LABEL_346;
        case 0xAu:
          v96 = operator new();
          *(_QWORD *)v96 = &off_24DF334C8;
          *(_DWORD *)(v96 + 116) = 0;
          *(_OWORD *)(v96 + 8) = 0u;
          *(_OWORD *)(v96 + 24) = 0u;
          *(_OWORD *)(v96 + 40) = 0u;
          *(_OWORD *)(v96 + 56) = 0u;
          *(_QWORD *)(v96 + 72) = 0;
          v97 = *(_QWORD *)(a1 + 176);
          *(_QWORD *)(a1 + 176) = v96;
          if (v97)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
            v96 = *(_QWORD *)(a1 + 176);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v96 + 16))(v96, this) & 1) == 0)
          {
            return 0;
          }
          goto LABEL_214;
        case 0xBu:
          if (v24 != 2)
          {
            v151 = *(char **)(a1 + 112);
            v150 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v151 >= v150)
            {
              v180 = (char *)*v221;
              v181 = (v151 - (_BYTE *)*v221) >> 2;
              v182 = v181 + 1;
              if ((unint64_t)(v181 + 1) >> 62)
LABEL_358:
                sub_21B796A0C();
              v183 = v150 - (_QWORD)v180;
              if (v183 >> 1 > v182)
                v182 = v183 >> 1;
              if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFFCLL)
                v184 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v184 = v182;
              if (v184)
              {
                v185 = (char *)sub_21B796CD8(v218, v184);
                v180 = *(char **)(a1 + 104);
                v151 = *(char **)(a1 + 112);
              }
              else
              {
                v185 = 0;
              }
              v206 = &v185[4 * v181];
              *(_DWORD *)v206 = 0;
              v143 = v206 + 4;
              while (v151 != v180)
              {
                v207 = *((_DWORD *)v151 - 1);
                v151 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v206;
              *(_QWORD *)(a1 + 112) = v143;
              *(_QWORD *)(a1 + 120) = &v185[4 * v184];
              if (v180)
                operator delete(v180);
            }
            else
            {
              *(_DWORD *)v151 = 0;
              v143 = v151 + 4;
            }
            *(_QWORD *)(a1 + 112) = v143;
            goto LABEL_340;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v98 = *((_QWORD *)this + 1);
          v99 = *((_QWORD *)this + 2);
          while (v98 < v99 && !*((_BYTE *)this + 24))
          {
            v101 = *(char **)(a1 + 112);
            v100 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v101 >= v100)
            {
              v103 = (char *)*v221;
              v104 = (v101 - (_BYTE *)*v221) >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
                goto LABEL_358;
              v106 = v100 - (_QWORD)v103;
              if (v106 >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_21B796CD8(v218, v107);
                v103 = *(char **)(a1 + 104);
                v101 = *(char **)(a1 + 112);
              }
              else
              {
                v108 = 0;
              }
              v109 = &v108[4 * v104];
              *(_DWORD *)v109 = 0;
              v102 = v109 + 4;
              while (v101 != v103)
              {
                v110 = *((_DWORD *)v101 - 1);
                v101 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v109;
              *(_QWORD *)(a1 + 112) = v102;
              *(_QWORD *)(a1 + 120) = &v108[4 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_DWORD *)v101 = 0;
              v102 = v101 + 4;
            }
            *(_QWORD *)(a1 + 112) = v102;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_213;
            *(v102 - 1) = *(_DWORD *)(*(_QWORD *)this + v111);
            v99 = *((_QWORD *)this + 2);
            v98 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v98;
          }
          goto LABEL_214;
        case 0xCu:
          *(_BYTE *)(a1 + 204) |= 4u;
          v112 = *((_QWORD *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v112);
          goto LABEL_344;
        case 0xDu:
          if (v24 != 2)
          {
            v153 = *(char **)(a1 + 136);
            v152 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v153 >= v152)
            {
              v186 = (char *)*v222;
              v187 = (v153 - (_BYTE *)*v222) >> 2;
              v188 = v187 + 1;
              if ((unint64_t)(v187 + 1) >> 62)
LABEL_359:
                sub_21B796A0C();
              v189 = v152 - (_QWORD)v186;
              if (v189 >> 1 > v188)
                v188 = v189 >> 1;
              if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL)
                v190 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v190 = v188;
              if (v190)
              {
                v191 = (char *)sub_21B796CD8(v219, v190);
                v186 = *(char **)(a1 + 128);
                v153 = *(char **)(a1 + 136);
              }
              else
              {
                v191 = 0;
              }
              v208 = &v191[4 * v187];
              *(_DWORD *)v208 = 0;
              v143 = v208 + 4;
              while (v153 != v186)
              {
                v209 = *((_DWORD *)v153 - 1);
                v153 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v208;
              *(_QWORD *)(a1 + 136) = v143;
              *(_QWORD *)(a1 + 144) = &v191[4 * v190];
              if (v186)
                operator delete(v186);
            }
            else
            {
              *(_DWORD *)v153 = 0;
              v143 = v153 + 4;
            }
            *(_QWORD *)(a1 + 136) = v143;
            goto LABEL_340;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v113 = *((_QWORD *)this + 1);
          v114 = *((_QWORD *)this + 2);
          while (v113 < v114 && !*((_BYTE *)this + 24))
          {
            v116 = *(char **)(a1 + 136);
            v115 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v116 >= v115)
            {
              v118 = (char *)*v222;
              v119 = (v116 - (_BYTE *)*v222) >> 2;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
                goto LABEL_359;
              v121 = v115 - (_QWORD)v118;
              if (v121 >> 1 > v120)
                v120 = v121 >> 1;
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                v122 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v122 = v120;
              if (v122)
              {
                v123 = (char *)sub_21B796CD8(v219, v122);
                v118 = *(char **)(a1 + 128);
                v116 = *(char **)(a1 + 136);
              }
              else
              {
                v123 = 0;
              }
              v124 = &v123[4 * v119];
              *(_DWORD *)v124 = 0;
              v117 = v124 + 4;
              while (v116 != v118)
              {
                v125 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v124;
              *(_QWORD *)(a1 + 136) = v117;
              *(_QWORD *)(a1 + 144) = &v123[4 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_DWORD *)v116 = 0;
              v117 = v116 + 4;
            }
            *(_QWORD *)(a1 + 136) = v117;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_213;
            *(v117 - 1) = *(_DWORD *)(*(_QWORD *)this + v126);
            v114 = *((_QWORD *)this + 2);
            v113 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v113;
          }
          goto LABEL_214;
        case 0xEu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v127 = *((_QWORD *)this + 1);
            v128 = *((_QWORD *)this + 2);
            while (v127 < v128 && !*((_BYTE *)this + 24))
            {
              v130 = *(char **)(a1 + 64);
              v129 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v130 >= v129)
              {
                v132 = (char *)*v223;
                v133 = (v130 - (_BYTE *)*v223) >> 2;
                v134 = v133 + 1;
                if ((unint64_t)(v133 + 1) >> 62)
                  goto LABEL_360;
                v135 = v129 - (_QWORD)v132;
                if (v135 >> 1 > v134)
                  v134 = v135 >> 1;
                if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                  v136 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v136 = v134;
                if (v136)
                {
                  v137 = (char *)sub_21B796CD8(v220, v136);
                  v132 = *(char **)(a1 + 56);
                  v130 = *(char **)(a1 + 64);
                }
                else
                {
                  v137 = 0;
                }
                v138 = &v137[4 * v133];
                *(_DWORD *)v138 = 0;
                v131 = v138 + 4;
                while (v130 != v132)
                {
                  v139 = *((_DWORD *)v130 - 1);
                  v130 -= 4;
                  *((_DWORD *)v138 - 1) = v139;
                  v138 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v138;
                *(_QWORD *)(a1 + 64) = v131;
                *(_QWORD *)(a1 + 72) = &v137[4 * v136];
                if (v132)
                  operator delete(v132);
              }
              else
              {
                *(_DWORD *)v130 = 0;
                v131 = v130 + 4;
              }
              *(_QWORD *)(a1 + 64) = v131;
              v140 = *((_QWORD *)this + 1);
              if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)this + 2))
              {
LABEL_213:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v131 - 1) = *(_DWORD *)(*(_QWORD *)this + v140);
              v128 = *((_QWORD *)this + 2);
              v127 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v127;
            }
LABEL_214:
            PB::Reader::recallMark();
          }
          else
          {
            v155 = *(char **)(a1 + 64);
            v154 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v155 >= v154)
            {
              v192 = (char *)*v223;
              v193 = (v155 - (_BYTE *)*v223) >> 2;
              v194 = v193 + 1;
              if ((unint64_t)(v193 + 1) >> 62)
LABEL_360:
                sub_21B796A0C();
              v195 = v154 - (_QWORD)v192;
              if (v195 >> 1 > v194)
                v194 = v195 >> 1;
              if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL)
                v196 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v196 = v194;
              if (v196)
              {
                v197 = (char *)sub_21B796CD8(v220, v196);
                v192 = *(char **)(a1 + 56);
                v155 = *(char **)(a1 + 64);
              }
              else
              {
                v197 = 0;
              }
              v210 = &v197[4 * v193];
              *(_DWORD *)v210 = 0;
              v143 = v210 + 4;
              while (v155 != v192)
              {
                v211 = *((_DWORD *)v155 - 1);
                v155 -= 4;
                *((_DWORD *)v210 - 1) = v211;
                v210 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v210;
              *(_QWORD *)(a1 + 64) = v143;
              *(_QWORD *)(a1 + 72) = &v197[4 * v196];
              if (v192)
                operator delete(v192);
            }
            else
            {
              *(_DWORD *)v155 = 0;
              v143 = v155 + 4;
            }
            *(_QWORD *)(a1 + 64) = v143;
LABEL_340:
            v212 = *((_QWORD *)this + 1);
            if (v212 <= 0xFFFFFFFFFFFFFFFBLL && v212 + 4 <= *((_QWORD *)this + 2))
            {
              *(v143 - 1) = *(_DWORD *)(*(_QWORD *)this + v212);
LABEL_344:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_345:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_342:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_346:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_346;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7CBFAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  const PB::Base *v17;
  float *v18;
  float *v19;
  float v20;
  float *v21;
  float *v22;
  float v23;
  float *v24;
  float *v25;
  float v26;

  v3 = result;
  if ((*(_BYTE *)(result + 204) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 184));
  v4 = *(float **)(v3 + 152);
  v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(float **)(v3 + 32);
  v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15);
  }
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 192));
    v16 = *(_BYTE *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0)
        goto LABEL_18;
      goto LABEL_36;
    }
  }
  else if ((*(_BYTE *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  result = PB::Writer::write(this);
  v16 = *(_BYTE *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_36:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 204) & 0x20) != 0)
LABEL_19:
    result = PB::Writer::write(this);
LABEL_20:
  v17 = *(const PB::Base **)(v3 + 176);
  if (v17)
    result = PB::Writer::writeSubmessage(this, v17);
  v18 = *(float **)(v3 + 104);
  v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    result = PB::Writer::write(this, v20);
  }
  if ((*(_BYTE *)(v3 + 204) & 4) != 0)
    result = PB::Writer::write(this, *(float *)(v3 + 196));
  v21 = *(float **)(v3 + 128);
  v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    result = PB::Writer::write(this, v23);
  }
  v25 = *(float **)(v3 + 56);
  v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    v26 = *v25++;
    result = PB::Writer::write(this, v26);
  }
  return result;
}

uint64_t sub_21B7CC168(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34920;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_21B7CC180(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7CC1A4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)a1 = &off_24DF34920;
  *(_DWORD *)(a1 + 120) = 0;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 120) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 120);
    if ((v2 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 108);
    v3 |= 0x1000000u;
    *(_DWORD *)(a1 + 120) = v3;
    *(_DWORD *)(a1 + 108) = v4;
    v2 = *(_DWORD *)(a2 + 120);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 96);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 120) = v3;
    *(_DWORD *)(a1 + 96) = v4;
    v2 = *(_DWORD *)(a2 + 120);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800000) == 0)
        goto LABEL_9;
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x800000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  v5 = *(_DWORD *)(a2 + 76);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 76) = v5;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  v6 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 60) = v6;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x400) == 0)
  {
LABEL_23:
    if ((v2 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x100) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x80) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x80) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 40) = v7;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 4) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 120);
  if ((v2 & 4) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      return *(float *)&v4;
    goto LABEL_56;
  }
LABEL_55:
  v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_DWORD *)(a1 + 120) = v3;
  *(_DWORD *)(a1 + 20) = v8;
  if ((*(_DWORD *)(a2 + 120) & 0x40000) == 0)
    return *(float *)&v4;
LABEL_56:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 120) = v3 | 0x40000;
  *(_DWORD *)(a1 + 84) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7CC4B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasFraction", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cookie");
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "currentRange", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "distanceReleaseThreshold", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "distanceTriggerThreshold", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "habcBiasCorrectedDenominator", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "habcBiasCorrectedNumFramesCaptured");
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "habcBiasCorrectedNumerator", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaseline", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaselineSigma", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "habcDenominator", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "habcNumFramesCaptured");
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "habcNumerator", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "habcRateBaseline", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "habcRateBaselineSigma", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numBaselineCaptureFrames");
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "numEffSpads", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rateScalingFactor", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "reflectanceEstimate", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "signalDeltaNCounts", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "signalRateBaselineKcpss", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "signalRateBaselineSigmaKcpss", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "signalRateNoiseMarginKcpss", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "signalRateSigmaKcpss", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(this, "smudgeTimeoutCountdownMs", *(float *)(a1 + 116));
    if ((*(_DWORD *)(a1 + 120) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(this, "signalRateTriggerThresholdNCounts", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 1) != 0)
LABEL_28:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7CC844(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 120) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_151;
            case 2u:
              *(_DWORD *)(a1 + 120) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 3u:
              *(_DWORD *)(a1 + 120) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 4u:
              *(_DWORD *)(a1 + 120) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 5u:
              *(_DWORD *)(a1 + 120) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 6u:
              *(_DWORD *)(a1 + 120) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 7u:
              *(_DWORD *)(a1 + 120) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 8u:
              *(_DWORD *)(a1 + 120) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 9u:
              *(_DWORD *)(a1 + 120) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xAu:
              *(_DWORD *)(a1 + 120) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xBu:
              *(_DWORD *)(a1 + 120) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xCu:
              *(_DWORD *)(a1 + 120) |= 0x10000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_160:
                    v2 = v47 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_160;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_161;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_152;
            case 0xDu:
              *(_DWORD *)(a1 + 120) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xEu:
              *(_DWORD *)(a1 + 120) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0xFu:
              *(_DWORD *)(a1 + 120) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x10u:
              *(_DWORD *)(a1 + 120) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x11u:
              *(_DWORD *)(a1 + 120) |= 0x1000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_165:
                    v2 = v51 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_165;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_166;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 60) = v31;
              goto LABEL_152;
            case 0x12u:
              *(_DWORD *)(a1 + 120) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x13u:
              *(_DWORD *)(a1 + 120) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x14u:
              *(_DWORD *)(a1 + 120) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x15u:
              *(_DWORD *)(a1 + 120) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x16u:
              *(_DWORD *)(a1 + 120) |= 0x80u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_170:
                    v2 = v55 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_170;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_171;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 40) = v37;
              goto LABEL_152;
            case 0x17u:
              *(_DWORD *)(a1 + 120) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x18u:
              *(_DWORD *)(a1 + 120) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x19u:
              *(_DWORD *)(a1 + 120) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_120;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_150;
            case 0x1Au:
              *(_DWORD *)(a1 + 120) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_175:
                    v2 = v59 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_175;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_176;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_152:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x1Bu:
              *(_DWORD *)(a1 + 120) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_150:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_151:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_120:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_152;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_152;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7CD290(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 120);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 84));
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 120) & 0x40000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 84));
  return result;
}

uint64_t sub_21B7CD5A8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34958;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B7CD5C0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7CD5E4(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_24DF34958;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_21B7CD654(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "proximityState");
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "proximityRawValue");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7CD6E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 20) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7CDA64(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B7CDADC(_QWORD *result)
{
  *result = &off_24DF34990;
  *(_QWORD *)((char *)result + 164) = 0;
  return result;
}

void sub_21B7CDAF4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7CDB18(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;

  *(_QWORD *)result = &off_24DF34990;
  *(_QWORD *)(result + 164) = 0;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_QWORD *)(result + 164) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 104);
    v3 |= 0x80000uLL;
    *(_QWORD *)(result + 164) = v3;
    *(_DWORD *)(result + 104) = v5;
    v2 = *(_QWORD *)(a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x20000000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 144);
    v3 |= 0x20000000uLL;
    *(_QWORD *)(result + 164) = v3;
    *(_DWORD *)(result + 144) = v6;
    v2 = *(_QWORD *)(a2 + 164);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000000) == 0)
        goto LABEL_9;
      goto LABEL_41;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 48) = v7;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 148) = v8;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 52) = v9;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *(_DWORD *)(a2 + 156);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 156) = v10;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 80) = v11;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 76) = v12;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 56) = v13;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  v14 = *(_DWORD *)(a2 + 160);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 160) = v14;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  v15 = *(_DWORD *)(a2 + 140);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 140) = v15;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  v16 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 68) = v16;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  v17 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 84) = v17;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_19:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  v18 = *(_DWORD *)(a2 + 120);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 120) = v18;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  v19 = *(_DWORD *)(a2 + 128);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 128) = v19;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  v20 = *(_DWORD *)(a2 + 136);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 136) = v20;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  v21 = *(_DWORD *)(a2 + 132);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 132) = v21;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  v22 = *(_DWORD *)(a2 + 116);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 116) = v22;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  v23 = *(_DWORD *)(a2 + 124);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 124) = v23;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  v24 = *(_DWORD *)(a2 + 152);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 152) = v24;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  v25 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 88) = v25;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  v26 = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 108) = v26;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  v27 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 60) = v27;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  v28 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 112) = v28;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x20000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  v29 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 64) = v29;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  v30 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 96) = v30;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_32:
    if ((v2 & 0x10000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  v31 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 100) = v31;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_33:
    if ((v2 & 8) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  v32 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_DWORD *)(result + 92) = v32;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_34:
    if ((v2 & 4) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  v33 = *(_QWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 32) = v33;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  v34 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 24) = v34;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  v35 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 8) = v35;
  v2 = *(_QWORD *)(a2 + 164);
  if ((v2 & 2) == 0)
  {
LABEL_37:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_70:
    v37 = *(_DWORD *)(a2 + 72);
    *(_QWORD *)(result + 164) = v3 | 0x800;
    *(_DWORD *)(result + 72) = v37;
    return result;
  }
LABEL_69:
  v36 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 164) = v3;
  *(_QWORD *)(result + 16) = v36;
  if ((*(_QWORD *)(a2 + 164) & 0x800) != 0)
    goto LABEL_70;
  return result;
}

uint64_t sub_21B7CDEEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "ambientRatePerSPAD", *(float *)(a1 + 48));
    v5 = *(_QWORD *)(a1 + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ambientRateTotal", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "blockSelectByte");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "correctedSignalRatePerSPAD", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "estimatedAmbientBias", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "integrationTime");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "numAOPClients");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "numAperturedSPADs");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numFullSPADs");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "oscFrequencySetting");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "oscTrim");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "pearlScanWindowOnTs");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "pearlScanWindowOpen");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "pearlScanWindownOffTs");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pearlSessionOffTs");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "pearlSessionOnTs");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "pearlSessionRunning");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "pearlSessionType");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawRange", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "refPhaseOffset");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "refSignalRateTotal", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "regValAmbientWindowEvents");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "regValRange");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "regValRefAmbientWindowEvents");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "regValRefRange");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "regValRefSignalTotalEvents");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "regValSignalTotalEvents");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "signalEventLimit");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "signalRatePerSPAD", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "signalRateTotal", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "signalToAmbientWindowRatio");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
LABEL_69:
    PB::TextFormatter::format(this, "totalRateTotal", *(float *)(a1 + 156));
    if ((*(_QWORD *)(a1 + 164) & 0x200000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_35;
  }
LABEL_68:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000000) != 0)
    goto LABEL_69;
LABEL_34:
  if ((v5 & 0x200000000) != 0)
LABEL_35:
    PB::TextFormatter::format(this, "vhvSetting");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7CE35C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  char v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  char v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  char v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v198;
  char v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unsigned int v212;
  uint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;
  char v272;
  unsigned int v273;
  unint64_t v274;
  char v275;
  char v276;
  unsigned int v277;
  unint64_t v278;
  char v279;
  char v280;
  unsigned int v281;
  unint64_t v282;
  char v283;
  char v284;
  unsigned int v285;
  unint64_t v286;
  char v287;
  char v288;
  unsigned int v289;
  unint64_t v290;
  char v291;
  char v292;
  unsigned int v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  unint64_t v298;
  char v299;
  char v300;
  unsigned int v301;
  unint64_t v302;
  char v303;
  char v304;
  unsigned int v305;
  unint64_t v306;
  char v307;
  char v308;
  unsigned int v309;
  unint64_t v310;
  char v311;
  char v312;
  unsigned int v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  unint64_t v318;
  char v319;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 164) |= 0x10uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v20);
          v21 = *((_QWORD *)this + 1) + 8;
          goto LABEL_392;
        case 2u:
          *(_QWORD *)(a1 + 164) |= 0x80000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_391;
        case 3u:
          *(_QWORD *)(a1 + 164) |= 0x20000000uLL;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_391;
        case 4u:
          *(_QWORD *)(a1 + 164) |= 0x20uLL;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_391;
        case 5u:
          *(_QWORD *)(a1 + 164) |= 0x40000000uLL;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_391;
        case 6u:
          *(_QWORD *)(a1 + 164) |= 0x40uLL;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_391;
        case 7u:
          *(_QWORD *)(a1 + 164) |= 0x100000000uLL;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_391;
        case 8u:
          *(_QWORD *)(a1 + 164) |= 0x2000uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_396;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v34) = 0;
            goto LABEL_396;
          }
          v224 = 0;
          v225 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v226 = v29 + 1;
              v227 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v226;
              v34 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v29 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 80) = v34;
          goto LABEL_489;
        case 9u:
          *(_QWORD *)(a1 + 164) |= 0x1000uLL;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_400;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v42) = 0;
            goto LABEL_400;
          }
          v228 = 0;
          v229 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v230 = v37 + 1;
              v231 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v230;
              v42 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v37 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 76) = v42;
          goto LABEL_489;
        case 0xAu:
          *(_QWORD *)(a1 + 164) |= 0x80uLL;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_404;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v50) = 0;
            goto LABEL_404;
          }
          v232 = 0;
          v233 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v234 = v45 + 1;
              v235 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v234;
              v50 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v45 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 56) = v50;
          goto LABEL_489;
        case 0xBu:
          *(_QWORD *)(a1 + 164) |= 0x200000000uLL;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          v55 = *(_QWORD *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)this + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_408;
              v56 += 7;
              v53 = v59;
              v14 = v57++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v58) = 0;
            goto LABEL_408;
          }
          v236 = 0;
          v237 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v238 = v53 + 1;
              v239 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)this + 1) = v238;
              v58 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v53 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 160) = v58;
          goto LABEL_489;
        case 0xCu:
          *(_QWORD *)(a1 + 164) |= 0x10000000uLL;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_412;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v66) = 0;
            goto LABEL_412;
          }
          v240 = 0;
          v241 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v242 = v61 + 1;
              v243 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v242;
              v66 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v61 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 140) = v66;
          goto LABEL_489;
        case 0xDu:
          *(_QWORD *)(a1 + 164) |= 0x400uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_416;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v74) = 0;
            goto LABEL_416;
          }
          v244 = 0;
          v245 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v246 = v69 + 1;
              v247 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v246;
              v74 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v69 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v74;
          goto LABEL_489;
        case 0xEu:
          *(_QWORD *)(a1 + 164) |= 0x4000uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_420;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v82) = 0;
            goto LABEL_420;
          }
          v248 = 0;
          v249 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v250 = v77 + 1;
              v251 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v250;
              v82 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v77 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_270;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 84) = v82;
          goto LABEL_489;
        case 0xFu:
          *(_QWORD *)(a1 + 164) |= 0x800000uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_424;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v90) = 0;
            goto LABEL_424;
          }
          v252 = 0;
          v253 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v254 = v85 + 1;
              v255 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v254;
              v90 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v85 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_277;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 120) = v90;
          goto LABEL_489;
        case 0x10u:
          *(_QWORD *)(a1 + 164) |= 0x2000000uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_428;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v98) = 0;
            goto LABEL_428;
          }
          v256 = 0;
          v257 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v258 = v93 + 1;
              v259 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v258;
              v98 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v93 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_284;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 128) = v98;
          goto LABEL_489;
        case 0x11u:
          *(_QWORD *)(a1 + 164) |= 0x8000000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_432;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v106) = 0;
            goto LABEL_432;
          }
          v260 = 0;
          v261 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v262 = v101 + 1;
              v263 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v262;
              v106 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v101 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_291;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 136) = v106;
          goto LABEL_489;
        case 0x12u:
          *(_QWORD *)(a1 + 164) |= 0x4000000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_436;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_298:
            LODWORD(v114) = 0;
            goto LABEL_436;
          }
          v264 = 0;
          v265 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v266 = v109 + 1;
              v267 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v266;
              v114 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v109 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_298;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 132) = v114;
          goto LABEL_489;
        case 0x13u:
          *(_QWORD *)(a1 + 164) |= 0x400000uLL;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_440;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_305:
            LODWORD(v122) = 0;
            goto LABEL_440;
          }
          v268 = 0;
          v269 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v270 = v117 + 1;
              v271 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v270;
              v122 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                v117 = v270;
                v14 = v269++ > 8;
                if (v14)
                  goto LABEL_305;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 116) = v122;
          goto LABEL_489;
        case 0x14u:
          *(_QWORD *)(a1 + 164) |= 0x1000000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_444;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_312:
            LODWORD(v130) = 0;
            goto LABEL_444;
          }
          v272 = 0;
          v273 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v274 = v125 + 1;
              v275 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v274;
              v130 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                v125 = v274;
                v14 = v273++ > 8;
                if (v14)
                  goto LABEL_312;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_444:
          *(_DWORD *)(a1 + 124) = v130;
          goto LABEL_489;
        case 0x15u:
          *(_QWORD *)(a1 + 164) |= 0x80000000uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_448;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_319:
            LODWORD(v138) = 0;
            goto LABEL_448;
          }
          v276 = 0;
          v277 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v278 = v133 + 1;
              v279 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v278;
              v138 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                v133 = v278;
                v14 = v277++ > 8;
                if (v14)
                  goto LABEL_319;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_448:
          *(_DWORD *)(a1 + 152) = v138;
          goto LABEL_489;
        case 0x16u:
          *(_QWORD *)(a1 + 164) |= 0x8000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_452;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_326:
            LODWORD(v146) = 0;
            goto LABEL_452;
          }
          v280 = 0;
          v281 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v282 = v141 + 1;
              v283 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v282;
              v146 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                v141 = v282;
                v14 = v281++ > 8;
                if (v14)
                  goto LABEL_326;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_452:
          *(_DWORD *)(a1 + 88) = v146;
          goto LABEL_489;
        case 0x17u:
          *(_QWORD *)(a1 + 164) |= 0x100000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_456;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_333:
            LODWORD(v154) = 0;
            goto LABEL_456;
          }
          v284 = 0;
          v285 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v286 = v149 + 1;
              v287 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v286;
              v154 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                v149 = v286;
                v14 = v285++ > 8;
                if (v14)
                  goto LABEL_333;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_456:
          *(_DWORD *)(a1 + 108) = v154;
          goto LABEL_489;
        case 0x18u:
          *(_QWORD *)(a1 + 164) |= 0x100uLL;
          v157 = *((_QWORD *)this + 1);
          if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v157);
          goto LABEL_391;
        case 0x19u:
          *(_QWORD *)(a1 + 164) |= 0x200000uLL;
          v158 = *((_QWORD *)this + 1);
          if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)this + 2))
            goto LABEL_165;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v158);
          goto LABEL_391;
        case 0x1Au:
          *(_QWORD *)(a1 + 164) |= 0x200uLL;
          v159 = *((_QWORD *)this + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v159);
LABEL_391:
            v21 = *((_QWORD *)this + 1) + 4;
LABEL_392:
            *((_QWORD *)this + 1) = v21;
          }
          else
          {
LABEL_165:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_489;
        case 0x1Bu:
          *(_QWORD *)(a1 + 164) |= 0x20000uLL;
          v160 = *((_QWORD *)this + 1);
          v161 = *((_QWORD *)this + 2);
          v162 = *(_QWORD *)this;
          if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
          {
            v163 = 0;
            v164 = 0;
            v165 = 0;
            do
            {
              v166 = v160 + 1;
              *((_QWORD *)this + 1) = v160 + 1;
              v167 = *(_BYTE *)(v162 + v160);
              v165 |= (unint64_t)(v167 & 0x7F) << v163;
              if ((v167 & 0x80) == 0)
                goto LABEL_460;
              v163 += 7;
              v160 = v166;
              v14 = v164++ > 8;
            }
            while (!v14);
LABEL_340:
            LODWORD(v165) = 0;
            goto LABEL_460;
          }
          v288 = 0;
          v289 = 0;
          v165 = 0;
          if (v161 <= v160)
            v161 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v161 == v160)
            {
              LODWORD(v165) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v290 = v160 + 1;
              v291 = *(_BYTE *)(v162 + v160);
              *((_QWORD *)this + 1) = v290;
              v165 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                v160 = v290;
                v14 = v289++ > 8;
                if (v14)
                  goto LABEL_340;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v165) = 0;
            }
            break;
          }
LABEL_460:
          *(_DWORD *)(a1 + 96) = v165;
          goto LABEL_489;
        case 0x1Cu:
          *(_QWORD *)(a1 + 164) |= 0x40000uLL;
          v168 = *((_QWORD *)this + 1);
          v169 = *((_QWORD *)this + 2);
          v170 = *(_QWORD *)this;
          if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
          {
            v171 = 0;
            v172 = 0;
            v173 = 0;
            do
            {
              v174 = v168 + 1;
              *((_QWORD *)this + 1) = v168 + 1;
              v175 = *(_BYTE *)(v170 + v168);
              v173 |= (unint64_t)(v175 & 0x7F) << v171;
              if ((v175 & 0x80) == 0)
                goto LABEL_464;
              v171 += 7;
              v168 = v174;
              v14 = v172++ > 8;
            }
            while (!v14);
LABEL_347:
            LODWORD(v173) = 0;
            goto LABEL_464;
          }
          v292 = 0;
          v293 = 0;
          v173 = 0;
          if (v169 <= v168)
            v169 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v169 == v168)
            {
              LODWORD(v173) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v294 = v168 + 1;
              v295 = *(_BYTE *)(v170 + v168);
              *((_QWORD *)this + 1) = v294;
              v173 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                v168 = v294;
                v14 = v293++ > 8;
                if (v14)
                  goto LABEL_347;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v173) = 0;
            }
            break;
          }
LABEL_464:
          *(_DWORD *)(a1 + 100) = v173;
          goto LABEL_489;
        case 0x1Du:
          *(_QWORD *)(a1 + 164) |= 0x10000uLL;
          v176 = *((_QWORD *)this + 1);
          v177 = *((_QWORD *)this + 2);
          v178 = *(_QWORD *)this;
          if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
          {
            v179 = 0;
            v180 = 0;
            v181 = 0;
            do
            {
              v182 = v176 + 1;
              *((_QWORD *)this + 1) = v176 + 1;
              v183 = *(_BYTE *)(v178 + v176);
              v181 |= (unint64_t)(v183 & 0x7F) << v179;
              if ((v183 & 0x80) == 0)
                goto LABEL_468;
              v179 += 7;
              v176 = v182;
              v14 = v180++ > 8;
            }
            while (!v14);
LABEL_354:
            LODWORD(v181) = 0;
            goto LABEL_468;
          }
          v296 = 0;
          v297 = 0;
          v181 = 0;
          if (v177 <= v176)
            v177 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v177 == v176)
            {
              LODWORD(v181) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v298 = v176 + 1;
              v299 = *(_BYTE *)(v178 + v176);
              *((_QWORD *)this + 1) = v298;
              v181 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                v176 = v298;
                v14 = v297++ > 8;
                if (v14)
                  goto LABEL_354;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v181) = 0;
            }
            break;
          }
LABEL_468:
          *(_DWORD *)(a1 + 92) = v181;
          goto LABEL_489;
        case 0x1Eu:
          *(_QWORD *)(a1 + 164) |= 8uLL;
          v184 = *((_QWORD *)this + 1);
          v185 = *((_QWORD *)this + 2);
          v186 = *(_QWORD *)this;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            v187 = 0;
            v188 = 0;
            v189 = 0;
            do
            {
              v190 = v184 + 1;
              *((_QWORD *)this + 1) = v184 + 1;
              v191 = *(_BYTE *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0)
                goto LABEL_472;
              v187 += 7;
              v184 = v190;
              v14 = v188++ > 8;
            }
            while (!v14);
LABEL_361:
            v189 = 0;
            goto LABEL_472;
          }
          v300 = 0;
          v301 = 0;
          v189 = 0;
          if (v185 <= v184)
            v185 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v185 == v184)
            {
              v189 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v302 = v184 + 1;
              v303 = *(_BYTE *)(v186 + v184);
              *((_QWORD *)this + 1) = v302;
              v189 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                v184 = v302;
                v14 = v301++ > 8;
                if (v14)
                  goto LABEL_361;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v189 = 0;
            }
            break;
          }
LABEL_472:
          *(_QWORD *)(a1 + 32) = v189;
          goto LABEL_489;
        case 0x1Fu:
          *(_QWORD *)(a1 + 164) |= 4uLL;
          v192 = *((_QWORD *)this + 1);
          v193 = *((_QWORD *)this + 2);
          v194 = *(_QWORD *)this;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            v195 = 0;
            v196 = 0;
            v197 = 0;
            do
            {
              v198 = v192 + 1;
              *((_QWORD *)this + 1) = v192 + 1;
              v199 = *(_BYTE *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0)
                goto LABEL_476;
              v195 += 7;
              v192 = v198;
              v14 = v196++ > 8;
            }
            while (!v14);
LABEL_368:
            v197 = 0;
            goto LABEL_476;
          }
          v304 = 0;
          v305 = 0;
          v197 = 0;
          if (v193 <= v192)
            v193 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v193 == v192)
            {
              v197 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v306 = v192 + 1;
              v307 = *(_BYTE *)(v194 + v192);
              *((_QWORD *)this + 1) = v306;
              v197 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                v192 = v306;
                v14 = v305++ > 8;
                if (v14)
                  goto LABEL_368;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v197 = 0;
            }
            break;
          }
LABEL_476:
          *(_QWORD *)(a1 + 24) = v197;
          goto LABEL_489;
        case 0x20u:
          *(_QWORD *)(a1 + 164) |= 1uLL;
          v200 = *((_QWORD *)this + 1);
          v201 = *((_QWORD *)this + 2);
          v202 = *(_QWORD *)this;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            v203 = 0;
            v204 = 0;
            v205 = 0;
            do
            {
              v206 = v200 + 1;
              *((_QWORD *)this + 1) = v200 + 1;
              v207 = *(_BYTE *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0)
                goto LABEL_480;
              v203 += 7;
              v200 = v206;
              v14 = v204++ > 8;
            }
            while (!v14);
LABEL_375:
            v205 = 0;
            goto LABEL_480;
          }
          v308 = 0;
          v309 = 0;
          v205 = 0;
          if (v201 <= v200)
            v201 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v201 == v200)
            {
              v205 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v310 = v200 + 1;
              v311 = *(_BYTE *)(v202 + v200);
              *((_QWORD *)this + 1) = v310;
              v205 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                v200 = v310;
                v14 = v309++ > 8;
                if (v14)
                  goto LABEL_375;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v205 = 0;
            }
            break;
          }
LABEL_480:
          *(_QWORD *)(a1 + 8) = v205;
          goto LABEL_489;
        case 0x21u:
          *(_QWORD *)(a1 + 164) |= 2uLL;
          v208 = *((_QWORD *)this + 1);
          v209 = *((_QWORD *)this + 2);
          v210 = *(_QWORD *)this;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            v211 = 0;
            v212 = 0;
            v213 = 0;
            do
            {
              v214 = v208 + 1;
              *((_QWORD *)this + 1) = v208 + 1;
              v215 = *(_BYTE *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0)
                goto LABEL_484;
              v211 += 7;
              v208 = v214;
              v14 = v212++ > 8;
            }
            while (!v14);
LABEL_382:
            v213 = 0;
            goto LABEL_484;
          }
          v312 = 0;
          v313 = 0;
          v213 = 0;
          if (v209 <= v208)
            v209 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v209 == v208)
            {
              v213 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v314 = v208 + 1;
              v315 = *(_BYTE *)(v210 + v208);
              *((_QWORD *)this + 1) = v314;
              v213 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                v208 = v314;
                v14 = v313++ > 8;
                if (v14)
                  goto LABEL_382;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v213 = 0;
            }
            break;
          }
LABEL_484:
          *(_QWORD *)(a1 + 16) = v213;
          goto LABEL_489;
        case 0x22u:
          *(_QWORD *)(a1 + 164) |= 0x800uLL;
          v216 = *((_QWORD *)this + 1);
          v217 = *((_QWORD *)this + 2);
          v218 = *(_QWORD *)this;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            v219 = 0;
            v220 = 0;
            v221 = 0;
            do
            {
              v222 = v216 + 1;
              *((_QWORD *)this + 1) = v216 + 1;
              v223 = *(_BYTE *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0)
                goto LABEL_488;
              v219 += 7;
              v216 = v222;
              v14 = v220++ > 8;
            }
            while (!v14);
LABEL_389:
            LODWORD(v221) = 0;
            goto LABEL_488;
          }
          v316 = 0;
          v317 = 0;
          v221 = 0;
          if (v217 <= v216)
            v217 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_489;
      }
      while (1)
      {
        if (v217 == v216)
        {
          LODWORD(v221) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_488;
        }
        v318 = v216 + 1;
        v319 = *(_BYTE *)(v218 + v216);
        *((_QWORD *)this + 1) = v318;
        v221 |= (unint64_t)(v319 & 0x7F) << v316;
        if ((v319 & 0x80) == 0)
          break;
        v316 += 7;
        v216 = v318;
        v14 = v317++ > 8;
        if (v14)
          goto LABEL_389;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v221) = 0;
LABEL_488:
      *(_DWORD *)(a1 + 72) = v221;
LABEL_489:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7CFCCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 164);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_34:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  if ((*(_QWORD *)(v3 + 164) & 0x800) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7D00A8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF349C8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7D00C0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D00E4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF349C8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B7D0134(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "proximityState");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D019C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7D0428(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7D0480(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34A00;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B7D04A0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D04C4(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  *(_QWORD *)result = &off_24DF34A00;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 48) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 40);
    v3 |= 0x80u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 40) = v5;
    v2 = *(_WORD *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 48) = v3;
    *(_DWORD *)(result + 28) = v6;
    v2 = *(_WORD *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 16) = v7;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 20) = v8;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v9;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v10;
  v2 = *(_WORD *)(a2 + 48);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 24);
    *(_WORD *)(result + 48) = v3 | 8;
    *(_DWORD *)(result + 24) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 48) = v3;
  *(_DWORD *)(result + 44) = v11;
  if ((*(_WORD *)(a2 + 48) & 8) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B7D05E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentMeanAngleY", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaMeanAngleY", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "doubleTapCounter");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doubleTapStatus");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "entropyConcha", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "entropyTragus", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "tapInterval", *(float *)(a1 + 44));
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "location");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D0734(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_86;
            case 2u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_90:
                    v2 = v41 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_90;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_91;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v25;
              goto LABEL_102;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_95:
                    v2 = v45 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_95;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_96;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_102;
            case 4u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 5u:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_85:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_86:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_102;
            case 9u:
              *(_WORD *)(a1 + 48) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_100:
                    v2 = v49 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_100;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_101;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 24) = v37;
LABEL_102:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_102;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7D0CCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_WORD *)(v3 + 48) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7D0DEC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34A38;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B7D0E04(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D0E28(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char v14;

  *(_QWORD *)result = &off_24DF34A38;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_WORD *)(result + 60) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 60) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x10u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 28) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 44) = v12;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 56);
    *(_WORD *)(result + 60) = v3 | 0x400;
    *(_BYTE *)(result + 56) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 24) = v13;
  if ((*(_WORD *)(a2 + 60) & 0x400) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B7D0F78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "averageFilteredPressure", *(float *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaStepCount");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "elevationAscended");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "elevationDescended");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isWorkoutElevationFusion");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pressureAmplitude", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pressureFailureState");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pressureQuality");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 60) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "source");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D1108(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_78;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_78;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_127;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_131;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_132;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_158;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_136:
                    v2 = v65 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_136;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_137;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_158;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_141:
                    v2 = v69 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_141;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_142;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_158;
            case 6u:
              *(_WORD *)(a1 + 60) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_146:
                    v2 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_146;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_147;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_158;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_78;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_151:
                    v2 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_151;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_152;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_158;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  v81 = v51++;
                  v82 = *(_BYTE *)(v52 + v81);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_156:
                    v2 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_156;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_157;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_158:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_126:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_127:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_78:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_158;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v58 = v57 != 0;
              }
              *(_BYTE *)(a1 + 56) = v58;
              goto LABEL_158;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_158;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7D1938(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 60) & 0x400) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B7D1A90(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34A70;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_21B7D1AA8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D1ACC(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;

  *(_QWORD *)result = &off_24DF34A70;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v3 = 8;
    *(_DWORD *)(result + 92) = 8;
    *(_QWORD *)(result + 32) = v4;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 92) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_DWORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(result + 92) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x1000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
  }
  else if ((v2 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 76) = v7;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  v8 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 48) = v8;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  v9 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v9;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  v10 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 60) = v10;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  v11 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 56) = v11;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  v12 = *(_BYTE *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 88) = v12;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  v13 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 64) = v13;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_30:
  v14 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 40) = v14;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_32;
  }
LABEL_31:
  v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 52) = v15;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  v16 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 80) = v16;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  v17 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v17;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  v18 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 68) = v18;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      return result;
LABEL_36:
    v20 = *(_BYTE *)(a2 + 89);
    *(_DWORD *)(result + 92) = v3 | 0x10000;
    *(_BYTE *)(result + 89) = v20;
    return result;
  }
LABEL_35:
  v19 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 72) = v19;
  if ((*(_DWORD *)(a2 + 92) & 0x10000) != 0)
    goto LABEL_36;
  return result;
}

uint64_t sub_21B7D1CC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "altitudeDelta", *(float *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeDeltaStreaming", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "deltaTime", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "didEstimate");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "downhillStartTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "elevationAscended");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "elevationDescended");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "heightRef", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isWorkoutElevationFusion");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "predictionError", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "predictionIntercept", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "source");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "timeRef", *(double *)(a1 + 40));
    if ((*(_DWORD *)(a1 + 92) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timeDeltaStreaming", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 84));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D1F14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_81;
            case 2u:
              *(_DWORD *)(a1 + 92) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_128:
                    v2 = v51 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_128;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_129;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_129:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_145;
            case 3u:
              *(_DWORD *)(a1 + 92) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_134;
                  }
                  v55 = v27++;
                  v56 = *(_BYTE *)(v28 + v55);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_133:
                    v2 = v55 + 1;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_133;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_134;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_134:
              *(_QWORD *)(a1 + 24) = v31;
              goto LABEL_145;
            case 4u:
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_139;
                  }
                  v59 = v33++;
                  v60 = *(_BYTE *)(v34 + v59);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_138:
                    v2 = v59 + 1;
                    goto LABEL_139;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_138;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_139;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_139:
              *(_DWORD *)(a1 + 76) = v37;
              goto LABEL_145;
            case 5u:
              *(_DWORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 6u:
              *(_DWORD *)(a1 + 92) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 7u:
              *(_DWORD *)(a1 + 92) |= 0x100u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_144;
                  }
                  v63 = v39++;
                  v64 = *(_BYTE *)(v40 + v63);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_143:
                    v2 = v63 + 1;
                    goto LABEL_144;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_143;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_144;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_144:
              *(_DWORD *)(a1 + 60) = v43;
LABEL_145:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_DWORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 9u:
              *(_DWORD *)(a1 + 92) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 88) = v46;
              goto LABEL_145;
            case 0xAu:
              *(_DWORD *)(a1 + 92) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0xBu:
              *(_DWORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_81;
            case 0xCu:
              *(_DWORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0xDu:
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0xEu:
              *(_DWORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_81:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_124;
            case 0xFu:
              *(_DWORD *)(a1 + 92) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_87;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_123;
            case 0x10u:
              *(_DWORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_123:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_124:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_87:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_145;
            case 0x11u:
              *(_DWORD *)(a1 + 92) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 89) = v48;
              goto LABEL_145;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_145;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7D2738(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B7D2938(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34AA8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B7D294C(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24DF34AA8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_21B7D298C(PB::Base *a1)
{
  sub_21B7D294C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D29B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  int v12;
  char v13;

  *(_QWORD *)a1 = &off_24DF34AA8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 16) = v5;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v6 = operator new();
    v7 = v6;
    v8 = *(__int128 **)(a2 + 8);
    if (*((char *)v8 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v6, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v6 = v9;
    }
    v10 = *v4;
    *v4 = v7;
    if (v10)
      sub_21B796830((uint64_t)v4, v10);
  }
  v11 = *(_BYTE *)(a2 + 32);
  if ((v11 & 2) != 0)
  {
    v12 = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) |= 2u;
    *(_DWORD *)(a1 + 24) = v12;
    v11 = *(_BYTE *)(a2 + 32);
  }
  if ((v11 & 4) != 0)
  {
    v13 = *(_BYTE *)(a2 + 28);
    *(_BYTE *)(a1 + 32) |= 4u;
    *(_BYTE *)(a1 + 28) = v13;
  }
  return a1;
}

uint64_t sub_21B7D2AB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    PB::TextFormatter::format(this, "active");
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "threshold", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D2B4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    while (2)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v14 = *(_BYTE *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0)
            break;
          v10 += 7;
          v2 = v13;
          if (v11++ > 8)
            goto LABEL_20;
        }
LABEL_21:
        if ((v12 & 7) != 4)
        {
          switch((v12 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v21 = *((_QWORD *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
                goto LABEL_34;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
              v22 = *((_QWORD *)this + 1) + 8;
              goto LABEL_40;
            case 2u:
              v24 = (_QWORD *)operator new();
              v24[1] = 0;
              v24[2] = 0;
              *v24 = 0;
              v32 = 0;
              v25 = *v8;
              *v8 = (uint64_t)v24;
              if (v25)
              {
                sub_21B796830((uint64_t)v8, v25);
                v26 = v32;
                v32 = 0;
                if (v26)
                  sub_21B796830((uint64_t)&v32, v26);
              }
              PB::Reader::read();
              goto LABEL_41;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v27 = *((_QWORD *)this + 1);
              if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v27);
                v22 = *((_QWORD *)this + 1) + 4;
LABEL_40:
                *((_QWORD *)this + 1) = v22;
              }
              else
              {
LABEL_34:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_41;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v28 = *((_QWORD *)this + 1);
              if (v28 >= *((_QWORD *)this + 2))
              {
                v31 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = v28 + 1;
                v30 = *(unsigned __int8 *)(*(_QWORD *)this + v28);
                *((_QWORD *)this + 1) = v29;
                v31 = v30 != 0;
              }
              *(_BYTE *)(a1 + 28) = v31;
              goto LABEL_41;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
LABEL_41:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7D2DF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  if ((*(_BYTE *)(result + 32) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 16));
  if (*(_QWORD *)(v3 + 8))
    result = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 24));
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 4) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B7D2E74(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34AE0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B7D2E8C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D2EB0(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_24DF34AE0;
  *(_DWORD *)(result + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B7D2EDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D2F28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7D315C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7D317C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34B18;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_21B7D3194(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D31B8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  char v20;
  int v21;

  *(_QWORD *)result = &off_24DF34B18;
  *(_DWORD *)(result + 96) = 0;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 40);
    v3 = 16;
    *(_DWORD *)(result + 96) = 16;
    *(_QWORD *)(result + 40) = v4;
    v2 = *(_DWORD *)(a2 + 96);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 96) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_DWORD *)(a2 + 96);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(result + 96) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_DWORD *)(a2 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 96) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 76) = v9;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 80) = v10;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x4000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 84) = v11;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 64) = v12;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 68) = v13;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 72) = v14;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 52) = v15;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x80) == 0)
  {
LABEL_17:
    if ((v2 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 56) = v16;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x100) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 60) = v17;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 96) = v3;
  *(_DWORD *)(result + 48) = v18;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *(_BYTE *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 92) = v19;
  v2 = *(_DWORD *)(a2 + 96);
  if ((v2 & 0x20000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return result;
LABEL_38:
    v21 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)(result + 96) = v3 | 0x8000;
    *(_DWORD *)(result + 88) = v21;
    return result;
  }
LABEL_37:
  v20 = *(_BYTE *)(a2 + 93);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 96) = v3;
  *(_BYTE *)(result + 93) = v20;
  if ((*(_DWORD *)(a2 + 96) & 0x8000) != 0)
    goto LABEL_38;
  return result;
}

uint64_t sub_21B7D33CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "doingBiasEstimation");
    v5 = *(_DWORD *)(a1 + 96);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "doingYawCorrection");
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel");
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 84));
    if ((*(_DWORD *)(a1 + 96) & 0x8000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x4000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x8000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "variant");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D363C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 96) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 96) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 96) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 96) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 96) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_105;
            case 6u:
              *(_DWORD *)(a1 + 96) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 7u:
              *(_DWORD *)(a1 + 96) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 8u:
              *(_DWORD *)(a1 + 96) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_DWORD *)(a1 + 96) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_DWORD *)(a1 + 96) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xBu:
              *(_DWORD *)(a1 + 96) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xCu:
              *(_DWORD *)(a1 + 96) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xDu:
              *(_DWORD *)(a1 + 96) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xEu:
              *(_DWORD *)(a1 + 96) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_105:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_116;
            case 0xFu:
              *(_DWORD *)(a1 + 96) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_109:
                    v2 = v39 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_109;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_110;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_116;
            case 0x10u:
              *(_DWORD *)(a1 + 96) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 92) = v28;
              goto LABEL_116;
            case 0x11u:
              *(_DWORD *)(a1 + 96) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 93) = v30;
              goto LABEL_116;
            case 0x12u:
              *(_DWORD *)(a1 + 96) |= 0x8000u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_114:
                    v2 = v43 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_114;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_115;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 88) = v35;
LABEL_116:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_116;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7D3D30(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_36:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 96) & 0x8000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_21B7D3F50(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D3F74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "name");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "value", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D3FDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7D4268(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12));
  return result;
}

uint64_t sub_21B7D42C0(uint64_t result)
{
  *(_QWORD *)result = off_24DF34B88;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B7D42D8(void **a1)
{
  void **v2;

  *a1 = off_24DF34B88;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B7D4320(void **a1)
{
  void **v3;

  *a1 = off_24DF34B88;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

uint64_t sub_21B7D437C(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_24DF34B88;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v5 = *(uint64_t **)(a2 + 8);
  v6 = *(uint64_t **)(a2 + 16);
  while (v5 != v6)
    sub_21B7D4428(v4, *v5++);
  v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
    v7 = *(_BYTE *)(a2 + 48);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 32) = v9;
  }
  return a1;
}

uint64_t sub_21B7D4428(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  _QWORD *v29;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24DF34B50;
  *(_DWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  v6 = *(_BYTE *)(a2 + 16);
  if ((v6 & 1) != 0)
  {
    v8 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(v4 + 16) = 1;
    *(_DWORD *)(v4 + 8) = v8;
    v7 = 3;
    if ((v6 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 2;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    v9 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(v4 + 16) = v7;
    *(_DWORD *)(v4 + 12) = v9;
  }
LABEL_6:
  result = (uint64_t)(a1 + 2);
  v11 = (unint64_t)a1[2];
  v12 = a1[1];
  if ((unint64_t)v12 >= v11)
  {
    v14 = v12 - *a1;
    if ((unint64_t)(v14 + 1) >> 61)
      sub_21B796A0C();
    v15 = v11 - (_QWORD)*a1;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v29 = a1 + 2;
    if (v17)
      v18 = (char *)sub_21B796A20(result, v17);
    else
      v18 = 0;
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    v28 = v20;
    *v19 = v5;
    v13 = v19 + 1;
    v27.i64[1] = (uint64_t)(v19 + 1);
    v22 = *a1;
    v21 = a1[1];
    if (v21 == *a1)
    {
      v24 = vdupq_n_s64((unint64_t)v21);
    }
    else
    {
      do
      {
        v23 = *--v21;
        *v21 = 0;
        *--v19 = v23;
      }
      while (v21 != v22);
      v24 = *(int64x2_t *)a1;
      v13 = (uint64_t *)v27.i64[1];
      v20 = v28;
    }
    *a1 = v19;
    a1[1] = v13;
    v27 = v24;
    v25 = (char *)a1[2];
    a1[2] = (uint64_t *)v20;
    v28 = v25;
    v26 = v24.i64[0];
    result = sub_21B796D0C((uint64_t)&v26);
  }
  else
  {
    *v12 = v5;
    v13 = v12 + 1;
  }
  a1[1] = v13;
  return result;
}

void sub_21B7D45A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7D45C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "blendShapeCoefficients");
  }
  v8 = *(_BYTE *)(a1 + 48);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 48);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D466C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_33;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v24);
LABEL_37:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_38;
      }
      if ((_DWORD)v21 == 1)
      {
        sub_21B7D48AC(v8);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
LABEL_38:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v23 = *((_QWORD *)this + 1);
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v23);
    goto LABEL_37;
  }
  return v4 == 0;
}

uint64_t sub_21B7D48AC(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF34B50;
  *(_DWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B7D49E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7D4A04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 8);
  v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_21B7D4A88(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34BC0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7D4AA0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D4AC4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF34BC0;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B7D4B14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isCovered");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D4B7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7D4D60(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_21B7D4DB8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF34BF8;
  *(_DWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B7D4DDC(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF34BF8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B7D4E2C(PB::Base *a1)
{
  sub_21B7D4DDC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D4E50(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  int v7;
  int v9;
  int v10;
  char v11;
  char v12;
  int v13;
  int v14;

  *(_QWORD *)a1 = &off_24DF34BF8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 88) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 4) != 0)
  {
    v9 = *(_DWORD *)(a2 + 68);
    *(_BYTE *)(a1 + 88) |= 4u;
    *(_DWORD *)(a1 + 68) = v9;
    v6 = *(_BYTE *)(a2 + 88);
    if ((v6 & 8) == 0)
    {
LABEL_7:
      if ((v6 & 0x40) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    goto LABEL_7;
  }
  v10 = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) |= 8u;
  *(_DWORD *)(a1 + 72) = v10;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  v11 = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 88) |= 0x40u;
  *(_BYTE *)(a1 + 84) = v11;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  v12 = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 88) |= 0x80u;
  *(_BYTE *)(a1 + 85) = v12;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 0x10) == 0)
      goto LABEL_11;
LABEL_19:
    v14 = *(_DWORD *)(a2 + 76);
    *(_BYTE *)(a1 + 88) |= 0x10u;
    *(_DWORD *)(a1 + 76) = v14;
    if ((*(_BYTE *)(a2 + 88) & 0x20) == 0)
      return a1;
    goto LABEL_12;
  }
LABEL_18:
  v13 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) |= 2u;
  *(_DWORD *)(a1 + 64) = v13;
  v6 = *(_BYTE *)(a2 + 88);
  if ((v6 & 0x10) != 0)
    goto LABEL_19;
LABEL_11:
  if ((v6 & 0x20) != 0)
  {
LABEL_12:
    v7 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) |= 0x20u;
    *(_DWORD *)(a1 + 80) = v7;
  }
  return a1;
}

uint64_t sub_21B7D4FD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 32);
  v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  v8 = *(float **)(a1 + 8);
  v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "accelFiltered", v10);
  }
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(this, "faceDownState");
    v11 = *(_BYTE *)(a1 + 88);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a1 + 88) & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 68));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "gravityAngleVar", *(float *)(a1 + 72));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 0x40) == 0)
  {
LABEL_9:
    if ((v11 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isFaceDown");
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 0x10) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 76));
  v11 = *(_BYTE *)(a1 + 88);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x80) == 0)
      goto LABEL_12;
LABEL_21:
    PB::TextFormatter::format(this, "shouldSuppress");
    if ((*(_BYTE *)(a1 + 88) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pocketProbabilityVar", *(float *)(a1 + 80));
  v11 = *(_BYTE *)(a1 + 88);
  if (v11 < 0)
    goto LABEL_21;
LABEL_12:
  if ((v11 & 1) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7D5168(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  _DWORD *v77;
  unint64_t v78;
  char *v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unint64_t v100;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 88) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_155;
        case 2u:
          if (v24 != 2)
          {
            v76 = *(char **)(a1 + 40);
            v75 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v76 >= v75)
            {
              v84 = (char *)*v10;
              v85 = (v76 - (_BYTE *)*v10) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_166:
                sub_21B796A0C();
              v87 = v75 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)sub_21B796CD8(v11, v88);
                v84 = *(char **)(a1 + 32);
                v76 = *(char **)(a1 + 40);
              }
              else
              {
                v89 = 0;
              }
              v96 = &v89[4 * v85];
              *(_DWORD *)v96 = 0;
              v77 = v96 + 4;
              while (v76 != v84)
              {
                v97 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v96;
              *(_QWORD *)(a1 + 40) = v77;
              *(_QWORD *)(a1 + 48) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v77 = v76 + 4;
            }
            *(_QWORD *)(a1 + 40) = v77;
            goto LABEL_150;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 40);
            v29 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_166;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v11, v36);
                v32 = *(char **)(a1 + 32);
                v30 = *(char **)(a1 + 40);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v38;
              *(_QWORD *)(a1 + 40) = v31;
              *(_QWORD *)(a1 + 48) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 40) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_114;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_115;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v41 = *((_QWORD *)this + 1);
            v42 = *((_QWORD *)this + 2);
            while (v41 < v42 && !*((_BYTE *)this + 24))
            {
              v44 = *(char **)(a1 + 16);
              v43 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v44 >= v43)
              {
                v46 = (char *)*v8;
                v47 = (v44 - (_BYTE *)*v8) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_167;
                v49 = v43 - (_QWORD)v46;
                if (v49 >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_21B796CD8(v9, v50);
                  v46 = *(char **)(a1 + 8);
                  v44 = *(char **)(a1 + 16);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = 0;
                v45 = v52 + 4;
                while (v44 != v46)
                {
                  v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v52;
                *(_QWORD *)(a1 + 16) = v45;
                *(_QWORD *)(a1 + 24) = &v51[4 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_DWORD *)v44 = 0;
                v45 = v44 + 4;
              }
              *(_QWORD *)(a1 + 16) = v45;
              v54 = *((_QWORD *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              {
LABEL_114:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
              v42 = *((_QWORD *)this + 2);
              v41 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v41;
            }
LABEL_115:
            PB::Reader::recallMark();
          }
          else
          {
            v79 = *(char **)(a1 + 16);
            v78 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v79 >= v78)
            {
              v90 = (char *)*v8;
              v91 = (v79 - (_BYTE *)*v8) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_167:
                sub_21B796A0C();
              v93 = v78 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_21B796CD8(v9, v94);
                v90 = *(char **)(a1 + 8);
                v79 = *(char **)(a1 + 16);
              }
              else
              {
                v95 = 0;
              }
              v98 = &v95[4 * v91];
              *(_DWORD *)v98 = 0;
              v77 = v98 + 4;
              while (v79 != v90)
              {
                v99 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v98;
              *(_QWORD *)(a1 + 16) = v77;
              *(_QWORD *)(a1 + 24) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v79 = 0;
              v77 = v79 + 4;
            }
            *(_QWORD *)(a1 + 16) = v77;
LABEL_150:
            v100 = *((_QWORD *)this + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((_QWORD *)this + 2))
            {
              *(v77 - 1) = *(_DWORD *)(*(_QWORD *)this + v100);
LABEL_154:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_155:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_152:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_156:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 88) |= 4u;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_154;
        case 5u:
          *(_BYTE *)(a1 + 88) |= 8u;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_154;
        case 6u:
          *(_BYTE *)(a1 + 88) |= 0x40u;
          v57 = *((_QWORD *)this + 1);
          if (v57 >= *((_QWORD *)this + 2))
          {
            v60 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v58 = v57 + 1;
            v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
            *((_QWORD *)this + 1) = v58;
            v60 = v59 != 0;
          }
          *(_BYTE *)(a1 + 84) = v60;
          goto LABEL_156;
        case 7u:
          *(_BYTE *)(a1 + 88) |= 0x80u;
          v61 = *((_QWORD *)this + 1);
          if (v61 >= *((_QWORD *)this + 2))
          {
            v64 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
            *((_QWORD *)this + 1) = v62;
            v64 = v63 != 0;
          }
          *(_BYTE *)(a1 + 85) = v64;
          goto LABEL_156;
        case 8u:
          *(_BYTE *)(a1 + 88) |= 2u;
          v65 = *((_QWORD *)this + 1);
          v66 = *((_QWORD *)this + 2);
          v67 = *(_QWORD *)this;
          if (v65 <= 0xFFFFFFFFFFFFFFF5 && v65 + 10 <= v66)
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            do
            {
              v71 = v65 + 1;
              *((_QWORD *)this + 1) = v65 + 1;
              v72 = *(_BYTE *)(v67 + v65);
              v70 |= (unint64_t)(v72 & 0x7F) << v68;
              if ((v72 & 0x80) == 0)
                goto LABEL_135;
              v68 += 7;
              v65 = v71;
              v18 = v69++ > 8;
            }
            while (!v18);
LABEL_113:
            LODWORD(v70) = 0;
            goto LABEL_135;
          }
          v80 = 0;
          v81 = 0;
          v70 = 0;
          if (v66 <= v65)
            v66 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v66 == v65)
            {
              LODWORD(v70) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v82 = v65 + 1;
              v83 = *(_BYTE *)(v67 + v65);
              *((_QWORD *)this + 1) = v82;
              v70 |= (unint64_t)(v83 & 0x7F) << v80;
              if (v83 < 0)
              {
                v80 += 7;
                v65 = v82;
                v18 = v81++ > 8;
                if (v18)
                  goto LABEL_113;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v70) = 0;
            }
            break;
          }
LABEL_135:
          *(_DWORD *)(a1 + 64) = v70;
          goto LABEL_156;
        case 9u:
          *(_BYTE *)(a1 + 88) |= 0x10u;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_154;
        case 0xAu:
          *(_BYTE *)(a1 + 88) |= 0x20u;
          v74 = *((_QWORD *)this + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)this + 2))
            goto LABEL_152;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v74);
          goto LABEL_154;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7D5944(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 88) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = *(float **)(v3 + 32);
  v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 68));
    v10 = *(_BYTE *)(v3 + 88);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(v3 + 88) & 8) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x40) == 0)
  {
LABEL_12:
    if ((v10 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x80) == 0)
  {
LABEL_13:
    if ((v10 & 2) == 0)
      goto LABEL_14;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 2) == 0)
  {
LABEL_14:
    if ((v10 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v10 = *(_BYTE *)(v3 + 88);
  if ((v10 & 0x10) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 80));
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  if ((*(_BYTE *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 80));
  return result;
}

uint64_t sub_21B7D5A90(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34C30;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_21B7D5AA8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7D5ACC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF34C30;
  *(_DWORD *)(a1 + 136) = 0;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_DWORD *)(a1 + 136) = 2;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x2000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 116);
    v3 |= 0x2000000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(_DWORD *)(a1 + 116) = v5;
    v2 = *(_DWORD *)(a2 + 136);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 80);
    v3 |= 0x10000u;
    *(_DWORD *)(a1 + 136) = v3;
    *(_DWORD *)(a1 + 80) = v6;
    v2 = *(_DWORD *)(a2 + 136);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_38;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  v7 = *(_DWORD *)(a2 + 84);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 84) = v7;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40) == 0)
  {
LABEL_21:
    if ((v2 & 1) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 40) = v8;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 1) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  v9 = *(_BYTE *)(a2 + 133);
  v3 |= 0x40000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 133) = v9;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  v10 = *(_BYTE *)(a2 + 132);
  v3 |= 0x20000000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_BYTE *)(a1 + 132) = v10;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 28) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_59;
  }
LABEL_58:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x2000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x400000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 136);
  if ((v2 & 0x800000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      return *(float *)&v4;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 136) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  if ((*(_DWORD *)(a2 + 136) & 0x1000000) == 0)
    return *(float *)&v4;
LABEL_64:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 136) = v3 | 0x1000000;
  *(_DWORD *)(a1 + 112) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7D5E4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "aperture", *(float *)(a1 + 24));
    v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "ev", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "exposureDuration", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "failureCode");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gaze_x", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gaze_y", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "gaze_z", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "iso", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "left_eye_x", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "left_eye_y", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "left_eye_z", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "lidAngle", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "orientation");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "poseLibrary");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "qw", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "qx", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "qy", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "qz", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "right_eye_x", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "right_eye_y", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "right_eye_z", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "rollValue", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "sensorCovered");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "tooDark");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "type");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
LABEL_63:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 124));
    if ((*(_DWORD *)(a1 + 136) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_32;
  }
LABEL_62:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000000) != 0)
    goto LABEL_63;
LABEL_31:
  if ((v5 & 0x10000000) != 0)
LABEL_32:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 128));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D625C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x2000000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_175:
                    v2 = v51 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_175;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_176;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 116) = v25;
              goto LABEL_167;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_181;
                  }
                  v55 = v27++;
                  v56 = *(_BYTE *)(v28 + v55);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_180:
                    v2 = v55 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_180;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_181;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_181:
              *(_DWORD *)(a1 + 80) = v31;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 0x8000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x10000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x20000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  v59 = v33++;
                  v60 = *(_BYTE *)(v34 + v59);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_185:
                    v2 = v59 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_185;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_186;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_186:
              *(_DWORD *)(a1 + 84) = v37;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_191;
                  }
                  v63 = v39++;
                  v64 = *(_BYTE *)(v40 + v63);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_190:
                    v2 = v63 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_190;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_191;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 40) = v43;
LABEL_167:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x12u:
              *(_DWORD *)(a1 + 136) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_94:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_166;
            case 0x13u:
              *(_DWORD *)(a1 + 136) |= 0x40000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 133) = v46;
              goto LABEL_167;
            case 0x14u:
              *(_DWORD *)(a1 + 136) |= 0x20000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 132) = v48;
              goto LABEL_167;
            case 0x15u:
              *(_DWORD *)(a1 + 136) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x16u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x17u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x18u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x19u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Au:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Bu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Cu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Du:
              *(_DWORD *)(a1 + 136) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Eu:
              *(_DWORD *)(a1 + 136) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_131;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_165;
            case 0x1Fu:
              *(_DWORD *)(a1 + 136) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_165:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_166:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_131:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_167;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_167;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7D6DA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 136);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 112));
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  if ((*(_DWORD *)(v3 + 136) & 0x1000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 112));
  return result;
}

uint64_t sub_21B7D7130(uint64_t result)
{
  *(_QWORD *)result = &off_24DF34C68;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B7D7148(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF34C68;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7D718C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF34C68;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D71E4(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24DF34C68;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 32) & 2) == 0)
  {
    v4 = 1;
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 16) = v5;
  v4 = 3;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
LABEL_5:
    v6 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 8) = v6;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
  {
    v7 = operator new();
    v8 = sub_21B7D5ACC(v7, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    if (v9)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v9 + 8))(v9, v8);
  }
  return a1;
}

uint64_t sub_21B7D72A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  v6 = *(_QWORD *)(a1 + 24);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7D732C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v22 = (_DWORD *)operator new();
        *(_QWORD *)v22 = &off_24DF34C30;
        v22[34] = 0;
        v23 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v22;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v22 = *(_DWORD **)(a1 + 24);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((_DWORD)v20 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
            goto LABEL_34;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v24);
        }
        else
        {
          if ((_DWORD)v20 != 1)
          {
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            goto LABEL_39;
          }
          *(_BYTE *)(a1 + 32) |= 2u;
          v21 = *((_QWORD *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
          {
LABEL_34:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_39;
          }
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
        }
        *((_QWORD *)this + 1) += 8;
      }
LABEL_39:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B7D75A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 8));
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

uint64_t sub_21B7D760C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD handler[5];

  *(_QWORD *)a1 = 0;
  v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *(_QWORD *)(a1 + 8) = v2;
  v3 = dispatch_source_create(MEMORY[0x24BDACA18], 0, 0, v2);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 300;
  *(_DWORD *)(a1 + 40) = -1;
  v4 = MEMORY[0x24BDAC760];
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  handler[0] = v4;
  handler[1] = 0x40000000;
  handler[2] = sub_21B7D76F4;
  handler[3] = &unk_24DF357E8;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  deflateInit_((z_streamp)(a1 + 80), -1, "1.2.12", 112);
  return a1;
}

void sub_21B7D76F4(uint64_t a1)
{
  sub_21B7D76FC(*(_QWORD **)(a1 + 32));
}

void sub_21B7D76FC(_QWORD *a1)
{
  void **v1;
  z_stream *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD destructor[5];

  v1 = (void **)(a1 + 7);
  if (a1[7])
  {
    v3 = (z_stream *)(a1 + 10);
    while (1)
    {
      v4 = deflate(v3, 4);
      if (v4)
        break;
      sub_21B7D7F8C((char *)a1);
    }
    if (v4 == 1)
    {
      v5 = a1[15];
      v6 = v5 + 28;
      v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)(a1[7] + 12) = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *((_BYTE *)*v1 + v6++) = 0;
        while (v7 != v6);
      }
      v8 = (const void *)a1[7];
      if (*a1)
      {
        (*(void (**)(_QWORD, const void *, size_t))(*(_QWORD *)*a1 + 24))(*a1, v8, v7);
        free(*v1);
      }
      else
      {
        v9 = a1[1];
        destructor[0] = MEMORY[0x24BDAC760];
        destructor[1] = 0x40000000;
        destructor[2] = sub_21B7D8000;
        destructor[3] = &unk_24DF358D0;
        destructor[4] = v8;
        v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write((dispatch_io_t)a1[3], a1[6], v10, (dispatch_queue_t)a1[1], &unk_24DF35910);
        dispatch_release(v10);
      }
      a1[6] += v7;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer((dispatch_source_t)a1[2], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * a1[4]) >> 1);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "zstream status? Msl %d\n", v4);
    }
  }
}

void sub_21B7D7898(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 8);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_21B7D78F0;
  v3[3] = &unk_24DF35808;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_21B7D78F0(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1)
    sub_21B899474();
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_21B7D791C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
    dispatch_release(v3);
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 40);
    if ((v5 & 0x80000000) == 0)
      close(v5);
  }
  free(*(void **)(a1 + 56));
  deflateEnd((z_streamp)(a1 + 80));
  return a1;
}

uint64_t sub_21B7D7988(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[7];
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v3 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = sub_21B7D7A20;
  v6[3] = &unk_24DF35850;
  v6[5] = a1;
  v6[6] = a2;
  v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

dispatch_io_t sub_21B7D7A20(uint64_t a1)
{
  uint64_t v2;
  int v3;
  off_t v4;
  off_t v5;
  unint64_t v6;
  FILE *v7;
  const char *v8;
  size_t v9;
  dispatch_io_t result;
  dispatch_fd_t v11;
  NSObject *v12;
  FILE *v13;
  const char *v14;
  size_t v15;
  _QWORD cleanup_handler[4];
  dispatch_fd_t v17;
  uint64_t __buf;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = "Cannot open Msl file\n";
    v9 = 21;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  v4 = lseek(v3, 0, 2);
  if (v4 < 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = "Cannot seek to end of Msl file\n";
    v9 = 31;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  v5 = v4;
  if (lseek(*(_DWORD *)(v2 + 40), 0, 0) < 0)
  {
    v7 = (FILE *)*MEMORY[0x24BDAC8D8];
    v8 = "Cannot seek to start of Msl file\n";
    v9 = 33;
    return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
  }
  if (v5)
  {
    __buf = 0;
    if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) != 8)
    {
      v13 = (FILE *)*MEMORY[0x24BDAC8D8];
      v14 = "Short signature in Msl file\n";
      v15 = 28;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }
    if (__buf != 0xE020C5BE006C536DLL)
    {
      v13 = (FILE *)*MEMORY[0x24BDAC8D8];
      v14 = "Bad signature in Msl file\n";
      v15 = 26;
      return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
    }
    v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v6 = 8;
    pwrite(*(_DWORD *)(v2 + 40), &unk_21B89D5B0, 8uLL, 0);
  }
  *(_QWORD *)(v2 + 48) = v6;
  v11 = *(_DWORD *)(v2 + 40);
  v12 = *(NSObject **)(v2 + 8);
  cleanup_handler[0] = MEMORY[0x24BDAC760];
  cleanup_handler[1] = 0x40000000;
  cleanup_handler[2] = sub_21B7D7C28;
  cleanup_handler[3] = &unk_24DF35828;
  v17 = v11;
  result = dispatch_io_create(1uLL, v11, v12, cleanup_handler);
  *(_QWORD *)(v2 + 24) = result;
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return result;
  }
  v13 = (FILE *)*MEMORY[0x24BDAC8D8];
  v14 = "Cannot create dispatch_io for Msl file\n";
  v15 = 39;
  return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
}

uint64_t sub_21B7D7C28(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_21B7D7C30(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 8);
  v3[0] = MEMORY[0x24BDAC760];
  v3[1] = 0x40000000;
  v3[2] = sub_21B7D7C88;
  v3[3] = &unk_24DF35870;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_21B7D7C88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), &v5);
  v3 = *(_QWORD *)(v2 + 56);
  if (!v3)
  {
    sub_21B7D7D4C(v2);
    v3 = *(_QWORD *)(v2 + 56);
  }
  ++*(_DWORD *)(v3 + 16);
  v4 = v5 - v6;
  sub_21B7D7E1C((char *)v2, (uint64_t)&v4, 4);
  sub_21B7D7E1C((char *)v2, v6, v5 - v6);
  if (!*(_QWORD *)(v2 + 72))
    sub_21B7D76FC((_QWORD *)v2);
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_21B7D7D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_21B7D7D4C(uint64_t a1)
{
  uint64_t v2;
  int tv_sec;
  unint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  timeval v7;

  *(_QWORD *)(a1 + 56) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *(_OWORD *)(a1 + 64) = xmmword_21B89D5A0;
  gettimeofday(&v7, 0);
  v2 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)v2 = 0x5979AAB3D5E07959;
  *(_QWORD *)(v2 + 8) = 1936614771;
  tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *(_QWORD *)(a1 + 104) = v2 + 28;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 64) - 28;
  v4 = 1000000000 * *(_QWORD *)(a1 + 32);
  v5 = *(NSObject **)(a1 + 16);
  v6 = dispatch_time(0, v4);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

char *sub_21B7D7E1C(char *result, uint64_t a2, int a3)
{
  z_stream *v3;
  char *v4;

  *((_QWORD *)result + 10) = a2;
  v3 = (z_stream *)(result + 80);
  *((_DWORD *)result + 22) = a3;
  if (a3)
  {
    v4 = result;
    do
    {
      result = (char *)deflate(v3, 0);
      if (!(_DWORD)result && !*((_DWORD *)v4 + 28))
        result = sub_21B7D7F8C(v4);
    }
    while (*((_DWORD *)v4 + 22));
  }
  return result;
}

void sub_21B7D7E70(uint64_t a1)
{
  dispatch_semaphore_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = dispatch_semaphore_create(0);
  v3 = *(NSObject **)(a1 + 8);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_21B7D7EDC;
  v4[3] = &unk_24DF358B0;
  v4[4] = a1;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void sub_21B7D7EDC(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[6];

  v2 = *(_QWORD **)(a1 + 32);
  sub_21B7D76FC(v2);
  v3 = v2[3];
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 0x40000000;
  v5[2] = sub_21B7D7F60;
  v5[3] = &unk_24DF35890;
  v4 = *(_QWORD *)(a1 + 40);
  v5[4] = v2;
  v5[5] = v4;
  dispatch_io_barrier(v3, v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

intptr_t sub_21B7D7F60(uint64_t a1)
{
  fsync(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 40));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

char *sub_21B7D7F8C(char *result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v3 = *((_QWORD *)result + 8);
  v2 = *((_QWORD *)result + 9);
  if (v2)
  {
    *((_DWORD *)result + 28) += v2;
    *((_QWORD *)result + 8) = v3 + v2;
    *((_QWORD *)result + 9) = 0;
  }
  else
  {
    *((_QWORD *)result + 8) = 2 * v3;
    result = (char *)malloc_type_realloc(*((void **)result + 7), 2 * v3, 0x59C50B5uLL);
    *((_QWORD *)v1 + 7) = result;
    v4 = *((_QWORD *)v1 + 15);
    *((_QWORD *)v1 + 13) = &result[v4 + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - v4;
  }
  return result;
}

void sub_21B7D8000(uint64_t a1)
{
  free(*(void **)(a1 + 32));
}

void sub_21B7D8008(int a1, char a2, int a3, int __errnum)
{
  FILE *v4;
  char *v5;

  if (__errnum || (a2 & 1) == 0)
  {
    v4 = (FILE *)*MEMORY[0x24BDAC8D8];
    v5 = strerror(__errnum);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t sub_21B7D805C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 48);
}

uint64_t sub_21B7D806C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  char v12;
  NSObject *v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = (_QWORD *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_21B796AF0((_BYTE *)(a1 + 16), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v6 = v7;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_21B796AF0((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v8;
  }
  v9 = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_21B796AF0(v9, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
  v12 = sub_21B832224((uint64_t)v6, (const char *)a2, a3, a4);
  *(_BYTE *)(a1 + 136) = v12;
  if ((v12 & 1) == 0)
  {
    if (qword_25518E2E0 != -1)
      dispatch_once(&qword_25518E2E0, &unk_24DF35950);
    v13 = qword_25518E2D8;
    if (os_log_type_enabled((os_log_t)qword_25518E2D8, OS_LOG_TYPE_ERROR))
      sub_21B89949C(a1, v6, v13);
  }
  return a1;
}

void sub_21B7D81B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B7D8218(uint64_t a1)
{
  sub_21B7D828C(a1);
  sub_21B7D9028((uint64_t *)(a1 + 128), 0);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_21B7D828C(uint64_t a1)
{
  uint64_t result;
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 128);
  result = *(_QWORD *)(a1 + 128);
  if (result)
  {
    sub_21B7D7E70(result);
    return sub_21B7D9028(v2, 0);
  }
  return result;
}

uint64_t sub_21B7D82CC(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  std::string *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char v16;
  std::string v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  time_t v21;
  std::chrono::system_clock::time_point __t;

  sub_21B7D828C(a1);
  v4 = operator new();
  sub_21B7D7894(v4);
  sub_21B7D9028((uint64_t *)(a1 + 128), v4);
  v5 = *(_QWORD *)(a1 + 96);
  if (v5 >= 1)
    sub_21B7D7898(*(_QWORD *)(a1 + 128), v5);
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v21 = std::chrono::system_clock::to_time_t(&__t);
  sub_21B7D8564((uint64_t)v18);
  v6 = v18[0];
  *(_DWORD *)((char *)&v18[1] + *(_QWORD *)(v18[0] - 24)) |= 4u;
  *(_QWORD *)((char *)&v18[2] + *(_QWORD *)(v6 - 24)) = 6;
  v7 = (_QWORD *)std::ostream::operator<<();
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)localtime(&v21);
  v17.__r_.__value_.__l.__size_ = (std::string::size_type)"_%Y-%m-%d_%H:%M:%S";
  v8 = sub_21B7D8650(v7, (uint64_t)&v17);
  sub_21B7D9178(v8, (uint64_t)".", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_21B7D87E4(a1, (const void **)(a1 + 16), (const void **)(a1 + 40), (uint64_t)&__p, a1 + 64, &v17);
  if (v16 < 0)
    operator delete(__p);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v17;
  else
    v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
  v10 = sub_21B7D7988(*(_QWORD *)(a1 + 128), (uint64_t)v9, *(_DWORD *)(a1 + 88));
  *(_BYTE *)(a1 + 136) = v10;
  if (v10)
  {
    *(double *)(a1 + 144) = a2;
    sub_21B7D8A14(a1, v11, v12, v13);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v18[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v18[1] = MEMORY[0x24BEDB848] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22076636C](&v20);
}

void sub_21B7D84FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  sub_21B7D8DC0((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7D8564(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_21B7D8628(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x22076636C](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_21B7D8650(_QWORD *a1, uint64_t a2)
{
  const std::ios_base *v4;
  const std::locale::facet *v5;
  std::ios_base::fmtflags v6;
  _BYTE v8[16];
  std::locale v9;

  MEMORY[0x220766264](v8, a1);
  if (v8[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    std::locale::use_facet(&v9, MEMORY[0x24BEDB598]);
    std::locale::~locale(&v9);
    v4 = (const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    if (v4[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v4);
      v5 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
      v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
      std::locale::~locale(&v9);
      v4[1].__fmtflags_ = v6;
    }
    strlen(*(const char **)(a2 + 8));
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put())
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 1);
  }
  MEMORY[0x220766270](v8);
  return a1;
}

void sub_21B7D8780(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x220766270](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x21B7D8760);
}

void sub_21B7D87D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_21B7D87E4(uint64_t a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string v27;
  std::string v28;
  std::string v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x24BDAC8D0];
  sub_21B7D9064(a3, 95, (uint64_t)&v27);
  v11 = *(char *)(a4 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a4;
  else
    v12 = *(const std::string::value_type **)a4;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a4 + 23);
  else
    v13 = *(_QWORD *)(a4 + 8);
  v14 = std::string::append(&v27, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v28, 46);
  v29 = v28;
  memset(&v28, 0, sizeof(v28));
  v16 = *(char *)(a5 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a5;
  else
    v17 = *(const std::string::value_type **)a5;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a5 + 23);
  else
    v18 = *(_QWORD *)(a5 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = v19->__r_.__value_.__r.__words[0];
  v30[0] = v19->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v22 = v30[0];
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v22;
  *(_QWORD *)(a1 + 119) = *(_QWORD *)((char *)v30 + 7);
  *(_BYTE *)(a1 + 127) = v21;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  sub_21B7D9064(a2, 47, (uint64_t)&v29);
  v23 = *(char *)(a1 + 127);
  if (v23 >= 0)
    v24 = (const std::string::value_type *)(a1 + 104);
  else
    v24 = *(const std::string::value_type **)(a1 + 104);
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a1 + 127);
  else
    v25 = *(_QWORD *)(a1 + 112);
  v26 = std::string::append(&v29, v24, v25);
  *a6 = *v26;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_21B7D89AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B7D8A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  NSObject *v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::locale *v27;
  std::locale v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t v32[4];
  uint8_t *v33;
  uint8_t buf[16];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  sub_21B8323D0(a1 + 16, a1 + 64, a3, a4, (uint64_t *)&v30);
  sub_21B7D954C(&v28, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0);
  v5 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v30) >> 3));
  v27 = &v28;
  *(_QWORD *)buf = &v27;
  if (v31 == v30)
    v6 = 0;
  else
    v6 = v5;
  sub_21B7E1B18(v30, v31, (uint64_t **)buf, v6, 1);
  if (qword_25518E2E0 != -1)
    dispatch_once(&qword_25518E2E0, &unk_24DF35950);
  v7 = qword_25518E2D8;
  if (os_log_type_enabled((os_log_t)qword_25518E2D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_21B72A000, v7, OS_LOG_TYPE_INFO, "Msl files on disk:", buf, 2u);
  }
  v8 = v30;
  v9 = v31;
  if (v30 == v31)
  {
    v13 = v30;
  }
  else
  {
    do
    {
      if (*(char *)(v8 + 23) < 0)
      {
        sub_21B796AF0(buf, *(void **)v8, *(_QWORD *)(v8 + 8));
      }
      else
      {
        v10 = *(_OWORD *)v8;
        v35 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)buf = v10;
      }
      if (qword_25518E2E0 != -1)
        dispatch_once(&qword_25518E2E0, &unk_24DF35950);
      v11 = qword_25518E2D8;
      if (os_log_type_enabled((os_log_t)qword_25518E2D8, OS_LOG_TYPE_INFO))
      {
        if (v35 >= 0)
          v12 = buf;
        else
          v12 = *(uint8_t **)buf;
        *(_DWORD *)v32 = 136380675;
        v33 = v12;
        _os_log_impl(&dword_21B72A000, v11, OS_LOG_TYPE_INFO, "  %{private}s", v32, 0xCu);
      }
      if (SHIBYTE(v35) < 0)
        operator delete(*(void **)buf);
      v8 += 24;
    }
    while (v8 != v9);
    v8 = v30;
    v13 = v31;
  }
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v8) >> 3);
  v15 = *(unsigned int *)(a1 + 12);
  v16 = v14 > v15;
  v17 = v14 - v15;
  if (v16 && v17 >= 1)
  {
    v18 = v8 + 24 * v17;
    do
    {
      if (qword_25518E2E0 != -1)
        dispatch_once(&qword_25518E2E0, &unk_24DF35950);
      v19 = qword_25518E2D8;
      if (os_log_type_enabled((os_log_t)qword_25518E2D8, OS_LOG_TYPE_INFO))
      {
        v23 = (void *)v8;
        if (*(char *)(v8 + 23) < 0)
          v23 = *(void **)v8;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v23;
        _os_log_impl(&dword_21B72A000, v19, OS_LOG_TYPE_INFO, "MSLWriter - deleting: %{private}s", buf, 0xCu);
      }
      sub_21B83276C(v8, v20, v21, v22);
      v8 += 24;
    }
    while (v8 < v18);
  }
  v24 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::locale::~locale(&v28);
  v28.__locale_ = (std::locale::__imp *)&v30;
  sub_21B7D94C0((void ***)&v28);
}

void sub_21B7D8D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_21B7D9120((uint64_t)&a17);
  std::locale::~locale(&a12);
  a12.__locale_ = (std::locale::__imp *)&a20;
  sub_21B7D94C0((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7D8DC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22076636C](a1 + 112);
  return a1;
}

void sub_21B7D8E44(uint64_t a1, uint64_t a2)
{
  double v4;

  v4 = sub_21B833F04();
  sub_21B7D8E70(a1, a2, v4);
}

void sub_21B7D8E70(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  unint64_t v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 136))
  {
    if (qword_25518E2E0 != -1)
      dispatch_once(&qword_25518E2E0, &unk_24DF35950);
    v9 = qword_25518E2D8;
    if (os_log_type_enabled((os_log_t)qword_25518E2D8, OS_LOG_TYPE_FAULT))
      sub_21B899520(v9);
    v10 = qword_25518E2D8;
    if (os_log_type_enabled((os_log_t)qword_25518E2D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v12 = "assert";
      v13 = 2080;
      v14 = "fValid";
      v15 = 2080;
      v16 = "On call to writeItem client should check if the logger was opened";
      _os_log_impl(&dword_21B72A000, v10, OS_LOG_TYPE_INFO, "Event: %s\n Condition: %s\n Message: %s", buf, 0x20u);
    }
    abort_report_np();
  }
  v6 = *(_QWORD *)(a1 + 128);
  if (!v6
    || *(double *)(a1 + 144) < 0.0
    || sub_21B7D805C(v6) > *(_QWORD *)a1
    || (v8 = *(double *)(a1 + 144), v8 > a3)
    || (LODWORD(v7) = *(_DWORD *)(a1 + 8), a3 - v8 > (double)v7))
  {
    sub_21B7D82CC(a1, a3);
  }
  sub_21B7D7C30(*(_QWORD *)(a1 + 128), a2);
}

void sub_21B7D9018(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1)
    sub_21B7D7E70(v1);
}

uint64_t sub_21B7D9028(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_21B7D7984();
    JUMPOUT(0x220766390);
  }
  return result;
}

uint64_t sub_21B7D9064@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = sub_21B7E5C58(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

os_log_t sub_21B7D90F4()
{
  os_log_t result;

  result = os_log_create("com.apple.MotionSensorLogging", "MSL");
  qword_25518E2D8 = (uint64_t)result;
  return result;
}

uint64_t sub_21B7D9120(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *sub_21B7D9178(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x220766264](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_21B7D92DC(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x220766270](v13);
  return a1;
}

void sub_21B7D9280(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x220766270](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x21B7D9260);
}

void sub_21B7D92C8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_21B7D92DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_21B7D9418(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_21B7D93FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21B7D9418(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_21B796B7C();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_21B7D94C0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_21B7D9500((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_21B7D9500(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

const std::locale *sub_21B7D954C(const std::locale *a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = sub_21B7D95DC(a1);
  LODWORD(v6[3].__locale_) = a3;
  *(_OWORD *)((char *)&v6[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[5].__locale_ + 4) = 0u;
  HIDWORD(v6[7].__locale_) = 0;
  v7 = strlen(a2);
  if (sub_21B7D9638((uint64_t)a1, a2, &a2[v7]) != &a2[v7])
    sub_21B7D97A8();
  return a1;
}

void sub_21B7D95C0(_Unwind_Exception *a1)
{
  std::locale *v1;

  sub_21B7D9120((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

const std::locale *sub_21B7D95DC(const std::locale *a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x220766330]();
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, MEMORY[0x24BEDB4B0]);
  return a1;
}

void sub_21B7D9624(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *sub_21B7D9638(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_24DF35980;
  v7 = (_QWORD *)operator new();
  *v7 = &unk_24DF35A50;
  v7[1] = v6;
  sub_21B7D97F4((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return sub_21B7D9AF8(a1, a2, a3);
      case 0x80u:
        return (char *)sub_21B7D9B98(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return sub_21B7D9CF0(a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        sub_21B7D9E48();
      return sub_21B7D9AF8(a1, a2, a3);
    }
    return sub_21B7D99AC(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return sub_21B7D9864(a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_21B7D978C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_21B7D97A8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7D97E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B7D97F4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_21B7D9EC0(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *sub_21B7D9864(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = sub_21B7DA228(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &unk_24DF35A50;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = *(_QWORD *)(a1 + 56);
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = sub_21B7DA228(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = (_QWORD *)operator new();
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *v15 = &unk_24DF35A50;
        v15[1] = v17;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      sub_21B7DA148(a1, v6, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *sub_21B7D99AC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_24DF35AF8;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = sub_21B7E1100(a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        sub_21B7E10B4();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_24DF35B40;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *sub_21B7D9AF8(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_21B7E16F8(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    sub_21B7E10B4();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = sub_21B7E16F8(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    sub_21B7DA148(a1, v6, v9);
  }
  return v3;
}

unsigned __int8 *sub_21B7D9B98(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &unk_24DF35A50;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  else
  {
    sub_21B7D99AC(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = *(_QWORD *)(a1 + 56);
    if (v14 == v12)
    {
      v16 = (_QWORD *)operator new();
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(v17 + 8);
      *v16 = &unk_24DF35A50;
      v16[1] = v18;
      *(_QWORD *)(v17 + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_21B7D99AC(a1, v12, v14);
    }
    sub_21B7DA148(a1, v6, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

char *sub_21B7D9CF0(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (_QWORD *)operator new();
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &unk_24DF35A50;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  else
  {
    sub_21B7D9AF8(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (char *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = *(_QWORD *)(a1 + 56);
    if (v14 == v12)
    {
      v16 = (_QWORD *)operator new();
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(v17 + 8);
      *v16 = &unk_24DF35A50;
      v16[1] = v18;
      *(_QWORD *)(v17 + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_21B7D9AF8(a1, v12, v14);
    }
    sub_21B7DA148(a1, v6, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

void sub_21B7D9E48()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7D9E80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B7D9E98()
{
  JUMPOUT(0x220766390);
}

void sub_21B7D9EAC(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *sub_21B7D9EC0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24DF359D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21B7D9F18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_21B7D9F3C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7D9F60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_21B7D9F78(uint64_t a1, uint64_t a2)
{
  if (sub_21B7D9FB8(a2, (uint64_t)&unk_24DF35A28))
    return a1 + 24;
  else
    return 0;
}

BOOL sub_21B7D9FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *sub_21B7DA004(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DA048(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DA09C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_21B7DA0B0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DA0F4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7DA148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v6 = (_QWORD *)operator new();
  v7 = *(_QWORD *)(a3 + 8);
  v6[1] = *(_QWORD *)(a2 + 8);
  v6[2] = v7;
  *v6 = &unk_24DF35FC0;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = (_QWORD *)operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *v8 = &unk_24DF35A50;
  v8[1] = v9;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
  result = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a3 + 8);
  *result = &unk_24DF36008;
  result[1] = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 8);
  return result;
}

unsigned __int8 *sub_21B7DA228(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)sub_21B7DA2BC(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 28);
    v9 = sub_21B7DA564(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return sub_21B7DA76C(a1, v9, (unsigned __int8 *)a3, v7, v8 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  return result;
}

char *sub_21B7DA2BC(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v20;
  char v21;
  int v22;
  std::locale v23[3];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            sub_21B7D95DC(v23);
            v24 = 0u;
            v26 = 0;
            v25 = 0u;
            LODWORD(v24) = *(_DWORD *)(a1 + 24);
            v12 = (char *)sub_21B7D9638(v23, v3 + 3, a3);
            v22 = DWORD1(v24);
            sub_21B7DAAF0(a1, (uint64_t)v23, 1, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v22;
            if (v12 == a3 || *v12 != 41)
              sub_21B7DAB94();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            sub_21B7D95DC(v23);
            v24 = 0u;
            v26 = 0;
            v25 = 0u;
            LODWORD(v24) = *(_DWORD *)(a1 + 24);
            v12 = (char *)sub_21B7D9638(v23, v3 + 3, a3);
            v13 = DWORD1(v24);
            sub_21B7DAAF0(a1, (uint64_t)v23, 0, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v13;
            if (v12 == a3 || *v12 != 41)
              sub_21B7DAB94();
LABEL_31:
            v3 = v12 + 1;
            sub_21B7D9120((uint64_t)&v25);
            std::locale::~locale(v23);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new();
    v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(v16 + 8);
    v18 = (char *)&unk_24DF35B30;
LABEL_21:
    *(_QWORD *)v14 = v18 + 16;
    *(_QWORD *)(v14 + 8) = v17;
    *(_BYTE *)(v14 + 16) = v15;
    *(_QWORD *)(v16 + 8) = v14;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new();
    v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(v16 + 8);
    v18 = (char *)&unk_24DF35AE8;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    sub_21B7DAA6C(a1, v21);
    v3 += 2;
  }
  return v3;
}

void sub_21B7DA538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_21B7D9120((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21B7DA564(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return sub_21B7DC2C8(a1, a2, a3);
      if (v6 != 123)
        return sub_21B7DC5A4(a1, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)sub_21B7DC368(a1, (char *)a2, (char *)a3);
      if (v6 != 63)
        return sub_21B7DC5A4(a1, a2, a3);
    }
LABEL_29:
    sub_21B7DC558();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      v12 = (unsigned __int8 *)sub_21B7D9864(a1, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      sub_21B7DC478(a1);
      v13 = *(_DWORD *)(a1 + 28);
      v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      v14 = (unsigned __int8 *)sub_21B7D9864(a1, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        sub_21B7DAB94();
      sub_21B7DC4EC(a1, v13);
    }
    --*v11;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = (_QWORD *)operator new();
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v7 = &unk_24DF35C18;
    v7[1] = v9;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return sub_21B7DC5A4(a1, a2, a3);
}

unsigned __int8 *sub_21B7DA76C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = sub_21B7E0B20(a1, a2 + 1, a3, &v28);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = v28;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = v28;
LABEL_33:
              v21 = a4;
              v22 = 0;
LABEL_46:
              sub_21B7E09D8(a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = v28;
LABEL_45:
            v21 = a4;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = v28;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = sub_21B7E0B20(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = v28;
          if (v27 >= v28)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = a4;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      sub_21B7E0C08();
    }
LABEL_58:
    sub_21B7E0BBC();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 0;
      goto LABEL_26;
    }
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

__n128 sub_21B7DAA6C(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v4 = &unk_24DF35B88;
  *(_QWORD *)(v4 + 8) = v5;
  std::locale::locale((std::locale *)(v4 + 16), (const std::locale *)a1);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 24) = result;
  *(_BYTE *)(v4 + 40) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_21B7DAAF0(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = operator new();
  result = sub_21B7DAF94(v8, a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_21B7DAB70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x220766390](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void sub_21B7DAB94()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DABCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_21B7DABE0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DAC24(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DAC78(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

_QWORD *sub_21B7DACD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DAD1C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DAD70(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_21B7DADC0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35B88;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_21B7DAE18(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35B88;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DAE80(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_21B7DAF94(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_24DF35BD0;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_21B7DB020(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35BD0;
  v2 = a1 + 2;
  sub_21B7D9120((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_21B7DB088(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35BD0;
  v2 = a1 + 2;
  sub_21B7D9120((uint64_t)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x220766390);
}

void sub_21B7DB100(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_21B7DB6F8((char **)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_21B7DB2F8(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_21B7DB268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_21B7DB288(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD *v8;
  char *result;

  *(_QWORD *)(a1 + 24) = a4;
  v8 = (_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 40) = 0;
  result = sub_21B7DB6F8((char **)a1, a2, (__int128 *)(a1 + 24));
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a1 + 40);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = a3;
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_21B7DB2F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  __int128 v40;
  char v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v40 = a3;
    *((_QWORD *)&v40 + 1) = a3;
    v41 = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v43 = (_OWORD *)sub_21B7DBA44((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    sub_21B7DB940((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_21B7DB97C((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    v12 = v43;
    *((_QWORD *)v43 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        sub_21B7DB9AC();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = *((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v43 - 6;
          sub_21B7DBDAC((uint64_t)&v44, (_QWORD *)v43 - 12);
          v43 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          sub_21B7DC118(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          sub_21B7DC194((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v43 = (_OWORD *)sub_21B7DBA44((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v43 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v43 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v43;
          ++v13;
          if (v42 != v43)
            continue;
          v6 = 0;
          break;
        default:
          sub_21B7DB9F8();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v42;
  sub_21B7DC244((void ***)v37);
  return v6;
}

void sub_21B7DB6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  sub_21B7DB900(&a13);
  a13 = v18 - 112;
  sub_21B7DC244((void ***)&a13);
  _Unwind_Resume(a1);
}

char *sub_21B7DB6F8(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    v15 = a1[1];
    v16 = (v15 - result) / 24;
    if (v16 >= a2)
      v17 = a2;
    else
      v17 = (v15 - result) / 24;
    if (v17)
    {
      v18 = result;
      do
      {
        *(_OWORD *)v18 = *a3;
        v18[16] = *((_BYTE *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      v19 = &v15[24 * (a2 - v16)];
      v20 = 24 * a2 - 24 * v16;
      do
      {
        v21 = *a3;
        *((_QWORD *)v15 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_21B796A0C();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = sub_21B7DB86C(a1, v10);
    v11 = a1[1];
    v12 = &v11[24 * a2];
    v13 = 24 * a2;
    do
    {
      v14 = *a3;
      *((_QWORD *)v11 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *sub_21B7DB86C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_21B796A0C();
  result = (char *)sub_21B7DB8BC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_21B7DB8BC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_21B796AC8();
  return operator new(24 * a2);
}

_QWORD *sub_21B7DB900(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_21B7DB940(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_21B7DBE64((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_21B7DB97C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_21B7DBFD8((void **)a1, a2 - v2);
  }
}

void sub_21B7DB9AC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DB9E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B7DB9F8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DBA30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7DBA44(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_21B796A0C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_21B7DBC04(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  sub_21B7DBB90(a1, v16);
  v14 = a1[1];
  sub_21B7DBDF0(v16);
  return v14;
}

void sub_21B7DBB7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21B7DBDF0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7DBB90(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_21B7DBC48((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_21B7DBC04(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_21B796AC8();
  return operator new(96 * a2);
}

uint64_t sub_21B7DBC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_21B7DBD28((uint64_t)v12);
  return v10;
}

uint64_t sub_21B7DBD28(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_21B7DBD5C((uint64_t *)a1);
  return a1;
}

void sub_21B7DBD5C(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_21B7DBDAC(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_21B7DBDAC(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_21B7DBDF0(void **a1)
{
  sub_21B7DBE20(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_21B7DBE20(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    sub_21B7DBDAC(v4, (_QWORD *)(i - 96));
  }
}

void sub_21B7DBE64(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_21B796A0C();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_21B7DB8BC(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

void sub_21B7DBFD8(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_21B796A0C();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_21B7DC0E4(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *sub_21B7DC0E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_21B796AC8();
  return operator new(16 * a2);
}

char *sub_21B7DC118(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_21B7DB86C(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21B7DC178(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B7DC194(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_21B7DC204(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21B7DC1E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_21B7DC204(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_21B796A0C();
  result = (char *)sub_21B7DC0E4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_21B7DC244(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_21B7DBDAC((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_21B7DC2C8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_21B7DC6AC();
  result = sub_21B7DC6F8(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)sub_21B7DC7B4(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = sub_21B7DC880(a1, a2 + 1, (char *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *sub_21B7DC368(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    v6 = sub_21B7DD5C4(a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)v6;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      sub_21B7DD65C(v6, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = sub_21B7DE974(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      sub_21B7DD65C((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      sub_21B7DE928();
    return v8 + 1;
  }
  return a2;
}

uint64_t sub_21B7DC478(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    v1 = result;
    result = operator new();
    v2 = *(_DWORD *)(v1 + 28) + 1;
    *(_DWORD *)(v1 + 28) = v2;
    v3 = *(_QWORD *)(v1 + 56);
    v4 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)result = &unk_24DF35E58;
    *(_QWORD *)(result + 8) = v4;
    *(_DWORD *)(result + 16) = v2;
    *(_QWORD *)(v3 + 8) = result;
    *(_QWORD *)(v1 + 56) = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8);
  }
  return result;
}

uint64_t sub_21B7DC4EC(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    v3 = result;
    result = operator new();
    v4 = *(_QWORD *)(v3 + 56);
    v5 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)result = &unk_24DF35EA0;
    *(_QWORD *)(result + 8) = v5;
    *(_DWORD *)(result + 16) = a2;
    *(_QWORD *)(v4 + 8) = result;
    *(_QWORD *)(v3 + 56) = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
  }
  return result;
}

void sub_21B7DC558()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DC590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_21B7DC5A4(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      sub_21B7DCB4C(a1, (char)v4);
      ++v3;
    }
  }
  return v3;
}

_QWORD *sub_21B7DC614(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DC658(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

void sub_21B7DC6AC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DC6E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21B7DC6F8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = (v4 - 48);
  if (v4 == 48)
  {
    sub_21B7DCB4C(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      LODWORD(v5) = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!(_DWORD)v5)
      goto LABEL_16;
  }
  if (v5 > *(_DWORD *)(a1 + 28))
LABEL_16:
    sub_21B7DCC70();
  sub_21B7DCCBC(a1, v5);
  return v6;
}

char *sub_21B7DC7B4(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    v7 = sub_21B7DD5C4(a1, v6);
    v8 = *(_DWORD *)(v7 + 160) | 0x400;
LABEL_18:
    *(_DWORD *)(v7 + 160) = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      v7 = sub_21B7DD5C4(a1, v9);
      v8 = *(_DWORD *)(v7 + 160) | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = sub_21B7DD5C4(a1, v5);
      *(_DWORD *)(v10 + 160) |= 0x500u;
      sub_21B7DD65C(v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

unsigned __int8 *sub_21B7DC880(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  unsigned __int8 *v4;
  int v5;
  char v6;
  std::string *v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;

  v4 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    v5 = (char)*a2;
    if (v5 > 109)
    {
      v6 = 0;
      switch(*a2)
      {
        case 'n':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 10;
            goto LABEL_50;
          }
          v8 = 10;
          goto LABEL_59;
        case 'r':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 13;
            goto LABEL_50;
          }
          v8 = 13;
          goto LABEL_59;
        case 't':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 9;
            goto LABEL_50;
          }
          v8 = 9;
          goto LABEL_59;
        case 'u':
          if (a2 + 1 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v9 = a2[1];
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = a2 + 2;
          if (a2 + 2 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v10 = *v4;
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if (v4 + 1 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v12 = v4[1];
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if (v4 + 2 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v14 = v4[2];
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          if (this)
            std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
          else
            sub_21B7DCB4C(a1, (char)(v15 + v14 + 16 * (v13 + v12 + v6)));
          v4 += 3;
          return v4;
        case 'v':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 11;
            goto LABEL_50;
          }
          v8 = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (v5 == 48)
    {
      if (this)
      {
        v7 = this;
        LOBYTE(v8) = 0;
        goto LABEL_50;
      }
      v8 = 0;
LABEL_59:
      sub_21B7DCB4C(a1, v8);
      return ++v4;
    }
    if (v5 != 99)
    {
      if (v5 == 102)
      {
        if (this)
        {
          v7 = this;
          LOBYTE(v8) = 12;
LABEL_50:
          std::string::operator=(v7, v8);
          return ++v4;
        }
        v8 = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (*a2 != 95
        && ((v5 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
      {
        v8 = (char)v5;
        if (this)
        {
          v7 = this;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      sub_21B7DC6AC();
    }
    if (a2 + 1 == (unsigned __int8 *)a3 || ((a2[1] & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v16 = a2[1] & 0x1F;
    if (this)
      std::string::operator=(this, v16);
    else
      sub_21B7DCB4C(a1, v16);
    v4 += 2;
  }
  return v4;
}

uint64_t sub_21B7DCB4C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    result = sub_21B7DCDB8(v8, a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8));
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24DF35CA8;
    *(_QWORD *)(v8 + 8) = v9;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24DF35CF0;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_21B7DCC4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x220766390](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_21B7DCC70()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DCCA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7DCCBC(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  char *v11;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24DF35D28;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24DF35D70;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24DF35DC8;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_21B7DCDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_24DF35C60;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_21B7DCE24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &unk_24DF35AC8;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

std::locale *sub_21B7DCE5C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35C60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_21B7DCEB4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35C60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DCF1C(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_21B7DCF94(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35CA8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_21B7DCFEC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35CA8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DD054(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

_QWORD *sub_21B7DD09C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DD0E0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DD134(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_21B7DD17C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35D38;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_21B7DD1D4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35D38;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DD23C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_21B7DD320(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35D80;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_21B7DD378(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35D80;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7DD3E0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

_QWORD *sub_21B7DD470(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7DD4B4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

unsigned int *sub_21B7DD508(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_21B7DCC70();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

uint64_t sub_21B7DD5C4(uint64_t a1, char a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_21B7DD888(v4, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), a2, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v4;
  *(_QWORD *)(a1 + 56) = v4;
  return v4;
}

void sub_21B7DD638(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x220766390](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void sub_21B7DD65C(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_21B796A0C();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t sub_21B7DD888(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)a1 = &unk_24DF35E10;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_21B7DD998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v10;
  std::locale *v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_21B7D94C0((void ***)&a10);
  v14 = (void *)v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  sub_21B7DE458((void ***)&a10);
  v15 = (void *)v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  *v10 = &unk_24DF35AC8;
  v17 = v10[1];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

std::locale *sub_21B7DDA24(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35E10;
  v7 = a1 + 17;
  sub_21B7D94C0((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_21B7DE458((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t sub_21B7DDAD8(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)&unk_24DF35E10;
  v7 = a1 + 17;
  sub_21B7D94C0((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_21B7DE458((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24DF35AC8;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x220766390](a1, 0x10F1C4061CF1F02);
}

void sub_21B7DDBA0(uint64_t a1, uint64_t a2)
{
  signed __int8 *v4;
  signed __int8 *v5;
  signed __int8 v6;
  signed __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  void **v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  v4 = *(signed __int8 **)(a2 + 16);
  v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    v37 = 0;
    v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_58;
  v6 = *v4;
  v125 = *v4;
  v7 = v4[1];
  v126 = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    v125 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    v126 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_21B7DE5FC(a1 + 16, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    v36 = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (_BYTE *)(v9 + 1);
    do
    {
      if (v125 == *(v12 - 1) && v126 == *v12)
        goto LABEL_218;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v36 = 0;
  }
  else
  {
    sub_21B7DE560(a1 + 16, (char *)&v125, (char *)&v127);
    v14 = *(_QWORD *)(a1 + 88);
    v15 = v124;
    v16 = *(_QWORD *)(a1 + 96) - v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = *(char *)(v14 + 23);
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(v14 + 23);
        else
          v24 = *(_QWORD *)(v14 + 8);
        if (v23 >= 0)
          v25 = (const void *)v14;
        else
          v25 = *(const void **)v14;
        if (v24 >= v19)
          v26 = v19;
        else
          v26 = v24;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= v24;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = *(char *)(v14 + 47);
          if (v29 >= 0)
            v30 = *(unsigned __int8 *)(v14 + 47);
          else
            v30 = *(_QWORD *)(v14 + 32);
          if (v29 >= 0)
            v31 = (const void *)(v14 + 24);
          else
            v31 = *(const void **)(v14 + 24);
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(v31, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          v35 = 0;
          v36 = 0;
          goto LABEL_162;
        }
      }
      v36 = 1;
      v35 = 5;
LABEL_162:
      v8 = a1 + 16;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      v36 = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_200;
  sub_21B7DE834(v8, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = *(_QWORD *)(a1 + 136);
  v90 = v124;
  v91 = *(_QWORD *)(a1 + 144) - v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = (unsigned __int8 **)(v89 + 24 * v92);
      v100 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
      v101 = (char)v100;
      if ((char)v100 < 0)
        v100 = v99[1];
      if ((unsigned __int8 *)v96 == v100)
      {
        if (v101 >= 0)
          v102 = (unsigned __int8 *)(v89 + 24 * v92);
        else
          v102 = *v99;
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != *v102)
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              ++v102;
              --v104;
            }
            while (v104);
            v36 = 1;
            v35 = 5;
            goto LABEL_192;
          }
          v36 = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            v109 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }
          v106 = *(_DWORD *)(a1 + 160);
          v107 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v108 = *(_DWORD *)(v107 + 4 * v125);
          if ((v108 & v106) == 0 && (v125 != 95 || (v106 & 0x80) == 0)
            || (char)v126 < 0
            || (*(_DWORD *)(v107 + 4 * v126) & v106) == 0 && ((v106 & 0x80) == 0 || v126 != 95))
          {
            v109 = *(_DWORD *)(a1 + 164);
            if ((v108 & v109) != 0 || v125 == 95 && (v109 & 0x80) != 0)
            {
LABEL_217:
              v110 = v36;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v126) & v109) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (v109 & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              v36 = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    v36 = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = **(_BYTE **)(a2 + 16);
  v125 = v39;
  if (*(_BYTE *)(a1 + 169))
  {
    v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v39);
    v125 = v39;
  }
  v40 = *(unsigned __int8 **)(a1 + 40);
  v41 = *(_QWORD *)(a1 + 48) - (_QWORD)v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    v36 = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v39) & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    v45 = *(void **)(a1 + 72);
    v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(_QWORD *)(a1 + 64));
    v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45)
      goto LABEL_77;
  }
  v49 = *(_QWORD *)(a1 + 88);
  v48 = *(_QWORD *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(_BYTE *)(a1 + 170))
    {
      sub_21B7DE560(a1 + 16, (char *)&v125, (char *)&v126);
      v49 = *(_QWORD *)(a1 + 88);
      v48 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = v48 - v49;
    if (v50)
    {
      v119 = v37;
      v116 = v36;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = *(char *)(v49 + 23);
        if (v57 >= 0)
          v58 = *(unsigned __int8 *)(v49 + 23);
        else
          v58 = *(_QWORD *)(v49 + 8);
        if (v57 >= 0)
          v59 = (const void *)v49;
        else
          v59 = *(const void **)v49;
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = *(char *)(v49 + 47);
          if (v63 >= 0)
            v64 = *(unsigned __int8 *)(v49 + 47);
          else
            v64 = *(_QWORD *)(v49 + 32);
          if (v63 >= 0)
            v65 = (const void *)(v49 + 24);
          else
            v65 = *(const void **)(v49 + 24);
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          v36 = v116;
          goto LABEL_123;
        }
      }
      v36 = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_154;
  sub_21B7DE834(a1 + 16, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = *(_QWORD *)(a1 + 136);
  v70 = v124;
  v71 = *(_QWORD *)(a1 + 144) - v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = (unsigned __int8 **)(v69 + 24 * v72);
      v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      v81 = (char)v80;
      if ((char)v80 < 0)
        v80 = v79[1];
      if ((unsigned __int8 *)v76 == v80)
      {
        if (v81 >= 0)
          v82 = (unsigned __int8 *)(v69 + 24 * v72);
        else
          v82 = *v79;
        if ((v70 & 0x80) != 0)
        {
          v117 = v36;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          v36 = v117;
          if (!v86)
          {
            v36 = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            v36 = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v125) & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    v111 = 0;
    v112 = -993;
  }
  else
  {
    *(_QWORD *)(a2 + 16) += v37;
    v111 = *(_QWORD *)(a1 + 8);
    v112 = -995;
  }
  *(_DWORD *)a2 = v112;
  *(_QWORD *)(a2 + 80) = v111;
}

void sub_21B7DE458(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_21B7DE4DC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_21B7DE4DC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_21B7DE520(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_21B7DE560(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  sub_21B7DE790(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_21B7DE5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B7DE5FC(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_21B7DE790(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_21B7DE75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21B7DE790(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_21B796B7C();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_21B7DE834(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  sub_21B7DE790(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_21B7DE90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B7DE928()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DE960(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_21B7DE974(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = sub_21B7DEEFC(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = sub_21B7DED20(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = sub_21B7DEFB4(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = sub_21B7DF1C8(a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)sub_21B7DF0A0(a1, (unsigned __int8 *)v13, a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_21B7DF764(v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      sub_21B7DD65C(v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = sub_21B7DEFB4(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)sub_21B7DF1C8(a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)sub_21B7DF0A0(a1, (unsigned __int8 *)v14 + 2, a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_21B7DF3A0(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_21B7DECC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B7DED20(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    sub_21B7DE928();
  sub_21B7DFA18(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    sub_21B7DF98C();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  sub_21B7DFBAC(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    sub_21B7DF9D8(a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      sub_21B7DF764((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        sub_21B7DF98C();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      sub_21B7DD65C((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_21B7DEEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B7DEEFC(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    sub_21B7DE928();
  v7 = sub_21B7E0078(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    sub_21B7E002C();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_21B7DEFB4(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    sub_21B7DE928();
  sub_21B7DFA18(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    sub_21B7DF98C();
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_21B7DF0A0(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (a2 == (unsigned __int8 *)a3)
    sub_21B7DC6AC();
  v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return sub_21B7DC880(a1, a2, a3, this);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_21B7DD65C(a5, 95);
        return a2 + 1;
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        v10 = this;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 != 100)
        return sub_21B7DC880(a1, a2, a3, this);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }
      return sub_21B7DC880(a1, a2, a3, this);
    }
    v9 = 0;
    v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_21B7E0130(a5, 95);
    return a2 + 1;
  }
  return sub_21B7DC880(a1, a2, a3, this);
}

char *sub_21B7DF1C8(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    sub_21B7DC6AC();
  v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        v5 = 11;
        goto LABEL_49;
      default:
        if ((_DWORD)v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          v5 = 8;
        }
        else
        {
          if ((_DWORD)v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if ((int)v5 > 91)
  {
    if ((_DWORD)v5 != 92)
    {
      if ((_DWORD)v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      v5 = 7;
LABEL_49:
      sub_21B7DCB4C(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    sub_21B7DCB4C(a1, v7);
  return v8;
}

void sub_21B7DF3A0(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    sub_21B7E04C4(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    sub_21B7E04C4(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    sub_21B7E035C((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      sub_21B7E0560();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    sub_21B7E035C((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_21B7DF718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_21B7DE520((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_21B7DF764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)sub_21B7E0810(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)sub_21B7E0810(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_21B796A0C();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)sub_21B7E0810(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void sub_21B7DF98C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7DF9C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7DF9D8(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = sub_21B7DFCFC(v3, a2);
  }
  else
  {
    sub_21B7DFCA0(v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_21B7DFA18(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_21B7DE790(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_21B7DFB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B7DFBAC(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  sub_21B7DE790(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_21B7DFC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_21B7DFCA0(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_21B796AF0((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_21B7DFCF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21B7DFCFC(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_21B796A0C();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_21B7DB8BC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_21B796AF0(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_21B7DFE1C(a1, v15);
  v13 = a1[1];
  sub_21B7DFFA4((uint64_t)v15);
  return v13;
}

void sub_21B7DFE08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21B7DFFA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7DFE1C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_21B7DFE90((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_21B7DFE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_21B7DFF2C((uint64_t)v12);
  return a6;
}

uint64_t sub_21B7DFF2C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_21B7DFF60(a1);
  return a1;
}

void sub_21B7DFF60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_21B7DFFA4(uint64_t a1)
{
  sub_21B7DFFD8(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_21B7DFFD8(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_21B7E002C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7E0064(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7E0078(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  sub_21B7DE790(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_21B7E0114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B7E0130(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_21B796A0C();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void **sub_21B7E035C(uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  void *v19[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_21B796A0C();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_21B7E0620((uint64_t)result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_21B7E05AC(a1, v19);
    v10 = a1[1];
    result = sub_21B7E079C(v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_21B7E04B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_21B7E079C((void **)va);
  _Unwind_Resume(a1);
}

void sub_21B7E04C4(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  sub_21B7DE790(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_21B7E0544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_21B7E0560()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7E0598(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7E05AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_21B7E0664((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_21B7E0620(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_21B796AC8();
  return operator new(48 * a2);
}

uint64_t sub_21B7E0664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_21B7E0718((uint64_t)v13);
  return a6;
}

uint64_t sub_21B7E0718(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_21B7E074C((uint64_t *)a1);
  return a1;
}

void sub_21B7E074C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_21B7DE4DC(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_21B7E079C(void **a1)
{
  sub_21B7E07CC(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_21B7E07CC(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_21B7DE4DC(v4, i - 48);
  }
}

void *sub_21B7E0810(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_21B796AC8();
  return operator new(2 * a2);
}

_QWORD *sub_21B7E0840(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7E0884(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7E08D8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_21B7E0908(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7E094C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7E09A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_21B7E09D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;

  v14 = (_QWORD *)operator new();
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &unk_24DF35A50;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new();
  v18 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v17 = &unk_24DF35EE8;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 44) = a5;
  *(_DWORD *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24DF35F78;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a4 + 8) = v17;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_21B7E0AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21B7E0B20(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            sub_21B7E0BBC();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void sub_21B7E0BBC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7E0BF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_21B7E0C08()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7E0C40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_21B7E0C54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24DF35F48;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24DF35AC8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_21B7E0CBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24DF35F48;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24DF35AC8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x220766390);
}

unsigned int *sub_21B7E0D34(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return sub_21B7E0EF8(result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *sub_21B7E0DE8(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return sub_21B7E0EF8(result, a3);
  }
  return result;
}

_QWORD *sub_21B7E0E18(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24DF35F48;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24DF35AC8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_21B7E0E80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24DF35F48;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24DF35AC8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x220766390);
}

unsigned int *sub_21B7E0EF8(unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_21B7E0F50()
{
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7E0F64(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_21B7E0F78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24DF35F48;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24DF35AC8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_21B7E0FE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24DF35F48;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24DF35AC8;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x220766390);
}

void sub_21B7E1058(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_21B7E1064(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_21B7E108C()
{
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7E10A0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_21B7E10B4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x22076621C](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_21B7E10EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_21B7E1100(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = (unsigned __int8 *)sub_21B7E1188(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return sub_21B7E1294(a1, v8, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
}

char *sub_21B7E1188(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v13;
  uint64_t v14;

  v6 = sub_21B7E1434(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        sub_21B7DC478(a1);
        v10 = *(_DWORD *)(a1 + 28);
        do
        {
          v11 = (char *)v9;
          v9 = sub_21B7E1100(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          sub_21B7DAB94();
        v7 = v11 + 2;
        sub_21B7DC4EC(a1, v10);
      }
      else
      {
        v13 = sub_21B7E169C(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_21B7E1294(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      sub_21B7E09D8(a1, 0, -1, a4, a5, a6, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = sub_21B7E0B20(a1, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = sub_21B7E0B20(a1, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              sub_21B7E0BBC();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = a5;
            v21 = a6;
            v22 = a1;
LABEL_23:
            sub_21B7E09D8(v22, v18, v19, a4, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = a5;
          v21 = a6;
          v22 = a1;
          v19 = v25;
          goto LABEL_23;
        }
      }
      sub_21B7E0C08();
    }
  }
  return v6;
}

char *sub_21B7E1434(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == a3)
  {
    result = sub_21B7E154C(a1, a2, a3);
    if (result != a2)
      return result;
    return sub_21B7DC368(a1, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_21B7DCB4C(a1, (char)v6);
    return a2 + 1;
  }
  result = sub_21B7E154C(a1, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return sub_21B7DC368(a1, a2, a3);
  v9 = (_QWORD *)operator new();
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(v10 + 8);
  *v9 = &unk_24DF36050;
  v9[1] = v11;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return a2 + 1;
}

_BYTE *sub_21B7E154C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      sub_21B7DCB4C(a1, (char)v4);
      v3 += 2;
    }
  }
  return v3;
}

_QWORD *sub_21B7E15C4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24DF35AC8;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_21B7E1608(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24DF35AC8;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7E165C(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_21B7E169C(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_21B7DCC70();
  sub_21B7DCCBC(a1, a2 - 48);
  return 1;
}

unsigned __int8 *sub_21B7E16F8(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = sub_21B7E1754(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    sub_21B7E10B4();
  do
  {
    v7 = v6;
    v6 = sub_21B7E1754(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_21B7E1754(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = sub_21B7E1904(a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != a2 || v8 == a3)
    goto LABEL_12;
  v10 = *a2;
  switch(v10)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = (char *)&unk_24DF35B30;
      goto LABEL_8;
    case '(':
      sub_21B7DC478(a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (char *)sub_21B7D9AF8(a1, a2 + 1, a3);
      if (v17 == a3 || (v18 = v17, *v17 != 41))
        sub_21B7DAB94();
      sub_21B7DC4EC(a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)(v18 + 1);
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return sub_21B7DA76C(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = (char *)&unk_24DF35AE8;
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)(a2 + 1);
      return sub_21B7DA76C(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  return (unsigned __int8 *)a2;
}

char *sub_21B7E1904(uint64_t a1, char *a2, char *a3)
{
  char *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_21B7E19CC(a1, a2, a3);
  if (result == a2)
  {
    result = sub_21B7E1A54(a1, a2, a3);
    if (result == a2)
    {
      if (a2 == a3 || *a2 != 46)
      {
        return sub_21B7DC368(a1, a2, a3);
      }
      else
      {
        v7 = (_QWORD *)operator new();
        v8 = *(_QWORD *)(a1 + 56);
        v9 = *(_QWORD *)(v8 + 8);
        *v7 = &unk_24DF36050;
        v7[1] = v9;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 1;
      }
    }
  }
  return result;
}

char *sub_21B7E19CC(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  uint64_t v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = (v4 - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (v4 - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        return v3;
    }
    else
    {
LABEL_8:
      if ((v4 - 123) < 2)
        return v3;
    }
    sub_21B7DCB4C(a1, *a2);
    ++v3;
  }
  return v3;
}

char *sub_21B7E1A54(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  signed __int8 v6;
  BOOL v7;
  int v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    sub_21B7DCB4C(a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = sub_21B7E169C(a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return sub_21B7DF1C8(a1, v4, a3, 0);
}

void sub_21B7E1B18(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  uint64_t v19;
  __int128 v20;
  BOOL v21;
  unint64_t v22;
  void **v23;
  _BOOL4 v24;
  BOOL v25;
  void **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  _BOOL4 v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  __int128 v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BOOL4 v46;
  BOOL v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  _BOOL4 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void **v55;
  uint64_t v56;
  void **v57;
  void **v58;
  _BOOL4 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  BOOL v64;
  uint64_t v65;
  __int128 v66;
  _OWORD *v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  _BOOL4 v74;
  uint64_t v75;
  BOOL v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  _BOOL4 v81;
  _BOOL4 v82;
  __int128 v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  BOOL v102;
  __int128 v103;
  void **v105;
  uint64_t i;
  void **v107;
  _BOOL4 v108;
  __int128 v109;
  uint64_t v110;
  void **v111;
  BOOL v112;
  int v113;
  uint64_t v114;
  __int128 v115;
  void **v116;
  int64_t v117;
  _OWORD *v118;
  void **v119;
  int64_t v120;
  void *v121;
  unint64_t v122;
  char v123;
  char v124;
  __int128 v125;
  void *v126;
  void *__p[2];
  char v128;
  void *v129[2];
  void *v130;
  _BYTE v131[15];
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v9 = a2 - 24;
  v119 = (void **)(a2 - 48);
  v122 = a2;
  v116 = (void **)(a2 - 72);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = v122 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        sub_21B7E36B4(*a3, (void **)v9, v129);
        sub_21B7E36B4(*a3, (void **)a1, __p);
        v51 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
        if (v128 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v130) < 0)
          operator delete(v129[0]);
        if (v51)
        {
          v52 = *(_OWORD *)a1;
          v130 = *(void **)(a1 + 16);
          *(_OWORD *)v129 = v52;
          v53 = *(_OWORD *)v9;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)a1 = v53;
          v54 = *(_OWORD *)v129;
          *(_QWORD *)(v9 + 16) = v130;
          *(_OWORD *)v9 = v54;
        }
        return;
      case 3uLL:
        sub_21B7E302C((void **)a1, (void **)(a1 + 24), (void **)v9, a3);
        return;
      case 4uLL:
        sub_21B7E5A70(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)v9, a3);
        return;
      case 5uLL:
        sub_21B7E2DB4(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)v9, a3);
        return;
      default:
        if (v11 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 == v122)
              return;
            v55 = (void **)(a1 + 24);
            if (a1 + 24 == v122)
              return;
            v56 = 0;
            v57 = (void **)a1;
            while (1)
            {
              v58 = v55;
              sub_21B7E36B4(*a3, v55, v129);
              sub_21B7E36B4(*a3, v57, __p);
              v59 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
              if (v128 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v130) < 0)
              {
                operator delete(v129[0]);
                if (v59)
                {
LABEL_134:
                  v60 = *(_OWORD *)v58;
                  v126 = v58[2];
                  v125 = v60;
                  v58[1] = 0;
                  v58[2] = 0;
                  *v58 = 0;
                  v61 = v56;
                  do
                  {
                    v62 = a1 + v61;
                    v63 = (void **)(a1 + v61 + 24);
                    if (*(char *)(a1 + v61 + 47) < 0)
                      operator delete(*v63);
                    *(_OWORD *)v63 = *(_OWORD *)v62;
                    *(_QWORD *)(a1 + v61 + 40) = *(_QWORD *)(v62 + 16);
                    *(_BYTE *)(v62 + 23) = 0;
                    *(_BYTE *)v62 = 0;
                    if (!v61)
                    {
                      v65 = a1;
                      goto LABEL_146;
                    }
                    sub_21B7E36B4(*a3, (void **)&v125, v129);
                    sub_21B7E36B4(*a3, (void **)(a1 + v61 - 24), __p);
                    v64 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                    if (v128 < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v130) < 0)
                      operator delete(v129[0]);
                    v61 -= 24;
                  }
                  while (v64);
                  v65 = a1 + v61 + 24;
                  if (*(char *)(a1 + v61 + 47) < 0)
                    operator delete(*(void **)v65);
LABEL_146:
                  v66 = v125;
                  *(_QWORD *)(v65 + 16) = v126;
                  *(_OWORD *)v65 = v66;
                }
              }
              else if (v59)
              {
                goto LABEL_134;
              }
              v55 = v58 + 3;
              v56 += 24;
              v57 = v58;
              if (v58 + 3 == (void **)v122)
                return;
            }
          }
          if (a1 == v122)
            return;
          v105 = (void **)(a1 + 24);
          if (a1 + 24 == v122)
            return;
          for (i = a1 - 24; ; i += 24)
          {
            v107 = v105;
            sub_21B7E36B4(*a3, v105, v129);
            sub_21B7E36B4(*a3, (void **)a1, __p);
            v108 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
            if (v128 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v130) < 0)
            {
              operator delete(v129[0]);
              if (v108)
              {
LABEL_231:
                v109 = *(_OWORD *)v107;
                v126 = v107[2];
                v125 = v109;
                v107[1] = 0;
                v107[2] = 0;
                *v107 = 0;
                v110 = i;
                do
                {
                  v111 = (void **)(v110 + 48);
                  if (*(char *)(v110 + 71) < 0)
                    operator delete(*v111);
                  *(_OWORD *)v111 = *(_OWORD *)(v110 + 24);
                  *(_QWORD *)(v110 + 64) = *(_QWORD *)(v110 + 40);
                  *(_BYTE *)(v110 + 47) = 0;
                  *(_BYTE *)(v110 + 24) = 0;
                  sub_21B7E36B4(*a3, (void **)&v125, v129);
                  sub_21B7E36B4(*a3, (void **)v110, __p);
                  v112 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    operator delete(v129[0]);
                  v110 -= 24;
                }
                while (v112);
                v113 = *(char *)(v110 + 71);
                v114 = v110 + 48;
                if (v113 < 0)
                  operator delete(*(void **)v114);
                v115 = v125;
                *(_QWORD *)(v114 + 16) = v126;
                *(_OWORD *)v114 = v115;
              }
            }
            else if (v108)
            {
              goto LABEL_231;
            }
            v105 = v107 + 3;
            a1 = (uint64_t)v107;
            if (v107 + 3 == (void **)v122)
              return;
          }
        }
        if (!a4)
        {
          v67 = (_OWORD *)v122;
          if (a1 == v122)
            return;
          v68 = (v12 - 2) >> 1;
          v120 = v68;
          do
          {
            v69 = v68;
            if (v120 >= v68)
            {
              v70 = (2 * v68) | 1;
              v71 = a1 + 24 * v70;
              v72 = 2 * v68 + 2;
              v73 = v68;
              if (v72 < (uint64_t)v12)
              {
                sub_21B7E36B4(*a3, (void **)(a1 + 24 * v70), v129);
                sub_21B7E36B4(*a3, (void **)(v71 + 24), __p);
                v74 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
                if (v74)
                {
                  v71 += 24;
                  v70 = v72;
                }
              }
              sub_21B7E36B4(*a3, (void **)v71, v129);
              v117 = v73;
              v75 = a1 + 24 * v73;
              sub_21B7E36B4(*a3, (void **)v75, __p);
              v76 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
              v67 = (_OWORD *)v122;
              if (v128 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v130) < 0)
                operator delete(v129[0]);
              v69 = v73;
              if (!v76)
              {
                v77 = *(_OWORD *)v75;
                v126 = *(void **)(v75 + 16);
                v125 = v77;
                *(_QWORD *)(v75 + 8) = 0;
                *(_QWORD *)(v75 + 16) = 0;
                *(_QWORD *)v75 = 0;
                do
                {
                  v78 = v71;
                  if (*(char *)(v75 + 23) < 0)
                    operator delete(*(void **)v75);
                  v79 = *(_OWORD *)v71;
                  *(_QWORD *)(v75 + 16) = *(_QWORD *)(v71 + 16);
                  *(_OWORD *)v75 = v79;
                  *(_BYTE *)(v71 + 23) = 0;
                  *(_BYTE *)v71 = 0;
                  if (v120 < v70)
                    goto LABEL_184;
                  v80 = (2 * v70) | 1;
                  v71 = a1 + 24 * v80;
                  v70 = 2 * v70 + 2;
                  if (v70 >= (uint64_t)v12)
                  {
                    v70 = v80;
                  }
                  else
                  {
                    sub_21B7E36B4(*a3, (void **)(a1 + 24 * v80), v129);
                    sub_21B7E36B4(*a3, (void **)(v71 + 24), __p);
                    v81 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                    if (v128 < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v130) < 0)
                      operator delete(v129[0]);
                    if (v81)
                      v71 += 24;
                    else
                      v70 = v80;
                  }
                  sub_21B7E36B4(*a3, (void **)v71, v129);
                  sub_21B7E36B4(*a3, (void **)&v125, __p);
                  v82 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    operator delete(v129[0]);
                  v75 = v78;
                }
                while (!v82);
                if (*(char *)(v78 + 23) < 0)
                  operator delete(*(void **)v78);
LABEL_184:
                v83 = v125;
                *(_QWORD *)(v78 + 16) = v126;
                *(_OWORD *)v78 = v83;
                v67 = (_OWORD *)v122;
                v69 = v117;
              }
            }
            v68 = v69 - 1;
          }
          while (v69);
          v84 = v11 / 0x18uLL;
          while (1)
          {
            v85 = 0;
            v118 = v67;
            v121 = *(void **)a1;
            *(_QWORD *)v131 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 15);
            v123 = *(_BYTE *)(a1 + 23);
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v86 = a1;
            do
            {
              v87 = v86 + 24 * v85 + 24;
              v88 = 2 * v85;
              v85 = (2 * v85) | 1;
              v89 = v88 + 2;
              if (v88 + 2 < v84)
              {
                sub_21B7E36B4(*a3, (void **)v87, v129);
                sub_21B7E36B4(*a3, (void **)(v87 + 24), __p);
                v90 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
                if (v90)
                {
                  v87 += 24;
                  v85 = v89;
                }
              }
              if (*(char *)(v86 + 23) < 0)
                operator delete(*(void **)v86);
              v91 = *(_OWORD *)v87;
              *(_QWORD *)(v86 + 16) = *(_QWORD *)(v87 + 16);
              *(_OWORD *)v86 = v91;
              *(_BYTE *)(v87 + 23) = 0;
              *(_BYTE *)v87 = 0;
              v86 = v87;
            }
            while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
            v67 = (_OWORD *)((char *)v118 - 24);
            if ((_OWORD *)v87 == (_OWORD *)((char *)v118 - 24))
            {
              *(_QWORD *)v87 = v121;
              v98 = *(_QWORD *)&v131[7];
              *(_QWORD *)(v87 + 8) = *(_QWORD *)v131;
              *(_QWORD *)(v87 + 15) = v98;
              *(_BYTE *)(v87 + 23) = v123;
            }
            else
            {
              v92 = *v67;
              *(_QWORD *)(v87 + 16) = *((_QWORD *)v118 - 1);
              *(_OWORD *)v87 = v92;
              *((_QWORD *)v118 - 3) = v121;
              v93 = *(_QWORD *)v131;
              *(_QWORD *)((char *)v118 - 9) = *(_QWORD *)&v131[7];
              *((_QWORD *)v118 - 2) = v93;
              *((_BYTE *)v118 - 1) = v123;
              v94 = v87 - a1 + 24;
              if (v94 >= 25)
              {
                v95 = (v94 / 0x18uLL - 2) >> 1;
                v96 = a1 + 24 * v95;
                sub_21B7E36B4(*a3, (void **)v96, v129);
                sub_21B7E36B4(*a3, (void **)v87, __p);
                v97 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                {
                  operator delete(v129[0]);
                  if (v97)
                  {
LABEL_207:
                    v99 = *(_OWORD *)v87;
                    v126 = *(void **)(v87 + 16);
                    v125 = v99;
                    *(_QWORD *)(v87 + 8) = 0;
                    *(_QWORD *)(v87 + 16) = 0;
                    *(_QWORD *)v87 = 0;
                    while (1)
                    {
                      v100 = v96;
                      if (*(char *)(v87 + 23) < 0)
                        operator delete(*(void **)v87);
                      v101 = *(_OWORD *)v96;
                      *(_QWORD *)(v87 + 16) = *(_QWORD *)(v96 + 16);
                      *(_OWORD *)v87 = v101;
                      *(_BYTE *)(v96 + 23) = 0;
                      *(_BYTE *)v96 = 0;
                      if (!v95)
                        break;
                      v95 = (v95 - 1) >> 1;
                      v96 = a1 + 24 * v95;
                      sub_21B7E36B4(*a3, (void **)v96, v129);
                      sub_21B7E36B4(*a3, (void **)&v125, __p);
                      v102 = sub_21B7E364C((uint64_t)&v124, (const void **)v129, (const void **)__p);
                      if (v128 < 0)
                        operator delete(__p[0]);
                      if (SHIBYTE(v130) < 0)
                        operator delete(v129[0]);
                      v87 = v100;
                      if (!v102)
                      {
                        if (*(char *)(v100 + 23) < 0)
                          operator delete(*(void **)v100);
                        break;
                      }
                    }
                    v103 = v125;
                    *(_QWORD *)(v100 + 16) = v126;
                    *(_OWORD *)v100 = v103;
                    v67 = (_OWORD *)((char *)v118 - 24);
                  }
                }
                else if (v97)
                {
                  goto LABEL_207;
                }
              }
            }
            if (v84-- <= 2)
              return;
          }
        }
        v13 = v12 >> 1;
        v14 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_21B7E302C((void **)(a1 + 24 * (v12 >> 1)), (void **)a1, (void **)v9, a3);
        }
        else
        {
          sub_21B7E302C((void **)a1, (void **)(a1 + 24 * (v12 >> 1)), (void **)v9, a3);
          sub_21B7E302C((void **)(a1 + 24), (void **)(a1 + 24 * v13 - 24), v119, a3);
          sub_21B7E302C((void **)(a1 + 48), (void **)(a1 + 24 * v13 + 24), v116, a3);
          sub_21B7E302C((void **)(a1 + 24 * v13 - 24), (void **)v14, (void **)(a1 + 24 * v13 + 24), a3);
          v15 = *(_OWORD *)a1;
          v130 = *(void **)(a1 + 16);
          *(_OWORD *)v129 = v15;
          v16 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = v16;
          v17 = *(_OWORD *)v129;
          *(_QWORD *)(v14 + 16) = v130;
          *(_OWORD *)v14 = v17;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          sub_21B7E36B4(*a3, (void **)(a1 - 24), v129);
          sub_21B7E36B4(*a3, (void **)a1, __p);
          v18 = sub_21B7E364C((uint64_t)&v125, (const void **)v129, (const void **)__p);
          if (v128 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v130) < 0)
            operator delete(v129[0]);
          if (!v18)
          {
            v36 = *(_OWORD *)a1;
            v126 = *(void **)(a1 + 16);
            v125 = v36;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            sub_21B7E36B4(*a3, (void **)&v125, v129);
            sub_21B7E36B4(*a3, (void **)v9, __p);
            v37 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
            if (v128 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v130) < 0)
              operator delete(v129[0]);
            if (v37)
            {
              v10 = a1;
              do
              {
                sub_21B7E36B4(*a3, (void **)&v125, v129);
                v10 += 24;
                sub_21B7E36B4(*a3, (void **)v10, __p);
                v38 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
              }
              while (!v38);
            }
            else
            {
              v39 = a1 + 24;
              do
              {
                v10 = v39;
                if (v39 >= v122)
                  break;
                sub_21B7E36B4(*a3, (void **)&v125, v129);
                sub_21B7E36B4(*a3, (void **)v10, __p);
                v40 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
                v39 = v10 + 24;
              }
              while (!v40);
            }
            v41 = v122;
            if (v10 < v122)
            {
              v41 = v122;
              do
              {
                while (1)
                {
                  sub_21B7E36B4(*a3, (void **)&v125, v129);
                  v41 -= 24;
                  sub_21B7E36B4(*a3, (void **)v41, __p);
                  v42 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    break;
                  if (!v42)
                    goto LABEL_104;
                }
                operator delete(v129[0]);
              }
              while (v42);
            }
LABEL_104:
            while (v10 < v41)
            {
              v43 = *(_OWORD *)v10;
              v130 = *(void **)(v10 + 16);
              *(_OWORD *)v129 = v43;
              v44 = *(_OWORD *)v41;
              *(_QWORD *)(v10 + 16) = *(_QWORD *)(v41 + 16);
              *(_OWORD *)v10 = v44;
              v45 = *(_OWORD *)v129;
              *(_QWORD *)(v41 + 16) = v130;
              *(_OWORD *)v41 = v45;
              do
              {
                while (1)
                {
                  sub_21B7E36B4(*a3, (void **)&v125, v129);
                  v10 += 24;
                  sub_21B7E36B4(*a3, (void **)v10, __p);
                  v46 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    break;
                  if (v46)
                    goto LABEL_100;
                }
                operator delete(v129[0]);
              }
              while (!v46);
              do
              {
                while (1)
                {
LABEL_100:
                  sub_21B7E36B4(*a3, (void **)&v125, v129);
                  v41 -= 24;
                  sub_21B7E36B4(*a3, (void **)v41, __p);
                  v47 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if ((SHIBYTE(v130) & 0x80000000) == 0)
                    break;
                  operator delete(v129[0]);
                  if (!v47)
                    goto LABEL_104;
                }
              }
              while (v47);
            }
            v48 = (__int128 *)(v10 - 24);
            if (v10 - 24 == a1)
            {
              if (*(char *)(v10 - 1) < 0)
                operator delete(*(void **)a1);
            }
            else
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v49 = *v48;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
              *(_OWORD *)a1 = v49;
              *(_BYTE *)(v10 - 1) = 0;
              *(_BYTE *)(v10 - 24) = 0;
            }
            a5 = 0;
            v50 = v125;
            *(_QWORD *)(v10 - 8) = v126;
            *v48 = v50;
            continue;
          }
        }
        v19 = 0;
        v20 = *(_OWORD *)a1;
        v126 = *(void **)(a1 + 16);
        v125 = v20;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        do
        {
          sub_21B7E36B4(*a3, (void **)(a1 + v19 + 24), v129);
          sub_21B7E36B4(*a3, (void **)&v125, __p);
          v21 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
          if (v128 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v130) < 0)
            operator delete(v129[0]);
          v19 += 24;
        }
        while (v21);
        v22 = a1 + v19;
        v23 = (void **)v122;
        if (v19 == 24)
        {
          v23 = (void **)v122;
          while (v22 < (unint64_t)v23)
          {
            v23 -= 3;
            sub_21B7E36B4(*a3, v23, v129);
            sub_21B7E36B4(*a3, (void **)&v125, __p);
            v25 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
            if (v128 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v130) < 0)
            {
              operator delete(v129[0]);
              if (v25)
                break;
            }
            else if (v25)
            {
              break;
            }
          }
        }
        else
        {
          do
          {
            while (1)
            {
              v23 -= 3;
              sub_21B7E36B4(*a3, v23, v129);
              sub_21B7E36B4(*a3, (void **)&v125, __p);
              v24 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
              if (v128 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v130) < 0)
                break;
              if (v24)
                goto LABEL_37;
            }
            operator delete(v129[0]);
          }
          while (!v24);
        }
LABEL_37:
        v10 = a1 + v19;
        if (v22 < (unint64_t)v23)
        {
          v26 = v23;
          do
          {
            v27 = *(_OWORD *)v10;
            v130 = *(void **)(v10 + 16);
            *(_OWORD *)v129 = v27;
            v28 = *(_OWORD *)v26;
            *(_QWORD *)(v10 + 16) = v26[2];
            *(_OWORD *)v10 = v28;
            v29 = *(_OWORD *)v129;
            v26[2] = v130;
            *(_OWORD *)v26 = v29;
            do
            {
              while (1)
              {
                v10 += 24;
                sub_21B7E36B4(*a3, (void **)v10, v129);
                sub_21B7E36B4(*a3, (void **)&v125, __p);
                v30 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  break;
                if (!v30)
                  goto LABEL_48;
              }
              operator delete(v129[0]);
            }
            while (v30);
            do
            {
              while (1)
              {
LABEL_48:
                v26 -= 3;
                sub_21B7E36B4(*a3, v26, v129);
                sub_21B7E36B4(*a3, (void **)&v125, __p);
                v31 = sub_21B7E364C((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if ((SHIBYTE(v130) & 0x80000000) == 0)
                  break;
                operator delete(v129[0]);
                if (v31)
                  goto LABEL_52;
              }
            }
            while (!v31);
LABEL_52:
            ;
          }
          while (v10 < (unint64_t)v26);
        }
        v32 = (__int128 *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v33 = *v32;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)a1 = v33;
          *(_BYTE *)(v10 - 1) = 0;
          *(_BYTE *)(v10 - 24) = 0;
        }
        v34 = v125;
        *(_QWORD *)(v10 - 8) = v126;
        *v32 = v34;
        if (v22 < (unint64_t)v23)
        {
LABEL_62:
          sub_21B7E1B18(a1, v10 - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_21B7E32FC(a1, v10 - 24, a3);
        if (!sub_21B7E32FC(v10, v122, a3))
        {
          if (v35)
            continue;
          goto LABEL_62;
        }
        a2 = v10 - 24;
        if (!v35)
          goto LABEL_2;
        return;
    }
  }
}

void sub_21B7E2CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

__n128 sub_21B7E2DB4(uint64_t a1, void **a2, void **a3, void **a4, void **a5, uint64_t **a6)
{
  _BOOL4 v12;
  __n128 result;
  void *v14;
  __int128 v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  __int128 v19;
  void *v20;
  _BOOL4 v21;
  void *v22;
  __int128 v23;
  void *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  _BYTE v32[33];

  sub_21B7E5A70(a1, a2, a3, a4, a6);
  sub_21B7E36B4(*a6, a5, v30);
  sub_21B7E36B4(*a6, a4, __p);
  v12 = sub_21B7E364C((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v12)
      return result;
  }
  else if (!v12)
  {
    return result;
  }
  v14 = a4[2];
  v15 = *(_OWORD *)a4;
  v16 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  a4[2] = v16;
  *(_OWORD *)a5 = v15;
  a5[2] = v14;
  sub_21B7E36B4(*a6, a4, v30);
  sub_21B7E36B4(*a6, a3, __p);
  v17 = sub_21B7E364C((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v17)
      return result;
  }
  else if (!v17)
  {
    return result;
  }
  v18 = a3[2];
  v19 = *(_OWORD *)a3;
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v20;
  *(_OWORD *)a4 = v19;
  a4[2] = v18;
  sub_21B7E36B4(*a6, a3, v30);
  sub_21B7E36B4(*a6, a2, __p);
  v21 = sub_21B7E364C((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v21)
      return result;
  }
  else if (!v21)
  {
    return result;
  }
  v22 = a2[2];
  v23 = *(_OWORD *)a2;
  v24 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v24;
  *(_OWORD *)a3 = v23;
  a3[2] = v22;
  sub_21B7E36B4(*a6, a2, v30);
  sub_21B7E36B4(*a6, (void **)a1, __p);
  v25 = sub_21B7E364C((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v25)
  {
    v26 = *(void **)(a1 + 16);
    result = *(__n128 *)a1;
    v27 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v27;
    *(__n128 *)a2 = result;
    a2[2] = v26;
  }
  return result;
}

void sub_21B7E3004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_21B7E302C(void **a1, void **a2, void **a3, uint64_t **a4)
{
  BOOL v8;
  _BOOL4 v9;
  void *v10;
  __n128 result;
  void *v12;
  _BOOL4 v13;
  void *v14;
  __n128 v15;
  void *v16;
  _BOOL4 v17;
  void *v18;
  void *v19;
  __int128 v20;
  void *v21;
  _BOOL4 v22;
  void *v23;
  void *v24;
  void *__p[2];
  char v26;
  const void *v27[2];
  char v28;
  _BYTE v29[33];

  sub_21B7E36B4(*a4, a2, v27);
  sub_21B7E36B4(*a4, a1, __p);
  v8 = sub_21B7E364C((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (v8)
      goto LABEL_5;
  }
  else if (v8)
  {
LABEL_5:
    sub_21B7E36B4(*a4, a3, v27);
    sub_21B7E36B4(*a4, a2, __p);
    v9 = sub_21B7E364C((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
    {
      operator delete((void *)v27[0]);
      if (v9)
        goto LABEL_9;
    }
    else if (v9)
    {
LABEL_9:
      v10 = a1[2];
      result = *(__n128 *)a1;
      v12 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v12;
LABEL_23:
      *(__n128 *)a3 = result;
      a3[2] = v10;
      return result;
    }
    v14 = a1[2];
    v15 = *(__n128 *)a1;
    v16 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v16;
    *(__n128 *)a2 = v15;
    a2[2] = v14;
    sub_21B7E36B4(*a4, a3, v27);
    sub_21B7E36B4(*a4, a2, __p);
    v17 = sub_21B7E364C((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete((void *)v27[0]);
    if (v17)
    {
      v10 = a2[2];
      result = *(__n128 *)a2;
      v18 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v18;
      goto LABEL_23;
    }
    return result;
  }
  sub_21B7E36B4(*a4, a3, v27);
  sub_21B7E36B4(*a4, a2, __p);
  v13 = sub_21B7E364C((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (!v13)
      return result;
  }
  else if (!v13)
  {
    return result;
  }
  v19 = a2[2];
  v20 = *(_OWORD *)a2;
  v21 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v21;
  *(_OWORD *)a3 = v20;
  a3[2] = v19;
  sub_21B7E36B4(*a4, a2, v27);
  sub_21B7E36B4(*a4, a1, __p);
  v22 = sub_21B7E364C((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete((void *)v27[0]);
  if (v22)
  {
    v23 = a1[2];
    result = *(__n128 *)a1;
    v24 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v24;
    *(__n128 *)a2 = result;
    a2[2] = v23;
  }
  return result;
}

void sub_21B7E32D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

BOOL sub_21B7E32FC(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  BOOL v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;
  char v29;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      sub_21B7E36B4(*a3, (void **)(a2 - 24), v27);
      sub_21B7E36B4(*a3, (void **)a1, __p);
      v9 = sub_21B7E364C((uint64_t)&v23, (const void **)v27, (const void **)__p);
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_OWORD *)a1;
        v12 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v12;
        *(_OWORD *)v8 = v11;
        *(_QWORD *)(v8 + 16) = v10;
      }
      return 1;
    case 3uLL:
      sub_21B7E302C((void **)a1, (void **)(a1 + 24), (void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_21B7E5A70(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_21B7E2DB4(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)(a2 - 24), a3);
      return 1;
    default:
      v13 = (void **)(a1 + 48);
      sub_21B7E302C((void **)a1, (void **)(a1 + 24), (void **)(a1 + 48), a3);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    sub_21B7E36B4(*a3, (void **)v14, v27);
    sub_21B7E36B4(*a3, v13, __p);
    v17 = sub_21B7E364C((uint64_t)&v23, (const void **)v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      break;
    if (v17)
      goto LABEL_17;
LABEL_30:
    v13 = (void **)v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
  operator delete(v27[0]);
  if (!v17)
    goto LABEL_30;
LABEL_17:
  v23 = *(_OWORD *)v14;
  v24 = *(_QWORD *)(v14 + 16);
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)v14 = 0;
  v18 = v15;
  do
  {
    v19 = a1 + v18;
    v20 = (void **)(a1 + v18 + 72);
    if (*(char *)(a1 + v18 + 95) < 0)
      operator delete(*v20);
    *(_OWORD *)v20 = *(_OWORD *)(v19 + 48);
    *(_QWORD *)(a1 + v18 + 88) = *(_QWORD *)(v19 + 64);
    *(_BYTE *)(v19 + 71) = 0;
    *(_BYTE *)(v19 + 48) = 0;
    if (v18 == -48)
    {
      v22 = a1;
      goto LABEL_29;
    }
    sub_21B7E36B4(*a3, (void **)&v23, v27);
    sub_21B7E36B4(*a3, (void **)(a1 + v18 + 24), __p);
    v21 = sub_21B7E364C((uint64_t)&v29, (const void **)v27, (const void **)__p);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
      operator delete(v27[0]);
    v18 -= 24;
  }
  while (v21);
  v22 = a1 + v18 + 72;
  if (*(char *)(a1 + v18 + 95) < 0)
    operator delete(*(void **)v22);
LABEL_29:
  *(_OWORD *)v22 = v23;
  *(_QWORD *)(v22 + 16) = v24;
  if (++v16 != 8)
    goto LABEL_30;
  return v14 + 24 == a2;
}

void sub_21B7E3600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_21B7E364C(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void sub_21B7E36B4(uint64_t *a1@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *__p[2];
  _BYTE v9[25];
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v5 = *a1;
  v6 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if ((char)v6 < 0)
    v6 = a2[1];
  sub_21B7E37B8((uint64_t)v7, (uint64_t)v6 + (_QWORD)v7, (uint64_t)__p, v5, 0);
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)48)
  {
    if (*((_BYTE *)__p[0] + 40))
    {
      sub_21B7DE790(a3, *((char **)__p[0] + 3), *((char **)__p[0] + 4), *((_QWORD *)__p[0] + 4) - *((_QWORD *)__p[0] + 3));
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_21B796AF0(a3, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = a2[2];
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_21B7E379C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B7E37B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  void *__p[2];
  _BYTE v12[25];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v5 = a5;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  v9 = sub_21B7E38AC(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_21B7E3A84(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_21B7E3890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B7E38AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  sub_21B7DB288(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_21B7E3C10(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
      v10 = (uint64_t *)(a4 + 24);
    else
      v10 = *(uint64_t **)a4;
LABEL_8:
    v11 = *v10;
    *(_QWORD *)(a4 + 56) = *v10;
    *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v11;
    v12 = v10[1];
    *(_QWORD *)(a4 + 72) = v12;
    *(_BYTE *)(a4 + 88) = v12 != *(_QWORD *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_21B7DB6F8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), (__int128 *)(a4 + 24));
        v16 = sub_21B7E3C10(a1, v15, a3, (uint64_t *)a4, v14, 0);
        v18 = *(_QWORD *)a4;
        v17 = *(_QWORD *)(a4 + 8);
        if (v16)
          break;
        sub_21B7DB6F8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (__int128 *)(a4 + 24));
        if (++v15 == a3)
          goto LABEL_14;
      }
      if (v17 == v18)
        v10 = (uint64_t *)(a4 + 24);
      else
        v10 = *(uint64_t **)a4;
      goto LABEL_8;
    }
LABEL_14:
    sub_21B7DB6F8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), (__int128 *)(a4 + 24));
    if (sub_21B7E3C10(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
        v10 = (uint64_t *)(a4 + 24);
      else
        v10 = *(uint64_t **)a4;
      goto LABEL_8;
    }
  }
  result = 0;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  return result;
}

void sub_21B7E3A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v10 = a4[6];
  sub_21B7E58CC(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      *(_QWORD *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12);
      *(_QWORD *)(*(_QWORD *)a1 + v12 + 8) = a2 + v19[1] - v10;
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12);
      v21 = *((_BYTE *)v20 + 16);
      v11 = *(_QWORD *)a1;
      v22 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v23 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v23;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_21B7E3C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return sub_21B7DB2F8(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return sub_21B7E4168(a1, a2, a3, a4, a5, a6);
  return sub_21B7E3C30(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_21B7E3C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    sub_21B7E46D0(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_21B7DB97C(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        sub_21B7DB9AC();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            sub_21B7E47D0(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                sub_21B7DBDAC((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_21B7E4850((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_21B7E47D0(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          sub_21B7DC118(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          sub_21B7DC194((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          sub_21B7E46D0(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          sub_21B7DB9F8();
      }
      break;
    }
  }
  sub_21B7E543C(&v59);
  return v6;
}

void sub_21B7E4118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  sub_21B7E543C((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_21B7E4168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  __int128 v49;
  char v50;
  _BYTE v51[40];
  __int128 v52;
  void *v53[6];
  _OWORD *v54;
  _OWORD *v55;
  _QWORD v56[3];

  v54 = 0;
  v55 = 0;
  v56[0] = 0;
  *(_DWORD *)v51 = 0;
  memset(&v51[8], 0, 32);
  v52 = 0u;
  memset(v53, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  *(_QWORD *)&v49 = a3;
  *((_QWORD *)&v49 + 1) = a3;
  v50 = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v55 = (_OWORD *)sub_21B7DBA44((uint64_t *)&v54, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v55;
  *((_DWORD *)v55 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  sub_21B7DB940((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v49);
  sub_21B7DB97C((uint64_t)v55 - 40, *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = a3 - a2;
  v14 = v55;
  *((_QWORD *)v55 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      sub_21B7DB9AC();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = *((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = v19 - *((_QWORD *)v14 - 11);
        v27 = v42;
        if ((v43 & (v42 >= v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v51 = *(_OWORD *)v18;
          *(_OWORD *)&v51[16] = v28;
          if (v51 != v18)
          {
            sub_21B7E55CC(&v51[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            sub_21B7E5780(v53, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v14 - 11);
          v53[3] = v29;
          v27 = v26;
        }
        v30 = v55;
        if (v27 == v13)
        {
          v31 = (uint64_t)v54;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            sub_21B7DBDAC((uint64_t)v56, v30);
          }
          v55 = (_OWORD *)v31;
          v43 = 1;
          v42 = a3 - a2;
        }
        else
        {
          v42 = v27;
          v32 = v55 - 6;
          sub_21B7DBDAC((uint64_t)v56, (_QWORD *)v55 - 12);
          v55 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v55 - 6;
        sub_21B7DBDAC((uint64_t)v56, (_QWORD *)v55 - 12);
        v55 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        sub_21B7DC118(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        sub_21B7DC194((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v55;
        if ((unint64_t)v55 >= v56[0])
        {
          v55 = (_OWORD *)sub_21B7DBA44((uint64_t *)&v54, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v55 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v55 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        sub_21B7DB9F8();
    }
    v14 = v55;
  }
  while (v54 != v55);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = a2 + v42;
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v52 != *(_QWORD *)&v51[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(_QWORD *)&v51[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v51[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(_QWORD *)&v51[32])
  {
    *(_QWORD *)&v52 = *(_QWORD *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(_QWORD *)v51 = &v54;
  sub_21B7DC244((void ***)v51);
  return v39;
}

void sub_21B7E4670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_21B7DB900(&a19);
  sub_21B7DB900(&a35);
  a35 = v35 - 120;
  sub_21B7DC244((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 sub_21B7E46D0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_21B7E4940(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_21B7E47D0(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  sub_21B7DBDAC((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return sub_21B7E50B0(a1, 1);
}

int64x2_t sub_21B7E4850(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_21B7E5124((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_21B89DAD0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_21B7E4940(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_21B796A20(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_21B7E4C54(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_21B7E4D68((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_21B796A20((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_21B796A20((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_21B7E4E84(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_21B7E4F98((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_21B7E4C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_21B7E4C54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_21B796A20(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_21B7E4D68(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_21B796A20(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_21B7E4E84(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_21B796A20(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_21B7E4F98(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_21B796A20(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_21B7E50B0(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_21B7E5124(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_21B796A20(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      sub_21B7E4E84(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_21B796A20((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        sub_21B7E4C54(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      sub_21B7E4D68((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_21B7E4D68((uint64_t)a1, &__p);
  }
}

void sub_21B7E53F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7E543C(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_21B7DBDAC((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_21B7E5580((uint64_t)a1);
}

uint64_t sub_21B7E5580(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

char *sub_21B7E55CC(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_21B796A0C();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_21B7DB86C(a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *sub_21B7E5780(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_21B796A0C();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_21B7DC204(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void sub_21B7E58CC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_21B7E5908((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_21B7E5908(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      v14 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_21B796A0C();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_21B7DB8BC(v4, v11);
    else
      v12 = 0;
    v15 = &v12[24 * v8];
    v16 = &v15[24 * a2];
    v17 = 24 * a2;
    v18 = v15;
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    v19 = &v12[24 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

__n128 sub_21B7E5A70(uint64_t a1, void **a2, void **a3, void **a4, uint64_t **a5)
{
  _BOOL4 v10;
  __n128 result;
  void *v12;
  __int128 v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  __int128 v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  _BYTE v26[33];

  sub_21B7E302C((void **)a1, a2, a3, a5);
  sub_21B7E36B4(*a5, a4, v24);
  sub_21B7E36B4(*a5, a3, __p);
  v10 = sub_21B7E364C((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v10)
      return result;
  }
  else if (!v10)
  {
    return result;
  }
  v12 = a3[2];
  v13 = *(_OWORD *)a3;
  v14 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v14;
  *(_OWORD *)a4 = v13;
  a4[2] = v12;
  sub_21B7E36B4(*a5, a3, v24);
  sub_21B7E36B4(*a5, a2, __p);
  v15 = sub_21B7E364C((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v15)
      return result;
  }
  else if (!v15)
  {
    return result;
  }
  v16 = a2[2];
  v17 = *(_OWORD *)a2;
  v18 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v18;
  *(_OWORD *)a3 = v17;
  a3[2] = v16;
  sub_21B7E36B4(*a5, a2, v24);
  sub_21B7E36B4(*a5, (void **)a1, __p);
  v19 = sub_21B7E364C((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v19)
  {
    v20 = *(void **)(a1 + 16);
    result = *(__n128 *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v21;
    *(__n128 *)a2 = result;
    a2[2] = v20;
  }
  return result;
}

void sub_21B7E5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21B7E5C58(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_21B796B7C();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *sub_21B7E5CDC(_QWORD *a1)
{
  *a1 = &off_24DF36098;
  bzero(a1 + 1, 0x260uLL);
  bzero(a1 + 78, 0xBB4uLL);
  return a1;
}

void sub_21B7E5D20(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;

  *(_QWORD *)this = &off_24DF36098;
  v2 = *((_QWORD *)this + 451);
  *((_QWORD *)this + 451) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 450);
  *((_QWORD *)this + 450) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 449);
  *((_QWORD *)this + 449) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 448);
  *((_QWORD *)this + 448) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 447);
  *((_QWORD *)this + 447) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 446);
  *((_QWORD *)this + 446) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 445);
  *((_QWORD *)this + 445) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 444);
  *((_QWORD *)this + 444) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 443);
  *((_QWORD *)this + 443) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 442);
  *((_QWORD *)this + 442) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 441);
  *((_QWORD *)this + 441) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 440);
  *((_QWORD *)this + 440) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 439);
  *((_QWORD *)this + 439) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 438);
  *((_QWORD *)this + 438) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 437);
  *((_QWORD *)this + 437) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 436);
  *((_QWORD *)this + 436) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)this + 435);
  *((_QWORD *)this + 435) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 433);
  *((_QWORD *)this + 433) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *((_QWORD *)this + 432);
  *((_QWORD *)this + 432) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 431);
  *((_QWORD *)this + 431) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 430);
  *((_QWORD *)this + 430) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *((_QWORD *)this + 428);
  *((_QWORD *)this + 428) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *((_QWORD *)this + 427);
  *((_QWORD *)this + 427) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 426);
  *((_QWORD *)this + 426) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *((_QWORD *)this + 425);
  *((_QWORD *)this + 425) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *((_QWORD *)this + 424);
  *((_QWORD *)this + 424) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *((_QWORD *)this + 423);
  *((_QWORD *)this + 423) = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *((_QWORD *)this + 422);
  *((_QWORD *)this + 422) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *((_QWORD *)this + 421);
  *((_QWORD *)this + 421) = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 420);
  *((_QWORD *)this + 420) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *((_QWORD *)this + 419);
  *((_QWORD *)this + 419) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *((_QWORD *)this + 417);
  *((_QWORD *)this + 417) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *((_QWORD *)this + 416);
  *((_QWORD *)this + 416) = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)this + 413);
  *((_QWORD *)this + 413) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)this + 412);
  *((_QWORD *)this + 412) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)this + 410);
  *((_QWORD *)this + 410) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v44 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)this + 408);
  *((_QWORD *)this + 408) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)this + 407);
  *((_QWORD *)this + 407) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)this + 406);
  *((_QWORD *)this + 406) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  v48 = *((_QWORD *)this + 405);
  *((_QWORD *)this + 405) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = *((_QWORD *)this + 404);
  *((_QWORD *)this + 404) = 0;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *((_QWORD *)this + 403);
  *((_QWORD *)this + 403) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  v51 = *((_QWORD *)this + 402);
  *((_QWORD *)this + 402) = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  v52 = *((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v52)
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  v53 = *((_QWORD *)this + 400);
  *((_QWORD *)this + 400) = 0;
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v54 = *((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  v55 = *((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((_QWORD *)this + 397);
  *((_QWORD *)this + 397) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *((_QWORD *)this + 396);
  *((_QWORD *)this + 396) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)this + 395);
  *((_QWORD *)this + 395) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = *((_QWORD *)this + 393);
  *((_QWORD *)this + 393) = 0;
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  v61 = *((_QWORD *)this + 392);
  *((_QWORD *)this + 392) = 0;
  if (v61)
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  v62 = *((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  v63 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v63)
    (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
  v64 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v64)
    (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  v65 = *((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  v66 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v66)
    (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  v67 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  v68 = *((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  v70 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  v71 = *((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v71)
    (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  v72 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  v74 = *((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = *((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  v80 = *((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v80)
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
  v81 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  v82 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v82)
    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
  v83 = *((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v83)
    (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
  v84 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  v86 = *((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v87 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v88 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v88)
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  v89 = *((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v89)
    (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
  v90 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v90)
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
  v91 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v91)
    (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
  v92 = *((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  v93 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v93)
    (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  v94 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = *((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v95)
    (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  v96 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v97)
    (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  v98 = *((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  v99 = *((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v99)
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
  v100 = *((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v101 = *((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v101)
    (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  v102 = *((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = *((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = *((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v104)
    (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
  v105 = *((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = *((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  v107 = *((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v108 = *((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v108)
    (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  v109 = *((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v109)
    (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  v110 = *((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  v111 = *((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v112)
    (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
  v113 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v114)
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  v115 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v115)
    (*(void (**)(uint64_t))(*(_QWORD *)v115 + 8))(v115);
  v116 = *((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
  v117 = *((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v117)
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  v118 = *((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = *((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = *((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = *((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  v125 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  v127 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  v128 = *((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v129 = *((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v130)
    (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
  v131 = *((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  v132 = *((_QWORD *)this + 321);
  *((_QWORD *)this + 321) = 0;
  if (v132)
    (*(void (**)(uint64_t))(*(_QWORD *)v132 + 8))(v132);
  v133 = *((_QWORD *)this + 320);
  *((_QWORD *)this + 320) = 0;
  if (v133)
    (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
  v134 = *((_QWORD *)this + 319);
  *((_QWORD *)this + 319) = 0;
  if (v134)
    (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
  v135 = *((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v135)
    (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
  v136 = *((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  v137 = *((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v137)
    (*(void (**)(uint64_t))(*(_QWORD *)v137 + 8))(v137);
  v138 = *((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v138)
    (*(void (**)(uint64_t))(*(_QWORD *)v138 + 8))(v138);
  v139 = *((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v139)
    (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  v140 = *((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v140)
    (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
  v141 = *((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v141)
    (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
  v142 = *((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v142)
    (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  v143 = *((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v143)
    (*(void (**)(uint64_t))(*(_QWORD *)v143 + 8))(v143);
  v144 = *((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v144)
    (*(void (**)(uint64_t))(*(_QWORD *)v144 + 8))(v144);
  v145 = *((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v145)
    (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  v146 = *((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = *((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = *((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  v149 = *((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = *((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v151 = *((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = *((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  v153 = *((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = *((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = *((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = *((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  v157 = *((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = *((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  v159 = *((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
  v160 = *((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v160)
    (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  v161 = *((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v161)
    (*(void (**)(uint64_t))(*(_QWORD *)v161 + 8))(v161);
  v162 = *((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 8))(v162);
  v163 = *((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v163)
    (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  v164 = *((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v164)
    (*(void (**)(uint64_t))(*(_QWORD *)v164 + 8))(v164);
  v165 = *((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  v166 = *((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v166)
    (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
  v167 = *((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v167)
    (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
  v168 = *((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v168)
    (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  v169 = *((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
  v170 = *((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v170)
    (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);
  v171 = *((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = *((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v173)
    (*(void (**)(uint64_t))(*(_QWORD *)v173 + 8))(v173);
  v174 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v174)
    (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
  v175 = *((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v175)
    (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
  v176 = *((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v176)
    (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
  v177 = *((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v177)
    (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
  v178 = *((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v178)
    (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
  v179 = *((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v179)
    (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  v180 = *((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v180)
    (*(void (**)(uint64_t))(*(_QWORD *)v180 + 8))(v180);
  v181 = *((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v181)
    (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
  v182 = *((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v182)
    (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
  v183 = *((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v183)
    (*(void (**)(uint64_t))(*(_QWORD *)v183 + 8))(v183);
  v184 = *((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v184)
    (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
  v185 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  v186 = *((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v186)
    (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
  v187 = *((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v189)
    (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
  v190 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v190)
    (*(void (**)(uint64_t))(*(_QWORD *)v190 + 8))(v190);
  v191 = *((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v191)
    (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  v192 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v192)
    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 8))(v192);
  v193 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v193)
    (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  v194 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  v195 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  v197 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  v199 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = *((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = *((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = *((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  v203 = *((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = *((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v204)
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  v205 = *((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = *((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  v207 = *((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  v209 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v209)
    (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  v210 = *((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v210)
    (*(void (**)(uint64_t))(*(_QWORD *)v210 + 8))(v210);
  v211 = *((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v211)
    (*(void (**)(uint64_t))(*(_QWORD *)v211 + 8))(v211);
  v212 = *((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v212)
    (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  v213 = *((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v213)
    (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
  v214 = *((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v214)
    (*(void (**)(uint64_t))(*(_QWORD *)v214 + 8))(v214);
  v215 = *((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = *((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v216)
    (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
  v217 = *((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v217)
    (*(void (**)(uint64_t))(*(_QWORD *)v217 + 8))(v217);
  v218 = *((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v218)
    (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  v219 = *((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v219)
    (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
  v220 = *((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v220)
    (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  v221 = *((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  v222 = *((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v222)
    (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
  v223 = *((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v223)
    (*(void (**)(uint64_t))(*(_QWORD *)v223 + 8))(v223);
  v224 = *((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v224)
    (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  v225 = *((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v225)
    (*(void (**)(uint64_t))(*(_QWORD *)v225 + 8))(v225);
  v226 = *((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v226)
    (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
  v227 = *((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v227)
    (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  v228 = *((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v228)
    (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);
  v229 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v229)
    (*(void (**)(uint64_t))(*(_QWORD *)v229 + 8))(v229);
  v230 = *((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v230)
    (*(void (**)(uint64_t))(*(_QWORD *)v230 + 8))(v230);
  v231 = *((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v231)
    (*(void (**)(uint64_t))(*(_QWORD *)v231 + 8))(v231);
  v232 = *((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v232)
    (*(void (**)(uint64_t))(*(_QWORD *)v232 + 8))(v232);
  v233 = *((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v233)
    (*(void (**)(uint64_t))(*(_QWORD *)v233 + 8))(v233);
  v234 = *((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v234)
    (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  v235 = *((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v235)
    (*(void (**)(uint64_t))(*(_QWORD *)v235 + 8))(v235);
  v236 = *((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v236)
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 8))(v236);
  v237 = *((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v237)
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v238 = *((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v238)
    (*(void (**)(uint64_t))(*(_QWORD *)v238 + 8))(v238);
  v239 = *((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v239)
    (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
  v240 = *((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = *((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = *((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  v243 = *((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v243)
    (*(void (**)(uint64_t))(*(_QWORD *)v243 + 8))(v243);
  v244 = *((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v244)
    (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  v245 = *((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v245)
    (*(void (**)(uint64_t))(*(_QWORD *)v245 + 8))(v245);
  v246 = *((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v246)
    (*(void (**)(uint64_t))(*(_QWORD *)v246 + 8))(v246);
  v247 = *((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v247)
    (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  v248 = *((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v248)
    (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
  v249 = *((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v249)
    (*(void (**)(uint64_t))(*(_QWORD *)v249 + 8))(v249);
  v250 = *((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v250)
    (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
  v251 = *((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v251)
    (*(void (**)(uint64_t))(*(_QWORD *)v251 + 8))(v251);
  v252 = *((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v252)
    (*(void (**)(uint64_t))(*(_QWORD *)v252 + 8))(v252);
  v253 = *((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v253)
    (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  v254 = *((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v254)
    (*(void (**)(uint64_t))(*(_QWORD *)v254 + 8))(v254);
  v255 = *((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v255)
    (*(void (**)(uint64_t))(*(_QWORD *)v255 + 8))(v255);
  v256 = *((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  v257 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  v258 = *((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  v259 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v259)
    (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  v260 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v260)
    (*(void (**)(uint64_t))(*(_QWORD *)v260 + 8))(v260);
  v261 = *((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v261)
    (*(void (**)(uint64_t))(*(_QWORD *)v261 + 8))(v261);
  v262 = *((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v262)
    (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  v263 = *((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = *((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v264)
    (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  v265 = *((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = *((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  v267 = *((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v267)
    (*(void (**)(uint64_t))(*(_QWORD *)v267 + 8))(v267);
  v268 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v268)
    (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  v269 = *((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v270)
    (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  v271 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = *((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = *((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v274)
    (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  v275 = *((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = *((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v276)
    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  v277 = *((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = *((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  v279 = *((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v280 = *((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v280)
    (*(void (**)(uint64_t))(*(_QWORD *)v280 + 8))(v280);
  v281 = *((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v281)
    (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  v282 = *((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v282)
    (*(void (**)(uint64_t))(*(_QWORD *)v282 + 8))(v282);
  v283 = *((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v283)
    (*(void (**)(uint64_t))(*(_QWORD *)v283 + 8))(v283);
  v284 = *((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v284)
    (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  v285 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v285)
    (*(void (**)(uint64_t))(*(_QWORD *)v285 + 8))(v285);
  v286 = *((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v286)
    (*(void (**)(uint64_t))(*(_QWORD *)v286 + 8))(v286);
  v287 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v287)
    (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  v288 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v288)
    (*(void (**)(uint64_t))(*(_QWORD *)v288 + 8))(v288);
  v289 = *((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v289)
    (*(void (**)(uint64_t))(*(_QWORD *)v289 + 8))(v289);
  v290 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v290)
    (*(void (**)(uint64_t))(*(_QWORD *)v290 + 8))(v290);
  v291 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v291)
    (*(void (**)(uint64_t))(*(_QWORD *)v291 + 8))(v291);
  v292 = *((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v292)
    (*(void (**)(uint64_t))(*(_QWORD *)v292 + 8))(v292);
  v293 = *((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v293)
    (*(void (**)(uint64_t))(*(_QWORD *)v293 + 8))(v293);
  v294 = *((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v294)
    (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  v295 = *((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v295)
    (*(void (**)(uint64_t))(*(_QWORD *)v295 + 8))(v295);
  v296 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v296)
    (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
  v297 = *((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v297)
    (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  v298 = *((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v298)
    (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
  v299 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v299)
    (*(void (**)(uint64_t))(*(_QWORD *)v299 + 8))(v299);
  v300 = *((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v300)
    (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
  v301 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v301)
    (*(void (**)(uint64_t))(*(_QWORD *)v301 + 8))(v301);
  v302 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v302)
    (*(void (**)(uint64_t))(*(_QWORD *)v302 + 8))(v302);
  v303 = *((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v303)
    (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  v304 = *((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v304)
    (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
  v305 = *((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v305)
    (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
  v306 = *((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v306)
    (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
  v307 = *((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v307)
    (*(void (**)(uint64_t))(*(_QWORD *)v307 + 8))(v307);
  v308 = *((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v308)
    (*(void (**)(uint64_t))(*(_QWORD *)v308 + 8))(v308);
  v309 = *((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v309)
    (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  v310 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v310)
    (*(void (**)(uint64_t))(*(_QWORD *)v310 + 8))(v310);
  v311 = *((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v311)
    (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
  v312 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v312)
    (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
  v313 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v313)
    (*(void (**)(uint64_t))(*(_QWORD *)v313 + 8))(v313);
  v314 = *((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v314)
    (*(void (**)(uint64_t))(*(_QWORD *)v314 + 8))(v314);
  v315 = *((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v315)
    (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  v316 = *((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v316)
    (*(void (**)(uint64_t))(*(_QWORD *)v316 + 8))(v316);
  v317 = *((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v317)
    (*(void (**)(uint64_t))(*(_QWORD *)v317 + 8))(v317);
  v318 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v318)
    (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  v319 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v319)
    (*(void (**)(uint64_t))(*(_QWORD *)v319 + 8))(v319);
  v320 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v320)
    (*(void (**)(uint64_t))(*(_QWORD *)v320 + 8))(v320);
  v321 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v321)
    (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  v322 = *((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v322)
    (*(void (**)(uint64_t))(*(_QWORD *)v322 + 8))(v322);
  v323 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v323)
    (*(void (**)(uint64_t))(*(_QWORD *)v323 + 8))(v323);
  v324 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v324)
    (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  v325 = *((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v325)
    (*(void (**)(uint64_t))(*(_QWORD *)v325 + 8))(v325);
  v326 = *((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v326)
    (*(void (**)(uint64_t))(*(_QWORD *)v326 + 8))(v326);
  v327 = *((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v327)
    (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  v328 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v328)
    (*(void (**)(uint64_t))(*(_QWORD *)v328 + 8))(v328);
  v329 = *((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v329)
    (*(void (**)(uint64_t))(*(_QWORD *)v329 + 8))(v329);
  v330 = *((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v330)
    (*(void (**)(uint64_t))(*(_QWORD *)v330 + 8))(v330);
  v331 = *((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v331)
    (*(void (**)(uint64_t))(*(_QWORD *)v331 + 8))(v331);
  v332 = *((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v332)
    (*(void (**)(uint64_t))(*(_QWORD *)v332 + 8))(v332);
  v333 = *((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v333)
    (*(void (**)(uint64_t))(*(_QWORD *)v333 + 8))(v333);
  v334 = *((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v334)
    (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  v335 = *((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v335)
    (*(void (**)(uint64_t))(*(_QWORD *)v335 + 8))(v335);
  v336 = *((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v336)
    (*(void (**)(uint64_t))(*(_QWORD *)v336 + 8))(v336);
  v337 = *((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v337)
    (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  v338 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v338)
    (*(void (**)(uint64_t))(*(_QWORD *)v338 + 8))(v338);
  v339 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v339)
    (*(void (**)(uint64_t))(*(_QWORD *)v339 + 8))(v339);
  v340 = *((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v340)
    (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
  v341 = *((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v341)
    (*(void (**)(uint64_t))(*(_QWORD *)v341 + 8))(v341);
  v342 = *((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v342)
    (*(void (**)(uint64_t))(*(_QWORD *)v342 + 8))(v342);
  v343 = *((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v343)
    (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  v344 = *((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v344)
    (*(void (**)(uint64_t))(*(_QWORD *)v344 + 8))(v344);
  v345 = *((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v345)
    (*(void (**)(uint64_t))(*(_QWORD *)v345 + 8))(v345);
  v346 = *((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v346)
    (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  v347 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v347)
    (*(void (**)(uint64_t))(*(_QWORD *)v347 + 8))(v347);
  v348 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v348)
    (*(void (**)(uint64_t))(*(_QWORD *)v348 + 8))(v348);
  v349 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v349)
    (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  v350 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v350)
    (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
  v351 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v351)
    (*(void (**)(uint64_t))(*(_QWORD *)v351 + 8))(v351);
  v352 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v352)
    (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
  v353 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v353)
    (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
  v354 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v354)
    (*(void (**)(uint64_t))(*(_QWORD *)v354 + 8))(v354);
  v355 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v355)
    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
  v356 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v356)
    (*(void (**)(uint64_t))(*(_QWORD *)v356 + 8))(v356);
  v357 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v357)
    (*(void (**)(uint64_t))(*(_QWORD *)v357 + 8))(v357);
  v358 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v358)
    (*(void (**)(uint64_t))(*(_QWORD *)v358 + 8))(v358);
  v359 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v359)
    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 8))(v359);
  v360 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v360)
    (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
  v361 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v361)
    (*(void (**)(uint64_t))(*(_QWORD *)v361 + 8))(v361);
  v362 = *((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v362)
    (*(void (**)(uint64_t))(*(_QWORD *)v362 + 8))(v362);
  v363 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v363)
    (*(void (**)(uint64_t))(*(_QWORD *)v363 + 8))(v363);
  v364 = *((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v364)
    (*(void (**)(uint64_t))(*(_QWORD *)v364 + 8))(v364);
  v365 = *((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v365)
    (*(void (**)(uint64_t))(*(_QWORD *)v365 + 8))(v365);
  v366 = *((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v366)
    (*(void (**)(uint64_t))(*(_QWORD *)v366 + 8))(v366);
  v367 = *((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v367)
    (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  v368 = *((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v368)
    (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
  v369 = *((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v369)
    (*(void (**)(uint64_t))(*(_QWORD *)v369 + 8))(v369);
  v370 = *((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v370)
    (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
  v371 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v371)
    (*(void (**)(uint64_t))(*(_QWORD *)v371 + 8))(v371);
  v372 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v372)
    (*(void (**)(uint64_t))(*(_QWORD *)v372 + 8))(v372);
  v373 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v373)
    (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  v374 = *((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v374)
    (*(void (**)(uint64_t))(*(_QWORD *)v374 + 8))(v374);
  v375 = *((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v375)
    (*(void (**)(uint64_t))(*(_QWORD *)v375 + 8))(v375);
  v376 = *((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v376)
    (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
  v377 = *((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v377)
    (*(void (**)(uint64_t))(*(_QWORD *)v377 + 8))(v377);
  v378 = *((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v378)
    (*(void (**)(uint64_t))(*(_QWORD *)v378 + 8))(v378);
  v379 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v379)
    (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  v380 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v380)
    (*(void (**)(uint64_t))(*(_QWORD *)v380 + 8))(v380);
  v381 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v381)
    (*(void (**)(uint64_t))(*(_QWORD *)v381 + 8))(v381);
  v382 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v382)
    (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
  v383 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v383)
    (*(void (**)(uint64_t))(*(_QWORD *)v383 + 8))(v383);
  v384 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v384)
    (*(void (**)(uint64_t))(*(_QWORD *)v384 + 8))(v384);
  v385 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v385)
    (*(void (**)(uint64_t))(*(_QWORD *)v385 + 8))(v385);
  v386 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v386)
    (*(void (**)(uint64_t))(*(_QWORD *)v386 + 8))(v386);
  v387 = *((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v387)
    (*(void (**)(uint64_t))(*(_QWORD *)v387 + 8))(v387);
  v388 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v388)
    (*(void (**)(uint64_t))(*(_QWORD *)v388 + 8))(v388);
  v389 = *((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v389)
    (*(void (**)(uint64_t))(*(_QWORD *)v389 + 8))(v389);
  v390 = *((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v390)
    (*(void (**)(uint64_t))(*(_QWORD *)v390 + 8))(v390);
  v391 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v391)
    (*(void (**)(uint64_t))(*(_QWORD *)v391 + 8))(v391);
  v392 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v392)
    (*(void (**)(uint64_t))(*(_QWORD *)v392 + 8))(v392);
  v393 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v393)
    (*(void (**)(uint64_t))(*(_QWORD *)v393 + 8))(v393);
  v394 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v394)
    (*(void (**)(uint64_t))(*(_QWORD *)v394 + 8))(v394);
  v395 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v395)
    (*(void (**)(uint64_t))(*(_QWORD *)v395 + 8))(v395);
  v396 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v396)
    (*(void (**)(uint64_t))(*(_QWORD *)v396 + 8))(v396);
  v397 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v397)
    (*(void (**)(uint64_t))(*(_QWORD *)v397 + 8))(v397);
  v398 = *((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v398)
    (*(void (**)(uint64_t))(*(_QWORD *)v398 + 8))(v398);
  v399 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v399)
    (*(void (**)(uint64_t))(*(_QWORD *)v399 + 8))(v399);
  v400 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v400)
    (*(void (**)(uint64_t))(*(_QWORD *)v400 + 8))(v400);
  v401 = *((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v401)
    (*(void (**)(uint64_t))(*(_QWORD *)v401 + 8))(v401);
  v402 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v402)
    (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
  v403 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v403)
    (*(void (**)(uint64_t))(*(_QWORD *)v403 + 8))(v403);
  v404 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v404)
    (*(void (**)(uint64_t))(*(_QWORD *)v404 + 8))(v404);
  v405 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v405)
    (*(void (**)(uint64_t))(*(_QWORD *)v405 + 8))(v405);
  v406 = *((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v406)
    (*(void (**)(uint64_t))(*(_QWORD *)v406 + 8))(v406);
  v407 = *((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v407)
    (*(void (**)(uint64_t))(*(_QWORD *)v407 + 8))(v407);
  v408 = *((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v408)
    (*(void (**)(uint64_t))(*(_QWORD *)v408 + 8))(v408);
  v409 = *((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v409)
    (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  v410 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v410)
    (*(void (**)(uint64_t))(*(_QWORD *)v410 + 8))(v410);
  v411 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v411)
    (*(void (**)(uint64_t))(*(_QWORD *)v411 + 8))(v411);
  v412 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v412)
    (*(void (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
  v413 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v413)
    (*(void (**)(uint64_t))(*(_QWORD *)v413 + 8))(v413);
  v414 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v414)
    (*(void (**)(uint64_t))(*(_QWORD *)v414 + 8))(v414);
  v415 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v415)
    (*(void (**)(uint64_t))(*(_QWORD *)v415 + 8))(v415);
  v416 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v416)
    (*(void (**)(uint64_t))(*(_QWORD *)v416 + 8))(v416);
  v417 = *((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v417)
    (*(void (**)(uint64_t))(*(_QWORD *)v417 + 8))(v417);
  v418 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v418)
    (*(void (**)(uint64_t))(*(_QWORD *)v418 + 8))(v418);
  v419 = *((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v419)
    (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  v420 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v420)
    (*(void (**)(uint64_t))(*(_QWORD *)v420 + 8))(v420);
  v421 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v421)
    (*(void (**)(uint64_t))(*(_QWORD *)v421 + 8))(v421);
  v422 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v422)
    (*(void (**)(uint64_t))(*(_QWORD *)v422 + 8))(v422);
  v423 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v423)
    (*(void (**)(uint64_t))(*(_QWORD *)v423 + 8))(v423);
  v424 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v424)
    (*(void (**)(uint64_t))(*(_QWORD *)v424 + 8))(v424);
  v425 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v425)
    (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  v426 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v426)
    (*(void (**)(uint64_t))(*(_QWORD *)v426 + 8))(v426);
  v427 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v427)
    (*(void (**)(uint64_t))(*(_QWORD *)v427 + 8))(v427);
  v428 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v428)
    (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  v429 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v429)
    (*(void (**)(uint64_t))(*(_QWORD *)v429 + 8))(v429);
  v430 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v430)
    (*(void (**)(uint64_t))(*(_QWORD *)v430 + 8))(v430);
  v431 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v431)
    (*(void (**)(uint64_t))(*(_QWORD *)v431 + 8))(v431);
  v432 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v432)
    (*(void (**)(uint64_t))(*(_QWORD *)v432 + 8))(v432);
  v433 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v433)
    (*(void (**)(uint64_t))(*(_QWORD *)v433 + 8))(v433);
  v434 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v434)
    (*(void (**)(uint64_t))(*(_QWORD *)v434 + 8))(v434);
  v435 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v435)
    (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  v436 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v436)
    (*(void (**)(uint64_t))(*(_QWORD *)v436 + 8))(v436);
  v437 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v437)
    (*(void (**)(uint64_t))(*(_QWORD *)v437 + 8))(v437);
  v438 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v438)
    (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
  v439 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v439)
    (*(void (**)(uint64_t))(*(_QWORD *)v439 + 8))(v439);
  v440 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v440)
    (*(void (**)(uint64_t))(*(_QWORD *)v440 + 8))(v440);
  v441 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v441)
    (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  v442 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v442)
    (*(void (**)(uint64_t))(*(_QWORD *)v442 + 8))(v442);
  v443 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v443)
    (*(void (**)(uint64_t))(*(_QWORD *)v443 + 8))(v443);
  v444 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v444)
    (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
  v445 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v445)
    (*(void (**)(uint64_t))(*(_QWORD *)v445 + 8))(v445);
  v446 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v446)
    (*(void (**)(uint64_t))(*(_QWORD *)v446 + 8))(v446);
  v447 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v447)
    (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  v448 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v448)
    (*(void (**)(uint64_t))(*(_QWORD *)v448 + 8))(v448);
  v449 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v449)
    (*(void (**)(uint64_t))(*(_QWORD *)v449 + 8))(v449);
  v450 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v450)
    (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  v451 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v451)
    (*(void (**)(uint64_t))(*(_QWORD *)v451 + 8))(v451);
  PB::Base::~Base(this);
}

void sub_21B7E8780(PB::Base *a1)
{
  sub_21B7E5D20(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7E87A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  float v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  float v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  uint64_t v271;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  float v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  float v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  double v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  float v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD *v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  double v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  double v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  double v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  double v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  double v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  double v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  double v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  uint64_t v456;
  _QWORD *v457;
  _QWORD *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  double v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  double v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  double v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  double v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  float v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  double v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  double v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  double v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  float v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  float v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  double v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  float v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  float v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  double v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  float v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  double v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  double v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  double v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  double v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  double v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  float v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  _QWORD *v727;
  _QWORD *v728;
  uint64_t v729;
  _QWORD *v730;
  _QWORD *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  float v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  float v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  float v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  float v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  float v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  float v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  float v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  float v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  double v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  float v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  float v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  double v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  float v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  _QWORD *v917;
  _QWORD *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  double v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  float v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  float v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  double v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  float v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  _QWORD *v970;
  _QWORD *v971;
  uint64_t v972;
  _QWORD *v973;
  _QWORD *v974;
  uint64_t v975;
  _QWORD *v976;
  _QWORD *v977;
  uint64_t v978;
  uint64_t v979;
  float v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  float v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  _QWORD *v996;
  _QWORD *v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  double v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  double v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  float v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  float v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  double v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  float v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  float v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  float v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  double v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  float v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  float v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  float v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  float v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  float v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  float v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  float v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  double v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  float v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  float v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  float v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  float v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  float v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  float v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  float v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  double v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  double v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  double v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  double v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  double v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  double v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  float v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  double v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  float v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  float v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  double v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  double v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  float v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  double v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  double v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  double v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  double v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  double v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  float v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  double v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  double v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  double v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  double v1337;
  uint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  double v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  double v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  double v1352;
  uint64_t v1353;
  uint64_t v1354;
  uint64_t v1355;
  double v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  double v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  float v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  uint64_t v1379;
  float v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  double v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  double v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  double v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  double v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  uint64_t v1465;
  float v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  _QWORD *v1481;
  _QWORD *v1482;
  uint64_t v1483;

  *(_QWORD *)a1 = &off_24DF36098;
  v4 = (uint64_t *)(a1 + 8);
  v5 = (uint64_t *)(a1 + 624);
  bzero((void *)(a1 + 8), 0x260uLL);
  bzero(v5, 0xBB4uLL);
  if ((*(_BYTE *)(a2 + 3616) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 616);
    *(_BYTE *)(a1 + 3616) = 1;
    *(_QWORD *)(a1 + 616) = v6;
  }
  if (*(_QWORD *)(a2 + 1168))
  {
    v7 = operator new();
    v8 = sub_21B74A7E0(v7, *(_QWORD *)(a2 + 1168));
    v9 = *(_QWORD *)(a1 + 1168);
    *(_QWORD *)(a1 + 1168) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*(_QWORD *)(a2 + 1160))
  {
    v10 = operator new();
    v11 = sub_21B749ADC(v10, *(_QWORD *)(a2 + 1160));
    v12 = *(_QWORD *)(a1 + 1160);
    *(_QWORD *)(a1 + 1160) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*(_QWORD *)(a2 + 1136))
  {
    v13 = operator new();
    v14 = sub_21B748604(v13, *(_QWORD *)(a2 + 1136));
    v15 = *(_QWORD *)(a1 + 1136);
    *(_QWORD *)(a1 + 1136) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (*(_QWORD *)(a2 + 1128))
  {
    v16 = operator new();
    v17 = sub_21B7480A4(v16, *(_QWORD *)(a2 + 1128));
    v18 = *(_QWORD *)(a1 + 1128);
    *(_QWORD *)(a1 + 1128) = v19;
    if (v18)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v18 + 8))(v18, v17);
  }
  if (*(_QWORD *)(a2 + 680))
  {
    v20 = (_QWORD *)operator new();
    v21 = sub_21B7C3118(v20, *(_QWORD *)(a2 + 680));
    v22 = *(_QWORD *)(a1 + 680);
    *(_QWORD *)(a1 + 680) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (*(_QWORD *)(a2 + 672))
  {
    v23 = operator new();
    v24 = sub_21B7C2078(v23, *(_QWORD *)(a2 + 672));
    v25 = *(_QWORD *)(a1 + 672);
    *(_QWORD *)(a1 + 672) = v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (*(_QWORD *)(a2 + 728))
  {
    v26 = (_QWORD *)operator new();
    v27 = sub_21B7C56EC(v26, *(_QWORD *)(a2 + 728));
    v28 = *(_QWORD *)(a1 + 728);
    *(_QWORD *)(a1 + 728) = v27;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (*(_QWORD *)(a2 + 720))
  {
    v29 = operator new();
    v30 = sub_21B7C52E0(v29, *(_QWORD *)(a2 + 720));
    v31 = *(_QWORD *)(a1 + 720);
    *(_QWORD *)(a1 + 720) = v32;
    if (v31)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v31 + 8))(v31, v30);
  }
  if (*(_QWORD *)(a2 + 1440))
  {
    v33 = (_QWORD *)operator new();
    v34 = sub_21B75AFC0(v33, *(_QWORD **)(a2 + 1440));
    v35 = *(_QWORD *)(a1 + 1440);
    *(_QWORD *)(a1 + 1440) = v34;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if (*(_QWORD *)(a2 + 760))
  {
    v36 = operator new();
    v37 = sub_21B7C8318(v36, *(_QWORD *)(a2 + 760));
    v38 = *(_QWORD *)(a1 + 760);
    *(_QWORD *)(a1 + 760) = v37;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (*(_QWORD *)(a2 + 88))
  {
    v39 = operator new();
    v40 = sub_21B79CA08(v39, *(_QWORD *)(a2 + 88));
    v41 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v40;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  if (*(_QWORD *)(a2 + 144))
  {
    v42 = operator new();
    v43 = sub_21B79F9CC(v42, *(_QWORD *)(a2 + 144));
    v44 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v43;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  }
  if (*(_QWORD *)(a2 + 216))
  {
    v45 = operator new();
    v46 = sub_21B7A4464(v45, *(_QWORD *)(a2 + 216));
    v47 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v46;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  if (*(_QWORD *)(a2 + 3448))
  {
    v48 = operator new();
    v49 = sub_21B82D8EC(v48, *(_QWORD *)(a2 + 3448));
    v50 = *(_QWORD *)(a1 + 3448);
    *(_QWORD *)(a1 + 3448) = v49;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
  if (*(_QWORD *)(a2 + 3472))
  {
    v51 = operator new();
    v52 = sub_21B82E2E8(v51, *(_QWORD *)(a2 + 3472));
    v53 = *(_QWORD *)(a1 + 3472);
    *(_QWORD *)(a1 + 3472) = v52;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  if (*(_QWORD *)(a2 + 3488))
  {
    v54 = operator new();
    v55 = sub_21B82E990(v54, *(_QWORD *)(a2 + 3488));
    v56 = *(_QWORD *)(a1 + 3488);
    *(_QWORD *)(a1 + 3488) = v55;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  }
  if (*(_QWORD *)(a2 + 3520))
  {
    v57 = operator new();
    v58 = sub_21B82F80C(v57, *(_QWORD *)(a2 + 3520));
    v59 = *(_QWORD *)(a1 + 3520);
    *(_QWORD *)(a1 + 3520) = v58;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  }
  if (*(_QWORD *)(a2 + 3552))
  {
    v60 = operator new();
    v61 = sub_21B83055C(v60, *(_QWORD *)(a2 + 3552));
    v62 = *(_QWORD *)(a1 + 3552);
    *(_QWORD *)(a1 + 3552) = v61;
    if (v62)
      (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  }
  if (*(_QWORD *)(a2 + 3536))
  {
    v63 = operator new();
    v64 = sub_21B82FEB4(v63, *(_QWORD *)(a2 + 3536));
    v65 = *(_QWORD *)(a1 + 3536);
    *(_QWORD *)(a1 + 3536) = v64;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  if (*(_QWORD *)(a2 + 3584))
  {
    v66 = operator new();
    v67 = sub_21B831314(v66, *(_QWORD *)(a2 + 3584));
    v68 = *(_QWORD *)(a1 + 3584);
    *(_QWORD *)(a1 + 3584) = v67;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  }
  if (*(_QWORD *)(a2 + 3320))
  {
    v69 = operator new();
    v70 = sub_21B81C570(v69, *(_QWORD *)(a2 + 3320));
    v71 = *(_QWORD *)(a1 + 3320);
    *(_QWORD *)(a1 + 3320) = v72;
    if (v71)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v71 + 8))(v71, v70);
  }
  if (*(_QWORD *)(a2 + 544))
  {
    v73 = (_QWORD *)operator new();
    v74 = sub_21B7B7FC4(v73, *(_QWORD *)(a2 + 544));
    v75 = *(_QWORD *)(a1 + 544);
    *(_QWORD *)(a1 + 544) = v74;
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  }
  if (*(_QWORD *)(a2 + 552))
  {
    v76 = operator new();
    v77 = sub_21B7B8450(v76, *(_QWORD *)(a2 + 552));
    v78 = *(_QWORD *)(a1 + 552);
    *(_QWORD *)(a1 + 552) = v77;
    if (v78)
      (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  }
  if (*(_QWORD *)(a2 + 560))
  {
    v79 = (_QWORD *)operator new();
    v80 = sub_21B7B8B88(v79, *(_QWORD *)(a2 + 560));
    v81 = *(_QWORD *)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v80;
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  }
  if (*(_QWORD *)(a2 + 536))
  {
    v82 = (_QWORD *)operator new();
    v83 = sub_21B7B79AC(v82, *(_QWORD *)(a2 + 536));
    v84 = *(_QWORD *)(a1 + 536);
    *(_QWORD *)(a1 + 536) = v83;
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  }
  if (*(_QWORD *)(a2 + 568))
  {
    v85 = operator new();
    v86 = sub_21B7B8FD0(v85, *(_QWORD *)(a2 + 568));
    v87 = *(_QWORD *)(a1 + 568);
    *(_QWORD *)(a1 + 568) = v88;
    if (v87)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v87 + 8))(v87, v86);
  }
  if (*(_QWORD *)(a2 + 3512))
  {
    v89 = operator new();
    v90 = sub_21B82F318(v89, *(_QWORD *)(a2 + 3512));
    v91 = *(_QWORD *)(a1 + 3512);
    *(_QWORD *)(a1 + 3512) = v92;
    if (v91)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v91 + 8))(v91, v90);
  }
  if (*(_QWORD *)(a2 + 2304))
  {
    v93 = operator new();
    v94 = sub_21B8550A4(v93, *(_QWORD *)(a2 + 2304));
    v95 = *(_QWORD *)(a1 + 2304);
    *(_QWORD *)(a1 + 2304) = v94;
    if (v95)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
  }
  if (*(_QWORD *)(a2 + 2720))
  {
    v96 = operator new();
    v97 = sub_21B86D678(v96, *(_QWORD *)(a2 + 2720));
    v98 = *(_QWORD *)(a1 + 2720);
    *(_QWORD *)(a1 + 2720) = v99;
    if (v98)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v98 + 8))(v98, v97);
  }
  if (*(_QWORD *)(a2 + 3568))
  {
    v100 = operator new();
    v101 = sub_21B830C54(v100, *(_QWORD *)(a2 + 3568));
    v102 = *(_QWORD *)(a1 + 3568);
    *(_QWORD *)(a1 + 3568) = v101;
    if (v102)
      (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  }
  if (*(_QWORD *)(a2 + 3400))
  {
    v103 = operator new();
    v104 = sub_21B82A394(v103, *(_QWORD *)(a2 + 3400));
    v105 = *(_QWORD *)(a1 + 3400);
    *(_QWORD *)(a1 + 3400) = v104;
    if (v105)
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  }
  if (*(_QWORD *)(a2 + 608))
  {
    v106 = operator new();
    v107 = sub_21B7BD010(v106, *(_QWORD *)(a2 + 608));
    v108 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 608) = v107;
    if (v108)
      (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
  }
  if (*(_QWORD *)(a2 + 3416))
  {
    v109 = operator new();
    v110 = sub_21B82B8AC(v109, *(_QWORD *)(a2 + 3416));
    v111 = *(_QWORD *)(a1 + 3416);
    *(_QWORD *)(a1 + 3416) = v110;
    if (v111)
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  }
  if (*(_QWORD *)(a2 + 1408))
  {
    v112 = operator new();
    v113 = sub_21B7587DC(v112, *(_QWORD *)(a2 + 1408));
    v114 = *(_QWORD *)(a1 + 1408);
    *(_QWORD *)(a1 + 1408) = v113;
    if (v114)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
  }
  if (*(_QWORD *)(a2 + 1392))
  {
    v115 = operator new();
    v116 = sub_21B757698(v115, *(_QWORD *)(a2 + 1392));
    v117 = *(_QWORD *)(a1 + 1392);
    *(_QWORD *)(a1 + 1392) = v116;
    if (v117)
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
  }
  if (*(_QWORD *)(a2 + 1352))
  {
    v118 = operator new();
    v119 = sub_21B754374(v118, *(_QWORD *)(a2 + 1352));
    v120 = *(_QWORD *)(a1 + 1352);
    *(_QWORD *)(a1 + 1352) = v119;
    if (v120)
      (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  }
  if (*(_QWORD *)(a2 + 224))
  {
    v121 = operator new();
    v122 = sub_21B7A5134(v121, *(_QWORD *)(a2 + 224));
    v123 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 224) = v122;
    if (v123)
      (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  }
  if (*(_QWORD *)(a2 + 232))
  {
    v124 = operator new();
    v125 = sub_21B7A6024(v124, *(_QWORD *)(a2 + 232));
    v126 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)(a1 + 232) = v125;
    if (v126)
      (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  }
  if (*(_QWORD *)(a2 + 272))
  {
    v127 = operator new();
    v128 = sub_21B7A8A90(v127, *(_QWORD *)(a2 + 272));
    v129 = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 272) = v128;
    if (v129)
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  }
  if (*(_QWORD *)(a2 + 912))
  {
    v130 = operator new();
    v131 = sub_21B7D5E48(v130, *(_QWORD *)(a2 + 912));
    v132 = *(_QWORD *)(a1 + 912);
    *(_QWORD *)(a1 + 912) = v133;
    if (v132)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v132 + 8))(v132, v131);
  }
  if (*(_QWORD *)(a2 + 3576))
  {
    v134 = operator new();
    v135 = sub_21B830FB4(v134, *(_QWORD *)(a2 + 3576));
    v136 = *(_QWORD *)(a1 + 3576);
    *(_QWORD *)(a1 + 3576) = v135;
    if (v136)
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  }
  if (*(_QWORD *)(a2 + 3544))
  {
    v137 = operator new();
    v138 = sub_21B830208(v137, *(_QWORD *)(a2 + 3544));
    v139 = *(_QWORD *)(a1 + 3544);
    *(_QWORD *)(a1 + 3544) = v138;
    if (v139)
      (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
  }
  if (*(_QWORD *)(a2 + 1344))
  {
    v140 = operator new();
    v141 = sub_21B753C50(v140, *(_QWORD *)(a2 + 1344));
    v142 = *(_QWORD *)(a1 + 1344);
    *(_QWORD *)(a1 + 1344) = v141;
    if (v142)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
  }
  if (*(_QWORD *)(a2 + 128))
  {
    v143 = operator new();
    v144 = sub_21B79EC98(v143, *(_QWORD *)(a2 + 128));
    v145 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v144;
    if (v145)
      (*(void (**)(uint64_t))(*(_QWORD *)v145 + 8))(v145);
  }
  if (*(_QWORD *)(a2 + 3280))
  {
    v146 = operator new();
    v147 = sub_21B8221F0(v146, *(_QWORD *)(a2 + 3280));
    v148 = *(_QWORD *)(a1 + 3280);
    *(_QWORD *)(a1 + 3280) = v147;
    if (v148)
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  }
  if (*(_QWORD *)(a2 + 352))
  {
    v149 = operator new();
    v150 = sub_21B799B5C(v149, *(_QWORD *)(a2 + 352));
    v151 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v150;
    if (v151)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  }
  if (*(_QWORD *)(a2 + 3256))
  {
    v152 = operator new();
    v153 = sub_21B81927C(v152, *(_QWORD *)(a2 + 3256));
    v154 = *(_QWORD *)(a1 + 3256);
    *(_QWORD *)(a1 + 3256) = v153;
    if (v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  }
  if (*(_QWORD *)(a2 + 1880))
  {
    v155 = operator new();
    v156 = sub_21B794350(v155, *(_QWORD *)(a2 + 1880));
    v157 = *(_QWORD *)(a1 + 1880);
    *(_QWORD *)(a1 + 1880) = v156;
    if (v157)
      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  }
  if (*(_QWORD *)(a2 + 1000))
  {
    v158 = operator new();
    v159 = sub_21B73AE80(v158, *(_QWORD *)(a2 + 1000));
    v160 = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v159;
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
  }
  if (*(_QWORD *)(a2 + 80))
  {
    v161 = operator new();
    v162 = sub_21B79C560(v161, *(_QWORD *)(a2 + 80));
    v163 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v164;
    if (v163)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v163 + 8))(v163, v162);
  }
  if (*(_QWORD *)(a2 + 2072))
  {
    v165 = operator new();
    v166 = sub_21B846890(v165, *(_QWORD *)(a2 + 2072));
    v167 = *(_QWORD *)(a1 + 2072);
    *(_QWORD *)(a1 + 2072) = v168;
    if (v167)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v167 + 8))(v167, v166);
  }
  if (*(_QWORD *)(a2 + 3032))
  {
    v169 = operator new();
    v170 = sub_21B80E1D0(v169, *(_QWORD *)(a2 + 3032));
    v171 = *(_QWORD *)(a1 + 3032);
    *(_QWORD *)(a1 + 3032) = v170;
    if (v171)
      (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  }
  if (*(_QWORD *)(a2 + 1960))
  {
    v172 = operator new();
    v173 = sub_21B839A08(v172, *(_QWORD *)(a2 + 1960));
    v174 = *(_QWORD *)(a1 + 1960);
    *(_QWORD *)(a1 + 1960) = v175;
    if (v174)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v174 + 8))(v174, v173);
  }
  if (*(_QWORD *)(a2 + 712))
  {
    v176 = operator new();
    v177 = sub_21B7C416C(v176, *(_QWORD *)(a2 + 712));
    v178 = *(_QWORD *)(a1 + 712);
    *(_QWORD *)(a1 + 712) = v179;
    if (v178)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v178 + 8))(v178, v177);
  }
  if (*(_QWORD *)(a2 + 3264))
  {
    v180 = operator new();
    v181 = sub_21B81B2F0(v180, *(_QWORD *)(a2 + 3264));
    v182 = *(_QWORD *)(a1 + 3264);
    *(_QWORD *)(a1 + 3264) = v181;
    if (v182)
      (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
  }
  if (*(_QWORD *)(a2 + 2848))
  {
    v183 = operator new();
    v184 = sub_21B802720(v183, *(_QWORD *)(a2 + 2848));
    v185 = *(_QWORD *)(a1 + 2848);
    *(_QWORD *)(a1 + 2848) = v184;
    if (v185)
      (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  }
  if (*(_QWORD *)(a2 + 3272))
  {
    v186 = operator new();
    v187 = sub_21B81BCEC(v186, *(_QWORD *)(a2 + 3272));
    v188 = *(_QWORD *)(a1 + 3272);
    *(_QWORD *)(a1 + 3272) = v187;
    if (v188)
      (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  }
  if (*(_QWORD *)(a2 + 3312))
  {
    v189 = operator new();
    v190 = sub_21B8243B4(v189, *(_QWORD *)(a2 + 3312));
    v191 = *(_QWORD *)(a1 + 3312);
    *(_QWORD *)(a1 + 3312) = v190;
    if (v191)
      (*(void (**)(uint64_t))(*(_QWORD *)v191 + 8))(v191);
  }
  if (*(_QWORD *)(a2 + 1752))
  {
    v192 = operator new();
    v193 = sub_21B78FCC4(v192, *(_QWORD *)(a2 + 1752));
    v194 = *(_QWORD *)(a1 + 1752);
    *(_QWORD *)(a1 + 1752) = v193;
    if (v194)
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  }
  if (*(_QWORD *)(a2 + 1552))
  {
    v195 = operator new();
    v196 = sub_21B767F38(v195, *(_QWORD *)(a2 + 1552));
    v197 = *(_QWORD *)(a1 + 1552);
    *(_QWORD *)(a1 + 1552) = v196;
    if (v197)
      (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  }
  if (*(_QWORD *)(a2 + 1328))
  {
    v198 = (_QWORD *)operator new();
    v199 = sub_21B7525F4(v198, *(_QWORD *)(a2 + 1328));
    v200 = *(_QWORD *)(a1 + 1328);
    *(_QWORD *)(a1 + 1328) = v199;
    if (v200)
      (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  }
  if (*(_QWORD *)(a2 + 1720))
  {
    v201 = operator new();
    v202 = sub_21B78AABC(v201, *(_QWORD *)(a2 + 1720));
    v203 = *(_QWORD *)(a1 + 1720);
    *(_QWORD *)(a1 + 1720) = v202;
    if (v203)
      (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  }
  if (*(_QWORD *)(a2 + 3176))
  {
    v204 = operator new();
    v205 = sub_21B802A24(v204, *(_QWORD *)(a2 + 3176));
    v206 = *(_QWORD *)(a1 + 3176);
    *(_QWORD *)(a1 + 3176) = v205;
    if (v206)
      (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  }
  if (*(_QWORD *)(a2 + 1680))
  {
    v207 = operator new();
    v208 = sub_21B77D5D8(v207, *(_QWORD *)(a2 + 1680));
    v209 = *(_QWORD *)(a1 + 1680);
    *(_QWORD *)(a1 + 1680) = v208;
    if (v209)
      (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
  }
  if (*(_QWORD *)(a2 + 3184))
  {
    v210 = operator new();
    v211 = sub_21B818BD8(v210, *(_QWORD *)(a2 + 3184));
    v212 = *(_QWORD *)(a1 + 3184);
    *(_QWORD *)(a1 + 3184) = v211;
    if (v212)
      (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
  }
  if (*(_QWORD *)(a2 + 376))
  {
    v213 = operator new();
    v214 = sub_21B7ACF5C(v213, *(_QWORD *)(a2 + 376));
    v215 = *(_QWORD *)(a1 + 376);
    *(_QWORD *)(a1 + 376) = v214;
    if (v215)
      (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  }
  if (*(_QWORD *)(a2 + 3128))
  {
    v216 = operator new();
    v217 = sub_21B815738(v216, *(_QWORD *)(a2 + 3128));
    v218 = *(_QWORD *)(a1 + 3128);
    *(_QWORD *)(a1 + 3128) = v217;
    if (v218)
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  }
  if (*(_QWORD *)(a2 + 368))
  {
    v219 = operator new();
    v220 = sub_21B7ACF60(v219, *(_QWORD *)(a2 + 368));
    v221 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v220;
    if (v221)
      (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
  }
  if (*(_QWORD *)(a2 + 3136))
  {
    v222 = operator new();
    v223 = sub_21B816430(v222, *(_QWORD *)(a2 + 3136));
    v224 = *(_QWORD *)(a1 + 3136);
    *(_QWORD *)(a1 + 3136) = v223;
    if (v224)
      (*(void (**)(uint64_t))(*(_QWORD *)v224 + 8))(v224);
  }
  if (*(_QWORD *)(a2 + 3456))
  {
    v225 = operator new();
    v226 = sub_21B82DC40(v225, *(_QWORD *)(a2 + 3456));
    v227 = *(_QWORD *)(a1 + 3456);
    *(_QWORD *)(a1 + 3456) = v226;
    if (v227)
      (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
  }
  if (*(_QWORD *)(a2 + 296))
  {
    v228 = operator new();
    v229 = sub_21B7987C8(v228, *(_QWORD *)(a2 + 296));
    v230 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = v231;
    if (v230)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v230 + 8))(v230, v229);
  }
  if (*(_QWORD *)(a2 + 3440))
  {
    v232 = operator new();
    v233 = sub_21B82D598(v232, *(_QWORD *)(a2 + 3440));
    v234 = *(_QWORD *)(a1 + 3440);
    *(_QWORD *)(a1 + 3440) = v233;
    if (v234)
      (*(void (**)(uint64_t))(*(_QWORD *)v234 + 8))(v234);
  }
  if (*(_QWORD *)(a2 + 3288))
  {
    v235 = operator new();
    v236 = sub_21B822D80(v235, *(_QWORD *)(a2 + 3288));
    v237 = *(_QWORD *)(a1 + 3288);
    *(_QWORD *)(a1 + 3288) = v236;
    if (v237)
      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  }
  if (*(_QWORD *)(a2 + 1240))
  {
    v238 = operator new();
    v239 = sub_21B74DFA0(v238, *(_QWORD *)(a2 + 1240));
    v240 = *(_QWORD *)(a1 + 1240);
    *(_QWORD *)(a1 + 1240) = v241;
    if (v240)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v240 + 8))(v240, v239);
  }
  if (*(_QWORD *)(a2 + 2936))
  {
    v242 = operator new();
    v243 = sub_21B807998(v242, *(_QWORD *)(a2 + 2936));
    v244 = *(_QWORD *)(a1 + 2936);
    *(_QWORD *)(a1 + 2936) = v243;
    if (v244)
      (*(void (**)(uint64_t))(*(_QWORD *)v244 + 8))(v244);
  }
  if (*(_QWORD *)(a2 + 1048))
  {
    v245 = operator new();
    v246 = sub_21B741BFC(v245, *(_QWORD *)(a2 + 1048));
    v247 = *(_QWORD *)(a1 + 1048);
    *(_QWORD *)(a1 + 1048) = v246;
    if (v247)
      (*(void (**)(uint64_t))(*(_QWORD *)v247 + 8))(v247);
  }
  if (*(_QWORD *)(a2 + 872))
  {
    v248 = operator new();
    v249 = sub_21B7D2EB0(v248, *(_QWORD *)(a2 + 872));
    v250 = *(_QWORD *)(a1 + 872);
    *(_QWORD *)(a1 + 872) = v249;
    if (v250)
      (*(void (**)(uint64_t))(*(_QWORD *)v250 + 8))(v250);
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v251 = (_QWORD *)operator new();
    v252 = sub_21B79A4F4(v251, *(_QWORD *)(a2 + 32));
    v253 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v252;
    if (v253)
      (*(void (**)(uint64_t))(*(_QWORD *)v253 + 8))(v253);
  }
  if (*(_QWORD *)(a2 + 2024))
  {
    v254 = operator new();
    v255 = sub_21B8411A4(v254, *(_QWORD *)(a2 + 2024));
    v256 = *(_QWORD *)(a1 + 2024);
    *(_QWORD *)(a1 + 2024) = v255;
    if (v256)
      (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  }
  if (*(_QWORD *)(a2 + 1984))
  {
    v257 = operator new();
    v258 = sub_21B83C910(v257, *(_QWORD *)(a2 + 1984));
    v259 = *(_QWORD *)(a1 + 1984);
    *(_QWORD *)(a1 + 1984) = v258;
    if (v259)
      (*(void (**)(uint64_t))(*(_QWORD *)v259 + 8))(v259);
  }
  if (*(_QWORD *)(a2 + 496))
  {
    v260 = operator new();
    v261 = sub_21B7B4EF8(v260, *(_QWORD *)(a2 + 496));
    v262 = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 496) = v261;
    if (v262)
      (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  }
  if (*(_QWORD *)(a2 + 1736))
  {
    v263 = operator new();
    v264 = sub_21B78C1BC(v263, *(_QWORD *)(a2 + 1736));
    v265 = *(_QWORD *)(a1 + 1736);
    *(_QWORD *)(a1 + 1736) = v264;
    if (v265)
      (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  }
  if (*(_QWORD *)(a2 + 2664))
  {
    v266 = operator new();
    v267 = sub_21B866F28(v266, *(_QWORD *)(a2 + 2664));
    v268 = *(_QWORD *)(a1 + 2664);
    *(_QWORD *)(a1 + 2664) = v267;
    if (v268)
      (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  }
  if (*(_QWORD *)(a2 + 1464))
  {
    v269 = (_QWORD *)operator new();
    v270 = sub_21B75B94C(v269, *(_QWORD *)(a2 + 1464));
    v271 = *(_QWORD *)(a1 + 1464);
    *(_QWORD *)(a1 + 1464) = v270;
    if (v271)
      (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  }
  if (*(_QWORD *)(a2 + 704))
  {
    v272 = (_QWORD *)operator new();
    v273 = sub_21B7C3C80(v272, *(_QWORD *)(a2 + 704));
    v274 = *(_QWORD *)(a1 + 704);
    *(_QWORD *)(a1 + 704) = v273;
    if (v274)
      (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  }
  if (*(_QWORD *)(a2 + 1208))
  {
    v275 = operator new();
    v276 = sub_21B74CAF4(v275, *(_QWORD *)(a2 + 1208));
    v277 = *(_QWORD *)(a1 + 1208);
    *(_QWORD *)(a1 + 1208) = v278;
    if (v277)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v277 + 8))(v277, v276);
  }
  if (*(_QWORD *)(a2 + 1216))
  {
    v279 = operator new();
    v280 = sub_21B74CFD8(v279, *(_QWORD *)(a2 + 1216));
    v281 = *(_QWORD *)(a1 + 1216);
    *(_QWORD *)(a1 + 1216) = v280;
    if (v281)
      (*(void (**)(uint64_t))(*(_QWORD *)v281 + 8))(v281);
  }
  if (*(_QWORD *)(a2 + 1200))
  {
    v282 = (_QWORD *)operator new();
    v283 = sub_21B74C684(v282, *(_QWORD *)(a2 + 1200));
    v284 = *(_QWORD *)(a1 + 1200);
    *(_QWORD *)(a1 + 1200) = v283;
    if (v284)
      (*(void (**)(uint64_t))(*(_QWORD *)v284 + 8))(v284);
  }
  if (*(_QWORD *)(a2 + 1192))
  {
    v285 = (_QWORD *)operator new();
    v286 = sub_21B74C06C(v285, *(_QWORD *)(a2 + 1192));
    v287 = *(_QWORD *)(a1 + 1192);
    *(_QWORD *)(a1 + 1192) = v286;
    if (v287)
      (*(void (**)(uint64_t))(*(_QWORD *)v287 + 8))(v287);
  }
  if (*(_QWORD *)(a2 + 472))
  {
    v288 = operator new();
    v289 = sub_21B7B3598(v288, *(_QWORD *)(a2 + 472));
    v290 = *(_QWORD *)(a1 + 472);
    *(_QWORD *)(a1 + 472) = v291;
    if (v290)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v290 + 8))(v290, v289);
  }
  if (*(_QWORD *)(a2 + 1056))
  {
    v292 = (_QWORD *)operator new();
    v293 = sub_21B7423C8(v292, *(_QWORD *)(a2 + 1056));
    v294 = *(_QWORD *)(a1 + 1056);
    *(_QWORD *)(a1 + 1056) = v293;
    if (v294)
      (*(void (**)(uint64_t))(*(_QWORD *)v294 + 8))(v294);
  }
  if (*(_QWORD *)(a2 + 1976))
  {
    v295 = operator new();
    v296 = sub_21B83C390(v295, *(_QWORD *)(a2 + 1976));
    v297 = *(_QWORD *)(a1 + 1976);
    *(_QWORD *)(a1 + 1976) = v296;
    if (v297)
      (*(void (**)(uint64_t))(*(_QWORD *)v297 + 8))(v297);
  }
  if (*(_QWORD *)(a2 + 1888))
  {
    v298 = operator new();
    v299 = sub_21B835E5C(v298, *(_QWORD *)(a2 + 1888));
    v300 = *(_QWORD *)(a1 + 1888);
    *(_QWORD *)(a1 + 1888) = v299;
    if (v300)
      (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
  }
  if (*(_QWORD *)(a2 + 2432))
  {
    v301 = operator new();
    v302 = sub_21B85CD34(v301, *(_QWORD *)(a2 + 2432));
    v303 = *(_QWORD *)(a1 + 2432);
    *(_QWORD *)(a1 + 2432) = v302;
    if (v303)
      (*(void (**)(uint64_t))(*(_QWORD *)v303 + 8))(v303);
  }
  if (*(_QWORD *)(a2 + 2440))
  {
    v304 = operator new();
    v305 = sub_21B85D544(v304, *(_QWORD *)(a2 + 2440));
    v306 = *(_QWORD *)(a1 + 2440);
    *(_QWORD *)(a1 + 2440) = v305;
    if (v306)
      (*(void (**)(uint64_t))(*(_QWORD *)v306 + 8))(v306);
  }
  if (*(_QWORD *)(a2 + 504))
  {
    v307 = operator new();
    v308 = sub_21B7B5F60(v307, *(_QWORD *)(a2 + 504));
    v309 = *(_QWORD *)(a1 + 504);
    *(_QWORD *)(a1 + 504) = v308;
    if (v309)
      (*(void (**)(uint64_t))(*(_QWORD *)v309 + 8))(v309);
  }
  if (*(_QWORD *)(a2 + 1472))
  {
    v310 = (_QWORD *)operator new();
    v311 = sub_21B75BCA0(v310, *(_QWORD *)(a2 + 1472));
    v312 = *(_QWORD *)(a1 + 1472);
    *(_QWORD *)(a1 + 1472) = v311;
    if (v312)
      (*(void (**)(uint64_t))(*(_QWORD *)v312 + 8))(v312);
  }
  if (*(_QWORD *)(a2 + 696))
  {
    v313 = (_QWORD *)operator new();
    v314 = sub_21B7C3920(v313, *(_QWORD *)(a2 + 696));
    v315 = *(_QWORD *)(a1 + 696);
    *(_QWORD *)(a1 + 696) = v314;
    if (v315)
      (*(void (**)(uint64_t))(*(_QWORD *)v315 + 8))(v315);
  }
  if (*(_QWORD *)(a2 + 2544))
  {
    v316 = operator new();
    v317 = sub_21B862734(v316, *(_QWORD *)(a2 + 2544));
    v318 = *(_QWORD *)(a1 + 2544);
    *(_QWORD *)(a1 + 2544) = v317;
    if (v318)
      (*(void (**)(uint64_t))(*(_QWORD *)v318 + 8))(v318);
  }
  if (*(_QWORD *)(a2 + 3328))
  {
    v319 = operator new();
    v320 = sub_21B81D594(v319, *(_QWORD *)(a2 + 3328));
    v321 = *(_QWORD *)(a1 + 3328);
    *(_QWORD *)(a1 + 3328) = v320;
    if (v321)
      (*(void (**)(uint64_t))(*(_QWORD *)v321 + 8))(v321);
  }
  if (*(_QWORD *)(a2 + 1904))
  {
    v322 = operator new();
    v323 = sub_21B836664(v322, *(_QWORD *)(a2 + 1904));
    v324 = *(_QWORD *)(a1 + 1904);
    *(_QWORD *)(a1 + 1904) = v323;
    if (v324)
      (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  }
  if (*(_QWORD *)(a2 + 1912))
  {
    v325 = operator new();
    v326 = sub_21B836A78(v325, *(_QWORD *)(a2 + 1912));
    v327 = *(_QWORD *)(a1 + 1912);
    *(_QWORD *)(a1 + 1912) = v326;
    if (v327)
      (*(void (**)(uint64_t))(*(_QWORD *)v327 + 8))(v327);
  }
  if (*(_QWORD *)(a2 + 2536))
  {
    v328 = operator new();
    v329 = sub_21B86218C(v328, *(_QWORD *)(a2 + 2536));
    v330 = *(_QWORD *)(a1 + 2536);
    *(_QWORD *)(a1 + 2536) = v331;
    if (v330)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v330 + 8))(v330, v329);
  }
  if (*(_QWORD *)(a2 + 3528))
  {
    v332 = operator new();
    v333 = sub_21B82FB60(v332, *(_QWORD *)(a2 + 3528));
    v334 = *(_QWORD *)(a1 + 3528);
    *(_QWORD *)(a1 + 3528) = v333;
    if (v334)
      (*(void (**)(uint64_t))(*(_QWORD *)v334 + 8))(v334);
  }
  if (*(_QWORD *)(a2 + 3480))
  {
    v335 = operator new();
    v336 = sub_21B82E63C(v335, *(_QWORD *)(a2 + 3480));
    v337 = *(_QWORD *)(a1 + 3480);
    *(_QWORD *)(a1 + 3480) = v336;
    if (v337)
      (*(void (**)(uint64_t))(*(_QWORD *)v337 + 8))(v337);
  }
  if (*(_QWORD *)(a2 + 2656))
  {
    v338 = operator new();
    v339 = sub_21B86688C(v338, *(_QWORD *)(a2 + 2656));
    v340 = *(_QWORD *)(a1 + 2656);
    *(_QWORD *)(a1 + 2656) = v339;
    if (v340)
      (*(void (**)(uint64_t))(*(_QWORD *)v340 + 8))(v340);
  }
  if (*(_QWORD *)(a2 + 584))
  {
    v341 = operator new();
    v342 = sub_21B7B9A10(v341, *(_QWORD *)(a2 + 584));
    v343 = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a1 + 584) = v342;
    if (v343)
      (*(void (**)(uint64_t))(*(_QWORD *)v343 + 8))(v343);
  }
  if (*(_QWORD *)(a2 + 480))
  {
    v344 = operator new();
    v345 = sub_21B7B3BC8(v344, *(_QWORD *)(a2 + 480));
    v346 = *(_QWORD *)(a1 + 480);
    *(_QWORD *)(a1 + 480) = v345;
    if (v346)
      (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
  }
  if (*(_QWORD *)(a2 + 488))
  {
    v347 = operator new();
    v348 = sub_21B7B4920(v347, *(_QWORD *)(a2 + 488));
    v349 = *(_QWORD *)(a1 + 488);
    *(_QWORD *)(a1 + 488) = v348;
    if (v349)
      (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
  }
  if (*(_QWORD *)(a2 + 2128))
  {
    v350 = operator new();
    v351 = sub_21B849F88(v350, *(_QWORD *)(a2 + 2128));
    v352 = *(_QWORD *)(a1 + 2128);
    *(_QWORD *)(a1 + 2128) = v351;
    if (v352)
      (*(void (**)(uint64_t))(*(_QWORD *)v352 + 8))(v352);
  }
  if (*(_QWORD *)(a2 + 2392))
  {
    v353 = operator new();
    v354 = sub_21B85AA24(v353, *(_QWORD *)(a2 + 2392));
    v355 = *(_QWORD *)(a1 + 2392);
    *(_QWORD *)(a1 + 2392) = v356;
    if (v355)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v355 + 8))(v355, v354);
  }
  if (*(_QWORD *)(a2 + 2400))
  {
    v357 = operator new();
    v358 = sub_21B85AE94(v357, *(_QWORD *)(a2 + 2400));
    v359 = *(_QWORD *)(a1 + 2400);
    *(_QWORD *)(a1 + 2400) = v360;
    if (v359)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v359 + 8))(v359, v358);
  }
  if (*(_QWORD *)(a2 + 384))
  {
    v361 = operator new();
    v362 = sub_21B7AF22C(v361, *(_QWORD *)(a2 + 384));
    v363 = *(_QWORD *)(a1 + 384);
    *(_QWORD *)(a1 + 384) = v364;
    if (v363)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v363 + 8))(v363, v362);
  }
  if (*(_QWORD *)(a2 + 3144))
  {
    v365 = operator new();
    v366 = sub_21B816DD0(v365, *(_QWORD *)(a2 + 3144));
    v367 = *(_QWORD *)(a1 + 3144);
    *(_QWORD *)(a1 + 3144) = v366;
    if (v367)
      (*(void (**)(uint64_t))(*(_QWORD *)v367 + 8))(v367);
  }
  if (*(_QWORD *)(a2 + 344))
  {
    v368 = (_QWORD *)operator new();
    v369 = sub_21B7ACA18(v368, *(_QWORD *)(a2 + 344));
    v370 = *(_QWORD *)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v369;
    if (v370)
      (*(void (**)(uint64_t))(*(_QWORD *)v370 + 8))(v370);
  }
  if (*(_QWORD *)(a2 + 464))
  {
    v371 = (_QWORD *)operator new();
    v372 = sub_21B7B326C(v371, *(_QWORD *)(a2 + 464));
    v373 = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(a1 + 464) = v372;
    if (v373)
      (*(void (**)(uint64_t))(*(_QWORD *)v373 + 8))(v373);
  }
  if (*(_QWORD *)(a2 + 512))
  {
    v374 = (_QWORD *)operator new();
    v375 = sub_21B7B6480(v374, *(_QWORD *)(a2 + 512));
    v376 = *(_QWORD *)(a1 + 512);
    *(_QWORD *)(a1 + 512) = v375;
    if (v376)
      (*(void (**)(uint64_t))(*(_QWORD *)v376 + 8))(v376);
  }
  if (*(_QWORD *)(a2 + 3360))
  {
    v377 = operator new();
    v378 = sub_21B827A90(v377, *(_QWORD *)(a2 + 3360));
    v379 = *(_QWORD *)(a1 + 3360);
    *(_QWORD *)(a1 + 3360) = v378;
    if (v379)
      (*(void (**)(uint64_t))(*(_QWORD *)v379 + 8))(v379);
  }
  if (*(_QWORD *)(a2 + 3000))
  {
    v380 = operator new();
    v381 = sub_21B80B8B8(v380, *(_QWORD *)(a2 + 3000));
    v382 = *(_QWORD *)(a1 + 3000);
    *(_QWORD *)(a1 + 3000) = v381;
    if (v382)
      (*(void (**)(uint64_t))(*(_QWORD *)v382 + 8))(v382);
  }
  if (*(_QWORD *)(a2 + 2960))
  {
    v383 = operator new();
    v384 = sub_21B808294(v383, *(_QWORD *)(a2 + 2960));
    v385 = *(_QWORD *)(a1 + 2960);
    *(_QWORD *)(a1 + 2960) = v386;
    if (v385)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v385 + 8))(v385, v384);
  }
  if (*(_QWORD *)(a2 + 2984))
  {
    v387 = operator new();
    v388 = sub_21B809E20(v387, *(_QWORD *)(a2 + 2984));
    v389 = *(_QWORD *)(a1 + 2984);
    *(_QWORD *)(a1 + 2984) = v390;
    if (v389)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v389 + 8))(v389, v388);
  }
  if (*(_QWORD *)(a2 + 2976))
  {
    v391 = operator new();
    v392 = sub_21B80915C(v391, *(_QWORD *)(a2 + 2976));
    v393 = *(_QWORD *)(a1 + 2976);
    *(_QWORD *)(a1 + 2976) = v394;
    if (v393)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v393 + 8))(v393, v392);
  }
  if (*(_QWORD *)(a2 + 3008))
  {
    v395 = operator new();
    v396 = sub_21B80C274(v395, *(_QWORD *)(a2 + 3008));
    v397 = *(_QWORD *)(a1 + 3008);
    *(_QWORD *)(a1 + 3008) = v398;
    if (v397)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v397 + 8))(v397, v396);
  }
  if (*(_QWORD *)(a2 + 3016))
  {
    v399 = operator new();
    v400 = sub_21B80C944(v399, *(_QWORD *)(a2 + 3016));
    v401 = *(_QWORD *)(a1 + 3016);
    *(_QWORD *)(a1 + 3016) = v402;
    if (v401)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v401 + 8))(v401, v400);
  }
  if (*(_QWORD *)(a2 + 2968))
  {
    v403 = operator new();
    v404 = sub_21B808B18(v403, *(_QWORD *)(a2 + 2968));
    v405 = *(_QWORD *)(a1 + 2968);
    *(_QWORD *)(a1 + 2968) = v406;
    if (v405)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v405 + 8))(v405, v404);
  }
  if (*(_QWORD *)(a2 + 1936))
  {
    v407 = operator new();
    v408 = sub_21B838050(v407, *(_QWORD *)(a2 + 1936));
    v409 = *(_QWORD *)(a1 + 1936);
    *(_QWORD *)(a1 + 1936) = v408;
    if (v409)
      (*(void (**)(uint64_t))(*(_QWORD *)v409 + 8))(v409);
  }
  if (*(_QWORD *)(a2 + 3560))
  {
    v410 = operator new();
    v411 = sub_21B8308B0(v410, *(_QWORD *)(a2 + 3560));
    v412 = *(_QWORD *)(a1 + 3560);
    *(_QWORD *)(a1 + 3560) = v411;
    if (v412)
      (*(void (**)(uint64_t))(*(_QWORD *)v412 + 8))(v412);
  }
  if (*(_QWORD *)(a2 + 1840))
  {
    v413 = operator new();
    v414 = sub_21B7963DC(v413, *(_QWORD *)(a2 + 1840));
    v415 = *(_QWORD *)(a1 + 1840);
    *(_QWORD *)(a1 + 1840) = v416;
    if (v415)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v415 + 8))(v415, v414);
  }
  if (*(_QWORD *)(a2 + 192))
  {
    v417 = operator new();
    v418 = sub_21B7A15A8(v417, *(_QWORD *)(a2 + 192));
    v419 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v418;
    if (v419)
      (*(void (**)(uint64_t))(*(_QWORD *)v419 + 8))(v419);
  }
  if (*(_QWORD *)(a2 + 3040))
  {
    v420 = operator new();
    v421 = sub_21B80FA5C(v420, *(_QWORD *)(a2 + 3040));
    v422 = *(_QWORD *)(a1 + 3040);
    *(_QWORD *)(a1 + 3040) = v421;
    if (v422)
      (*(void (**)(uint64_t))(*(_QWORD *)v422 + 8))(v422);
  }
  if (*(_QWORD *)(a2 + 3048))
  {
    v423 = operator new();
    v424 = sub_21B8104D4(v423, *(_QWORD *)(a2 + 3048));
    v425 = *(_QWORD *)(a1 + 3048);
    *(_QWORD *)(a1 + 3048) = v424;
    if (v425)
      (*(void (**)(uint64_t))(*(_QWORD *)v425 + 8))(v425);
  }
  if (*(_QWORD *)(a2 + 2904))
  {
    v426 = operator new();
    v427 = sub_21B805AD4(v426, *(_QWORD *)(a2 + 2904));
    v428 = *(_QWORD *)(a1 + 2904);
    *(_QWORD *)(a1 + 2904) = v427;
    if (v428)
      (*(void (**)(uint64_t))(*(_QWORD *)v428 + 8))(v428);
  }
  if (*(_QWORD *)(a2 + 736))
  {
    v429 = operator new();
    v430 = sub_21B7BABD4(v429, *(_QWORD *)(a2 + 736));
    v431 = *(_QWORD *)(a1 + 736);
    *(_QWORD *)(a1 + 736) = v432;
    if (v431)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v431 + 8))(v431, v430);
  }
  if (*(_QWORD *)(a2 + 888))
  {
    v433 = operator new();
    v434 = sub_21B7D45BC(v433, *(_QWORD *)(a2 + 888));
    v435 = *(_QWORD *)(a1 + 888);
    *(_QWORD *)(a1 + 888) = v434;
    if (v435)
      (*(void (**)(uint64_t))(*(_QWORD *)v435 + 8))(v435);
  }
  if (*(_QWORD *)(a2 + 456))
  {
    v436 = operator new();
    v437 = sub_21B7B2408(v436, *(_QWORD *)(a2 + 456));
    v438 = *(_QWORD *)(a1 + 456);
    *(_QWORD *)(a1 + 456) = v437;
    if (v438)
      (*(void (**)(uint64_t))(*(_QWORD *)v438 + 8))(v438);
  }
  if (*(_QWORD *)(a2 + 1872))
  {
    v439 = operator new();
    v440 = sub_21B835B1C(v439, *(_QWORD *)(a2 + 1872));
    v441 = *(_QWORD *)(a1 + 1872);
    *(_QWORD *)(a1 + 1872) = v440;
    if (v441)
      (*(void (**)(uint64_t))(*(_QWORD *)v441 + 8))(v441);
  }
  if (*(_QWORD *)(a2 + 448))
  {
    v442 = operator new();
    v443 = sub_21B7B20E8(v442, *(_QWORD *)(a2 + 448));
    v444 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = v443;
    if (v444)
      (*(void (**)(uint64_t))(*(_QWORD *)v444 + 8))(v444);
  }
  if (*(_QWORD *)(a2 + 2464))
  {
    v445 = operator new();
    v446 = sub_21B85E9AC(v445, *(_QWORD *)(a2 + 2464));
    v447 = *(_QWORD *)(a1 + 2464);
    *(_QWORD *)(a1 + 2464) = v446;
    if (v447)
      (*(void (**)(uint64_t))(*(_QWORD *)v447 + 8))(v447);
  }
  if (*(_QWORD *)(a2 + 1040))
  {
    v448 = operator new();
    v449 = sub_21B74139C(v448, *(_QWORD *)(a2 + 1040));
    v450 = *(_QWORD *)(a1 + 1040);
    *(_QWORD *)(a1 + 1040) = v449;
    if (v450)
      (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  }
  if (*(_QWORD *)(a2 + 784))
  {
    v451 = operator new();
    v452 = sub_21B7C91B0(v451, *(_QWORD *)(a2 + 784));
    v453 = *(_QWORD *)(a1 + 784);
    *(_QWORD *)(a1 + 784) = v452;
    if (v453)
      (*(void (**)(uint64_t))(*(_QWORD *)v453 + 8))(v453);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v454 = (_QWORD *)operator new();
    v455 = sub_21B798DCC(v454);
    v456 = *v4;
    *v4 = (uint64_t)v455;
    if (v456)
      (*(void (**)(uint64_t))(*(_QWORD *)v456 + 8))(v456);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v457 = (_QWORD *)operator new();
    v458 = sub_21B799064(v457, *(_QWORD *)(a2 + 16));
    v459 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v458;
    if (v459)
      (*(void (**)(uint64_t))(*(_QWORD *)v459 + 8))(v459);
  }
  if (*(_QWORD *)(a2 + 320))
  {
    v460 = operator new();
    v461 = sub_21B7AB6A0(v460, *(_QWORD *)(a2 + 320));
    v462 = *(_QWORD *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = v461;
    if (v462)
      (*(void (**)(uint64_t))(*(_QWORD *)v462 + 8))(v462);
  }
  if (*(_QWORD *)(a2 + 1848))
  {
    v463 = operator new();
    v464 = sub_21B833FC0(v463, *(_QWORD *)(a2 + 1848));
    v465 = *(_QWORD *)(a1 + 1848);
    *(_QWORD *)(a1 + 1848) = v466;
    if (v465)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v465 + 8))(v465, v464);
  }
  if (*(_QWORD *)(a2 + 3248))
  {
    v467 = operator new();
    v468 = sub_21B821200(v467, *(_QWORD *)(a2 + 3248));
    v469 = *(_QWORD *)(a1 + 3248);
    *(_QWORD *)(a1 + 3248) = v468;
    if (v469)
      (*(void (**)(uint64_t))(*(_QWORD *)v469 + 8))(v469);
  }
  if (*(_QWORD *)(a2 + 2744))
  {
    v470 = operator new();
    v471 = sub_21B86EE6C(v470, *(_QWORD *)(a2 + 2744));
    v472 = *(_QWORD *)(a1 + 2744);
    *(_QWORD *)(a1 + 2744) = v473;
    if (v472)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v472 + 8))(v472, v471);
  }
  if (*(_QWORD *)(a2 + 3600))
  {
    v474 = operator new();
    v475 = sub_21B831674(v474, *(_QWORD *)(a2 + 3600));
    v476 = *(_QWORD *)(a1 + 3600);
    *(_QWORD *)(a1 + 3600) = v475;
    if (v476)
      (*(void (**)(uint64_t))(*(_QWORD *)v476 + 8))(v476);
  }
  if (*(_QWORD *)(a2 + 3592))
  {
    v477 = operator new();
    v478 = sub_21B831678(v477, *(_QWORD *)(a2 + 3592));
    v479 = *(_QWORD *)(a1 + 3592);
    *(_QWORD *)(a1 + 3592) = v478;
    if (v479)
      (*(void (**)(uint64_t))(*(_QWORD *)v479 + 8))(v479);
  }
  if (*(_QWORD *)(a2 + 360))
  {
    v480 = operator new();
    v481 = sub_21B7993D8(v480, *(_QWORD *)(a2 + 360));
    v482 = *(_QWORD *)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v481;
    if (v482)
      (*(void (**)(uint64_t))(*(_QWORD *)v482 + 8))(v482);
  }
  if (*(_QWORD *)(a2 + 2248))
  {
    v483 = operator new();
    v484 = sub_21B83EBB0(v483, *(_QWORD *)(a2 + 2248));
    v485 = *(_QWORD *)(a1 + 2248);
    *(_QWORD *)(a1 + 2248) = v486;
    if (v485)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v485 + 8))(v485, v484);
  }
  if (*(_QWORD *)(a2 + 2424))
  {
    v487 = operator new();
    v488 = sub_21B85C478(v487, *(_QWORD *)(a2 + 2424));
    v489 = *(_QWORD *)(a1 + 2424);
    *(_QWORD *)(a1 + 2424) = v490;
    if (v489)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v489 + 8))(v489, v488);
  }
  if (*(_QWORD *)(a2 + 1832))
  {
    v491 = operator new();
    v492 = sub_21B795F14(v491, *(_QWORD *)(a2 + 1832));
    v493 = *(_QWORD *)(a1 + 1832);
    *(_QWORD *)(a1 + 1832) = v494;
    if (v493)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v493 + 8))(v493, v492);
  }
  if (*(_QWORD *)(a2 + 1856))
  {
    v495 = operator new();
    v496 = sub_21B834558(v495, *(_QWORD *)(a2 + 1856));
    v497 = *(_QWORD *)(a1 + 1856);
    *(_QWORD *)(a1 + 1856) = v496;
    if (v497)
      (*(void (**)(uint64_t))(*(_QWORD *)v497 + 8))(v497);
  }
  if (*(_QWORD *)(a2 + 2752))
  {
    v498 = operator new();
    v499 = sub_21B870788(v498, *(_QWORD *)(a2 + 2752));
    v500 = *(_QWORD *)(a1 + 2752);
    *(_QWORD *)(a1 + 2752) = v499;
    if (v500)
      (*(void (**)(uint64_t))(*(_QWORD *)v500 + 8))(v500);
  }
  if (*(_QWORD *)(a2 + 408))
  {
    v501 = operator new();
    v502 = sub_21B7AFF6C(v501, *(_QWORD *)(a2 + 408));
    v503 = *(_QWORD *)(a1 + 408);
    *(_QWORD *)(a1 + 408) = v502;
    if (v503)
      (*(void (**)(uint64_t))(*(_QWORD *)v503 + 8))(v503);
  }
  if (*(_QWORD *)(a2 + 416))
  {
    v504 = operator new();
    v505 = sub_21B7B060C(v504, *(_QWORD *)(a2 + 416));
    v506 = *(_QWORD *)(a1 + 416);
    *(_QWORD *)(a1 + 416) = v505;
    if (v506)
      (*(void (**)(uint64_t))(*(_QWORD *)v506 + 8))(v506);
  }
  if (*(_QWORD *)(a2 + 2000))
  {
    v507 = operator new();
    v508 = sub_21B83EC00(v507, *(_QWORD *)(a2 + 2000));
    v509 = *(_QWORD *)(a1 + 2000);
    *(_QWORD *)(a1 + 2000) = v508;
    if (v509)
      (*(void (**)(uint64_t))(*(_QWORD *)v509 + 8))(v509);
  }
  if (*(_QWORD *)(a2 + 2152))
  {
    v510 = operator new();
    v511 = sub_21B84C82C(v510, *(_QWORD *)(a2 + 2152));
    v512 = *(_QWORD *)(a1 + 2152);
    *(_QWORD *)(a1 + 2152) = v511;
    if (v512)
      (*(void (**)(uint64_t))(*(_QWORD *)v512 + 8))(v512);
  }
  if (*(_QWORD *)(a2 + 72))
  {
    v513 = operator new();
    v514 = sub_21B79BA0C(v513, *(_QWORD *)(a2 + 72));
    v515 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v514;
    if (v515)
      (*(void (**)(uint64_t))(*(_QWORD *)v515 + 8))(v515);
  }
  if (*(_QWORD *)(a2 + 832))
  {
    v516 = operator new();
    v517 = sub_21B7CAD70(v516, *(_QWORD *)(a2 + 832));
    v518 = *(_QWORD *)(a1 + 832);
    *(_QWORD *)(a1 + 832) = v517;
    if (v518)
      (*(void (**)(uint64_t))(*(_QWORD *)v518 + 8))(v518);
  }
  if (*(_QWORD *)(a2 + 2256))
  {
    v519 = operator new();
    v520 = sub_21B854994(v519, *(_QWORD *)(a2 + 2256));
    v521 = *(_QWORD *)(a1 + 2256);
    *(_QWORD *)(a1 + 2256) = v520;
    if (v521)
      (*(void (**)(uint64_t))(*(_QWORD *)v521 + 8))(v521);
  }
  if (*(_QWORD *)(a2 + 1088))
  {
    v522 = operator new();
    v523 = sub_21B745634(v522, *(_QWORD *)(a2 + 1088));
    v524 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)(a1 + 1088) = v525;
    if (v524)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v524 + 8))(v524, v523);
  }
  if (*(_QWORD *)(a2 + 1096))
  {
    v526 = operator new();
    v527 = sub_21B74619C(v526, *(_QWORD *)(a2 + 1096));
    v528 = *(_QWORD *)(a1 + 1096);
    *(_QWORD *)(a1 + 1096) = v529;
    if (v528)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v528 + 8))(v528, v527);
  }
  if (*(_QWORD *)(a2 + 1080))
  {
    v530 = operator new();
    v531 = sub_21B744DE4(v530, *(_QWORD *)(a2 + 1080));
    v532 = *(_QWORD *)(a1 + 1080);
    *(_QWORD *)(a1 + 1080) = v533;
    if (v532)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v532 + 8))(v532, v531);
  }
  if (*(_QWORD *)(a2 + 896))
  {
    v534 = operator new();
    v535 = sub_21B7D4AC4(v534, *(_QWORD *)(a2 + 896));
    v536 = *(_QWORD *)(a1 + 896);
    *(_QWORD *)(a1 + 896) = v535;
    if (v536)
      (*(void (**)(uint64_t))(*(_QWORD *)v536 + 8))(v536);
  }
  if (*(_QWORD *)(a2 + 3464))
  {
    v537 = operator new();
    v538 = sub_21B82DF94(v537, *(_QWORD *)(a2 + 3464));
    v539 = *(_QWORD *)(a1 + 3464);
    *(_QWORD *)(a1 + 3464) = v538;
    if (v539)
      (*(void (**)(uint64_t))(*(_QWORD *)v539 + 8))(v539);
  }
  if (*(_QWORD *)(a2 + 3088))
  {
    v540 = operator new();
    v541 = sub_21B812564(v540, *(_QWORD *)(a2 + 3088));
    v542 = *(_QWORD *)(a1 + 3088);
    *(_QWORD *)(a1 + 3088) = v541;
    if (v542)
      (*(void (**)(uint64_t))(*(_QWORD *)v542 + 8))(v542);
  }
  if (*(_QWORD *)(a2 + 2768))
  {
    v543 = operator new();
    v544 = sub_21B871EC8(v543, *(_QWORD *)(a2 + 2768));
    v545 = *(_QWORD *)(a1 + 2768);
    *(_QWORD *)(a1 + 2768) = v544;
    if (v545)
      (*(void (**)(uint64_t))(*(_QWORD *)v545 + 8))(v545);
  }
  if (*(_QWORD *)(a2 + 2616))
  {
    v546 = operator new();
    v547 = sub_21B866098(v546, *(_QWORD *)(a2 + 2616));
    v548 = *(_QWORD *)(a1 + 2616);
    *(_QWORD *)(a1 + 2616) = v547;
    if (v548)
      (*(void (**)(uint64_t))(*(_QWORD *)v548 + 8))(v548);
  }
  if (*(_QWORD *)(a2 + 1792))
  {
    v549 = operator new();
    v550 = sub_21B793564(v549, *(_QWORD *)(a2 + 1792));
    v551 = *(_QWORD *)(a1 + 1792);
    *(_QWORD *)(a1 + 1792) = v552;
    if (v551)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v551 + 8))(v551, v550);
  }
  if (*(_QWORD *)(a2 + 1800))
  {
    v553 = operator new();
    v554 = sub_21B79394C(v553, *(_QWORD *)(a2 + 1800));
    v555 = *(_QWORD *)(a1 + 1800);
    *(_QWORD *)(a1 + 1800) = v554;
    if (v555)
      (*(void (**)(uint64_t))(*(_QWORD *)v555 + 8))(v555);
  }
  if (*(_QWORD *)(a2 + 304))
  {
    v556 = operator new();
    v557 = sub_21B798A30(v556, *(_QWORD *)(a2 + 304));
    v558 = *(_QWORD *)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v559;
    if (v558)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v558 + 8))(v558, v557);
  }
  if (*(_QWORD *)(a2 + 1784))
  {
    v560 = operator new();
    v561 = sub_21B7931AC(v560, *(_QWORD *)(a2 + 1784));
    v562 = *(_QWORD *)(a1 + 1784);
    *(_QWORD *)(a1 + 1784) = v561;
    if (v562)
      (*(void (**)(uint64_t))(*(_QWORD *)v562 + 8))(v562);
  }
  if (*(_QWORD *)(a2 + 3336))
  {
    v563 = operator new();
    v564 = sub_21B824F18(v563, *(_QWORD *)(a2 + 3336));
    v565 = *(_QWORD *)(a1 + 3336);
    *(_QWORD *)(a1 + 3336) = v566;
    if (v565)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v565 + 8))(v565, v564);
  }
  if (*(_QWORD *)(a2 + 2600))
  {
    v567 = operator new();
    v568 = sub_21B864904(v567, *(_QWORD *)(a2 + 2600));
    v569 = *(_QWORD *)(a1 + 2600);
    *(_QWORD *)(a1 + 2600) = v570;
    if (v569)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v569 + 8))(v569, v568);
  }
  if (*(_QWORD *)(a2 + 432))
  {
    v571 = operator new();
    v572 = sub_21B7B170C(v571, *(_QWORD *)(a2 + 432));
    v573 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v574;
    if (v573)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v573 + 8))(v573, v572);
  }
  if (*(_QWORD *)(a2 + 2712))
  {
    v575 = operator new();
    v576 = sub_21B86CF80(v575, *(_QWORD *)(a2 + 2712));
    v577 = *(_QWORD *)(a1 + 2712);
    *(_QWORD *)(a1 + 2712) = v576;
    if (v577)
      (*(void (**)(uint64_t))(*(_QWORD *)v577 + 8))(v577);
  }
  if (*(_QWORD *)(a2 + 1808))
  {
    v578 = operator new();
    v579 = sub_21B793D24(v578, *(_QWORD *)(a2 + 1808));
    v580 = *(_QWORD *)(a1 + 1808);
    *(_QWORD *)(a1 + 1808) = v579;
    if (v580)
      (*(void (**)(uint64_t))(*(_QWORD *)v580 + 8))(v580);
  }
  if (*(_QWORD *)(a2 + 1776))
  {
    v581 = operator new();
    v582 = sub_21B792E7C(v581, *(_QWORD *)(a2 + 1776));
    v583 = *(_QWORD *)(a1 + 1776);
    *(_QWORD *)(a1 + 1776) = v582;
    if (v583)
      (*(void (**)(uint64_t))(*(_QWORD *)v583 + 8))(v583);
  }
  if (*(_QWORD *)(a2 + 400))
  {
    v584 = operator new();
    v585 = sub_21B7AFABC(v584, *(_QWORD *)(a2 + 400));
    v586 = *(_QWORD *)(a1 + 400);
    *(_QWORD *)(a1 + 400) = v585;
    if (v586)
      (*(void (**)(uint64_t))(*(_QWORD *)v586 + 8))(v586);
  }
  if (*(_QWORD *)(a2 + 440))
  {
    v587 = operator new();
    v588 = sub_21B7B1D30(v587, *(_QWORD *)(a2 + 440));
    v589 = *(_QWORD *)(a1 + 440);
    *(_QWORD *)(a1 + 440) = v588;
    if (v589)
      (*(void (**)(uint64_t))(*(_QWORD *)v589 + 8))(v589);
  }
  if (*(_QWORD *)(a2 + 1320))
  {
    v590 = operator new();
    v591 = sub_21B752100(v590, *(_QWORD *)(a2 + 1320));
    v592 = *(_QWORD *)(a1 + 1320);
    *(_QWORD *)(a1 + 1320) = v593;
    if (v592)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v592 + 8))(v592, v591);
  }
  if (*(_QWORD *)(a2 + 2896))
  {
    v594 = operator new();
    v595 = sub_21B804C38(v594, *(_QWORD *)(a2 + 2896));
    v596 = *(_QWORD *)(a1 + 2896);
    *(_QWORD *)(a1 + 2896) = v595;
    if (v596)
      (*(void (**)(uint64_t))(*(_QWORD *)v596 + 8))(v596);
  }
  if (*(_QWORD *)(a2 + 2920))
  {
    v597 = operator new();
    v598 = sub_21B806D98(v597, *(_QWORD *)(a2 + 2920));
    v599 = *(_QWORD *)(a1 + 2920);
    *(_QWORD *)(a1 + 2920) = v598;
    if (v599)
      (*(void (**)(uint64_t))(*(_QWORD *)v599 + 8))(v599);
  }
  if (*(_QWORD *)(a2 + 2912))
  {
    v600 = operator new();
    v601 = sub_21B80614C(v600, *(_QWORD *)(a2 + 2912));
    v602 = *(_QWORD *)(a1 + 2912);
    *(_QWORD *)(a1 + 2912) = v601;
    if (v602)
      (*(void (**)(uint64_t))(*(_QWORD *)v602 + 8))(v602);
  }
  if (*(_QWORD *)(a2 + 1032))
  {
    v603 = operator new();
    v604 = sub_21B74039C(v603, *(_QWORD *)(a2 + 1032));
    v605 = *(_QWORD *)(a1 + 1032);
    *(_QWORD *)(a1 + 1032) = v606;
    if (v605)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v605 + 8))(v605, v604);
  }
  if (*(_QWORD *)(a2 + 3392))
  {
    v607 = operator new();
    v608 = sub_21B829F08(v607, *(_QWORD *)(a2 + 3392));
    v609 = *(_QWORD *)(a1 + 3392);
    *(_QWORD *)(a1 + 3392) = v608;
    if (v609)
      (*(void (**)(uint64_t))(*(_QWORD *)v609 + 8))(v609);
  }
  if (*(_QWORD *)(a2 + 920))
  {
    v610 = operator new();
    v611 = sub_21B7D72A0(v610, *(_QWORD *)(a2 + 920));
    v612 = *(_QWORD *)(a1 + 920);
    *(_QWORD *)(a1 + 920) = v611;
    if (v612)
      (*(void (**)(uint64_t))(*(_QWORD *)v612 + 8))(v612);
  }
  if (*(_QWORD *)(a2 + 3368))
  {
    v613 = operator new();
    v614 = sub_21B8292C0(v613, *(_QWORD *)(a2 + 3368));
    v615 = *(_QWORD *)(a1 + 3368);
    *(_QWORD *)(a1 + 3368) = v616;
    if (v615)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v615 + 8))(v615, v614);
  }
  if (*(_QWORD *)(a2 + 3376))
  {
    v617 = operator new();
    v618 = sub_21B829694(v617, *(_QWORD *)(a2 + 3376));
    v619 = *(_QWORD *)(a1 + 3376);
    *(_QWORD *)(a1 + 3376) = v620;
    if (v619)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v619 + 8))(v619, v618);
  }
  if (*(_QWORD *)(a2 + 3160))
  {
    v621 = operator new();
    v622 = sub_21B817650(v621, *(_QWORD *)(a2 + 3160));
    v623 = *(_QWORD *)(a1 + 3160);
    *(_QWORD *)(a1 + 3160) = v622;
    if (v623)
      (*(void (**)(uint64_t))(*(_QWORD *)v623 + 8))(v623);
  }
  if (*(_QWORD *)(a2 + 1112))
  {
    v624 = operator new();
    v625 = sub_21B74700C(v624, *(_QWORD *)(a2 + 1112));
    v626 = *(_QWORD *)(a1 + 1112);
    *(_QWORD *)(a1 + 1112) = v627;
    if (v626)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v626 + 8))(v626, v625);
  }
  if (*(_QWORD *)(a2 + 1120))
  {
    v628 = operator new();
    v629 = sub_21B7478E0(v628, *(_QWORD *)(a2 + 1120));
    v630 = *(_QWORD *)(a1 + 1120);
    *(_QWORD *)(a1 + 1120) = v629;
    if (v630)
      (*(void (**)(uint64_t))(*(_QWORD *)v630 + 8))(v630);
  }
  if (*(_QWORD *)(a2 + 1944))
  {
    v631 = operator new();
    v632 = sub_21B8388E0(v631, *(_QWORD *)(a2 + 1944));
    v633 = *(_QWORD *)(a1 + 1944);
    *(_QWORD *)(a1 + 1944) = v632;
    if (v633)
      (*(void (**)(uint64_t))(*(_QWORD *)v633 + 8))(v633);
  }
  if (*(_QWORD *)(a2 + 1024))
  {
    v634 = operator new();
    v635 = sub_21B73F174(v634, *(_QWORD *)(a2 + 1024));
    v636 = *(_QWORD *)(a1 + 1024);
    *(_QWORD *)(a1 + 1024) = v637;
    if (v636)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v636 + 8))(v636, v635);
  }
  if (*(_QWORD *)(a2 + 3504))
  {
    v638 = operator new();
    v639 = sub_21B82F038(v638, *(_QWORD *)(a2 + 3504));
    v640 = *(_QWORD *)(a1 + 3504);
    *(_QWORD *)(a1 + 3504) = v639;
    if (v640)
      (*(void (**)(uint64_t))(*(_QWORD *)v640 + 8))(v640);
  }
  if (*(_QWORD *)(a2 + 112))
  {
    v641 = operator new();
    v642 = sub_21B79DE00(v641, *(_QWORD *)(a2 + 112));
    v643 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v642;
    if (v643)
      (*(void (**)(uint64_t))(*(_QWORD *)v643 + 8))(v643);
  }
  if (*(_QWORD *)(a2 + 2328))
  {
    v644 = operator new();
    v645 = sub_21B85733C(v644, *(_QWORD *)(a2 + 2328));
    v646 = *(_QWORD *)(a1 + 2328);
    *(_QWORD *)(a1 + 2328) = v645;
    if (v646)
      (*(void (**)(uint64_t))(*(_QWORD *)v646 + 8))(v646);
  }
  if (*(_QWORD *)(a2 + 1416))
  {
    v647 = operator new();
    v648 = sub_21B759684(v647, *(_QWORD *)(a2 + 1416));
    v649 = *(_QWORD *)(a1 + 1416);
    *(_QWORD *)(a1 + 1416) = v648;
    if (v649)
      (*(void (**)(uint64_t))(*(_QWORD *)v649 + 8))(v649);
  }
  if (*(_QWORD *)(a2 + 2408))
  {
    v650 = operator new();
    v651 = sub_21B85B774(v650, *(_QWORD *)(a2 + 2408));
    v652 = *(_QWORD *)(a1 + 2408);
    *(_QWORD *)(a1 + 2408) = v651;
    if (v652)
      (*(void (**)(uint64_t))(*(_QWORD *)v652 + 8))(v652);
  }
  if (*(_QWORD *)(a2 + 2416))
  {
    v653 = operator new();
    v654 = sub_21B85BC48(v653, *(_QWORD *)(a2 + 2416));
    v655 = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2416) = v654;
    if (v655)
      (*(void (**)(uint64_t))(*(_QWORD *)v655 + 8))(v655);
  }
  if (*(_QWORD *)(a2 + 2320))
  {
    v656 = operator new();
    v657 = sub_21B8567DC(v656, *(_QWORD *)(a2 + 2320));
    v658 = *(_QWORD *)(a1 + 2320);
    *(_QWORD *)(a1 + 2320) = v657;
    if (v658)
      (*(void (**)(uint64_t))(*(_QWORD *)v658 + 8))(v658);
  }
  if (*(_QWORD *)(a2 + 864))
  {
    v659 = operator new();
    v660 = sub_21B7D2AAC(v659, *(_QWORD *)(a2 + 864));
    v661 = *(_QWORD *)(a1 + 864);
    *(_QWORD *)(a1 + 864) = v660;
    if (v661)
      (*(void (**)(uint64_t))(*(_QWORD *)v661 + 8))(v661);
  }
  if (*(_QWORD *)(a2 + 1424))
  {
    v662 = operator new();
    v663 = sub_21B75A19C(v662, *(_QWORD *)(a2 + 1424));
    v664 = *(_QWORD *)(a1 + 1424);
    *(_QWORD *)(a1 + 1424) = v663;
    if (v664)
      (*(void (**)(uint64_t))(*(_QWORD *)v664 + 8))(v664);
  }
  if (*(_QWORD *)(a2 + 3424))
  {
    v665 = operator new();
    v666 = sub_21B82BC94(v665, *(_QWORD *)(a2 + 3424));
    v667 = *(_QWORD *)(a1 + 3424);
    *(_QWORD *)(a1 + 3424) = v666;
    if (v667)
      (*(void (**)(uint64_t))(*(_QWORD *)v667 + 8))(v667);
  }
  if (*(_QWORD *)(a2 + 2352))
  {
    v668 = operator new();
    v669 = sub_21B858280(v668, *(_QWORD *)(a2 + 2352));
    v670 = *(_QWORD *)(a1 + 2352);
    *(_QWORD *)(a1 + 2352) = v669;
    if (v670)
      (*(void (**)(uint64_t))(*(_QWORD *)v670 + 8))(v670);
  }
  if (*(_QWORD *)(a2 + 2376))
  {
    v671 = operator new();
    v672 = sub_21B859478(v671, *(_QWORD *)(a2 + 2376));
    v673 = *(_QWORD *)(a1 + 2376);
    *(_QWORD *)(a1 + 2376) = v672;
    if (v673)
      (*(void (**)(uint64_t))(*(_QWORD *)v673 + 8))(v673);
  }
  if (*(_QWORD *)(a2 + 1272))
  {
    v674 = operator new();
    v675 = sub_21B74F548(v674, *(_QWORD *)(a2 + 1272));
    v676 = *(_QWORD *)(a1 + 1272);
    *(_QWORD *)(a1 + 1272) = v675;
    if (v676)
      (*(void (**)(uint64_t))(*(_QWORD *)v676 + 8))(v676);
  }
  if (*(_QWORD *)(a2 + 2992))
  {
    v677 = operator new();
    v678 = sub_21B80A818(v677, *(_QWORD *)(a2 + 2992));
    v679 = *(_QWORD *)(a1 + 2992);
    *(_QWORD *)(a1 + 2992) = v680;
    if (v679)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v679 + 8))(v679, v678);
  }
  if (*(_QWORD *)(a2 + 2368))
  {
    v681 = operator new();
    v682 = sub_21B85947C(v681, *(_QWORD *)(a2 + 2368));
    v683 = *(_QWORD *)(a1 + 2368);
    *(_QWORD *)(a1 + 2368) = v682;
    if (v683)
      (*(void (**)(uint64_t))(*(_QWORD *)v683 + 8))(v683);
  }
  if (*(_QWORD *)(a2 + 1968))
  {
    v684 = operator new();
    v685 = sub_21B83BD6C(v684, *(_QWORD *)(a2 + 1968));
    v686 = *(_QWORD *)(a1 + 1968);
    *(_QWORD *)(a1 + 1968) = v687;
    if (v686)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v686 + 8))(v686, v685);
  }
  if (*(_QWORD *)(a2 + 3384))
  {
    v688 = operator new();
    v689 = sub_21B8299FC(v688, *(_QWORD *)(a2 + 3384));
    v690 = *(_QWORD *)(a1 + 3384);
    *(_QWORD *)(a1 + 3384) = v689;
    if (v690)
      (*(void (**)(uint64_t))(*(_QWORD *)v690 + 8))(v690);
  }
  if (*(_QWORD *)(a2 + 176))
  {
    v691 = operator new();
    v692 = sub_21B7A0ABC(v691, *(_QWORD *)(a2 + 176));
    v693 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v692;
    if (v693)
      (*(void (**)(uint64_t))(*(_QWORD *)v693 + 8))(v693);
  }
  if (*(_QWORD *)(a2 + 208))
  {
    v694 = operator new();
    v695 = sub_21B7A2198(v694, *(_QWORD *)(a2 + 208));
    v696 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 208) = v695;
    if (v696)
      (*(void (**)(uint64_t))(*(_QWORD *)v696 + 8))(v696);
  }
  if (*(_QWORD *)(a2 + 2032))
  {
    v697 = operator new();
    v698 = sub_21B842768(v697, *(_QWORD *)(a2 + 2032));
    v699 = *(_QWORD *)(a1 + 2032);
    *(_QWORD *)(a1 + 2032) = v698;
    if (v699)
      (*(void (**)(uint64_t))(*(_QWORD *)v699 + 8))(v699);
  }
  if (*(_QWORD *)(a2 + 776))
  {
    v700 = operator new();
    v701 = sub_21B7C8DD8(v700, *(_QWORD *)(a2 + 776));
    v702 = *(_QWORD *)(a1 + 776);
    *(_QWORD *)(a1 + 776) = v701;
    if (v702)
      (*(void (**)(uint64_t))(*(_QWORD *)v702 + 8))(v702);
  }
  if (*(_QWORD *)(a2 + 2448))
  {
    v703 = operator new();
    v704 = sub_21B85DBE8(v703, *(_QWORD *)(a2 + 2448));
    v705 = *(_QWORD *)(a1 + 2448);
    *(_QWORD *)(a1 + 2448) = v704;
    if (v705)
      (*(void (**)(uint64_t))(*(_QWORD *)v705 + 8))(v705);
  }
  if (*(_QWORD *)(a2 + 2456))
  {
    v706 = operator new();
    v707 = sub_21B85E5B4(v706, *(_QWORD *)(a2 + 2456));
    v708 = *(_QWORD *)(a1 + 2456);
    *(_QWORD *)(a1 + 2456) = v707;
    if (v708)
      (*(void (**)(uint64_t))(*(_QWORD *)v708 + 8))(v708);
  }
  if (*(_QWORD *)(a2 + 1336))
  {
    v709 = operator new();
    v710 = sub_21B74F218(v709, *(_QWORD *)(a2 + 1336));
    v711 = *(_QWORD *)(a1 + 1336);
    *(_QWORD *)(a1 + 1336) = v710;
    if (v711)
      (*(void (**)(uint64_t))(*(_QWORD *)v711 + 8))(v711);
  }
  if (*(_QWORD *)(a2 + 3496))
  {
    v712 = operator new();
    v713 = sub_21B82ECE4(v712, *(_QWORD *)(a2 + 3496));
    v714 = *(_QWORD *)(a1 + 3496);
    *(_QWORD *)(a1 + 3496) = v713;
    if (v714)
      (*(void (**)(uint64_t))(*(_QWORD *)v714 + 8))(v714);
  }
  if (*(_QWORD *)(a2 + 3072))
  {
    v715 = operator new();
    v716 = sub_21B811B28(v715, *(_QWORD *)(a2 + 3072));
    v717 = *(_QWORD *)(a1 + 3072);
    *(_QWORD *)(a1 + 3072) = v716;
    if (v717)
      (*(void (**)(uint64_t))(*(_QWORD *)v717 + 8))(v717);
  }
  if (*(_QWORD *)(a2 + 3168))
  {
    v718 = operator new();
    v719 = sub_21B818720(v718, *(_QWORD *)(a2 + 3168));
    v720 = *(_QWORD *)(a1 + 3168);
    *(_QWORD *)(a1 + 3168) = v719;
    if (v720)
      (*(void (**)(uint64_t))(*(_QWORD *)v720 + 8))(v720);
  }
  if (*(_QWORD *)(a2 + 24))
  {
    v721 = operator new();
    v722 = sub_21B799F04(v721, *(_QWORD *)(a2 + 24));
    v723 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v722;
    if (v723)
      (*(void (**)(uint64_t))(*(_QWORD *)v723 + 8))(v723);
  }
  if (*(_QWORD *)(a2 + 40))
  {
    v724 = operator new();
    v725 = sub_21B79A818(v724, *(_QWORD *)(a2 + 40));
    v726 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v725;
    if (v726)
      (*(void (**)(uint64_t))(*(_QWORD *)v726 + 8))(v726);
  }
  if (*(_QWORD *)(a2 + 64))
  {
    v727 = (_QWORD *)operator new();
    v728 = sub_21B79B5D8(v727, *(_QWORD *)(a2 + 64));
    v729 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v728;
    if (v729)
      (*(void (**)(uint64_t))(*(_QWORD *)v729 + 8))(v729);
  }
  if (*(_QWORD *)(a2 + 48))
  {
    v730 = (_QWORD *)operator new();
    v731 = sub_21B79AE08(v730, *(_QWORD *)(a2 + 48));
    v732 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v731;
    if (v732)
      (*(void (**)(uint64_t))(*(_QWORD *)v732 + 8))(v732);
  }
  if (*(_QWORD *)(a2 + 1144))
  {
    v733 = operator new();
    v734 = sub_21B73AE78(v733, *(_QWORD *)(a2 + 1144));
    v735 = *(_QWORD *)(a1 + 1144);
    *(_QWORD *)(a1 + 1144) = v734;
    if (v735)
      (*(void (**)(uint64_t))(*(_QWORD *)v735 + 8))(v735);
  }
  if (*(_QWORD *)(a2 + 1256))
  {
    v736 = operator new();
    v737 = sub_21B74E8B0(v736, *(_QWORD *)(a2 + 1256));
    v738 = *(_QWORD *)(a1 + 1256);
    *(_QWORD *)(a1 + 1256) = v737;
    if (v738)
      (*(void (**)(uint64_t))(*(_QWORD *)v738 + 8))(v738);
  }
  if (*(_QWORD *)(a2 + 1264))
  {
    v739 = operator new();
    v740 = sub_21B74EE40(v739, *(_QWORD *)(a2 + 1264));
    v741 = *(_QWORD *)(a1 + 1264);
    *(_QWORD *)(a1 + 1264) = v740;
    if (v741)
      (*(void (**)(uint64_t))(*(_QWORD *)v741 + 8))(v741);
  }
  if (*(_QWORD *)(a2 + 1152))
  {
    v742 = operator new();
    v743 = sub_21B749354(v742, *(_QWORD *)(a2 + 1152));
    v744 = *(_QWORD *)(a1 + 1152);
    *(_QWORD *)(a1 + 1152) = v743;
    if (v744)
      (*(void (**)(uint64_t))(*(_QWORD *)v744 + 8))(v744);
  }
  if (*(_QWORD *)(a2 + 1184))
  {
    v745 = operator new();
    v746 = sub_21B74B74C(v745, *(_QWORD *)(a2 + 1184));
    v747 = *(_QWORD *)(a1 + 1184);
    *(_QWORD *)(a1 + 1184) = v746;
    if (v747)
      (*(void (**)(uint64_t))(*(_QWORD *)v747 + 8))(v747);
  }
  if (*(_QWORD *)(a2 + 1232))
  {
    v748 = operator new();
    v749 = sub_21B74DCB0(v748, *(_QWORD *)(a2 + 1232));
    v750 = *(_QWORD *)(a1 + 1232);
    *(_QWORD *)(a1 + 1232) = v751;
    if (v750)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v750 + 8))(v750, v749);
  }
  if (*(_QWORD *)(a2 + 1920))
  {
    v752 = operator new();
    v753 = sub_21B836D98(v752, *(_QWORD *)(a2 + 1920));
    v754 = *(_QWORD *)(a1 + 1920);
    *(_QWORD *)(a1 + 1920) = v753;
    if (v754)
      (*(void (**)(uint64_t))(*(_QWORD *)v754 + 8))(v754);
  }
  if (*(_QWORD *)(a2 + 640))
  {
    v755 = operator new();
    v756 = sub_21B7BF700(v755, *(_QWORD *)(a2 + 640));
    v757 = *(_QWORD *)(a1 + 640);
    *(_QWORD *)(a1 + 640) = v758;
    if (v757)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v757 + 8))(v757, v756);
  }
  if (*(_QWORD *)(a2 + 648))
  {
    v759 = operator new();
    v760 = sub_21B7C0024(v759, *(_QWORD *)(a2 + 648));
    v761 = *(_QWORD *)(a1 + 648);
    *(_QWORD *)(a1 + 648) = v760;
    if (v761)
      (*(void (**)(uint64_t))(*(_QWORD *)v761 + 8))(v761);
  }
  if (*(_QWORD *)(a2 + 1224))
  {
    v762 = operator new();
    v763 = sub_21B74D474(v762, *(_QWORD *)(a2 + 1224));
    v764 = *(_QWORD *)(a1 + 1224);
    *(_QWORD *)(a1 + 1224) = v763;
    if (v764)
      (*(void (**)(uint64_t))(*(_QWORD *)v764 + 8))(v764);
  }
  if (*(_QWORD *)(a2 + 656))
  {
    v765 = operator new();
    v766 = sub_21B7C060C(v765, *(_QWORD *)(a2 + 656));
    v767 = *(_QWORD *)(a1 + 656);
    *(_QWORD *)(a1 + 656) = v768;
    if (v767)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v767 + 8))(v767, v766);
  }
  if (*(_QWORD *)(a2 + 2528))
  {
    v769 = operator new();
    v770 = sub_21B861D64(v769, *(_QWORD *)(a2 + 2528));
    v771 = *(_QWORD *)(a1 + 2528);
    *(_QWORD *)(a1 + 2528) = v772;
    if (v771)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v771 + 8))(v771, v770);
  }
  if (*(_QWORD *)(a2 + 2584))
  {
    v773 = operator new();
    v774 = sub_21B8639B4(v773, *(_QWORD *)(a2 + 2584));
    v775 = *(_QWORD *)(a1 + 2584);
    *(_QWORD *)(a1 + 2584) = v774;
    if (v775)
      (*(void (**)(uint64_t))(*(_QWORD *)v775 + 8))(v775);
  }
  if (*(_QWORD *)(a2 + 2552))
  {
    v776 = operator new();
    v777 = sub_21B862A94(v776, *(_QWORD *)(a2 + 2552));
    v778 = *(_QWORD *)(a1 + 2552);
    *(_QWORD *)(a1 + 2552) = v777;
    if (v778)
      (*(void (**)(uint64_t))(*(_QWORD *)v778 + 8))(v778);
  }
  if (*(_QWORD *)(a2 + 2592))
  {
    v779 = operator new();
    v780 = sub_21B864300(v779, *(_QWORD *)(a2 + 2592));
    v781 = *(_QWORD *)(a1 + 2592);
    *(_QWORD *)(a1 + 2592) = v780;
    if (v781)
      (*(void (**)(uint64_t))(*(_QWORD *)v781 + 8))(v781);
  }
  if (*(_QWORD *)(a2 + 3152))
  {
    v782 = operator new();
    v783 = sub_21B817244(v782, *(_QWORD *)(a2 + 3152));
    v784 = *(_QWORD *)(a1 + 3152);
    *(_QWORD *)(a1 + 3152) = v783;
    if (v784)
      (*(void (**)(uint64_t))(*(_QWORD *)v784 + 8))(v784);
  }
  if (*(_QWORD *)(a2 + 744))
  {
    v785 = operator new();
    v786 = sub_21B79EC94(v785, *(_QWORD *)(a2 + 744));
    v787 = *(_QWORD *)(a1 + 744);
    *(_QWORD *)(a1 + 744) = v788;
    if (v787)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v787 + 8))(v787, v786);
  }
  if (*(_QWORD *)(a2 + 2048))
  {
    v789 = operator new();
    v790 = sub_21B843D98(v789, *(_QWORD *)(a2 + 2048));
    v791 = *(_QWORD *)(a1 + 2048);
    *(_QWORD *)(a1 + 2048) = v790;
    if (v791)
      (*(void (**)(uint64_t))(*(_QWORD *)v791 + 8))(v791);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    v792 = operator new();
    v793 = sub_21B79B110(v792, *(_QWORD *)(a2 + 56));
    v794 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v795;
    if (v794)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v794 + 8))(v794, v793);
  }
  if (*(_QWORD *)(a2 + 1248))
  {
    v796 = operator new();
    v797 = sub_21B74E408(v796, *(_QWORD *)(a2 + 1248));
    v798 = *(_QWORD *)(a1 + 1248);
    *(_QWORD *)(a1 + 1248) = v799;
    if (v798)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v798 + 8))(v798, v797);
  }
  if (*(_QWORD *)(a2 + 2576))
  {
    v800 = operator new();
    v801 = sub_21B863654(v800, *(_QWORD *)(a2 + 2576));
    v802 = *(_QWORD *)(a1 + 2576);
    *(_QWORD *)(a1 + 2576) = v801;
    if (v802)
      (*(void (**)(uint64_t))(*(_QWORD *)v802 + 8))(v802);
  }
  if (*(_QWORD *)(a2 + 392))
  {
    v803 = operator new();
    v804 = sub_21B7AF5C4(v803, *(_QWORD *)(a2 + 392));
    v805 = *(_QWORD *)(a1 + 392);
    *(_QWORD *)(a1 + 392) = v804;
    if (v805)
      (*(void (**)(uint64_t))(*(_QWORD *)v805 + 8))(v805);
  }
  if (*(_QWORD *)(a2 + 2840))
  {
    v806 = operator new();
    v807 = sub_21B80234C(v806, *(_QWORD *)(a2 + 2840));
    v808 = *(_QWORD *)(a1 + 2840);
    *(_QWORD *)(a1 + 2840) = v807;
    if (v808)
      (*(void (**)(uint64_t))(*(_QWORD *)v808 + 8))(v808);
  }
  if (*(_QWORD *)(a2 + 1864))
  {
    v809 = operator new();
    v810 = sub_21B83510C(v809, *(_QWORD *)(a2 + 1864));
    v811 = *(_QWORD *)(a1 + 1864);
    *(_QWORD *)(a1 + 1864) = v810;
    if (v811)
      (*(void (**)(uint64_t))(*(_QWORD *)v811 + 8))(v811);
  }
  if (*(_QWORD *)(a2 + 2016))
  {
    v812 = operator new();
    v813 = sub_21B840944(v812, *(_QWORD *)(a2 + 2016));
    v814 = *(_QWORD *)(a1 + 2016);
    *(_QWORD *)(a1 + 2016) = v813;
    if (v814)
      (*(void (**)(uint64_t))(*(_QWORD *)v814 + 8))(v814);
  }
  if (*(_QWORD *)(a2 + 880))
  {
    v815 = operator new();
    v816 = sub_21B7D33C8(v815, *(_QWORD *)(a2 + 880));
    v817 = *(_QWORD *)(a1 + 880);
    *(_QWORD *)(a1 + 880) = v816;
    if (v817)
      (*(void (**)(uint64_t))(*(_QWORD *)v817 + 8))(v817);
  }
  if (*(_QWORD *)(a2 + 2104))
  {
    v818 = operator new();
    v819 = sub_21B848828(v818, *(_QWORD *)(a2 + 2104));
    v820 = *(_QWORD *)(a1 + 2104);
    *(_QWORD *)(a1 + 2104) = v819;
    if (v820)
      (*(void (**)(uint64_t))(*(_QWORD *)v820 + 8))(v820);
  }
  if (*(_QWORD *)(a2 + 2096))
  {
    v821 = operator new();
    v822 = sub_21B847C28(v821, *(_QWORD *)(a2 + 2096));
    v823 = *(_QWORD *)(a1 + 2096);
    *(_QWORD *)(a1 + 2096) = v822;
    if (v823)
      (*(void (**)(uint64_t))(*(_QWORD *)v823 + 8))(v823);
  }
  if (*(_QWORD *)(a2 + 528))
  {
    v824 = operator new();
    v825 = sub_21B7B6CEC(v824, *(_QWORD *)(a2 + 528));
    v826 = *(_QWORD *)(a1 + 528);
    *(_QWORD *)(a1 + 528) = v827;
    if (v826)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v826 + 8))(v826, v825);
  }
  if (*(_QWORD *)(a2 + 3432))
  {
    v828 = operator new();
    v829 = sub_21B82C238(v828, *(_QWORD *)(a2 + 3432));
    v830 = *(_QWORD *)(a1 + 3432);
    *(_QWORD *)(a1 + 3432) = v829;
    if (v830)
      (*(void (**)(uint64_t))(*(_QWORD *)v830 + 8))(v830);
  }
  if (*(_QWORD *)(a2 + 2136))
  {
    v831 = operator new();
    v832 = sub_21B84BAE4(v831, *(_QWORD *)(a2 + 2136));
    v833 = *(_QWORD *)(a1 + 2136);
    *(_QWORD *)(a1 + 2136) = v832;
    if (v833)
      (*(void (**)(uint64_t))(*(_QWORD *)v833 + 8))(v833);
  }
  if (*(_QWORD *)(a2 + 3064))
  {
    v834 = operator new();
    v835 = sub_21B8117D4(v834, *(_QWORD *)(a2 + 3064));
    v836 = *(_QWORD *)(a1 + 3064);
    *(_QWORD *)(a1 + 3064) = v835;
    if (v836)
      (*(void (**)(uint64_t))(*(_QWORD *)v836 + 8))(v836);
  }
  if (*(_QWORD *)(a2 + 848))
  {
    v837 = operator new();
    v838 = sub_21B7D0F74(v837, *(_QWORD *)(a2 + 848));
    v839 = *(_QWORD *)(a1 + 848);
    *(_QWORD *)(a1 + 848) = v838;
    if (v839)
      (*(void (**)(uint64_t))(*(_QWORD *)v839 + 8))(v839);
  }
  if (*(_QWORD *)(a2 + 632))
  {
    v840 = operator new();
    v841 = sub_21B7BF188(v840, *(_QWORD *)(a2 + 632));
    v842 = *(_QWORD *)(a1 + 632);
    *(_QWORD *)(a1 + 632) = v841;
    if (v842)
      (*(void (**)(uint64_t))(*(_QWORD *)v842 + 8))(v842);
  }
  if (*(_QWORD *)(a2 + 2008))
  {
    v843 = operator new();
    v844 = sub_21B83F454(v843, *(_QWORD *)(a2 + 2008));
    v845 = *(_QWORD *)(a1 + 2008);
    *(_QWORD *)(a1 + 2008) = v844;
    if (v845)
      (*(void (**)(uint64_t))(*(_QWORD *)v845 + 8))(v845);
  }
  if (*(_QWORD *)(a2 + 2064))
  {
    v846 = operator new();
    v847 = sub_21B84660C(v846, *(_QWORD *)(a2 + 2064));
    v848 = *(_QWORD *)(a1 + 2064);
    *(_QWORD *)(a1 + 2064) = v847;
    if (v848)
      (*(void (**)(uint64_t))(*(_QWORD *)v848 + 8))(v848);
  }
  if (*(_QWORD *)(a2 + 3080))
  {
    v849 = operator new();
    v850 = sub_21B811E40(v849, *(_QWORD *)(a2 + 3080));
    v851 = *(_QWORD *)(a1 + 3080);
    *(_QWORD *)(a1 + 3080) = v852;
    if (v851)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v851 + 8))(v851, v850);
  }
  if (*(_QWORD *)(a2 + 600))
  {
    v853 = operator new();
    v854 = sub_21B7BCD28(v853, *(_QWORD *)(a2 + 600));
    v855 = *(_QWORD *)(a1 + 600);
    *(_QWORD *)(a1 + 600) = v854;
    if (v855)
      (*(void (**)(uint64_t))(*(_QWORD *)v855 + 8))(v855);
  }
  if (*(_QWORD *)(a2 + 2112))
  {
    v856 = operator new();
    v857 = sub_21B84A600(v856, *(_QWORD *)(a2 + 2112));
    v858 = *(_QWORD *)(a1 + 2112);
    *(_QWORD *)(a1 + 2112) = v857;
    if (v858)
      (*(void (**)(uint64_t))(*(_QWORD *)v858 + 8))(v858);
  }
  if (*(_QWORD *)(a2 + 1952))
  {
    v859 = operator new();
    v860 = sub_21B838FFC(v859, *(_QWORD *)(a2 + 1952));
    v861 = *(_QWORD *)(a1 + 1952);
    *(_QWORD *)(a1 + 1952) = v862;
    if (v861)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v861 + 8))(v861, v860);
  }
  if (*(_QWORD *)(a2 + 1008))
  {
    v863 = operator new();
    v864 = sub_21B73AE7C(v863, *(_QWORD *)(a2 + 1008));
    v865 = *(_QWORD *)(a1 + 1008);
    *(_QWORD *)(a1 + 1008) = v866;
    if (v865)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v865 + 8))(v865, v864);
  }
  if (*(_QWORD *)(a2 + 424))
  {
    v867 = operator new();
    v868 = sub_21B7B0EA8(v867, *(_QWORD *)(a2 + 424));
    v869 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a1 + 424) = v868;
    if (v869)
      (*(void (**)(uint64_t))(*(_QWORD *)v869 + 8))(v869);
  }
  if (*(_QWORD *)(a2 + 3216))
  {
    v870 = operator new();
    v871 = sub_21B81EDFC(v870, *(_QWORD *)(a2 + 3216));
    v872 = *(_QWORD *)(a1 + 3216);
    *(_QWORD *)(a1 + 3216) = v871;
    if (v872)
      (*(void (**)(uint64_t))(*(_QWORD *)v872 + 8))(v872);
  }
  if (*(_QWORD *)(a2 + 3024))
  {
    v873 = operator new();
    v874 = sub_21B80D7C0(v873, *(_QWORD *)(a2 + 3024));
    v875 = *(_QWORD *)(a1 + 3024);
    *(_QWORD *)(a1 + 3024) = v876;
    if (v875)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v875 + 8))(v875, v874);
  }
  if (*(_QWORD *)(a2 + 3408))
  {
    v877 = operator new();
    v878 = sub_21B82AC38(v877, *(_QWORD *)(a2 + 3408));
    v879 = *(_QWORD *)(a1 + 3408);
    *(_QWORD *)(a1 + 3408) = v878;
    if (v879)
      (*(void (**)(uint64_t))(*(_QWORD *)v879 + 8))(v879);
  }
  if (*(_QWORD *)(a2 + 2056))
  {
    v880 = operator new();
    v881 = sub_21B8462CC(v880, *(_QWORD *)(a2 + 2056));
    v882 = *(_QWORD *)(a1 + 2056);
    *(_QWORD *)(a1 + 2056) = v881;
    if (v882)
      (*(void (**)(uint64_t))(*(_QWORD *)v882 + 8))(v882);
  }
  if (*(_QWORD *)(a2 + 2040))
  {
    v883 = operator new();
    v884 = sub_21B842F50(v883, *(_QWORD *)(a2 + 2040));
    v885 = *(_QWORD *)(a1 + 2040);
    *(_QWORD *)(a1 + 2040) = v884;
    if (v885)
      (*(void (**)(uint64_t))(*(_QWORD *)v885 + 8))(v885);
  }
  if (*(_QWORD *)(a2 + 2120))
  {
    v886 = operator new();
    v887 = sub_21B84B33C(v886, *(_QWORD *)(a2 + 2120));
    v888 = *(_QWORD *)(a1 + 2120);
    *(_QWORD *)(a1 + 2120) = v887;
    if (v888)
      (*(void (**)(uint64_t))(*(_QWORD *)v888 + 8))(v888);
  }
  if (*(_QWORD *)(a2 + 2568))
  {
    v889 = operator new();
    v890 = sub_21B862E68(v889, *(_QWORD *)(a2 + 2568));
    v891 = *(_QWORD *)(a1 + 2568);
    *(_QWORD *)(a1 + 2568) = v892;
    if (v891)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v891 + 8))(v891, v890);
  }
  if (*(_QWORD *)(a2 + 1400))
  {
    v893 = operator new();
    v894 = sub_21B757CAC(v893, *(_QWORD *)(a2 + 1400));
    v895 = *(_QWORD *)(a1 + 1400);
    *(_QWORD *)(a1 + 1400) = v894;
    if (v895)
      (*(void (**)(uint64_t))(*(_QWORD *)v895 + 8))(v895);
  }
  if (*(_QWORD *)(a2 + 624))
  {
    v896 = operator new();
    v897 = sub_21B7BD7C0(v896, *(_QWORD *)(a2 + 624));
    v898 = *v5;
    *v5 = v897;
    if (v898)
      (*(void (**)(uint64_t))(*(_QWORD *)v898 + 8))(v898);
  }
  if (*(_QWORD *)(a2 + 288))
  {
    v899 = operator new();
    v900 = sub_21B7AAC08(v899, *(_QWORD *)(a2 + 288));
    v901 = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v900;
    if (v901)
      (*(void (**)(uint64_t))(*(_QWORD *)v901 + 8))(v901);
  }
  if (*(_QWORD *)(a2 + 1384))
  {
    v902 = operator new();
    v903 = sub_21B756888(v902, *(_QWORD *)(a2 + 1384));
    v904 = *(_QWORD *)(a1 + 1384);
    *(_QWORD *)(a1 + 1384) = v903;
    if (v904)
      (*(void (**)(uint64_t))(*(_QWORD *)v904 + 8))(v904);
  }
  if (*(_QWORD *)(a2 + 1368))
  {
    v905 = operator new();
    v906 = sub_21B755598(v905, *(_QWORD *)(a2 + 1368));
    v907 = *(_QWORD *)(a1 + 1368);
    *(_QWORD *)(a1 + 1368) = v906;
    if (v907)
      (*(void (**)(uint64_t))(*(_QWORD *)v907 + 8))(v907);
  }
  if (*(_QWORD *)(a2 + 1376))
  {
    v908 = operator new();
    v909 = sub_21B7560A8(v908, *(_QWORD *)(a2 + 1376));
    v910 = *(_QWORD *)(a1 + 1376);
    *(_QWORD *)(a1 + 1376) = v909;
    if (v910)
      (*(void (**)(uint64_t))(*(_QWORD *)v910 + 8))(v910);
  }
  if (*(_QWORD *)(a2 + 1360))
  {
    v911 = operator new();
    v912 = sub_21B754C78(v911, *(_QWORD *)(a2 + 1360));
    v913 = *(_QWORD *)(a1 + 1360);
    *(_QWORD *)(a1 + 1360) = v912;
    if (v913)
      (*(void (**)(uint64_t))(*(_QWORD *)v913 + 8))(v913);
  }
  if (*(_QWORD *)(a2 + 120))
  {
    v914 = operator new();
    v915 = sub_21B79D1E0(v914, *(_QWORD *)(a2 + 120));
    v916 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v915;
    if (v916)
      (*(void (**)(uint64_t))(*(_QWORD *)v916 + 8))(v916);
  }
  if (*(_QWORD *)(a2 + 96))
  {
    v917 = (_QWORD *)operator new();
    v918 = sub_21B79D1E4(v917, *(_QWORD **)(a2 + 96));
    v919 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v918;
    if (v919)
      (*(void (**)(uint64_t))(*(_QWORD *)v919 + 8))(v919);
  }
  if (*(_QWORD *)(a2 + 240))
  {
    v920 = operator new();
    v921 = sub_21B7A6CAC(v920, *(uint64_t **)(a2 + 240));
    v922 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v921;
    if (v922)
      (*(void (**)(uint64_t))(*(_QWORD *)v922 + 8))(v922);
  }
  if (*(_QWORD *)(a2 + 3120))
  {
    v923 = operator new();
    v924 = sub_21B814878(v923, *(_QWORD *)(a2 + 3120));
    v925 = *(_QWORD *)(a1 + 3120);
    *(_QWORD *)(a1 + 3120) = v926;
    if (v925)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v925 + 8))(v925, v924);
  }
  if (*(_QWORD *)(a2 + 3112))
  {
    v927 = operator new();
    v928 = sub_21B813F90(v927, *(_QWORD *)(a2 + 3112));
    v929 = *(_QWORD *)(a1 + 3112);
    *(_QWORD *)(a1 + 3112) = v928;
    if (v929)
      (*(void (**)(uint64_t))(*(_QWORD *)v929 + 8))(v929);
  }
  if (*(_QWORD *)(a2 + 840))
  {
    v930 = operator new();
    v931 = sub_21B7D05E0(v930, *(_QWORD *)(a2 + 840));
    v932 = *(_QWORD *)(a1 + 840);
    *(_QWORD *)(a1 + 840) = v931;
    if (v932)
      (*(void (**)(uint64_t))(*(_QWORD *)v932 + 8))(v932);
  }
  if (*(_QWORD *)(a2 + 280))
  {
    v933 = operator new();
    v934 = sub_21B7A96EC(v933, *(_QWORD *)(a2 + 280));
    v935 = *(_QWORD *)(a1 + 280);
    *(_QWORD *)(a1 + 280) = v934;
    if (v935)
      (*(void (**)(uint64_t))(*(_QWORD *)v935 + 8))(v935);
  }
  if (*(_QWORD *)(a2 + 1104))
  {
    v936 = operator new();
    v937 = sub_21B746870(v936, *(_QWORD *)(a2 + 1104));
    v938 = *(_QWORD *)(a1 + 1104);
    *(_QWORD *)(a1 + 1104) = v939;
    if (v938)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v938 + 8))(v938, v937);
  }
  if (*(_QWORD *)(a2 + 2688))
  {
    v940 = operator new();
    v941 = sub_21B86AB9C(v940, *(_QWORD *)(a2 + 2688));
    v942 = *(_QWORD *)(a1 + 2688);
    *(_QWORD *)(a1 + 2688) = v941;
    if (v942)
      (*(void (**)(uint64_t))(*(_QWORD *)v942 + 8))(v942);
  }
  if (*(_QWORD *)(a2 + 2704))
  {
    v943 = operator new();
    v944 = sub_21B86CBC4(v943, *(_QWORD *)(a2 + 2704));
    v945 = *(_QWORD *)(a1 + 2704);
    *(_QWORD *)(a1 + 2704) = v944;
    if (v945)
      (*(void (**)(uint64_t))(*(_QWORD *)v945 + 8))(v945);
  }
  if (*(_QWORD *)(a2 + 2696))
  {
    v946 = operator new();
    v947 = sub_21B86C488(v946, *(_QWORD *)(a2 + 2696));
    v948 = *(_QWORD *)(a1 + 2696);
    *(_QWORD *)(a1 + 2696) = v949;
    if (v948)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v948 + 8))(v948, v947);
  }
  if (*(_QWORD *)(a2 + 3608))
  {
    v950 = operator new();
    v951 = sub_21B831FEC(v950, *(_QWORD *)(a2 + 3608));
    v952 = *(_QWORD *)(a1 + 3608);
    *(_QWORD *)(a1 + 3608) = v951;
    if (v952)
      (*(void (**)(uint64_t))(*(_QWORD *)v952 + 8))(v952);
  }
  if (*(_QWORD *)(a2 + 328))
  {
    v953 = operator new();
    v954 = sub_21B7AC09C(v953, *(_QWORD *)(a2 + 328));
    v955 = *(_QWORD *)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v954;
    if (v955)
      (*(void (**)(uint64_t))(*(_QWORD *)v955 + 8))(v955);
  }
  if (*(_QWORD *)(a2 + 2520))
  {
    v956 = operator new();
    v957 = sub_21B861408(v956, *(_QWORD *)(a2 + 2520));
    v958 = *(_QWORD *)(a1 + 2520);
    *(_QWORD *)(a1 + 2520) = v959;
    if (v958)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v958 + 8))(v958, v957);
  }
  if (*(_QWORD *)(a2 + 2088))
  {
    v960 = operator new();
    v961 = sub_21B847598(v960, *(_QWORD *)(a2 + 2088));
    v962 = *(_QWORD *)(a1 + 2088);
    *(_QWORD *)(a1 + 2088) = v963;
    if (v962)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v962 + 8))(v962, v961);
  }
  if (*(_QWORD *)(a2 + 2080))
  {
    v964 = operator new();
    v965 = sub_21B846C2C(v964, *(_QWORD *)(a2 + 2080));
    v966 = *(_QWORD *)(a1 + 2080);
    *(_QWORD *)(a1 + 2080) = v965;
    if (v966)
      (*(void (**)(uint64_t))(*(_QWORD *)v966 + 8))(v966);
  }
  if (*(_QWORD *)(a2 + 520))
  {
    v967 = operator new();
    v968 = sub_21B7B67F8(v967, *(_QWORD *)(a2 + 520));
    v969 = *(_QWORD *)(a1 + 520);
    *(_QWORD *)(a1 + 520) = v968;
    if (v969)
      (*(void (**)(uint64_t))(*(_QWORD *)v969 + 8))(v969);
  }
  if (*(_QWORD *)(a2 + 160))
  {
    v970 = (_QWORD *)operator new();
    v971 = sub_21B7A0470(v970, *(_QWORD *)(a2 + 160));
    v972 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v971;
    if (v972)
      (*(void (**)(uint64_t))(*(_QWORD *)v972 + 8))(v972);
  }
  if (*(_QWORD *)(a2 + 168))
  {
    v973 = (_QWORD *)operator new();
    v974 = sub_21B7A07D4(v973, *(_QWORD *)(a2 + 168));
    v975 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v974;
    if (v975)
      (*(void (**)(uint64_t))(*(_QWORD *)v975 + 8))(v975);
  }
  if (*(_QWORD *)(a2 + 152))
  {
    v976 = (_QWORD *)operator new();
    v977 = sub_21B7A014C(v976, *(_QWORD *)(a2 + 152));
    v978 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v977;
    if (v978)
      (*(void (**)(uint64_t))(*(_QWORD *)v978 + 8))(v978);
  }
  if (*(_QWORD *)(a2 + 1064))
  {
    v979 = operator new();
    v980 = sub_21B7428F4(v979, *(_QWORD *)(a2 + 1064));
    v981 = *(_QWORD *)(a1 + 1064);
    *(_QWORD *)(a1 + 1064) = v982;
    if (v981)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v981 + 8))(v981, v980);
  }
  if (*(_QWORD *)(a2 + 1072))
  {
    v983 = operator new();
    v984 = sub_21B743B88(v983, *(_QWORD *)(a2 + 1072));
    v985 = *(_QWORD *)(a1 + 1072);
    *(_QWORD *)(a1 + 1072) = v984;
    if (v985)
      (*(void (**)(uint64_t))(*(_QWORD *)v985 + 8))(v985);
  }
  if (*(_QWORD *)(a2 + 664))
  {
    v986 = operator new();
    v987 = sub_21B7C130C(v986, *(_QWORD *)(a2 + 664));
    v988 = *(_QWORD *)(a1 + 664);
    *(_QWORD *)(a1 + 664) = v989;
    if (v988)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v988 + 8))(v988, v987);
  }
  if (*(_QWORD *)(a2 + 3304))
  {
    v990 = operator new();
    v991 = sub_21B823FE0(v990, *(_QWORD *)(a2 + 3304));
    v992 = *(_QWORD *)(a1 + 3304);
    *(_QWORD *)(a1 + 3304) = v991;
    if (v992)
      (*(void (**)(uint64_t))(*(_QWORD *)v992 + 8))(v992);
  }
  if (*(_QWORD *)(a2 + 3296))
  {
    v993 = operator new();
    v994 = sub_21B823828(v993, *(_QWORD *)(a2 + 3296));
    v995 = *(_QWORD *)(a1 + 3296);
    *(_QWORD *)(a1 + 3296) = v994;
    if (v995)
      (*(void (**)(uint64_t))(*(_QWORD *)v995 + 8))(v995);
  }
  if (*(_QWORD *)(a2 + 200))
  {
    v996 = (_QWORD *)operator new();
    v997 = sub_21B7A1C94(v996, *(_QWORD *)(a2 + 200));
    v998 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v997;
    if (v998)
      (*(void (**)(uint64_t))(*(_QWORD *)v998 + 8))(v998);
  }
  if (*(_QWORD *)(a2 + 952))
  {
    v999 = operator new();
    v1000 = sub_21B72E2F4(v999, *(_QWORD *)(a2 + 952));
    v1001 = *(_QWORD *)(a1 + 952);
    *(_QWORD *)(a1 + 952) = v1000;
    if (v1001)
      (*(void (**)(uint64_t))(*(_QWORD *)v1001 + 8))(v1001);
  }
  if (*(_QWORD *)(a2 + 960))
  {
    v1002 = operator new();
    v1003 = sub_21B72F3D0(v1002, *(_QWORD *)(a2 + 960));
    v1004 = *(_QWORD *)(a1 + 960);
    *(_QWORD *)(a1 + 960) = v1005;
    if (v1004)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1004 + 8))(v1004, v1003);
  }
  if (*(_QWORD *)(a2 + 968))
  {
    v1006 = operator new();
    v1007 = sub_21B732CA8(v1006, *(_QWORD *)(a2 + 968));
    v1008 = *(_QWORD *)(a1 + 968);
    *(_QWORD *)(a1 + 968) = v1009;
    if (v1008)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1008 + 8))(v1008, v1007);
  }
  if (*(_QWORD *)(a2 + 936))
  {
    v1010 = operator new();
    v1011 = sub_21B72C6F0(v1010, *(_QWORD *)(a2 + 936));
    v1012 = *(_QWORD *)(a1 + 936);
    *(_QWORD *)(a1 + 936) = v1013;
    if (v1012)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1012 + 8))(v1012, v1011);
  }
  if (*(_QWORD *)(a2 + 992))
  {
    v1014 = operator new();
    v1015 = sub_21B738B48(v1014, *(_QWORD *)(a2 + 992));
    v1016 = *(_QWORD *)(a1 + 992);
    *(_QWORD *)(a1 + 992) = v1015;
    if (v1016)
      (*(void (**)(uint64_t))(*(_QWORD *)v1016 + 8))(v1016);
  }
  if (*(_QWORD *)(a2 + 136))
  {
    v1017 = operator new();
    v1018 = sub_21B79F2C4(v1017, *(_QWORD *)(a2 + 136));
    v1019 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v1018;
    if (v1019)
      (*(void (**)(uint64_t))(*(_QWORD *)v1019 + 8))(v1019);
  }
  if (*(_QWORD *)(a2 + 2680))
  {
    v1020 = operator new();
    v1021 = sub_21B8695E8(v1020, *(_QWORD *)(a2 + 2680));
    v1022 = *(_QWORD *)(a1 + 2680);
    *(_QWORD *)(a1 + 2680) = v1021;
    if (v1022)
      (*(void (**)(uint64_t))(*(_QWORD *)v1022 + 8))(v1022);
  }
  if (*(_QWORD *)(a2 + 2672))
  {
    v1023 = operator new();
    v1024 = sub_21B8677B4(v1023, *(_QWORD *)(a2 + 2672));
    v1025 = *(_QWORD *)(a1 + 2672);
    *(_QWORD *)(a1 + 2672) = v1024;
    if (v1025)
      (*(void (**)(uint64_t))(*(_QWORD *)v1025 + 8))(v1025);
  }
  if (*(_QWORD *)(a2 + 752))
  {
    v1026 = operator new();
    v1027 = sub_21B7C6DDC(v1026, *(_QWORD *)(a2 + 752));
    v1028 = *(_QWORD *)(a1 + 752);
    *(_QWORD *)(a1 + 752) = v1027;
    if (v1028)
      (*(void (**)(uint64_t))(*(_QWORD *)v1028 + 8))(v1028);
  }
  if (*(_QWORD *)(a2 + 944))
  {
    v1029 = operator new();
    v1030 = sub_21B72DDA4(v1029, *(_QWORD *)(a2 + 944));
    v1031 = *(_QWORD *)(a1 + 944);
    *(_QWORD *)(a1 + 944) = v1030;
    if (v1031)
      (*(void (**)(uint64_t))(*(_QWORD *)v1031 + 8))(v1031);
  }
  if (*(_QWORD *)(a2 + 3352))
  {
    v1032 = operator new();
    v1033 = sub_21B8267E4(v1032, *(_QWORD *)(a2 + 3352));
    v1034 = *(_QWORD *)(a1 + 3352);
    *(_QWORD *)(a1 + 3352) = v1033;
    if (v1034)
      (*(void (**)(uint64_t))(*(_QWORD *)v1034 + 8))(v1034);
  }
  if (*(_QWORD *)(a2 + 184))
  {
    v1035 = operator new();
    v1036 = sub_21B7A1084(v1035, *(_QWORD *)(a2 + 184));
    v1037 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v1038;
    if (v1037)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1037 + 8))(v1037, v1036);
  }
  if (*(_QWORD *)(a2 + 976))
  {
    v1039 = operator new();
    v1040 = sub_21B7352E4(v1039, *(_QWORD *)(a2 + 976));
    v1041 = *(_QWORD *)(a1 + 976);
    *(_QWORD *)(a1 + 976) = v1040;
    if (v1041)
      (*(void (**)(uint64_t))(*(_QWORD *)v1041 + 8))(v1041);
  }
  if (*(_QWORD *)(a2 + 1176))
  {
    v1042 = operator new();
    v1043 = sub_21B74ACDC(v1042, *(_QWORD *)(a2 + 1176));
    v1044 = *(_QWORD *)(a1 + 1176);
    *(_QWORD *)(a1 + 1176) = v1043;
    if (v1044)
      (*(void (**)(uint64_t))(*(_QWORD *)v1044 + 8))(v1044);
  }
  if (*(_QWORD *)(a2 + 3056))
  {
    v1045 = operator new();
    v1046 = sub_21B810FE8(v1045, *(_QWORD *)(a2 + 3056));
    v1047 = *(_QWORD *)(a1 + 3056);
    *(_QWORD *)(a1 + 3056) = v1048;
    if (v1047)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1047 + 8))(v1047, v1046);
  }
  if (*(_QWORD *)(a2 + 1016))
  {
    v1049 = operator new();
    v1050 = sub_21B73E9F0(v1049, *(_QWORD *)(a2 + 1016));
    v1051 = *(_QWORD *)(a1 + 1016);
    *(_QWORD *)(a1 + 1016) = v1050;
    if (v1051)
      (*(void (**)(uint64_t))(*(_QWORD *)v1051 + 8))(v1051);
  }
  if (*(_QWORD *)(a2 + 264))
  {
    v1052 = operator new();
    v1053 = sub_21B7A8228(v1052, *(_QWORD *)(a2 + 264));
    v1054 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 264) = v1053;
    if (v1054)
      (*(void (**)(uint64_t))(*(_QWORD *)v1054 + 8))(v1054);
  }
  if (*(_QWORD *)(a2 + 2864))
  {
    v1055 = operator new();
    v1056 = sub_21B803748(v1055, *(_QWORD *)(a2 + 2864));
    v1057 = *(_QWORD *)(a1 + 2864);
    *(_QWORD *)(a1 + 2864) = v1058;
    if (v1057)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1057 + 8))(v1057, v1056);
  }
  if (*(_QWORD *)(a2 + 2888))
  {
    v1059 = operator new();
    v1060 = sub_21B8045E0(v1059, *(_QWORD *)(a2 + 2888));
    v1061 = *(_QWORD *)(a1 + 2888);
    *(_QWORD *)(a1 + 2888) = v1060;
    if (v1061)
      (*(void (**)(uint64_t))(*(_QWORD *)v1061 + 8))(v1061);
  }
  if (*(_QWORD *)(a2 + 2872))
  {
    v1062 = operator new();
    v1063 = sub_21B803D88(v1062, *(_QWORD *)(a2 + 2872));
    v1064 = *(_QWORD *)(a1 + 2872);
    *(_QWORD *)(a1 + 2872) = v1065;
    if (v1064)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1064 + 8))(v1064, v1063);
  }
  if (*(_QWORD *)(a2 + 2880))
  {
    v1066 = operator new();
    v1067 = sub_21B8041F8(v1066, *(_QWORD *)(a2 + 2880));
    v1068 = *(_QWORD *)(a1 + 2880);
    *(_QWORD *)(a1 + 2880) = v1069;
    if (v1068)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1068 + 8))(v1068, v1067);
  }
  if (*(_QWORD *)(a2 + 2928))
  {
    v1070 = operator new();
    v1071 = sub_21B807D70(v1070, *(_QWORD *)(a2 + 2928));
    v1072 = *(_QWORD *)(a1 + 2928);
    *(_QWORD *)(a1 + 2928) = v1073;
    if (v1072)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1072 + 8))(v1072, v1071);
  }
  if (*(_QWORD *)(a2 + 984))
  {
    v1074 = operator new();
    v1075 = sub_21B737EEC(v1074, *(_QWORD *)(a2 + 984));
    v1076 = *(_QWORD *)(a1 + 984);
    *(_QWORD *)(a1 + 984) = v1077;
    if (v1076)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1076 + 8))(v1076, v1075);
  }
  if (*(_QWORD *)(a2 + 1456))
  {
    v1078 = operator new();
    v1079 = sub_21B75B3A4(v1078, *(_QWORD *)(a2 + 1456));
    v1080 = *(_QWORD *)(a1 + 1456);
    *(_QWORD *)(a1 + 1456) = v1079;
    if (v1080)
      (*(void (**)(uint64_t))(*(_QWORD *)v1080 + 8))(v1080);
  }
  if (*(_QWORD *)(a2 + 2560))
  {
    v1081 = operator new();
    v1082 = sub_21B862EB8(v1081, *(_QWORD *)(a2 + 2560));
    v1083 = *(_QWORD *)(a1 + 2560);
    *(_QWORD *)(a1 + 2560) = v1082;
    if (v1083)
      (*(void (**)(uint64_t))(*(_QWORD *)v1083 + 8))(v1083);
  }
  if (*(_QWORD *)(a2 + 1992))
  {
    v1084 = operator new();
    v1085 = sub_21B83E124(v1084, *(_QWORD *)(a2 + 1992));
    v1086 = *(_QWORD *)(a1 + 1992);
    *(_QWORD *)(a1 + 1992) = v1085;
    if (v1086)
      (*(void (**)(uint64_t))(*(_QWORD *)v1086 + 8))(v1086);
  }
  if (*(_QWORD *)(a2 + 928))
  {
    v1087 = operator new();
    v1088 = sub_21B72BBA8(v1087, *(_QWORD *)(a2 + 928));
    v1089 = *(_QWORD *)(a1 + 928);
    *(_QWORD *)(a1 + 928) = v1090;
    if (v1089)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1089 + 8))(v1089, v1088);
  }
  if (*(_QWORD *)(a2 + 1824))
  {
    v1091 = operator new();
    v1092 = sub_21B7955A8(v1091, *(_QWORD *)(a2 + 1824));
    v1093 = *(_QWORD *)(a1 + 1824);
    *(_QWORD *)(a1 + 1824) = v1094;
    if (v1093)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1093 + 8))(v1093, v1092);
  }
  if (*(_QWORD *)(a2 + 816))
  {
    v1095 = operator new();
    v1096 = sub_21B7D00E4(v1095, *(_QWORD *)(a2 + 816));
    v1097 = *(_QWORD *)(a1 + 816);
    *(_QWORD *)(a1 + 816) = v1096;
    if (v1097)
      (*(void (**)(uint64_t))(*(_QWORD *)v1097 + 8))(v1097);
  }
  if (*(_QWORD *)(a2 + 800))
  {
    v1098 = operator new();
    v1099 = sub_21B7CD650(v1098, *(_QWORD *)(a2 + 800));
    v1100 = *(_QWORD *)(a1 + 800);
    *(_QWORD *)(a1 + 800) = v1099;
    if (v1100)
      (*(void (**)(uint64_t))(*(_QWORD *)v1100 + 8))(v1100);
  }
  if (*(_QWORD *)(a2 + 808))
  {
    v1101 = operator new();
    v1102 = sub_21B7CDEE8(v1101, *(_QWORD *)(a2 + 808));
    v1103 = *(_QWORD *)(a1 + 808);
    *(_QWORD *)(a1 + 808) = v1102;
    if (v1103)
      (*(void (**)(uint64_t))(*(_QWORD *)v1103 + 8))(v1103);
  }
  if (*(_QWORD *)(a2 + 792))
  {
    v1104 = operator new();
    v1105 = sub_21B7CC4B0(v1104, *(_QWORD *)(a2 + 792));
    v1106 = *(_QWORD *)(a1 + 792);
    *(_QWORD *)(a1 + 792) = v1107;
    if (v1106)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1106 + 8))(v1106, v1105);
  }
  if (*(_QWORD *)(a2 + 2144))
  {
    v1108 = operator new();
    v1109 = sub_21B84C458(v1108, *(_QWORD *)(a2 + 2144));
    v1110 = *(_QWORD *)(a1 + 2144);
    *(_QWORD *)(a1 + 2144) = v1109;
    if (v1110)
      (*(void (**)(uint64_t))(*(_QWORD *)v1110 + 8))(v1110);
  }
  if (*(_QWORD *)(a2 + 1528))
  {
    v1111 = operator new();
    v1112 = sub_21B761AD8(v1111, *(_QWORD *)(a2 + 1528));
    v1113 = *(_QWORD *)(a1 + 1528);
    *(_QWORD *)(a1 + 1528) = v1114;
    if (v1113)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1113 + 8))(v1113, v1112);
  }
  if (*(_QWORD *)(a2 + 1536))
  {
    v1115 = operator new();
    v1116 = sub_21B763028(v1115, *(_QWORD *)(a2 + 1536));
    v1117 = *(_QWORD *)(a1 + 1536);
    *(_QWORD *)(a1 + 1536) = v1118;
    if (v1117)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1117 + 8))(v1117, v1116);
  }
  if (*(_QWORD *)(a2 + 1560))
  {
    v1119 = operator new();
    v1120 = sub_21B76953C(v1119, *(_QWORD *)(a2 + 1560));
    v1121 = *(_QWORD *)(a1 + 1560);
    *(_QWORD *)(a1 + 1560) = v1120;
    if (v1121)
      (*(void (**)(uint64_t))(*(_QWORD *)v1121 + 8))(v1121);
  }
  if (*(_QWORD *)(a2 + 1648))
  {
    v1122 = operator new();
    v1123 = sub_21B7759B4(v1122, *(_QWORD *)(a2 + 1648));
    v1124 = *(_QWORD *)(a1 + 1648);
    *(_QWORD *)(a1 + 1648) = v1125;
    if (v1124)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1124 + 8))(v1124, v1123);
  }
  if (*(_QWORD *)(a2 + 1768))
  {
    v1126 = operator new();
    v1127 = sub_21B7913C0(v1126, *(_QWORD *)(a2 + 1768));
    v1128 = *(_QWORD *)(a1 + 1768);
    *(_QWORD *)(a1 + 1768) = v1127;
    if (v1128)
      (*(void (**)(uint64_t))(*(_QWORD *)v1128 + 8))(v1128);
  }
  if (*(_QWORD *)(a2 + 1760))
  {
    v1129 = operator new();
    v1130 = sub_21B790D04(v1129, *(_QWORD *)(a2 + 1760));
    v1131 = *(_QWORD *)(a1 + 1760);
    *(_QWORD *)(a1 + 1760) = v1130;
    if (v1131)
      (*(void (**)(uint64_t))(*(_QWORD *)v1131 + 8))(v1131);
  }
  if (*(_QWORD *)(a2 + 1632))
  {
    v1132 = operator new();
    v1133 = sub_21B773E9C(v1132, *(_QWORD *)(a2 + 1632));
    v1134 = *(_QWORD *)(a1 + 1632);
    *(_QWORD *)(a1 + 1632) = v1135;
    if (v1134)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1134 + 8))(v1134, v1133);
  }
  if (*(_QWORD *)(a2 + 1312))
  {
    v1136 = operator new();
    v1137 = sub_21B751D90(v1136, *(_QWORD *)(a2 + 1312));
    v1138 = *(_QWORD *)(a1 + 1312);
    *(_QWORD *)(a1 + 1312) = v1137;
    if (v1138)
      (*(void (**)(uint64_t))(*(_QWORD *)v1138 + 8))(v1138);
  }
  if (*(_QWORD *)(a2 + 1304))
  {
    v1139 = operator new();
    v1140 = sub_21B751A90(v1139, *(_QWORD *)(a2 + 1304));
    v1141 = *(_QWORD *)(a1 + 1304);
    *(_QWORD *)(a1 + 1304) = v1140;
    if (v1141)
      (*(void (**)(uint64_t))(*(_QWORD *)v1141 + 8))(v1141);
  }
  if (*(_QWORD *)(a2 + 1520))
  {
    v1142 = operator new();
    v1143 = sub_21B760C60(v1142, *(_QWORD *)(a2 + 1520));
    v1144 = *(_QWORD *)(a1 + 1520);
    *(_QWORD *)(a1 + 1520) = v1143;
    if (v1144)
      (*(void (**)(uint64_t))(*(_QWORD *)v1144 + 8))(v1144);
  }
  if (*(_QWORD *)(a2 + 1544))
  {
    v1145 = operator new();
    v1146 = sub_21B765240(v1145, *(_QWORD *)(a2 + 1544));
    v1147 = *(_QWORD *)(a1 + 1544);
    *(_QWORD *)(a1 + 1544) = v1148;
    if (v1147)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1147 + 8))(v1147, v1146);
  }
  if (*(_QWORD *)(a2 + 1656))
  {
    v1149 = operator new();
    v1150 = sub_21B778348(v1149, *(_QWORD *)(a2 + 1656));
    v1151 = *(_QWORD *)(a1 + 1656);
    *(_QWORD *)(a1 + 1656) = v1150;
    if (v1151)
      (*(void (**)(uint64_t))(*(_QWORD *)v1151 + 8))(v1151);
  }
  if (*(_QWORD *)(a2 + 1664))
  {
    v1152 = operator new();
    v1153 = sub_21B7789D0(v1152, *(_QWORD *)(a2 + 1664));
    v1154 = *(_QWORD *)(a1 + 1664);
    *(_QWORD *)(a1 + 1664) = v1153;
    if (v1154)
      (*(void (**)(uint64_t))(*(_QWORD *)v1154 + 8))(v1154);
  }
  if (*(_QWORD *)(a2 + 1696))
  {
    v1155 = operator new();
    v1156 = sub_21B77F4A8(v1155, *(_QWORD *)(a2 + 1696));
    v1157 = *(_QWORD *)(a1 + 1696);
    *(_QWORD *)(a1 + 1696) = v1158;
    if (v1157)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1157 + 8))(v1157, v1156);
  }
  if (*(_QWORD *)(a2 + 1600))
  {
    v1159 = operator new();
    v1160 = sub_21B770364(v1159, *(_QWORD *)(a2 + 1600));
    v1161 = *(_QWORD *)(a1 + 1600);
    *(_QWORD *)(a1 + 1600) = v1160;
    if (v1161)
      (*(void (**)(uint64_t))(*(_QWORD *)v1161 + 8))(v1161);
  }
  if (*(_QWORD *)(a2 + 1584))
  {
    v1162 = operator new();
    v1163 = sub_21B76CF04(v1162, *(_QWORD *)(a2 + 1584));
    v1164 = *(_QWORD *)(a1 + 1584);
    *(_QWORD *)(a1 + 1584) = v1163;
    if (v1164)
      (*(void (**)(uint64_t))(*(_QWORD *)v1164 + 8))(v1164);
  }
  if (*(_QWORD *)(a2 + 1704))
  {
    v1165 = operator new();
    v1166 = sub_21B7833F0(v1165, *(_QWORD *)(a2 + 1704));
    v1167 = *(_QWORD *)(a1 + 1704);
    *(_QWORD *)(a1 + 1704) = v1168;
    if (v1167)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1167 + 8))(v1167, v1166);
  }
  if (*(_QWORD *)(a2 + 1592))
  {
    v1169 = operator new();
    v1170 = sub_21B76E4E4(v1169, *(_QWORD *)(a2 + 1592));
    v1171 = *(_QWORD *)(a1 + 1592);
    *(_QWORD *)(a1 + 1592) = v1172;
    if (v1171)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1171 + 8))(v1171, v1170);
  }
  if (*(_QWORD *)(a2 + 1672))
  {
    v1173 = operator new();
    v1174 = sub_21B77A034(v1173, *(_QWORD *)(a2 + 1672));
    v1175 = *(_QWORD *)(a1 + 1672);
    *(_QWORD *)(a1 + 1672) = v1174;
    if (v1175)
      (*(void (**)(uint64_t))(*(_QWORD *)v1175 + 8))(v1175);
  }
  if (*(_QWORD *)(a2 + 768))
  {
    v1176 = operator new();
    v1177 = sub_21B7C8A70(v1176, *(_QWORD *)(a2 + 768));
    v1178 = *(_QWORD *)(a1 + 768);
    *(_QWORD *)(a1 + 768) = v1179;
    if (v1178)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1178 + 8))(v1178, v1177);
  }
  if (*(_QWORD *)(a2 + 3224))
  {
    v1180 = operator new();
    v1181 = sub_21B81F05C(v1180, *(_QWORD *)(a2 + 3224));
    v1182 = *(_QWORD *)(a1 + 3224);
    *(_QWORD *)(a1 + 3224) = v1181;
    if (v1182)
      (*(void (**)(uint64_t))(*(_QWORD *)v1182 + 8))(v1182);
  }
  if (*(_QWORD *)(a2 + 1296))
  {
    v1183 = operator new();
    v1184 = sub_21B7512B4(v1183, *(_QWORD *)(a2 + 1296));
    v1185 = *(_QWORD *)(a1 + 1296);
    *(_QWORD *)(a1 + 1296) = v1184;
    if (v1185)
      (*(void (**)(uint64_t))(*(_QWORD *)v1185 + 8))(v1185);
  }
  if (*(_QWORD *)(a2 + 3232))
  {
    v1186 = operator new();
    v1187 = sub_21B81F718(v1186, *(_QWORD *)(a2 + 3232));
    v1188 = *(_QWORD *)(a1 + 3232);
    *(_QWORD *)(a1 + 3232) = v1189;
    if (v1188)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1188 + 8))(v1188, v1187);
  }
  if (*(_QWORD *)(a2 + 3240))
  {
    v1190 = operator new();
    v1191 = sub_21B82072C(v1190, *(_QWORD *)(a2 + 3240));
    v1192 = *(_QWORD *)(a1 + 3240);
    *(_QWORD *)(a1 + 3240) = v1193;
    if (v1192)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1192 + 8))(v1192, v1191);
  }
  if (*(_QWORD *)(a2 + 2728))
  {
    v1194 = operator new();
    v1195 = sub_21B86DB3C(v1194, *(_QWORD *)(a2 + 2728));
    v1196 = *(_QWORD *)(a1 + 2728);
    *(_QWORD *)(a1 + 2728) = v1197;
    if (v1196)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1196 + 8))(v1196, v1195);
  }
  if (*(_QWORD *)(a2 + 2736))
  {
    v1198 = operator new();
    v1199 = sub_21B86E218(v1198, *(_QWORD *)(a2 + 2736));
    v1200 = *(_QWORD *)(a1 + 2736);
    *(_QWORD *)(a1 + 2736) = v1201;
    if (v1200)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1200 + 8))(v1200, v1199);
  }
  if (*(_QWORD *)(a2 + 2760))
  {
    v1202 = operator new();
    v1203 = sub_21B87174C(v1202, *(_QWORD *)(a2 + 2760));
    v1204 = *(_QWORD *)(a1 + 2760);
    *(_QWORD *)(a1 + 2760) = v1205;
    if (v1204)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1204 + 8))(v1204, v1203);
  }
  if (*(_QWORD *)(a2 + 2800))
  {
    v1206 = operator new();
    v1207 = sub_21B7FD6E0(v1206, *(_QWORD *)(a2 + 2800));
    v1208 = *(_QWORD *)(a1 + 2800);
    *(_QWORD *)(a1 + 2800) = v1209;
    if (v1208)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1208 + 8))(v1208, v1207);
  }
  if (*(_QWORD *)(a2 + 2784))
  {
    v1210 = operator new();
    v1211 = sub_21B873D00(v1210, *(_QWORD *)(a2 + 2784));
    v1212 = *(_QWORD *)(a1 + 2784);
    *(_QWORD *)(a1 + 2784) = v1213;
    if (v1212)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1212 + 8))(v1212, v1211);
  }
  if (*(_QWORD *)(a2 + 1712))
  {
    v1214 = operator new();
    v1215 = sub_21B788EF4(v1214, *(_QWORD *)(a2 + 1712));
    v1216 = *(_QWORD *)(a1 + 1712);
    *(_QWORD *)(a1 + 1712) = v1215;
    if (v1216)
      (*(void (**)(uint64_t))(*(_QWORD *)v1216 + 8))(v1216);
  }
  if (*(_QWORD *)(a2 + 1624))
  {
    v1217 = operator new();
    v1218 = sub_21B772D24(v1217, *(_QWORD *)(a2 + 1624));
    v1219 = *(_QWORD *)(a1 + 1624);
    *(_QWORD *)(a1 + 1624) = v1218;
    if (v1219)
      (*(void (**)(uint64_t))(*(_QWORD *)v1219 + 8))(v1219);
  }
  if (*(_QWORD *)(a2 + 2776))
  {
    v1220 = operator new();
    v1221 = sub_21B8731F4(v1220, *(_QWORD *)(a2 + 2776));
    v1222 = *(_QWORD *)(a1 + 2776);
    *(_QWORD *)(a1 + 2776) = v1223;
    if (v1222)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1222 + 8))(v1222, v1221);
  }
  if (*(_QWORD *)(a2 + 1448))
  {
    v1224 = operator new();
    v1225 = sub_21B752B58(v1224, *(_QWORD *)(a2 + 1448));
    v1226 = *(_QWORD *)(a1 + 1448);
    *(_QWORD *)(a1 + 1448) = v1227;
    if (v1226)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1226 + 8))(v1226, v1225);
  }
  if (*(_QWORD *)(a2 + 1576))
  {
    v1228 = operator new();
    v1229 = sub_21B76BAB8(v1228, *(_QWORD *)(a2 + 1576));
    v1230 = *(_QWORD *)(a1 + 1576);
    *(_QWORD *)(a1 + 1576) = v1229;
    if (v1230)
      (*(void (**)(uint64_t))(*(_QWORD *)v1230 + 8))(v1230);
  }
  if (*(_QWORD *)(a2 + 1640))
  {
    v1231 = operator new();
    v1232 = sub_21B774790(v1231, *(_QWORD *)(a2 + 1640));
    v1233 = *(_QWORD *)(a1 + 1640);
    *(_QWORD *)(a1 + 1640) = v1234;
    if (v1233)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1233 + 8))(v1233, v1232);
  }
  if (*(_QWORD *)(a2 + 1280))
  {
    v1235 = operator new();
    v1236 = sub_21B74F970(v1235, *(_QWORD *)(a2 + 1280));
    v1237 = *(_QWORD *)(a1 + 1280);
    *(_QWORD *)(a1 + 1280) = v1238;
    if (v1237)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1237 + 8))(v1237, v1236);
  }
  if (*(_QWORD *)(a2 + 592))
  {
    v1239 = operator new();
    v1240 = sub_21B7BB37C(v1239, *(_QWORD *)(a2 + 592));
    v1241 = *(_QWORD *)(a1 + 592);
    *(_QWORD *)(a1 + 592) = v1242;
    if (v1241)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1241 + 8))(v1241, v1240);
  }
  if (*(_QWORD *)(a2 + 2336))
  {
    v1243 = operator new();
    v1244 = sub_21B857898(v1243, *(_QWORD *)(a2 + 2336));
    v1245 = *(_QWORD *)(a1 + 2336);
    *(_QWORD *)(a1 + 2336) = v1246;
    if (v1245)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1245 + 8))(v1245, v1244);
  }
  if (*(_QWORD *)(a2 + 688))
  {
    v1247 = operator new();
    v1248 = sub_21B7C3448(v1247, *(_QWORD *)(a2 + 688));
    v1249 = *(_QWORD *)(a1 + 688);
    *(_QWORD *)(a1 + 688) = v1248;
    if (v1249)
      (*(void (**)(uint64_t))(*(_QWORD *)v1249 + 8))(v1249);
  }
  if (*(_QWORD *)(a2 + 856))
  {
    v1250 = operator new();
    v1251 = sub_21B7D1CC0(v1250, *(_QWORD *)(a2 + 856));
    v1252 = *(_QWORD *)(a1 + 856);
    *(_QWORD *)(a1 + 856) = v1251;
    if (v1252)
      (*(void (**)(uint64_t))(*(_QWORD *)v1252 + 8))(v1252);
  }
  if (*(_QWORD *)(a2 + 3200))
  {
    v1253 = operator new();
    v1254 = sub_21B81D0A0(v1253, *(_QWORD *)(a2 + 3200));
    v1255 = *(_QWORD *)(a1 + 3200);
    *(_QWORD *)(a1 + 3200) = v1256;
    if (v1255)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1255 + 8))(v1255, v1254);
  }
  if (*(_QWORD *)(a2 + 2608))
  {
    v1257 = operator new();
    v1258 = sub_21B8655B4(v1257, *(_QWORD *)(a2 + 2608));
    v1259 = *(_QWORD *)(a1 + 2608);
    *(_QWORD *)(a1 + 2608) = v1258;
    if (v1259)
      (*(void (**)(uint64_t))(*(_QWORD *)v1259 + 8))(v1259);
  }
  if (*(_QWORD *)(a2 + 1728))
  {
    v1260 = operator new();
    v1261 = sub_21B78B2F4(v1260, *(_QWORD *)(a2 + 1728));
    v1262 = *(_QWORD *)(a1 + 1728);
    *(_QWORD *)(a1 + 1728) = v1261;
    if (v1262)
      (*(void (**)(uint64_t))(*(_QWORD *)v1262 + 8))(v1262);
  }
  if (*(_QWORD *)(a2 + 3344))
  {
    v1263 = operator new();
    v1264 = sub_21B825818(v1263, *(_QWORD *)(a2 + 3344));
    v1265 = *(_QWORD *)(a1 + 3344);
    *(_QWORD *)(a1 + 3344) = v1264;
    if (v1265)
      (*(void (**)(uint64_t))(*(_QWORD *)v1265 + 8))(v1265);
  }
  if (*(_QWORD *)(a2 + 1568))
  {
    v1266 = operator new();
    v1267 = sub_21B76AB84(v1266, *(_QWORD *)(a2 + 1568));
    v1268 = *(_QWORD *)(a1 + 1568);
    *(_QWORD *)(a1 + 1568) = v1267;
    if (v1268)
      (*(void (**)(uint64_t))(*(_QWORD *)v1268 + 8))(v1268);
  }
  if (*(_QWORD *)(a2 + 2792))
  {
    v1269 = operator new();
    v1270 = sub_21B8743D0(v1269, *(_QWORD *)(a2 + 2792));
    v1271 = *(_QWORD *)(a1 + 2792);
    *(_QWORD *)(a1 + 2792) = v1270;
    if (v1271)
      (*(void (**)(uint64_t))(*(_QWORD *)v1271 + 8))(v1271);
  }
  if (*(_QWORD *)(a2 + 3096))
  {
    v1272 = operator new();
    v1273 = sub_21B81304C(v1272, *(_QWORD *)(a2 + 3096));
    v1274 = *(_QWORD *)(a1 + 3096);
    *(_QWORD *)(a1 + 3096) = v1275;
    if (v1274)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1274 + 8))(v1274, v1273);
  }
  if (*(_QWORD *)(a2 + 2312))
  {
    v1276 = operator new();
    v1277 = sub_21B856008(v1276, *(_QWORD *)(a2 + 2312));
    v1278 = *(_QWORD *)(a1 + 2312);
    *(_QWORD *)(a1 + 2312) = v1277;
    if (v1278)
      (*(void (**)(uint64_t))(*(_QWORD *)v1278 + 8))(v1278);
  }
  if (*(_QWORD *)(a2 + 1896))
  {
    v1279 = operator new();
    v1280 = sub_21B8360D0(v1279, *(_QWORD *)(a2 + 1896));
    v1281 = *(_QWORD *)(a1 + 1896);
    *(_QWORD *)(a1 + 1896) = v1280;
    if (v1281)
      (*(void (**)(uint64_t))(*(_QWORD *)v1281 + 8))(v1281);
  }
  if (*(_QWORD *)(a2 + 2264))
  {
    v1282 = operator new();
    v1283 = sub_21B8519B4(v1282, *(_QWORD *)(a2 + 2264));
    v1284 = *(_QWORD *)(a1 + 2264);
    *(_QWORD *)(a1 + 2264) = v1283;
    if (v1284)
      (*(void (**)(uint64_t))(*(_QWORD *)v1284 + 8))(v1284);
  }
  if (*(_QWORD *)(a2 + 2272))
  {
    v1285 = operator new();
    v1286 = sub_21B852090(v1285, *(_QWORD *)(a2 + 2272));
    v1287 = *(_QWORD *)(a1 + 2272);
    *(_QWORD *)(a1 + 2272) = v1286;
    if (v1287)
      (*(void (**)(uint64_t))(*(_QWORD *)v1287 + 8))(v1287);
  }
  if (*(_QWORD *)(a2 + 2280))
  {
    v1288 = operator new();
    v1289 = sub_21B8527A4(v1288, *(_QWORD *)(a2 + 2280));
    v1290 = *(_QWORD *)(a1 + 2280);
    *(_QWORD *)(a1 + 2280) = v1291;
    if (v1290)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1290 + 8))(v1290, v1289);
  }
  if (*(_QWORD *)(a2 + 2160))
  {
    v1292 = operator new();
    v1293 = sub_21B84CBB8(v1292, *(_QWORD *)(a2 + 2160));
    v1294 = *(_QWORD *)(a1 + 2160);
    *(_QWORD *)(a1 + 2160) = v1295;
    if (v1294)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1294 + 8))(v1294, v1293);
  }
  if (*(_QWORD *)(a2 + 2296))
  {
    v1296 = operator new();
    v1297 = sub_21B8530F4(v1296, *(_QWORD *)(a2 + 2296));
    v1298 = *(_QWORD *)(a1 + 2296);
    *(_QWORD *)(a1 + 2296) = v1299;
    if (v1298)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1298 + 8))(v1298, v1297);
  }
  if (*(_QWORD *)(a2 + 1816))
  {
    v1300 = operator new();
    v1301 = sub_21B75DD04(v1300, *(_QWORD *)(a2 + 1816));
    v1302 = *(_QWORD *)(a1 + 1816);
    *(_QWORD *)(a1 + 1816) = v1303;
    if (v1302)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1302 + 8))(v1302, v1301);
  }
  if (*(_QWORD *)(a2 + 3208))
  {
    v1304 = operator new();
    v1305 = sub_21B81E4CC(v1304, *(_QWORD *)(a2 + 3208));
    v1306 = *(_QWORD *)(a1 + 3208);
    *(_QWORD *)(a1 + 3208) = v1307;
    if (v1306)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1306 + 8))(v1306, v1305);
  }
  if (*(_QWORD *)(a2 + 2232))
  {
    v1308 = operator new();
    v1309 = sub_21B8507E4(v1308, *(_QWORD *)(a2 + 2232));
    v1310 = *(_QWORD *)(a1 + 2232);
    *(_QWORD *)(a1 + 2232) = v1311;
    if (v1310)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1310 + 8))(v1310, v1309);
  }
  if (*(_QWORD *)(a2 + 2240))
  {
    v1312 = operator new();
    v1313 = sub_21B850C94(v1312, *(_QWORD *)(a2 + 2240));
    v1314 = *(_QWORD *)(a1 + 2240);
    *(_QWORD *)(a1 + 2240) = v1313;
    if (v1314)
      (*(void (**)(uint64_t))(*(_QWORD *)v1314 + 8))(v1314);
  }
  if (*(_QWORD *)(a2 + 3192))
  {
    v1315 = operator new();
    v1316 = sub_21B817FDC(v1315, *(_QWORD *)(a2 + 3192));
    v1317 = *(_QWORD *)(a1 + 3192);
    *(_QWORD *)(a1 + 3192) = v1318;
    if (v1317)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1317 + 8))(v1317, v1316);
  }
  if (*(_QWORD *)(a2 + 3104))
  {
    v1319 = operator new();
    v1320 = sub_21B813ABC(v1319, *(_QWORD *)(a2 + 3104));
    v1321 = *(_QWORD *)(a1 + 3104);
    *(_QWORD *)(a1 + 3104) = v1322;
    if (v1321)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1321 + 8))(v1321, v1320);
  }
  if (*(_QWORD *)(a2 + 824))
  {
    v1323 = operator new();
    v1324 = sub_21B7C9764(v1323, *(_QWORD *)(a2 + 824));
    v1325 = *(_QWORD *)(a1 + 824);
    *(_QWORD *)(a1 + 824) = v1324;
    if (v1325)
      (*(void (**)(uint64_t))(*(_QWORD *)v1325 + 8))(v1325);
  }
  if (*(_QWORD *)(a2 + 1744))
  {
    v1326 = operator new();
    v1327 = sub_21B78E848(v1326, *(_QWORD *)(a2 + 1744));
    v1328 = *(_QWORD *)(a1 + 1744);
    *(_QWORD *)(a1 + 1744) = v1327;
    if (v1328)
      (*(void (**)(uint64_t))(*(_QWORD *)v1328 + 8))(v1328);
  }
  if (*(_QWORD *)(a2 + 2856))
  {
    v1329 = operator new();
    v1330 = sub_21B802FBC(v1329, *(_QWORD *)(a2 + 2856));
    v1331 = *(_QWORD *)(a1 + 2856);
    *(_QWORD *)(a1 + 2856) = v1330;
    if (v1331)
      (*(void (**)(uint64_t))(*(_QWORD *)v1331 + 8))(v1331);
  }
  if (*(_QWORD *)(a2 + 2224))
  {
    v1332 = operator new();
    v1333 = sub_21B84FB60(v1332, *(_QWORD *)(a2 + 2224));
    v1334 = *(_QWORD *)(a1 + 2224);
    *(_QWORD *)(a1 + 2224) = v1335;
    if (v1334)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1334 + 8))(v1334, v1333);
  }
  if (*(_QWORD *)(a2 + 2176))
  {
    v1336 = operator new();
    v1337 = sub_21B84D498(v1336, *(_QWORD *)(a2 + 2176));
    v1338 = *(_QWORD *)(a1 + 2176);
    *(_QWORD *)(a1 + 2176) = v1339;
    if (v1338)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1338 + 8))(v1338, v1337);
  }
  if (*(_QWORD *)(a2 + 2168))
  {
    v1340 = operator new();
    v1341 = sub_21B84D028(v1340, *(_QWORD *)(a2 + 2168));
    v1342 = *(_QWORD *)(a1 + 2168);
    *(_QWORD *)(a1 + 2168) = v1343;
    if (v1342)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1342 + 8))(v1342, v1341);
  }
  if (*(_QWORD *)(a2 + 2200))
  {
    v1344 = operator new();
    v1345 = sub_21B84E740(v1344, *(_QWORD *)(a2 + 2200));
    v1346 = *(_QWORD *)(a1 + 2200);
    *(_QWORD *)(a1 + 2200) = v1347;
    if (v1346)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1346 + 8))(v1346, v1345);
  }
  if (*(_QWORD *)(a2 + 104))
  {
    v1348 = operator new();
    v1349 = sub_21B79D67C(v1348, *(_QWORD *)(a2 + 104));
    v1350 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v1349;
    if (v1350)
      (*(void (**)(uint64_t))(*(_QWORD *)v1350 + 8))(v1350);
  }
  if (*(_QWORD *)(a2 + 2288))
  {
    v1351 = operator new();
    v1352 = sub_21B852C14(v1351, *(_QWORD *)(a2 + 2288));
    v1353 = *(_QWORD *)(a1 + 2288);
    *(_QWORD *)(a1 + 2288) = v1354;
    if (v1353)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1353 + 8))(v1353, v1352);
  }
  if (*(_QWORD *)(a2 + 2472))
  {
    v1355 = operator new();
    v1356 = sub_21B85ECB4(v1355, *(_QWORD *)(a2 + 2472));
    v1357 = *(_QWORD *)(a1 + 2472);
    *(_QWORD *)(a1 + 2472) = v1358;
    if (v1357)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1357 + 8))(v1357, v1356);
  }
  if (*(_QWORD *)(a2 + 2496))
  {
    v1359 = operator new();
    v1360 = sub_21B85FB78(v1359, *(_QWORD *)(a2 + 2496));
    v1361 = *(_QWORD *)(a1 + 2496);
    *(_QWORD *)(a1 + 2496) = v1362;
    if (v1361)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1361 + 8))(v1361, v1360);
  }
  if (*(_QWORD *)(a2 + 1688))
  {
    v1363 = operator new();
    v1364 = sub_21B77DC78(v1363, *(_QWORD *)(a2 + 1688));
    v1365 = *(_QWORD *)(a1 + 1688);
    *(_QWORD *)(a1 + 1688) = v1364;
    if (v1365)
      (*(void (**)(uint64_t))(*(_QWORD *)v1365 + 8))(v1365);
  }
  if (*(_QWORD *)(a2 + 2504))
  {
    v1366 = operator new();
    v1367 = sub_21B860538(v1366, *(_QWORD *)(a2 + 2504));
    v1368 = *(_QWORD *)(a1 + 2504);
    *(_QWORD *)(a1 + 2504) = v1369;
    if (v1368)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1368 + 8))(v1368, v1367);
  }
  if (*(_QWORD *)(a2 + 2480))
  {
    v1370 = operator new();
    v1371 = sub_21B85F0B4(v1370, *(_QWORD *)(a2 + 2480));
    v1372 = *(_QWORD *)(a1 + 2480);
    *(_QWORD *)(a1 + 2480) = v1371;
    if (v1372)
      (*(void (**)(uint64_t))(*(_QWORD *)v1372 + 8))(v1372);
  }
  if (*(_QWORD *)(a2 + 2216))
  {
    v1373 = operator new();
    v1374 = sub_21B84F238(v1373, *(_QWORD *)(a2 + 2216));
    v1375 = *(_QWORD *)(a1 + 2216);
    *(_QWORD *)(a1 + 2216) = v1374;
    if (v1375)
      (*(void (**)(uint64_t))(*(_QWORD *)v1375 + 8))(v1375);
  }
  if (*(_QWORD *)(a2 + 576))
  {
    v1376 = operator new();
    v1377 = sub_21B7B9498(v1376, *(_QWORD *)(a2 + 576));
    v1378 = *(_QWORD *)(a1 + 576);
    *(_QWORD *)(a1 + 576) = v1377;
    if (v1378)
      (*(void (**)(uint64_t))(*(_QWORD *)v1378 + 8))(v1378);
  }
  if (*(_QWORD *)(a2 + 2208))
  {
    v1379 = operator new();
    v1380 = sub_21B84EC04(v1379, *(_QWORD *)(a2 + 2208));
    v1381 = *(_QWORD *)(a1 + 2208);
    *(_QWORD *)(a1 + 2208) = v1382;
    if (v1381)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1381 + 8))(v1381, v1380);
  }
  if (*(_QWORD *)(a2 + 2344))
  {
    v1383 = operator new();
    v1384 = sub_21B857D60(v1383, *(_QWORD *)(a2 + 2344));
    v1385 = *(_QWORD *)(a1 + 2344);
    *(_QWORD *)(a1 + 2344) = v1384;
    if (v1385)
      (*(void (**)(uint64_t))(*(_QWORD *)v1385 + 8))(v1385);
  }
  if (*(_QWORD *)(a2 + 1928))
  {
    v1386 = operator new();
    v1387 = sub_21B837478(v1386, *(_QWORD *)(a2 + 1928));
    v1388 = *(_QWORD *)(a1 + 1928);
    *(_QWORD *)(a1 + 1928) = v1387;
    if (v1388)
      (*(void (**)(uint64_t))(*(_QWORD *)v1388 + 8))(v1388);
  }
  if (*(_QWORD *)(a2 + 1504))
  {
    v1389 = operator new();
    v1390 = sub_21B75E658(v1389, *(_QWORD *)(a2 + 1504));
    v1391 = *(_QWORD *)(a1 + 1504);
    *(_QWORD *)(a1 + 1504) = v1390;
    if (v1391)
      (*(void (**)(uint64_t))(*(_QWORD *)v1391 + 8))(v1391);
  }
  if (*(_QWORD *)(a2 + 1512))
  {
    v1392 = operator new();
    v1393 = sub_21B75FB28(v1392, *(_QWORD *)(a2 + 1512));
    v1394 = *(_QWORD *)(a1 + 1512);
    *(_QWORD *)(a1 + 1512) = v1393;
    if (v1394)
      (*(void (**)(uint64_t))(*(_QWORD *)v1394 + 8))(v1394);
  }
  if (*(_QWORD *)(a2 + 2488))
  {
    v1395 = operator new();
    v1396 = sub_21B85F6C4(v1395, *(_QWORD *)(a2 + 2488));
    v1397 = *(_QWORD *)(a1 + 2488);
    *(_QWORD *)(a1 + 2488) = v1396;
    if (v1397)
      (*(void (**)(uint64_t))(*(_QWORD *)v1397 + 8))(v1397);
  }
  if (*(_QWORD *)(a2 + 2192))
  {
    v1398 = operator new();
    v1399 = sub_21B84E2D0(v1398, *(_QWORD *)(a2 + 2192));
    v1400 = *(_QWORD *)(a1 + 2192);
    *(_QWORD *)(a1 + 2192) = v1401;
    if (v1400)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1400 + 8))(v1400, v1399);
  }
  if (*(_QWORD *)(a2 + 2184))
  {
    v1402 = operator new();
    v1403 = sub_21B84D9C8(v1402, *(_QWORD *)(a2 + 2184));
    v1404 = *(_QWORD *)(a1 + 2184);
    *(_QWORD *)(a1 + 2184) = v1403;
    if (v1404)
      (*(void (**)(uint64_t))(*(_QWORD *)v1404 + 8))(v1404);
  }
  if (*(_QWORD *)(a2 + 1616))
  {
    v1405 = operator new();
    v1406 = sub_21B7713E8(v1405, *(_QWORD *)(a2 + 1616));
    v1407 = *(_QWORD *)(a1 + 1616);
    *(_QWORD *)(a1 + 1616) = v1406;
    if (v1407)
      (*(void (**)(uint64_t))(*(_QWORD *)v1407 + 8))(v1407);
  }
  if (*(_QWORD *)(a2 + 1608))
  {
    v1408 = operator new();
    v1409 = sub_21B7709EC(v1408, *(_QWORD *)(a2 + 1608));
    v1410 = *(_QWORD *)(a1 + 1608);
    *(_QWORD *)(a1 + 1608) = v1409;
    if (v1410)
      (*(void (**)(uint64_t))(*(_QWORD *)v1410 + 8))(v1410);
  }
  if (*(_QWORD *)(a2 + 2512))
  {
    v1411 = operator new();
    v1412 = sub_21B860C04(v1411, *(_QWORD *)(a2 + 2512));
    v1413 = *(_QWORD *)(a1 + 2512);
    *(_QWORD *)(a1 + 2512) = v1412;
    if (v1413)
      (*(void (**)(uint64_t))(*(_QWORD *)v1413 + 8))(v1413);
  }
  if (*(_QWORD *)(a2 + 312))
  {
    v1414 = operator new();
    v1415 = sub_21B7AB158(v1414, *(_QWORD *)(a2 + 312));
    v1416 = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v1417;
    if (v1416)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1416 + 8))(v1416, v1415);
  }
  if (*(_QWORD *)(a2 + 904))
  {
    v1418 = operator new();
    v1419 = sub_21B7D4FCC(v1418, *(_QWORD *)(a2 + 904));
    v1420 = *(_QWORD *)(a1 + 904);
    *(_QWORD *)(a1 + 904) = v1419;
    if (v1420)
      (*(void (**)(uint64_t))(*(_QWORD *)v1420 + 8))(v1420);
  }
  if (*(_QWORD *)(a2 + 2360))
  {
    v1421 = operator new();
    v1422 = sub_21B8589E4(v1421, *(_QWORD *)(a2 + 2360));
    v1423 = *(_QWORD *)(a1 + 2360);
    *(_QWORD *)(a1 + 2360) = v1422;
    if (v1423)
      (*(void (**)(uint64_t))(*(_QWORD *)v1423 + 8))(v1423);
  }
  if (*(_QWORD *)(a2 + 2384))
  {
    v1424 = operator new();
    v1425 = sub_21B85A584(v1424, *(_QWORD *)(a2 + 2384));
    v1426 = *(_QWORD *)(a1 + 2384);
    *(_QWORD *)(a1 + 2384) = v1427;
    if (v1426)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1426 + 8))(v1426, v1425);
  }
  if (*(_QWORD *)(a2 + 256))
  {
    v1428 = operator new();
    v1429 = sub_21B7A79C0(v1428, *(_QWORD *)(a2 + 256));
    v1430 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v1429;
    if (v1430)
      (*(void (**)(uint64_t))(*(_QWORD *)v1430 + 8))(v1430);
  }
  if (*(_QWORD *)(a2 + 248))
  {
    v1431 = operator new();
    v1432 = sub_21B7A723C(v1431, *(_QWORD *)(a2 + 248));
    v1433 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 248) = v1432;
    if (v1433)
      (*(void (**)(uint64_t))(*(_QWORD *)v1433 + 8))(v1433);
  }
  if (*(_QWORD *)(a2 + 2816))
  {
    v1434 = operator new();
    v1435 = sub_21B7FEFCC(v1434, *(_QWORD *)(a2 + 2816));
    v1436 = *(_QWORD *)(a1 + 2816);
    *(_QWORD *)(a1 + 2816) = v1435;
    if (v1436)
      (*(void (**)(uint64_t))(*(_QWORD *)v1436 + 8))(v1436);
  }
  if (*(_QWORD *)(a2 + 2808))
  {
    v1437 = operator new();
    v1438 = sub_21B7FEAEC(v1437, *(_QWORD *)(a2 + 2808));
    v1439 = *(_QWORD *)(a1 + 2808);
    *(_QWORD *)(a1 + 2808) = v1438;
    if (v1439)
      (*(void (**)(uint64_t))(*(_QWORD *)v1439 + 8))(v1439);
  }
  if (*(_QWORD *)(a2 + 2624))
  {
    v1440 = operator new();
    v1441 = sub_21B8537D8(v1440, *(_QWORD *)(a2 + 2624));
    v1442 = *(_QWORD *)(a1 + 2624);
    *(_QWORD *)(a1 + 2624) = v1441;
    if (v1442)
      (*(void (**)(uint64_t))(*(_QWORD *)v1442 + 8))(v1442);
  }
  if (*(_QWORD *)(a2 + 2632))
  {
    v1443 = operator new();
    v1444 = sub_21B853C98(v1443, *(_QWORD *)(a2 + 2632));
    v1445 = *(_QWORD *)(a1 + 2632);
    *(_QWORD *)(a1 + 2632) = v1444;
    if (v1445)
      (*(void (**)(uint64_t))(*(_QWORD *)v1445 + 8))(v1445);
  }
  if (*(_QWORD *)(a2 + 2648))
  {
    v1446 = operator new();
    v1447 = sub_21B854660(v1446, *(_QWORD *)(a2 + 2648));
    v1448 = *(_QWORD *)(a1 + 2648);
    *(_QWORD *)(a1 + 2648) = v1447;
    if (v1448)
      (*(void (**)(uint64_t))(*(_QWORD *)v1448 + 8))(v1448);
  }
  if (*(_QWORD *)(a2 + 1288))
  {
    v1449 = operator new();
    v1450 = sub_21B750234(v1449, *(_QWORD *)(a2 + 1288));
    v1451 = *(_QWORD *)(a1 + 1288);
    *(_QWORD *)(a1 + 1288) = v1450;
    if (v1451)
      (*(void (**)(uint64_t))(*(_QWORD *)v1451 + 8))(v1451);
  }
  if (*(_QWORD *)(a2 + 2640))
  {
    v1452 = operator new();
    v1453 = sub_21B8542FC(v1452, *(_QWORD *)(a2 + 2640));
    v1454 = *(_QWORD *)(a1 + 2640);
    *(_QWORD *)(a1 + 2640) = v1453;
    if (v1454)
      (*(void (**)(uint64_t))(*(_QWORD *)v1454 + 8))(v1454);
  }
  if (*(_QWORD *)(a2 + 336))
  {
    v1455 = operator new();
    v1456 = sub_21B7AC4D8(v1455, *(_QWORD *)(a2 + 336));
    v1457 = *(_QWORD *)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v1458;
    if (v1457)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v1457 + 8))(v1457, v1456);
  }
  if (*(_QWORD *)(a2 + 1480))
  {
    v1459 = operator new();
    v1460 = sub_21B75BF14(v1459, *(_QWORD *)(a2 + 1480));
    v1461 = *(_QWORD *)(a1 + 1480);
    *(_QWORD *)(a1 + 1480) = v1460;
    if (v1461)
      (*(void (**)(uint64_t))(*(_QWORD *)v1461 + 8))(v1461);
  }
  if (*(_QWORD *)(a2 + 1488))
  {
    v1462 = operator new();
    v1463 = sub_21B75C5D0(v1462, *(_QWORD *)(a2 + 1488));
    v1464 = *(_QWORD *)(a1 + 1488);
    *(_QWORD *)(a1 + 1488) = v1463;
    if (v1464)
      (*(void (**)(uint64_t))(*(_QWORD *)v1464 + 8))(v1464);
  }
  if (*(_QWORD *)(a2 + 1496))
  {
    v1465 = operator new();
    v1466 = sub_21B75D724(v1465, *(_QWORD *)(a2 + 1496));
    v1467 = *(_QWORD *)(a1 + 1496);
    *(_QWORD *)(a1 + 1496) = v1468;
    if (v1467)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v1467 + 8))(v1467, v1466);
  }
  if (*(_QWORD *)(a2 + 2824))
  {
    v1469 = operator new();
    v1470 = sub_21B7FF60C(v1469, *(_QWORD *)(a2 + 2824));
    v1471 = *(_QWORD *)(a1 + 2824);
    *(_QWORD *)(a1 + 2824) = v1470;
    if (v1471)
      (*(void (**)(uint64_t))(*(_QWORD *)v1471 + 8))(v1471);
  }
  if (*(_QWORD *)(a2 + 2832))
  {
    v1472 = operator new();
    v1473 = sub_21B800450(v1472, *(_QWORD *)(a2 + 2832));
    v1474 = *(_QWORD *)(a1 + 2832);
    *(_QWORD *)(a1 + 2832) = v1473;
    if (v1474)
      (*(void (**)(uint64_t))(*(_QWORD *)v1474 + 8))(v1474);
  }
  if (*(_QWORD *)(a2 + 2944))
  {
    v1475 = operator new();
    v1476 = sub_21B7FE524(v1475, *(_QWORD *)(a2 + 2944));
    v1477 = *(_QWORD *)(a1 + 2944);
    *(_QWORD *)(a1 + 2944) = v1476;
    if (v1477)
      (*(void (**)(uint64_t))(*(_QWORD *)v1477 + 8))(v1477);
  }
  if (*(_QWORD *)(a2 + 2952))
  {
    v1478 = operator new();
    v1479 = sub_21B7FE878(v1478, *(_QWORD *)(a2 + 2952));
    v1480 = *(_QWORD *)(a1 + 2952);
    *(_QWORD *)(a1 + 2952) = v1479;
    if (v1480)
      (*(void (**)(uint64_t))(*(_QWORD *)v1480 + 8))(v1480);
  }
  if (*(_QWORD *)(a2 + 1432))
  {
    v1481 = (_QWORD *)operator new();
    v1482 = sub_21B75AB7C(v1481, *(_QWORD *)(a2 + 1432));
    v1483 = *(_QWORD *)(a1 + 1432);
    *(_QWORD *)(a1 + 1432) = v1482;
    if (v1483)
      (*(void (**)(uint64_t))(*(_QWORD *)v1483 + 8))(v1483);
  }
  return a1;
}

uint64_t sub_21B7EFFA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "aPSleep");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "aPWake");
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "accel");
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "accel800");
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "accelBatch");
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "accelGesture");
  v11 = *(_QWORD *)(a1 + 56);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "accelGps");
  v12 = *(_QWORD *)(a1 + 64);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, this, "accelOscarEmu");
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "accelTNBFrame");
  v14 = *(_QWORD *)(a1 + 80);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "accelerometerPace");
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, this, "accessoryAccel");
  v16 = *(_QWORD *)(a1 + 96);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, this, "accessoryAccelConfig");
  v17 = *(_QWORD *)(a1 + 104);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "accessoryActivityAsleepConfidenceEpoch");
  v18 = *(_QWORD *)(a1 + 112);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, this, "accessoryActivityStateUpdate");
  v19 = *(_QWORD *)(a1 + 120);
  if (v19)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v19 + 32))(v19, this, "accessoryConfig");
  v20 = *(_QWORD *)(a1 + 128);
  if (v20)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, this, "accessoryDeviceMotion");
  v21 = *(_QWORD *)(a1 + 136);
  if (v21)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v21 + 32))(v21, this, "accessoryDeviceMotionConfig");
  v22 = *(_QWORD *)(a1 + 144);
  if (v22)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v22 + 32))(v22, this, "accessoryGyro");
  v23 = *(_QWORD *)(a1 + 152);
  if (v23)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v23 + 32))(v23, this, "accessoryGyroCachedBias");
  v24 = *(_QWORD *)(a1 + 160);
  if (v24)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v24 + 32))(v24, this, "accessoryGyroConfig");
  v25 = *(_QWORD *)(a1 + 168);
  if (v25)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v25 + 32))(v25, this, "accessoryGyroGYTT");
  v26 = *(_QWORD *)(a1 + 176);
  if (v26)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v26 + 32))(v26, this, "accessoryHeartRate");
  v27 = *(_QWORD *)(a1 + 184);
  if (v27)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v27 + 32))(v27, this, "accessoryInEarStatus");
  v28 = *(_QWORD *)(a1 + 192);
  if (v28)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v28 + 32))(v28, this, "accessoryMagnetometer");
  v29 = *(_QWORD *)(a1 + 200);
  if (v29)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v29 + 32))(v29, this, "accessoryMagnetometerConfig");
  v30 = *(_QWORD *)(a1 + 208);
  if (v30)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v30 + 32))(v30, this, "accessoryPPG");
  v31 = *(_QWORD *)(a1 + 216);
  if (v31)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v31 + 32))(v31, this, "accessoryProx");
  v32 = *(_QWORD *)(a1 + 224);
  if (v32)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v32 + 32))(v32, this, "accessoryProxSensorDrop");
  v33 = *(_QWORD *)(a1 + 232);
  if (v33)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v33 + 32))(v33, this, "accessoryProxTempComp");
  v34 = *(_QWORD *)(a1 + 240);
  if (v34)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v34 + 32))(v34, this, "accessoryProximityConfig");
  v35 = *(_QWORD *)(a1 + 248);
  if (v35)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v35 + 32))(v35, this, "accessorySleepStateConfidenceEpoch");
  v36 = *(_QWORD *)(a1 + 256);
  if (v36)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v36 + 32))(v36, this, "accessorySleepStateUpdate");
  v37 = *(_QWORD *)(a1 + 264);
  if (v37)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v37 + 32))(v37, this, "accessoryStepDetectorDebug");
  v38 = *(_QWORD *)(a1 + 272);
  if (v38)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v38 + 32))(v38, this, "accessoryWake");
  v39 = *(_QWORD *)(a1 + 280);
  if (v39)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v39 + 32))(v39, this, "accessoryWakeDebug");
  v40 = *(_QWORD *)(a1 + 288);
  if (v40)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v40 + 32))(v40, this, "airpodEvent");
  v41 = *(_QWORD *)(a1 + 296);
  if (v41)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v41 + 32))(v41, this, "alsData");
  v42 = *(_QWORD *)(a1 + 304);
  if (v42)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v42 + 32))(v42, this, "alsPhone");
  v43 = *(_QWORD *)(a1 + 312);
  if (v43)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v43 + 32))(v43, this, "altimeter");
  v44 = *(_QWORD *)(a1 + 320);
  if (v44)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v44 + 32))(v44, this, "altimeterKF");
  v45 = *(_QWORD *)(a1 + 328);
  if (v45)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v45 + 32))(v45, this, "anchorCorrection");
  v46 = *(_QWORD *)(a1 + 336);
  if (v46)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v46 + 32))(v46, this, "anchorMotionCorrespondence");
  v47 = *(_QWORD *)(a1 + 344);
  if (v47)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v47 + 32))(v47, this, "appleCV3DSLAMState");
  v48 = *(_QWORD *)(a1 + 352);
  if (v48)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v48 + 32))(v48, this, "arSessionState");
  v49 = *(_QWORD *)(a1 + 360);
  if (v49)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v49 + 32))(v49, this, "arkitWorldPose");
  v50 = *(_QWORD *)(a1 + 368);
  if (v50)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v50 + 32))(v50, this, "audioAccessoryDeviceMotion");
  v51 = *(_QWORD *)(a1 + 376);
  if (v51)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v51 + 32))(v51, this, "auxiliaryDeviceMotion");
  v52 = *(_QWORD *)(a1 + 384);
  if (v52)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v52 + 32))(v52, this, "averagedALSData");
  v53 = *(_QWORD *)(a1 + 392);
  if (v53)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v53 + 32))(v53, this, "bTConnection");
  v54 = *(_QWORD *)(a1 + 400);
  if (v54)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v54 + 32))(v54, this, "backlightState");
  v55 = *(_QWORD *)(a1 + 408);
  if (v55)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v55 + 32))(v55, this, "basebandCompassCoex");
  v56 = *(_QWORD *)(a1 + 416);
  if (v56)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v56 + 32))(v56, this, "basebandCompassCoexConstraints");
  v57 = *(_QWORD *)(a1 + 424);
  if (v57)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v57 + 32))(v57, this, "basebandSpeed");
  v58 = *(_QWORD *)(a1 + 432);
  if (v58)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v58 + 32))(v58, this, "baselineResetCheck");
  v59 = *(_QWORD *)(a1 + 440);
  if (v59)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v59 + 32))(v59, this, "batchedLocationFromOdometer");
  v60 = *(_QWORD *)(a1 + 448);
  if (v60)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v60 + 32))(v60, this, "batterySaverModeStatus");
  v61 = *(_QWORD *)(a1 + 456);
  if (v61)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v61 + 32))(v61, this, "batteryStatus");
  v62 = *(_QWORD *)(a1 + 464);
  if (v62)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v62 + 32))(v62, this, "bioMotionAnchorPose");
  v63 = *(_QWORD *)(a1 + 472);
  if (v63)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v63 + 32))(v63, this, "bioMotionClassification");
  v64 = *(_QWORD *)(a1 + 480);
  if (v64)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v64 + 32))(v64, this, "bioMotionLinkLengthFitParameters");
  v65 = *(_QWORD *)(a1 + 488);
  if (v65)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v65 + 32))(v65, this, "bioMotionOnlineLinkLengthUpdate");
  v66 = *(_QWORD *)(a1 + 496);
  if (v66)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v66 + 32))(v66, this, "bioMotionPose");
  v67 = *(_QWORD *)(a1 + 504);
  if (v67)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v67 + 32))(v67, this, "bioMotionPredictedPose");
  v68 = *(_QWORD *)(a1 + 512);
  if (v68)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v68 + 32))(v68, this, "bioMotionPropagatedAnchor");
  v69 = *(_QWORD *)(a1 + 520);
  if (v69)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v69 + 32))(v69, this, "bleedToZeroCorrection");
  v70 = *(_QWORD *)(a1 + 528);
  if (v70)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v70 + 32))(v70, this, "bodyMetrics");
  v71 = *(_QWORD *)(a1 + 536);
  if (v71)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v71 + 32))(v71, this, "braveHeartAccel");
  v72 = *(_QWORD *)(a1 + 544);
  if (v72)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v72 + 32))(v72, this, "braveHeartDeviceMotion");
  v73 = *(_QWORD *)(a1 + 552);
  if (v73)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v73 + 32))(v73, this, "braveHeartNatalieData");
  v74 = *(_QWORD *)(a1 + 560);
  if (v74)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v74 + 32))(v74, this, "braveHeartVO2MaxInput");
  v75 = *(_QWORD *)(a1 + 568);
  if (v75)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v75 + 32))(v75, this, "braveHeartWorkoutEvent");
  v76 = *(_QWORD *)(a1 + 576);
  if (v76)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v76 + 32))(v76, this, "bumpToWakeState");
  v77 = *(_QWORD *)(a1 + 584);
  if (v77)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v77 + 32))(v77, this, "cV3DPredictedPose");
  v78 = *(_QWORD *)(a1 + 592);
  if (v78)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v78 + 32))(v78, this, "calorimetryMETsConsumed");
  v79 = *(_QWORD *)(a1 + 600);
  if (v79)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v79 + 32))(v79, this, "calorimetryPauseEvent");
  v80 = *(_QWORD *)(a1 + 608);
  if (v80)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v80 + 32))(v80, this, "catherineHealthKitData");
  if ((*(_BYTE *)(a1 + 3616) & 1) != 0)
    PB::TextFormatter::format(this, "cftime", *(double *)(a1 + 616));
  v81 = *(_QWORD *)(a1 + 624);
  if (v81)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v81 + 32))(v81, this, "clefCalibration");
  v82 = *(_QWORD *)(a1 + 632);
  if (v82)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v82 + 32))(v82, this, "coarseElevationChange");
  v83 = *(_QWORD *)(a1 + 640);
  if (v83)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v83 + 32))(v83, this, "compass");
  v84 = *(_QWORD *)(a1 + 648);
  if (v84)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v84 + 32))(v84, this, "compassAlignment");
  v85 = *(_QWORD *)(a1 + 656);
  if (v85)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v85 + 32))(v85, this, "compassCalibration");
  v86 = *(_QWORD *)(a1 + 664);
  if (v86)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v86 + 32))(v86, this, "compassCalibrationAttempt");
  v87 = *(_QWORD *)(a1 + 672);
  if (v87)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v87 + 32))(v87, this, "compassConstraints");
  v88 = *(_QWORD *)(a1 + 680);
  if (v88)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v88 + 32))(v88, this, "compassCorrection");
  v89 = *(_QWORD *)(a1 + 688);
  if (v89)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v89 + 32))(v89, this, "complexHandMotion");
  v90 = *(_QWORD *)(a1 + 696);
  if (v90)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v90 + 32))(v90, this, "constrainedIntegratorModelPredictedPose");
  v91 = *(_QWORD *)(a1 + 704);
  if (v91)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v91 + 32))(v91, this, "constrainedIntegratorPose");
  v92 = *(_QWORD *)(a1 + 712);
  if (v92)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v92 + 32))(v92, this, "coprocessorReplyGaitMetrics");
  v93 = *(_QWORD *)(a1 + 720);
  if (v93)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v93 + 32))(v93, this, "courseConstraints");
  v94 = *(_QWORD *)(a1 + 728);
  if (v94)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v94 + 32))(v94, this, "courseCorrection");
  v95 = *(_QWORD *)(a1 + 736);
  if (v95)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v95 + 32))(v95, this, "cvWatchCalories");
  v96 = *(_QWORD *)(a1 + 744);
  if (v96)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v96 + 32))(v96, this, "deviceMotion");
  v97 = *(_QWORD *)(a1 + 752);
  if (v97)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v97 + 32))(v97, this, "deviceMotionAlwaysOn");
  v98 = *(_QWORD *)(a1 + 760);
  if (v98)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v98 + 32))(v98, this, "deviceMotionCovariance");
  v99 = *(_QWORD *)(a1 + 768);
  if (v99)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v99 + 32))(v99, this, "directionOfTravelMetrics");
  v100 = *(_QWORD *)(a1 + 776);
  if (v100)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v100 + 32))(v100, this, "displacingState");
  v101 = *(_QWORD *)(a1 + 784);
  if (v101)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v101 + 32))(v101, this, "displayStatus");
  v102 = *(_QWORD *)(a1 + 792);
  if (v102)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v102 + 32))(v102, this, "dopplerDebugRecord");
  v103 = *(_QWORD *)(a1 + 800);
  if (v103)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v103 + 32))(v103, this, "dopplerProximityEvent");
  v104 = *(_QWORD *)(a1 + 808);
  if (v104)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v104 + 32))(v104, this, "dopplerRawDataInput");
  v105 = *(_QWORD *)(a1 + 816);
  if (v105)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v105 + 32))(v105, this, "dopplerSample");
  v106 = *(_QWORD *)(a1 + 824);
  if (v106)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v106 + 32))(v106, this, "dotEstimatorHandSwing");
  v107 = *(_QWORD *)(a1 + 832);
  if (v107)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v107 + 32))(v107, this, "dotEstimatorWithTNB");
  v108 = *(_QWORD *)(a1 + 840);
  if (v108)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v108 + 32))(v108, this, "doubleTap");
  v109 = *(_QWORD *)(a1 + 848);
  if (v109)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v109 + 32))(v109, this, "elevationChange");
  v110 = *(_QWORD *)(a1 + 856);
  if (v110)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v110 + 32))(v110, this, "elevationGradeEstimator");
  v111 = *(_QWORD *)(a1 + 864);
  if (v111)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v111 + 32))(v111, this, "elevationThreshold");
  v112 = *(_QWORD *)(a1 + 872);
  if (v112)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v112 + 32))(v112, this, "emergencyState");
  v113 = *(_QWORD *)(a1 + 880);
  if (v113)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v113 + 32))(v113, this, "enhancedDeviceMotion");
  v114 = *(_QWORD *)(a1 + 888);
  if (v114)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v114 + 32))(v114, this, "faceBlendShapeCoefficientsSample");
  v115 = *(_QWORD *)(a1 + 896);
  if (v115)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v115 + 32))(v115, this, "faceCovered");
  v116 = *(_QWORD *)(a1 + 904);
  if (v116)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v116 + 32))(v116, this, "faceDownDetection");
  v117 = *(_QWORD *)(a1 + 912);
  if (v117)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v117 + 32))(v117, this, "facePose");
  v118 = *(_QWORD *)(a1 + 920);
  if (v118)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v118 + 32))(v118, this, "facePoseSynchronized");
  v119 = *(_QWORD *)(a1 + 928);
  if (v119)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v119 + 32))(v119, this, "fallDetectionActivityClassifierReplay");
  v120 = *(_QWORD *)(a1 + 936);
  if (v120)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v120 + 32))(v120, this, "fallDetectionDetector");
  v121 = *(_QWORD *)(a1 + 944);
  if (v121)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v121 + 32))(v121, this, "fallDetectionGyroControllerReplay");
  v122 = *(_QWORD *)(a1 + 952);
  if (v122)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v122 + 32))(v122, this, "fallDetectionReferee");
  v123 = *(_QWORD *)(a1 + 960);
  if (v123)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v123 + 32))(v123, this, "fallDetectionReplay");
  v124 = *(_QWORD *)(a1 + 968);
  if (v124)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v124 + 32))(v124, this, "fallDetectionStateMachine");
  v125 = *(_QWORD *)(a1 + 976);
  if (v125)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v125 + 32))(v125, this, "fallDetectionWristStateReplay");
  v126 = *(_QWORD *)(a1 + 984);
  if (v126)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v126 + 32))(v126, this, "fallDistanceReplay");
  v127 = *(_QWORD *)(a1 + 992);
  if (v127)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v127 + 32))(v127, this, "fallFalsePositiveSuppressionFeatures");
  v128 = *(_QWORD *)(a1 + 1000);
  if (v128)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v128 + 32))(v128, this, "fallSnippet");
  v129 = *(_QWORD *)(a1 + 1008);
  if (v129)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v129 + 32))(v129, this, "fallStats");
  v130 = *(_QWORD *)(a1 + 1016);
  if (v130)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v130 + 32))(v130, this, "firstStepFeatures");
  v131 = *(_QWORD *)(a1 + 1024);
  if (v131)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v131 + 32))(v131, this, "fitnessMachineData");
  v132 = *(_QWORD *)(a1 + 1032);
  if (v132)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v132 + 32))(v132, this, "fitnessMachineSample");
  v133 = *(_QWORD *)(a1 + 1040);
  if (v133)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v133 + 32))(v133, this, "focusModes");
  v134 = *(_QWORD *)(a1 + 1048);
  if (v134)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v134 + 32))(v134, this, "frequencyResponse");
  v135 = *(_QWORD *)(a1 + 1056);
  if (v135)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v135 + 32))(v135, this, "fusedBioMotionClassification");
  v136 = *(_QWORD *)(a1 + 1064);
  if (v136)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v136 + 32))(v136, this, "gaitCycleSegment");
  v137 = *(_QWORD *)(a1 + 1072);
  if (v137)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v137 + 32))(v137, this, "gaitCycleSegmentationState");
  v138 = *(_QWORD *)(a1 + 1080);
  if (v138)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v138 + 32))(v138, this, "gaitEventsHKResult");
  v139 = *(_QWORD *)(a1 + 1088);
  if (v139)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v139 + 32))(v139, this, "gaitEventsModelOutput");
  v140 = *(_QWORD *)(a1 + 1096);
  if (v140)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v140 + 32))(v140, this, "gaitEventsStrideAggregation");
  v141 = *(_QWORD *)(a1 + 1104);
  if (v141)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v141 + 32))(v141, this, "geomagneticData");
  v142 = *(_QWORD *)(a1 + 1112);
  if (v142)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v142 + 32))(v142, this, "gnssAvailabilityPredictorData");
  v143 = *(_QWORD *)(a1 + 1120);
  if (v143)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v143 + 32))(v143, this, "gnssLeechLocationData");
  v144 = *(_QWORD *)(a1 + 1128);
  if (v144)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v144 + 32))(v144, this, "gravityConstraints");
  v145 = *(_QWORD *)(a1 + 1136);
  if (v145)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v145 + 32))(v145, this, "gravityCorrection");
  v146 = *(_QWORD *)(a1 + 1144);
  if (v146)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v146 + 32))(v146, this, "gyro");
  v147 = *(_QWORD *)(a1 + 1152);
  if (v147)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v147 + 32))(v147, this, "gyroBiasAndVariance");
  v148 = *(_QWORD *)(a1 + 1160);
  if (v148)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v148 + 32))(v148, this, "gyroBiasConstraints");
  v149 = *(_QWORD *)(a1 + 1168);
  if (v149)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v149 + 32))(v149, this, "gyroBiasCorrection");
  v150 = *(_QWORD *)(a1 + 1176);
  if (v150)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v150 + 32))(v150, this, "gyroBiasEstimateError");
  v151 = *(_QWORD *)(a1 + 1184);
  if (v151)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v151 + 32))(v151, this, "gyroBiasFit");
  v152 = *(_QWORD *)(a1 + 1192);
  if (v152)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v152 + 32))(v152, this, "gyroCalibrationDataFactory");
  v153 = *(_QWORD *)(a1 + 1200);
  if (v153)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v153 + 32))(v153, this, "gyroCalibrationDataNonlinearNonFactory");
  v154 = *(_QWORD *)(a1 + 1208);
  if (v154)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v154 + 32))(v154, this, "gyroCalibrationSample");
  v155 = *(_QWORD *)(a1 + 1216);
  if (v155)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v155 + 32))(v155, this, "gyroCalibrationSampleNonlinear");
  v156 = *(_QWORD *)(a1 + 1224);
  if (v156)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v156 + 32))(v156, this, "gyroCompass");
  v157 = *(_QWORD *)(a1 + 1232);
  if (v157)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v157 + 32))(v157, this, "gyroDt");
  v158 = *(_QWORD *)(a1 + 1240);
  if (v158)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v158 + 32))(v158, this, "gyroFactoryCalibrationData");
  v159 = *(_QWORD *)(a1 + 1248);
  if (v159)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v159 + 32))(v159, this, "gyroGps");
  v160 = *(_QWORD *)(a1 + 1256);
  if (v160)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v160 + 32))(v160, this, "gyroOscarEmu");
  v161 = *(_QWORD *)(a1 + 1264);
  if (v161)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v161 + 32))(v161, this, "gyroTemperature");
  v162 = *(_QWORD *)(a1 + 1272);
  if (v162)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v162 + 32))(v162, this, "hapticModuleState");
  v163 = *(_QWORD *)(a1 + 1280);
  if (v163)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v163 + 32))(v163, this, "harmonicMetrics");
  v164 = *(_QWORD *)(a1 + 1288);
  if (v164)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v164 + 32))(v164, this, "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  v165 = *(_QWORD *)(a1 + 1296);
  if (v165)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v165 + 32))(v165, this, "headToHeadsetTransformationEstimate");
  v166 = *(_QWORD *)(a1 + 1304);
  if (v166)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v166 + 32))(v166, this, "headTrackingBehaviorUpdate");
  v167 = *(_QWORD *)(a1 + 1312);
  if (v167)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v167 + 32))(v167, this, "headTrackingClientModeUpdate");
  v168 = *(_QWORD *)(a1 + 1320);
  if (v168)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v168 + 32))(v168, this, "heartRateReference");
  v169 = *(_QWORD *)(a1 + 1328);
  if (v169)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v169 + 32))(v169, this, "hgAccel");
  v170 = *(_QWORD *)(a1 + 1336);
  if (v170)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v170 + 32))(v170, this, "hidShower");
  v171 = *(_QWORD *)(a1 + 1344);
  if (v171)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v171 + 32))(v171, this, "inEarAdditionalState");
  v172 = *(_QWORD *)(a1 + 1352);
  if (v172)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v172 + 32))(v172, this, "inEarBaseline");
  v173 = *(_QWORD *)(a1 + 1360);
  if (v173)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v173 + 32))(v173, this, "inEarBaselining");
  v174 = *(_QWORD *)(a1 + 1368);
  if (v174)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v174 + 32))(v174, this, "inEarConstraints");
  v175 = *(_QWORD *)(a1 + 1376);
  if (v175)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v175 + 32))(v175, this, "inEarOpenLid");
  v176 = *(_QWORD *)(a1 + 1384);
  if (v176)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v176 + 32))(v176, this, "inEarOptical");
  v177 = *(_QWORD *)(a1 + 1392);
  if (v177)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v177 + 32))(v177, this, "inEarSession");
  v178 = *(_QWORD *)(a1 + 1400);
  if (v178)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v178 + 32))(v178, this, "inEarTransition");
  v179 = *(_QWORD *)(a1 + 1408);
  if (v179)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v179 + 32))(v179, this, "inEarTransitionEntry");
  v180 = *(_QWORD *)(a1 + 1416);
  if (v180)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v180 + 32))(v180, this, "inertialOdometry");
  v181 = *(_QWORD *)(a1 + 1424);
  if (v181)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v181 + 32))(v181, this, "initialHistoricalMeanSeaLevelPressure");
  v182 = *(_QWORD *)(a1 + 1432);
  if (v182)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v182 + 32))(v182, this, "interpolatedAccessoryAccel");
  v183 = *(_QWORD *)(a1 + 1440);
  if (v183)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v183 + 32))(v183, this, "intersiloNSCodingData");
  v184 = *(_QWORD *)(a1 + 1448);
  if (v184)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v184 + 32))(v184, this, "ispPacket");
  v185 = *(_QWORD *)(a1 + 1456);
  if (v185)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v185 + 32))(v185, this, "jitterBufferLevel");
  v186 = *(_QWORD *)(a1 + 1464);
  if (v186)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v186 + 32))(v186, this, "jointLinkModelPose");
  v187 = *(_QWORD *)(a1 + 1472);
  if (v187)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v187 + 32))(v187, this, "jointLinkModelPredictedPose");
  v188 = *(_QWORD *)(a1 + 1480);
  if (v188)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v188 + 32))(v188, this, "kData1");
  v189 = *(_QWORD *)(a1 + 1488);
  if (v189)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v189 + 32))(v189, this, "kData2");
  v190 = *(_QWORD *)(a1 + 1496);
  if (v190)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v190 + 32))(v190, this, "kData3");
  v191 = *(_QWORD *)(a1 + 1504);
  if (v191)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v191 + 32))(v191, this, "kappaActivityPhone");
  v192 = *(_QWORD *)(a1 + 1512);
  if (v192)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v192 + 32))(v192, this, "kappaActivityWatch");
  v193 = *(_QWORD *)(a1 + 1520);
  if (v193)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v193 + 32))(v193, this, "kappaAirbagResult");
  v194 = *(_QWORD *)(a1 + 1528);
  if (v194)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v194 + 32))(v194, this, "kappaAudioResult");
  v195 = *(_QWORD *)(a1 + 1536);
  if (v195)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v195 + 32))(v195, this, "kappaBaroResult");
  v196 = *(_QWORD *)(a1 + 1544);
  if (v196)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v196 + 32))(v196, this, "kappaCrashResult");
  v197 = *(_QWORD *)(a1 + 1552);
  if (v197)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v197 + 32))(v197, this, "kappaDirectionOfTravel");
  v198 = *(_QWORD *)(a1 + 1560);
  if (v198)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v198 + 32))(v198, this, "kappaGpsResult");
  v199 = *(_QWORD *)(a1 + 1568);
  if (v199)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v199 + 32))(v199, this, "kappaGravityAutocorrelationResult");
  v200 = *(_QWORD *)(a1 + 1576);
  if (v200)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v200 + 32))(v200, this, "kappaHighSpeedCrashResult");
  v201 = *(_QWORD *)(a1 + 1584);
  if (v201)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v201 + 32))(v201, this, "kappaLackOfMotionResult");
  v202 = *(_QWORD *)(a1 + 1592);
  if (v202)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v202 + 32))(v202, this, "kappaLocalAudioResult");
  v203 = *(_QWORD *)(a1 + 1600);
  if (v203)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v203 + 32))(v203, this, "kappaMildImpactResult");
  v204 = *(_QWORD *)(a1 + 1608);
  if (v204)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v204 + 32))(v204, this, "kappaPeakDetectorMapMagTimestamps");
  v205 = *(_QWORD *)(a1 + 1616);
  if (v205)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v205 + 32))(v205, this, "kappaPeakDetectorMapResult");
  v206 = *(_QWORD *)(a1 + 1624);
  if (v206)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v206 + 32))(v206, this, "kappaPulseDeltaV");
  v207 = *(_QWORD *)(a1 + 1632);
  if (v207)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v207 + 32))(v207, this, "kappaPulseInertialAccel");
  v208 = *(_QWORD *)(a1 + 1640);
  if (v208)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v208 + 32))(v208, this, "kappaPulseInertialHgAccel");
  v209 = *(_QWORD *)(a1 + 1648);
  if (v209)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v209 + 32))(v209, this, "kappaPulseResult");
  v210 = *(_QWORD *)(a1 + 1656);
  if (v210)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v210 + 32))(v210, this, "kappaQuiescenceResult");
  v211 = *(_QWORD *)(a1 + 1664);
  if (v211)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v211 + 32))(v211, this, "kappaRecoveryResult");
  v212 = *(_QWORD *)(a1 + 1672);
  if (v212)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v212 + 32))(v212, this, "kappaRemoteAudioResult");
  v213 = *(_QWORD *)(a1 + 1680);
  if (v213)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v213 + 32))(v213, this, "kappaRoads");
  v214 = *(_QWORD *)(a1 + 1688);
  if (v214)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v214 + 32))(v214, this, "kappaRoadsResult");
  v215 = *(_QWORD *)(a1 + 1696);
  if (v215)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v215 + 32))(v215, this, "kappaRolloverCrashResult");
  v216 = *(_QWORD *)(a1 + 1704);
  if (v216)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v216 + 32))(v216, this, "kappaSevereCrashResult");
  v217 = *(_QWORD *)(a1 + 1712);
  if (v217)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v217 + 32))(v217, this, "kappaSpinResult");
  v218 = *(_QWORD *)(a1 + 1720);
  if (v218)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v218 + 32))(v218, this, "kappaSteps");
  v219 = *(_QWORD *)(a1 + 1728);
  if (v219)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v219 + 32))(v219, this, "kappaStepsResult");
  v220 = *(_QWORD *)(a1 + 1736);
  if (v220)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v220 + 32))(v220, this, "kappaTrigger");
  v221 = *(_QWORD *)(a1 + 1744);
  if (v221)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v221 + 32))(v221, this, "kappaTriggerClustersResult");
  v222 = *(_QWORD *)(a1 + 1752);
  if (v222)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v222 + 32))(v222, this, "kappaTriggerDebug");
  v223 = *(_QWORD *)(a1 + 1760);
  if (v223)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v223 + 32))(v223, this, "kappaZgDetected");
  v224 = *(_QWORD *)(a1 + 1768);
  if (v224)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v224 + 32))(v224, this, "kappaZgResult");
  v225 = *(_QWORD *)(a1 + 1776);
  if (v225)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v225 + 32))(v225, this, "keyboardAttached");
  v226 = *(_QWORD *)(a1 + 1784);
  if (v226)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v226 + 32))(v226, this, "keyboardKeyPress");
  v227 = *(_QWORD *)(a1 + 1792);
  if (v227)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v227 + 32))(v227, this, "keyboardMotionFeatures");
  v228 = *(_QWORD *)(a1 + 1800);
  if (v228)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v228 + 32))(v228, this, "keyboardMotionState");
  v229 = *(_QWORD *)(a1 + 1808);
  if (v229)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v229 + 32))(v229, this, "keyboardMotionTrackpad");
  v230 = *(_QWORD *)(a1 + 1816);
  if (v230)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v230 + 32))(v230, this, "kmVelocityEstimatorState");
  v231 = *(_QWORD *)(a1 + 1824);
  if (v231)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v231 + 32))(v231, this, "legacyALS5CHInput");
  v232 = *(_QWORD *)(a1 + 1832);
  if (v232)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v232 + 32))(v232, this, "liftToWakeFeaturesNeo");
  v233 = *(_QWORD *)(a1 + 1840);
  if (v233)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v233 + 32))(v233, this, "liftToWakeOnHeadStatus");
  v234 = *(_QWORD *)(a1 + 1848);
  if (v234)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v234 + 32))(v234, this, "liftToWakeState");
  v235 = *(_QWORD *)(a1 + 1856);
  if (v235)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v235 + 32))(v235, this, "liftToWakeStatusNeo");
  v236 = *(_QWORD *)(a1 + 1864);
  if (v236)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v236 + 32))(v236, this, "locationOscarEmu");
  v237 = *(_QWORD *)(a1 + 1872);
  if (v237)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v237 + 32))(v237, this, "lockScreenStatus");
  v238 = *(_QWORD *)(a1 + 1880);
  if (v238)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v238 + 32))(v238, this, "lslHeadingEstimation");
  v239 = *(_QWORD *)(a1 + 1888);
  if (v239)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v239 + 32))(v239, this, "mLBasedBioMotionClassification");
  v240 = *(_QWORD *)(a1 + 1896);
  if (v240)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v240 + 32))(v240, this, "magicMountState");
  v241 = *(_QWORD *)(a1 + 1904);
  if (v241)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v241 + 32))(v241, this, "magneticAccessoryType1");
  v242 = *(_QWORD *)(a1 + 1912);
  if (v242)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v242 + 32))(v242, this, "magneticAccessoryType2");
  v243 = *(_QWORD *)(a1 + 1920);
  if (v243)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v243 + 32))(v243, this, "magnetometer");
  v244 = *(_QWORD *)(a1 + 1928);
  if (v244)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v244 + 32))(v244, this, "magnetometerCalibratorFilterParameters");
  v245 = *(_QWORD *)(a1 + 1936);
  if (v245)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v245 + 32))(v245, this, "magnetometerReset");
  v246 = *(_QWORD *)(a1 + 1944);
  if (v246)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v246 + 32))(v246, this, "mapsRouteHintData");
  v247 = *(_QWORD *)(a1 + 1952);
  if (v247)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v247 + 32))(v247, this, "metsInfo");
  v248 = *(_QWORD *)(a1 + 1960);
  if (v248)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v248 + 32))(v248, this, "mobilityBoutMetrics");
  v249 = *(_QWORD *)(a1 + 1968);
  if (v249)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v249 + 32))(v249, this, "mobilitySmoothedGaitMetrics");
  v250 = *(_QWORD *)(a1 + 1976);
  if (v250)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v250 + 32))(v250, this, "modelBasedBioMotionClassification");
  v251 = *(_QWORD *)(a1 + 1984);
  if (v251)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v251 + 32))(v251, this, "motionActivity");
  v252 = *(_QWORD *)(a1 + 1992);
  if (v252)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v252 + 32))(v252, this, "motionActivityReplay");
  v253 = *(_QWORD *)(a1 + 2000);
  if (v253)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v253 + 32))(v253, this, "motionContextActivity");
  v254 = *(_QWORD *)(a1 + 2008);
  if (v254)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v254 + 32))(v254, this, "motionGPSLocation");
  v255 = *(_QWORD *)(a1 + 2016);
  if (v255)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v255 + 32))(v255, this, "motionHint");
  v256 = *(_QWORD *)(a1 + 2024);
  if (v256)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v256 + 32))(v256, this, "motionLocation");
  v257 = *(_QWORD *)(a1 + 2032);
  if (v257)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v257 + 32))(v257, this, "motionLoiAltitudeData");
  v258 = *(_QWORD *)(a1 + 2040);
  if (v258)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v258 + 32))(v258, this, "motionLoiData");
  v259 = *(_QWORD *)(a1 + 2048);
  if (v259)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v259 + 32))(v259, this, "motionStateUpdate");
  v260 = *(_QWORD *)(a1 + 2056);
  if (v260)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v260 + 32))(v260, this, "motionWifiAssociation");
  v261 = *(_QWORD *)(a1 + 2064);
  if (v261)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v261 + 32))(v261, this, "motionWifiLocation");
  v262 = *(_QWORD *)(a1 + 2072);
  if (v262)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v262 + 32))(v262, this, "movementStats");
  v263 = *(_QWORD *)(a1 + 2080);
  if (v263)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v263 + 32))(v263, this, "movementStatsGravityProjection");
  v264 = *(_QWORD *)(a1 + 2088);
  if (v264)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v264 + 32))(v264, this, "movementStatsSignal");
  v265 = *(_QWORD *)(a1 + 2096);
  if (v265)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v265 + 32))(v265, this, "natalieData");
  v266 = *(_QWORD *)(a1 + 2104);
  if (v266)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v266 + 32))(v266, this, "nonlinearBiasFit");
  v267 = *(_QWORD *)(a1 + 2112);
  if (v267)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v267 + 32))(v267, this, "odometer");
  v268 = *(_QWORD *)(a1 + 2120);
  if (v268)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v268 + 32))(v268, this, "odometerWithAltitude");
  v269 = *(_QWORD *)(a1 + 2128);
  if (v269)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v269 + 32))(v269, this, "odtPose");
  v270 = *(_QWORD *)(a1 + 2136);
  if (v270)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v270 + 32))(v270, this, "onsetHeartRateData");
  v271 = *(_QWORD *)(a1 + 2144);
  if (v271)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v271 + 32))(v271, this, "orientation");
  v272 = *(_QWORD *)(a1 + 2152);
  if (v272)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v272 + 32))(v272, this, "pdrAlgType");
  v273 = *(_QWORD *)(a1 + 2160);
  if (v273)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v273 + 32))(v273, this, "pdrDOTEstimatorState");
  v274 = *(_QWORD *)(a1 + 2168);
  if (v274)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v274 + 32))(v274, this, "pdrDOTEstimatorStateArmSwing");
  v275 = *(_QWORD *)(a1 + 2176);
  if (v275)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v275 + 32))(v275, this, "pdrDOTEstimatorStateBody");
  v276 = *(_QWORD *)(a1 + 2184);
  if (v276)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v276 + 32))(v276, this, "pdrDOTEstimatorStateBodyDebug");
  v277 = *(_QWORD *)(a1 + 2192);
  if (v277)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v277 + 32))(v277, this, "pdrDOTEstimatorStateDebug");
  v278 = *(_QWORD *)(a1 + 2200);
  if (v278)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v278 + 32))(v278, this, "pdrDOTEstimatorStateHeading");
  v279 = *(_QWORD *)(a1 + 2208);
  if (v279)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v279 + 32))(v279, this, "pdrDOTEstimatorUncertaintyModelOnBody");
  v280 = *(_QWORD *)(a1 + 2216);
  if (v280)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v280 + 32))(v280, this, "pdrDOTMeasurementSelectorState");
  v281 = *(_QWORD *)(a1 + 2224);
  if (v281)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v281 + 32))(v281, this, "pdrFeatures");
  v282 = *(_QWORD *)(a1 + 2232);
  if (v282)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v282 + 32))(v282, this, "pdrFenceReference");
  v283 = *(_QWORD *)(a1 + 2240);
  if (v283)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v283 + 32))(v283, this, "pdrFenceState");
  v284 = *(_QWORD *)(a1 + 2248);
  if (v284)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v284 + 32))(v284, this, "pdrImpulse");
  v285 = *(_QWORD *)(a1 + 2256);
  if (v285)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v285 + 32))(v285, this, "pdrMLModelOutput");
  v286 = *(_QWORD *)(a1 + 2264);
  if (v286)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v286 + 32))(v286, this, "pdrPedestrianClassifierState");
  v287 = *(_QWORD *)(a1 + 2272);
  if (v287)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v287 + 32))(v287, this, "pdrPlacementClassifierState");
  v288 = *(_QWORD *)(a1 + 2280);
  if (v288)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v288 + 32))(v288, this, "pdrSpeedEstimatorState");
  v289 = *(_QWORD *)(a1 + 2288);
  if (v289)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v289 + 32))(v289, this, "pdrSpeedEstimatorStateDebug");
  v290 = *(_QWORD *)(a1 + 2296);
  if (v290)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v290 + 32))(v290, this, "pdrVelocityEstimatorState");
  v291 = *(_QWORD *)(a1 + 2304);
  if (v291)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v291 + 32))(v291, this, "pearlAttitude");
  v292 = *(_QWORD *)(a1 + 2312);
  if (v292)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v292 + 32))(v292, this, "pedOdomFusionExtendedModeSegment");
  v293 = *(_QWORD *)(a1 + 2320);
  if (v293)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v293 + 32))(v293, this, "pedestrianCalorieModelDebugging");
  v294 = *(_QWORD *)(a1 + 2328);
  if (v294)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v294 + 32))(v294, this, "pedestrianFenceExit");
  v295 = *(_QWORD *)(a1 + 2336);
  if (v295)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v295 + 32))(v295, this, "pedometerPathStraightness");
  v296 = *(_QWORD *)(a1 + 2344);
  if (v296)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v296 + 32))(v296, this, "peerState");
  v297 = *(_QWORD *)(a1 + 2352);
  if (v297)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v297 + 32))(v297, this, "pencilDeviceMotion");
  v298 = *(_QWORD *)(a1 + 2360);
  if (v298)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v298 + 32))(v298, this, "pencilFusionDMYawAlignmentUpdate");
  v299 = *(_QWORD *)(a1 + 2368);
  if (v299)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v299 + 32))(v299, this, "pencilFusionReplayResult");
  v300 = *(_QWORD *)(a1 + 2376);
  if (v300)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v300 + 32))(v300, this, "pencilFusionResult");
  v301 = *(_QWORD *)(a1 + 2384);
  if (v301)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v301 + 32))(v301, this, "pencilFusionRingSensorTrustModelUpdate");
  v302 = *(_QWORD *)(a1 + 2392);
  if (v302)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v302 + 32))(v302, this, "pencilTipForce");
  v303 = *(_QWORD *)(a1 + 2400);
  if (v303)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v303 + 32))(v303, this, "pencilTouch");
  v304 = *(_QWORD *)(a1 + 2408);
  if (v304)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v304 + 32))(v304, this, "physicalEffortInput");
  v305 = *(_QWORD *)(a1 + 2416);
  if (v305)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v305 + 32))(v305, this, "physicalEffortSample");
  v306 = *(_QWORD *)(a1 + 2424);
  if (v306)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v306 + 32))(v306, this, "pocketDetectionPacket");
  v307 = *(_QWORD *)(a1 + 2432);
  if (v307)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v307 + 32))(v307, this, "pose");
  v308 = *(_QWORD *)(a1 + 2440);
  if (v308)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v308 + 32))(v308, this, "poseState");
  v309 = *(_QWORD *)(a1 + 2448);
  if (v309)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v309 + 32))(v309, this, "postureJoint");
  v310 = *(_QWORD *)(a1 + 2456);
  if (v310)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v310 + 32))(v310, this, "postureSkeleton");
  v311 = *(_QWORD *)(a1 + 2464);
  if (v311)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v311 + 32))(v311, this, "powerManagementUserActivity");
  v312 = *(_QWORD *)(a1 + 2472);
  if (v312)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v312 + 32))(v312, this, "precisionFindingDOTEstimate");
  v313 = *(_QWORD *)(a1 + 2480);
  if (v313)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v313 + 32))(v313, this, "precisionFindingRangeFilter");
  v314 = *(_QWORD *)(a1 + 2488);
  if (v314)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v314 + 32))(v314, this, "precisionFindingSessionStartStop");
  v315 = *(_QWORD *)(a1 + 2496);
  if (v315)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v315 + 32))(v315, this, "precisionFindingState");
  v316 = *(_QWORD *)(a1 + 2504);
  if (v316)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v316 + 32))(v316, this, "precisionFindingVelocityEstimate");
  v317 = *(_QWORD *)(a1 + 2512);
  if (v317)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v317 + 32))(v317, this, "precisionFindingVerticalState");
  v318 = *(_QWORD *)(a1 + 2520);
  if (v318)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v318 + 32))(v318, this, "predictedRelativeDeviceMotion");
  v319 = *(_QWORD *)(a1 + 2528);
  if (v319)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v319 + 32))(v319, this, "pressure");
  v320 = *(_QWORD *)(a1 + 2536);
  if (v320)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v320 + 32))(v320, this, "pressureCalibration");
  v321 = *(_QWORD *)(a1 + 2544);
  if (v321)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v321 + 32))(v321, this, "pressureCompensated");
  v322 = *(_QWORD *)(a1 + 2552);
  if (v322)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v322 + 32))(v322, this, "pressureFiltered");
  v323 = *(_QWORD *)(a1 + 2560);
  if (v323)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v323 + 32))(v323, this, "pressureFiltered1HzLowPass");
  v324 = *(_QWORD *)(a1 + 2568);
  if (v324)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v324 + 32))(v324, this, "pressureFilteredNoTemperature");
  v325 = *(_QWORD *)(a1 + 2576);
  if (v325)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v325 + 32))(v325, this, "pressureGps");
  v326 = *(_QWORD *)(a1 + 2584);
  if (v326)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v326 + 32))(v326, this, "pressureOscarEmu");
  v327 = *(_QWORD *)(a1 + 2592);
  if (v327)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v327 + 32))(v327, this, "prox");
  v328 = *(_QWORD *)(a1 + 2600);
  if (v328)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v328 + 32))(v328, this, "proxBaselineEstimatorState");
  v329 = *(_QWORD *)(a1 + 2608);
  if (v329)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v329 + 32))(v329, this, "proxCalibration");
  v330 = *(_QWORD *)(a1 + 2616);
  if (v330)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v330 + 32))(v330, this, "proxPDP");
  v331 = *(_QWORD *)(a1 + 2624);
  if (v331)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v331 + 32))(v331, this, "ptsConsumedGNSS");
  v332 = *(_QWORD *)(a1 + 2632);
  if (v332)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v332 + 32))(v332, this, "ptsForwardPropagation");
  v333 = *(_QWORD *)(a1 + 2640);
  if (v333)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v333 + 32))(v333, this, "ptsMapMatchedRoute");
  v334 = *(_QWORD *)(a1 + 2648);
  if (v334)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v334 + 32))(v334, this, "ptsReconstructedRoute");
  v335 = *(_QWORD *)(a1 + 2656);
  if (v335)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v335 + 32))(v335, this, "rawAudio");
  v336 = *(_QWORD *)(a1 + 2664);
  if (v336)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v336 + 32))(v336, this, "relDMInSystemConfig");
  v337 = *(_QWORD *)(a1 + 2672);
  if (v337)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v337 + 32))(v337, this, "relativeDeviceMotionComplexTransition");
  v338 = *(_QWORD *)(a1 + 2680);
  if (v338)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v338 + 32))(v338, this, "relativeDeviceMotionCorrelatedMotion");
  v339 = *(_QWORD *)(a1 + 2688);
  if (v339)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v339 + 32))(v339, this, "relativeDeviceMotionInternal");
  v340 = *(_QWORD *)(a1 + 2696);
  if (v340)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v340 + 32))(v340, this, "relativeGravityConstraints");
  v341 = *(_QWORD *)(a1 + 2704);
  if (v341)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v341 + 32))(v341, this, "relativeGravityCorrection");
  v342 = *(_QWORD *)(a1 + 2712);
  if (v342)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v342 + 32))(v342, this, "rhythmicGnssOperatorStatus");
  v343 = *(_QWORD *)(a1 + 2720);
  if (v343)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v343 + 32))(v343, this, "rotationRate");
  v344 = *(_QWORD *)(a1 + 2728);
  if (v344)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v344 + 32))(v344, this, "runningArmSwingSignals");
  v345 = *(_QWORD *)(a1 + 2736);
  if (v345)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v345 + 32))(v345, this, "runningCentripetalAccelSignals");
  v346 = *(_QWORD *)(a1 + 2744);
  if (v346)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v346 + 32))(v346, this, "runningFormMetrics");
  v347 = *(_QWORD *)(a1 + 2752);
  if (v347)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v347 + 32))(v347, this, "runningPower");
  v348 = *(_QWORD *)(a1 + 2760);
  if (v348)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v348 + 32))(v348, this, "runningRotationAxis");
  v349 = *(_QWORD *)(a1 + 2768);
  if (v349)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v349 + 32))(v349, this, "runningSpeedKFResult");
  v350 = *(_QWORD *)(a1 + 2776);
  if (v350)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v350 + 32))(v350, this, "runningStrideLength");
  v351 = *(_QWORD *)(a1 + 2784);
  if (v351)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v351 + 32))(v351, this, "runningVerticalOscillation");
  v352 = *(_QWORD *)(a1 + 2792);
  if (v352)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v352 + 32))(v352, this, "runningVerticalOscillationGradientBoostedSignals");
  v353 = *(_QWORD *)(a1 + 2800);
  if (v353)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v353 + 32))(v353, this, "runningVerticalOscillationSignals");
  v354 = *(_QWORD *)(a1 + 2808);
  if (v354)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v354 + 32))(v354, this, "safetyCompanionStatus");
  v355 = *(_QWORD *)(a1 + 2816);
  if (v355)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v355 + 32))(v355, this, "safetyHertzSample");
  v356 = *(_QWORD *)(a1 + 2824);
  if (v356)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v356 + 32))(v356, this, "safetyRemoteSample");
  v357 = *(_QWORD *)(a1 + 2832);
  if (v357)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v357 + 32))(v357, this, "safetyTrustedAudioResult");
  v358 = *(_QWORD *)(a1 + 2840);
  if (v358)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v358 + 32))(v358, this, "sessionOverride");
  v359 = *(_QWORD *)(a1 + 2848);
  if (v359)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v359 + 32))(v359, this, "signalEnvironment");
  v360 = *(_QWORD *)(a1 + 2856);
  if (v360)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v360 + 32))(v360, this, "simActivityEvent");
  v361 = *(_QWORD *)(a1 + 2864);
  if (v361)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v361 + 32))(v361, this, "sitStandDetectorFeatures");
  v362 = *(_QWORD *)(a1 + 2872);
  if (v362)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v362 + 32))(v362, this, "sitStandDetectorPosteriorBufferStatsForSitToStand");
  v363 = *(_QWORD *)(a1 + 2880);
  if (v363)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v363 + 32))(v363, this, "sitStandDetectorPosteriorBufferStatsForStandToSit");
  v364 = *(_QWORD *)(a1 + 2888);
  if (v364)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v364 + 32))(v364, this, "sitStandDetectorTransitions");
  v365 = *(_QWORD *)(a1 + 2896);
  if (v365)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v365 + 32))(v365, this, "skeleton2D");
  v366 = *(_QWORD *)(a1 + 2904);
  if (v366)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v366 + 32))(v366, this, "skeleton3D");
  v367 = *(_QWORD *)(a1 + 2912);
  if (v367)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v367 + 32))(v367, this, "skeleton3DLifted");
  v368 = *(_QWORD *)(a1 + 2920);
  if (v368)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v368 + 32))(v368, this, "skeleton3DRetargeted");
  v369 = *(_QWORD *)(a1 + 2928);
  if (v369)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v369 + 32))(v369, this, "spatialEvent");
  v370 = *(_QWORD *)(a1 + 2936);
  if (v370)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v370 + 32))(v370, this, "spl");
  v371 = *(_QWORD *)(a1 + 2944);
  if (v371)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v371 + 32))(v371, this, "spuPlaybackExampleDeviceMotion");
  v372 = *(_QWORD *)(a1 + 2952);
  if (v372)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v372 + 32))(v372, this, "spuPlaybackExampleMotionStateUpdate");
  v373 = *(_QWORD *)(a1 + 2960);
  if (v373)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v373 + 32))(v373, this, "steadinessEvent");
  v374 = *(_QWORD *)(a1 + 2968);
  if (v374)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v374 + 32))(v374, this, "steadinessModelBalanceFeatures");
  v375 = *(_QWORD *)(a1 + 2976);
  if (v375)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v375 + 32))(v375, this, "steadinessModelContinuousWalkingFeatures");
  v376 = *(_QWORD *)(a1 + 2984);
  if (v376)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v376 + 32))(v376, this, "steadinessModelGaitBaselineFeatures");
  v377 = *(_QWORD *)(a1 + 2992);
  if (v377)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v377 + 32))(v377, this, "steadinessModelHarmonicFeatures");
  v378 = *(_QWORD *)(a1 + 3000);
  if (v378)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v378 + 32))(v378, this, "steadinessModelResult");
  v379 = *(_QWORD *)(a1 + 3008);
  if (v379)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v379 + 32))(v379, this, "steadinessModelTemporalDispersionFeatures");
  v380 = *(_QWORD *)(a1 + 3016);
  if (v380)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v380 + 32))(v380, this, "steadinessModelTemporalEntropyFeatures");
  v381 = *(_QWORD *)(a1 + 3024);
  if (v381)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v381 + 32))(v381, this, "stepCadenceToStrideLengthBin");
  v382 = *(_QWORD *)(a1 + 3032);
  if (v382)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v382 + 32))(v382, this, "stepCountEntry");
  v383 = *(_QWORD *)(a1 + 3040);
  if (v383)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v383 + 32))(v383, this, "stepCountEntryAddition");
  v384 = *(_QWORD *)(a1 + 3048);
  if (v384)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v384 + 32))(v384, this, "stepDistanceFusionResult");
  v385 = *(_QWORD *)(a1 + 3056);
  if (v385)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v385 + 32))(v385, this, "stepLikelihoodFeatures");
  v386 = *(_QWORD *)(a1 + 3064);
  if (v386)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v386 + 32))(v386, this, "streamingHeartRateData");
  v387 = *(_QWORD *)(a1 + 3072);
  if (v387)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v387 + 32))(v387, this, "streamingHighFrequencyHeartRateData");
  v388 = *(_QWORD *)(a1 + 3080);
  if (v388)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v388 + 32))(v388, this, "strideCalBin");
  v389 = *(_QWORD *)(a1 + 3088);
  if (v389)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v389 + 32))(v389, this, "strideCalEntry");
  v390 = *(_QWORD *)(a1 + 3096);
  if (v390)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v390 + 32))(v390, this, "subStats");
  v391 = *(_QWORD *)(a1 + 3104);
  if (v391)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v391 + 32))(v391, this, "swingDoTCandidate");
  v392 = *(_QWORD *)(a1 + 3112);
  if (v392)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v392 + 32))(v392, this, "tapAccept");
  v393 = *(_QWORD *)(a1 + 3120);
  if (v393)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v393 + 32))(v393, this, "tapDetect");
  v394 = *(_QWORD *)(a1 + 3128);
  if (v394)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v394 + 32))(v394, this, "tempestPoCAuxiliaryDeviceMotion");
  v395 = *(_QWORD *)(a1 + 3136);
  if (v395)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v395 + 32))(v395, this, "tempestPoCListenerOrientation");
  v396 = *(_QWORD *)(a1 + 3144);
  if (v396)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v396 + 32))(v396, this, "timestamp");
  v397 = *(_QWORD *)(a1 + 3152);
  if (v397)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v397 + 32))(v397, this, "touchOscarEmu");
  v398 = *(_QWORD *)(a1 + 3160);
  if (v398)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v398 + 32))(v398, this, "trackRunData");
  v399 = *(_QWORD *)(a1 + 3168);
  if (v399)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v399 + 32))(v399, this, "ultraFastAccel");
  v400 = *(_QWORD *)(a1 + 3176);
  if (v400)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v400 + 32))(v400, this, "userInteraction");
  v401 = *(_QWORD *)(a1 + 3184);
  if (v401)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v401 + 32))(v401, this, "userStudyEvent");
  v402 = *(_QWORD *)(a1 + 3192);
  if (v402)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v402 + 32))(v402, this, "uwbRange");
  v403 = *(_QWORD *)(a1 + 3200);
  if (v403)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v403 + 32))(v403, this, "vO2MaxModelInput");
  v404 = *(_QWORD *)(a1 + 3208);
  if (v404)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v404 + 32))(v404, this, "velocityEstimatorFusionState");
  v405 = *(_QWORD *)(a1 + 3216);
  if (v405)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v405 + 32))(v405, this, "vibrationEvent");
  v406 = *(_QWORD *)(a1 + 3224);
  if (v406)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v406 + 32))(v406, this, "viewObstructedMachineLearningDecision");
  v407 = *(_QWORD *)(a1 + 3232);
  if (v407)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v407 + 32))(v407, this, "viewObstructedMachineLearningFeatures");
  v408 = *(_QWORD *)(a1 + 3240);
  if (v408)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v408 + 32))(v408, this, "viewObstructedMachineLearningProbabilities");
  v409 = *(_QWORD *)(a1 + 3248);
  if (v409)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v409 + 32))(v409, this, "viewObstructedState");
  v410 = *(_QWORD *)(a1 + 3256);
  if (v410)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v410 + 32))(v410, this, "vioEstimation");
  v411 = *(_QWORD *)(a1 + 3264);
  if (v411)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v411 + 32))(v411, this, "vioPose");
  v412 = *(_QWORD *)(a1 + 3272);
  if (v412)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v412 + 32))(v412, this, "vioReplayPose");
  v413 = *(_QWORD *)(a1 + 3280);
  if (v413)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v413 + 32))(v413, this, "visionCompassBias");
  v414 = *(_QWORD *)(a1 + 3288);
  if (v414)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v414 + 32))(v414, this, "visualLocalization");
  v415 = *(_QWORD *)(a1 + 3296);
  if (v415)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v415 + 32))(v415, this, "visualLocalizationAttitudeConstraints");
  v416 = *(_QWORD *)(a1 + 3304);
  if (v416)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v416 + 32))(v416, this, "visualLocalizationAttitudeCorrection");
  v417 = *(_QWORD *)(a1 + 3312);
  if (v417)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v417 + 32))(v417, this, "visualStateMeasurement");
  v418 = *(_QWORD *)(a1 + 3320);
  if (v418)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v418 + 32))(v418, this, "vo2MaxInput");
  v419 = *(_QWORD *)(a1 + 3328);
  if (v419)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v419 + 32))(v419, this, "vo2MaxOutput");
  v420 = *(_QWORD *)(a1 + 3336);
  if (v420)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v420 + 32))(v420, this, "wakeGestureNotification");
  v421 = *(_QWORD *)(a1 + 3344);
  if (v421)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v421 + 32))(v421, this, "wakeGestureSample");
  v422 = *(_QWORD *)(a1 + 3352);
  if (v422)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v422 + 32))(v422, this, "walkingDetectionResult");
  v423 = *(_QWORD *)(a1 + 3360);
  if (v423)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v423 + 32))(v423, this, "walkingSteadinessClassification");
  v424 = *(_QWORD *)(a1 + 3368);
  if (v424)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v424 + 32))(v424, this, "watchActiveCalories");
  v425 = *(_QWORD *)(a1 + 3376);
  if (v425)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v425 + 32))(v425, this, "watchBasalCalories");
  v426 = *(_QWORD *)(a1 + 3384);
  if (v426)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v426 + 32))(v426, this, "watchEnclosureMaterial");
  v427 = *(_QWORD *)(a1 + 3392);
  if (v427)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v427 + 32))(v427, this, "watchHeartRateData");
  v428 = *(_QWORD *)(a1 + 3400);
  if (v428)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v428 + 32))(v428, this, "watchOnWristState");
  v429 = *(_QWORD *)(a1 + 3408);
  if (v429)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v429 + 32))(v429, this, "watchOrientationSettings");
  v430 = *(_QWORD *)(a1 + 3416);
  if (v430)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v430 + 32))(v430, this, "wifiScanResults");
  v431 = *(_QWORD *)(a1 + 3424);
  if (v431)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v431 + 32))(v431, this, "workoutActivity");
  v432 = *(_QWORD *)(a1 + 3432);
  if (v432)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v432 + 32))(v432, this, "workoutEvent");
  v433 = *(_QWORD *)(a1 + 3440);
  if (v433)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v433 + 32))(v433, this, "workoutRecorderALSData");
  v434 = *(_QWORD *)(a1 + 3448);
  if (v434)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v434 + 32))(v434, this, "workoutRecorderAccel");
  v435 = *(_QWORD *)(a1 + 3456);
  if (v435)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v435 + 32))(v435, this, "workoutRecorderAccel800");
  v436 = *(_QWORD *)(a1 + 3464);
  if (v436)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v436 + 32))(v436, this, "workoutRecorderAveragedALSData");
  v437 = *(_QWORD *)(a1 + 3472);
  if (v437)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v437 + 32))(v437, this, "workoutRecorderBodyMetrics");
  v438 = *(_QWORD *)(a1 + 3480);
  if (v438)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v438 + 32))(v438, this, "workoutRecorderCompassCalibration");
  v439 = *(_QWORD *)(a1 + 3488);
  if (v439)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v439 + 32))(v439, this, "workoutRecorderElevation");
  v440 = *(_QWORD *)(a1 + 3496);
  if (v440)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v440 + 32))(v440, this, "workoutRecorderFaceCovered");
  v441 = *(_QWORD *)(a1 + 3504);
  if (v441)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v441 + 32))(v441, this, "workoutRecorderFitnessMachineData");
  v442 = *(_QWORD *)(a1 + 3512);
  if (v442)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v442 + 32))(v442, this, "workoutRecorderHealthKitInfo");
  v443 = *(_QWORD *)(a1 + 3520);
  if (v443)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v443 + 32))(v443, this, "workoutRecorderHeartRate");
  v444 = *(_QWORD *)(a1 + 3528);
  if (v444)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v444 + 32))(v444, this, "workoutRecorderMagnetometer");
  v445 = *(_QWORD *)(a1 + 3536);
  if (v445)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v445 + 32))(v445, this, "workoutRecorderOdometer");
  v446 = *(_QWORD *)(a1 + 3544);
  if (v446)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v446 + 32))(v446, this, "workoutRecorderPressure");
  v447 = *(_QWORD *)(a1 + 3552);
  if (v447)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v447 + 32))(v447, this, "workoutRecorderRotationRate");
  v448 = *(_QWORD *)(a1 + 3560);
  if (v448)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v448 + 32))(v448, this, "workoutRecorderWatchOnWristStatus");
  v449 = *(_QWORD *)(a1 + 3568);
  if (v449)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v449 + 32))(v449, this, "workoutRecorderWatchOrientationSettings");
  v450 = *(_QWORD *)(a1 + 3576);
  if (v450)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v450 + 32))(v450, this, "workoutRecorderWifiScanResults");
  v451 = *(_QWORD *)(a1 + 3584);
  if (v451)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v451 + 32))(v451, this, "workoutRecorderWorkoutEvent");
  v452 = *(_QWORD *)(a1 + 3592);
  if (v452)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v452 + 32))(v452, this, "workoutRecorderWorkoutSessionPriors");
  v453 = *(_QWORD *)(a1 + 3600);
  if (v453)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v453 + 32))(v453, this, "workoutSessionPriors");
  v454 = *(_QWORD *)(a1 + 3608);
  if (v454)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v454 + 32))(v454, this, "zeroVelocityCorrection");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7F3830(_QWORD *a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v18 = 0;
        if (v2 > v3)
          v3 = v2;
        while (1)
        {
          if (v3 == v2)
          {
            v12 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_24;
          }
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v19;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0)
            break;
          v16 += 7;
          v2 = v19;
          v15 = v17++ > 8;
          if (v15)
          {
LABEL_19:
            v12 = 0;
            goto LABEL_24;
          }
        }
        if (*((_BYTE *)this + 24))
          v12 = 0;
        else
          v12 = v18;
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v14 = *(_BYTE *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0)
            break;
          v10 += 7;
          v2 = v13;
          v15 = v11++ > 8;
          if (v15)
            goto LABEL_19;
        }
      }
LABEL_24:
      v4 = *((unsigned __int8 *)this + 24);
      if (*((_BYTE *)this + 24))
        v21 = 1;
      else
        v21 = (v12 & 7) == 4;
      if (v21)
        return v4 == 0;
      v22 = v12 >> 3;
      if ((int)(v12 >> 3) <= 2047)
        break;
      if ((int)v22 <= 29999)
      {
        v23 = (v22 - 2048);
        if (v23 <= 0xBC)
          __asm { BR              X9 }
        goto LABEL_45;
      }
      switch((_DWORD)v22)
      {
        case 0x7530:
          v26 = (_QWORD *)operator new();
          sub_21B7FE408(v26);
          v28 = a1[368];
          a1[368] = v26;
          if (v28)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            v26 = (_QWORD *)a1[368];
          }
          break;
        case 0x7531:
          v26 = (_QWORD *)operator new();
          sub_21B7FE75C(v26);
          v29 = a1[369];
          a1[369] = v26;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            v26 = (_QWORD *)a1[369];
          }
          break;
        case 0x7532:
          v26 = (_QWORD *)operator new();
          sub_21B75AA60(v26);
          v27 = a1[179];
          a1[179] = v26;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
            v26 = (_QWORD *)a1[179];
          }
          break;
        default:
          goto LABEL_45;
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v26 + 16))(v26, this) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_50:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v24 = (v22 - 1);
    if (v24 <= 0x1FF)
      __asm { BR              X9 }
    v25 = (v22 - 1001);
    if (v25 <= 0x34)
      __asm { BR              X9 }
LABEL_45:
    result = PB::Reader::skip(this);
    if (!(_DWORD)result)
      return result;
    goto LABEL_50;
  }
  return v4 == 0;
}

uint64_t sub_21B7FAB54(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;
  const PB::Base *v18;
  const PB::Base *v19;
  const PB::Base *v20;
  const PB::Base *v21;
  const PB::Base *v22;
  const PB::Base *v23;
  const PB::Base *v24;
  const PB::Base *v25;
  const PB::Base *v26;
  const PB::Base *v27;
  const PB::Base *v28;
  const PB::Base *v29;
  const PB::Base *v30;
  const PB::Base *v31;
  const PB::Base *v32;
  const PB::Base *v33;
  const PB::Base *v34;
  const PB::Base *v35;
  const PB::Base *v36;
  const PB::Base *v37;
  const PB::Base *v38;
  const PB::Base *v39;
  const PB::Base *v40;
  const PB::Base *v41;
  const PB::Base *v42;
  const PB::Base *v43;
  const PB::Base *v44;
  const PB::Base *v45;
  const PB::Base *v46;
  const PB::Base *v47;
  const PB::Base *v48;
  const PB::Base *v49;
  const PB::Base *v50;
  const PB::Base *v51;
  const PB::Base *v52;
  const PB::Base *v53;
  const PB::Base *v54;
  const PB::Base *v55;
  const PB::Base *v56;
  const PB::Base *v57;
  const PB::Base *v58;
  const PB::Base *v59;
  const PB::Base *v60;
  const PB::Base *v61;
  const PB::Base *v62;
  const PB::Base *v63;
  const PB::Base *v64;
  const PB::Base *v65;
  const PB::Base *v66;
  const PB::Base *v67;
  const PB::Base *v68;
  const PB::Base *v69;
  const PB::Base *v70;
  const PB::Base *v71;
  const PB::Base *v72;
  const PB::Base *v73;
  const PB::Base *v74;
  const PB::Base *v75;
  const PB::Base *v76;
  const PB::Base *v77;
  const PB::Base *v78;
  const PB::Base *v79;
  const PB::Base *v80;
  const PB::Base *v81;
  const PB::Base *v82;
  const PB::Base *v83;
  const PB::Base *v84;
  const PB::Base *v85;
  const PB::Base *v86;
  const PB::Base *v87;
  const PB::Base *v88;
  const PB::Base *v89;
  const PB::Base *v90;
  const PB::Base *v91;
  const PB::Base *v92;
  const PB::Base *v93;
  const PB::Base *v94;
  const PB::Base *v95;
  const PB::Base *v96;
  const PB::Base *v97;
  const PB::Base *v98;
  const PB::Base *v99;
  const PB::Base *v100;
  const PB::Base *v101;
  const PB::Base *v102;
  const PB::Base *v103;
  const PB::Base *v104;
  const PB::Base *v105;
  const PB::Base *v106;
  const PB::Base *v107;
  const PB::Base *v108;
  const PB::Base *v109;
  const PB::Base *v110;
  const PB::Base *v111;
  const PB::Base *v112;
  const PB::Base *v113;
  const PB::Base *v114;
  const PB::Base *v115;
  const PB::Base *v116;
  const PB::Base *v117;
  const PB::Base *v118;
  const PB::Base *v119;
  const PB::Base *v120;
  const PB::Base *v121;
  const PB::Base *v122;
  const PB::Base *v123;
  const PB::Base *v124;
  const PB::Base *v125;
  const PB::Base *v126;
  const PB::Base *v127;
  const PB::Base *v128;
  const PB::Base *v129;
  const PB::Base *v130;
  const PB::Base *v131;
  const PB::Base *v132;
  const PB::Base *v133;
  const PB::Base *v134;
  const PB::Base *v135;
  const PB::Base *v136;
  const PB::Base *v137;
  const PB::Base *v138;
  const PB::Base *v139;
  const PB::Base *v140;
  const PB::Base *v141;
  const PB::Base *v142;
  const PB::Base *v143;
  const PB::Base *v144;
  const PB::Base *v145;
  const PB::Base *v146;
  const PB::Base *v147;
  const PB::Base *v148;
  const PB::Base *v149;
  const PB::Base *v150;
  const PB::Base *v151;
  const PB::Base *v152;
  const PB::Base *v153;
  const PB::Base *v154;
  const PB::Base *v155;
  const PB::Base *v156;
  const PB::Base *v157;
  const PB::Base *v158;
  const PB::Base *v159;
  const PB::Base *v160;
  const PB::Base *v161;
  const PB::Base *v162;
  const PB::Base *v163;
  const PB::Base *v164;
  const PB::Base *v165;
  const PB::Base *v166;
  const PB::Base *v167;
  const PB::Base *v168;
  const PB::Base *v169;
  const PB::Base *v170;
  const PB::Base *v171;
  const PB::Base *v172;
  const PB::Base *v173;
  const PB::Base *v174;
  const PB::Base *v175;
  const PB::Base *v176;
  const PB::Base *v177;
  const PB::Base *v178;
  const PB::Base *v179;
  const PB::Base *v180;
  const PB::Base *v181;
  const PB::Base *v182;
  const PB::Base *v183;
  const PB::Base *v184;
  const PB::Base *v185;
  const PB::Base *v186;
  const PB::Base *v187;
  const PB::Base *v188;
  const PB::Base *v189;
  const PB::Base *v190;
  const PB::Base *v191;
  const PB::Base *v192;
  const PB::Base *v193;
  const PB::Base *v194;
  const PB::Base *v195;
  const PB::Base *v196;
  const PB::Base *v197;
  const PB::Base *v198;
  const PB::Base *v199;
  const PB::Base *v200;
  const PB::Base *v201;
  const PB::Base *v202;
  const PB::Base *v203;
  const PB::Base *v204;
  const PB::Base *v205;
  const PB::Base *v206;
  const PB::Base *v207;
  const PB::Base *v208;
  const PB::Base *v209;
  const PB::Base *v210;
  const PB::Base *v211;
  const PB::Base *v212;
  const PB::Base *v213;
  const PB::Base *v214;
  const PB::Base *v215;
  const PB::Base *v216;
  const PB::Base *v217;
  const PB::Base *v218;
  const PB::Base *v219;
  const PB::Base *v220;
  const PB::Base *v221;
  const PB::Base *v222;
  const PB::Base *v223;
  const PB::Base *v224;
  const PB::Base *v225;
  const PB::Base *v226;
  const PB::Base *v227;
  const PB::Base *v228;
  const PB::Base *v229;
  const PB::Base *v230;
  const PB::Base *v231;
  const PB::Base *v232;
  const PB::Base *v233;
  const PB::Base *v234;
  const PB::Base *v235;
  const PB::Base *v236;
  const PB::Base *v237;
  const PB::Base *v238;
  const PB::Base *v239;
  const PB::Base *v240;
  const PB::Base *v241;
  const PB::Base *v242;
  const PB::Base *v243;
  const PB::Base *v244;
  const PB::Base *v245;
  const PB::Base *v246;
  const PB::Base *v247;
  const PB::Base *v248;
  const PB::Base *v249;
  const PB::Base *v250;
  const PB::Base *v251;
  const PB::Base *v252;
  const PB::Base *v253;
  const PB::Base *v254;
  const PB::Base *v255;
  const PB::Base *v256;
  const PB::Base *v257;
  const PB::Base *v258;
  const PB::Base *v259;
  const PB::Base *v260;
  const PB::Base *v261;
  const PB::Base *v262;
  const PB::Base *v263;
  const PB::Base *v264;
  const PB::Base *v265;
  const PB::Base *v266;
  const PB::Base *v267;
  const PB::Base *v268;
  const PB::Base *v269;
  const PB::Base *v270;
  const PB::Base *v271;
  const PB::Base *v272;
  const PB::Base *v273;
  const PB::Base *v274;
  const PB::Base *v275;
  const PB::Base *v276;
  const PB::Base *v277;
  const PB::Base *v278;
  const PB::Base *v279;
  const PB::Base *v280;
  const PB::Base *v281;
  const PB::Base *v282;
  const PB::Base *v283;
  const PB::Base *v284;
  const PB::Base *v285;
  const PB::Base *v286;
  const PB::Base *v287;
  const PB::Base *v288;
  const PB::Base *v289;
  const PB::Base *v290;
  const PB::Base *v291;
  const PB::Base *v292;
  const PB::Base *v293;
  const PB::Base *v294;
  const PB::Base *v295;
  const PB::Base *v296;
  const PB::Base *v297;
  const PB::Base *v298;
  const PB::Base *v299;
  const PB::Base *v300;
  const PB::Base *v301;
  const PB::Base *v302;
  const PB::Base *v303;
  const PB::Base *v304;
  const PB::Base *v305;
  const PB::Base *v306;
  const PB::Base *v307;
  const PB::Base *v308;
  const PB::Base *v309;
  const PB::Base *v310;
  const PB::Base *v311;
  const PB::Base *v312;
  const PB::Base *v313;
  const PB::Base *v314;
  const PB::Base *v315;
  const PB::Base *v316;
  const PB::Base *v317;
  const PB::Base *v318;
  const PB::Base *v319;
  const PB::Base *v320;
  const PB::Base *v321;
  const PB::Base *v322;
  const PB::Base *v323;
  const PB::Base *v324;
  const PB::Base *v325;
  const PB::Base *v326;
  const PB::Base *v327;
  const PB::Base *v328;
  const PB::Base *v329;
  const PB::Base *v330;
  const PB::Base *v331;
  const PB::Base *v332;
  const PB::Base *v333;
  const PB::Base *v334;
  const PB::Base *v335;
  const PB::Base *v336;
  const PB::Base *v337;
  const PB::Base *v338;
  const PB::Base *v339;
  const PB::Base *v340;
  const PB::Base *v341;
  const PB::Base *v342;
  const PB::Base *v343;
  const PB::Base *v344;
  const PB::Base *v345;
  const PB::Base *v346;
  const PB::Base *v347;
  const PB::Base *v348;
  const PB::Base *v349;
  const PB::Base *v350;
  const PB::Base *v351;
  const PB::Base *v352;
  const PB::Base *v353;
  const PB::Base *v354;
  const PB::Base *v355;
  const PB::Base *v356;
  const PB::Base *v357;
  const PB::Base *v358;
  const PB::Base *v359;
  const PB::Base *v360;
  const PB::Base *v361;
  const PB::Base *v362;
  const PB::Base *v363;
  const PB::Base *v364;
  const PB::Base *v365;
  const PB::Base *v366;
  const PB::Base *v367;
  const PB::Base *v368;
  const PB::Base *v369;
  const PB::Base *v370;
  const PB::Base *v371;
  const PB::Base *v372;
  const PB::Base *v373;
  const PB::Base *v374;
  const PB::Base *v375;
  const PB::Base *v376;
  const PB::Base *v377;
  const PB::Base *v378;
  const PB::Base *v379;
  const PB::Base *v380;
  const PB::Base *v381;
  const PB::Base *v382;
  const PB::Base *v383;
  const PB::Base *v384;
  const PB::Base *v385;
  const PB::Base *v386;
  const PB::Base *v387;
  const PB::Base *v388;
  const PB::Base *v389;
  const PB::Base *v390;
  const PB::Base *v391;
  const PB::Base *v392;
  const PB::Base *v393;
  const PB::Base *v394;
  const PB::Base *v395;
  const PB::Base *v396;
  const PB::Base *v397;
  const PB::Base *v398;
  const PB::Base *v399;
  const PB::Base *v400;
  const PB::Base *v401;
  const PB::Base *v402;
  const PB::Base *v403;
  const PB::Base *v404;
  const PB::Base *v405;
  const PB::Base *v406;
  const PB::Base *v407;
  const PB::Base *v408;
  const PB::Base *v409;
  const PB::Base *v410;
  const PB::Base *v411;
  const PB::Base *v412;
  const PB::Base *v413;
  const PB::Base *v414;
  const PB::Base *v415;
  const PB::Base *v416;
  const PB::Base *v417;
  const PB::Base *v418;
  const PB::Base *v419;
  const PB::Base *v420;
  const PB::Base *v421;
  const PB::Base *v422;
  const PB::Base *v423;
  const PB::Base *v424;
  const PB::Base *v425;
  const PB::Base *v426;
  const PB::Base *v427;
  const PB::Base *v428;
  const PB::Base *v429;
  const PB::Base *v430;
  const PB::Base *v431;
  const PB::Base *v432;
  const PB::Base *v433;
  const PB::Base *v434;
  const PB::Base *v435;
  const PB::Base *v436;
  const PB::Base *v437;
  const PB::Base *v438;
  const PB::Base *v439;
  const PB::Base *v440;
  const PB::Base *v441;
  const PB::Base *v442;
  const PB::Base *v443;
  const PB::Base *v444;
  const PB::Base *v445;
  const PB::Base *v446;
  const PB::Base *v447;
  const PB::Base *v448;
  const PB::Base *v449;
  const PB::Base *v450;
  const PB::Base *v451;
  const PB::Base *v452;
  const PB::Base *v453;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 3616) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 616));
  v4 = (const PB::Base *)v3[146];
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = (const PB::Base *)v3[145];
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = (const PB::Base *)v3[142];
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = (const PB::Base *)v3[141];
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7);
  v8 = (const PB::Base *)v3[85];
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  v9 = (const PB::Base *)v3[84];
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9);
  v10 = (const PB::Base *)v3[91];
  if (v10)
    result = PB::Writer::writeSubmessage(this, v10);
  v11 = (const PB::Base *)v3[90];
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11);
  v12 = (const PB::Base *)v3[180];
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12);
  v13 = (const PB::Base *)v3[95];
  if (v13)
    result = PB::Writer::writeSubmessage(this, v13);
  v14 = (const PB::Base *)v3[11];
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14);
  v15 = (const PB::Base *)v3[18];
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15);
  v16 = (const PB::Base *)v3[27];
  if (v16)
    result = PB::Writer::writeSubmessage(this, v16);
  v17 = (const PB::Base *)v3[431];
  if (v17)
    result = PB::Writer::writeSubmessage(this, v17);
  v18 = (const PB::Base *)v3[434];
  if (v18)
    result = PB::Writer::writeSubmessage(this, v18);
  v19 = (const PB::Base *)v3[436];
  if (v19)
    result = PB::Writer::writeSubmessage(this, v19);
  v20 = (const PB::Base *)v3[440];
  if (v20)
    result = PB::Writer::writeSubmessage(this, v20);
  v21 = (const PB::Base *)v3[444];
  if (v21)
    result = PB::Writer::writeSubmessage(this, v21);
  v22 = (const PB::Base *)v3[442];
  if (v22)
    result = PB::Writer::writeSubmessage(this, v22);
  v23 = (const PB::Base *)v3[448];
  if (v23)
    result = PB::Writer::writeSubmessage(this, v23);
  v24 = (const PB::Base *)v3[415];
  if (v24)
    result = PB::Writer::writeSubmessage(this, v24);
  v25 = (const PB::Base *)v3[68];
  if (v25)
    result = PB::Writer::writeSubmessage(this, v25);
  v26 = (const PB::Base *)v3[69];
  if (v26)
    result = PB::Writer::writeSubmessage(this, v26);
  v27 = (const PB::Base *)v3[70];
  if (v27)
    result = PB::Writer::writeSubmessage(this, v27);
  v28 = (const PB::Base *)v3[67];
  if (v28)
    result = PB::Writer::writeSubmessage(this, v28);
  v29 = (const PB::Base *)v3[71];
  if (v29)
    result = PB::Writer::writeSubmessage(this, v29);
  v30 = (const PB::Base *)v3[439];
  if (v30)
    result = PB::Writer::writeSubmessage(this, v30);
  v31 = (const PB::Base *)v3[288];
  if (v31)
    result = PB::Writer::writeSubmessage(this, v31);
  v32 = (const PB::Base *)v3[340];
  if (v32)
    result = PB::Writer::writeSubmessage(this, v32);
  v33 = (const PB::Base *)v3[446];
  if (v33)
    result = PB::Writer::writeSubmessage(this, v33);
  v34 = (const PB::Base *)v3[425];
  if (v34)
    result = PB::Writer::writeSubmessage(this, v34);
  v35 = (const PB::Base *)v3[76];
  if (v35)
    result = PB::Writer::writeSubmessage(this, v35);
  v36 = (const PB::Base *)v3[427];
  if (v36)
    result = PB::Writer::writeSubmessage(this, v36);
  v37 = (const PB::Base *)v3[176];
  if (v37)
    result = PB::Writer::writeSubmessage(this, v37);
  v38 = (const PB::Base *)v3[174];
  if (v38)
    result = PB::Writer::writeSubmessage(this, v38);
  v39 = (const PB::Base *)v3[169];
  if (v39)
    result = PB::Writer::writeSubmessage(this, v39);
  v40 = (const PB::Base *)v3[28];
  if (v40)
    result = PB::Writer::writeSubmessage(this, v40);
  v41 = (const PB::Base *)v3[29];
  if (v41)
    result = PB::Writer::writeSubmessage(this, v41);
  v42 = (const PB::Base *)v3[34];
  if (v42)
    result = PB::Writer::writeSubmessage(this, v42);
  v43 = (const PB::Base *)v3[114];
  if (v43)
    result = PB::Writer::writeSubmessage(this, v43);
  v44 = (const PB::Base *)v3[447];
  if (v44)
    result = PB::Writer::writeSubmessage(this, v44);
  v45 = (const PB::Base *)v3[443];
  if (v45)
    result = PB::Writer::writeSubmessage(this, v45);
  v46 = (const PB::Base *)v3[168];
  if (v46)
    result = PB::Writer::writeSubmessage(this, v46);
  v47 = (const PB::Base *)v3[410];
  if (v47)
    result = PB::Writer::writeSubmessage(this, v47);
  v48 = (const PB::Base *)v3[44];
  if (v48)
    result = PB::Writer::writeSubmessage(this, v48);
  v49 = (const PB::Base *)v3[407];
  if (v49)
    result = PB::Writer::writeSubmessage(this, v49);
  v50 = (const PB::Base *)v3[235];
  if (v50)
    result = PB::Writer::writeSubmessage(this, v50);
  v51 = (const PB::Base *)v3[125];
  if (v51)
    result = PB::Writer::writeSubmessage(this, v51);
  v52 = (const PB::Base *)v3[10];
  if (v52)
    result = PB::Writer::writeSubmessage(this, v52);
  v53 = (const PB::Base *)v3[259];
  if (v53)
    result = PB::Writer::writeSubmessage(this, v53);
  v54 = (const PB::Base *)v3[379];
  if (v54)
    result = PB::Writer::writeSubmessage(this, v54);
  v55 = (const PB::Base *)v3[245];
  if (v55)
    result = PB::Writer::writeSubmessage(this, v55);
  v56 = (const PB::Base *)v3[89];
  if (v56)
    result = PB::Writer::writeSubmessage(this, v56);
  v57 = (const PB::Base *)v3[408];
  if (v57)
    result = PB::Writer::writeSubmessage(this, v57);
  v58 = (const PB::Base *)v3[356];
  if (v58)
    result = PB::Writer::writeSubmessage(this, v58);
  v59 = (const PB::Base *)v3[409];
  if (v59)
    result = PB::Writer::writeSubmessage(this, v59);
  v60 = (const PB::Base *)v3[414];
  if (v60)
    result = PB::Writer::writeSubmessage(this, v60);
  v61 = (const PB::Base *)v3[219];
  if (v61)
    result = PB::Writer::writeSubmessage(this, v61);
  v62 = (const PB::Base *)v3[194];
  if (v62)
    result = PB::Writer::writeSubmessage(this, v62);
  v63 = (const PB::Base *)v3[166];
  if (v63)
    result = PB::Writer::writeSubmessage(this, v63);
  v64 = (const PB::Base *)v3[215];
  if (v64)
    result = PB::Writer::writeSubmessage(this, v64);
  v65 = (const PB::Base *)v3[397];
  if (v65)
    result = PB::Writer::writeSubmessage(this, v65);
  v66 = (const PB::Base *)v3[210];
  if (v66)
    result = PB::Writer::writeSubmessage(this, v66);
  v67 = (const PB::Base *)v3[16];
  if (v67)
    result = PB::Writer::writeSubmessage(this, v67);
  v68 = (const PB::Base *)v3[398];
  if (v68)
    result = PB::Writer::writeSubmessage(this, v68);
  v69 = (const PB::Base *)v3[47];
  if (v69)
    result = PB::Writer::writeSubmessage(this, v69);
  v70 = (const PB::Base *)v3[391];
  if (v70)
    result = PB::Writer::writeSubmessage(this, v70);
  v71 = (const PB::Base *)v3[46];
  if (v71)
    result = PB::Writer::writeSubmessage(this, v71);
  v72 = (const PB::Base *)v3[392];
  if (v72)
    result = PB::Writer::writeSubmessage(this, v72);
  v73 = (const PB::Base *)v3[432];
  if (v73)
    result = PB::Writer::writeSubmessage(this, v73);
  v74 = (const PB::Base *)v3[37];
  if (v74)
    result = PB::Writer::writeSubmessage(this, v74);
  v75 = (const PB::Base *)v3[430];
  if (v75)
    result = PB::Writer::writeSubmessage(this, v75);
  v76 = (const PB::Base *)v3[411];
  if (v76)
    result = PB::Writer::writeSubmessage(this, v76);
  v77 = (const PB::Base *)v3[155];
  if (v77)
    result = PB::Writer::writeSubmessage(this, v77);
  v78 = (const PB::Base *)v3[367];
  if (v78)
    result = PB::Writer::writeSubmessage(this, v78);
  v79 = (const PB::Base *)v3[131];
  if (v79)
    result = PB::Writer::writeSubmessage(this, v79);
  v80 = (const PB::Base *)v3[109];
  if (v80)
    result = PB::Writer::writeSubmessage(this, v80);
  v81 = (const PB::Base *)v3[4];
  if (v81)
    result = PB::Writer::writeSubmessage(this, v81);
  v82 = (const PB::Base *)v3[253];
  if (v82)
    result = PB::Writer::writeSubmessage(this, v82);
  v83 = (const PB::Base *)v3[248];
  if (v83)
    result = PB::Writer::writeSubmessage(this, v83);
  v84 = (const PB::Base *)v3[62];
  if (v84)
    result = PB::Writer::writeSubmessage(this, v84);
  v85 = (const PB::Base *)v3[217];
  if (v85)
    result = PB::Writer::writeSubmessage(this, v85);
  v86 = (const PB::Base *)v3[333];
  if (v86)
    result = PB::Writer::writeSubmessage(this, v86);
  v87 = (const PB::Base *)v3[183];
  if (v87)
    result = PB::Writer::writeSubmessage(this, v87);
  v88 = (const PB::Base *)v3[88];
  if (v88)
    result = PB::Writer::writeSubmessage(this, v88);
  v89 = (const PB::Base *)v3[151];
  if (v89)
    result = PB::Writer::writeSubmessage(this, v89);
  v90 = (const PB::Base *)v3[152];
  if (v90)
    result = PB::Writer::writeSubmessage(this, v90);
  v91 = (const PB::Base *)v3[150];
  if (v91)
    result = PB::Writer::writeSubmessage(this, v91);
  v92 = (const PB::Base *)v3[149];
  if (v92)
    result = PB::Writer::writeSubmessage(this, v92);
  v93 = (const PB::Base *)v3[59];
  if (v93)
    result = PB::Writer::writeSubmessage(this, v93);
  v94 = (const PB::Base *)v3[132];
  if (v94)
    result = PB::Writer::writeSubmessage(this, v94);
  v95 = (const PB::Base *)v3[247];
  if (v95)
    result = PB::Writer::writeSubmessage(this, v95);
  v96 = (const PB::Base *)v3[236];
  if (v96)
    result = PB::Writer::writeSubmessage(this, v96);
  v97 = (const PB::Base *)v3[304];
  if (v97)
    result = PB::Writer::writeSubmessage(this, v97);
  v98 = (const PB::Base *)v3[305];
  if (v98)
    result = PB::Writer::writeSubmessage(this, v98);
  v99 = (const PB::Base *)v3[63];
  if (v99)
    result = PB::Writer::writeSubmessage(this, v99);
  v100 = (const PB::Base *)v3[184];
  if (v100)
    result = PB::Writer::writeSubmessage(this, v100);
  v101 = (const PB::Base *)v3[87];
  if (v101)
    result = PB::Writer::writeSubmessage(this, v101);
  v102 = (const PB::Base *)v3[318];
  if (v102)
    result = PB::Writer::writeSubmessage(this, v102);
  v103 = (const PB::Base *)v3[416];
  if (v103)
    result = PB::Writer::writeSubmessage(this, v103);
  v104 = (const PB::Base *)v3[238];
  if (v104)
    result = PB::Writer::writeSubmessage(this, v104);
  v105 = (const PB::Base *)v3[239];
  if (v105)
    result = PB::Writer::writeSubmessage(this, v105);
  v106 = (const PB::Base *)v3[317];
  if (v106)
    result = PB::Writer::writeSubmessage(this, v106);
  v107 = (const PB::Base *)v3[441];
  if (v107)
    result = PB::Writer::writeSubmessage(this, v107);
  v108 = (const PB::Base *)v3[435];
  if (v108)
    result = PB::Writer::writeSubmessage(this, v108);
  v109 = (const PB::Base *)v3[332];
  if (v109)
    result = PB::Writer::writeSubmessage(this, v109);
  v110 = (const PB::Base *)v3[73];
  if (v110)
    result = PB::Writer::writeSubmessage(this, v110);
  v111 = (const PB::Base *)v3[60];
  if (v111)
    result = PB::Writer::writeSubmessage(this, v111);
  v112 = (const PB::Base *)v3[61];
  if (v112)
    result = PB::Writer::writeSubmessage(this, v112);
  v113 = (const PB::Base *)v3[266];
  if (v113)
    result = PB::Writer::writeSubmessage(this, v113);
  v114 = (const PB::Base *)v3[299];
  if (v114)
    result = PB::Writer::writeSubmessage(this, v114);
  v115 = (const PB::Base *)v3[300];
  if (v115)
    result = PB::Writer::writeSubmessage(this, v115);
  v116 = (const PB::Base *)v3[48];
  if (v116)
    result = PB::Writer::writeSubmessage(this, v116);
  v117 = (const PB::Base *)v3[393];
  if (v117)
    result = PB::Writer::writeSubmessage(this, v117);
  v118 = (const PB::Base *)v3[43];
  if (v118)
    result = PB::Writer::writeSubmessage(this, v118);
  v119 = (const PB::Base *)v3[58];
  if (v119)
    result = PB::Writer::writeSubmessage(this, v119);
  v120 = (const PB::Base *)v3[64];
  if (v120)
    result = PB::Writer::writeSubmessage(this, v120);
  v121 = (const PB::Base *)v3[420];
  if (v121)
    result = PB::Writer::writeSubmessage(this, v121);
  v122 = (const PB::Base *)v3[375];
  if (v122)
    result = PB::Writer::writeSubmessage(this, v122);
  v123 = (const PB::Base *)v3[370];
  if (v123)
    result = PB::Writer::writeSubmessage(this, v123);
  v124 = (const PB::Base *)v3[373];
  if (v124)
    result = PB::Writer::writeSubmessage(this, v124);
  v125 = (const PB::Base *)v3[372];
  if (v125)
    result = PB::Writer::writeSubmessage(this, v125);
  v126 = (const PB::Base *)v3[376];
  if (v126)
    result = PB::Writer::writeSubmessage(this, v126);
  v127 = (const PB::Base *)v3[377];
  if (v127)
    result = PB::Writer::writeSubmessage(this, v127);
  v128 = (const PB::Base *)v3[371];
  if (v128)
    result = PB::Writer::writeSubmessage(this, v128);
  v129 = (const PB::Base *)v3[242];
  if (v129)
    result = PB::Writer::writeSubmessage(this, v129);
  v130 = (const PB::Base *)v3[445];
  if (v130)
    result = PB::Writer::writeSubmessage(this, v130);
  v131 = (const PB::Base *)v3[230];
  if (v131)
    result = PB::Writer::writeSubmessage(this, v131);
  v132 = (const PB::Base *)v3[24];
  if (v132)
    result = PB::Writer::writeSubmessage(this, v132);
  v133 = (const PB::Base *)v3[380];
  if (v133)
    result = PB::Writer::writeSubmessage(this, v133);
  v134 = (const PB::Base *)v3[381];
  if (v134)
    result = PB::Writer::writeSubmessage(this, v134);
  v135 = (const PB::Base *)v3[363];
  if (v135)
    result = PB::Writer::writeSubmessage(this, v135);
  v136 = (const PB::Base *)v3[92];
  if (v136)
    result = PB::Writer::writeSubmessage(this, v136);
  v137 = (const PB::Base *)v3[111];
  if (v137)
    result = PB::Writer::writeSubmessage(this, v137);
  v138 = (const PB::Base *)v3[57];
  if (v138)
    result = PB::Writer::writeSubmessage(this, v138);
  v139 = (const PB::Base *)v3[234];
  if (v139)
    result = PB::Writer::writeSubmessage(this, v139);
  v140 = (const PB::Base *)v3[56];
  if (v140)
    result = PB::Writer::writeSubmessage(this, v140);
  v141 = (const PB::Base *)v3[308];
  if (v141)
    result = PB::Writer::writeSubmessage(this, v141);
  v142 = (const PB::Base *)v3[130];
  if (v142)
    result = PB::Writer::writeSubmessage(this, v142);
  v143 = (const PB::Base *)v3[98];
  if (v143)
    result = PB::Writer::writeSubmessage(this, v143);
  v144 = (const PB::Base *)v3[1];
  if (v144)
    result = PB::Writer::writeSubmessage(this, v144);
  v145 = (const PB::Base *)v3[2];
  if (v145)
    result = PB::Writer::writeSubmessage(this, v145);
  v146 = (const PB::Base *)v3[40];
  if (v146)
    result = PB::Writer::writeSubmessage(this, v146);
  v147 = (const PB::Base *)v3[231];
  if (v147)
    result = PB::Writer::writeSubmessage(this, v147);
  v148 = (const PB::Base *)v3[406];
  if (v148)
    result = PB::Writer::writeSubmessage(this, v148);
  v149 = (const PB::Base *)v3[343];
  if (v149)
    result = PB::Writer::writeSubmessage(this, v149);
  v150 = (const PB::Base *)v3[450];
  if (v150)
    result = PB::Writer::writeSubmessage(this, v150);
  v151 = (const PB::Base *)v3[449];
  if (v151)
    result = PB::Writer::writeSubmessage(this, v151);
  v152 = (const PB::Base *)v3[45];
  if (v152)
    result = PB::Writer::writeSubmessage(this, v152);
  v153 = (const PB::Base *)v3[281];
  if (v153)
    result = PB::Writer::writeSubmessage(this, v153);
  v154 = (const PB::Base *)v3[303];
  if (v154)
    result = PB::Writer::writeSubmessage(this, v154);
  v155 = (const PB::Base *)v3[229];
  if (v155)
    result = PB::Writer::writeSubmessage(this, v155);
  v156 = (const PB::Base *)v3[232];
  if (v156)
    result = PB::Writer::writeSubmessage(this, v156);
  v157 = (const PB::Base *)v3[344];
  if (v157)
    result = PB::Writer::writeSubmessage(this, v157);
  v158 = (const PB::Base *)v3[51];
  if (v158)
    result = PB::Writer::writeSubmessage(this, v158);
  v159 = (const PB::Base *)v3[52];
  if (v159)
    result = PB::Writer::writeSubmessage(this, v159);
  v160 = (const PB::Base *)v3[250];
  if (v160)
    result = PB::Writer::writeSubmessage(this, v160);
  v161 = (const PB::Base *)v3[269];
  if (v161)
    result = PB::Writer::writeSubmessage(this, v161);
  v162 = (const PB::Base *)v3[9];
  if (v162)
    result = PB::Writer::writeSubmessage(this, v162);
  v163 = (const PB::Base *)v3[104];
  if (v163)
    result = PB::Writer::writeSubmessage(this, v163);
  v164 = (const PB::Base *)v3[282];
  if (v164)
    result = PB::Writer::writeSubmessage(this, v164);
  v165 = (const PB::Base *)v3[136];
  if (v165)
    result = PB::Writer::writeSubmessage(this, v165);
  v166 = (const PB::Base *)v3[137];
  if (v166)
    result = PB::Writer::writeSubmessage(this, v166);
  v167 = (const PB::Base *)v3[135];
  if (v167)
    result = PB::Writer::writeSubmessage(this, v167);
  v168 = (const PB::Base *)v3[112];
  if (v168)
    result = PB::Writer::writeSubmessage(this, v168);
  v169 = (const PB::Base *)v3[433];
  if (v169)
    result = PB::Writer::writeSubmessage(this, v169);
  v170 = (const PB::Base *)v3[386];
  if (v170)
    result = PB::Writer::writeSubmessage(this, v170);
  v171 = (const PB::Base *)v3[346];
  if (v171)
    result = PB::Writer::writeSubmessage(this, v171);
  v172 = (const PB::Base *)v3[327];
  if (v172)
    result = PB::Writer::writeSubmessage(this, v172);
  v173 = (const PB::Base *)v3[224];
  if (v173)
    result = PB::Writer::writeSubmessage(this, v173);
  v174 = (const PB::Base *)v3[225];
  if (v174)
    result = PB::Writer::writeSubmessage(this, v174);
  v175 = (const PB::Base *)v3[38];
  if (v175)
    result = PB::Writer::writeSubmessage(this, v175);
  v176 = (const PB::Base *)v3[223];
  if (v176)
    result = PB::Writer::writeSubmessage(this, v176);
  v177 = (const PB::Base *)v3[417];
  if (v177)
    result = PB::Writer::writeSubmessage(this, v177);
  v178 = (const PB::Base *)v3[325];
  if (v178)
    result = PB::Writer::writeSubmessage(this, v178);
  v179 = (const PB::Base *)v3[54];
  if (v179)
    result = PB::Writer::writeSubmessage(this, v179);
  v180 = (const PB::Base *)v3[339];
  if (v180)
    result = PB::Writer::writeSubmessage(this, v180);
  v181 = (const PB::Base *)v3[226];
  if (v181)
    result = PB::Writer::writeSubmessage(this, v181);
  v182 = (const PB::Base *)v3[222];
  if (v182)
    result = PB::Writer::writeSubmessage(this, v182);
  v183 = (const PB::Base *)v3[50];
  if (v183)
    result = PB::Writer::writeSubmessage(this, v183);
  v184 = (const PB::Base *)v3[55];
  if (v184)
    result = PB::Writer::writeSubmessage(this, v184);
  v185 = (const PB::Base *)v3[165];
  if (v185)
    result = PB::Writer::writeSubmessage(this, v185);
  v186 = (const PB::Base *)v3[362];
  if (v186)
    result = PB::Writer::writeSubmessage(this, v186);
  v187 = (const PB::Base *)v3[365];
  if (v187)
    result = PB::Writer::writeSubmessage(this, v187);
  v188 = (const PB::Base *)v3[364];
  if (v188)
    result = PB::Writer::writeSubmessage(this, v188);
  v189 = (const PB::Base *)v3[129];
  if (v189)
    result = PB::Writer::writeSubmessage(this, v189);
  v190 = (const PB::Base *)v3[424];
  if (v190)
    result = PB::Writer::writeSubmessage(this, v190);
  v191 = (const PB::Base *)v3[115];
  if (v191)
    result = PB::Writer::writeSubmessage(this, v191);
  v192 = (const PB::Base *)v3[421];
  if (v192)
    result = PB::Writer::writeSubmessage(this, v192);
  v193 = (const PB::Base *)v3[422];
  if (v193)
    result = PB::Writer::writeSubmessage(this, v193);
  v194 = (const PB::Base *)v3[395];
  if (v194)
    result = PB::Writer::writeSubmessage(this, v194);
  v195 = (const PB::Base *)v3[139];
  if (v195)
    result = PB::Writer::writeSubmessage(this, v195);
  v196 = (const PB::Base *)v3[140];
  if (v196)
    result = PB::Writer::writeSubmessage(this, v196);
  v197 = (const PB::Base *)v3[243];
  if (v197)
    result = PB::Writer::writeSubmessage(this, v197);
  v198 = (const PB::Base *)v3[128];
  if (v198)
    result = PB::Writer::writeSubmessage(this, v198);
  v199 = (const PB::Base *)v3[438];
  if (v199)
    result = PB::Writer::writeSubmessage(this, v199);
  v200 = (const PB::Base *)v3[14];
  if (v200)
    result = PB::Writer::writeSubmessage(this, v200);
  v201 = (const PB::Base *)v3[291];
  if (v201)
    result = PB::Writer::writeSubmessage(this, v201);
  v202 = (const PB::Base *)v3[177];
  if (v202)
    result = PB::Writer::writeSubmessage(this, v202);
  v203 = (const PB::Base *)v3[301];
  if (v203)
    result = PB::Writer::writeSubmessage(this, v203);
  v204 = (const PB::Base *)v3[302];
  if (v204)
    result = PB::Writer::writeSubmessage(this, v204);
  v205 = (const PB::Base *)v3[290];
  if (v205)
    result = PB::Writer::writeSubmessage(this, v205);
  v206 = (const PB::Base *)v3[108];
  if (v206)
    result = PB::Writer::writeSubmessage(this, v206);
  v207 = (const PB::Base *)v3[178];
  if (v207)
    result = PB::Writer::writeSubmessage(this, v207);
  v208 = (const PB::Base *)v3[428];
  if (v208)
    result = PB::Writer::writeSubmessage(this, v208);
  v209 = (const PB::Base *)v3[294];
  if (v209)
    result = PB::Writer::writeSubmessage(this, v209);
  v210 = (const PB::Base *)v3[297];
  if (v210)
    result = PB::Writer::writeSubmessage(this, v210);
  v211 = (const PB::Base *)v3[159];
  if (v211)
    result = PB::Writer::writeSubmessage(this, v211);
  v212 = (const PB::Base *)v3[374];
  if (v212)
    result = PB::Writer::writeSubmessage(this, v212);
  v213 = (const PB::Base *)v3[296];
  if (v213)
    result = PB::Writer::writeSubmessage(this, v213);
  v214 = (const PB::Base *)v3[246];
  if (v214)
    result = PB::Writer::writeSubmessage(this, v214);
  v215 = (const PB::Base *)v3[423];
  if (v215)
    result = PB::Writer::writeSubmessage(this, v215);
  v216 = (const PB::Base *)v3[22];
  if (v216)
    result = PB::Writer::writeSubmessage(this, v216);
  v217 = (const PB::Base *)v3[26];
  if (v217)
    result = PB::Writer::writeSubmessage(this, v217);
  v218 = (const PB::Base *)v3[254];
  if (v218)
    result = PB::Writer::writeSubmessage(this, v218);
  v219 = (const PB::Base *)v3[97];
  if (v219)
    result = PB::Writer::writeSubmessage(this, v219);
  v220 = (const PB::Base *)v3[306];
  if (v220)
    result = PB::Writer::writeSubmessage(this, v220);
  v221 = (const PB::Base *)v3[307];
  if (v221)
    result = PB::Writer::writeSubmessage(this, v221);
  v222 = (const PB::Base *)v3[167];
  if (v222)
    result = PB::Writer::writeSubmessage(this, v222);
  v223 = (const PB::Base *)v3[437];
  if (v223)
    result = PB::Writer::writeSubmessage(this, v223);
  v224 = (const PB::Base *)v3[384];
  if (v224)
    result = PB::Writer::writeSubmessage(this, v224);
  v225 = (const PB::Base *)v3[396];
  if (v225)
    result = PB::Writer::writeSubmessage(this, v225);
  v226 = (const PB::Base *)v3[3];
  if (v226)
    result = PB::Writer::writeSubmessage(this, v226);
  v227 = (const PB::Base *)v3[143];
  if (v227)
    result = PB::Writer::writeSubmessage(this, v227);
  v228 = (const PB::Base *)v3[240];
  if (v228)
    result = PB::Writer::writeSubmessage(this, v228);
  v229 = (const PB::Base *)v3[80];
  if (v229)
    result = PB::Writer::writeSubmessage(this, v229);
  v230 = (const PB::Base *)v3[93];
  if (v230)
    result = PB::Writer::writeSubmessage(this, v230);
  v231 = (const PB::Base *)v3[158];
  if (v231)
    result = PB::Writer::writeSubmessage(this, v231);
  v232 = (const PB::Base *)v3[7];
  if (v232)
    result = PB::Writer::writeSubmessage(this, v232);
  v233 = (const PB::Base *)v3[156];
  if (v233)
    result = PB::Writer::writeSubmessage(this, v233);
  v234 = (const PB::Base *)v3[5];
  if (v234)
    result = PB::Writer::writeSubmessage(this, v234);
  v235 = (const PB::Base *)v3[8];
  if (v235)
    result = PB::Writer::writeSubmessage(this, v235);
  v236 = (const PB::Base *)v3[81];
  if (v236)
    result = PB::Writer::writeSubmessage(this, v236);
  v237 = (const PB::Base *)v3[144];
  if (v237)
    result = PB::Writer::writeSubmessage(this, v237);
  v238 = (const PB::Base *)v3[316];
  if (v238)
    result = PB::Writer::writeSubmessage(this, v238);
  v239 = (const PB::Base *)v3[323];
  if (v239)
    result = PB::Writer::writeSubmessage(this, v239);
  v240 = (const PB::Base *)v3[322];
  if (v240)
    result = PB::Writer::writeSubmessage(this, v240);
  v241 = (const PB::Base *)v3[319];
  if (v241)
    result = PB::Writer::writeSubmessage(this, v241);
  v242 = (const PB::Base *)v3[148];
  if (v242)
    result = PB::Writer::writeSubmessage(this, v242);
  v243 = (const PB::Base *)v3[154];
  if (v243)
    result = PB::Writer::writeSubmessage(this, v243);
  v244 = (const PB::Base *)v3[324];
  if (v244)
    result = PB::Writer::writeSubmessage(this, v244);
  v245 = (const PB::Base *)v3[256];
  if (v245)
    result = PB::Writer::writeSubmessage(this, v245);
  v246 = (const PB::Base *)v3[153];
  if (v246)
    result = PB::Writer::writeSubmessage(this, v246);
  v247 = (const PB::Base *)v3[82];
  if (v247)
    result = PB::Writer::writeSubmessage(this, v247);
  v248 = (const PB::Base *)v3[157];
  if (v248)
    result = PB::Writer::writeSubmessage(this, v248);
  v249 = (const PB::Base *)v3[49];
  if (v249)
    result = PB::Writer::writeSubmessage(this, v249);
  v250 = (const PB::Base *)v3[394];
  if (v250)
    result = PB::Writer::writeSubmessage(this, v250);
  v251 = (const PB::Base *)v3[355];
  if (v251)
    result = PB::Writer::writeSubmessage(this, v251);
  v252 = (const PB::Base *)v3[252];
  if (v252)
    result = PB::Writer::writeSubmessage(this, v252);
  v253 = (const PB::Base *)v3[6];
  if (v253)
    result = PB::Writer::writeSubmessage(this, v253);
  v254 = (const PB::Base *)v3[233];
  if (v254)
    result = PB::Writer::writeSubmessage(this, v254);
  v255 = (const PB::Base *)v3[110];
  if (v255)
    result = PB::Writer::writeSubmessage(this, v255);
  v256 = (const PB::Base *)v3[263];
  if (v256)
    result = PB::Writer::writeSubmessage(this, v256);
  v257 = (const PB::Base *)v3[262];
  if (v257)
    result = PB::Writer::writeSubmessage(this, v257);
  v258 = (const PB::Base *)v3[66];
  if (v258)
    result = PB::Writer::writeSubmessage(this, v258);
  v259 = (const PB::Base *)v3[429];
  if (v259)
    result = PB::Writer::writeSubmessage(this, v259);
  v260 = (const PB::Base *)v3[267];
  if (v260)
    result = PB::Writer::writeSubmessage(this, v260);
  v261 = (const PB::Base *)v3[383];
  if (v261)
    result = PB::Writer::writeSubmessage(this, v261);
  v262 = (const PB::Base *)v3[106];
  if (v262)
    result = PB::Writer::writeSubmessage(this, v262);
  v263 = (const PB::Base *)v3[251];
  if (v263)
    result = PB::Writer::writeSubmessage(this, v263);
  v264 = (const PB::Base *)v3[258];
  if (v264)
    result = PB::Writer::writeSubmessage(this, v264);
  v265 = (const PB::Base *)v3[385];
  if (v265)
    result = PB::Writer::writeSubmessage(this, v265);
  v266 = (const PB::Base *)v3[75];
  if (v266)
    result = PB::Writer::writeSubmessage(this, v266);
  v267 = (const PB::Base *)v3[79];
  if (v267)
    result = PB::Writer::writeSubmessage(this, v267);
  v268 = (const PB::Base *)v3[264];
  if (v268)
    result = PB::Writer::writeSubmessage(this, v268);
  v269 = (const PB::Base *)v3[244];
  if (v269)
    result = PB::Writer::writeSubmessage(this, v269);
  v270 = (const PB::Base *)v3[126];
  if (v270)
    result = PB::Writer::writeSubmessage(this, v270);
  v271 = (const PB::Base *)v3[53];
  if (v271)
    result = PB::Writer::writeSubmessage(this, v271);
  v272 = (const PB::Base *)v3[402];
  if (v272)
    result = PB::Writer::writeSubmessage(this, v272);
  v273 = (const PB::Base *)v3[378];
  if (v273)
    result = PB::Writer::writeSubmessage(this, v273);
  v274 = (const PB::Base *)v3[426];
  if (v274)
    result = PB::Writer::writeSubmessage(this, v274);
  v275 = (const PB::Base *)v3[257];
  if (v275)
    result = PB::Writer::writeSubmessage(this, v275);
  v276 = (const PB::Base *)v3[255];
  if (v276)
    result = PB::Writer::writeSubmessage(this, v276);
  v277 = (const PB::Base *)v3[265];
  if (v277)
    result = PB::Writer::writeSubmessage(this, v277);
  v278 = (const PB::Base *)v3[321];
  if (v278)
    result = PB::Writer::writeSubmessage(this, v278);
  v279 = (const PB::Base *)v3[175];
  if (v279)
    result = PB::Writer::writeSubmessage(this, v279);
  v280 = (const PB::Base *)v3[78];
  if (v280)
    result = PB::Writer::writeSubmessage(this, v280);
  v281 = (const PB::Base *)v3[36];
  if (v281)
    result = PB::Writer::writeSubmessage(this, v281);
  v282 = (const PB::Base *)v3[173];
  if (v282)
    result = PB::Writer::writeSubmessage(this, v282);
  v283 = (const PB::Base *)v3[171];
  if (v283)
    result = PB::Writer::writeSubmessage(this, v283);
  v284 = (const PB::Base *)v3[172];
  if (v284)
    result = PB::Writer::writeSubmessage(this, v284);
  v285 = (const PB::Base *)v3[170];
  if (v285)
    result = PB::Writer::writeSubmessage(this, v285);
  v286 = (const PB::Base *)v3[15];
  if (v286)
    result = PB::Writer::writeSubmessage(this, v286);
  v287 = (const PB::Base *)v3[12];
  if (v287)
    result = PB::Writer::writeSubmessage(this, v287);
  v288 = (const PB::Base *)v3[30];
  if (v288)
    result = PB::Writer::writeSubmessage(this, v288);
  v289 = (const PB::Base *)v3[390];
  if (v289)
    result = PB::Writer::writeSubmessage(this, v289);
  v290 = (const PB::Base *)v3[389];
  if (v290)
    result = PB::Writer::writeSubmessage(this, v290);
  v291 = (const PB::Base *)v3[105];
  if (v291)
    result = PB::Writer::writeSubmessage(this, v291);
  v292 = (const PB::Base *)v3[35];
  if (v292)
    result = PB::Writer::writeSubmessage(this, v292);
  v293 = (const PB::Base *)v3[138];
  if (v293)
    result = PB::Writer::writeSubmessage(this, v293);
  v294 = (const PB::Base *)v3[336];
  if (v294)
    result = PB::Writer::writeSubmessage(this, v294);
  v295 = (const PB::Base *)v3[338];
  if (v295)
    result = PB::Writer::writeSubmessage(this, v295);
  v296 = (const PB::Base *)v3[337];
  if (v296)
    result = PB::Writer::writeSubmessage(this, v296);
  v297 = (const PB::Base *)v3[451];
  if (v297)
    result = PB::Writer::writeSubmessage(this, v297);
  v298 = (const PB::Base *)v3[41];
  if (v298)
    result = PB::Writer::writeSubmessage(this, v298);
  v299 = (const PB::Base *)v3[315];
  if (v299)
    result = PB::Writer::writeSubmessage(this, v299);
  v300 = (const PB::Base *)v3[261];
  if (v300)
    result = PB::Writer::writeSubmessage(this, v300);
  v301 = (const PB::Base *)v3[260];
  if (v301)
    result = PB::Writer::writeSubmessage(this, v301);
  v302 = (const PB::Base *)v3[65];
  if (v302)
    result = PB::Writer::writeSubmessage(this, v302);
  v303 = (const PB::Base *)v3[20];
  if (v303)
    result = PB::Writer::writeSubmessage(this, v303);
  v304 = (const PB::Base *)v3[21];
  if (v304)
    result = PB::Writer::writeSubmessage(this, v304);
  v305 = (const PB::Base *)v3[19];
  if (v305)
    result = PB::Writer::writeSubmessage(this, v305);
  v306 = (const PB::Base *)v3[133];
  if (v306)
    result = PB::Writer::writeSubmessage(this, v306);
  v307 = (const PB::Base *)v3[134];
  if (v307)
    result = PB::Writer::writeSubmessage(this, v307);
  v308 = (const PB::Base *)v3[83];
  if (v308)
    result = PB::Writer::writeSubmessage(this, v308);
  v309 = (const PB::Base *)v3[413];
  if (v309)
    result = PB::Writer::writeSubmessage(this, v309);
  v310 = (const PB::Base *)v3[412];
  if (v310)
    result = PB::Writer::writeSubmessage(this, v310);
  v311 = (const PB::Base *)v3[25];
  if (v311)
    result = PB::Writer::writeSubmessage(this, v311);
  v312 = (const PB::Base *)v3[119];
  if (v312)
    result = PB::Writer::writeSubmessage(this, v312);
  v313 = (const PB::Base *)v3[120];
  if (v313)
    result = PB::Writer::writeSubmessage(this, v313);
  v314 = (const PB::Base *)v3[121];
  if (v314)
    result = PB::Writer::writeSubmessage(this, v314);
  v315 = (const PB::Base *)v3[117];
  if (v315)
    result = PB::Writer::writeSubmessage(this, v315);
  v316 = (const PB::Base *)v3[124];
  if (v316)
    result = PB::Writer::writeSubmessage(this, v316);
  v317 = (const PB::Base *)v3[17];
  if (v317)
    result = PB::Writer::writeSubmessage(this, v317);
  v318 = (const PB::Base *)v3[335];
  if (v318)
    result = PB::Writer::writeSubmessage(this, v318);
  v319 = (const PB::Base *)v3[334];
  if (v319)
    result = PB::Writer::writeSubmessage(this, v319);
  v320 = (const PB::Base *)v3[94];
  if (v320)
    result = PB::Writer::writeSubmessage(this, v320);
  v321 = (const PB::Base *)v3[118];
  if (v321)
    result = PB::Writer::writeSubmessage(this, v321);
  v322 = (const PB::Base *)v3[419];
  if (v322)
    result = PB::Writer::writeSubmessage(this, v322);
  v323 = (const PB::Base *)v3[23];
  if (v323)
    result = PB::Writer::writeSubmessage(this, v323);
  v324 = (const PB::Base *)v3[122];
  if (v324)
    result = PB::Writer::writeSubmessage(this, v324);
  v325 = (const PB::Base *)v3[147];
  if (v325)
    result = PB::Writer::writeSubmessage(this, v325);
  v326 = (const PB::Base *)v3[382];
  if (v326)
    result = PB::Writer::writeSubmessage(this, v326);
  v327 = (const PB::Base *)v3[127];
  if (v327)
    result = PB::Writer::writeSubmessage(this, v327);
  v328 = (const PB::Base *)v3[33];
  if (v328)
    result = PB::Writer::writeSubmessage(this, v328);
  v329 = (const PB::Base *)v3[358];
  if (v329)
    result = PB::Writer::writeSubmessage(this, v329);
  v330 = (const PB::Base *)v3[361];
  if (v330)
    result = PB::Writer::writeSubmessage(this, v330);
  v331 = (const PB::Base *)v3[359];
  if (v331)
    result = PB::Writer::writeSubmessage(this, v331);
  v332 = (const PB::Base *)v3[360];
  if (v332)
    result = PB::Writer::writeSubmessage(this, v332);
  v333 = (const PB::Base *)v3[366];
  if (v333)
    result = PB::Writer::writeSubmessage(this, v333);
  v334 = (const PB::Base *)v3[123];
  if (v334)
    result = PB::Writer::writeSubmessage(this, v334);
  v335 = (const PB::Base *)v3[182];
  if (v335)
    result = PB::Writer::writeSubmessage(this, v335);
  v336 = (const PB::Base *)v3[320];
  if (v336)
    result = PB::Writer::writeSubmessage(this, v336);
  v337 = (const PB::Base *)v3[249];
  if (v337)
    result = PB::Writer::writeSubmessage(this, v337);
  v338 = (const PB::Base *)v3[116];
  if (v338)
    result = PB::Writer::writeSubmessage(this, v338);
  v339 = (const PB::Base *)v3[228];
  if (v339)
    result = PB::Writer::writeSubmessage(this, v339);
  v340 = (const PB::Base *)v3[102];
  if (v340)
    result = PB::Writer::writeSubmessage(this, v340);
  v341 = (const PB::Base *)v3[100];
  if (v341)
    result = PB::Writer::writeSubmessage(this, v341);
  v342 = (const PB::Base *)v3[101];
  if (v342)
    result = PB::Writer::writeSubmessage(this, v342);
  v343 = (const PB::Base *)v3[99];
  if (v343)
    result = PB::Writer::writeSubmessage(this, v343);
  v344 = (const PB::Base *)v3[268];
  if (v344)
    result = PB::Writer::writeSubmessage(this, v344);
  v345 = (const PB::Base *)v3[191];
  if (v345)
    result = PB::Writer::writeSubmessage(this, v345);
  v346 = (const PB::Base *)v3[192];
  if (v346)
    result = PB::Writer::writeSubmessage(this, v346);
  v347 = (const PB::Base *)v3[195];
  if (v347)
    result = PB::Writer::writeSubmessage(this, v347);
  v348 = (const PB::Base *)v3[206];
  if (v348)
    result = PB::Writer::writeSubmessage(this, v348);
  v349 = (const PB::Base *)v3[221];
  if (v349)
    result = PB::Writer::writeSubmessage(this, v349);
  v350 = (const PB::Base *)v3[220];
  if (v350)
    result = PB::Writer::writeSubmessage(this, v350);
  v351 = (const PB::Base *)v3[204];
  if (v351)
    result = PB::Writer::writeSubmessage(this, v351);
  v352 = (const PB::Base *)v3[164];
  if (v352)
    result = PB::Writer::writeSubmessage(this, v352);
  v353 = (const PB::Base *)v3[163];
  if (v353)
    result = PB::Writer::writeSubmessage(this, v353);
  v354 = (const PB::Base *)v3[190];
  if (v354)
    result = PB::Writer::writeSubmessage(this, v354);
  v355 = (const PB::Base *)v3[193];
  if (v355)
    result = PB::Writer::writeSubmessage(this, v355);
  v356 = (const PB::Base *)v3[207];
  if (v356)
    result = PB::Writer::writeSubmessage(this, v356);
  v357 = (const PB::Base *)v3[208];
  if (v357)
    result = PB::Writer::writeSubmessage(this, v357);
  v358 = (const PB::Base *)v3[212];
  if (v358)
    result = PB::Writer::writeSubmessage(this, v358);
  v359 = (const PB::Base *)v3[200];
  if (v359)
    result = PB::Writer::writeSubmessage(this, v359);
  v360 = (const PB::Base *)v3[198];
  if (v360)
    result = PB::Writer::writeSubmessage(this, v360);
  v361 = (const PB::Base *)v3[213];
  if (v361)
    result = PB::Writer::writeSubmessage(this, v361);
  v362 = (const PB::Base *)v3[199];
  if (v362)
    result = PB::Writer::writeSubmessage(this, v362);
  v363 = (const PB::Base *)v3[209];
  if (v363)
    result = PB::Writer::writeSubmessage(this, v363);
  v364 = (const PB::Base *)v3[96];
  if (v364)
    result = PB::Writer::writeSubmessage(this, v364);
  v365 = (const PB::Base *)v3[403];
  if (v365)
    result = PB::Writer::writeSubmessage(this, v365);
  v366 = (const PB::Base *)v3[162];
  if (v366)
    result = PB::Writer::writeSubmessage(this, v366);
  v367 = (const PB::Base *)v3[404];
  if (v367)
    result = PB::Writer::writeSubmessage(this, v367);
  v368 = (const PB::Base *)v3[405];
  if (v368)
    result = PB::Writer::writeSubmessage(this, v368);
  v369 = (const PB::Base *)v3[341];
  if (v369)
    result = PB::Writer::writeSubmessage(this, v369);
  v370 = (const PB::Base *)v3[342];
  if (v370)
    result = PB::Writer::writeSubmessage(this, v370);
  v371 = (const PB::Base *)v3[345];
  if (v371)
    result = PB::Writer::writeSubmessage(this, v371);
  v372 = (const PB::Base *)v3[350];
  if (v372)
    result = PB::Writer::writeSubmessage(this, v372);
  v373 = (const PB::Base *)v3[348];
  if (v373)
    result = PB::Writer::writeSubmessage(this, v373);
  v374 = (const PB::Base *)v3[214];
  if (v374)
    result = PB::Writer::writeSubmessage(this, v374);
  v375 = (const PB::Base *)v3[203];
  if (v375)
    result = PB::Writer::writeSubmessage(this, v375);
  v376 = (const PB::Base *)v3[347];
  if (v376)
    result = PB::Writer::writeSubmessage(this, v376);
  v377 = (const PB::Base *)v3[181];
  if (v377)
    result = PB::Writer::writeSubmessage(this, v377);
  v378 = (const PB::Base *)v3[197];
  if (v378)
    result = PB::Writer::writeSubmessage(this, v378);
  v379 = (const PB::Base *)v3[205];
  if (v379)
    result = PB::Writer::writeSubmessage(this, v379);
  v380 = (const PB::Base *)v3[160];
  if (v380)
    result = PB::Writer::writeSubmessage(this, v380);
  v381 = (const PB::Base *)v3[74];
  if (v381)
    result = PB::Writer::writeSubmessage(this, v381);
  v382 = (const PB::Base *)v3[292];
  if (v382)
    result = PB::Writer::writeSubmessage(this, v382);
  v383 = (const PB::Base *)v3[86];
  if (v383)
    result = PB::Writer::writeSubmessage(this, v383);
  v384 = (const PB::Base *)v3[107];
  if (v384)
    result = PB::Writer::writeSubmessage(this, v384);
  v385 = (const PB::Base *)v3[400];
  if (v385)
    result = PB::Writer::writeSubmessage(this, v385);
  v386 = (const PB::Base *)v3[326];
  if (v386)
    result = PB::Writer::writeSubmessage(this, v386);
  v387 = (const PB::Base *)v3[216];
  if (v387)
    result = PB::Writer::writeSubmessage(this, v387);
  v388 = (const PB::Base *)v3[418];
  if (v388)
    result = PB::Writer::writeSubmessage(this, v388);
  v389 = (const PB::Base *)v3[196];
  if (v389)
    result = PB::Writer::writeSubmessage(this, v389);
  v390 = (const PB::Base *)v3[349];
  if (v390)
    result = PB::Writer::writeSubmessage(this, v390);
  v391 = (const PB::Base *)v3[387];
  if (v391)
    result = PB::Writer::writeSubmessage(this, v391);
  v392 = (const PB::Base *)v3[289];
  if (v392)
    result = PB::Writer::writeSubmessage(this, v392);
  v393 = (const PB::Base *)v3[237];
  if (v393)
    result = PB::Writer::writeSubmessage(this, v393);
  v394 = (const PB::Base *)v3[283];
  if (v394)
    result = PB::Writer::writeSubmessage(this, v394);
  v395 = (const PB::Base *)v3[284];
  if (v395)
    result = PB::Writer::writeSubmessage(this, v395);
  v396 = (const PB::Base *)v3[285];
  if (v396)
    result = PB::Writer::writeSubmessage(this, v396);
  v397 = (const PB::Base *)v3[270];
  if (v397)
    result = PB::Writer::writeSubmessage(this, v397);
  v398 = (const PB::Base *)v3[287];
  if (v398)
    result = PB::Writer::writeSubmessage(this, v398);
  v399 = (const PB::Base *)v3[227];
  if (v399)
    result = PB::Writer::writeSubmessage(this, v399);
  v400 = (const PB::Base *)v3[401];
  if (v400)
    result = PB::Writer::writeSubmessage(this, v400);
  v401 = (const PB::Base *)v3[279];
  if (v401)
    result = PB::Writer::writeSubmessage(this, v401);
  v402 = (const PB::Base *)v3[280];
  if (v402)
    result = PB::Writer::writeSubmessage(this, v402);
  v403 = (const PB::Base *)v3[399];
  if (v403)
    result = PB::Writer::writeSubmessage(this, v403);
  v404 = (const PB::Base *)v3[388];
  if (v404)
    result = PB::Writer::writeSubmessage(this, v404);
  v405 = (const PB::Base *)v3[103];
  if (v405)
    result = PB::Writer::writeSubmessage(this, v405);
  v406 = (const PB::Base *)v3[218];
  if (v406)
    result = PB::Writer::writeSubmessage(this, v406);
  v407 = (const PB::Base *)v3[357];
  if (v407)
    result = PB::Writer::writeSubmessage(this, v407);
  v408 = (const PB::Base *)v3[278];
  if (v408)
    result = PB::Writer::writeSubmessage(this, v408);
  v409 = (const PB::Base *)v3[272];
  if (v409)
    result = PB::Writer::writeSubmessage(this, v409);
  v410 = (const PB::Base *)v3[271];
  if (v410)
    result = PB::Writer::writeSubmessage(this, v410);
  v411 = (const PB::Base *)v3[275];
  if (v411)
    result = PB::Writer::writeSubmessage(this, v411);
  v412 = (const PB::Base *)v3[13];
  if (v412)
    result = PB::Writer::writeSubmessage(this, v412);
  v413 = (const PB::Base *)v3[286];
  if (v413)
    result = PB::Writer::writeSubmessage(this, v413);
  v414 = (const PB::Base *)v3[309];
  if (v414)
    result = PB::Writer::writeSubmessage(this, v414);
  v415 = (const PB::Base *)v3[312];
  if (v415)
    result = PB::Writer::writeSubmessage(this, v415);
  v416 = (const PB::Base *)v3[211];
  if (v416)
    result = PB::Writer::writeSubmessage(this, v416);
  v417 = (const PB::Base *)v3[313];
  if (v417)
    result = PB::Writer::writeSubmessage(this, v417);
  v418 = (const PB::Base *)v3[310];
  if (v418)
    result = PB::Writer::writeSubmessage(this, v418);
  v419 = (const PB::Base *)v3[277];
  if (v419)
    result = PB::Writer::writeSubmessage(this, v419);
  v420 = (const PB::Base *)v3[72];
  if (v420)
    result = PB::Writer::writeSubmessage(this, v420);
  v421 = (const PB::Base *)v3[276];
  if (v421)
    result = PB::Writer::writeSubmessage(this, v421);
  v422 = (const PB::Base *)v3[293];
  if (v422)
    result = PB::Writer::writeSubmessage(this, v422);
  v423 = (const PB::Base *)v3[241];
  if (v423)
    result = PB::Writer::writeSubmessage(this, v423);
  v424 = (const PB::Base *)v3[188];
  if (v424)
    result = PB::Writer::writeSubmessage(this, v424);
  v425 = (const PB::Base *)v3[189];
  if (v425)
    result = PB::Writer::writeSubmessage(this, v425);
  v426 = (const PB::Base *)v3[311];
  if (v426)
    result = PB::Writer::writeSubmessage(this, v426);
  v427 = (const PB::Base *)v3[274];
  if (v427)
    result = PB::Writer::writeSubmessage(this, v427);
  v428 = (const PB::Base *)v3[273];
  if (v428)
    result = PB::Writer::writeSubmessage(this, v428);
  v429 = (const PB::Base *)v3[202];
  if (v429)
    result = PB::Writer::writeSubmessage(this, v429);
  v430 = (const PB::Base *)v3[201];
  if (v430)
    result = PB::Writer::writeSubmessage(this, v430);
  v431 = (const PB::Base *)v3[314];
  if (v431)
    result = PB::Writer::writeSubmessage(this, v431);
  v432 = (const PB::Base *)v3[39];
  if (v432)
    result = PB::Writer::writeSubmessage(this, v432);
  v433 = (const PB::Base *)v3[113];
  if (v433)
    result = PB::Writer::writeSubmessage(this, v433);
  v434 = (const PB::Base *)v3[295];
  if (v434)
    result = PB::Writer::writeSubmessage(this, v434);
  v435 = (const PB::Base *)v3[298];
  if (v435)
    result = PB::Writer::writeSubmessage(this, v435);
  v436 = (const PB::Base *)v3[32];
  if (v436)
    result = PB::Writer::writeSubmessage(this, v436);
  v437 = (const PB::Base *)v3[31];
  if (v437)
    result = PB::Writer::writeSubmessage(this, v437);
  v438 = (const PB::Base *)v3[352];
  if (v438)
    result = PB::Writer::writeSubmessage(this, v438);
  v439 = (const PB::Base *)v3[351];
  if (v439)
    result = PB::Writer::writeSubmessage(this, v439);
  v440 = (const PB::Base *)v3[328];
  if (v440)
    result = PB::Writer::writeSubmessage(this, v440);
  v441 = (const PB::Base *)v3[329];
  if (v441)
    result = PB::Writer::writeSubmessage(this, v441);
  v442 = (const PB::Base *)v3[331];
  if (v442)
    result = PB::Writer::writeSubmessage(this, v442);
  v443 = (const PB::Base *)v3[161];
  if (v443)
    result = PB::Writer::writeSubmessage(this, v443);
  v444 = (const PB::Base *)v3[330];
  if (v444)
    result = PB::Writer::writeSubmessage(this, v444);
  v445 = (const PB::Base *)v3[42];
  if (v445)
    result = PB::Writer::writeSubmessage(this, v445);
  v446 = (const PB::Base *)v3[185];
  if (v446)
    result = PB::Writer::writeSubmessage(this, v446);
  v447 = (const PB::Base *)v3[186];
  if (v447)
    result = PB::Writer::writeSubmessage(this, v447);
  v448 = (const PB::Base *)v3[187];
  if (v448)
    result = PB::Writer::writeSubmessage(this, v448);
  v449 = (const PB::Base *)v3[353];
  if (v449)
    result = PB::Writer::writeSubmessage(this, v449);
  v450 = (const PB::Base *)v3[354];
  if (v450)
    result = PB::Writer::writeSubmessage(this, v450);
  v451 = (const PB::Base *)v3[368];
  if (v451)
    result = PB::Writer::writeSubmessage(this, v451);
  v452 = (const PB::Base *)v3[369];
  if (v452)
    result = PB::Writer::writeSubmessage(this, v452);
  v453 = (const PB::Base *)v3[179];
  if (v453)
    return PB::Writer::writeSubmessage(this, v453);
  return result;
}

_QWORD *sub_21B7FCEBC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[300])
  {
    v1 = result;
    v2 = operator new();
    sub_21B85AD0C(v2);
    result = (_QWORD *)v1[300];
    v1[300] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FCF20(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  double v3;

  if (!result[294])
  {
    v1 = result;
    v2 = operator new();
    v3 = sub_21B8580FC(v2);
    result = (_QWORD *)v1[294];
    v1[294] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, double))(*result + 8))(result, v3);
  }
  return result;
}

_QWORD *sub_21B7FCF84(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[297])
  {
    v1 = result;
    v2 = operator new();
    sub_21B859C14(v2);
    result = (_QWORD *)v1[297];
    v1[297] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FCFE8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[93])
  {
    v1 = result;
    v2 = operator new();
    sub_21B79F0DC(v2);
    result = (_QWORD *)v1[93];
    v1[93] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD04C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[426])
  {
    v1 = result;
    v2 = operator new();
    sub_21B82ABFC(v2);
    result = (_QWORD *)v1[426];
    v1[426] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD0B0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[399])
  {
    v1 = result;
    v2 = operator new();
    sub_21B817EE0(v2);
    result = (_QWORD *)v1[399];
    v1[399] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD114(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[312])
  {
    v1 = result;
    v2 = operator new();
    sub_21B85F9B8(v2);
    result = (_QWORD *)v1[312];
    v1[312] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD178(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[313])
  {
    v1 = result;
    v2 = operator new();
    sub_21B860404(v2);
    result = (_QWORD *)v1[313];
    v1[313] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD1DC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[310])
  {
    v1 = result;
    v2 = operator new();
    sub_21B85EF9C(v2);
    result = (_QWORD *)v1[310];
    v1[310] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD240(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[293])
  {
    v1 = result;
    v2 = operator new();
    sub_21B857D24(v2);
    result = (_QWORD *)v1[293];
    v1[293] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD2A4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[311])
  {
    v1 = result;
    v2 = operator new();
    sub_21B85F688(v2);
    result = (_QWORD *)v1[311];
    v1[311] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD308(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[314])
  {
    v1 = result;
    v2 = operator new();
    sub_21B860AB4(v2);
    result = (_QWORD *)v1[314];
    v1[314] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_21B7FD36C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[39])
  {
    v1 = result;
    v2 = operator new();
    sub_21B7AB094(v2);
    result = (_QWORD *)v1[39];
    v1[39] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_21B7FD3D0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF360E8;
  *(_DWORD *)(result + 208) = 0;
  return result;
}

void sub_21B7FD3E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B7FD40C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF360E8;
  *(_DWORD *)(a1 + 208) = 0;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400) != 0)
  {
    result = *(double *)(a2 + 88);
    v3 = 1024;
    *(_DWORD *)(a1 + 208) = 1024;
    *(double *)(a1 + 88) = result;
    v2 = *(_DWORD *)(a2 + 208);
    if ((v2 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 136);
    v3 |= 0x10000u;
    *(_DWORD *)(a1 + 208) = v3;
    *(double *)(a1 + 136) = result;
    v2 = *(_DWORD *)(a2 + 208);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(a1 + 208) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 208);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_32;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 192) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 200) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 176) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x8000) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 4) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x1000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x1000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_47;
  }
LABEL_46:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_48;
  }
LABEL_47:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x400000) == 0)
  {
LABEL_25:
    if ((v2 & 0x40000) == 0)
      goto LABEL_26;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x40000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 208);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 2) == 0)
      return result;
LABEL_52:
    result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 208) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_51:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 208) = v3;
  *(double *)(a1 + 72) = result;
  if ((*(_DWORD *)(a2 + 208) & 2) != 0)
    goto LABEL_52;
  return result;
}

uint64_t sub_21B7FD6E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "acceleration", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 208);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassAccelAmplitude", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "centerOfMassAccelMax", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "centripetalAccelMeanY", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "centripetalAccelMeanZ", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "position", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotationProjectedGravityAmplitude", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotationRateMean", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotationRateMeanX", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "swingAccelAmplitudeY", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "swingAccelAmplitudeZ", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "swingAccelMaxY", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "swingAccelMaxZ", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelAmplitudeZ", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelMaxX", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelMaxY", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelMean", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "userAccelMeanY", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
LABEL_51:
    PB::TextFormatter::format(this, "velocity", *(double *)(a1 + 192));
    if ((*(_DWORD *)(a1 + 208) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_26;
  }
LABEL_50:
  PB::TextFormatter::format(this, "userAccelProjectedGravityAmplitudeCadence", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800000) != 0)
    goto LABEL_51;
LABEL_25:
  if ((v5 & 0x1000000) != 0)
LABEL_26:
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7FDA34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 208) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 2u:
          *(_DWORD *)(a1 + 208) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 3u:
          *(_DWORD *)(a1 + 208) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 4u:
          *(_DWORD *)(a1 + 208) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 5u:
          *(_DWORD *)(a1 + 208) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 6u:
          *(_DWORD *)(a1 + 208) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 7u:
          *(_DWORD *)(a1 + 208) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 8u:
          *(_DWORD *)(a1 + 208) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 9u:
          *(_DWORD *)(a1 + 208) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xAu:
          *(_DWORD *)(a1 + 208) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xBu:
          *(_DWORD *)(a1 + 208) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xCu:
          *(_DWORD *)(a1 + 208) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xDu:
          *(_DWORD *)(a1 + 208) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xEu:
          *(_DWORD *)(a1 + 208) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0xFu:
          *(_DWORD *)(a1 + 208) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x10u:
          *(_DWORD *)(a1 + 208) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x11u:
          *(_DWORD *)(a1 + 208) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x12u:
          *(_DWORD *)(a1 + 208) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x13u:
          *(_DWORD *)(a1 + 208) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x14u:
          *(_DWORD *)(a1 + 208) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x15u:
          *(_DWORD *)(a1 + 208) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x16u:
          *(_DWORD *)(a1 + 208) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x17u:
          *(_DWORD *)(a1 + 208) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x18u:
          *(_DWORD *)(a1 + 208) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_96;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_100;
        case 0x19u:
          *(_DWORD *)(a1 + 208) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_100:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_96:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7FE128(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 208);
  if ((v4 & 0x400) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 88));
    v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 208) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_21B7FE408(_QWORD *result)
{
  *result = &off_24DF36120;
  result[1] = 0;
  return result;
}

void sub_21B7FE418(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36120;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7FE458(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36120;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7FE4AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF36120;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B79EC94(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B7FE528(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7FE578(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B79F0DC(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7FE740(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B7FE75C(_QWORD *result)
{
  *result = &off_24DF36158;
  result[1] = 0;
  return result;
}

void sub_21B7FE76C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7FE7AC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B7FE800(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF36158;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B843D98(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B7FE87C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7FE8CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        sub_21B843808(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7FEA94(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B7FEAB0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36190;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7FEAC8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7FEAEC(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF36190;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B7FEB3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "code");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7FEBA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7FEECC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7FEF24(uint64_t result)
{
  *(_QWORD *)result = &off_24DF361C8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B7FEF3C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7FEF60(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_24DF361C8;
  *(_DWORD *)(result + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 24) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 24) = v3 | 2;
    *(_DWORD *)(result + 16) = v6;
  }
  return result;
}

uint64_t sub_21B7FEFD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "dramDurationMs");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "vehicularFlags");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7FF060(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_80;
            }
            v46 = v27++;
            v47 = *(_BYTE *)(v28 + v46);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_79:
          v3 = v46 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v33 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v34 = *(_QWORD *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_85;
            }
            v50 = v33++;
            v51 = *(_BYTE *)(v34 + v50);
            *((_QWORD *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v37) = 0;
LABEL_84:
          v3 = v50 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)this + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *(_DWORD *)(a1 + 20) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_75;
            }
            v42 = v21++;
            v43 = *(_BYTE *)(v22 + v42);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              v25 = 0;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
LABEL_74:
          v3 = v42 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              v25 = 0;
              break;
            }
          }
        }
LABEL_75:
        *(_QWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7FF47C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B7FF4F4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36200;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B7FF50C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7FF530(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)result = &off_24DF36200;
  *(_DWORD *)(result + 52) = 0;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_DWORD *)(a2 + 44);
    v3 = 32;
    *(_BYTE *)(result + 52) = 32;
    *(_DWORD *)(result + 44) = v4;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 0x40) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 48) = v5;
    v2 = *(_BYTE *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x10u;
    *(_BYTE *)(result + 52) = v3;
    *(_DWORD *)(result + 40) = v6;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      return result;
LABEL_16:
    v10 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(result + 52) = v3 | 2;
    *(_QWORD *)(result + 16) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(result + 52) = v3;
  *(_QWORD *)(result + 24) = v9;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B7FF610(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "createdAtTimestamp");
    v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochNumber");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "epochTimestamp");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "lastRealTriggerTimestamp");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "receivedAtTimestamp");
    if ((*(_BYTE *)(a1 + 52) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "mode");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "sessionNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7FF720(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  uint64_t result;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v64 = 0;
                v65 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v66 = v21++;
                  v67 = *(_BYTE *)(v22 + v66);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0)
                    break;
                  v64 += 7;
                  v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
LABEL_134:
                v3 = v66 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v3 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_135;
                  v23 += 7;
                  v21 = v3;
                  v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *(_DWORD *)(a1 + 44) = v25;
              goto LABEL_166;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v72 = 0;
                v73 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v74 = v33++;
                  v75 = *(_BYTE *)(v34 + v74);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0)
                    break;
                  v72 += 7;
                  v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_144;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_145;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_166;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v76 = 0;
                v77 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v78 = v39++;
                  v79 = *(_BYTE *)(v40 + v78);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0)
                    break;
                  v76 += 7;
                  v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_149;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_150;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_166;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 8u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v82 = v45++;
                  v83 = *(_BYTE *)(v46 + v82);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_154:
                    v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_154;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_155;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_155:
              *(_QWORD *)(a1 + 32) = v49;
              goto LABEL_166;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v84 = 0;
                v85 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  v86 = v51++;
                  v87 = *(_BYTE *)(v52 + v86);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0)
                    break;
                  v84 += 7;
                  v14 = v85++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_159:
                    v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_159;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_160;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_160:
              *(_QWORD *)(a1 + 8) = v55;
              goto LABEL_166;
            default:
              if ((_DWORD)v20 == 100)
              {
                *(_BYTE *)(a1 + 52) |= 4u;
                v57 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v58 = *(_QWORD *)this;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  v88 = 0;
                  v89 = 0;
                  v61 = 0;
                  if (v2 <= v57)
                    v3 = *((_QWORD *)this + 1);
                  else
                    v3 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      v61 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_165;
                    }
                    v90 = v57++;
                    v91 = *(_BYTE *)(v58 + v90);
                    *((_QWORD *)this + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v14 = v89++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v61 = 0;
LABEL_164:
                  v3 = v90 + 1;
                }
                else
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  while (1)
                  {
                    v3 = v57 + 1;
                    *((_QWORD *)this + 1) = v57 + 1;
                    v62 = *(_BYTE *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0)
                      break;
                    v59 += 7;
                    v57 = v3;
                    v14 = v60++ > 8;
                    if (v14)
                    {
                      v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *(_QWORD *)(a1 + 24) = v61;
              }
              else if ((_DWORD)v20 == 101)
              {
                *(_BYTE *)(a1 + 52) |= 2u;
                v27 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v28 = *(_QWORD *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v68 = 0;
                  v69 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v3 = *((_QWORD *)this + 1);
                  else
                    v3 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_140;
                    }
                    v70 = v27++;
                    v71 = *(_BYTE *)(v28 + v70);
                    *((_QWORD *)this + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0)
                      break;
                    v68 += 7;
                    v14 = v69++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v31 = 0;
LABEL_139:
                  v3 = v70 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v3 = v27 + 1;
                    *((_QWORD *)this + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v3;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *(_QWORD *)(a1 + 16) = v31;
              }
              else
              {
                result = PB::Reader::skip(this);
                if (!(_DWORD)result)
                  return result;
                v3 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
              }
LABEL_166:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7FFF08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B7FFFF0(_QWORD *result)
{
  *result = &off_24DF36238;
  *(_QWORD *)((char *)result + 188) = 0;
  return result;
}

void sub_21B800008(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B80002C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  char v39;
  int v40;

  *(_QWORD *)result = &off_24DF36238;
  *(_QWORD *)(result + 188) = 0;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_QWORD *)(result + 188) = 256;
    *(_QWORD *)(result + 72) = v4;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 116);
    v3 |= 0x40000uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_DWORD *)(result + 116) = v5;
    v2 = *(_QWORD *)(a2 + 188);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8uLL;
    *(_QWORD *)(result + 188) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_QWORD *)(a2 + 188);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 96);
  v3 |= 0x2000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 96) = v7;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *(_DWORD *)(a2 + 128);
  v3 |= 0x200000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 128) = v8;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *(_DWORD *)(a2 + 112);
  v3 |= 0x20000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 112) = v9;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 24) = v10;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *(_DWORD *)(a2 + 104);
  v3 |= 0x8000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 104) = v11;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  v12 = *(_DWORD *)(a2 + 124);
  v3 |= 0x100000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 124) = v12;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  v13 = *(_DWORD *)(a2 + 120);
  v3 |= 0x80000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 120) = v13;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  v14 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 40) = v14;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  v15 = *(_DWORD *)(a2 + 100);
  v3 |= 0x4000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 100) = v15;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  v16 = *(_DWORD *)(a2 + 108);
  v3 |= 0x10000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 108) = v16;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  v17 = *(_DWORD *)(a2 + 152);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 152) = v17;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  v18 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 56) = v18;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  v19 = *(_DWORD *)(a2 + 132);
  v3 |= 0x400000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 132) = v19;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v20 = *(_DWORD *)(a2 + 164);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 164) = v20;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  v21 = *(_DWORD *)(a2 + 148);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 148) = v21;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20) == 0)
  {
LABEL_23:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v22 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 48) = v22;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v23 = *(_DWORD *)(a2 + 140);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 140) = v23;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  v24 = *(_DWORD *)(a2 + 160);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 160) = v24;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  v25 = *(_DWORD *)(a2 + 156);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 156) = v25;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  v26 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 64) = v26;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  v27 = *(_DWORD *)(a2 + 136);
  v3 |= 0x800000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 136) = v27;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v28 = *(_DWORD *)(a2 + 144);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 144) = v28;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  v29 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 84) = v29;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  v30 = *(_DWORD *)(a2 + 92);
  v3 |= 0x1000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 92) = v30;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800) == 0)
  {
LABEL_32:
    if ((v2 & 2) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  v31 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 88) = v31;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 2) == 0)
  {
LABEL_33:
    if ((v2 & 1) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  v32 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 16) = v32;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 1) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v33 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_QWORD *)(result + 8) = v33;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  v34 = *(_DWORD *)(a2 + 172);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 172) = v34;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v35 = *(_DWORD *)(a2 + 180);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 180) = v35;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  v36 = *(_DWORD *)(a2 + 176);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 176) = v36;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  v37 = *(_DWORD *)(a2 + 168);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_DWORD *)(result + 168) = v37;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v38 = *(_BYTE *)(a2 + 184);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 184) = v38;
  v2 = *(_QWORD *)(a2 + 188);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_76:
    v40 = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(result + 188) = v3 | 0x200;
    *(_DWORD *)(result + 80) = v40;
    return result;
  }
LABEL_75:
  v39 = *(_BYTE *)(a2 + 185);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(result + 188) = v3;
  *(_BYTE *)(result + 185) = v39;
  if ((*(_QWORD *)(a2 + 188) & 0x200) != 0)
    goto LABEL_76;
  return result;
}

uint64_t sub_21B800454(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "dramDuration");
    v5 = *(_QWORD *)(a1 + 188);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochMaxTimestamp");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "epochMinTimestamp");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "numPointsInEpoch");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numShortAudio");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "planarChaosAtMaxEnergy", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "planarChaosAtMaxSaturation", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "planarEnergyAtMaxChaos", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "planarEnergyAtMaxSaturation", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "planarMaxChaos", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "planarMaxEnergy", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "planarMaxSaturation", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "planarPassThru");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "planarSaturationAtMaxChaos", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "planarSaturationAtMaxEnergy", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "planarTimestampAtMaxChaos");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "planarTimestampAtMaxEnergy");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "planarTimestampAtMaxSaturation");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rolloverChaosAtMaxEnergy", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rolloverChaosAtMaxSaturation", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rolloverEnergyAtMaxChaos", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rolloverEnergyAtMaxSaturation", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rolloverMaxChaos", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "rolloverMaxEnergy", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rolloverMaxSaturation", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "rolloverPassThru");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "rolloverSaturationAtMaxChaos", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "rolloverSaturationAtMaxEnergy", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxChaos");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 0x80) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxEnergy");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxSaturation");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "soundEnvelopeCount", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "soundMaxMeanOverArmSession", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(this, "soundMeanLast15s", *(float *)(a1 + 180));
    if ((*(_QWORD *)(a1 + 188) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(this, "soundMeanCurrentWindow", *(float *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x100) != 0)
LABEL_38:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B800924(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  BOOL v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  BOOL v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 188) |= 0x100uLL;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v148 = 0;
            v149 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                v25 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_279;
              }
              v150 = v20 + 1;
              v151 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v150;
              v25 |= (unint64_t)(v151 & 0x7F) << v148;
              if ((v151 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_279;
              }
              v148 += 7;
              v20 = v150;
              v14 = v149++ > 8;
            }
            while (!v14);
LABEL_187:
            v25 = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_187;
            }
          }
LABEL_279:
          *(_QWORD *)(a1 + 72) = v25;
          goto LABEL_271;
        case 2u:
          *(_QWORD *)(a1 + 188) |= 0x40000uLL;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_270;
        case 3u:
          *(_QWORD *)(a1 + 188) |= 8uLL;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          v32 = *(_QWORD *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)this + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_283;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_194:
            v35 = 0;
            goto LABEL_283;
          }
          v152 = 0;
          v153 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v31 == v30)
            {
              v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v154 = v30 + 1;
              v155 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)this + 1) = v154;
              v35 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v30 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_194;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v35 = 0;
            }
            break;
          }
LABEL_283:
          *(_QWORD *)(a1 + 32) = v35;
          goto LABEL_271;
        case 4u:
          *(_QWORD *)(a1 + 188) |= 0x2000uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_270;
        case 5u:
          *(_QWORD *)(a1 + 188) |= 0x200000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_270;
        case 6u:
          *(_QWORD *)(a1 + 188) |= 0x20000uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_270;
        case 7u:
          *(_QWORD *)(a1 + 188) |= 4uLL;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_287;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_201:
            v46 = 0;
            goto LABEL_287;
          }
          v156 = 0;
          v157 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              v46 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v158 = v41 + 1;
              v159 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v158;
              v46 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v41 = v158;
                v14 = v157++ > 8;
                if (v14)
                  goto LABEL_201;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v46 = 0;
            }
            break;
          }
LABEL_287:
          *(_QWORD *)(a1 + 24) = v46;
          goto LABEL_271;
        case 8u:
          *(_QWORD *)(a1 + 188) |= 0x8000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_270;
        case 9u:
          *(_QWORD *)(a1 + 188) |= 0x100000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_270;
        case 0xAu:
          *(_QWORD *)(a1 + 188) |= 0x80000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_270;
        case 0xBu:
          *(_QWORD *)(a1 + 188) |= 0x10uLL;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          v54 = *(_QWORD *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)this + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_291;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_208:
            v57 = 0;
            goto LABEL_291;
          }
          v160 = 0;
          v161 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v162 = v52 + 1;
              v163 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)this + 1) = v162;
              v57 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                v52 = v162;
                v14 = v161++ > 8;
                if (v14)
                  goto LABEL_208;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v57 = 0;
            }
            break;
          }
LABEL_291:
          *(_QWORD *)(a1 + 40) = v57;
          goto LABEL_271;
        case 0xCu:
          *(_QWORD *)(a1 + 188) |= 0x4000uLL;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_270;
        case 0xDu:
          *(_QWORD *)(a1 + 188) |= 0x10000uLL;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v61);
          goto LABEL_270;
        case 0xEu:
          *(_QWORD *)(a1 + 188) |= 0x8000000uLL;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v62);
          goto LABEL_270;
        case 0xFu:
          *(_QWORD *)(a1 + 188) |= 0x40uLL;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          v65 = *(_QWORD *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_295;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_215:
            v68 = 0;
            goto LABEL_295;
          }
          v164 = 0;
          v165 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v64 == v63)
            {
              v68 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v166 = v63 + 1;
              v167 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)this + 1) = v166;
              v68 |= (unint64_t)(v167 & 0x7F) << v164;
              if (v167 < 0)
              {
                v164 += 7;
                v63 = v166;
                v14 = v165++ > 8;
                if (v14)
                  goto LABEL_215;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v68 = 0;
            }
            break;
          }
LABEL_295:
          *(_QWORD *)(a1 + 56) = v68;
          goto LABEL_271;
        case 0x10u:
          *(_QWORD *)(a1 + 188) |= 0x400000uLL;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v71);
          goto LABEL_270;
        case 0x11u:
          *(_QWORD *)(a1 + 188) |= 0x40000000uLL;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v72);
          goto LABEL_270;
        case 0x12u:
          *(_QWORD *)(a1 + 188) |= 0x4000000uLL;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_270;
        case 0x13u:
          *(_QWORD *)(a1 + 188) |= 0x20uLL;
          v74 = *((_QWORD *)this + 1);
          v75 = *((_QWORD *)this + 2);
          v76 = *(_QWORD *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)this + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_299;
              v77 += 7;
              v74 = v80;
              v14 = v78++ > 8;
            }
            while (!v14);
LABEL_222:
            v79 = 0;
            goto LABEL_299;
          }
          v168 = 0;
          v169 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v75 == v74)
            {
              v79 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v170 = v74 + 1;
              v171 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)this + 1) = v170;
              v79 |= (unint64_t)(v171 & 0x7F) << v168;
              if (v171 < 0)
              {
                v168 += 7;
                v74 = v170;
                v14 = v169++ > 8;
                if (v14)
                  goto LABEL_222;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v79 = 0;
            }
            break;
          }
LABEL_299:
          *(_QWORD *)(a1 + 48) = v79;
          goto LABEL_271;
        case 0x14u:
          *(_QWORD *)(a1 + 188) |= 0x1000000uLL;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v82);
          goto LABEL_270;
        case 0x15u:
          *(_QWORD *)(a1 + 188) |= 0x20000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_270;
        case 0x16u:
          *(_QWORD *)(a1 + 188) |= 0x10000000uLL;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_270;
        case 0x17u:
          *(_QWORD *)(a1 + 188) |= 0x80uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_303;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_229:
            v90 = 0;
            goto LABEL_303;
          }
          v172 = 0;
          v173 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              v90 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v174 = v85 + 1;
              v175 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v174;
              v90 |= (unint64_t)(v175 & 0x7F) << v172;
              if (v175 < 0)
              {
                v172 += 7;
                v85 = v174;
                v14 = v173++ > 8;
                if (v14)
                  goto LABEL_229;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v90 = 0;
            }
            break;
          }
LABEL_303:
          *(_QWORD *)(a1 + 64) = v90;
          goto LABEL_271;
        case 0x18u:
          *(_QWORD *)(a1 + 188) |= 0x800000uLL;
          v93 = *((_QWORD *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v93);
          goto LABEL_270;
        case 0x19u:
          *(_QWORD *)(a1 + 188) |= 0x2000000uLL;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v94);
          goto LABEL_270;
        case 0x1Au:
          *(_QWORD *)(a1 + 188) |= 0x400uLL;
          v95 = *((_QWORD *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v95);
          goto LABEL_270;
        case 0x1Bu:
          *(_QWORD *)(a1 + 188) |= 0x1000uLL;
          v96 = *((_QWORD *)this + 1);
          v97 = *((_QWORD *)this + 2);
          v98 = *(_QWORD *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            v99 = 0;
            v100 = 0;
            v101 = 0;
            do
            {
              v102 = v96 + 1;
              *((_QWORD *)this + 1) = v96 + 1;
              v103 = *(_BYTE *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0)
                goto LABEL_307;
              v99 += 7;
              v96 = v102;
              v14 = v100++ > 8;
            }
            while (!v14);
LABEL_236:
            LODWORD(v101) = 0;
            goto LABEL_307;
          }
          v176 = 0;
          v177 = 0;
          v101 = 0;
          if (v97 <= v96)
            v97 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v178 = v96 + 1;
              v179 = *(_BYTE *)(v98 + v96);
              *((_QWORD *)this + 1) = v178;
              v101 |= (unint64_t)(v179 & 0x7F) << v176;
              if (v179 < 0)
              {
                v176 += 7;
                v96 = v178;
                v14 = v177++ > 8;
                if (v14)
                  goto LABEL_236;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v101) = 0;
            }
            break;
          }
LABEL_307:
          *(_DWORD *)(a1 + 92) = v101;
          goto LABEL_271;
        case 0x1Cu:
          *(_QWORD *)(a1 + 188) |= 0x800uLL;
          v104 = *((_QWORD *)this + 1);
          v105 = *((_QWORD *)this + 2);
          v106 = *(_QWORD *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)this + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_311;
              v107 += 7;
              v104 = v110;
              v14 = v108++ > 8;
            }
            while (!v14);
LABEL_243:
            LODWORD(v109) = 0;
            goto LABEL_311;
          }
          v180 = 0;
          v181 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v182 = v104 + 1;
              v183 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)this + 1) = v182;
              v109 |= (unint64_t)(v183 & 0x7F) << v180;
              if (v183 < 0)
              {
                v180 += 7;
                v104 = v182;
                v14 = v181++ > 8;
                if (v14)
                  goto LABEL_243;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v109) = 0;
            }
            break;
          }
LABEL_311:
          *(_DWORD *)(a1 + 88) = v109;
          goto LABEL_271;
        case 0x1Du:
          *(_QWORD *)(a1 + 188) |= 2uLL;
          v112 = *((_QWORD *)this + 1);
          v113 = *((_QWORD *)this + 2);
          v114 = *(_QWORD *)this;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            v115 = 0;
            v116 = 0;
            v117 = 0;
            do
            {
              v118 = v112 + 1;
              *((_QWORD *)this + 1) = v112 + 1;
              v119 = *(_BYTE *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0)
                goto LABEL_315;
              v115 += 7;
              v112 = v118;
              v14 = v116++ > 8;
            }
            while (!v14);
LABEL_250:
            v117 = 0;
            goto LABEL_315;
          }
          v184 = 0;
          v185 = 0;
          v117 = 0;
          if (v113 <= v112)
            v113 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v113 == v112)
            {
              v117 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v186 = v112 + 1;
              v187 = *(_BYTE *)(v114 + v112);
              *((_QWORD *)this + 1) = v186;
              v117 |= (unint64_t)(v187 & 0x7F) << v184;
              if (v187 < 0)
              {
                v184 += 7;
                v112 = v186;
                v14 = v185++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v117 = 0;
            }
            break;
          }
LABEL_315:
          *(_QWORD *)(a1 + 16) = v117;
          goto LABEL_271;
        case 0x1Eu:
          *(_QWORD *)(a1 + 188) |= 1uLL;
          v120 = *((_QWORD *)this + 1);
          v121 = *((_QWORD *)this + 2);
          v122 = *(_QWORD *)this;
          if (v120 <= 0xFFFFFFFFFFFFFFF5 && v120 + 10 <= v121)
          {
            v123 = 0;
            v124 = 0;
            v125 = 0;
            do
            {
              v126 = v120 + 1;
              *((_QWORD *)this + 1) = v120 + 1;
              v127 = *(_BYTE *)(v122 + v120);
              v125 |= (unint64_t)(v127 & 0x7F) << v123;
              if ((v127 & 0x80) == 0)
                goto LABEL_319;
              v123 += 7;
              v120 = v126;
              v14 = v124++ > 8;
            }
            while (!v14);
LABEL_257:
            v125 = 0;
            goto LABEL_319;
          }
          v188 = 0;
          v189 = 0;
          v125 = 0;
          if (v121 <= v120)
            v121 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v121 == v120)
            {
              v125 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v190 = v120 + 1;
              v191 = *(_BYTE *)(v122 + v120);
              *((_QWORD *)this + 1) = v190;
              v125 |= (unint64_t)(v191 & 0x7F) << v188;
              if (v191 < 0)
              {
                v188 += 7;
                v120 = v190;
                v14 = v189++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v125 = 0;
            }
            break;
          }
LABEL_319:
          *(_QWORD *)(a1 + 8) = v125;
          goto LABEL_271;
        case 0x1Fu:
          *(_QWORD *)(a1 + 188) |= 0x100000000uLL;
          v128 = *((_QWORD *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v128);
          goto LABEL_270;
        case 0x20u:
          *(_QWORD *)(a1 + 188) |= 0x400000000uLL;
          v129 = *((_QWORD *)this + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v129);
          goto LABEL_270;
        case 0x21u:
          *(_QWORD *)(a1 + 188) |= 0x200000000uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_270;
        case 0x22u:
          *(_QWORD *)(a1 + 188) |= 0x80000000uLL;
          v131 = *((_QWORD *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v131);
LABEL_270:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_169:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_271;
        case 0x23u:
          *(_QWORD *)(a1 + 188) |= 0x800000000uLL;
          v132 = *((_QWORD *)this + 1);
          if (v132 >= *((_QWORD *)this + 2))
          {
            v135 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v133 = v132 + 1;
            v134 = *(unsigned __int8 *)(*(_QWORD *)this + v132);
            *((_QWORD *)this + 1) = v133;
            v135 = v134 != 0;
          }
          *(_BYTE *)(a1 + 184) = v135;
          goto LABEL_271;
        case 0x24u:
          *(_QWORD *)(a1 + 188) |= 0x1000000000uLL;
          v136 = *((_QWORD *)this + 1);
          if (v136 >= *((_QWORD *)this + 2))
          {
            v139 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v137 = v136 + 1;
            v138 = *(unsigned __int8 *)(*(_QWORD *)this + v136);
            *((_QWORD *)this + 1) = v137;
            v139 = v138 != 0;
          }
          *(_BYTE *)(a1 + 185) = v139;
          goto LABEL_271;
        case 0x25u:
          *(_QWORD *)(a1 + 188) |= 0x200uLL;
          v140 = *((_QWORD *)this + 1);
          v141 = *((_QWORD *)this + 2);
          v142 = *(_QWORD *)this;
          if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
          {
            v143 = 0;
            v144 = 0;
            v145 = 0;
            do
            {
              v146 = v140 + 1;
              *((_QWORD *)this + 1) = v140 + 1;
              v147 = *(_BYTE *)(v142 + v140);
              v145 |= (unint64_t)(v147 & 0x7F) << v143;
              if ((v147 & 0x80) == 0)
                goto LABEL_323;
              v143 += 7;
              v140 = v146;
              v14 = v144++ > 8;
            }
            while (!v14);
LABEL_268:
            LODWORD(v145) = 0;
            goto LABEL_323;
          }
          v192 = 0;
          v193 = 0;
          v145 = 0;
          if (v141 <= v140)
            v141 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_271;
      }
      while (1)
      {
        if (v141 == v140)
        {
          LODWORD(v145) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_323;
        }
        v194 = v140 + 1;
        v195 = *(_BYTE *)(v142 + v140);
        *((_QWORD *)this + 1) = v194;
        v145 |= (unint64_t)(v195 & 0x7F) << v192;
        if ((v195 & 0x80) == 0)
          break;
        v192 += 7;
        v140 = v194;
        v14 = v193++ > 8;
        if (v14)
          goto LABEL_268;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v145) = 0;
LABEL_323:
      *(_DWORD *)(a1 + 80) = v145;
LABEL_271:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B801B14(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 188);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 1) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 180));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_74:
  result = PB::Writer::write(this);
  if ((*(_QWORD *)(v3 + 188) & 0x200) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B801F44(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36270;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B801F5C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B801F80(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)a1 = &off_24DF36270;
  *(_DWORD *)(a1 + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 2) != 0)
  {
    result = *(float *)(a2 + 12);
    v3 = 2;
    *(_BYTE *)(a1 + 20) = 2;
    *(float *)(a1 + 12) = result;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 20) = v3;
    *(float *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = v3 | 4;
    *(float *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_21B801FF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "elevationDeg", *(float *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "azimuthDeg", *(float *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "l1Cn0", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B802080(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_37;
        }
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
        {
LABEL_32:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_37;
        }
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B802298(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 12));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 20) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_21B802310(uint64_t result)
{
  *(_QWORD *)result = &off_24DF362A8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B802328(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B80234C(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF362A8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B80239C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "sessionType");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B802404(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B802690(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B8026E8(_QWORD *result)
{
  *result = &off_24DF362E0;
  result[1] = 0;
  return result;
}

void sub_21B8026FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B802720(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_24DF362E0;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B802748(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B802794(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8029C8(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B8029E8(_QWORD *result)
{
  *result = &off_24DF36318;
  result[2] = 0;
  return result;
}

void sub_21B802A00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B802A24(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF36318;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B802A74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B802ADC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B802E04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B802E5C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36350;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B802E70(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36350;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B802EB0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36350;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B802F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24DF36350;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v4;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v5 = operator new();
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)v5 = &off_24DF36388;
    *(_DWORD *)(v5 + 12) = 0;
    if ((*(_BYTE *)(v6 + 12) & 1) != 0)
    {
      v7 = *(_DWORD *)(v6 + 8);
      *(_BYTE *)(v5 + 12) = 1;
      *(_DWORD *)(v5 + 8) = v7;
    }
    v8 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t sub_21B802FC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "motionState");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80302C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v28 = (_DWORD *)operator new();
        *(_QWORD *)v28 = &off_24DF36388;
        v28[3] = 0;
        v29 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v28 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v28 + 16))(v28, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v31 = 0;
          v32 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v33 = v20 + 1;
            v34 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v33;
            v25 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v20 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            v25 = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 16) = v25;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8032F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
    return PB::Writer::writeSubmessage(this, v4);
  return result;
}

void sub_21B803350(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B803374(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8033C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8035F4(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B803614(uint64_t result)
{
  *(_QWORD *)result = &off_24DF363C0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B80362C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B803650(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF363C0;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return *(float *)&v4;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_BYTE *)(a1 + 44) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  if ((*(_BYTE *)(a2 + 44) & 0x20) == 0)
    return *(float *)&v4;
LABEL_18:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 44) = v3 | 0x20;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B80374C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "magnitudeRangeInertialVertical", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "maxAngleBetweenThighAndShinDeg", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "minAngleBetweenThighAndShinDeg", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "motionPlanarity", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeToReachMaxThighAndShinAngleThreshold", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "vm", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "timeToReachMinThighAndShinAngleThreshold", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80387C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_49:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_50:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B803BC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 32));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 32));
  return result;
}

uint64_t sub_21B803CC4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF363F8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B803CDC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B803D00(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF363F8;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    if ((*(_BYTE *)(a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B803D8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B803E3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8040A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_21B804134(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36430;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B80414C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B804170(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF36430;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 24) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    if ((*(_BYTE *)(a2 + 28) & 4) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 4) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 28) = v3 | 4;
  *(_DWORD *)(a1 + 20) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B8041FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8042AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B804510(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

_QWORD *sub_21B8045A4(_QWORD *result)
{
  *result = &off_24DF36468;
  result[2] = 0;
  return result;
}

void sub_21B8045BC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8045E0(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF36468;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B804630(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "transitionType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B804698(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B804924(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B80497C(uint64_t result)
{
  *(_QWORD *)result = off_24DF364A0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B804998(void **a1)
{
  void **v2;

  *a1 = off_24DF364A0;
  v2 = a1 + 2;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B8049E0(void **a1)
{
  void **v3;

  *a1 = off_24DF364A0;
  v3 = a1 + 2;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

uint64_t sub_21B804A3C(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_24DF364A0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v5 = *(uint64_t **)(a2 + 16);
  v6 = *(uint64_t **)(a2 + 24);
  while (v5 != v6)
    sub_21B804AE8(v4, *v5++);
  v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
    v7 = *(_BYTE *)(a2 + 48);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 8) = v9;
  }
  return a1;
}

uint64_t sub_21B804AE8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B80516C(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B804C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B804C3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B804CE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_33;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v24);
LABEL_37:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_38;
      }
      if ((_DWORD)v21 == 1)
      {
        sub_21B804F28(v8);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
LABEL_38:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v23 = *((_QWORD *)this + 1);
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v23);
    goto LABEL_37;
  }
  return v4 == 0;
}

uint64_t sub_21B804F28(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF364D8;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 36) = 0;
  *(_DWORD *)(v2 + 44) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B805068(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B805084(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 16);
  v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

void sub_21B805108(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF364D8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B805148(PB::Base *a1)
{
  sub_21B805108(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B80516C(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  char v6;
  int v7;
  char v8;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_24DF364D8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
    v5 = *(_DWORD *)(a2 + 36);
    *(_BYTE *)(a1 + 44) = 2;
    *(_DWORD *)(a1 + 36) = v5;
  }
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v6 = *(_BYTE *)(a2 + 44);
  if ((v6 & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 32) = v7;
    v6 = *(_BYTE *)(a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    v8 = *(_BYTE *)(a2 + 40);
    *(_BYTE *)(a1 + 44) |= 4u;
    *(_BYTE *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_21B805218(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 44);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "joint");
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "position", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 4) != 0)
    PB::TextFormatter::format(this, "visible");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8052D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  unint64_t v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v22 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          v24 = *(_QWORD *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)this + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_83;
              v25 += 7;
              v22 = v28;
              v16 = v26++ > 8;
            }
            while (!v16);
LABEL_67:
            LODWORD(v27) = 0;
            goto LABEL_83;
          }
          v49 = 0;
          v50 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v51 = v22 + 1;
              v52 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)this + 1) = v51;
              v27 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                v22 = v51;
                v16 = v50++ > 8;
                if (v16)
                  goto LABEL_67;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v27) = 0;
            }
            break;
          }
LABEL_83:
          *(_DWORD *)(a1 + 36) = v27;
          goto LABEL_97;
        case 2u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v30 = *((_QWORD *)this + 1);
            v31 = *((_QWORD *)this + 2);
            while (v30 < v31 && !*((_BYTE *)this + 24))
            {
              v33 = *(char **)(a1 + 16);
              v32 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                v35 = (char *)*v8;
                v36 = (v33 - (_BYTE *)*v8) >> 2;
                v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 62)
                  goto LABEL_107;
                v38 = v32 - (_QWORD)v35;
                if (v38 >> 1 > v37)
                  v37 = v38 >> 1;
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                  v39 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v39 = v37;
                if (v39)
                {
                  v40 = (char *)sub_21B796CD8(v9, v39);
                  v35 = *(char **)(a1 + 8);
                  v33 = *(char **)(a1 + 16);
                }
                else
                {
                  v40 = 0;
                }
                v41 = &v40[4 * v36];
                *(_DWORD *)v41 = 0;
                v34 = v41 + 4;
                while (v33 != v35)
                {
                  v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v41;
                *(_QWORD *)(a1 + 16) = v34;
                *(_QWORD *)(a1 + 24) = &v40[4 * v39];
                if (v35)
                  operator delete(v35);
              }
              else
              {
                *(_DWORD *)v33 = 0;
                v34 = v33 + 4;
              }
              *(_QWORD *)(a1 + 16) = v34;
              v43 = *((_QWORD *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v34 - 1) = *(_DWORD *)(*(_QWORD *)this + v43);
              v31 = *((_QWORD *)this + 2);
              v30 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v30;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v54 = *(char **)(a1 + 16);
            v53 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v54 >= v53)
            {
              v56 = (char *)*v8;
              v57 = (v54 - (_BYTE *)*v8) >> 2;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62)
LABEL_107:
                sub_21B796A0C();
              v59 = v53 - (_QWORD)v56;
              if (v59 >> 1 > v58)
                v58 = v59 >> 1;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
                v60 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                v61 = (char *)sub_21B796CD8(v9, v60);
                v56 = *(char **)(a1 + 8);
                v54 = *(char **)(a1 + 16);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[4 * v57];
              *(_DWORD *)v62 = 0;
              v55 = v62 + 4;
              while (v54 != v56)
              {
                v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v62;
              *(_QWORD *)(a1 + 16) = v55;
              *(_QWORD *)(a1 + 24) = &v61[4 * v60];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_DWORD *)v54 = 0;
              v55 = v54 + 4;
            }
            *(_QWORD *)(a1 + 16) = v55;
            v64 = *((_QWORD *)this + 1);
            if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *((_QWORD *)this + 2))
            {
              *(v55 - 1) = *(_DWORD *)(*(_QWORD *)this + v64);
LABEL_96:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_94:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_97:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_94;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_96;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v45 = *((_QWORD *)this + 1);
          if (v45 >= *((_QWORD *)this + 2))
          {
            v48 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v46 = v45 + 1;
            v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
            *((_QWORD *)this + 1) = v46;
            v48 = v47 != 0;
          }
          *(_BYTE *)(a1 + 40) = v48;
          goto LABEL_97;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_97;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8057CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  char v7;

  v3 = result;
  if ((*(_BYTE *)(result + 44) & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(_BYTE *)(v3 + 44);
  if ((v7 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 32));
    v7 = *(_BYTE *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B805868(_QWORD *result)
{
  *result = off_24DF36510;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B80587C(void **a1)
{
  void **v2;

  *a1 = off_24DF36510;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B8058C4(void **a1)
{
  void **v3;

  *a1 = off_24DF36510;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

_QWORD *sub_21B805920(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  a1[1] = 0;
  v3 = (uint64_t **)(a1 + 1);
  *a1 = off_24DF36510;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_21B805984(v3, *v4++);
  return a1;
}

uint64_t sub_21B805984(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B807180(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B805AB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B805AD8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B805B44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_21B805CE4(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B805CE4(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF365F0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B805E2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B805E48(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_21B805E90(uint64_t result)
{
  *(_QWORD *)result = off_24DF36548;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B805EAC(void **a1)
{
  void **v2;

  *a1 = off_24DF36548;
  v2 = a1 + 2;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B805EF4(void **a1)
{
  void **v3;

  *a1 = off_24DF36548;
  v3 = a1 + 2;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

uint64_t sub_21B805F50(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_24DF36548;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v5 = *(uint64_t **)(a2 + 16);
  v6 = *(uint64_t **)(a2 + 24);
  while (v5 != v6)
    sub_21B805FFC(v4, *v5++);
  v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
    v7 = *(_BYTE *)(a2 + 48);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 8) = v9;
  }
  return a1;
}

uint64_t sub_21B805FFC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B806680(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B806130(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B806150(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8061FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_33;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v24);
LABEL_37:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_38;
      }
      if ((_DWORD)v21 == 1)
      {
        sub_21B80643C(v8);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
LABEL_38:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v23 = *((_QWORD *)this + 1);
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v23);
    goto LABEL_37;
  }
  return v4 == 0;
}

uint64_t sub_21B80643C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF36580;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B80657C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B806598(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 16);
  v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

void sub_21B80661C(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF36580;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B80665C(PB::Base *a1)
{
  sub_21B80661C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B806680(uint64_t a1, uint64_t a2)
{
  char *v3;
  int v4;

  *(_QWORD *)a1 = &off_24DF36580;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) = 1;
    *(_DWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2)
    sub_21B796B90(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  return a1;
}

uint64_t sub_21B8066F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    PB::TextFormatter::format(this, "joint");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B806770(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  unint64_t v59;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          while (v30 < v31 && !*((_BYTE *)this + 24))
          {
            v33 = *(char **)(a1 + 16);
            v32 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v33 >= v32)
            {
              v35 = (char *)*v8;
              v36 = (v33 - (_BYTE *)*v8) >> 2;
              v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62)
                goto LABEL_100;
              v38 = v32 - (_QWORD)v35;
              if (v38 >> 1 > v37)
                v37 = v38 >> 1;
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
                v39 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v39 = v37;
              if (v39)
              {
                v40 = (char *)sub_21B796CD8(v9, v39);
                v35 = *(char **)(a1 + 8);
                v33 = *(char **)(a1 + 16);
              }
              else
              {
                v40 = 0;
              }
              v41 = &v40[4 * v36];
              *(_DWORD *)v41 = 0;
              v34 = v41 + 4;
              while (v33 != v35)
              {
                v42 = *((_DWORD *)v33 - 1);
                v33 -= 4;
                *((_DWORD *)v41 - 1) = v42;
                v41 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v41;
              *(_QWORD *)(a1 + 16) = v34;
              *(_QWORD *)(a1 + 24) = &v40[4 * v39];
              if (v35)
                operator delete(v35);
            }
            else
            {
              *(_DWORD *)v33 = 0;
              v34 = v33 + 4;
            }
            *(_QWORD *)(a1 + 16) = v34;
            v43 = *((_QWORD *)this + 1);
            if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }
            *(v34 - 1) = *(_DWORD *)(*(_QWORD *)this + v43);
            v31 = *((_QWORD *)this + 2);
            v30 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v30;
          }
          PB::Reader::recallMark();
        }
        else
        {
          v49 = *(char **)(a1 + 16);
          v48 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v49 >= v48)
          {
            v51 = (char *)*v8;
            v52 = (v49 - (_BYTE *)*v8) >> 2;
            v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62)
LABEL_100:
              sub_21B796A0C();
            v54 = v48 - (_QWORD)v51;
            if (v54 >> 1 > v53)
              v53 = v54 >> 1;
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
              v55 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v55 = v53;
            if (v55)
            {
              v56 = (char *)sub_21B796CD8(v9, v55);
              v51 = *(char **)(a1 + 8);
              v49 = *(char **)(a1 + 16);
            }
            else
            {
              v56 = 0;
            }
            v57 = &v56[4 * v52];
            *(_DWORD *)v57 = 0;
            v50 = v57 + 4;
            while (v49 != v51)
            {
              v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v57 - 1) = v58;
              v57 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v57;
            *(_QWORD *)(a1 + 16) = v50;
            *(_QWORD *)(a1 + 24) = &v56[4 * v55];
            if (v51)
              operator delete(v51);
          }
          else
          {
            *(_DWORD *)v49 = 0;
            v50 = v49 + 4;
          }
          *(_QWORD *)(a1 + 16) = v50;
          v59 = *((_QWORD *)this + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((_QWORD *)this + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(_QWORD *)this + v59);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
        }
      }
      else if ((v13 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 36) |= 1u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v44 = 0;
          v45 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_77;
            }
            v46 = v22 + 1;
            v47 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v46;
            v27 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v22 = v46;
            v16 = v45++ > 8;
            if (v16)
            {
LABEL_63:
              LODWORD(v27) = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v16 = v26++ > 8;
            if (v16)
              goto LABEL_63;
          }
        }
LABEL_77:
        *(_DWORD *)(a1 + 32) = v27;
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B806BCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;

  v3 = result;
  if ((*(_BYTE *)(result + 36) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(float **)(v3 + 8);
  v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6);
  }
  return result;
}

uint64_t sub_21B806C2C(uint64_t result)
{
  *(_QWORD *)result = off_24DF365B8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B806C48(void **a1)
{
  void **v2;

  *a1 = off_24DF365B8;
  v2 = a1 + 2;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B806C90(void **a1)
{
  void **v3;

  *a1 = off_24DF365B8;
  v3 = a1 + 2;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

uint64_t sub_21B806CEC(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_24DF365B8;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v5 = *(uint64_t **)(a2 + 16);
  v6 = *(uint64_t **)(a2 + 24);
  while (v5 != v6)
    sub_21B805984(v4, *v5++);
  v7 = *(_BYTE *)(a2 + 48);
  if ((v7 & 2) != 0)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) |= 2u;
    *(_QWORD *)(a1 + 40) = v8;
    v7 = *(_BYTE *)(a2 + 48);
  }
  if ((v7 & 1) != 0)
  {
    v9 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 8) = v9;
  }
  return a1;
}

uint64_t sub_21B806D9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  if ((*(_BYTE *)(a1 + 48) & 2) != 0)
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B806E48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 16);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
        break;
      if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 48) |= 2u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_33;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v24);
LABEL_37:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_38;
      }
      if ((_DWORD)v21 == 1)
      {
        sub_21B805CE4(v8);
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
LABEL_38:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v23 = *((_QWORD *)this + 1);
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
    {
LABEL_33:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_38;
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v23);
    goto LABEL_37;
  }
  return v4 == 0;
}

uint64_t sub_21B807088(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  char v7;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 16);
  v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  v7 = *(_BYTE *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 40));
    v7 = *(_BYTE *)(v3 + 48);
  }
  if ((v7 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

void sub_21B80710C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF365F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B80715C(PB::Base *a1)
{
  sub_21B80710C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B807180(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;

  *(_QWORD *)a1 = &off_24DF365F0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) = 1;
    *(_DWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_21B80720C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "joint");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "quaternion", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B8072C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char *v67;
  _DWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  int v84;
  char *v85;
  int v86;
  unint64_t v87;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 != 2)
        {
          v70 = *(char **)(a1 + 16);
          v69 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v70 >= v69)
          {
            v77 = (char *)*v10;
            v78 = (v70 - (_BYTE *)*v10) >> 2;
            v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62)
LABEL_144:
              sub_21B796A0C();
            v80 = v69 - (_QWORD)v77;
            if (v80 >> 1 > v79)
              v79 = v80 >> 1;
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v79;
            if (v81)
            {
              v82 = (char *)sub_21B796CD8(v11, v81);
              v77 = *(char **)(a1 + 8);
              v70 = *(char **)(a1 + 16);
            }
            else
            {
              v82 = 0;
            }
            v85 = &v82[4 * v78];
            *(_DWORD *)v85 = 0;
            v68 = v85 + 4;
            while (v70 != v77)
            {
              v86 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v85;
            *(_QWORD *)(a1 + 16) = v68;
            *(_QWORD *)(a1 + 24) = &v82[4 * v81];
            if (v77)
              operator delete(v77);
          }
          else
          {
            *(_DWORD *)v70 = 0;
            v68 = v70 + 4;
          }
          *(_QWORD *)(a1 + 16) = v68;
LABEL_129:
          v87 = *((_QWORD *)this + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFFBLL && v87 + 4 <= *((_QWORD *)this + 2))
          {
            *(v68 - 1) = *(_DWORD *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v48 = *((_QWORD *)this + 1);
        v49 = *((_QWORD *)this + 2);
        while (v48 < v49 && !*((_BYTE *)this + 24))
        {
          v51 = *(char **)(a1 + 16);
          v50 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v51 >= v50)
          {
            v53 = (char *)*v10;
            v54 = (v51 - (_BYTE *)*v10) >> 2;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62)
              goto LABEL_144;
            v56 = v50 - (_QWORD)v53;
            if (v56 >> 1 > v55)
              v55 = v56 >> 1;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
              v57 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            if (v57)
            {
              v58 = (char *)sub_21B796CD8(v11, v57);
              v53 = *(char **)(a1 + 8);
              v51 = *(char **)(a1 + 16);
            }
            else
            {
              v58 = 0;
            }
            v59 = &v58[4 * v54];
            *(_DWORD *)v59 = 0;
            v52 = v59 + 4;
            while (v51 != v53)
            {
              v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v59;
            *(_QWORD *)(a1 + 16) = v52;
            *(_QWORD *)(a1 + 24) = &v58[4 * v57];
            if (v53)
              operator delete(v53);
          }
          else
          {
            *(_DWORD *)v51 = 0;
            v52 = v51 + 4;
          }
          *(_QWORD *)(a1 + 16) = v52;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(v52 - 1) = *(_DWORD *)(*(_QWORD *)this + v61);
          v49 = *((_QWORD *)this + 2);
          v48 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v48;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        v26 = *((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v27)
        {
          v62 = 0;
          v63 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }
            v64 = v26 + 1;
            v65 = *(_BYTE *)(v28 + v26);
            *((_QWORD *)this + 1) = v64;
            v31 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0)
              break;
            v62 += 7;
            v26 = v64;
            v18 = v63++ > 8;
            if (v18)
            {
LABEL_88:
              LODWORD(v31) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v32 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v33 = *(_BYTE *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0)
              break;
            v29 += 7;
            v26 = v32;
            v18 = v30++ > 8;
            if (v18)
              goto LABEL_88;
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v31;
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
LABEL_133:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v67 = *(char **)(a1 + 40);
      v66 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v67 >= v66)
      {
        v71 = (char *)*v8;
        v72 = (v67 - (_BYTE *)*v8) >> 2;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62)
LABEL_143:
          sub_21B796A0C();
        v74 = v66 - (_QWORD)v71;
        if (v74 >> 1 > v73)
          v73 = v74 >> 1;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v76 = (char *)sub_21B796CD8(v9, v75);
          v71 = *(char **)(a1 + 32);
          v67 = *(char **)(a1 + 40);
        }
        else
        {
          v76 = 0;
        }
        v83 = &v76[4 * v72];
        *(_DWORD *)v83 = 0;
        v68 = v83 + 4;
        while (v67 != v71)
        {
          v84 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v83 - 1) = v84;
          v83 -= 4;
        }
        *(_QWORD *)(a1 + 32) = v83;
        *(_QWORD *)(a1 + 40) = v68;
        *(_QWORD *)(a1 + 48) = &v76[4 * v75];
        if (v71)
          operator delete(v71);
      }
      else
      {
        *(_DWORD *)v67 = 0;
        v68 = v67 + 4;
      }
      *(_QWORD *)(a1 + 40) = v68;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v34 = *((_QWORD *)this + 1);
    v35 = *((_QWORD *)this + 2);
    while (v34 < v35 && !*((_BYTE *)this + 24))
    {
      v37 = *(char **)(a1 + 40);
      v36 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v37 >= v36)
      {
        v39 = (char *)*v8;
        v40 = (v37 - (_BYTE *)*v8) >> 2;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          goto LABEL_143;
        v42 = v36 - (_QWORD)v39;
        if (v42 >> 1 > v41)
          v41 = v42 >> 1;
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
          v43 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
        {
          v44 = (char *)sub_21B796CD8(v9, v43);
          v39 = *(char **)(a1 + 32);
          v37 = *(char **)(a1 + 40);
        }
        else
        {
          v44 = 0;
        }
        v45 = &v44[4 * v40];
        *(_DWORD *)v45 = 0;
        v38 = v45 + 4;
        while (v37 != v39)
        {
          v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(_QWORD *)(a1 + 32) = v45;
        *(_QWORD *)(a1 + 40) = v38;
        *(_QWORD *)(a1 + 48) = &v44[4 * v43];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_DWORD *)v37 = 0;
        v38 = v37 + 4;
      }
      *(_QWORD *)(a1 + 40) = v38;
      v47 = *((_QWORD *)this + 1);
      if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v38 - 1) = *(_DWORD *)(*(_QWORD *)this + v47);
      v35 = *((_QWORD *)this + 2);
      v34 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v34;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t sub_21B8078DC(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 60) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_21B80795C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36628;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B807974(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B807998(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = &off_24DF36628;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_21B8079E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "rms", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B807A50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B807CDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 16));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B807D34(_QWORD *result)
{
  *result = &off_24DF36660;
  result[2] = 0;
  return result;
}

void sub_21B807D4C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B807D70(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36660;
  *(_QWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) = 2;
    *(_DWORD *)(a1 + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 20) = v2;
    *(double *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B807DC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "event");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B807E28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8080B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B80810C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36698;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B808124(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B808148(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF36698;
  *(_DWORD *)(a1 + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_WORD *)(a1 + 60) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 60) = v3;
    *(_DWORD *)(a1 + 48) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_BYTE *)(a2 + 55);
    v3 |= 0x200u;
    *(_WORD *)(a1 + 60) = v3;
    *(_BYTE *)(a1 + 55) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 56);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 56) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_BYTE *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 52) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_BYTE *)(a2 + 53);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 53) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_BYTE *)(a2 + 54);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 60) = v3;
  *(_BYTE *)(a1 + 54) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 60) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_23:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 60) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_WORD *)(a2 + 60) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B808298(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "isBlockoutPeriodLow");
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBlockoutPeriodVeryLow");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isSampleRecent");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "percentLow", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "percentOK", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "percentVeryLow", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "totalValidDuration", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "value");
    if ((*(_WORD *)(a1 + 60) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "userHasOnboarded");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "writtenToHealthKit");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B808428(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    v2 = v39 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_78;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_79;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 48) = v25;
LABEL_80:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 55) = v28;
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 56) = v30;
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 52) = v32;
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 53) = v34;
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 54) = v36;
              goto LABEL_80;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_80;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_80;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8088FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_WORD *)(v3 + 60) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B808A54(uint64_t result)
{
  *(_QWORD *)result = &off_24DF366D0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B808A6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B808A90(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF366D0;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 40) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 24) = result;
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B808B1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageCv", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageMedian", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageStd", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B808BCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B808E28(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32));
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_21B808EBC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36708;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_21B808ED4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B808EF8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36708;
  *(_DWORD *)(a1 + 176) = 0;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 176) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_DWORD *)(a2 + 176);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x8000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x2000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10000) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_44:
    result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 176) = v3 | 0x1000;
    *(double *)(a1 + 104) = result;
    return result;
  }
LABEL_43:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 136) = result;
  if ((*(_DWORD *)(a2 + 176) & 0x1000) != 0)
    goto LABEL_44;
  return result;
}

uint64_t sub_21B809160(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsBoutDurationSecCv", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsBoutDurationSecMedian", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "allBoutsCycleTimeCv", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeCv", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeMedian", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthCv", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedian", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedCv", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedian", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "longBoutsWalkingSpeedCountRatioLog", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "shortBoutsCycleTimeCv", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "shortBoutsCycleTimeMedian", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "shortBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "shortBoutsStepLengthCv", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "shortBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedian", *(double *)(a1 + 160));
    if ((*(_DWORD *)(a1 + 176) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(this, "shortBoutsWalkingSpeedCv", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80000) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 0x100000) != 0)
LABEL_22:
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B809430(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 176) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 176) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 3u:
          *(_DWORD *)(a1 + 176) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 4u:
          *(_DWORD *)(a1 + 176) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 5u:
          *(_DWORD *)(a1 + 176) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 6u:
          *(_DWORD *)(a1 + 176) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 7u:
          *(_DWORD *)(a1 + 176) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 8u:
          *(_DWORD *)(a1 + 176) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 9u:
          *(_DWORD *)(a1 + 176) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xAu:
          *(_DWORD *)(a1 + 176) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xBu:
          *(_DWORD *)(a1 + 176) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xCu:
          *(_DWORD *)(a1 + 176) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xDu:
          *(_DWORD *)(a1 + 176) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xEu:
          *(_DWORD *)(a1 + 176) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0xFu:
          *(_DWORD *)(a1 + 176) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x10u:
          *(_DWORD *)(a1 + 176) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x11u:
          *(_DWORD *)(a1 + 176) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x12u:
          *(_DWORD *)(a1 + 176) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x13u:
          *(_DWORD *)(a1 + 176) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x14u:
          *(_DWORD *)(a1 + 176) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_86;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 0x15u:
          *(_DWORD *)(a1 + 176) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_86:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B809A44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 176);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 104));
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  if ((*(_DWORD *)(v3 + 176) & 0x1000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 104));
  return result;
}

uint64_t sub_21B809CB4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36740;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_21B809CCC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B809CF0(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36740;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 88) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_22:
    result = *(double *)(a2 + 48);
    *(_WORD *)(a1 + 88) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_21:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 40) = result;
  if ((*(_WORD *)(a2 + 88) & 0x20) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_21B809E24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentageMedian", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageStd", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doubleSupportPercentageMedian", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthQ95Heightnorm", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "modelOutputBalancePrior", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "stepLengthXWalkingSpeedMedian", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 88) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "stepLengthMedian", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "walkingSpeedMedian", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B809F94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 88) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 88) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 88) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 88) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 88) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 88) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 7u:
          *(_WORD *)(a1 + 88) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 8u:
          *(_WORD *)(a1 + 88) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 9u:
          *(_WORD *)(a1 + 88) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_53;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 0xAu:
          *(_WORD *)(a1 + 88) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_53:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B80A340(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48));
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  if ((*(_WORD *)(v3 + 88) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48));
  return result;
}

uint64_t sub_21B80A47C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36778;
  *(_DWORD *)(result + 248) = 0;
  return result;
}

void sub_21B80A494(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B80A4B8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36778;
  *(_DWORD *)(a1 + 248) = 0;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 248) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_DWORD *)(a2 + 248);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 248) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_DWORD *)(a2 + 248);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 248) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_DWORD *)(a2 + 248);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x400) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x4000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x8000) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *(double *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 152) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x80000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x100000) == 0)
  {
LABEL_25:
    if ((v2 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x200000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 176) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x800000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 192) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 200) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *(double *)(a2 + 216);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 216) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  result = *(double *)(a2 + 224);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 224) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *(double *)(a2 + 232);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 232) = result;
  v2 = *(_DWORD *)(a2 + 248);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0)
      return result;
LABEL_62:
    result = *(double *)(a2 + 208);
    *(_DWORD *)(a1 + 248) = v3 | 0x2000000;
    *(double *)(a1 + 208) = result;
    return result;
  }
LABEL_61:
  result = *(double *)(a2 + 240);
  v3 |= 0x20000000u;
  *(_DWORD *)(a1 + 248) = v3;
  *(double *)(a1 + 240) = result;
  if ((*(_DWORD *)(a2 + 248) & 0x2000000) != 0)
    goto LABEL_62;
  return result;
}

uint64_t sub_21B80A81C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApCv", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 248);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMean", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMedian", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ5", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ95", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlCv", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMean", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMedian", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ5", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ95", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtCv", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMean", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMedian", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ5", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ95", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApCv", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMean", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMedian", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ5", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ95", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlCv", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMean", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMedian", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ5", *(double *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ95", *(double *)(a1 + 200));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtCv", *(double *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMean", *(double *)(a1 + 216));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ5", *(double *)(a1 + 232));
    if ((*(_DWORD *)(a1 + 248) & 0x20000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMedian", *(double *)(a1 + 224));
  v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x20000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ95", *(double *)(a1 + 240));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80AC0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 248) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 2u:
          *(_DWORD *)(a1 + 248) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 3u:
          *(_DWORD *)(a1 + 248) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 4u:
          *(_DWORD *)(a1 + 248) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 5u:
          *(_DWORD *)(a1 + 248) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 6u:
          *(_DWORD *)(a1 + 248) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 248) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 8u:
          *(_DWORD *)(a1 + 248) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 9u:
          *(_DWORD *)(a1 + 248) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xAu:
          *(_DWORD *)(a1 + 248) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xBu:
          *(_DWORD *)(a1 + 248) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xCu:
          *(_DWORD *)(a1 + 248) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xDu:
          *(_DWORD *)(a1 + 248) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xEu:
          *(_DWORD *)(a1 + 248) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0xFu:
          *(_DWORD *)(a1 + 248) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x10u:
          *(_DWORD *)(a1 + 248) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x11u:
          *(_DWORD *)(a1 + 248) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x12u:
          *(_DWORD *)(a1 + 248) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x13u:
          *(_DWORD *)(a1 + 248) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x14u:
          *(_DWORD *)(a1 + 248) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 248) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 248) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x17u:
          *(_DWORD *)(a1 + 248) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x18u:
          *(_DWORD *)(a1 + 248) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x19u:
          *(_DWORD *)(a1 + 248) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Au:
          *(_DWORD *)(a1 + 248) |= 0x4000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 216) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Bu:
          *(_DWORD *)(a1 + 248) |= 0x8000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Cu:
          *(_DWORD *)(a1 + 248) |= 0x10000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 232) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Du:
          *(_DWORD *)(a1 + 248) |= 0x20000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_115;
        case 0x1Eu:
          *(_DWORD *)(a1 + 248) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 208) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_115:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B80B418(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 248);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 216));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 224));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 232));
  v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 208));
  }
LABEL_60:
  result = PB::Writer::write(this, *(double *)(v3 + 240));
  if ((*(_DWORD *)(v3 + 248) & 0x2000000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 208));
  return result;
}

uint64_t sub_21B80B784(uint64_t result)
{
  *(_QWORD *)result = &off_24DF367B0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B80B79C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B80B7C0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)result = &off_24DF367B0;
  *(_DWORD *)(result + 52) = 0;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_BYTE *)(result + 52) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 52) & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 52) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_BYTE *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 52) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_BYTE *)(a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 48) = v7;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 36) = v8;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 32) = v9;
  v2 = *(_BYTE *)(a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_18:
    v11 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 52) = v3 | 0x20;
    *(_DWORD *)(result + 40) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_BYTE *)(result + 52) = v3;
  *(_DWORD *)(result + 44) = v10;
  if ((*(_BYTE *)(a2 + 52) & 0x20) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_21B80B8BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "likelihoodNotOK", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "likelihoodOK", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "numDaysWithDataLast30Days");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "numDaysWithDataLast7Days");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "numValidBouts28Days");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 52) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "rejectionStatus");
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "numValidBouts7Days");
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 4) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80B9EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 52) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 52) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 52) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 52) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 52) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 52) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 32) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 52) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 44) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 52) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 40) = v49;
LABEL_130:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B80C0AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 52) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B80C1B0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF367E8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B80C1C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B80C1EC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF367E8;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 40) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 40) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B80C278(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "l2DispersionHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centroidSlopeHeightNormWalkingSpeedStepLength", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "l2DispersionHeightNormWalkingSpeedStepLength", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80C328(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B80C584(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B80C618(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36820;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

void sub_21B80C630(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B80C654(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36820;
  *(_DWORD *)(a1 + 216) = 0;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80000) != 0)
  {
    result = *(double *)(a2 + 160);
    v3 = 0x80000;
    *(_DWORD *)(a1 + 216) = 0x80000;
    *(double *)(a1 + 160) = result;
    v2 = *(_DWORD *)(a2 + 216);
    if ((v2 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 152);
    v3 |= 0x40000u;
    *(_DWORD *)(a1 + 216) = v3;
    *(double *)(a1 + 152) = result;
    v2 = *(_DWORD *)(a2 + 216);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 216) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_DWORD *)(a2 + 216);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 168) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x400000) == 0)
  {
LABEL_10:
    if ((v2 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = *(double *)(a2 + 184);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 184) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x200000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = *(double *)(a2 + 176);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 176) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x800000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = *(double *)(a2 + 192);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 192) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 208);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 208) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = *(double *)(a2 + 200);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 200) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x10) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x2000) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x400) == 0)
  {
LABEL_24:
    if ((v2 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x4000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = *(double *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x800) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = *(double *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 216);
  if ((v2 & 0x800) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_54:
    result = *(double *)(a2 + 104);
    *(_DWORD *)(a1 + 216) = v3 | 0x1000;
    *(double *)(a1 + 104) = result;
    return result;
  }
LABEL_53:
  result = *(double *)(a2 + 96);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 216) = v3;
  *(double *)(a1 + 96) = result;
  if ((*(_DWORD *)(a2 + 216) & 0x1000) != 0)
    goto LABEL_54;
  return result;
}

uint64_t sub_21B80C948(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "allBoutsCycleTimeEntropy5thTo95th", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 216);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsCycleTimeEntropyMean", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1Mean", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P5", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P95", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2Mean", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P5", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P95", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "allBoutsStepLengthEntropy5thTo95th", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "allBoutsStepLengthEntropyMean", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1Mean", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P5", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P95", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P5", *(double *)(a1 + 200));
    if ((*(_DWORD *)(a1 + 216) & 0x2000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2Mean", *(double *)(a1 + 192));
  v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x2000000) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P95", *(double *)(a1 + 208));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80CCB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 216) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 2u:
          *(_DWORD *)(a1 + 216) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 3u:
          *(_DWORD *)(a1 + 216) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 4u:
          *(_DWORD *)(a1 + 216) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 5u:
          *(_DWORD *)(a1 + 216) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 6u:
          *(_DWORD *)(a1 + 216) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 7u:
          *(_DWORD *)(a1 + 216) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 8u:
          *(_DWORD *)(a1 + 216) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 9u:
          *(_DWORD *)(a1 + 216) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 208) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xAu:
          *(_DWORD *)(a1 + 216) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xBu:
          *(_DWORD *)(a1 + 216) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xCu:
          *(_DWORD *)(a1 + 216) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xDu:
          *(_DWORD *)(a1 + 216) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xEu:
          *(_DWORD *)(a1 + 216) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0xFu:
          *(_DWORD *)(a1 + 216) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x10u:
          *(_DWORD *)(a1 + 216) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x11u:
          *(_DWORD *)(a1 + 216) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x12u:
          *(_DWORD *)(a1 + 216) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x13u:
          *(_DWORD *)(a1 + 216) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x14u:
          *(_DWORD *)(a1 + 216) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x15u:
          *(_DWORD *)(a1 + 216) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x16u:
          *(_DWORD *)(a1 + 216) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x17u:
          *(_DWORD *)(a1 + 216) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x18u:
          *(_DWORD *)(a1 + 216) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x19u:
          *(_DWORD *)(a1 + 216) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_101;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_103;
        case 0x1Au:
          *(_DWORD *)(a1 + 216) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_101:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_103:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B80D3E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 216);
  if ((v4 & 0x80000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 160));
    v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 208));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 104));
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  if ((*(_DWORD *)(v3 + 216) & 0x1000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 104));
  return result;
}

uint64_t sub_21B80D6E0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36858;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B80D6F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B80D71C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)a1 = &off_24DF36858;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v6;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B80D7C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bin");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "state");
    if ((*(_BYTE *)(a1 + 40) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80D894(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_66:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_67;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_46:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B80DC90(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_21B80DD40(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36890;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_21B80DD5C(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24DF36890;
  v4 = *((_QWORD *)this + 9);
  v2 = (_QWORD *)((char *)this + 72);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

void sub_21B80DDCC(PB::Base *a1)
{
  sub_21B80DD5C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B80DDF0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;

  *(_QWORD *)a1 = &off_24DF36890;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v4 = (uint64_t *)(a1 + 72);
  *(_DWORD *)(a1 + 152) = 0;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x80) != 0)
  {
    v7 = *(_QWORD *)(a2 + 88);
    v6 = 128;
    *(_DWORD *)(a1 + 152) = 128;
    *(_QWORD *)(a1 + 88) = v7;
    v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x40) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 80);
    v6 |= 0x40u;
    *(_DWORD *)(a1 + 152) = v6;
    *(_QWORD *)(a1 + 80) = v8;
    v5 = *(_DWORD *)(a2 + 152);
  }
LABEL_6:
  if ((v5 & 0x10) != 0)
  {
    v14 = *(_QWORD *)(a2 + 48);
    v6 |= 0x10u;
    *(_DWORD *)(a1 + 152) = v6;
    *(_QWORD *)(a1 + 48) = v14;
    v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x100) == 0)
    {
LABEL_8:
      if ((v5 & 8) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_8;
  }
  v15 = *(_DWORD *)(a2 + 96);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 96) = v15;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *(_QWORD *)(a2 + 40);
  v6 |= 8u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 40) = v16;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  v17 = *(_QWORD *)(a2 + 64);
  v6 |= 0x20u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 64) = v17;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  v18 = *(_DWORD *)(a2 + 120);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 120) = v18;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  v19 = *(_DWORD *)(a2 + 124);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 124) = v19;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_27;
  }
LABEL_26:
  v20 = *(_QWORD *)(a2 + 32);
  v6 |= 4u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 32) = v20;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
LABEL_28:
    v22 = *(_QWORD *)(a2 + 16);
    v6 |= 1u;
    *(_DWORD *)(a1 + 152) = v6;
    *(_QWORD *)(a1 + 16) = v22;
    if ((*(_DWORD *)(a2 + 152) & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_27:
  v21 = *(_QWORD *)(a2 + 24);
  v6 |= 2u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 24) = v21;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 1) != 0)
    goto LABEL_28;
LABEL_15:
  if ((v5 & 0x80000) != 0)
  {
LABEL_16:
    v9 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)(a1 + 152) = v6 | 0x80000;
    *(_DWORD *)(a1 + 140) = v9;
  }
LABEL_17:
  if (*(_QWORD *)(a2 + 72))
  {
    v10 = operator new();
    v11 = v10;
    v12 = *(__int128 **)(a2 + 72);
    if (*((char *)v12 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v10, *(void **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *v12;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v12 + 2);
      *(_OWORD *)v10 = v13;
    }
    v23 = *v4;
    *v4 = v11;
    if (v23)
      sub_21B796830((uint64_t)v4, v23);
  }
  v24 = *(_DWORD *)(a2 + 152);
  if ((v24 & 0x200000) != 0)
  {
    v25 = *(_BYTE *)(a2 + 148);
    *(_DWORD *)(a1 + 152) |= 0x200000u;
    *(_BYTE *)(a1 + 148) = v25;
    v24 = *(_DWORD *)(a2 + 152);
  }
  if ((v24 & 0x400000) != 0)
  {
    v26 = *(_BYTE *)(a2 + 149);
    *(_DWORD *)(a1 + 152) |= 0x400000u;
    *(_BYTE *)(a1 + 149) = v26;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v27 = operator new();
    v28 = sub_21B79C560(v27, *(_QWORD *)(a2 + 8));
    v29 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v30;
    if (v29)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v29 + 8))(v29, v28);
  }
  v31 = *(_DWORD *)(a2 + 152);
  if ((v31 & 0x40000) != 0)
  {
    v39 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 152) |= 0x40000u;
    *(_DWORD *)(a1 + 136) = v39;
    v31 = *(_DWORD *)(a2 + 152);
    if ((v31 & 0x100000) == 0)
    {
LABEL_42:
      if ((v31 & 0x20000) == 0)
        goto LABEL_43;
      goto LABEL_57;
    }
  }
  else if ((v31 & 0x100000) == 0)
  {
    goto LABEL_42;
  }
  v40 = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) |= 0x100000u;
  *(_DWORD *)(a1 + 144) = v40;
  v31 = *(_DWORD *)(a2 + 152);
  if ((v31 & 0x20000) == 0)
  {
LABEL_43:
    if ((v31 & 0x400) == 0)
      goto LABEL_44;
    goto LABEL_58;
  }
LABEL_57:
  v41 = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 152) |= 0x20000u;
  *(_DWORD *)(a1 + 132) = v41;
  v31 = *(_DWORD *)(a2 + 152);
  if ((v31 & 0x400) == 0)
  {
LABEL_44:
    if ((v31 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_59;
  }
LABEL_58:
  v42 = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 152) |= 0x400u;
  *(_DWORD *)(a1 + 104) = v42;
  v31 = *(_DWORD *)(a2 + 152);
  if ((v31 & 0x800) == 0)
  {
LABEL_45:
    if ((v31 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_60;
  }
LABEL_59:
  v43 = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 152) |= 0x800u;
  *(_DWORD *)(a1 + 108) = v43;
  v31 = *(_DWORD *)(a2 + 152);
  if ((v31 & 0x2000) == 0)
  {
LABEL_46:
    if ((v31 & 0x200) == 0)
      goto LABEL_47;
LABEL_61:
    v45 = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(a1 + 152) |= 0x200u;
    *(_DWORD *)(a1 + 100) = v45;
    if ((*(_DWORD *)(a2 + 152) & 0x1000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
LABEL_60:
  v44 = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 152) |= 0x2000u;
  *(_DWORD *)(a1 + 116) = v44;
  v31 = *(_DWORD *)(a2 + 152);
  if ((v31 & 0x200) != 0)
    goto LABEL_61;
LABEL_47:
  if ((v31 & 0x1000) != 0)
  {
LABEL_48:
    v32 = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 152) |= 0x1000u;
    *(_DWORD *)(a1 + 112) = v32;
  }
LABEL_49:
  if (*(_QWORD *)(a2 + 56))
  {
    v33 = operator new();
    v34 = sub_21B846890(v33, *(_QWORD *)(a2 + 56));
    v35 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v36;
    if (v35)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v35 + 8))(v35, v34);
  }
  if ((*(_BYTE *)(a2 + 154) & 1) != 0)
  {
    v37 = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a1 + 152) |= 0x10000u;
    *(_DWORD *)(a1 + 128) = v37;
  }
  return a1;
}

uint64_t sub_21B80E1D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "accelerometerPace");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 16));
    v6 = *(_DWORD *)(a1 + 152);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0)
        goto LABEL_6;
      goto LABEL_36;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "count");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 24));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 32));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 40));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "distanceSource");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "elevationAscended");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "elevationDescended");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "falseStepDetectorState");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "falseStepsSuppressed");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 48));
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "floorsAscended");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "floorsDescended");
  v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isOdometerDistance");
  if ((*(_DWORD *)(a1 + 152) & 0x400000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "isOdometerPace");
LABEL_19:
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "movementStats");
  v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "paceSource");
    v8 = *(_DWORD *)(a1 + 152);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0)
        goto LABEL_24;
      goto LABEL_51;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(this, "pedometerArmConstrainedState");
  v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pushCount");
  v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_52:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 64));
  if ((*(_DWORD *)(a1 + 152) & 0x80000) != 0)
LABEL_26:
    PB::TextFormatter::format(this, "recordId");
LABEL_27:
  if (*(_QWORD *)(a1 + 72))
    PB::TextFormatter::format();
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x40) == 0)
  {
    if ((v9 & 0x80) == 0)
      goto LABEL_31;
LABEL_55:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 152) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_32;
  }
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x80) != 0)
    goto LABEL_55;
LABEL_31:
  if ((v9 & 0x100000) != 0)
LABEL_32:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80E53C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;
  char v196;
  unsigned int v197;
  unint64_t v198;
  char v199;
  uint64_t v201;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t *)(a1 + 72);
  while (2)
  {
    v9 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v16 = 0;
      v17 = 0;
      v12 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v18 = v2 + 1;
        v19 = *(_BYTE *)(v9 + v2);
        *((_QWORD *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0)
          goto LABEL_21;
        v16 += 7;
        v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          v12 = 0;
          goto LABEL_21;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_21:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 152) |= 0x80u;
        v21 = *((_QWORD *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v21);
        goto LABEL_251;
      case 2u:
        *(_DWORD *)(a1 + 152) |= 0x40u;
        v23 = *((_QWORD *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v23);
        goto LABEL_251;
      case 3u:
        *(_DWORD *)(a1 + 152) |= 0x10u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v24);
        goto LABEL_251;
      case 4u:
        *(_DWORD *)(a1 + 152) |= 0x100u;
        v25 = *((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = v25 + 1;
            *((_QWORD *)this + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              goto LABEL_255;
            v28 += 7;
            v25 = v31;
            v15 = v29++ > 8;
          }
          while (!v15);
LABEL_161:
          LODWORD(v30) = 0;
          goto LABEL_255;
        }
        v148 = 0;
        v149 = 0;
        v30 = 0;
        if (v26 <= v25)
          v26 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v26 == v25)
          {
            LODWORD(v30) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v150 = v25 + 1;
            v151 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)this + 1) = v150;
            v30 |= (unint64_t)(v151 & 0x7F) << v148;
            if (v151 < 0)
            {
              v148 += 7;
              v25 = v150;
              v15 = v149++ > 8;
              if (v15)
                goto LABEL_161;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v30) = 0;
          }
          break;
        }
LABEL_255:
        *(_DWORD *)(a1 + 96) = v30;
        goto LABEL_304;
      case 5u:
        *(_DWORD *)(a1 + 152) |= 8u;
        v33 = *((_QWORD *)this + 1);
        if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v33);
        goto LABEL_251;
      case 6u:
        *(_DWORD *)(a1 + 152) |= 0x20u;
        v34 = *((_QWORD *)this + 1);
        if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v34);
        goto LABEL_251;
      case 7u:
        *(_DWORD *)(a1 + 152) |= 0x4000u;
        v35 = *((_QWORD *)this + 1);
        v36 = *((_QWORD *)this + 2);
        v37 = *(_QWORD *)this;
        if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
        {
          v38 = 0;
          v39 = 0;
          v40 = 0;
          do
          {
            v41 = v35 + 1;
            *((_QWORD *)this + 1) = v35 + 1;
            v42 = *(_BYTE *)(v37 + v35);
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if ((v42 & 0x80) == 0)
              goto LABEL_259;
            v38 += 7;
            v35 = v41;
            v15 = v39++ > 8;
          }
          while (!v15);
LABEL_168:
          LODWORD(v40) = 0;
          goto LABEL_259;
        }
        v152 = 0;
        v153 = 0;
        v40 = 0;
        if (v36 <= v35)
          v36 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v36 == v35)
          {
            LODWORD(v40) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v154 = v35 + 1;
            v155 = *(_BYTE *)(v37 + v35);
            *((_QWORD *)this + 1) = v154;
            v40 |= (unint64_t)(v155 & 0x7F) << v152;
            if (v155 < 0)
            {
              v152 += 7;
              v35 = v154;
              v15 = v153++ > 8;
              if (v15)
                goto LABEL_168;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v40) = 0;
          }
          break;
        }
LABEL_259:
        *(_DWORD *)(a1 + 120) = v40;
        goto LABEL_304;
      case 8u:
        *(_DWORD *)(a1 + 152) |= 0x8000u;
        v43 = *((_QWORD *)this + 1);
        v44 = *((_QWORD *)this + 2);
        v45 = *(_QWORD *)this;
        if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
        {
          v46 = 0;
          v47 = 0;
          v48 = 0;
          do
          {
            v49 = v43 + 1;
            *((_QWORD *)this + 1) = v43 + 1;
            v50 = *(_BYTE *)(v45 + v43);
            v48 |= (unint64_t)(v50 & 0x7F) << v46;
            if ((v50 & 0x80) == 0)
              goto LABEL_263;
            v46 += 7;
            v43 = v49;
            v15 = v47++ > 8;
          }
          while (!v15);
LABEL_175:
          LODWORD(v48) = 0;
          goto LABEL_263;
        }
        v156 = 0;
        v157 = 0;
        v48 = 0;
        if (v44 <= v43)
          v44 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v44 == v43)
          {
            LODWORD(v48) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v158 = v43 + 1;
            v159 = *(_BYTE *)(v45 + v43);
            *((_QWORD *)this + 1) = v158;
            v48 |= (unint64_t)(v159 & 0x7F) << v156;
            if (v159 < 0)
            {
              v156 += 7;
              v43 = v158;
              v15 = v157++ > 8;
              if (v15)
                goto LABEL_175;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v48) = 0;
          }
          break;
        }
LABEL_263:
        *(_DWORD *)(a1 + 124) = v48;
        goto LABEL_304;
      case 9u:
        *(_DWORD *)(a1 + 152) |= 4u;
        v51 = *((_QWORD *)this + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v51);
        goto LABEL_251;
      case 0xAu:
        *(_DWORD *)(a1 + 152) |= 2u;
        v52 = *((_QWORD *)this + 1);
        if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
          goto LABEL_69;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v52);
        goto LABEL_251;
      case 0xBu:
        *(_DWORD *)(a1 + 152) |= 1u;
        v53 = *((_QWORD *)this + 1);
        if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v53);
LABEL_251:
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
LABEL_69:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_304;
      case 0xCu:
        *(_DWORD *)(a1 + 152) |= 0x80000u;
        v54 = *((_QWORD *)this + 1);
        v55 = *((_QWORD *)this + 2);
        v56 = *(_QWORD *)this;
        if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
        {
          v57 = 0;
          v58 = 0;
          v59 = 0;
          do
          {
            v60 = v54 + 1;
            *((_QWORD *)this + 1) = v54 + 1;
            v61 = *(_BYTE *)(v56 + v54);
            v59 |= (unint64_t)(v61 & 0x7F) << v57;
            if ((v61 & 0x80) == 0)
              goto LABEL_267;
            v57 += 7;
            v54 = v60;
            v15 = v58++ > 8;
          }
          while (!v15);
LABEL_182:
          LODWORD(v59) = 0;
          goto LABEL_267;
        }
        v160 = 0;
        v161 = 0;
        v59 = 0;
        if (v55 <= v54)
          v55 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v55 == v54)
          {
            LODWORD(v59) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v162 = v54 + 1;
            v163 = *(_BYTE *)(v56 + v54);
            *((_QWORD *)this + 1) = v162;
            v59 |= (unint64_t)(v163 & 0x7F) << v160;
            if (v163 < 0)
            {
              v160 += 7;
              v54 = v162;
              v15 = v161++ > 8;
              if (v15)
                goto LABEL_182;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v59) = 0;
          }
          break;
        }
LABEL_267:
        *(_DWORD *)(a1 + 140) = v59;
        goto LABEL_304;
      case 0xDu:
        v62 = (_QWORD *)operator new();
        v62[1] = 0;
        v62[2] = 0;
        *v62 = 0;
        v201 = 0;
        v63 = *v8;
        *v8 = (uint64_t)v62;
        if (v63)
        {
          sub_21B796830((uint64_t)v8, v63);
          v64 = v201;
          v201 = 0;
          if (v64)
            sub_21B796830((uint64_t)&v201, v64);
        }
        PB::Reader::read();
        goto LABEL_304;
      case 0xEu:
        *(_DWORD *)(a1 + 152) |= 0x200000u;
        v65 = *((_QWORD *)this + 1);
        if (v65 >= *((_QWORD *)this + 2))
        {
          v68 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v66 = v65 + 1;
          v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
          *((_QWORD *)this + 1) = v66;
          v68 = v67 != 0;
        }
        *(_BYTE *)(a1 + 148) = v68;
        goto LABEL_304;
      case 0xFu:
        *(_DWORD *)(a1 + 152) |= 0x400000u;
        v69 = *((_QWORD *)this + 1);
        if (v69 >= *((_QWORD *)this + 2))
        {
          v72 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v70 = v69 + 1;
          v71 = *(unsigned __int8 *)(*(_QWORD *)this + v69);
          *((_QWORD *)this + 1) = v70;
          v72 = v71 != 0;
        }
        *(_BYTE *)(a1 + 149) = v72;
        goto LABEL_304;
      case 0x10u:
        v73 = operator new();
        sub_21B79C4B8(v73);
        v74 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v73;
        if (v74)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
          v73 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_145;
      case 0x11u:
        *(_DWORD *)(a1 + 152) |= 0x40000u;
        v75 = *((_QWORD *)this + 1);
        v76 = *((_QWORD *)this + 2);
        v77 = *(_QWORD *)this;
        if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
        {
          v78 = 0;
          v79 = 0;
          v80 = 0;
          do
          {
            v81 = v75 + 1;
            *((_QWORD *)this + 1) = v75 + 1;
            v82 = *(_BYTE *)(v77 + v75);
            v80 |= (unint64_t)(v82 & 0x7F) << v78;
            if ((v82 & 0x80) == 0)
              goto LABEL_271;
            v78 += 7;
            v75 = v81;
            v15 = v79++ > 8;
          }
          while (!v15);
LABEL_193:
          LODWORD(v80) = 0;
          goto LABEL_271;
        }
        v164 = 0;
        v165 = 0;
        v80 = 0;
        if (v76 <= v75)
          v76 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v76 == v75)
          {
            LODWORD(v80) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v166 = v75 + 1;
            v167 = *(_BYTE *)(v77 + v75);
            *((_QWORD *)this + 1) = v166;
            v80 |= (unint64_t)(v167 & 0x7F) << v164;
            if (v167 < 0)
            {
              v164 += 7;
              v75 = v166;
              v15 = v165++ > 8;
              if (v15)
                goto LABEL_193;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v80) = 0;
          }
          break;
        }
LABEL_271:
        *(_DWORD *)(a1 + 136) = v80;
        goto LABEL_304;
      case 0x12u:
        *(_DWORD *)(a1 + 152) |= 0x100000u;
        v83 = *((_QWORD *)this + 1);
        v84 = *((_QWORD *)this + 2);
        v85 = *(_QWORD *)this;
        if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
        {
          v86 = 0;
          v87 = 0;
          v88 = 0;
          do
          {
            v89 = v83 + 1;
            *((_QWORD *)this + 1) = v83 + 1;
            v90 = *(_BYTE *)(v85 + v83);
            v88 |= (unint64_t)(v90 & 0x7F) << v86;
            if ((v90 & 0x80) == 0)
              goto LABEL_275;
            v86 += 7;
            v83 = v89;
            v15 = v87++ > 8;
          }
          while (!v15);
LABEL_200:
          LODWORD(v88) = 0;
          goto LABEL_275;
        }
        v168 = 0;
        v169 = 0;
        v88 = 0;
        if (v84 <= v83)
          v84 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v84 == v83)
          {
            LODWORD(v88) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v170 = v83 + 1;
            v171 = *(_BYTE *)(v85 + v83);
            *((_QWORD *)this + 1) = v170;
            v88 |= (unint64_t)(v171 & 0x7F) << v168;
            if (v171 < 0)
            {
              v168 += 7;
              v83 = v170;
              v15 = v169++ > 8;
              if (v15)
                goto LABEL_200;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v88) = 0;
          }
          break;
        }
LABEL_275:
        *(_DWORD *)(a1 + 144) = v88;
        goto LABEL_304;
      case 0x13u:
        *(_DWORD *)(a1 + 152) |= 0x20000u;
        v91 = *((_QWORD *)this + 1);
        v92 = *((_QWORD *)this + 2);
        v93 = *(_QWORD *)this;
        if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
        {
          v94 = 0;
          v95 = 0;
          v96 = 0;
          do
          {
            v97 = v91 + 1;
            *((_QWORD *)this + 1) = v91 + 1;
            v98 = *(_BYTE *)(v93 + v91);
            v96 |= (unint64_t)(v98 & 0x7F) << v94;
            if ((v98 & 0x80) == 0)
              goto LABEL_279;
            v94 += 7;
            v91 = v97;
            v15 = v95++ > 8;
          }
          while (!v15);
LABEL_207:
          LODWORD(v96) = 0;
          goto LABEL_279;
        }
        v172 = 0;
        v173 = 0;
        v96 = 0;
        if (v92 <= v91)
          v92 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v92 == v91)
          {
            LODWORD(v96) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v174 = v91 + 1;
            v175 = *(_BYTE *)(v93 + v91);
            *((_QWORD *)this + 1) = v174;
            v96 |= (unint64_t)(v175 & 0x7F) << v172;
            if (v175 < 0)
            {
              v172 += 7;
              v91 = v174;
              v15 = v173++ > 8;
              if (v15)
                goto LABEL_207;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v96) = 0;
          }
          break;
        }
LABEL_279:
        *(_DWORD *)(a1 + 132) = v96;
        goto LABEL_304;
      case 0x14u:
        *(_DWORD *)(a1 + 152) |= 0x400u;
        v99 = *((_QWORD *)this + 1);
        v100 = *((_QWORD *)this + 2);
        v101 = *(_QWORD *)this;
        if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
        {
          v102 = 0;
          v103 = 0;
          v104 = 0;
          do
          {
            v105 = v99 + 1;
            *((_QWORD *)this + 1) = v99 + 1;
            v106 = *(_BYTE *)(v101 + v99);
            v104 |= (unint64_t)(v106 & 0x7F) << v102;
            if ((v106 & 0x80) == 0)
              goto LABEL_283;
            v102 += 7;
            v99 = v105;
            v15 = v103++ > 8;
          }
          while (!v15);
LABEL_214:
          LODWORD(v104) = 0;
          goto LABEL_283;
        }
        v176 = 0;
        v177 = 0;
        v104 = 0;
        if (v100 <= v99)
          v100 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v100 == v99)
          {
            LODWORD(v104) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v178 = v99 + 1;
            v179 = *(_BYTE *)(v101 + v99);
            *((_QWORD *)this + 1) = v178;
            v104 |= (unint64_t)(v179 & 0x7F) << v176;
            if (v179 < 0)
            {
              v176 += 7;
              v99 = v178;
              v15 = v177++ > 8;
              if (v15)
                goto LABEL_214;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v104) = 0;
          }
          break;
        }
LABEL_283:
        *(_DWORD *)(a1 + 104) = v104;
        goto LABEL_304;
      case 0x15u:
        *(_DWORD *)(a1 + 152) |= 0x800u;
        v107 = *((_QWORD *)this + 1);
        v108 = *((_QWORD *)this + 2);
        v109 = *(_QWORD *)this;
        if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
        {
          v110 = 0;
          v111 = 0;
          v112 = 0;
          do
          {
            v113 = v107 + 1;
            *((_QWORD *)this + 1) = v107 + 1;
            v114 = *(_BYTE *)(v109 + v107);
            v112 |= (unint64_t)(v114 & 0x7F) << v110;
            if ((v114 & 0x80) == 0)
              goto LABEL_287;
            v110 += 7;
            v107 = v113;
            v15 = v111++ > 8;
          }
          while (!v15);
LABEL_221:
          LODWORD(v112) = 0;
          goto LABEL_287;
        }
        v180 = 0;
        v181 = 0;
        v112 = 0;
        if (v108 <= v107)
          v108 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v108 == v107)
          {
            LODWORD(v112) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v182 = v107 + 1;
            v183 = *(_BYTE *)(v109 + v107);
            *((_QWORD *)this + 1) = v182;
            v112 |= (unint64_t)(v183 & 0x7F) << v180;
            if (v183 < 0)
            {
              v180 += 7;
              v107 = v182;
              v15 = v181++ > 8;
              if (v15)
                goto LABEL_221;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v112) = 0;
          }
          break;
        }
LABEL_287:
        *(_DWORD *)(a1 + 108) = v112;
        goto LABEL_304;
      case 0x16u:
        *(_DWORD *)(a1 + 152) |= 0x2000u;
        v115 = *((_QWORD *)this + 1);
        v116 = *((_QWORD *)this + 2);
        v117 = *(_QWORD *)this;
        if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
        {
          v118 = 0;
          v119 = 0;
          v120 = 0;
          do
          {
            v121 = v115 + 1;
            *((_QWORD *)this + 1) = v115 + 1;
            v122 = *(_BYTE *)(v117 + v115);
            v120 |= (unint64_t)(v122 & 0x7F) << v118;
            if ((v122 & 0x80) == 0)
              goto LABEL_291;
            v118 += 7;
            v115 = v121;
            v15 = v119++ > 8;
          }
          while (!v15);
LABEL_228:
          LODWORD(v120) = 0;
          goto LABEL_291;
        }
        v184 = 0;
        v185 = 0;
        v120 = 0;
        if (v116 <= v115)
          v116 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v116 == v115)
          {
            LODWORD(v120) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v186 = v115 + 1;
            v187 = *(_BYTE *)(v117 + v115);
            *((_QWORD *)this + 1) = v186;
            v120 |= (unint64_t)(v187 & 0x7F) << v184;
            if (v187 < 0)
            {
              v184 += 7;
              v115 = v186;
              v15 = v185++ > 8;
              if (v15)
                goto LABEL_228;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v120) = 0;
          }
          break;
        }
LABEL_291:
        *(_DWORD *)(a1 + 116) = v120;
        goto LABEL_304;
      case 0x17u:
        *(_DWORD *)(a1 + 152) |= 0x200u;
        v123 = *((_QWORD *)this + 1);
        v124 = *((_QWORD *)this + 2);
        v125 = *(_QWORD *)this;
        if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
        {
          v126 = 0;
          v127 = 0;
          v128 = 0;
          do
          {
            v129 = v123 + 1;
            *((_QWORD *)this + 1) = v123 + 1;
            v130 = *(_BYTE *)(v125 + v123);
            v128 |= (unint64_t)(v130 & 0x7F) << v126;
            if ((v130 & 0x80) == 0)
              goto LABEL_295;
            v126 += 7;
            v123 = v129;
            v15 = v127++ > 8;
          }
          while (!v15);
LABEL_235:
          LODWORD(v128) = 0;
          goto LABEL_295;
        }
        v188 = 0;
        v189 = 0;
        v128 = 0;
        if (v124 <= v123)
          v124 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v124 == v123)
          {
            LODWORD(v128) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v190 = v123 + 1;
            v191 = *(_BYTE *)(v125 + v123);
            *((_QWORD *)this + 1) = v190;
            v128 |= (unint64_t)(v191 & 0x7F) << v188;
            if (v191 < 0)
            {
              v188 += 7;
              v123 = v190;
              v15 = v189++ > 8;
              if (v15)
                goto LABEL_235;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v128) = 0;
          }
          break;
        }
LABEL_295:
        *(_DWORD *)(a1 + 100) = v128;
        goto LABEL_304;
      case 0x18u:
        *(_DWORD *)(a1 + 152) |= 0x1000u;
        v131 = *((_QWORD *)this + 1);
        v132 = *((_QWORD *)this + 2);
        v133 = *(_QWORD *)this;
        if (v131 <= 0xFFFFFFFFFFFFFFF5 && v131 + 10 <= v132)
        {
          v134 = 0;
          v135 = 0;
          v136 = 0;
          do
          {
            v137 = v131 + 1;
            *((_QWORD *)this + 1) = v131 + 1;
            v138 = *(_BYTE *)(v133 + v131);
            v136 |= (unint64_t)(v138 & 0x7F) << v134;
            if ((v138 & 0x80) == 0)
              goto LABEL_299;
            v134 += 7;
            v131 = v137;
            v15 = v135++ > 8;
          }
          while (!v15);
LABEL_242:
          LODWORD(v136) = 0;
          goto LABEL_299;
        }
        v192 = 0;
        v193 = 0;
        v136 = 0;
        if (v132 <= v131)
          v132 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v132 == v131)
          {
            LODWORD(v136) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v194 = v131 + 1;
            v195 = *(_BYTE *)(v133 + v131);
            *((_QWORD *)this + 1) = v194;
            v136 |= (unint64_t)(v195 & 0x7F) << v192;
            if (v195 < 0)
            {
              v192 += 7;
              v131 = v194;
              v15 = v193++ > 8;
              if (v15)
                goto LABEL_242;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v136) = 0;
          }
          break;
        }
LABEL_299:
        *(_DWORD *)(a1 + 112) = v136;
        goto LABEL_304;
      case 0x19u:
        v73 = operator new();
        sub_21B846854(v73);
        v139 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v73;
        if (v139)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v139 + 8))(v139);
          v73 = *(_QWORD *)(a1 + 56);
        }
LABEL_145:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v73 + 16))(v73, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_304:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 0x1Au:
        *(_DWORD *)(a1 + 152) |= 0x10000u;
        v140 = *((_QWORD *)this + 1);
        v141 = *((_QWORD *)this + 2);
        v142 = *(_QWORD *)this;
        if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
        {
          v143 = 0;
          v144 = 0;
          v145 = 0;
          do
          {
            v146 = v140 + 1;
            *((_QWORD *)this + 1) = v140 + 1;
            v147 = *(_BYTE *)(v142 + v140);
            v145 |= (unint64_t)(v147 & 0x7F) << v143;
            if ((v147 & 0x80) == 0)
              goto LABEL_303;
            v143 += 7;
            v140 = v146;
            v15 = v144++ > 8;
          }
          while (!v15);
LABEL_249:
          LODWORD(v145) = 0;
          goto LABEL_303;
        }
        v196 = 0;
        v197 = 0;
        v145 = 0;
        if (v141 <= v140)
          v141 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v141 == v140)
          {
            LODWORD(v145) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v198 = v140 + 1;
            v199 = *(_BYTE *)(v142 + v140);
            *((_QWORD *)this + 1) = v198;
            v145 |= (unint64_t)(v199 & 0x7F) << v196;
            if (v199 < 0)
            {
              v196 += 7;
              v140 = v198;
              v15 = v197++ > 8;
              if (v15)
                goto LABEL_249;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v145) = 0;
          }
          break;
        }
LABEL_303:
        *(_DWORD *)(a1 + 128) = v145;
        goto LABEL_304;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_304;
    }
  }
}

uint64_t sub_21B80F5F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  int v5;
  const PB::Base *v6;
  int v7;
  const PB::Base *v8;

  v3 = result;
  v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 88));
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0)
LABEL_13:
    result = PB::Writer::writeVarInt(this);
LABEL_14:
  if (*(_QWORD *)(v3 + 72))
    result = PB::Writer::write();
  v5 = *(_DWORD *)(v3 + 152);
  if ((v5 & 0x200000) != 0)
  {
    result = PB::Writer::write(this);
    v5 = *(_DWORD *)(v3 + 152);
  }
  if ((v5 & 0x400000) != 0)
    result = PB::Writer::write(this);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x40000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v7 = *(_DWORD *)(v3 + 152);
    if ((v7 & 0x100000) == 0)
    {
LABEL_24:
      if ((v7 & 0x20000) == 0)
        goto LABEL_25;
      goto LABEL_49;
    }
  }
  else if ((v7 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  result = PB::Writer::writeVarInt(this);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x20000) == 0)
  {
LABEL_25:
    if ((v7 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x400) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x2000) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x2000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x200) == 0)
  {
LABEL_29:
    if ((v7 & 0x1000) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0)
LABEL_30:
    result = PB::Writer::writeVarInt(this);
LABEL_31:
  v8 = *(const PB::Base **)(v3 + 56);
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  if ((*(_BYTE *)(v3 + 154) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B80F8D4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF368C8;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_21B80F8EC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B80F910(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  *(_QWORD *)result = &off_24DF368C8;
  *(_DWORD *)(result + 72) = 0;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_QWORD *)(a2 + 48);
    v3 = 32;
    *(_WORD *)(result + 72) = 32;
    *(_QWORD *)(result + 48) = v4;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 64);
    v3 |= 0x80u;
    *(_WORD *)(result + 72) = v3;
    *(_DWORD *)(result + 64) = v5;
    v2 = *(_WORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 72) = v3;
    *(_QWORD *)(result + 24) = v6;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_BYTE *)(a2 + 69);
  v3 |= 0x200u;
  *(_WORD *)(result + 72) = v3;
  *(_BYTE *)(result + 69) = v9;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 1) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 8) = v10;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 56) = v11;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x400) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_BYTE *)(a2 + 70);
  v3 |= 0x400u;
  *(_WORD *)(result + 72) = v3;
  *(_BYTE *)(result + 70) = v12;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      return result;
LABEL_24:
    v14 = *(_BYTE *)(a2 + 68);
    *(_WORD *)(result + 72) = v3 | 0x100;
    *(_BYTE *)(result + 68) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 72) = v3;
  *(_QWORD *)(result + 16) = v13;
  if ((*(_WORD *)(a2 + 72) & 0x100) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B80FA60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "calibratedDistance", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "energyDeltaDistance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "energyIsCalibrated");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "incrementalActiveTime", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "incrementalSteps");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "lastStepTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "rawPace", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "stepCadenceDeltaDistance", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 72) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rawPaceDidJump");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "stepCadenceIsCalibrated");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B80FBF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 2u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_77;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_76:
                    v2 = v35 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_76;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_77;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_78:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 3u:
              *(_WORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 72) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 69) = v28;
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 72) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 70) = v30;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_72:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 68) = v32;
              goto LABEL_78;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_78;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8100AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 72) & 0x100) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B810204(uint64_t result)
{
  *(_DWORD *)(result + 100) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24DF36900;
  return result;
}

void sub_21B81021C(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24DF36900;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_21B81027C(PB::Base *a1)
{
  sub_21B81021C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8102A0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;

  *(_QWORD *)a1 = &off_24DF36900;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a2 + 16))
  {
    v5 = operator new();
    v6 = sub_21B80DDF0(v5, *(_QWORD *)(a2 + 16));
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v8 = operator new();
    v9 = sub_21B80F910(v8, *(_QWORD *)(a2 + 8));
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 1) != 0)
  {
    v14 = *(_QWORD *)(a2 + 24);
    *(_WORD *)(a1 + 100) |= 1u;
    *(_QWORD *)(a1 + 24) = v14;
    v11 = *(_WORD *)(a2 + 100);
    if ((v11 & 2) == 0)
    {
LABEL_9:
      if ((v11 & 0x80) == 0)
        goto LABEL_10;
      goto LABEL_22;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_9;
  }
  v15 = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 100) |= 2u;
  *(_QWORD *)(a1 + 32) = v15;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 0x80) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 100) |= 0x80u;
  *(_QWORD *)(a1 + 80) = v16;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v17 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 100) |= 0x20u;
  *(_QWORD *)(a1 + 64) = v17;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 0x40) == 0)
  {
LABEL_12:
    if ((v11 & 4) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v18 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 100) |= 0x40u;
  *(_QWORD *)(a1 + 72) = v18;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 8) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v19 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 100) |= 4u;
  *(_QWORD *)(a1 + 40) = v19;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 8) == 0)
  {
LABEL_14:
    if ((v11 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v20 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 100) |= 8u;
  *(_QWORD *)(a1 + 48) = v20;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 0x10) == 0)
  {
LABEL_15:
    if ((v11 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v21 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 100) |= 0x10u;
  *(_QWORD *)(a1 + 56) = v21;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 0x400) == 0)
  {
LABEL_16:
    if ((v11 & 0x200) == 0)
      goto LABEL_17;
LABEL_29:
    v23 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 100) |= 0x200u;
    *(_DWORD *)(a1 + 92) = v23;
    if ((*(_WORD *)(a2 + 100) & 0x100) == 0)
      return a1;
    goto LABEL_18;
  }
LABEL_28:
  v22 = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 100) |= 0x400u;
  *(_BYTE *)(a1 + 96) = v22;
  v11 = *(_WORD *)(a2 + 100);
  if ((v11 & 0x200) != 0)
    goto LABEL_29;
LABEL_17:
  if ((v11 & 0x100) != 0)
  {
LABEL_18:
    v12 = *(_DWORD *)(a2 + 88);
    *(_WORD *)(a1 + 100) |= 0x100u;
    *(_DWORD *)(a1 + 88) = v12;
  }
  return a1;
}

uint64_t sub_21B8104D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "addition");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "fused");
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isVehicular");
    v7 = *(_WORD *)(a1 + 100);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "odometerDeltaDistance", *(double *)(a1 + 24));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "odometerQuality");
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "odometerSmoothMeanPace", *(double *)(a1 + 32));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "pedometerDistanceSource");
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "speedStdDevOdometer", *(double *)(a1 + 40));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speedStdDevPedometer", *(double *)(a1 + 48));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "speedStdDevResidualTolerance", *(double *)(a1 + 56));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0)
      goto LABEL_15;
LABEL_27:
    PB::TextFormatter::format(this, "totalDistanceFused", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 100) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_26:
  PB::TextFormatter::format(this, "totalDistanceCalibratedPedometer", *(double *)(a1 + 64));
  v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x40) != 0)
    goto LABEL_27;
LABEL_15:
  if ((v7 & 0x80) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "totalDistanceOdometer", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8106A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF36890;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_QWORD *)(v20 + 72) = 0;
        *(_DWORD *)(v20 + 152) = 0;
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_28;
      case 2u:
        v20 = operator new();
        *(_QWORD *)v20 = &off_24DF368C8;
        *(_DWORD *)(v20 + 72) = 0;
        v23 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v23)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          v20 = *(_QWORD *)(a1 + 8);
        }
LABEL_28:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_97:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 3u:
        *(_WORD *)(a1 + 100) |= 1u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v24);
        goto LABEL_88;
      case 4u:
        *(_WORD *)(a1 + 100) |= 2u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_88;
      case 5u:
        *(_WORD *)(a1 + 100) |= 0x80u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v26);
        goto LABEL_88;
      case 6u:
        *(_WORD *)(a1 + 100) |= 0x20u;
        v27 = *((_QWORD *)this + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v27);
        goto LABEL_88;
      case 7u:
        *(_WORD *)(a1 + 100) |= 0x40u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v28);
        goto LABEL_88;
      case 8u:
        *(_WORD *)(a1 + 100) |= 4u;
        v29 = *((_QWORD *)this + 1);
        if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v29);
        goto LABEL_88;
      case 9u:
        *(_WORD *)(a1 + 100) |= 8u;
        v30 = *((_QWORD *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
          goto LABEL_54;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v30);
        goto LABEL_88;
      case 0xAu:
        *(_WORD *)(a1 + 100) |= 0x10u;
        v31 = *((_QWORD *)this + 1);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v31);
LABEL_88:
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
LABEL_54:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_97;
      case 0xBu:
        *(_WORD *)(a1 + 100) |= 0x400u;
        v32 = *((_QWORD *)this + 1);
        if (v32 >= *((_QWORD *)this + 2))
        {
          v35 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v33 = v32 + 1;
          v34 = *(unsigned __int8 *)(*(_QWORD *)this + v32);
          *((_QWORD *)this + 1) = v33;
          v35 = v34 != 0;
        }
        *(_BYTE *)(a1 + 96) = v35;
        goto LABEL_97;
      case 0xCu:
        *(_WORD *)(a1 + 100) |= 0x200u;
        v36 = *((_QWORD *)this + 1);
        v37 = *((_QWORD *)this + 2);
        v38 = *(_QWORD *)this;
        if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
        {
          v39 = 0;
          v40 = 0;
          v41 = 0;
          do
          {
            v42 = v36 + 1;
            *((_QWORD *)this + 1) = v36 + 1;
            v43 = *(_BYTE *)(v38 + v36);
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if ((v43 & 0x80) == 0)
              goto LABEL_92;
            v39 += 7;
            v36 = v42;
            v14 = v40++ > 8;
          }
          while (!v14);
LABEL_79:
          LODWORD(v41) = 0;
          goto LABEL_92;
        }
        v52 = 0;
        v53 = 0;
        v41 = 0;
        if (v37 <= v36)
          v37 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v37 == v36)
          {
            LODWORD(v41) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v36 + 1;
            v55 = *(_BYTE *)(v38 + v36);
            *((_QWORD *)this + 1) = v54;
            v41 |= (unint64_t)(v55 & 0x7F) << v52;
            if (v55 < 0)
            {
              v52 += 7;
              v36 = v54;
              v14 = v53++ > 8;
              if (v14)
                goto LABEL_79;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v41) = 0;
          }
          break;
        }
LABEL_92:
        *(_DWORD *)(a1 + 92) = v41;
        goto LABEL_97;
      case 0xDu:
        *(_WORD *)(a1 + 100) |= 0x100u;
        v44 = *((_QWORD *)this + 1);
        v45 = *((_QWORD *)this + 2);
        v46 = *(_QWORD *)this;
        if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          do
          {
            v50 = v44 + 1;
            *((_QWORD *)this + 1) = v44 + 1;
            v51 = *(_BYTE *)(v46 + v44);
            v49 |= (unint64_t)(v51 & 0x7F) << v47;
            if ((v51 & 0x80) == 0)
              goto LABEL_96;
            v47 += 7;
            v44 = v50;
            v14 = v48++ > 8;
          }
          while (!v14);
LABEL_86:
          LODWORD(v49) = 0;
          goto LABEL_96;
        }
        v56 = 0;
        v57 = 0;
        v49 = 0;
        if (v45 <= v44)
          v45 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v45 == v44)
          {
            LODWORD(v49) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v58 = v44 + 1;
            v59 = *(_BYTE *)(v46 + v44);
            *((_QWORD *)this + 1) = v58;
            v49 |= (unint64_t)(v59 & 0x7F) << v56;
            if (v59 < 0)
            {
              v56 += 7;
              v44 = v58;
              v14 = v57++ > 8;
              if (v14)
                goto LABEL_86;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v49) = 0;
          }
          break;
        }
LABEL_96:
        *(_DWORD *)(a1 + 88) = v49;
        goto LABEL_97;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_97;
    }
  }
}

uint64_t sub_21B810CE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  __int16 v6;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 24));
    v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 100) & 0x100) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B810E60(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36938;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_21B810E78(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B810E9C(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36938;
  *(_DWORD *)(a1 + 96) = 0;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x40) != 0)
  {
    result = *(double *)(a2 + 56);
    v3 = 64;
    *(_WORD *)(a1 + 96) = 64;
    *(double *)(a1 + 56) = result;
    v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x400) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 88);
    v3 |= 0x400u;
    *(_WORD *)(a1 + 96) = v3;
    *(double *)(a1 + 88) = result;
    v2 = *(_WORD *)(a2 + 96);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 96) = v3;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_WORD *)(a2 + 96);
  if ((v2 & 0x80) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 8);
    *(_WORD *)(a1 + 96) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_23:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 96) = v3;
  *(double *)(a1 + 64) = result;
  if ((*(_WORD *)(a2 + 96) & 1) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B810FEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bobbiness", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bufferAvgSampleRateHz", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "concavityDeltaDeg", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "deltaInertialZVel", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "horizontalDisplacement", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "impulseDurationSec", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "likelihoodRatio", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "peakiness", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "thetaRollFaceDeg", *(double *)(a1 + 80));
    if ((*(_WORD *)(a1 + 96) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "timeSinceLastStepSec", *(double *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B81117C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 96) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 96) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 96) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_58:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B811560(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  if ((*(_WORD *)(v3 + 96) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

_QWORD *sub_21B8116B8(_QWORD *result)
{
  *result = &off_24DF36970;
  result[1] = 0;
  return result;
}

void sub_21B8116C8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36970;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B811708(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF36970;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B81175C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF36970;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B84BAE4(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B8117D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B811828(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B84B978(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8119F0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B811A0C(_QWORD *result)
{
  *result = &off_24DF369A8;
  result[1] = 0;
  return result;
}

void sub_21B811A1C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF369A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B811A5C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF369A8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B811AB0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF369A8;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B84BAE4(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B811B2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B811B7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B84B978(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B811D44(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B811D60(uint64_t result)
{
  *(_QWORD *)result = &off_24DF369E0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B811D78(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B811D9C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  double result;
  int v6;

  *(_QWORD *)a1 = &off_24DF369E0;
  *(_DWORD *)(a1 + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 8) != 0)
  {
    v4 = *(_DWORD *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 40) = 8;
    *(_DWORD *)(a1 + 32) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 40) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      result = *(double *)(a2 + 24);
      *(_BYTE *)(a1 + 40) = v3 | 4;
      *(double *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v6 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 36) = v6;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B811E44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bin");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "kValue", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 40) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B811F14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_66:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_67;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_46;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_46:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B812310(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 40) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_21B8123C0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36A18;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_21B8123D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B8123FC(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  *(_QWORD *)result = &off_24DF36A18;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_WORD *)(result + 92) = 256;
    *(_QWORD *)(result + 72) = v4;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(result + 92) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 92);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 40) = v7;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v8;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 88);
  v3 |= 0x800u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 88) = v9;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 84);
  v3 |= 0x400u;
  *(_WORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v10;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_QWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 64) = v11;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 48) = v12;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 24) = v13;
  v2 = *(_WORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_15:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_26:
    v15 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(result + 92) = v3 | 0x200;
    *(_DWORD *)(result + 80) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(result + 92) = v3;
  *(_QWORD *)(result + 56) = v14;
  if ((*(_WORD *)(a2 + 92) & 0x200) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_21B812568(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "gpsSource", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "kvalue", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "kvalueTrack", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "percentGrade", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "runningFormStrideLength", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "runningFormStrideLengthMetrics");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "session");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 72));
    if ((*(_WORD *)(a1 + 92) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x100) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "steps");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B812718(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_99;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_98:
                    v2 = v41 + 1;
                    goto LABEL_99;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_98;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_99;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_99:
              *(_DWORD *)(a1 + 88) = v25;
              goto LABEL_110;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_103:
                    v2 = v45 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_103;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_104;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 84) = v31;
              goto LABEL_110;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_94:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_110;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_108:
                    v2 = v49 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_108;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_109;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 80) = v37;
LABEL_110:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_110;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B812D50(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  if ((*(_WORD *)(v3 + 92) & 0x200) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B812EC4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36A50;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_21B812EDC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B812F00(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  float result;
  char v7;
  int v8;
  int v9;

  *(_QWORD *)a1 = &off_24DF36A50;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 56) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 56) = v3;
    *(_DWORD *)(a1 + 32) = v5;
    v2 = *(_WORD *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(float *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(a1 + 56) = v3;
    *(float *)(a1 + 20) = result;
    v2 = *(_WORD *)(a2 + 56);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(float *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 56) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v7 = *(_BYTE *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 52) = v7;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 16) = v8;
  v2 = *(_WORD *)(a2 + 56);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_24:
    result = *(float *)(a2 + 36);
    *(_WORD *)(a1 + 56) = v3 | 0x40;
    *(float *)(a1 + 36) = result;
    return result;
  }
LABEL_23:
  v9 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 44) = v9;
  if ((*(_WORD *)(a2 + 56) & 0x40) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B813050(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "classifierCall");
    v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "featureSlope", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "maxAccel", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "maxMinPressure", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "model");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "sCal", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "slopeNxCorr", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "state");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "xCorr", *(float *)(a1 + 48));
    if ((*(_WORD *)(a1 + 56) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "timestamp");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "zoh");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8131E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_107:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_108;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_108:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_124;
            case 2u:
              *(_WORD *)(a1 + 56) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    v2 = v53 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_112;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_113;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_124;
            case 3u:
              *(_WORD *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 56) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 56) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_71;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 56) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 52) = v34;
              goto LABEL_124;
            case 9u:
              *(_WORD *)(a1 + 56) |= 2u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_117:
                    v2 = v57 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_117;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_118;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 16) = v39;
              goto LABEL_124;
            case 0xAu:
              *(_WORD *)(a1 + 56) |= 0x100u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_123;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_122:
                    v2 = v61 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_122;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_123;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_123:
              *(_DWORD *)(a1 + 44) = v45;
LABEL_124:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 56) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_103:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_71:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_124;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_124;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8138A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 56);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 56) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_21B8139F8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36A88;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B813A10(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B813A34(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;

  *(_QWORD *)a1 = &off_24DF36A88;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 8) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 28);
    v3 = 8;
    *(_BYTE *)(a1 + 32) = 8;
    *(_DWORD *)(a1 + 28) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 24) = LODWORD(result);
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(a1 + 32) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B813AC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dirAngleRad", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "peakTimestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extremaVal", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "valleyTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B813B70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_30;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_30:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B813DD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B813E68(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36AC0;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B813E88(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B813EAC(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  *(_QWORD *)result = &off_24DF36AC0;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 44) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_BYTE *)(result + 44) = v3;
    *(_DWORD *)(result + 36) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 28) = v8;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_16:
    v10 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(result + 44) = v3 | 0x40;
    *(_DWORD *)(result + 40) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(_QWORD *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 44) & 0x40) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B813F94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "tapCounter");
    if ((*(_BYTE *)(a1 + 44) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "tapAcceptStatus");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8140A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_85:
                    v2 = v41 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_90:
                    v2 = v45 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_47;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_47:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_81;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_80:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_81:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_95:
                    v2 = v49 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_97:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B8145CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B8146B4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF36AF8;
  *(_DWORD *)(a1 + 28) = -2;
  result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_21B89F2D0;
  return result;
}

void sub_21B8146DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B814700(uint64_t a1, uint64_t a2)
{
  double result;
  __int16 v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  *(_QWORD *)a1 = &off_24DF36AF8;
  *(_DWORD *)(a1 + 28) = -2;
  result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_21B89F2D0;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v4 = 2;
    *(_WORD *)(a1 + 64) = 2;
    *(double *)(a1 + 16) = result;
    v3 = *(_WORD *)(a2 + 64);
    if ((v3 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v4 = 0;
  if ((v3 & 0x20) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 36);
    v4 |= 0x20u;
    *(_WORD *)(a1 + 64) = v4;
    *(_DWORD *)(a1 + 36) = v5;
    v3 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v3 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 56);
    v4 |= 0x400u;
    *(_WORD *)(a1 + 64) = v4;
    *(_DWORD *)(a1 + 56) = v6;
    v3 = *(_WORD *)(a2 + 64);
    if ((v3 & 4) == 0)
    {
LABEL_8:
      if ((v3 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 24);
  v4 |= 4u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 24) = v7;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x10) == 0)
  {
LABEL_9:
    if ((v3 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_DWORD *)(a2 + 32);
  v4 |= 0x10u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 32) = v8;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x200) == 0)
  {
LABEL_10:
    if ((v3 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 52);
  v4 |= 0x200u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 52) = v9;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x800) == 0)
  {
LABEL_11:
    if ((v3 & 8) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 60);
  v4 |= 0x800u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 60) = v10;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 8) == 0)
  {
LABEL_12:
    if ((v3 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 28);
  v4 |= 8u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 28) = v11;
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x100) == 0)
  {
LABEL_13:
    if ((v3 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v4 |= 0x100u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x80) == 0)
  {
LABEL_14:
    if ((v3 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v4 |= 0x80u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v3 = *(_WORD *)(a2 + 64);
  if ((v3 & 0x40) == 0)
  {
LABEL_15:
    if ((v3 & 1) == 0)
      return result;
LABEL_26:
    result = *(double *)(a2 + 8);
    *(_WORD *)(a1 + 64) = v4 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_25:
  LODWORD(result) = *(_DWORD *)(a2 + 40);
  v4 |= 0x40u;
  *(_WORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 40) = LODWORD(result);
  if ((*(_WORD *)(a2 + 64) & 1) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_21B81487C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "axis");
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "clippedPeakType");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "direction");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "location");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "peakValue", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "strideDirection");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
    if ((*(_WORD *)(a1 + 64) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "tapDetectStatus");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "widthCalculationMethod");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B814A2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_139;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v65 = v21++;
                  v66 = *(_BYTE *)(v22 + v65);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_144:
                    v2 = v65 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_144;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_145;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 36) = v25;
              goto LABEL_176;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v69 = v27++;
                  v70 = *(_BYTE *)(v28 + v69);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_149:
                    v2 = v69 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_149;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_150;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_176;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v73 = v33++;
                  v74 = *(_BYTE *)(v34 + v73);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_154:
                    v2 = v73 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_154;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_155;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_155:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_176;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  v77 = v39++;
                  v78 = *(_BYTE *)(v40 + v77);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_159:
                    v2 = v77 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_159;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_160;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_160:
              *(_DWORD *)(a1 + 32) = v43;
              goto LABEL_176;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_165;
                  }
                  v81 = v45++;
                  v82 = *(_BYTE *)(v46 + v81);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_164:
                    v2 = v81 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_164;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_165;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 52) = v49;
              goto LABEL_176;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_170;
                  }
                  v85 = v51++;
                  v86 = *(_BYTE *)(v52 + v85);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_169:
                    v2 = v85 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_169;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_170;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_176;
            case 8u:
              *(_WORD *)(a1 + 64) |= 8u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_175;
                  }
                  v89 = v57++;
                  v90 = *(_BYTE *)(v58 + v89);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_174:
                    v2 = v89 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_174;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_175;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_176:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_85;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_88;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_85:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_140;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_139:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_140:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_88:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_176;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_176;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B81533C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B8154B0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36B30;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_21B8154CC(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_24DF36B30;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B815524(PB::Base *a1)
{
  sub_21B8154CC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B815548(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_24DF36B30;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  if (*(_QWORD *)(a2 + 80))
  {
    v5 = operator new();
    v6 = sub_21B7ACF5C(v5, *(_QWORD *)(a2 + 80));
    v7 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x80) != 0)
  {
    v11 = *(_DWORD *)(a2 + 92);
    *(_WORD *)(a1 + 104) |= 0x80u;
    *(_DWORD *)(a1 + 92) = v11;
    v8 = *(_WORD *)(a2 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v12 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) |= 0x40u;
  *(_DWORD *)(a1 + 88) = v12;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v13 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) |= 0x100u;
  *(_DWORD *)(a1 + 96) = v13;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v14 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) |= 0x200u;
  *(_DWORD *)(a1 + 100) = v14;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v15 = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 104) |= 2u;
  *(_QWORD *)(a1 + 40) = v15;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v16 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 104) |= 4u;
  *(_QWORD *)(a1 + 48) = v16;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v17 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 104) |= 0x10u;
  *(_QWORD *)(a1 + 64) = v17;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0)
      goto LABEL_15;
LABEL_26:
    v19 = *(_QWORD *)(a2 + 32);
    *(_WORD *)(a1 + 104) |= 1u;
    *(_QWORD *)(a1 + 32) = v19;
    if ((*(_WORD *)(a2 + 104) & 8) == 0)
      return a1;
    goto LABEL_16;
  }
LABEL_25:
  v18 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 104) |= 0x20u;
  *(_QWORD *)(a1 + 72) = v18;
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 1) != 0)
    goto LABEL_26;
LABEL_15:
  if ((v8 & 8) != 0)
  {
LABEL_16:
    v9 = *(_QWORD *)(a2 + 56);
    *(_WORD *)(a1 + 104) |= 8u;
    *(_QWORD *)(a1 + 56) = v9;
  }
  return a1;
}

uint64_t sub_21B81573C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_WORD *)(a1 + 104) & 1) != 0)
    PB::TextFormatter::format(this, "auxiliaryIosTimeUncertainty", *(double *)(a1 + 32));
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "filteredAcceleration", v7);
  }
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "quiescentMode");
    v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 92));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "sensorTimeBeforeAlignment", *(double *)(a1 + 40));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "sentCftime", *(double *)(a1 + 48));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "sequenceNumber");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "sourceIosTimeUncertainty", *(double *)(a1 + 56));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_25:
  PB::TextFormatter::format(this, "sourceReceiveCftime", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 104) & 0x20) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "sourceReceiveSensorTimestamp", *(double *)(a1 + 72));
LABEL_14:
  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "super");
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0)
    PB::TextFormatter::format(this, "version", *(float *)(a1 + 100));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B815900(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  unint64_t v83;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          v23 = sub_21B7ADDE4(v22);
          v24 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 80) = v22;
          if (v24)
          {
            (*(void (**)(uint64_t, double))(*(_QWORD *)v24 + 8))(v24, v23);
            v22 = *(_QWORD *)(a1 + 80);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) != 0)
          {
            goto LABEL_27;
          }
          return 0;
        case 2u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v8;
                v31 = (v28 - (_BYTE *)*v8) >> 2;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_148;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_21B796CD8(v9, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[4 * v31];
                *(_DWORD *)v36 = 0;
                v29 = v36 + 4;
                while (v28 != v30)
                {
                  v37 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[4 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_DWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v25;
            }
LABEL_27:
            PB::Reader::recallMark();
          }
          else
          {
            v65 = *(char **)(a1 + 16);
            v64 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              v75 = (char *)*v8;
              v76 = (v65 - (_BYTE *)*v8) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
LABEL_148:
                sub_21B796A0C();
              v78 = v64 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_21B796CD8(v9, v79);
                v75 = *(char **)(a1 + 8);
                v65 = *(char **)(a1 + 16);
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              v66 = v81 + 4;
              while (v65 != v75)
              {
                v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v81;
              *(_QWORD *)(a1 + 16) = v66;
              *(_QWORD *)(a1 + 24) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v65 = 0;
              v66 = v65 + 4;
            }
            *(_QWORD *)(a1 + 16) = v66;
            v83 = *((_QWORD *)this + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((_QWORD *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(_QWORD *)this + v83);
LABEL_136:
              v63 = *((_QWORD *)this + 1) + 4;
LABEL_137:
              *((_QWORD *)this + 1) = v63;
            }
            else
            {
LABEL_134:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_138:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_136;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          v42 = *(_QWORD *)this;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)this + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_121;
              v43 += 7;
              v40 = v46;
              v16 = v44++ > 8;
            }
            while (!v16);
LABEL_101:
            LODWORD(v45) = 0;
            goto LABEL_121;
          }
          v67 = 0;
          v68 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v69 = v40 + 1;
              v70 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)this + 1) = v69;
              v45 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                v40 = v69;
                v16 = v68++ > 8;
                if (v16)
                  goto LABEL_101;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_121:
          *(_DWORD *)(a1 + 88) = v45;
          goto LABEL_138;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          v50 = *(_QWORD *)this;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)this + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_124;
              v51 += 7;
              v48 = v54;
              v16 = v52++ > 8;
            }
            while (!v16);
LABEL_108:
            LODWORD(v53) = 0;
            goto LABEL_124;
          }
          v71 = 0;
          v72 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v73 = v48 + 1;
              v74 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)this + 1) = v73;
              v53 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v48 = v73;
                v16 = v72++ > 8;
                if (v16)
                  goto LABEL_108;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_124:
          *(_DWORD *)(a1 + 96) = v53;
          goto LABEL_138;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x200u;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_136;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v57);
          goto LABEL_92;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v58);
          goto LABEL_92;
        case 9u:
          *(_WORD *)(a1 + 104) |= 0x10u;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v59);
          goto LABEL_92;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x20u;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFF7 || v60 + 8 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v60);
          goto LABEL_92;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 1u;
          v61 = *((_QWORD *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v61);
          goto LABEL_92;
        case 0xCu:
          *(_WORD *)(a1 + 104) |= 8u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)this + 2))
            goto LABEL_134;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v62);
LABEL_92:
          v63 = *((_QWORD *)this + 1) + 8;
          goto LABEL_137;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_138;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B81608C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 80);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 92));
    v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 1) == 0)
  {
LABEL_15:
    if ((v8 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 56));
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 104) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56));
  return result;
}

uint64_t sub_21B816208(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36B68;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_21B816220(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF36B68;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B816260(PB::Base *a1)
{
  sub_21B816220(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B816284(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_24DF36B68;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  v5 = *(_WORD *)(a2 + 96);
  if ((v5 & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 64);
    v6 = 16;
    *(_WORD *)(a1 + 96) = 16;
    *(_QWORD *)(a1 + 64) = v7;
    v5 = *(_WORD *)(a2 + 96);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_WORD *)(a2 + 96) & 0x200) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 88);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 96) = v6;
    *(_DWORD *)(a1 + 88) = v8;
    v5 = *(_WORD *)(a2 + 96);
  }
LABEL_6:
  if ((v5 & 0x80) == 0)
  {
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = *(_DWORD *)(a2 + 80);
  v6 |= 0x80u;
  *(_WORD *)(a1 + 96) = v6;
  *(_DWORD *)(a1 + 80) = v13;
  if ((*(_WORD *)(a2 + 96) & 0x100) != 0)
  {
LABEL_8:
    v9 = *(_DWORD *)(a2 + 84);
    *(_WORD *)(a1 + 96) = v6 | 0x100;
    *(_DWORD *)(a1 + 84) = v9;
  }
LABEL_9:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 0x400) != 0)
  {
    v14 = *(_BYTE *)(a2 + 92);
    *(_WORD *)(a1 + 96) |= 0x400u;
    *(_BYTE *)(a1 + 92) = v14;
    v10 = *(_WORD *)(a2 + 96);
    if ((v10 & 0x20) == 0)
    {
LABEL_13:
      if ((v10 & 0x40) == 0)
        goto LABEL_14;
      goto LABEL_24;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_13;
  }
  v15 = *(_DWORD *)(a2 + 72);
  *(_WORD *)(a1 + 96) |= 0x20u;
  *(_DWORD *)(a1 + 72) = v15;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 0x40) == 0)
  {
LABEL_14:
    if ((v10 & 8) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v16 = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 96) |= 0x40u;
  *(_DWORD *)(a1 + 76) = v16;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 8) == 0)
  {
LABEL_15:
    if ((v10 & 1) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  v17 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 96) |= 8u;
  *(_QWORD *)(a1 + 56) = v17;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 1) == 0)
  {
LABEL_16:
    if ((v10 & 4) == 0)
      goto LABEL_17;
LABEL_27:
    v19 = *(_QWORD *)(a2 + 48);
    *(_WORD *)(a1 + 96) |= 4u;
    *(_QWORD *)(a1 + 48) = v19;
    if ((*(_WORD *)(a2 + 96) & 2) == 0)
      return a1;
    goto LABEL_18;
  }
LABEL_26:
  v18 = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 96) |= 1u;
  *(_QWORD *)(a1 + 32) = v18;
  v10 = *(_WORD *)(a2 + 96);
  if ((v10 & 4) != 0)
    goto LABEL_27;
LABEL_17:
  if ((v10 & 2) != 0)
  {
LABEL_18:
    v11 = *(_QWORD *)(a2 + 40);
    *(_WORD *)(a1 + 96) |= 2u;
    *(_QWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t sub_21B816434(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  __int16 v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "angularVelocityConstraintRps", *(float *)(a1 + 72));
    v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consumedAuxTimestamp", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "dthetaNormRad", *(float *)(a1 + 76));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inBTZ");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "listenerPitch", *(float *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "listenerRoll", *(float *)(a1 + 84));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_23:
  PB::TextFormatter::format(this, "listenerYaw", *(float *)(a1 + 88));
  if ((*(_WORD *)(a1 + 96) & 2) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 40));
LABEL_10:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }
  v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 4) == 0)
  {
    if ((v9 & 8) == 0)
      goto LABEL_14;
LABEL_26:
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 96) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "receivedAuxTimestamp", *(double *)(a1 + 48));
  v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 8) != 0)
    goto LABEL_26;
LABEL_14:
  if ((v9 & 0x10) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B816600(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_81;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_106;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x80u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_106;
        case 4u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_106;
        case 5u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v26 = *((_QWORD *)this + 1);
            v27 = *((_QWORD *)this + 2);
            while (v26 < v27 && !*((_BYTE *)this + 24))
            {
              v29 = *(char **)(a1 + 16);
              v28 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v29 >= v28)
              {
                v31 = (char *)*v8;
                v32 = (v29 - (_BYTE *)*v8) >> 2;
                v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 62)
                  goto LABEL_116;
                v34 = v28 - (_QWORD)v31;
                if (v34 >> 1 > v33)
                  v33 = v34 >> 1;
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                  v35 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v35 = v33;
                if (v35)
                {
                  v36 = (char *)sub_21B796CD8(v9, v35);
                  v31 = *(char **)(a1 + 8);
                  v29 = *(char **)(a1 + 16);
                }
                else
                {
                  v36 = 0;
                }
                v37 = &v36[4 * v32];
                *(_DWORD *)v37 = 0;
                v30 = v37 + 4;
                while (v29 != v31)
                {
                  v38 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *((_DWORD *)v37 - 1) = v38;
                  v37 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v37;
                *(_QWORD *)(a1 + 16) = v30;
                *(_QWORD *)(a1 + 24) = &v36[4 * v35];
                if (v31)
                  operator delete(v31);
              }
              else
              {
                *(_DWORD *)v29 = 0;
                v30 = v29 + 4;
              }
              *(_QWORD *)(a1 + 16) = v30;
              v39 = *((_QWORD *)this + 1);
              if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
              v27 = *((_QWORD *)this + 2);
              v26 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v26;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v52 = *(char **)(a1 + 16);
            v51 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v8;
              v55 = (v52 - (_BYTE *)*v8) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
LABEL_116:
                sub_21B796A0C();
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_21B796CD8(v9, v58);
                v54 = *(char **)(a1 + 8);
                v52 = *(char **)(a1 + 16);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v60;
              *(_QWORD *)(a1 + 16) = v53;
              *(_QWORD *)(a1 + 24) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 16) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((_QWORD *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
LABEL_106:
              v50 = *((_QWORD *)this + 1) + 4;
LABEL_107:
              *((_QWORD *)this + 1) = v50;
            }
            else
            {
LABEL_104:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_108:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          v40 = *((_QWORD *)this + 1);
          if (v40 >= *((_QWORD *)this + 2))
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
            *((_QWORD *)this + 1) = v41;
            v43 = v42 != 0;
          }
          *(_BYTE *)(a1 + 92) = v43;
          goto LABEL_108;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_106;
        case 8u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_106;
        case 9u:
          *(_WORD *)(a1 + 96) |= 8u;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v46);
          goto LABEL_81;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 1u;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v47);
          goto LABEL_81;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 4u;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v48);
          goto LABEL_81;
        case 0xCu:
          *(_WORD *)(a1 + 96) |= 2u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)this + 2))
            goto LABEL_104;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v49);
LABEL_81:
          v50 = *((_QWORD *)this + 1) + 8;
          goto LABEL_107;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_108;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B816C10(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;

  v3 = result;
  v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
LABEL_19:
      result = PB::Writer::write(this, *(float *)(v3 + 80));
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0)
    goto LABEL_19;
LABEL_4:
  if ((v4 & 0x100) != 0)
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 84));
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    result = PB::Writer::write(this);
    v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) == 0)
  {
LABEL_15:
    if ((v8 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_WORD *)(v3 + 96) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

_QWORD *sub_21B816D94(_QWORD *result)
{
  *result = &off_24DF36BA0;
  result[2] = 0;
  return result;
}

void sub_21B816DAC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B816DD0(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)result = &off_24DF36BA0;
  *(_QWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = 2;
    *(_DWORD *)(result + 16) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = v2;
    *(_QWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_21B816E20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "source");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B816E88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              v30 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              v30 = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            v30 = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              v30 = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_QWORD *)(a1 + 8) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8171B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B817208(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36BD8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B817220(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B817244(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF36BD8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B817294(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "touchDetected");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8172FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B8174E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B817538(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36C10;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_21B817550(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B817574(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  *(_QWORD *)result = &off_24DF36C10;
  *(_DWORD *)(result + 40) = 0;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x10) != 0)
  {
    v4 = *(_DWORD *)(a2 + 28);
    v3 = 16;
    *(_BYTE *)(result + 40) = 16;
    *(_DWORD *)(result + 28) = v4;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 40) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 40);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 40) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 16) = v7;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(result + 40) = v3;
  *(_DWORD *)(result + 32) = v8;
  v2 = *(_BYTE *)(a2 + 40);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_16:
    v10 = *(_BYTE *)(a2 + 36);
    *(_BYTE *)(result + 40) = v3 | 0x40;
    *(_BYTE *)(result + 36) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 40) = v3;
  *(_QWORD *)(result + 8) = v9;
  if ((*(_BYTE *)(a2 + 40) & 0x40) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B817654(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "distanceToTrackMeters", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedLaneConfidence");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "estimatedLaneNumber");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "laneCount");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "odometerHasBeenCorrected");
    if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "laneNumber");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "trackProximity");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B817764(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_105:
                v2 = v55 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_106;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_127;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v59 = v27++;
                  v60 = *(_BYTE *)(v28 + v59);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v59 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v63 = v33++;
                  v64 = *(_BYTE *)(v34 + v63);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    v2 = v63 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_115;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_116;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_121;
                  }
                  v67 = v39++;
                  v68 = *(_BYTE *)(v40 + v67);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    v2 = v67 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_120;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_121;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 16) = v43;
              goto LABEL_127;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v71 = v45++;
                  v72 = *(_BYTE *)(v46 + v71);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    v2 = v71 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_125;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_126;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_127;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 36) = v52;
              goto LABEL_127;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_127;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B817DF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B817EE0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36C48;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_21B817EF8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B817F1C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24DF36C48;
  *(_DWORD *)(a1 + 56) = 0;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(a1 + 56) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 56) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 56) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 56);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v2 = *(_BYTE *)(a2 + 56);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  v2 = *(_BYTE *)(a2 + 56);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = v3 | 0x20;
    *(double *)(a1 + 48) = result;
    return result;
  }
LABEL_13:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 56) = v3;
  *(double *)(a1 + 40) = result;
  if ((*(_BYTE *)(a2 + 56) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B817FE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cycleIndex");
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "error");
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "machAbsoluteTimestamp", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "range", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "rssi", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B8180D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_49;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_65;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_49;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_65;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 1u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_70;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_69:
                    v2 = v35 + 1;
                    goto LABEL_70;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_69;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_70;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_70:
              *(_QWORD *)(a1 + 8) = v25;
              goto LABEL_76;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_75;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_74:
                    v2 = v39 + 1;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_74;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_75;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_75:
              *(_QWORD *)(a1 + 16) = v31;
LABEL_76:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_49;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_65;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_65:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_49:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_76;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_76;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B818504(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48));
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48));
  return result;
}

uint64_t sub_21B8185D0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36C80;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B8185E8(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF36C80;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B81862C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24DF36C80;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B818684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_24DF36C80;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = operator new();
    v5 = sub_21B799F04(v4, *(_QWORD *)(a2 + 16));
    v6 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a1;
}

uint64_t sub_21B818724(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "aopTimestamp");
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B818790(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v31 = 0;
          v32 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v33 = v22 + 1;
            v34 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v33;
            v27 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v22 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              v27 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            v27 = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B799E24(v20);
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 16);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B818A48(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B818A9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36CB8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B818AB0(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24DF36CB8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_21B818AF0(PB::Base *a1)
{
  sub_21B818AB0(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B818B14(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24DF36CB8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v5;
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v6 = operator new();
    v7 = v6;
    v8 = *(__int128 **)(a2 + 8);
    if (*((char *)v8 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v6, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v6 = v9;
    }
    v10 = *v4;
    *v4 = v7;
    if (v10)
      sub_21B796830((uint64_t)v4, v10);
  }
  return a1;
}

uint64_t sub_21B818BDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B818C40(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v26 = 0;
        v23 = *v8;
        *v8 = (uint64_t)v22;
        if (v23)
        {
          sub_21B796830((uint64_t)v8, v23);
          v24 = v26;
          v26 = 0;
          if (v24)
            sub_21B796830((uint64_t)&v26, v24);
        }
        PB::Reader::read();
      }
      else if ((v12 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v21 = *((_QWORD *)this + 1);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v21);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B818E44(uint64_t result, PB::Writer *this)
{
  uint64_t v2;

  v2 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 16));
  if (*(_QWORD *)(v2 + 8))
    return PB::Writer::write();
  return result;
}

double sub_21B818E98(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF36CF0;
  *(_QWORD *)(a1 + 336) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

void sub_21B818EF8(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  *(_QWORD *)this = &off_24DF36CF0;
  v2 = (void *)*((_QWORD *)this + 34);
  if (v2)
  {
    *((_QWORD *)this + 35) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 32) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 28);
  if (v4)
  {
    *((_QWORD *)this + 29) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 22);
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 4);
  if (v12)
  {
    *((_QWORD *)this + 5) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 1);
  if (v13)
  {
    *((_QWORD *)this + 2) = v13;
    operator delete(v13);
  }
  PB::Base::~Base(this);
}

void sub_21B818FE8(PB::Base *a1)
{
  sub_21B818EF8(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81900C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = &off_24DF36CF0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = (char *)(a1 + 200);
  *(_OWORD *)(a1 + 248) = 0u;
  v9 = (char *)(a1 + 248);
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v10 = *(_BYTE *)(a2 + 340);
  if ((v10 & 0x40) != 0)
  {
    v12 = *(_DWORD *)(a2 + 336);
    v11 = 64;
    *(_BYTE *)(a1 + 340) = 64;
    *(_DWORD *)(a1 + 336) = v12;
    v10 = *(_BYTE *)(a2 + 340);
    if ((v10 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = 0;
  if ((*(_BYTE *)(a2 + 340) & 4) != 0)
  {
LABEL_5:
    v13 = *(_QWORD *)(a2 + 312);
    v11 |= 4u;
    *(_BYTE *)(a1 + 340) = v11;
    *(_QWORD *)(a1 + 312) = v13;
    v10 = *(_BYTE *)(a2 + 340);
  }
LABEL_6:
  if ((v10 & 1) != 0)
  {
    v19 = *(_QWORD *)(a2 + 296);
    v11 |= 1u;
    *(_BYTE *)(a1 + 340) = v11;
    *(_QWORD *)(a1 + 296) = v19;
    v10 = *(_BYTE *)(a2 + 340);
    if ((v10 & 8) == 0)
    {
LABEL_8:
      if ((v10 & 2) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if ((v10 & 8) == 0)
  {
    goto LABEL_8;
  }
  v20 = *(_QWORD *)(a2 + 320);
  v11 |= 8u;
  *(_BYTE *)(a1 + 340) = v11;
  *(_QWORD *)(a1 + 320) = v20;
  if ((*(_BYTE *)(a2 + 340) & 2) != 0)
  {
LABEL_9:
    v14 = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 340) = v11 | 2;
    *(_QWORD *)(a1 + 304) = v14;
  }
LABEL_10:
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 176), *(char **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
    sub_21B7968C4(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_21B7968C4((char *)(a1 + 272), *(char **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4((char *)(a1 + 224), *(char **)(a2 + 224), *(_QWORD *)(a2 + 232), (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3);
    sub_21B7968C4(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
    sub_21B7968C4((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
    sub_21B7968C4(v9, *(char **)(a2 + 248), *(_QWORD *)(a2 + 256), (uint64_t)(*(_QWORD *)(a2 + 256) - *(_QWORD *)(a2 + 248)) >> 3);
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B7968C4(v8, *(char **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 3);
    sub_21B7968C4((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_21B7968C4(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v15 = *(_BYTE *)(a2 + 340);
  if ((v15 & 0x20) != 0)
  {
    v16 = *(_DWORD *)(a2 + 332);
    *(_BYTE *)(a1 + 340) |= 0x20u;
    *(_DWORD *)(a1 + 332) = v16;
    v15 = *(_BYTE *)(a2 + 340);
  }
  if ((v15 & 0x10) != 0)
  {
    v17 = *(_DWORD *)(a2 + 328);
    *(_BYTE *)(a1 + 340) |= 0x10u;
    *(_DWORD *)(a1 + 328) = v17;
  }
  return a1;
}

uint64_t sub_21B819280(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  double v23;
  char v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double *v29;
  double v30;
  double *v31;
  double *v32;
  double v33;
  double *v34;
  double *v35;
  double v36;
  char v37;
  double *v38;
  double *v39;
  double v40;
  double *v41;
  double *v42;
  double v43;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accelBias", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "accelBiasCov", v10);
  }
  v11 = *(_BYTE *)(a1 + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "cameraImageResolutionHeight", *(float *)(a1 + 328));
    v11 = *(_BYTE *)(a1 + 340);
  }
  if ((v11 & 0x20) != 0)
    PB::TextFormatter::format(this, "cameraImageResolutionWidth", *(float *)(a1 + 332));
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "cameraIntrinsics", v14);
  }
  v15 = *(double **)(a1 + 80);
  v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "cameraPose", v17);
  }
  v18 = *(double **)(a1 + 104);
  v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "gyroBias", v20);
  }
  v21 = *(double **)(a1 + 128);
  v22 = *(double **)(a1 + 136);
  while (v21 != v22)
  {
    v23 = *v21++;
    PB::TextFormatter::format(this, "gyroBiasCov", v23);
  }
  v24 = *(_BYTE *)(a1 + 340);
  if ((v24 & 1) != 0)
  {
    PB::TextFormatter::format(this, "machContinuousOriginTimestamp", *(double *)(a1 + 296));
    v24 = *(_BYTE *)(a1 + 340);
  }
  if ((v24 & 2) != 0)
    PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 304));
  v25 = *(double **)(a1 + 176);
  v26 = *(double **)(a1 + 184);
  while (v25 != v26)
  {
    v27 = *v25++;
    PB::TextFormatter::format(this, "orientation", v27);
  }
  v28 = *(double **)(a1 + 152);
  v29 = *(double **)(a1 + 160);
  while (v28 != v29)
  {
    v30 = *v28++;
    PB::TextFormatter::format(this, "orientationCov", v30);
  }
  if ((*(_BYTE *)(a1 + 340) & 4) != 0)
    PB::TextFormatter::format(this, "originTimestamp", *(double *)(a1 + 312));
  v31 = *(double **)(a1 + 224);
  v32 = *(double **)(a1 + 232);
  while (v31 != v32)
  {
    v33 = *v31++;
    PB::TextFormatter::format(this, "position", v33);
  }
  v34 = *(double **)(a1 + 200);
  v35 = *(double **)(a1 + 208);
  while (v34 != v35)
  {
    v36 = *v34++;
    PB::TextFormatter::format(this, "positionCov", v36);
  }
  v37 = *(_BYTE *)(a1 + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 320));
    v37 = *(_BYTE *)(a1 + 340);
  }
  if ((v37 & 0x40) != 0)
    PB::TextFormatter::format(this, "trackingState");
  v38 = *(double **)(a1 + 272);
  v39 = *(double **)(a1 + 280);
  while (v38 != v39)
  {
    v40 = *v38++;
    PB::TextFormatter::format(this, "velocity", v40);
  }
  v41 = *(double **)(a1 + 248);
  v42 = *(double **)(a1 + 256);
  while (v41 != v42)
  {
    v43 = *v41++;
    PB::TextFormatter::format(this, "velocityCov", v43);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B819594(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  _QWORD *v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  char *v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  _QWORD *v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  char *v193;
  _QWORD *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char v207;
  unsigned int v208;
  unint64_t v209;
  char v210;
  unint64_t v211;
  char *v212;
  _QWORD *v213;
  unint64_t v214;
  char *v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  char *v219;
  unint64_t v220;
  char *v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  unint64_t v226;
  char *v227;
  unint64_t v228;
  char *v229;
  unint64_t v230;
  char *v231;
  unint64_t v232;
  char *v233;
  unint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  char *v301;
  char *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void **v347;
  void **v348;
  void **v349;
  void **v350;
  void **v351;
  void **v352;
  void **v353;
  void **v354;
  void **v355;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v355 = (void **)(a1 + 56);
    v346 = a1 + 72;
    v354 = (void **)(a1 + 80);
    v345 = a1 + 96;
    v353 = (void **)(a1 + 200);
    v352 = (void **)(a1 + 32);
    v343 = a1 + 48;
    v344 = a1 + 216;
    v342 = a1 + 264;
    v350 = (void **)(a1 + 128);
    v351 = (void **)(a1 + 248);
    v349 = (void **)(a1 + 152);
    v340 = a1 + 168;
    v341 = a1 + 144;
    v339 = a1 + 240;
    v347 = (void **)(a1 + 8);
    v348 = (void **)(a1 + 224);
    v8 = (void **)(a1 + 272);
    v337 = a1 + 288;
    v338 = a1 + 24;
    v9 = (void **)(a1 + 104);
    v10 = (void **)(a1 + 176);
    v335 = a1 + 192;
    v336 = a1 + 120;
    while (1)
    {
      v11 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v14 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 340) |= 0x40u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_471;
              v27 += 7;
              v24 = v30;
              v17 = v28++ > 8;
            }
            while (!v17);
LABEL_347:
            LODWORD(v29) = 0;
            goto LABEL_471;
          }
          v207 = 0;
          v208 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v209 = v24 + 1;
              v210 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v209;
              v29 |= (unint64_t)(v210 & 0x7F) << v207;
              if (v210 < 0)
              {
                v207 += 7;
                v24 = v209;
                v17 = v208++ > 8;
                if (v17)
                  goto LABEL_347;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_471:
          *(_DWORD *)(a1 + 336) = v29;
          goto LABEL_562;
        case 2u:
          *(_BYTE *)(a1 + 340) |= 4u;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 312) = *(_QWORD *)(*(_QWORD *)this + v32);
          goto LABEL_560;
        case 3u:
          *(_BYTE *)(a1 + 340) |= 1u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)this + v33);
          goto LABEL_560;
        case 4u:
          *(_BYTE *)(a1 + 340) |= 8u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(*(_QWORD *)this + v34);
          goto LABEL_560;
        case 5u:
          *(_BYTE *)(a1 + 340) |= 2u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)this + v35);
          goto LABEL_560;
        case 6u:
          if (v23 != 2)
          {
            v212 = *(char **)(a1 + 184);
            v211 = *(_QWORD *)(a1 + 192);
            if ((unint64_t)v212 >= v211)
            {
              v236 = (char *)*v10;
              v237 = (v212 - (_BYTE *)*v10) >> 3;
              v238 = v237 + 1;
              if ((unint64_t)(v237 + 1) >> 61)
LABEL_572:
                sub_21B796A0C();
              v239 = v211 - (_QWORD)v236;
              if (v239 >> 2 > v238)
                v238 = v239 >> 2;
              if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF8)
                v240 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v240 = v238;
              if (v240)
              {
                v241 = (char *)sub_21B796A20(v335, v240);
                v236 = *(char **)(a1 + 176);
                v212 = *(char **)(a1 + 184);
              }
              else
              {
                v241 = 0;
              }
              v308 = &v241[8 * v237];
              *(_QWORD *)v308 = 0;
              v213 = v308 + 8;
              while (v212 != v236)
              {
                v309 = *((_QWORD *)v212 - 1);
                v212 -= 8;
                *((_QWORD *)v308 - 1) = v309;
                v308 -= 8;
              }
              *(_QWORD *)(a1 + 176) = v308;
              *(_QWORD *)(a1 + 184) = v213;
              *(_QWORD *)(a1 + 192) = &v241[8 * v240];
              if (v236)
                operator delete(v236);
            }
            else
            {
              *(_QWORD *)v212 = 0;
              v213 = v212 + 8;
            }
            *(_QWORD *)(a1 + 184) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v36 = *((_QWORD *)this + 1);
          v37 = *((_QWORD *)this + 2);
          while (v36 < v37 && !*((_BYTE *)this + 24))
          {
            v39 = *(char **)(a1 + 184);
            v38 = *(_QWORD *)(a1 + 192);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v10;
              v42 = (v39 - (_BYTE *)*v10) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                goto LABEL_572;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_21B796A20(v335, v45);
                v41 = *(char **)(a1 + 176);
                v39 = *(char **)(a1 + 184);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[8 * v42];
              *(_QWORD *)v47 = 0;
              v40 = v47 + 8;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v47 - 1) = v48;
                v47 -= 8;
              }
              *(_QWORD *)(a1 + 176) = v47;
              *(_QWORD *)(a1 + 184) = v40;
              *(_QWORD *)(a1 + 192) = &v46[8 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              v40 = v39 + 8;
            }
            *(_QWORD *)(a1 + 184) = v40;
            v49 = *((_QWORD *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v40 - 1) = *(_QWORD *)(*(_QWORD *)this + v49);
            v37 = *((_QWORD *)this + 2);
            v36 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v36;
          }
          goto LABEL_333;
        case 7u:
          if (v23 != 2)
          {
            v215 = *(char **)(a1 + 112);
            v214 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v215 >= v214)
            {
              v242 = (char *)*v9;
              v243 = (v215 - (_BYTE *)*v9) >> 3;
              v244 = v243 + 1;
              if ((unint64_t)(v243 + 1) >> 61)
LABEL_573:
                sub_21B796A0C();
              v245 = v214 - (_QWORD)v242;
              if (v245 >> 2 > v244)
                v244 = v245 >> 2;
              if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFF8)
                v246 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v246 = v244;
              if (v246)
              {
                v247 = (char *)sub_21B796A20(v336, v246);
                v242 = *(char **)(a1 + 104);
                v215 = *(char **)(a1 + 112);
              }
              else
              {
                v247 = 0;
              }
              v310 = &v247[8 * v243];
              *(_QWORD *)v310 = 0;
              v213 = v310 + 8;
              while (v215 != v242)
              {
                v311 = *((_QWORD *)v215 - 1);
                v215 -= 8;
                *((_QWORD *)v310 - 1) = v311;
                v310 -= 8;
              }
              *(_QWORD *)(a1 + 104) = v310;
              *(_QWORD *)(a1 + 112) = v213;
              *(_QWORD *)(a1 + 120) = &v247[8 * v246];
              if (v242)
                operator delete(v242);
            }
            else
            {
              *(_QWORD *)v215 = 0;
              v213 = v215 + 8;
            }
            *(_QWORD *)(a1 + 112) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v50 = *((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          while (v50 < v51 && !*((_BYTE *)this + 24))
          {
            v53 = *(char **)(a1 + 112);
            v52 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v9;
              v56 = (v53 - (_BYTE *)*v9) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_573;
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_21B796A20(v336, v59);
                v55 = *(char **)(a1 + 104);
                v53 = *(char **)(a1 + 112);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[8 * v56];
              *(_QWORD *)v61 = 0;
              v54 = v61 + 8;
              while (v53 != v55)
              {
                v62 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v61 - 1) = v62;
                v61 -= 8;
              }
              *(_QWORD *)(a1 + 104) = v61;
              *(_QWORD *)(a1 + 112) = v54;
              *(_QWORD *)(a1 + 120) = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v53 = 0;
              v54 = v53 + 8;
            }
            *(_QWORD *)(a1 + 112) = v54;
            v63 = *((_QWORD *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v54 - 1) = *(_QWORD *)(*(_QWORD *)this + v63);
            v51 = *((_QWORD *)this + 2);
            v50 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v50;
          }
          goto LABEL_333;
        case 8u:
          if (v23 != 2)
          {
            v217 = *(char **)(a1 + 280);
            v216 = *(_QWORD *)(a1 + 288);
            if ((unint64_t)v217 >= v216)
            {
              v248 = (char *)*v8;
              v249 = (v217 - (_BYTE *)*v8) >> 3;
              v250 = v249 + 1;
              if ((unint64_t)(v249 + 1) >> 61)
LABEL_574:
                sub_21B796A0C();
              v251 = v216 - (_QWORD)v248;
              if (v251 >> 2 > v250)
                v250 = v251 >> 2;
              if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFF8)
                v252 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v252 = v250;
              if (v252)
              {
                v253 = (char *)sub_21B796A20(v337, v252);
                v248 = *(char **)(a1 + 272);
                v217 = *(char **)(a1 + 280);
              }
              else
              {
                v253 = 0;
              }
              v312 = &v253[8 * v249];
              *(_QWORD *)v312 = 0;
              v213 = v312 + 8;
              while (v217 != v248)
              {
                v313 = *((_QWORD *)v217 - 1);
                v217 -= 8;
                *((_QWORD *)v312 - 1) = v313;
                v312 -= 8;
              }
              *(_QWORD *)(a1 + 272) = v312;
              *(_QWORD *)(a1 + 280) = v213;
              *(_QWORD *)(a1 + 288) = &v253[8 * v252];
              if (v248)
                operator delete(v248);
            }
            else
            {
              *(_QWORD *)v217 = 0;
              v213 = v217 + 8;
            }
            *(_QWORD *)(a1 + 280) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v64 = *((_QWORD *)this + 1);
          v65 = *((_QWORD *)this + 2);
          while (v64 < v65 && !*((_BYTE *)this + 24))
          {
            v67 = *(char **)(a1 + 280);
            v66 = *(_QWORD *)(a1 + 288);
            if ((unint64_t)v67 >= v66)
            {
              v69 = (char *)*v8;
              v70 = (v67 - (_BYTE *)*v8) >> 3;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_574;
              v72 = v66 - (_QWORD)v69;
              if (v72 >> 2 > v71)
                v71 = v72 >> 2;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_21B796A20(v337, v73);
                v69 = *(char **)(a1 + 272);
                v67 = *(char **)(a1 + 280);
              }
              else
              {
                v74 = 0;
              }
              v75 = &v74[8 * v70];
              *(_QWORD *)v75 = 0;
              v68 = v75 + 8;
              while (v67 != v69)
              {
                v76 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(_QWORD *)(a1 + 272) = v75;
              *(_QWORD *)(a1 + 280) = v68;
              *(_QWORD *)(a1 + 288) = &v74[8 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *(_QWORD *)(a1 + 280) = v68;
            v77 = *((_QWORD *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v68 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
            v65 = *((_QWORD *)this + 2);
            v64 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v64;
          }
          goto LABEL_333;
        case 9u:
          if (v23 != 2)
          {
            v219 = *(char **)(a1 + 16);
            v218 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v219 >= v218)
            {
              v254 = (char *)*v347;
              v255 = (v219 - (_BYTE *)*v347) >> 3;
              v256 = v255 + 1;
              if ((unint64_t)(v255 + 1) >> 61)
LABEL_575:
                sub_21B796A0C();
              v257 = v218 - (_QWORD)v254;
              if (v257 >> 2 > v256)
                v256 = v257 >> 2;
              if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8)
                v258 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v258 = v256;
              if (v258)
              {
                v259 = (char *)sub_21B796A20(v338, v258);
                v254 = *(char **)(a1 + 8);
                v219 = *(char **)(a1 + 16);
              }
              else
              {
                v259 = 0;
              }
              v314 = &v259[8 * v255];
              *(_QWORD *)v314 = 0;
              v213 = v314 + 8;
              while (v219 != v254)
              {
                v315 = *((_QWORD *)v219 - 1);
                v219 -= 8;
                *((_QWORD *)v314 - 1) = v315;
                v314 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v314;
              *(_QWORD *)(a1 + 16) = v213;
              *(_QWORD *)(a1 + 24) = &v259[8 * v258];
              if (v254)
                operator delete(v254);
            }
            else
            {
              *(_QWORD *)v219 = 0;
              v213 = v219 + 8;
            }
            *(_QWORD *)(a1 + 16) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v78 = *((_QWORD *)this + 1);
          v79 = *((_QWORD *)this + 2);
          while (v78 < v79 && !*((_BYTE *)this + 24))
          {
            v81 = *(char **)(a1 + 16);
            v80 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v81 >= v80)
            {
              v83 = (char *)*v347;
              v84 = (v81 - (_BYTE *)*v347) >> 3;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 61)
                goto LABEL_575;
              v86 = v80 - (_QWORD)v83;
              if (v86 >> 2 > v85)
                v85 = v86 >> 2;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                v87 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87)
              {
                v88 = (char *)sub_21B796A20(v338, v87);
                v83 = *(char **)(a1 + 8);
                v81 = *(char **)(a1 + 16);
              }
              else
              {
                v88 = 0;
              }
              v89 = &v88[8 * v84];
              *(_QWORD *)v89 = 0;
              v82 = v89 + 8;
              while (v81 != v83)
              {
                v90 = *((_QWORD *)v81 - 1);
                v81 -= 8;
                *((_QWORD *)v89 - 1) = v90;
                v89 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v89;
              *(_QWORD *)(a1 + 16) = v82;
              *(_QWORD *)(a1 + 24) = &v88[8 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_QWORD *)v81 = 0;
              v82 = v81 + 8;
            }
            *(_QWORD *)(a1 + 16) = v82;
            v91 = *((_QWORD *)this + 1);
            if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v82 - 1) = *(_QWORD *)(*(_QWORD *)this + v91);
            v79 = *((_QWORD *)this + 2);
            v78 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v78;
          }
          goto LABEL_333;
        case 0xAu:
          if (v23 != 2)
          {
            v221 = *(char **)(a1 + 232);
            v220 = *(_QWORD *)(a1 + 240);
            if ((unint64_t)v221 >= v220)
            {
              v260 = (char *)*v348;
              v261 = (v221 - (_BYTE *)*v348) >> 3;
              v262 = v261 + 1;
              if ((unint64_t)(v261 + 1) >> 61)
LABEL_576:
                sub_21B796A0C();
              v263 = v220 - (_QWORD)v260;
              if (v263 >> 2 > v262)
                v262 = v263 >> 2;
              if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8)
                v264 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v264 = v262;
              if (v264)
              {
                v265 = (char *)sub_21B796A20(v339, v264);
                v260 = *(char **)(a1 + 224);
                v221 = *(char **)(a1 + 232);
              }
              else
              {
                v265 = 0;
              }
              v316 = &v265[8 * v261];
              *(_QWORD *)v316 = 0;
              v213 = v316 + 8;
              while (v221 != v260)
              {
                v317 = *((_QWORD *)v221 - 1);
                v221 -= 8;
                *((_QWORD *)v316 - 1) = v317;
                v316 -= 8;
              }
              *(_QWORD *)(a1 + 224) = v316;
              *(_QWORD *)(a1 + 232) = v213;
              *(_QWORD *)(a1 + 240) = &v265[8 * v264];
              if (v260)
                operator delete(v260);
            }
            else
            {
              *(_QWORD *)v221 = 0;
              v213 = v221 + 8;
            }
            *(_QWORD *)(a1 + 232) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v92 = *((_QWORD *)this + 1);
          v93 = *((_QWORD *)this + 2);
          while (v92 < v93 && !*((_BYTE *)this + 24))
          {
            v95 = *(char **)(a1 + 232);
            v94 = *(_QWORD *)(a1 + 240);
            if ((unint64_t)v95 >= v94)
            {
              v97 = (char *)*v348;
              v98 = (v95 - (_BYTE *)*v348) >> 3;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 61)
                goto LABEL_576;
              v100 = v94 - (_QWORD)v97;
              if (v100 >> 2 > v99)
                v99 = v100 >> 2;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
                v101 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_21B796A20(v339, v101);
                v97 = *(char **)(a1 + 224);
                v95 = *(char **)(a1 + 232);
              }
              else
              {
                v102 = 0;
              }
              v103 = &v102[8 * v98];
              *(_QWORD *)v103 = 0;
              v96 = v103 + 8;
              while (v95 != v97)
              {
                v104 = *((_QWORD *)v95 - 1);
                v95 -= 8;
                *((_QWORD *)v103 - 1) = v104;
                v103 -= 8;
              }
              *(_QWORD *)(a1 + 224) = v103;
              *(_QWORD *)(a1 + 232) = v96;
              *(_QWORD *)(a1 + 240) = &v102[8 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_QWORD *)v95 = 0;
              v96 = v95 + 8;
            }
            *(_QWORD *)(a1 + 232) = v96;
            v105 = *((_QWORD *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFF7 || v105 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v96 - 1) = *(_QWORD *)(*(_QWORD *)this + v105);
            v93 = *((_QWORD *)this + 2);
            v92 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v92;
          }
          goto LABEL_333;
        case 0xBu:
          if (v23 != 2)
          {
            v223 = *(char **)(a1 + 160);
            v222 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v223 >= v222)
            {
              v266 = (char *)*v349;
              v267 = (v223 - (_BYTE *)*v349) >> 3;
              v268 = v267 + 1;
              if ((unint64_t)(v267 + 1) >> 61)
LABEL_577:
                sub_21B796A0C();
              v269 = v222 - (_QWORD)v266;
              if (v269 >> 2 > v268)
                v268 = v269 >> 2;
              if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
                v270 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v270 = v268;
              if (v270)
              {
                v271 = (char *)sub_21B796A20(v340, v270);
                v266 = *(char **)(a1 + 152);
                v223 = *(char **)(a1 + 160);
              }
              else
              {
                v271 = 0;
              }
              v318 = &v271[8 * v267];
              *(_QWORD *)v318 = 0;
              v213 = v318 + 8;
              while (v223 != v266)
              {
                v319 = *((_QWORD *)v223 - 1);
                v223 -= 8;
                *((_QWORD *)v318 - 1) = v319;
                v318 -= 8;
              }
              *(_QWORD *)(a1 + 152) = v318;
              *(_QWORD *)(a1 + 160) = v213;
              *(_QWORD *)(a1 + 168) = &v271[8 * v270];
              if (v266)
                operator delete(v266);
            }
            else
            {
              *(_QWORD *)v223 = 0;
              v213 = v223 + 8;
            }
            *(_QWORD *)(a1 + 160) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v106 = *((_QWORD *)this + 1);
          v107 = *((_QWORD *)this + 2);
          while (v106 < v107 && !*((_BYTE *)this + 24))
          {
            v109 = *(char **)(a1 + 160);
            v108 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v109 >= v108)
            {
              v111 = (char *)*v349;
              v112 = (v109 - (_BYTE *)*v349) >> 3;
              v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 61)
                goto LABEL_577;
              v114 = v108 - (_QWORD)v111;
              if (v114 >> 2 > v113)
                v113 = v114 >> 2;
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8)
                v115 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v115 = v113;
              if (v115)
              {
                v116 = (char *)sub_21B796A20(v340, v115);
                v111 = *(char **)(a1 + 152);
                v109 = *(char **)(a1 + 160);
              }
              else
              {
                v116 = 0;
              }
              v117 = &v116[8 * v112];
              *(_QWORD *)v117 = 0;
              v110 = v117 + 8;
              while (v109 != v111)
              {
                v118 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v117 - 1) = v118;
                v117 -= 8;
              }
              *(_QWORD *)(a1 + 152) = v117;
              *(_QWORD *)(a1 + 160) = v110;
              *(_QWORD *)(a1 + 168) = &v116[8 * v115];
              if (v111)
                operator delete(v111);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v110 = v109 + 8;
            }
            *(_QWORD *)(a1 + 160) = v110;
            v119 = *((_QWORD *)this + 1);
            if (v119 > 0xFFFFFFFFFFFFFFF7 || v119 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v110 - 1) = *(_QWORD *)(*(_QWORD *)this + v119);
            v107 = *((_QWORD *)this + 2);
            v106 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v106;
          }
          goto LABEL_333;
        case 0xCu:
          if (v23 != 2)
          {
            v225 = *(char **)(a1 + 136);
            v224 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v225 >= v224)
            {
              v272 = (char *)*v350;
              v273 = (v225 - (_BYTE *)*v350) >> 3;
              v274 = v273 + 1;
              if ((unint64_t)(v273 + 1) >> 61)
LABEL_578:
                sub_21B796A0C();
              v275 = v224 - (_QWORD)v272;
              if (v275 >> 2 > v274)
                v274 = v275 >> 2;
              if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF8)
                v276 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v276 = v274;
              if (v276)
              {
                v277 = (char *)sub_21B796A20(v341, v276);
                v272 = *(char **)(a1 + 128);
                v225 = *(char **)(a1 + 136);
              }
              else
              {
                v277 = 0;
              }
              v320 = &v277[8 * v273];
              *(_QWORD *)v320 = 0;
              v213 = v320 + 8;
              while (v225 != v272)
              {
                v321 = *((_QWORD *)v225 - 1);
                v225 -= 8;
                *((_QWORD *)v320 - 1) = v321;
                v320 -= 8;
              }
              *(_QWORD *)(a1 + 128) = v320;
              *(_QWORD *)(a1 + 136) = v213;
              *(_QWORD *)(a1 + 144) = &v277[8 * v276];
              if (v272)
                operator delete(v272);
            }
            else
            {
              *(_QWORD *)v225 = 0;
              v213 = v225 + 8;
            }
            *(_QWORD *)(a1 + 136) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v120 = *((_QWORD *)this + 1);
          v121 = *((_QWORD *)this + 2);
          while (v120 < v121 && !*((_BYTE *)this + 24))
          {
            v123 = *(char **)(a1 + 136);
            v122 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v123 >= v122)
            {
              v125 = (char *)*v350;
              v126 = (v123 - (_BYTE *)*v350) >> 3;
              v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 61)
                goto LABEL_578;
              v128 = v122 - (_QWORD)v125;
              if (v128 >> 2 > v127)
                v127 = v128 >> 2;
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
                v129 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v129 = v127;
              if (v129)
              {
                v130 = (char *)sub_21B796A20(v341, v129);
                v125 = *(char **)(a1 + 128);
                v123 = *(char **)(a1 + 136);
              }
              else
              {
                v130 = 0;
              }
              v131 = &v130[8 * v126];
              *(_QWORD *)v131 = 0;
              v124 = v131 + 8;
              while (v123 != v125)
              {
                v132 = *((_QWORD *)v123 - 1);
                v123 -= 8;
                *((_QWORD *)v131 - 1) = v132;
                v131 -= 8;
              }
              *(_QWORD *)(a1 + 128) = v131;
              *(_QWORD *)(a1 + 136) = v124;
              *(_QWORD *)(a1 + 144) = &v130[8 * v129];
              if (v125)
                operator delete(v125);
            }
            else
            {
              *(_QWORD *)v123 = 0;
              v124 = v123 + 8;
            }
            *(_QWORD *)(a1 + 136) = v124;
            v133 = *((_QWORD *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFF7 || v133 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v124 - 1) = *(_QWORD *)(*(_QWORD *)this + v133);
            v121 = *((_QWORD *)this + 2);
            v120 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v120;
          }
          goto LABEL_333;
        case 0xDu:
          if (v23 != 2)
          {
            v227 = *(char **)(a1 + 256);
            v226 = *(_QWORD *)(a1 + 264);
            if ((unint64_t)v227 >= v226)
            {
              v278 = (char *)*v351;
              v279 = (v227 - (_BYTE *)*v351) >> 3;
              v280 = v279 + 1;
              if ((unint64_t)(v279 + 1) >> 61)
LABEL_579:
                sub_21B796A0C();
              v281 = v226 - (_QWORD)v278;
              if (v281 >> 2 > v280)
                v280 = v281 >> 2;
              if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFF8)
                v282 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v282 = v280;
              if (v282)
              {
                v283 = (char *)sub_21B796A20(v342, v282);
                v278 = *(char **)(a1 + 248);
                v227 = *(char **)(a1 + 256);
              }
              else
              {
                v283 = 0;
              }
              v322 = &v283[8 * v279];
              *(_QWORD *)v322 = 0;
              v213 = v322 + 8;
              while (v227 != v278)
              {
                v323 = *((_QWORD *)v227 - 1);
                v227 -= 8;
                *((_QWORD *)v322 - 1) = v323;
                v322 -= 8;
              }
              *(_QWORD *)(a1 + 248) = v322;
              *(_QWORD *)(a1 + 256) = v213;
              *(_QWORD *)(a1 + 264) = &v283[8 * v282];
              if (v278)
                operator delete(v278);
            }
            else
            {
              *(_QWORD *)v227 = 0;
              v213 = v227 + 8;
            }
            *(_QWORD *)(a1 + 256) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v134 = *((_QWORD *)this + 1);
          v135 = *((_QWORD *)this + 2);
          while (v134 < v135 && !*((_BYTE *)this + 24))
          {
            v137 = *(char **)(a1 + 256);
            v136 = *(_QWORD *)(a1 + 264);
            if ((unint64_t)v137 >= v136)
            {
              v139 = (char *)*v351;
              v140 = (v137 - (_BYTE *)*v351) >> 3;
              v141 = v140 + 1;
              if ((unint64_t)(v140 + 1) >> 61)
                goto LABEL_579;
              v142 = v136 - (_QWORD)v139;
              if (v142 >> 2 > v141)
                v141 = v142 >> 2;
              if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
                v143 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v143 = v141;
              if (v143)
              {
                v144 = (char *)sub_21B796A20(v342, v143);
                v139 = *(char **)(a1 + 248);
                v137 = *(char **)(a1 + 256);
              }
              else
              {
                v144 = 0;
              }
              v145 = &v144[8 * v140];
              *(_QWORD *)v145 = 0;
              v138 = v145 + 8;
              while (v137 != v139)
              {
                v146 = *((_QWORD *)v137 - 1);
                v137 -= 8;
                *((_QWORD *)v145 - 1) = v146;
                v145 -= 8;
              }
              *(_QWORD *)(a1 + 248) = v145;
              *(_QWORD *)(a1 + 256) = v138;
              *(_QWORD *)(a1 + 264) = &v144[8 * v143];
              if (v139)
                operator delete(v139);
            }
            else
            {
              *(_QWORD *)v137 = 0;
              v138 = v137 + 8;
            }
            *(_QWORD *)(a1 + 256) = v138;
            v147 = *((_QWORD *)this + 1);
            if (v147 > 0xFFFFFFFFFFFFFFF7 || v147 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v138 - 1) = *(_QWORD *)(*(_QWORD *)this + v147);
            v135 = *((_QWORD *)this + 2);
            v134 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v134;
          }
          goto LABEL_333;
        case 0xEu:
          if (v23 != 2)
          {
            v229 = *(char **)(a1 + 40);
            v228 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v229 >= v228)
            {
              v284 = (char *)*v352;
              v285 = (v229 - (_BYTE *)*v352) >> 3;
              v286 = v285 + 1;
              if ((unint64_t)(v285 + 1) >> 61)
LABEL_580:
                sub_21B796A0C();
              v287 = v228 - (_QWORD)v284;
              if (v287 >> 2 > v286)
                v286 = v287 >> 2;
              if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF8)
                v288 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v288 = v286;
              if (v288)
              {
                v289 = (char *)sub_21B796A20(v343, v288);
                v284 = *(char **)(a1 + 32);
                v229 = *(char **)(a1 + 40);
              }
              else
              {
                v289 = 0;
              }
              v324 = &v289[8 * v285];
              *(_QWORD *)v324 = 0;
              v213 = v324 + 8;
              while (v229 != v284)
              {
                v325 = *((_QWORD *)v229 - 1);
                v229 -= 8;
                *((_QWORD *)v324 - 1) = v325;
                v324 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v324;
              *(_QWORD *)(a1 + 40) = v213;
              *(_QWORD *)(a1 + 48) = &v289[8 * v288];
              if (v284)
                operator delete(v284);
            }
            else
            {
              *(_QWORD *)v229 = 0;
              v213 = v229 + 8;
            }
            *(_QWORD *)(a1 + 40) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v148 = *((_QWORD *)this + 1);
          v149 = *((_QWORD *)this + 2);
          while (v148 < v149 && !*((_BYTE *)this + 24))
          {
            v151 = *(char **)(a1 + 40);
            v150 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v151 >= v150)
            {
              v153 = (char *)*v352;
              v154 = (v151 - (_BYTE *)*v352) >> 3;
              v155 = v154 + 1;
              if ((unint64_t)(v154 + 1) >> 61)
                goto LABEL_580;
              v156 = v150 - (_QWORD)v153;
              if (v156 >> 2 > v155)
                v155 = v156 >> 2;
              if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
                v157 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v157 = v155;
              if (v157)
              {
                v158 = (char *)sub_21B796A20(v343, v157);
                v153 = *(char **)(a1 + 32);
                v151 = *(char **)(a1 + 40);
              }
              else
              {
                v158 = 0;
              }
              v159 = &v158[8 * v154];
              *(_QWORD *)v159 = 0;
              v152 = v159 + 8;
              while (v151 != v153)
              {
                v160 = *((_QWORD *)v151 - 1);
                v151 -= 8;
                *((_QWORD *)v159 - 1) = v160;
                v159 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v159;
              *(_QWORD *)(a1 + 40) = v152;
              *(_QWORD *)(a1 + 48) = &v158[8 * v157];
              if (v153)
                operator delete(v153);
            }
            else
            {
              *(_QWORD *)v151 = 0;
              v152 = v151 + 8;
            }
            *(_QWORD *)(a1 + 40) = v152;
            v161 = *((_QWORD *)this + 1);
            if (v161 > 0xFFFFFFFFFFFFFFF7 || v161 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v152 - 1) = *(_QWORD *)(*(_QWORD *)this + v161);
            v149 = *((_QWORD *)this + 2);
            v148 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v148;
          }
          goto LABEL_333;
        case 0xFu:
          if (v23 != 2)
          {
            v231 = *(char **)(a1 + 208);
            v230 = *(_QWORD *)(a1 + 216);
            if ((unint64_t)v231 >= v230)
            {
              v290 = (char *)*v353;
              v291 = (v231 - (_BYTE *)*v353) >> 3;
              v292 = v291 + 1;
              if ((unint64_t)(v291 + 1) >> 61)
LABEL_581:
                sub_21B796A0C();
              v293 = v230 - (_QWORD)v290;
              if (v293 >> 2 > v292)
                v292 = v293 >> 2;
              if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
                v294 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v294 = v292;
              if (v294)
              {
                v295 = (char *)sub_21B796A20(v344, v294);
                v290 = *(char **)(a1 + 200);
                v231 = *(char **)(a1 + 208);
              }
              else
              {
                v295 = 0;
              }
              v326 = &v295[8 * v291];
              *(_QWORD *)v326 = 0;
              v213 = v326 + 8;
              while (v231 != v290)
              {
                v327 = *((_QWORD *)v231 - 1);
                v231 -= 8;
                *((_QWORD *)v326 - 1) = v327;
                v326 -= 8;
              }
              *(_QWORD *)(a1 + 200) = v326;
              *(_QWORD *)(a1 + 208) = v213;
              *(_QWORD *)(a1 + 216) = &v295[8 * v294];
              if (v290)
                operator delete(v290);
            }
            else
            {
              *(_QWORD *)v231 = 0;
              v213 = v231 + 8;
            }
            *(_QWORD *)(a1 + 208) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v162 = *((_QWORD *)this + 1);
          v163 = *((_QWORD *)this + 2);
          while (v162 < v163 && !*((_BYTE *)this + 24))
          {
            v165 = *(char **)(a1 + 208);
            v164 = *(_QWORD *)(a1 + 216);
            if ((unint64_t)v165 >= v164)
            {
              v167 = (char *)*v353;
              v168 = (v165 - (_BYTE *)*v353) >> 3;
              v169 = v168 + 1;
              if ((unint64_t)(v168 + 1) >> 61)
                goto LABEL_581;
              v170 = v164 - (_QWORD)v167;
              if (v170 >> 2 > v169)
                v169 = v170 >> 2;
              if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFF8)
                v171 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v171 = v169;
              if (v171)
              {
                v172 = (char *)sub_21B796A20(v344, v171);
                v167 = *(char **)(a1 + 200);
                v165 = *(char **)(a1 + 208);
              }
              else
              {
                v172 = 0;
              }
              v173 = &v172[8 * v168];
              *(_QWORD *)v173 = 0;
              v166 = v173 + 8;
              while (v165 != v167)
              {
                v174 = *((_QWORD *)v165 - 1);
                v165 -= 8;
                *((_QWORD *)v173 - 1) = v174;
                v173 -= 8;
              }
              *(_QWORD *)(a1 + 200) = v173;
              *(_QWORD *)(a1 + 208) = v166;
              *(_QWORD *)(a1 + 216) = &v172[8 * v171];
              if (v167)
                operator delete(v167);
            }
            else
            {
              *(_QWORD *)v165 = 0;
              v166 = v165 + 8;
            }
            *(_QWORD *)(a1 + 208) = v166;
            v175 = *((_QWORD *)this + 1);
            if (v175 > 0xFFFFFFFFFFFFFFF7 || v175 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v166 - 1) = *(_QWORD *)(*(_QWORD *)this + v175);
            v163 = *((_QWORD *)this + 2);
            v162 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v162;
          }
          goto LABEL_333;
        case 0x10u:
          if (v23 != 2)
          {
            v233 = *(char **)(a1 + 88);
            v232 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v233 >= v232)
            {
              v296 = (char *)*v354;
              v297 = (v233 - (_BYTE *)*v354) >> 3;
              v298 = v297 + 1;
              if ((unint64_t)(v297 + 1) >> 61)
LABEL_582:
                sub_21B796A0C();
              v299 = v232 - (_QWORD)v296;
              if (v299 >> 2 > v298)
                v298 = v299 >> 2;
              if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8)
                v300 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v300 = v298;
              if (v300)
              {
                v301 = (char *)sub_21B796A20(v345, v300);
                v296 = *(char **)(a1 + 80);
                v233 = *(char **)(a1 + 88);
              }
              else
              {
                v301 = 0;
              }
              v328 = &v301[8 * v297];
              *(_QWORD *)v328 = 0;
              v213 = v328 + 8;
              while (v233 != v296)
              {
                v329 = *((_QWORD *)v233 - 1);
                v233 -= 8;
                *((_QWORD *)v328 - 1) = v329;
                v328 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v328;
              *(_QWORD *)(a1 + 88) = v213;
              *(_QWORD *)(a1 + 96) = &v301[8 * v300];
              if (v296)
                operator delete(v296);
            }
            else
            {
              *(_QWORD *)v233 = 0;
              v213 = v233 + 8;
            }
            *(_QWORD *)(a1 + 88) = v213;
            goto LABEL_556;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v176 = *((_QWORD *)this + 1);
          v177 = *((_QWORD *)this + 2);
          while (v176 < v177 && !*((_BYTE *)this + 24))
          {
            v179 = *(char **)(a1 + 88);
            v178 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v179 >= v178)
            {
              v181 = (char *)*v354;
              v182 = (v179 - (_BYTE *)*v354) >> 3;
              v183 = v182 + 1;
              if ((unint64_t)(v182 + 1) >> 61)
                goto LABEL_582;
              v184 = v178 - (_QWORD)v181;
              if (v184 >> 2 > v183)
                v183 = v184 >> 2;
              if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF8)
                v185 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v185 = v183;
              if (v185)
              {
                v186 = (char *)sub_21B796A20(v345, v185);
                v181 = *(char **)(a1 + 80);
                v179 = *(char **)(a1 + 88);
              }
              else
              {
                v186 = 0;
              }
              v187 = &v186[8 * v182];
              *(_QWORD *)v187 = 0;
              v180 = v187 + 8;
              while (v179 != v181)
              {
                v188 = *((_QWORD *)v179 - 1);
                v179 -= 8;
                *((_QWORD *)v187 - 1) = v188;
                v187 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v187;
              *(_QWORD *)(a1 + 88) = v180;
              *(_QWORD *)(a1 + 96) = &v186[8 * v185];
              if (v181)
                operator delete(v181);
            }
            else
            {
              *(_QWORD *)v179 = 0;
              v180 = v179 + 8;
            }
            *(_QWORD *)(a1 + 88) = v180;
            v189 = *((_QWORD *)this + 1);
            if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((_QWORD *)this + 2))
              goto LABEL_332;
            *(v180 - 1) = *(_QWORD *)(*(_QWORD *)this + v189);
            v177 = *((_QWORD *)this + 2);
            v176 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v176;
          }
          goto LABEL_333;
        case 0x11u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v190 = *((_QWORD *)this + 1);
            v191 = *((_QWORD *)this + 2);
            while (v190 < v191 && !*((_BYTE *)this + 24))
            {
              v193 = *(char **)(a1 + 64);
              v192 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v193 >= v192)
              {
                v195 = (char *)*v355;
                v196 = (v193 - (_BYTE *)*v355) >> 3;
                v197 = v196 + 1;
                if ((unint64_t)(v196 + 1) >> 61)
                  goto LABEL_583;
                v198 = v192 - (_QWORD)v195;
                if (v198 >> 2 > v197)
                  v197 = v198 >> 2;
                if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFF8)
                  v199 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v199 = v197;
                if (v199)
                {
                  v200 = (char *)sub_21B796A20(v346, v199);
                  v195 = *(char **)(a1 + 56);
                  v193 = *(char **)(a1 + 64);
                }
                else
                {
                  v200 = 0;
                }
                v201 = &v200[8 * v196];
                *(_QWORD *)v201 = 0;
                v194 = v201 + 8;
                while (v193 != v195)
                {
                  v202 = *((_QWORD *)v193 - 1);
                  v193 -= 8;
                  *((_QWORD *)v201 - 1) = v202;
                  v201 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v201;
                *(_QWORD *)(a1 + 64) = v194;
                *(_QWORD *)(a1 + 72) = &v200[8 * v199];
                if (v195)
                  operator delete(v195);
              }
              else
              {
                *(_QWORD *)v193 = 0;
                v194 = v193 + 8;
              }
              *(_QWORD *)(a1 + 64) = v194;
              v203 = *((_QWORD *)this + 1);
              if (v203 > 0xFFFFFFFFFFFFFFF7 || v203 + 8 > *((_QWORD *)this + 2))
              {
LABEL_332:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v194 - 1) = *(_QWORD *)(*(_QWORD *)this + v203);
              v191 = *((_QWORD *)this + 2);
              v190 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v190;
            }
LABEL_333:
            PB::Reader::recallMark();
          }
          else
          {
            v235 = *(char **)(a1 + 64);
            v234 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v235 >= v234)
            {
              v302 = (char *)*v355;
              v303 = (v235 - (_BYTE *)*v355) >> 3;
              v304 = v303 + 1;
              if ((unint64_t)(v303 + 1) >> 61)
LABEL_583:
                sub_21B796A0C();
              v305 = v234 - (_QWORD)v302;
              if (v305 >> 2 > v304)
                v304 = v305 >> 2;
              if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF8)
                v306 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v306 = v304;
              if (v306)
              {
                v307 = (char *)sub_21B796A20(v346, v306);
                v302 = *(char **)(a1 + 56);
                v235 = *(char **)(a1 + 64);
              }
              else
              {
                v307 = 0;
              }
              v330 = &v307[8 * v303];
              *(_QWORD *)v330 = 0;
              v213 = v330 + 8;
              while (v235 != v302)
              {
                v331 = *((_QWORD *)v235 - 1);
                v235 -= 8;
                *((_QWORD *)v330 - 1) = v331;
                v330 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v330;
              *(_QWORD *)(a1 + 64) = v213;
              *(_QWORD *)(a1 + 72) = &v307[8 * v306];
              if (v302)
                operator delete(v302);
            }
            else
            {
              *(_QWORD *)v235 = 0;
              v213 = v235 + 8;
            }
            *(_QWORD *)(a1 + 64) = v213;
LABEL_556:
            v332 = *((_QWORD *)this + 1);
            if (v332 <= 0xFFFFFFFFFFFFFFF7 && v332 + 8 <= *((_QWORD *)this + 2))
            {
              *(v213 - 1) = *(_QWORD *)(*(_QWORD *)this + v332);
LABEL_560:
              v206 = *((_QWORD *)this + 1) + 8;
LABEL_561:
              *((_QWORD *)this + 1) = v206;
            }
            else
            {
LABEL_558:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_562:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0x12u:
          *(_BYTE *)(a1 + 340) |= 0x20u;
          v204 = *((_QWORD *)this + 1);
          if (v204 > 0xFFFFFFFFFFFFFFFBLL || v204 + 4 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_DWORD *)(a1 + 332) = *(_DWORD *)(*(_QWORD *)this + v204);
          goto LABEL_340;
        case 0x13u:
          *(_BYTE *)(a1 + 340) |= 0x10u;
          v205 = *((_QWORD *)this + 1);
          if (v205 > 0xFFFFFFFFFFFFFFFBLL || v205 + 4 > *((_QWORD *)this + 2))
            goto LABEL_558;
          *(_DWORD *)(a1 + 328) = *(_DWORD *)(*(_QWORD *)this + v205);
LABEL_340:
          v206 = *((_QWORD *)this + 1) + 4;
          goto LABEL_561;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_562;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)this + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B81AE78(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  double *v36;
  double v37;
  double *v38;
  double *v39;
  double v40;
  char v41;

  v3 = result;
  v4 = *(_BYTE *)(result + 340);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((*(_BYTE *)(result + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 312));
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
LABEL_50:
    result = PB::Writer::write(this, *(double *)(v3 + 320));
    if ((*(_BYTE *)(v3 + 340) & 2) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 296));
  v4 = *(_BYTE *)(v3 + 340);
  if ((v4 & 8) != 0)
    goto LABEL_50;
LABEL_5:
  if ((v4 & 2) != 0)
LABEL_6:
    result = PB::Writer::write(this, *(double *)(v3 + 304));
LABEL_7:
  v5 = *(double **)(v3 + 176);
  v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(double **)(v3 + 104);
  v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(double **)(v3 + 272);
  v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(double **)(v3 + 8);
  v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16);
  }
  v17 = *(double **)(v3 + 224);
  v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19);
  }
  v20 = *(double **)(v3 + 152);
  v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    v22 = *v20++;
    result = PB::Writer::write(this, v22);
  }
  v23 = *(double **)(v3 + 128);
  v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    v25 = *v23++;
    result = PB::Writer::write(this, v25);
  }
  v26 = *(double **)(v3 + 248);
  v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    v28 = *v26++;
    result = PB::Writer::write(this, v28);
  }
  v29 = *(double **)(v3 + 32);
  v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    v31 = *v29++;
    result = PB::Writer::write(this, v31);
  }
  v32 = *(double **)(v3 + 200);
  v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    v34 = *v32++;
    result = PB::Writer::write(this, v34);
  }
  v35 = *(double **)(v3 + 80);
  v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    v37 = *v35++;
    result = PB::Writer::write(this, v37);
  }
  v38 = *(double **)(v3 + 56);
  v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    v40 = *v38++;
    result = PB::Writer::write(this, v40);
  }
  v41 = *(_BYTE *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 332));
    v41 = *(_BYTE *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 328));
  return result;
}

uint64_t sub_21B81B0E8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF36D28;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_21B81B100(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_24DF36D28;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_21B81B140(PB::Base *a1)
{
  sub_21B81B100(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81B164(uint64_t a1, uint64_t a2)
{
  char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = &off_24DF36D28;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  v5 = *(_WORD *)(a2 + 112);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v6 = 1;
    *(_WORD *)(a1 + 112) = 1;
    *(_QWORD *)(a1 + 32) = v7;
    v5 = *(_WORD *)(a2 + 112);
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((*(_WORD *)(a2 + 112) & 0x200) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 104);
    v6 |= 0x200u;
    *(_WORD *)(a1 + 112) = v6;
    *(_QWORD *)(a1 + 104) = v8;
    v5 = *(_WORD *)(a2 + 112);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    v9 = *(_QWORD *)(a2 + 40);
    *(_WORD *)(a1 + 112) = v6 | 2;
    *(_QWORD *)(a1 + 40) = v9;
  }
  if (a1 != a2)
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 8) != 0)
  {
    v13 = *(_QWORD *)(a2 + 56);
    *(_WORD *)(a1 + 112) |= 8u;
    *(_QWORD *)(a1 + 56) = v13;
    v10 = *(_WORD *)(a2 + 112);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 112) |= 0x10u;
  *(_QWORD *)(a1 + 64) = v14;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x20) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  v15 = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 112) |= 0x20u;
  *(_QWORD *)(a1 + 72) = v15;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  v16 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 112) |= 4u;
  *(_QWORD *)(a1 + 48) = v16;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x80) == 0)
  {
LABEL_15:
    if ((v10 & 0x100) == 0)
      goto LABEL_16;
LABEL_24:
    v18 = *(_QWORD *)(a2 + 96);
    *(_WORD *)(a1 + 112) |= 0x100u;
    *(_QWORD *)(a1 + 96) = v18;
    if ((*(_WORD *)(a2 + 112) & 0x40) == 0)
      return a1;
    goto LABEL_17;
  }
LABEL_23:
  v17 = *(_QWORD *)(a2 + 88);
  *(_WORD *)(a1 + 112) |= 0x80u;
  *(_QWORD *)(a1 + 88) = v17;
  v10 = *(_WORD *)(a2 + 112);
  if ((v10 & 0x100) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x40) != 0)
  {
LABEL_17:
    v11 = *(_QWORD *)(a2 + 80);
    *(_WORD *)(a1 + 112) |= 0x40u;
    *(_QWORD *)(a1 + 80) = v11;
  }
  return a1;
}

uint64_t sub_21B81B2F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "currentTimestamp", *(double *)(a1 + 32));
    v5 = *(_WORD *)(a1 + 112);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "latestInertialTimestamp", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "latestInertialTimestampMeta", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "predictionComputeTimeMeta", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_23:
  PB::TextFormatter::format(this, "predictionTimeMeta", *(double *)(a1 + 88));
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "propagationTimeMeta", *(double *)(a1 + 96));
LABEL_11:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "rotationMatrixElement", v8);
  }
  if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B81B49C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 112) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_101;
        case 2u:
          *(_WORD *)(a1 + 112) |= 0x200u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v23);
          goto LABEL_101;
        case 3u:
          *(_WORD *)(a1 + 112) |= 2u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v24);
          goto LABEL_101;
        case 4u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v8;
                v31 = (v28 - (_BYTE *)*v8) >> 3;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61)
                  goto LABEL_110;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 2 > v32)
                  v32 = v33 >> 2;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                  v34 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_21B796A20(v9, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[8 * v31];
                *(_QWORD *)v36 = 0;
                v29 = v36 + 8;
                while (v28 != v30)
                {
                  v37 = *((_QWORD *)v28 - 1);
                  v28 -= 8;
                  *((_QWORD *)v36 - 1) = v37;
                  v36 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[8 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v28 = 0;
                v29 = v28 + 8;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v25;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v47 = *(char **)(a1 + 16);
            v46 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v47 >= v46)
            {
              v49 = (char *)*v8;
              v50 = (v47 - (_BYTE *)*v8) >> 3;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 61)
LABEL_110:
                sub_21B796A0C();
              v52 = v46 - (_QWORD)v49;
              if (v52 >> 2 > v51)
                v51 = v52 >> 2;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
                v53 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (char *)sub_21B796A20(v9, v53);
                v49 = *(char **)(a1 + 8);
                v47 = *(char **)(a1 + 16);
              }
              else
              {
                v54 = 0;
              }
              v55 = &v54[8 * v50];
              *(_QWORD *)v55 = 0;
              v48 = v55 + 8;
              while (v47 != v49)
              {
                v56 = *((_QWORD *)v47 - 1);
                v47 -= 8;
                *((_QWORD *)v55 - 1) = v56;
                v55 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v55;
              *(_QWORD *)(a1 + 16) = v48;
              *(_QWORD *)(a1 + 24) = &v54[8 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(_QWORD *)v47 = 0;
              v48 = v47 + 8;
            }
            *(_QWORD *)(a1 + 16) = v48;
            v57 = *((_QWORD *)this + 1);
            if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *((_QWORD *)this + 2))
            {
              *(v48 - 1) = *(_QWORD *)(*(_QWORD *)this + v57);
LABEL_101:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_99:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_102:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 5u:
          *(_WORD *)(a1 + 112) |= 8u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v39);
          goto LABEL_101;
        case 6u:
          *(_WORD *)(a1 + 112) |= 0x10u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v40);
          goto LABEL_101;
        case 7u:
          *(_WORD *)(a1 + 112) |= 0x20u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v41);
          goto LABEL_101;
        case 8u:
          *(_WORD *)(a1 + 112) |= 4u;
          v42 = *((_QWORD *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v42);
          goto LABEL_101;
        case 9u:
          *(_WORD *)(a1 + 112) |= 0x80u;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v43);
          goto LABEL_101;
        case 0xAu:
          *(_WORD *)(a1 + 112) |= 0x100u;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v44);
          goto LABEL_101;
        case 0xBu:
          *(_WORD *)(a1 + 112) |= 0x40u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
            goto LABEL_99;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v45);
          goto LABEL_101;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_102;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B81BA60(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  __int16 v8;

  v3 = result;
  v4 = *(_WORD *)(result + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(result + 112) & 0x200) == 0)
      goto LABEL_3;
LABEL_17:
    result = PB::Writer::write(this, *(double *)(v3 + 104));
    if ((*(_WORD *)(v3 + 112) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::write(this, *(double *)(result + 32));
  v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0)
    goto LABEL_17;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 40));
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 56));
    v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) == 0)
  {
LABEL_14:
    if ((v8 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 80));
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  if ((*(_WORD *)(v3 + 112) & 0x40) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 80));
  return result;
}

double sub_21B81BBC8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF36D60;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B81BBEC(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF36D60;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B81BC3C(PB::Base *a1)
{
  sub_21B81BBEC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B81BC60(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24DF36D60;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  }
  return a1;
}

uint64_t sub_21B81BCF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "so3", v7);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B81BDA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 3;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 2 > v48)
                v48 = v49 >> 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796A20(v11, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = 0;
              v45 = v52 + 8;
              while (v44 != v46)
              {
                v53 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v44 = 0;
              v45 = v44 + 8;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = *(char **)(a1 + 16);
        v58 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v10;
          v67 = (v59 - (_BYTE *)*v10) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
            sub_21B796A0C();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_21B796A20(v11, v70);
            v66 = *(char **)(a1 + 8);
            v59 = *(char **)(a1 + 16);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[8 * v67];
          *(_QWORD *)v74 = 0;
          v57 = v74 + 8;
          while (v59 != v66)
          {
            v75 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v74;
          *(_QWORD *)(a1 + 16) = v57;
          *(_QWORD *)(a1 + 24) = &v71[8 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_QWORD *)v59 = 0;
          v57 = v59 + 8;
        }
        *(_QWORD *)(a1 + 16) = v57;
LABEL_114:
        v76 = *((_QWORD *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v76);
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_118:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v27 = *((_QWORD *)this + 1);
      v28 = *((_QWORD *)this + 2);
      while (v27 < v28 && !*((_BYTE *)this + 24))
      {
        v30 = *(char **)(a1 + 40);
        v29 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v30 >= v29)
        {
          v32 = (char *)*v8;
          v33 = (v30 - (_BYTE *)*v8) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_127;
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)sub_21B796A20(v9, v36);
            v32 = *(char **)(a1 + 32);
            v30 = *(char **)(a1 + 40);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = 0;
          v31 = v38 + 8;
          while (v30 != v32)
          {
            v39 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(_QWORD *)(a1 + 32) = v38;
          *(_QWORD *)(a1 + 40) = v31;
          *(_QWORD *)(a1 + 48) = &v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v30 = 0;
          v31 = v30 + 8;
        }
        *(_QWORD *)(a1 + 40) = v31;
        v40 = *((_QWORD *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
        v28 = *((_QWORD *)this + 2);
        v27 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    v56 = *(char **)(a1 + 40);
    v55 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v56 >= v55)
    {
      v60 = (char *)*v8;
      v61 = (v56 - (_BYTE *)*v8) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
LABEL_127:
        sub_21B796A0C();
      v63 = v55 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)sub_21B796A20(v9, v64);
        v60 = *(char **)(a1 + 32);
        v56 = *(char **)(a1 + 40);
      }
      else
      {
        v65 = 0;
      }
      v72 = &v65[8 * v61];
      *(_QWORD *)v72 = 0;
      v57 = v72 + 8;
      while (v56 != v60)
      {
        v73 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *((_QWORD *)v72 - 1) = v73;
        v72 -= 8;
      }
      *(_QWORD *)(a1 + 32) = v72;
      *(_QWORD *)(a1 + 40) = v57;
      *(_QWORD *)(a1 + 48) = &v65[8 * v64];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_QWORD *)v56 = 0;
      v57 = v56 + 8;
    }
    *(_QWORD *)(a1 + 40) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

