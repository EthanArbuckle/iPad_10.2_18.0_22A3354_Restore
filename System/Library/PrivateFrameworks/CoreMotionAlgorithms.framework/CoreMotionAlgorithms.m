void sub_21B72BAB8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_21B72BAC8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30C78;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B72BAE0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B72BB04(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  float result;

  *(_QWORD *)a1 = &off_24DF30C78;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 16) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return result;
LABEL_12:
      result = *(float *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = v3 | 8;
      *(float *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 20) = v7;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B72BBAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cyclingState");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cyclingStateSummary");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "motionType");
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "distanceTraveledOverTimeWindow", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B72BC7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B72C1E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

_QWORD *sub_21B72C290(_QWORD *result)
{
  *result = &off_24DF30CB0;
  *(_QWORD *)((char *)result + 156) = 0;
  return result;
}

void sub_21B72C2A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B72C2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  char v11;
  int v12;
  char v13;

  *(_QWORD *)a1 = &off_24DF30CB0;
  *(_QWORD *)(a1 + 156) = 0;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_QWORD *)(a1 + 156) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_QWORD *)(a2 + 156);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4uLL;
    *(_QWORD *)(a1 + 156) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    v2 = *(_QWORD *)(a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2uLL;
    *(_QWORD *)(a1 + 156) = v3;
    *(_QWORD *)(a1 + 16) = v6;
    v2 = *(_QWORD *)(a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 48) = v7;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  v8 = *(_BYTE *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 152) = v8;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  v9 = *(_DWORD *)(a2 + 148);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v9;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  v10 = *(_BYTE *)(a2 + 153);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 153) = v10;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  v11 = *(_BYTE *)(a2 + 155);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 155) = v11;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0)
      goto LABEL_37;
    goto LABEL_72;
  }
LABEL_71:
  v12 = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v12;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_39;
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_75;
  }
LABEL_74:
  v13 = *(_BYTE *)(a2 + 154);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 154) = v13;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0)
      return *(float *)&v4;
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  if ((*(_QWORD *)(a2 + 156) & 8) == 0)
    return *(float *)&v4;
LABEL_76:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 156) = v3 | 8;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B72C6F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "crown");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isFall");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isNearFall");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "maxAbsX", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "maxAbsY", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxAbsZ", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "maxJerkVM", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "multiPeakAccelPathLengthWithPeak", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "multiPeakPathLengthDecorrelation", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "multiPeakPathLengthDelaySpread", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "multiPeakPathLengthHarmonicMean", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "sensorTime");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "timeto3rdZC", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(this, "withinCyclingImpactThresholds");
    if ((*(_QWORD *)(a1 + 156) & 0x1000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(this, "type");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x1000000000) != 0)
LABEL_38:
    PB::TextFormatter::format(this, "withinHardThresholds");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B72CBC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)(a1 + 156) |= 1uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_196;
            case 2u:
              *(_QWORD *)(a1 + 156) |= 4uLL;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_205:
                    v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_205;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_206;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_206:
              *(_QWORD *)(a1 + 24) = v25;
              goto LABEL_197;
            case 3u:
              *(_QWORD *)(a1 + 156) |= 2uLL;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_210:
                    v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_210;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_211;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_211:
              *(_QWORD *)(a1 + 16) = v31;
              goto LABEL_197;
            case 4u:
              *(_QWORD *)(a1 + 156) |= 0x40uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 5u:
              *(_QWORD *)(a1 + 156) |= 0x20uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 6u:
              *(_QWORD *)(a1 + 156) |= 0x20000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 7u:
              *(_QWORD *)(a1 + 156) |= 0x2000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 8u:
              *(_QWORD *)(a1 + 156) |= 0x10000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 9u:
              *(_QWORD *)(a1 + 156) |= 0x80000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xAu:
              *(_QWORD *)(a1 + 156) |= 0x10uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xBu:
              *(_QWORD *)(a1 + 156) |= 0x8000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xCu:
              *(_QWORD *)(a1 + 156) |= 0x4000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xDu:
              *(_QWORD *)(a1 + 156) |= 0x4000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xEu:
              *(_QWORD *)(a1 + 156) |= 0x10000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xFu:
              *(_QWORD *)(a1 + 156) |= 0x40000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x10u:
              *(_QWORD *)(a1 + 156) |= 0x20000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x11u:
              *(_QWORD *)(a1 + 156) |= 0x80uLL;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_216;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_215;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_216;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_197;
            case 0x12u:
              *(_QWORD *)(a1 + 156) |= 0x8000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x13u:
              *(_QWORD *)(a1 + 156) |= 0x200000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(_QWORD *)(a1 + 156) |= 0x100000000uLL;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_221;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_220;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_221;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *(_DWORD *)(a1 + 148) = v45;
              goto LABEL_197;
            case 0x15u:
              *(_QWORD *)(a1 + 156) |= 0x80000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x16u:
              *(_QWORD *)(a1 + 156) |= 0x400uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x17u:
              *(_QWORD *)(a1 + 156) |= 0x800uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x18u:
              *(_QWORD *)(a1 + 156) |= 0x1000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x19u:
              *(_QWORD *)(a1 + 156) |= 0x400000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(_QWORD *)(a1 + 156) |= 0x800000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(_QWORD *)(a1 + 156) |= 0x400000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(_QWORD *)(a1 + 156) |= 0x1000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Du:
              *(_QWORD *)(a1 + 156) |= 0x200000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(_QWORD *)(a1 + 156) |= 0x1000000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(_QWORD *)(a1 + 156) |= 0x100000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x20u:
              *(_QWORD *)(a1 + 156) |= 0x2000000uLL;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_226;
                  }
                  v77 = v51++;
                  v78 = *(_BYTE *)(v52 + v77);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_225;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_226;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *(_DWORD *)(a1 + 120) = v55;
LABEL_197:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x21u:
              *(_QWORD *)(a1 + 156) |= 0x200uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x22u:
              *(_QWORD *)(a1 + 156) |= 0x100uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x23u:
              *(_QWORD *)(a1 + 156) |= 0x800000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v58 = v57 != 0;
              }
              *(_BYTE *)(a1 + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(_QWORD *)(a1 + 156) |= 0x40000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x25u:
              *(_QWORD *)(a1 + 156) |= 8uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_195:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_196:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_150:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_197;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_197;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B72D938(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 156);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 32));
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  if ((*(_QWORD *)(v3 + 156) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 32));
  return result;
}

uint64_t sub_21B72DD68(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30CE8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B72DD80(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B72DDA4(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF30CE8;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B72DDF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroOn");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B72DE5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v27 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v27 = v26 != 0;
        }
        *(_BYTE *)(a1 + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v29 = 0;
          v30 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v31 = v20++;
            v32 = *(_BYTE *)(v21 + v31);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v14 = v30++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_47:
          v2 = v31 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B72E0DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B72E134(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30D20;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B72E14C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B72E170(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  *(_QWORD *)result = &off_24DF30D20;
  *(_DWORD *)(result + 52) = 0;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_WORD *)(result + 52) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 52) = v3;
    *(_QWORD *)(result + 24) = v5;
    v2 = *(_WORD *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 52) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 36) = v9;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_BYTE *)(a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 50) = v10;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_BYTE *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 44) = v11;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_BYTE *)(a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 45) = v12;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_BYTE *)(a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 46) = v13;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_BYTE *)(a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 47) = v14;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_28:
    v16 = *(_BYTE *)(a2 + 49);
    *(_WORD *)(result + 52) = v3 | 0x800;
    *(_BYTE *)(result + 49) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_BYTE *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(result + 52) = v3;
  *(_BYTE *)(result + 48) = v15;
  if ((*(_WORD *)(a2 + 52) & 0x800) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B72E2F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "consideredAlert");
    v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consideredRecovery");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "consideredSOS");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "droppedAlert");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "droppedRecovery");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "droppedSOS");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "fallTime");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "impactOperatingMode");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isOtherStateMachineProcessingNearbyImpact");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "refereeOperatingMode");
    if ((*(_WORD *)(a1 + 52) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "refereeCyclingStateDecision");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 4) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "sensorTime");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B72E4C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  BOOL v51;
  uint64_t result;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 52) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_151;
            case 2u:
              *(_WORD *)(a1 + 52) |= 4u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v67 = v20++;
                  v68 = *(_BYTE *)(v21 + v67);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    v24 = 0;
LABEL_129:
                    v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
                goto LABEL_129;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_130;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              v24 = 0;
LABEL_130:
              *(_QWORD *)(a1 + 24) = v24;
              goto LABEL_151;
            case 3u:
              *(_WORD *)(a1 + 52) |= 1u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    v30 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v71 = v26++;
                  v72 = *(_BYTE *)(v27 + v71);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v30 = 0;
LABEL_134:
                    v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v30 = 0;
                goto LABEL_134;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_135;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              v30 = 0;
LABEL_135:
              *(_QWORD *)(a1 + 8) = v30;
              goto LABEL_151;
            case 4u:
              *(_WORD *)(a1 + 52) |= 8u;
              v32 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v33 = *(_QWORD *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v36 = 0;
                if (v2 <= v32)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  v75 = v32++;
                  v76 = *(_BYTE *)(v33 + v75);
                  *((_QWORD *)this + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v36) = 0;
                goto LABEL_139;
              }
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v2 = v32 + 1;
                *((_QWORD *)this + 1) = v32 + 1;
                v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0)
                  goto LABEL_140;
                v34 += 7;
                v32 = v2;
                v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 32) = v36;
              goto LABEL_151;
            case 5u:
              *(_WORD *)(a1 + 52) |= 0x20u;
              v38 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v39 = *(_QWORD *)this;
              if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v42 = 0;
                if (v2 <= v38)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v79 = v38++;
                  v80 = *(_BYTE *)(v39 + v79);
                  *((_QWORD *)this + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v42) = 0;
                goto LABEL_144;
              }
              v40 = 0;
              v41 = 0;
              v42 = 0;
              do
              {
                v2 = v38 + 1;
                *((_QWORD *)this + 1) = v38 + 1;
                v43 = *(_BYTE *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0)
                  goto LABEL_145;
                v40 += 7;
                v38 = v2;
                v14 = v41++ > 8;
              }
              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 40) = v42;
              goto LABEL_151;
            case 6u:
              *(_WORD *)(a1 + 52) |= 0x10u;
              v44 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v45 = *(_QWORD *)this;
              if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v48 = 0;
                if (v2 <= v44)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v83 = v44++;
                  v84 = *(_BYTE *)(v45 + v83);
                  *((_QWORD *)this + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v48) = 0;
                goto LABEL_149;
              }
              v46 = 0;
              v47 = 0;
              v48 = 0;
              do
              {
                v2 = v44 + 1;
                *((_QWORD *)this + 1) = v44 + 1;
                v49 = *(_BYTE *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0)
                  goto LABEL_150;
                v46 += 7;
                v44 = v2;
                v14 = v47++ > 8;
              }
              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 36) = v48;
LABEL_151:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 7u:
              *(_WORD *)(a1 + 52) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v51 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v50 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v51 = v50 != 0;
              }
              *(_BYTE *)(a1 + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *(_WORD *)(a1 + 52) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v54 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v53 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v54 = v53 != 0;
              }
              *(_BYTE *)(a1 + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *(_WORD *)(a1 + 52) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v56 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v55 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v56 = v55 != 0;
              }
              *(_BYTE *)(a1 + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *(_WORD *)(a1 + 52) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v58 = v57 != 0;
              }
              *(_BYTE *)(a1 + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *(_WORD *)(a1 + 52) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v60 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v60 = v59 != 0;
              }
              *(_BYTE *)(a1 + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *(_WORD *)(a1 + 52) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v62 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v61 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v62 = v61 != 0;
              }
              *(_BYTE *)(a1 + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *(_WORD *)(a1 + 52) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v64 = v63 != 0;
              }
              *(_BYTE *)(a1 + 49) = v64;
              goto LABEL_151;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_151;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B72ECF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 52);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_26:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 52) & 0x800) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B72EE84(_QWORD *result)
{
  *result = &off_24DF30D58;
  *(_QWORD *)((char *)result + 364) = 0;
  return result;
}

void sub_21B72EEA0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B72EEC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double result;

  *(_QWORD *)a1 = &off_24DF30D58;
  v2 = (uint64_t *)(a1 + 364);
  *(_QWORD *)(a1 + 364) = 0;
  v3 = (uint64_t *)(a2 + 364);
  v4 = *(_QWORD *)(a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(_QWORD *)(a2 + 248);
    v5 = 0x40000000;
    *v2 = 0x40000000;
    *(_QWORD *)(a1 + 248) = v6;
    v4 = *v3;
    if ((*v3 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    v7 = *(_QWORD *)(a2 + 256);
    v5 |= 0x80000000uLL;
    *v2 = v5;
    *(_QWORD *)(a1 + 256) = v7;
    v4 = *v3;
  }
LABEL_6:
  if ((v4 & 0x80000) != 0)
  {
    v8 = *(_QWORD *)(a2 + 160);
    v5 |= 0x80000uLL;
    *v2 = v5;
    *(_QWORD *)(a1 + 160) = v8;
    v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0)
        goto LABEL_9;
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a2 + 168);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 168) = v9;
  v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_10;
    goto LABEL_53;
  }
LABEL_52:
  v10 = *(_QWORD *)(a2 + 176);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 176) = v10;
  v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_11;
    goto LABEL_54;
  }
LABEL_53:
  v11 = *(_QWORD *)(a2 + 320);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 320) = v11;
  v4 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_55;
  }
LABEL_54:
  v12 = *(_QWORD *)(a2 + 344);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 344) = v12;
  v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_56;
  }
LABEL_55:
  v13 = *(_QWORD *)(a2 + 328);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 328) = v13;
  v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_14;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *(_QWORD *)(a2 + 336);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 336) = v14;
  v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_15;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *(_QWORD *)(a2 + 352);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 352) = v15;
  v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_59;
  }
LABEL_58:
  v16 = *(_DWORD *)(a2 + 360);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *(_DWORD *)(a1 + 360) = v16;
  v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_60;
  }
LABEL_59:
  v17 = *(_QWORD *)(a2 + 200);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 200) = v17;
  v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_60:
  v18 = *(_QWORD *)(a2 + 224);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 224) = v18;
  v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_19;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *(_QWORD *)(a2 + 208);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 208) = v19;
  v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *(_QWORD *)(a2 + 216);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 216) = v20;
  v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *(_QWORD *)(a2 + 184);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 184) = v21;
  v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *(_QWORD *)(a2 + 192);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 192) = v22;
  v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_66;
  }
LABEL_65:
  v23 = *(_QWORD *)(a2 + 48);
  v5 |= 0x20uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 48) = v23;
  v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_67;
  }
LABEL_66:
  v24 = *(_QWORD *)(a2 + 32);
  v5 |= 8uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 32) = v24;
  v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_68;
  }
LABEL_67:
  v25 = *(_QWORD *)(a2 + 8);
  v5 |= 1uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 8) = v25;
  v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_69;
  }
LABEL_68:
  v26 = *(_QWORD *)(a2 + 56);
  v5 |= 0x40uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 56) = v26;
  v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_70;
  }
LABEL_69:
  v27 = *(_QWORD *)(a2 + 72);
  v5 |= 0x100uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 72) = v27;
  v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_71;
  }
LABEL_70:
  v28 = *(_QWORD *)(a2 + 40);
  v5 |= 0x10uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 40) = v28;
  v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0)
      goto LABEL_29;
    goto LABEL_72;
  }
LABEL_71:
  v29 = *(_QWORD *)(a2 + 80);
  v5 |= 0x200uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 80) = v29;
  v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0)
      goto LABEL_30;
    goto LABEL_73;
  }
LABEL_72:
  v30 = *(_QWORD *)(a2 + 88);
  v5 |= 0x400uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 88) = v30;
  v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_74;
  }
LABEL_73:
  v31 = *(_QWORD *)(a2 + 96);
  v5 |= 0x800uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 96) = v31;
  v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0)
      goto LABEL_32;
    goto LABEL_75;
  }
LABEL_74:
  v32 = *(_QWORD *)(a2 + 120);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 120) = v32;
  v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_75:
  v33 = *(_QWORD *)(a2 + 16);
  v5 |= 2uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 16) = v33;
  v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_34;
    goto LABEL_77;
  }
LABEL_76:
  v34 = *(_QWORD *)(a2 + 128);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 128) = v34;
  v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_35;
    goto LABEL_78;
  }
LABEL_77:
  v35 = *(_QWORD *)(a2 + 288);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 288) = v35;
  v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_79;
  }
LABEL_78:
  v36 = *(_QWORD *)(a2 + 280);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 280) = v36;
  v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_80;
  }
LABEL_79:
  v37 = *(_QWORD *)(a2 + 272);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 272) = v37;
  v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_38;
    goto LABEL_81;
  }
LABEL_80:
  v38 = *(_QWORD *)(a2 + 264);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 264) = v38;
  v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_82;
  }
LABEL_81:
  v39 = *(_QWORD *)(a2 + 240);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 240) = v39;
  v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_83;
  }
LABEL_82:
  v40 = *(_QWORD *)(a2 + 232);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 232) = v40;
  v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0)
      goto LABEL_41;
    goto LABEL_84;
  }
LABEL_83:
  v41 = *(_QWORD *)(a2 + 112);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 112) = v41;
  v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0)
      goto LABEL_42;
    goto LABEL_85;
  }
LABEL_84:
  v42 = *(_QWORD *)(a2 + 136);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 136) = v42;
  v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_42:
    if ((v4 & 0x40000) == 0)
      goto LABEL_43;
    goto LABEL_86;
  }
LABEL_85:
  v43 = *(_QWORD *)(a2 + 24);
  v5 |= 4uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 24) = v43;
  v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0)
      goto LABEL_44;
    goto LABEL_87;
  }
LABEL_86:
  v44 = *(_QWORD *)(a2 + 152);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 152) = v44;
  v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_88;
  }
LABEL_87:
  v45 = *(_QWORD *)(a2 + 144);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 144) = v45;
  v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0)
      goto LABEL_46;
    goto LABEL_89;
  }
LABEL_88:
  v46 = *(_QWORD *)(a2 + 64);
  v5 |= 0x80uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 64) = v46;
  v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_90;
  }
LABEL_89:
  v47 = *(_QWORD *)(a2 + 104);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 104) = v47;
  v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_48;
    goto LABEL_91;
  }
LABEL_90:
  v48 = *(_QWORD *)(a2 + 312);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 312) = v48;
  v4 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x2000000000) == 0)
      return result;
LABEL_92:
    result = *(double *)(a2 + 304);
    *v2 = v5 | 0x2000000000;
    *(double *)(a1 + 304) = result;
    return result;
  }
LABEL_91:
  v49 = *(_QWORD *)(a2 + 296);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *(_QWORD *)(a1 + 296) = v49;
  if ((*v3 & 0x2000000000) != 0)
    goto LABEL_92;
  return result;
}

uint64_t sub_21B72F3D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 364);
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "alertCanceledBecauseOfAbsenceOfQuiessence");
    v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alertCanceledBecauseOfActive");
  v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfChargerState");
  v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfCyclingPostImpact");
  v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDecimatedLowFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDistanceTraveledPostImpact");
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfHighFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLockedNoMotionPre");
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLowFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfNumberOfPeaksFFT");
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfOffBody");
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRepetitiveMotion");
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRetraction");
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSimilarPeaks");
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfStand");
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSteps");
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristState");
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePost");
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePre");
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "fallStatsDispatchResetOnAccelSensorTime");
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "fallStatsDispatchRestoredOnAccelSensorTime");
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "hkWorkoutId");
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "impactCanceledBecauseOfExistingAlert");
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfCyclingImpactThresholds");
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMaxAccelNormThreshold");
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMultiPeaks");
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfNaiveBayesClassifier");
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfOtherHardThresholds");
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactNewImpact");
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactOldImpact");
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "operatingMode");
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "skippedFallStatsSensorTime");
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "skippedGyroSensorTime");
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfAbsenceOfLongLie");
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfActive");
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfStand");
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfSteps");
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "sosConsideredFallTimestamp");
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "sosConsideredIOSTime", *(double *)(a1 + 304));
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "sosConsideredSensorTime");
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "workoutId");
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "workoutTransitionPause");
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(this, "workoutTransitionStart");
    if ((*v5 & 0x80000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(this, "workoutTransitionResume");
  v6 = *v5;
  if ((*v5 & 0x40000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v6 & 0x80000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(this, "workoutTransitionStop");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B72F9B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  char v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  unsigned int v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char v297;
  unsigned int v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t v316;
  char v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char v337;
  unsigned int v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  char v345;
  unsigned int v346;
  uint64_t v347;
  unint64_t v348;
  char v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char v353;
  unsigned int v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  char v361;
  unsigned int v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  char v369;
  unsigned int v370;
  uint64_t v371;
  unint64_t v372;
  char v373;
  unint64_t v374;
  char v375;
  unsigned int v376;
  unint64_t v377;
  char v378;
  char v379;
  unsigned int v380;
  unint64_t v381;
  char v382;
  char v383;
  unsigned int v384;
  unint64_t v385;
  char v386;
  char v387;
  unsigned int v388;
  unint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  unint64_t v393;
  char v394;
  char v395;
  unsigned int v396;
  unint64_t v397;
  char v398;
  char v399;
  unsigned int v400;
  unint64_t v401;
  char v402;
  char v403;
  unsigned int v404;
  unint64_t v405;
  char v406;
  char v407;
  unsigned int v408;
  unint64_t v409;
  char v410;
  char v411;
  unsigned int v412;
  unint64_t v413;
  char v414;
  char v415;
  unsigned int v416;
  unint64_t v417;
  char v418;
  char v419;
  unsigned int v420;
  unint64_t v421;
  char v422;
  char v423;
  unsigned int v424;
  unint64_t v425;
  char v426;
  char v427;
  unsigned int v428;
  unint64_t v429;
  char v430;
  char v431;
  unsigned int v432;
  unint64_t v433;
  char v434;
  char v435;
  unsigned int v436;
  unint64_t v437;
  char v438;
  char v439;
  unsigned int v440;
  unint64_t v441;
  char v442;
  char v443;
  unsigned int v444;
  unint64_t v445;
  char v446;
  char v447;
  unsigned int v448;
  unint64_t v449;
  char v450;
  char v451;
  unsigned int v452;
  unint64_t v453;
  char v454;
  char v455;
  unsigned int v456;
  unint64_t v457;
  char v458;
  char v459;
  unsigned int v460;
  unint64_t v461;
  char v462;
  char v463;
  unsigned int v464;
  unint64_t v465;
  char v466;
  char v467;
  unsigned int v468;
  unint64_t v469;
  char v470;
  char v471;
  unsigned int v472;
  unint64_t v473;
  char v474;
  char v475;
  unsigned int v476;
  unint64_t v477;
  char v478;
  char v479;
  unsigned int v480;
  unint64_t v481;
  char v482;
  char v483;
  unsigned int v484;
  unint64_t v485;
  char v486;
  char v487;
  unsigned int v488;
  unint64_t v489;
  char v490;
  char v491;
  unsigned int v492;
  unint64_t v493;
  char v494;
  char v495;
  unsigned int v496;
  unint64_t v497;
  char v498;
  char v499;
  unsigned int v500;
  unint64_t v501;
  char v502;
  char v503;
  unsigned int v504;
  unint64_t v505;
  char v506;
  char v507;
  unsigned int v508;
  unint64_t v509;
  char v510;
  char v511;
  unsigned int v512;
  unint64_t v513;
  char v514;
  char v515;
  unsigned int v516;
  unint64_t v517;
  char v518;
  char v519;
  unsigned int v520;
  unint64_t v521;
  char v522;
  char v523;
  unsigned int v524;
  unint64_t v525;
  char v526;
  char v527;
  unsigned int v528;
  unint64_t v529;
  char v530;
  char v531;
  unsigned int v532;
  unint64_t v533;
  char v534;
  char v535;
  unsigned int v536;
  unint64_t v537;
  char v538;
  char v539;
  unsigned int v540;
  unint64_t v541;
  char v542;
  char v543;
  unsigned int v544;
  unint64_t v545;
  char v546;
  char v547;
  unsigned int v548;
  unint64_t v549;
  char v550;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)(a1 + 364);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          v23 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            v375 = 0;
            v376 = 0;
            v26 = 0;
            if (v22 <= v21)
              v22 = *((_QWORD *)this + 1);
            do
            {
              if (v22 == v21)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_648;
              }
              v377 = v21 + 1;
              v378 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)this + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  v26 = 0;
                goto LABEL_648;
              }
              v375 += 7;
              v21 = v377;
              v15 = v376++ > 8;
            }
            while (!v15);
LABEL_342:
            v26 = 0;
          }
          else
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            while (1)
            {
              v27 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                break;
              v24 += 7;
              v21 = v27;
              v15 = v25++ > 8;
              if (v15)
                goto LABEL_342;
            }
          }
LABEL_648:
          *(_QWORD *)(a1 + 248) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_652;
              v32 += 7;
              v29 = v35;
              v15 = v33++ > 8;
            }
            while (!v15);
LABEL_349:
            v34 = 0;
            goto LABEL_652;
          }
          v379 = 0;
          v380 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v381 = v29 + 1;
              v382 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                v29 = v381;
                v15 = v380++ > 8;
                if (v15)
                  goto LABEL_349;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_652:
          *(_QWORD *)(a1 + 256) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          v40 = *(_QWORD *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)this + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_656;
              v41 += 7;
              v38 = v44;
              v15 = v42++ > 8;
            }
            while (!v15);
LABEL_356:
            v43 = 0;
            goto LABEL_656;
          }
          v383 = 0;
          v384 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v39 == v38)
            {
              v43 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v385 = v38 + 1;
              v386 = *(_BYTE *)(v40 + v38);
              *((_QWORD *)this + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                v38 = v385;
                v15 = v384++ > 8;
                if (v15)
                  goto LABEL_356;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v43 = 0;
            }
            break;
          }
LABEL_656:
          *(_QWORD *)(a1 + 160) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_660;
              v49 += 7;
              v46 = v52;
              v15 = v50++ > 8;
            }
            while (!v15);
LABEL_363:
            v51 = 0;
            goto LABEL_660;
          }
          v387 = 0;
          v388 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v389 = v46 + 1;
              v390 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                v46 = v389;
                v15 = v388++ > 8;
                if (v15)
                  goto LABEL_363;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v51 = 0;
            }
            break;
          }
LABEL_660:
          *(_QWORD *)(a1 + 168) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          v56 = *(_QWORD *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)this + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_664;
              v57 += 7;
              v54 = v60;
              v15 = v58++ > 8;
            }
            while (!v15);
LABEL_370:
            v59 = 0;
            goto LABEL_664;
          }
          v391 = 0;
          v392 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v55 == v54)
            {
              v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v393 = v54 + 1;
              v394 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)this + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                v54 = v393;
                v15 = v392++ > 8;
                if (v15)
                  goto LABEL_370;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v59 = 0;
            }
            break;
          }
LABEL_664:
          *(_QWORD *)(a1 + 176) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          v62 = *((_QWORD *)this + 1);
          v63 = *((_QWORD *)this + 2);
          v64 = *(_QWORD *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v68 = v62 + 1;
              *((_QWORD *)this + 1) = v62 + 1;
              v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0)
                goto LABEL_668;
              v65 += 7;
              v62 = v68;
              v15 = v66++ > 8;
            }
            while (!v15);
LABEL_377:
            v67 = 0;
            goto LABEL_668;
          }
          v395 = 0;
          v396 = 0;
          v67 = 0;
          if (v63 <= v62)
            v63 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v63 == v62)
            {
              v67 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v397 = v62 + 1;
              v398 = *(_BYTE *)(v64 + v62);
              *((_QWORD *)this + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                v62 = v397;
                v15 = v396++ > 8;
                if (v15)
                  goto LABEL_377;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v67 = 0;
            }
            break;
          }
LABEL_668:
          *(_QWORD *)(a1 + 320) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          v72 = *(_QWORD *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)this + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_672;
              v73 += 7;
              v70 = v76;
              v15 = v74++ > 8;
            }
            while (!v15);
LABEL_384:
            v75 = 0;
            goto LABEL_672;
          }
          v399 = 0;
          v400 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v71 == v70)
            {
              v75 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v401 = v70 + 1;
              v402 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)this + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                v70 = v401;
                v15 = v400++ > 8;
                if (v15)
                  goto LABEL_384;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v75 = 0;
            }
            break;
          }
LABEL_672:
          *(_QWORD *)(a1 + 344) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          v78 = *((_QWORD *)this + 1);
          v79 = *((_QWORD *)this + 2);
          v80 = *(_QWORD *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            do
            {
              v84 = v78 + 1;
              *((_QWORD *)this + 1) = v78 + 1;
              v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0)
                goto LABEL_676;
              v81 += 7;
              v78 = v84;
              v15 = v82++ > 8;
            }
            while (!v15);
LABEL_391:
            v83 = 0;
            goto LABEL_676;
          }
          v403 = 0;
          v404 = 0;
          v83 = 0;
          if (v79 <= v78)
            v79 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v79 == v78)
            {
              v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v405 = v78 + 1;
              v406 = *(_BYTE *)(v80 + v78);
              *((_QWORD *)this + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                v78 = v405;
                v15 = v404++ > 8;
                if (v15)
                  goto LABEL_391;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v83 = 0;
            }
            break;
          }
LABEL_676:
          *(_QWORD *)(a1 + 328) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          v86 = *((_QWORD *)this + 1);
          v87 = *((_QWORD *)this + 2);
          v88 = *(_QWORD *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)this + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_680;
              v89 += 7;
              v86 = v92;
              v15 = v90++ > 8;
            }
            while (!v15);
LABEL_398:
            v91 = 0;
            goto LABEL_680;
          }
          v407 = 0;
          v408 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v409 = v86 + 1;
              v410 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)this + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                v86 = v409;
                v15 = v408++ > 8;
                if (v15)
                  goto LABEL_398;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v91 = 0;
            }
            break;
          }
LABEL_680:
          *(_QWORD *)(a1 + 336) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          v96 = *(_QWORD *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)this + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_684;
              v97 += 7;
              v94 = v100;
              v15 = v98++ > 8;
            }
            while (!v15);
LABEL_405:
            v99 = 0;
            goto LABEL_684;
          }
          v411 = 0;
          v412 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v95 == v94)
            {
              v99 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v413 = v94 + 1;
              v414 = *(_BYTE *)(v96 + v94);
              *((_QWORD *)this + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                v94 = v413;
                v15 = v412++ > 8;
                if (v15)
                  goto LABEL_405;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v99 = 0;
            }
            break;
          }
LABEL_684:
          *(_QWORD *)(a1 + 352) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          v102 = *((_QWORD *)this + 1);
          v103 = *((_QWORD *)this + 2);
          v104 = *(_QWORD *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)this + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_688;
              v105 += 7;
              v102 = v108;
              v15 = v106++ > 8;
            }
            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }
          v415 = 0;
          v416 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v417 = v102 + 1;
              v418 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)this + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                v102 = v417;
                v15 = v416++ > 8;
                if (v15)
                  goto LABEL_412;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v107) = 0;
            }
            break;
          }
LABEL_688:
          *(_DWORD *)(a1 + 360) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          v110 = *((_QWORD *)this + 1);
          v111 = *((_QWORD *)this + 2);
          v112 = *(_QWORD *)this;
          if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
          {
            v113 = 0;
            v114 = 0;
            v115 = 0;
            do
            {
              v116 = v110 + 1;
              *((_QWORD *)this + 1) = v110 + 1;
              v117 = *(_BYTE *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0)
                goto LABEL_692;
              v113 += 7;
              v110 = v116;
              v15 = v114++ > 8;
            }
            while (!v15);
LABEL_419:
            v115 = 0;
            goto LABEL_692;
          }
          v419 = 0;
          v420 = 0;
          v115 = 0;
          if (v111 <= v110)
            v111 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v111 == v110)
            {
              v115 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v421 = v110 + 1;
              v422 = *(_BYTE *)(v112 + v110);
              *((_QWORD *)this + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                v110 = v421;
                v15 = v420++ > 8;
                if (v15)
                  goto LABEL_419;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v115 = 0;
            }
            break;
          }
LABEL_692:
          *(_QWORD *)(a1 + 200) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          v118 = *((_QWORD *)this + 1);
          v119 = *((_QWORD *)this + 2);
          v120 = *(_QWORD *)this;
          if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
          {
            v121 = 0;
            v122 = 0;
            v123 = 0;
            do
            {
              v124 = v118 + 1;
              *((_QWORD *)this + 1) = v118 + 1;
              v125 = *(_BYTE *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0)
                goto LABEL_696;
              v121 += 7;
              v118 = v124;
              v15 = v122++ > 8;
            }
            while (!v15);
LABEL_426:
            v123 = 0;
            goto LABEL_696;
          }
          v423 = 0;
          v424 = 0;
          v123 = 0;
          if (v119 <= v118)
            v119 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v119 == v118)
            {
              v123 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v425 = v118 + 1;
              v426 = *(_BYTE *)(v120 + v118);
              *((_QWORD *)this + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                v118 = v425;
                v15 = v424++ > 8;
                if (v15)
                  goto LABEL_426;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v123 = 0;
            }
            break;
          }
LABEL_696:
          *(_QWORD *)(a1 + 224) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          v126 = *((_QWORD *)this + 1);
          v127 = *((_QWORD *)this + 2);
          v128 = *(_QWORD *)this;
          if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            do
            {
              v132 = v126 + 1;
              *((_QWORD *)this + 1) = v126 + 1;
              v133 = *(_BYTE *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0)
                goto LABEL_700;
              v129 += 7;
              v126 = v132;
              v15 = v130++ > 8;
            }
            while (!v15);
LABEL_433:
            v131 = 0;
            goto LABEL_700;
          }
          v427 = 0;
          v428 = 0;
          v131 = 0;
          if (v127 <= v126)
            v127 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v127 == v126)
            {
              v131 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v429 = v126 + 1;
              v430 = *(_BYTE *)(v128 + v126);
              *((_QWORD *)this + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                v126 = v429;
                v15 = v428++ > 8;
                if (v15)
                  goto LABEL_433;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v131 = 0;
            }
            break;
          }
LABEL_700:
          *(_QWORD *)(a1 + 208) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          v134 = *((_QWORD *)this + 1);
          v135 = *((_QWORD *)this + 2);
          v136 = *(_QWORD *)this;
          if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
          {
            v137 = 0;
            v138 = 0;
            v139 = 0;
            do
            {
              v140 = v134 + 1;
              *((_QWORD *)this + 1) = v134 + 1;
              v141 = *(_BYTE *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0)
                goto LABEL_704;
              v137 += 7;
              v134 = v140;
              v15 = v138++ > 8;
            }
            while (!v15);
LABEL_440:
            v139 = 0;
            goto LABEL_704;
          }
          v431 = 0;
          v432 = 0;
          v139 = 0;
          if (v135 <= v134)
            v135 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v135 == v134)
            {
              v139 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v433 = v134 + 1;
              v434 = *(_BYTE *)(v136 + v134);
              *((_QWORD *)this + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                v134 = v433;
                v15 = v432++ > 8;
                if (v15)
                  goto LABEL_440;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v139 = 0;
            }
            break;
          }
LABEL_704:
          *(_QWORD *)(a1 + 216) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          v142 = *((_QWORD *)this + 1);
          v143 = *((_QWORD *)this + 2);
          v144 = *(_QWORD *)this;
          if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
          {
            v145 = 0;
            v146 = 0;
            v147 = 0;
            do
            {
              v148 = v142 + 1;
              *((_QWORD *)this + 1) = v142 + 1;
              v149 = *(_BYTE *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0)
                goto LABEL_708;
              v145 += 7;
              v142 = v148;
              v15 = v146++ > 8;
            }
            while (!v15);
LABEL_447:
            v147 = 0;
            goto LABEL_708;
          }
          v435 = 0;
          v436 = 0;
          v147 = 0;
          if (v143 <= v142)
            v143 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v143 == v142)
            {
              v147 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v437 = v142 + 1;
              v438 = *(_BYTE *)(v144 + v142);
              *((_QWORD *)this + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                v142 = v437;
                v15 = v436++ > 8;
                if (v15)
                  goto LABEL_447;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v147 = 0;
            }
            break;
          }
LABEL_708:
          *(_QWORD *)(a1 + 184) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          v150 = *((_QWORD *)this + 1);
          v151 = *((_QWORD *)this + 2);
          v152 = *(_QWORD *)this;
          if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
          {
            v153 = 0;
            v154 = 0;
            v155 = 0;
            do
            {
              v156 = v150 + 1;
              *((_QWORD *)this + 1) = v150 + 1;
              v157 = *(_BYTE *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0)
                goto LABEL_712;
              v153 += 7;
              v150 = v156;
              v15 = v154++ > 8;
            }
            while (!v15);
LABEL_454:
            v155 = 0;
            goto LABEL_712;
          }
          v439 = 0;
          v440 = 0;
          v155 = 0;
          if (v151 <= v150)
            v151 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v151 == v150)
            {
              v155 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v441 = v150 + 1;
              v442 = *(_BYTE *)(v152 + v150);
              *((_QWORD *)this + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                v150 = v441;
                v15 = v440++ > 8;
                if (v15)
                  goto LABEL_454;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v155 = 0;
            }
            break;
          }
LABEL_712:
          *(_QWORD *)(a1 + 192) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          v158 = *((_QWORD *)this + 1);
          v159 = *((_QWORD *)this + 2);
          v160 = *(_QWORD *)this;
          if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
          {
            v161 = 0;
            v162 = 0;
            v163 = 0;
            do
            {
              v164 = v158 + 1;
              *((_QWORD *)this + 1) = v158 + 1;
              v165 = *(_BYTE *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0)
                goto LABEL_716;
              v161 += 7;
              v158 = v164;
              v15 = v162++ > 8;
            }
            while (!v15);
LABEL_461:
            v163 = 0;
            goto LABEL_716;
          }
          v443 = 0;
          v444 = 0;
          v163 = 0;
          if (v159 <= v158)
            v159 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v159 == v158)
            {
              v163 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v445 = v158 + 1;
              v446 = *(_BYTE *)(v160 + v158);
              *((_QWORD *)this + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                v158 = v445;
                v15 = v444++ > 8;
                if (v15)
                  goto LABEL_461;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v163 = 0;
            }
            break;
          }
LABEL_716:
          *(_QWORD *)(a1 + 48) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          v166 = *((_QWORD *)this + 1);
          v167 = *((_QWORD *)this + 2);
          v168 = *(_QWORD *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)this + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_720;
              v169 += 7;
              v166 = v172;
              v15 = v170++ > 8;
            }
            while (!v15);
LABEL_468:
            v171 = 0;
            goto LABEL_720;
          }
          v447 = 0;
          v448 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v167 == v166)
            {
              v171 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v449 = v166 + 1;
              v450 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)this + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                v166 = v449;
                v15 = v448++ > 8;
                if (v15)
                  goto LABEL_468;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v171 = 0;
            }
            break;
          }
LABEL_720:
          *(_QWORD *)(a1 + 32) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          v174 = *((_QWORD *)this + 1);
          v175 = *((_QWORD *)this + 2);
          v176 = *(_QWORD *)this;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            v177 = 0;
            v178 = 0;
            v179 = 0;
            do
            {
              v180 = v174 + 1;
              *((_QWORD *)this + 1) = v174 + 1;
              v181 = *(_BYTE *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0)
                goto LABEL_724;
              v177 += 7;
              v174 = v180;
              v15 = v178++ > 8;
            }
            while (!v15);
LABEL_475:
            v179 = 0;
            goto LABEL_724;
          }
          v451 = 0;
          v452 = 0;
          v179 = 0;
          if (v175 <= v174)
            v175 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v175 == v174)
            {
              v179 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v453 = v174 + 1;
              v454 = *(_BYTE *)(v176 + v174);
              *((_QWORD *)this + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                v174 = v453;
                v15 = v452++ > 8;
                if (v15)
                  goto LABEL_475;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v179 = 0;
            }
            break;
          }
LABEL_724:
          *(_QWORD *)(a1 + 8) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          v182 = *((_QWORD *)this + 1);
          v183 = *((_QWORD *)this + 2);
          v184 = *(_QWORD *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v185 = 0;
            v186 = 0;
            v187 = 0;
            do
            {
              v188 = v182 + 1;
              *((_QWORD *)this + 1) = v182 + 1;
              v189 = *(_BYTE *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0)
                goto LABEL_728;
              v185 += 7;
              v182 = v188;
              v15 = v186++ > 8;
            }
            while (!v15);
LABEL_482:
            v187 = 0;
            goto LABEL_728;
          }
          v455 = 0;
          v456 = 0;
          v187 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v183 == v182)
            {
              v187 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v457 = v182 + 1;
              v458 = *(_BYTE *)(v184 + v182);
              *((_QWORD *)this + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                v182 = v457;
                v15 = v456++ > 8;
                if (v15)
                  goto LABEL_482;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v187 = 0;
            }
            break;
          }
LABEL_728:
          *(_QWORD *)(a1 + 56) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          v190 = *((_QWORD *)this + 1);
          v191 = *((_QWORD *)this + 2);
          v192 = *(_QWORD *)this;
          if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
          {
            v193 = 0;
            v194 = 0;
            v195 = 0;
            do
            {
              v196 = v190 + 1;
              *((_QWORD *)this + 1) = v190 + 1;
              v197 = *(_BYTE *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0)
                goto LABEL_732;
              v193 += 7;
              v190 = v196;
              v15 = v194++ > 8;
            }
            while (!v15);
LABEL_489:
            v195 = 0;
            goto LABEL_732;
          }
          v459 = 0;
          v460 = 0;
          v195 = 0;
          if (v191 <= v190)
            v191 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v191 == v190)
            {
              v195 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v461 = v190 + 1;
              v462 = *(_BYTE *)(v192 + v190);
              *((_QWORD *)this + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                v190 = v461;
                v15 = v460++ > 8;
                if (v15)
                  goto LABEL_489;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v195 = 0;
            }
            break;
          }
LABEL_732:
          *(_QWORD *)(a1 + 72) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          v198 = *((_QWORD *)this + 1);
          v199 = *((_QWORD *)this + 2);
          v200 = *(_QWORD *)this;
          if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
          {
            v201 = 0;
            v202 = 0;
            v203 = 0;
            do
            {
              v204 = v198 + 1;
              *((_QWORD *)this + 1) = v198 + 1;
              v205 = *(_BYTE *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0)
                goto LABEL_736;
              v201 += 7;
              v198 = v204;
              v15 = v202++ > 8;
            }
            while (!v15);
LABEL_496:
            v203 = 0;
            goto LABEL_736;
          }
          v463 = 0;
          v464 = 0;
          v203 = 0;
          if (v199 <= v198)
            v199 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v199 == v198)
            {
              v203 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v465 = v198 + 1;
              v466 = *(_BYTE *)(v200 + v198);
              *((_QWORD *)this + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                v198 = v465;
                v15 = v464++ > 8;
                if (v15)
                  goto LABEL_496;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v203 = 0;
            }
            break;
          }
LABEL_736:
          *(_QWORD *)(a1 + 40) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          v206 = *((_QWORD *)this + 1);
          v207 = *((_QWORD *)this + 2);
          v208 = *(_QWORD *)this;
          if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
          {
            v209 = 0;
            v210 = 0;
            v211 = 0;
            do
            {
              v212 = v206 + 1;
              *((_QWORD *)this + 1) = v206 + 1;
              v213 = *(_BYTE *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0)
                goto LABEL_740;
              v209 += 7;
              v206 = v212;
              v15 = v210++ > 8;
            }
            while (!v15);
LABEL_503:
            v211 = 0;
            goto LABEL_740;
          }
          v467 = 0;
          v468 = 0;
          v211 = 0;
          if (v207 <= v206)
            v207 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v207 == v206)
            {
              v211 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v469 = v206 + 1;
              v470 = *(_BYTE *)(v208 + v206);
              *((_QWORD *)this + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                v206 = v469;
                v15 = v468++ > 8;
                if (v15)
                  goto LABEL_503;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v211 = 0;
            }
            break;
          }
LABEL_740:
          *(_QWORD *)(a1 + 80) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          v214 = *((_QWORD *)this + 1);
          v215 = *((_QWORD *)this + 2);
          v216 = *(_QWORD *)this;
          if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
          {
            v217 = 0;
            v218 = 0;
            v219 = 0;
            do
            {
              v220 = v214 + 1;
              *((_QWORD *)this + 1) = v214 + 1;
              v221 = *(_BYTE *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0)
                goto LABEL_744;
              v217 += 7;
              v214 = v220;
              v15 = v218++ > 8;
            }
            while (!v15);
LABEL_510:
            v219 = 0;
            goto LABEL_744;
          }
          v471 = 0;
          v472 = 0;
          v219 = 0;
          if (v215 <= v214)
            v215 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v215 == v214)
            {
              v219 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v473 = v214 + 1;
              v474 = *(_BYTE *)(v216 + v214);
              *((_QWORD *)this + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                v214 = v473;
                v15 = v472++ > 8;
                if (v15)
                  goto LABEL_510;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v219 = 0;
            }
            break;
          }
LABEL_744:
          *(_QWORD *)(a1 + 88) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          v222 = *((_QWORD *)this + 1);
          v223 = *((_QWORD *)this + 2);
          v224 = *(_QWORD *)this;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            v225 = 0;
            v226 = 0;
            v227 = 0;
            do
            {
              v228 = v222 + 1;
              *((_QWORD *)this + 1) = v222 + 1;
              v229 = *(_BYTE *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0)
                goto LABEL_748;
              v225 += 7;
              v222 = v228;
              v15 = v226++ > 8;
            }
            while (!v15);
LABEL_517:
            v227 = 0;
            goto LABEL_748;
          }
          v475 = 0;
          v476 = 0;
          v227 = 0;
          if (v223 <= v222)
            v223 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v223 == v222)
            {
              v227 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v477 = v222 + 1;
              v478 = *(_BYTE *)(v224 + v222);
              *((_QWORD *)this + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                v222 = v477;
                v15 = v476++ > 8;
                if (v15)
                  goto LABEL_517;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v227 = 0;
            }
            break;
          }
LABEL_748:
          *(_QWORD *)(a1 + 96) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          v230 = *((_QWORD *)this + 1);
          v231 = *((_QWORD *)this + 2);
          v232 = *(_QWORD *)this;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            v233 = 0;
            v234 = 0;
            v235 = 0;
            do
            {
              v236 = v230 + 1;
              *((_QWORD *)this + 1) = v230 + 1;
              v237 = *(_BYTE *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0)
                goto LABEL_752;
              v233 += 7;
              v230 = v236;
              v15 = v234++ > 8;
            }
            while (!v15);
LABEL_524:
            v235 = 0;
            goto LABEL_752;
          }
          v479 = 0;
          v480 = 0;
          v235 = 0;
          if (v231 <= v230)
            v231 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v231 == v230)
            {
              v235 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v481 = v230 + 1;
              v482 = *(_BYTE *)(v232 + v230);
              *((_QWORD *)this + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                v230 = v481;
                v15 = v480++ > 8;
                if (v15)
                  goto LABEL_524;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v235 = 0;
            }
            break;
          }
LABEL_752:
          *(_QWORD *)(a1 + 120) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          v238 = *((_QWORD *)this + 1);
          v239 = *((_QWORD *)this + 2);
          v240 = *(_QWORD *)this;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            v241 = 0;
            v242 = 0;
            v243 = 0;
            do
            {
              v244 = v238 + 1;
              *((_QWORD *)this + 1) = v238 + 1;
              v245 = *(_BYTE *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0)
                goto LABEL_756;
              v241 += 7;
              v238 = v244;
              v15 = v242++ > 8;
            }
            while (!v15);
LABEL_531:
            v243 = 0;
            goto LABEL_756;
          }
          v483 = 0;
          v484 = 0;
          v243 = 0;
          if (v239 <= v238)
            v239 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v239 == v238)
            {
              v243 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v485 = v238 + 1;
              v486 = *(_BYTE *)(v240 + v238);
              *((_QWORD *)this + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                v238 = v485;
                v15 = v484++ > 8;
                if (v15)
                  goto LABEL_531;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v243 = 0;
            }
            break;
          }
LABEL_756:
          *(_QWORD *)(a1 + 16) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          v246 = *((_QWORD *)this + 1);
          v247 = *((_QWORD *)this + 2);
          v248 = *(_QWORD *)this;
          if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
          {
            v249 = 0;
            v250 = 0;
            v251 = 0;
            do
            {
              v252 = v246 + 1;
              *((_QWORD *)this + 1) = v246 + 1;
              v253 = *(_BYTE *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0)
                goto LABEL_760;
              v249 += 7;
              v246 = v252;
              v15 = v250++ > 8;
            }
            while (!v15);
LABEL_538:
            v251 = 0;
            goto LABEL_760;
          }
          v487 = 0;
          v488 = 0;
          v251 = 0;
          if (v247 <= v246)
            v247 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v247 == v246)
            {
              v251 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v489 = v246 + 1;
              v490 = *(_BYTE *)(v248 + v246);
              *((_QWORD *)this + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                v246 = v489;
                v15 = v488++ > 8;
                if (v15)
                  goto LABEL_538;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v251 = 0;
            }
            break;
          }
LABEL_760:
          *(_QWORD *)(a1 + 128) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          v254 = *((_QWORD *)this + 1);
          v255 = *((_QWORD *)this + 2);
          v256 = *(_QWORD *)this;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            v257 = 0;
            v258 = 0;
            v259 = 0;
            do
            {
              v260 = v254 + 1;
              *((_QWORD *)this + 1) = v254 + 1;
              v261 = *(_BYTE *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0)
                goto LABEL_764;
              v257 += 7;
              v254 = v260;
              v15 = v258++ > 8;
            }
            while (!v15);
LABEL_545:
            v259 = 0;
            goto LABEL_764;
          }
          v491 = 0;
          v492 = 0;
          v259 = 0;
          if (v255 <= v254)
            v255 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v255 == v254)
            {
              v259 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v493 = v254 + 1;
              v494 = *(_BYTE *)(v256 + v254);
              *((_QWORD *)this + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                v254 = v493;
                v15 = v492++ > 8;
                if (v15)
                  goto LABEL_545;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v259 = 0;
            }
            break;
          }
LABEL_764:
          *(_QWORD *)(a1 + 288) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          v262 = *((_QWORD *)this + 1);
          v263 = *((_QWORD *)this + 2);
          v264 = *(_QWORD *)this;
          if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
          {
            v265 = 0;
            v266 = 0;
            v267 = 0;
            do
            {
              v268 = v262 + 1;
              *((_QWORD *)this + 1) = v262 + 1;
              v269 = *(_BYTE *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0)
                goto LABEL_768;
              v265 += 7;
              v262 = v268;
              v15 = v266++ > 8;
            }
            while (!v15);
LABEL_552:
            v267 = 0;
            goto LABEL_768;
          }
          v495 = 0;
          v496 = 0;
          v267 = 0;
          if (v263 <= v262)
            v263 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v263 == v262)
            {
              v267 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v497 = v262 + 1;
              v498 = *(_BYTE *)(v264 + v262);
              *((_QWORD *)this + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                v262 = v497;
                v15 = v496++ > 8;
                if (v15)
                  goto LABEL_552;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v267 = 0;
            }
            break;
          }
LABEL_768:
          *(_QWORD *)(a1 + 280) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          v270 = *((_QWORD *)this + 1);
          v271 = *((_QWORD *)this + 2);
          v272 = *(_QWORD *)this;
          if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
          {
            v273 = 0;
            v274 = 0;
            v275 = 0;
            do
            {
              v276 = v270 + 1;
              *((_QWORD *)this + 1) = v270 + 1;
              v277 = *(_BYTE *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0)
                goto LABEL_772;
              v273 += 7;
              v270 = v276;
              v15 = v274++ > 8;
            }
            while (!v15);
LABEL_559:
            v275 = 0;
            goto LABEL_772;
          }
          v499 = 0;
          v500 = 0;
          v275 = 0;
          if (v271 <= v270)
            v271 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v271 == v270)
            {
              v275 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v501 = v270 + 1;
              v502 = *(_BYTE *)(v272 + v270);
              *((_QWORD *)this + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                v270 = v501;
                v15 = v500++ > 8;
                if (v15)
                  goto LABEL_559;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v275 = 0;
            }
            break;
          }
LABEL_772:
          *(_QWORD *)(a1 + 272) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= 0x100000000uLL;
          v278 = *((_QWORD *)this + 1);
          v279 = *((_QWORD *)this + 2);
          v280 = *(_QWORD *)this;
          if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
          {
            v281 = 0;
            v282 = 0;
            v283 = 0;
            do
            {
              v284 = v278 + 1;
              *((_QWORD *)this + 1) = v278 + 1;
              v285 = *(_BYTE *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0)
                goto LABEL_776;
              v281 += 7;
              v278 = v284;
              v15 = v282++ > 8;
            }
            while (!v15);
LABEL_566:
            v283 = 0;
            goto LABEL_776;
          }
          v503 = 0;
          v504 = 0;
          v283 = 0;
          if (v279 <= v278)
            v279 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v279 == v278)
            {
              v283 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v505 = v278 + 1;
              v506 = *(_BYTE *)(v280 + v278);
              *((_QWORD *)this + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                v278 = v505;
                v15 = v504++ > 8;
                if (v15)
                  goto LABEL_566;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v283 = 0;
            }
            break;
          }
LABEL_776:
          *(_QWORD *)(a1 + 264) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          v286 = *((_QWORD *)this + 1);
          v287 = *((_QWORD *)this + 2);
          v288 = *(_QWORD *)this;
          if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
          {
            v289 = 0;
            v290 = 0;
            v291 = 0;
            do
            {
              v292 = v286 + 1;
              *((_QWORD *)this + 1) = v286 + 1;
              v293 = *(_BYTE *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0)
                goto LABEL_780;
              v289 += 7;
              v286 = v292;
              v15 = v290++ > 8;
            }
            while (!v15);
LABEL_573:
            v291 = 0;
            goto LABEL_780;
          }
          v507 = 0;
          v508 = 0;
          v291 = 0;
          if (v287 <= v286)
            v287 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v287 == v286)
            {
              v291 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v509 = v286 + 1;
              v510 = *(_BYTE *)(v288 + v286);
              *((_QWORD *)this + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                v286 = v509;
                v15 = v508++ > 8;
                if (v15)
                  goto LABEL_573;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v291 = 0;
            }
            break;
          }
LABEL_780:
          *(_QWORD *)(a1 + 240) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          v294 = *((_QWORD *)this + 1);
          v295 = *((_QWORD *)this + 2);
          v296 = *(_QWORD *)this;
          if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
          {
            v297 = 0;
            v298 = 0;
            v299 = 0;
            do
            {
              v300 = v294 + 1;
              *((_QWORD *)this + 1) = v294 + 1;
              v301 = *(_BYTE *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0)
                goto LABEL_784;
              v297 += 7;
              v294 = v300;
              v15 = v298++ > 8;
            }
            while (!v15);
LABEL_580:
            v299 = 0;
            goto LABEL_784;
          }
          v511 = 0;
          v512 = 0;
          v299 = 0;
          if (v295 <= v294)
            v295 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v295 == v294)
            {
              v299 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v513 = v294 + 1;
              v514 = *(_BYTE *)(v296 + v294);
              *((_QWORD *)this + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                v294 = v513;
                v15 = v512++ > 8;
                if (v15)
                  goto LABEL_580;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v299 = 0;
            }
            break;
          }
LABEL_784:
          *(_QWORD *)(a1 + 232) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          v302 = *((_QWORD *)this + 1);
          v303 = *((_QWORD *)this + 2);
          v304 = *(_QWORD *)this;
          if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
          {
            v305 = 0;
            v306 = 0;
            v307 = 0;
            do
            {
              v308 = v302 + 1;
              *((_QWORD *)this + 1) = v302 + 1;
              v309 = *(_BYTE *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0)
                goto LABEL_788;
              v305 += 7;
              v302 = v308;
              v15 = v306++ > 8;
            }
            while (!v15);
LABEL_587:
            v307 = 0;
            goto LABEL_788;
          }
          v515 = 0;
          v516 = 0;
          v307 = 0;
          if (v303 <= v302)
            v303 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v303 == v302)
            {
              v307 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v517 = v302 + 1;
              v518 = *(_BYTE *)(v304 + v302);
              *((_QWORD *)this + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                v302 = v517;
                v15 = v516++ > 8;
                if (v15)
                  goto LABEL_587;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v307 = 0;
            }
            break;
          }
LABEL_788:
          *(_QWORD *)(a1 + 112) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          v310 = *((_QWORD *)this + 1);
          v311 = *((_QWORD *)this + 2);
          v312 = *(_QWORD *)this;
          if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
          {
            v313 = 0;
            v314 = 0;
            v315 = 0;
            do
            {
              v316 = v310 + 1;
              *((_QWORD *)this + 1) = v310 + 1;
              v317 = *(_BYTE *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0)
                goto LABEL_792;
              v313 += 7;
              v310 = v316;
              v15 = v314++ > 8;
            }
            while (!v15);
LABEL_594:
            v315 = 0;
            goto LABEL_792;
          }
          v519 = 0;
          v520 = 0;
          v315 = 0;
          if (v311 <= v310)
            v311 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v311 == v310)
            {
              v315 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v521 = v310 + 1;
              v522 = *(_BYTE *)(v312 + v310);
              *((_QWORD *)this + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                v310 = v521;
                v15 = v520++ > 8;
                if (v15)
                  goto LABEL_594;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v315 = 0;
            }
            break;
          }
LABEL_792:
          *(_QWORD *)(a1 + 136) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          v318 = *((_QWORD *)this + 1);
          v319 = *((_QWORD *)this + 2);
          v320 = *(_QWORD *)this;
          if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
          {
            v321 = 0;
            v322 = 0;
            v323 = 0;
            do
            {
              v324 = v318 + 1;
              *((_QWORD *)this + 1) = v318 + 1;
              v325 = *(_BYTE *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0)
                goto LABEL_796;
              v321 += 7;
              v318 = v324;
              v15 = v322++ > 8;
            }
            while (!v15);
LABEL_601:
            v323 = 0;
            goto LABEL_796;
          }
          v523 = 0;
          v524 = 0;
          v323 = 0;
          if (v319 <= v318)
            v319 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v319 == v318)
            {
              v323 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v525 = v318 + 1;
              v526 = *(_BYTE *)(v320 + v318);
              *((_QWORD *)this + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                v318 = v525;
                v15 = v524++ > 8;
                if (v15)
                  goto LABEL_601;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v323 = 0;
            }
            break;
          }
LABEL_796:
          *(_QWORD *)(a1 + 24) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          v326 = *((_QWORD *)this + 1);
          v327 = *((_QWORD *)this + 2);
          v328 = *(_QWORD *)this;
          if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
          {
            v329 = 0;
            v330 = 0;
            v331 = 0;
            do
            {
              v332 = v326 + 1;
              *((_QWORD *)this + 1) = v326 + 1;
              v333 = *(_BYTE *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0)
                goto LABEL_800;
              v329 += 7;
              v326 = v332;
              v15 = v330++ > 8;
            }
            while (!v15);
LABEL_608:
            v331 = 0;
            goto LABEL_800;
          }
          v527 = 0;
          v528 = 0;
          v331 = 0;
          if (v327 <= v326)
            v327 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v327 == v326)
            {
              v331 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v529 = v326 + 1;
              v530 = *(_BYTE *)(v328 + v326);
              *((_QWORD *)this + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                v326 = v529;
                v15 = v528++ > 8;
                if (v15)
                  goto LABEL_608;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v331 = 0;
            }
            break;
          }
LABEL_800:
          *(_QWORD *)(a1 + 152) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          v334 = *((_QWORD *)this + 1);
          v335 = *((_QWORD *)this + 2);
          v336 = *(_QWORD *)this;
          if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
          {
            v337 = 0;
            v338 = 0;
            v339 = 0;
            do
            {
              v340 = v334 + 1;
              *((_QWORD *)this + 1) = v334 + 1;
              v341 = *(_BYTE *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0)
                goto LABEL_804;
              v337 += 7;
              v334 = v340;
              v15 = v338++ > 8;
            }
            while (!v15);
LABEL_615:
            v339 = 0;
            goto LABEL_804;
          }
          v531 = 0;
          v532 = 0;
          v339 = 0;
          if (v335 <= v334)
            v335 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v335 == v334)
            {
              v339 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v533 = v334 + 1;
              v534 = *(_BYTE *)(v336 + v334);
              *((_QWORD *)this + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                v334 = v533;
                v15 = v532++ > 8;
                if (v15)
                  goto LABEL_615;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v339 = 0;
            }
            break;
          }
LABEL_804:
          *(_QWORD *)(a1 + 144) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          v342 = *((_QWORD *)this + 1);
          v343 = *((_QWORD *)this + 2);
          v344 = *(_QWORD *)this;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            v345 = 0;
            v346 = 0;
            v347 = 0;
            do
            {
              v348 = v342 + 1;
              *((_QWORD *)this + 1) = v342 + 1;
              v349 = *(_BYTE *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0)
                goto LABEL_808;
              v345 += 7;
              v342 = v348;
              v15 = v346++ > 8;
            }
            while (!v15);
LABEL_622:
            v347 = 0;
            goto LABEL_808;
          }
          v535 = 0;
          v536 = 0;
          v347 = 0;
          if (v343 <= v342)
            v343 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v343 == v342)
            {
              v347 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v537 = v342 + 1;
              v538 = *(_BYTE *)(v344 + v342);
              *((_QWORD *)this + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                v342 = v537;
                v15 = v536++ > 8;
                if (v15)
                  goto LABEL_622;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v347 = 0;
            }
            break;
          }
LABEL_808:
          *(_QWORD *)(a1 + 64) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          v350 = *((_QWORD *)this + 1);
          v351 = *((_QWORD *)this + 2);
          v352 = *(_QWORD *)this;
          if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
          {
            v353 = 0;
            v354 = 0;
            v355 = 0;
            do
            {
              v356 = v350 + 1;
              *((_QWORD *)this + 1) = v350 + 1;
              v357 = *(_BYTE *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0)
                goto LABEL_812;
              v353 += 7;
              v350 = v356;
              v15 = v354++ > 8;
            }
            while (!v15);
LABEL_629:
            v355 = 0;
            goto LABEL_812;
          }
          v539 = 0;
          v540 = 0;
          v355 = 0;
          if (v351 <= v350)
            v351 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v351 == v350)
            {
              v355 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v541 = v350 + 1;
              v542 = *(_BYTE *)(v352 + v350);
              *((_QWORD *)this + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                v350 = v541;
                v15 = v540++ > 8;
                if (v15)
                  goto LABEL_629;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v355 = 0;
            }
            break;
          }
LABEL_812:
          *(_QWORD *)(a1 + 104) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          v358 = *((_QWORD *)this + 1);
          v359 = *((_QWORD *)this + 2);
          v360 = *(_QWORD *)this;
          if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
          {
            v361 = 0;
            v362 = 0;
            v363 = 0;
            do
            {
              v364 = v358 + 1;
              *((_QWORD *)this + 1) = v358 + 1;
              v365 = *(_BYTE *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0)
                goto LABEL_816;
              v361 += 7;
              v358 = v364;
              v15 = v362++ > 8;
            }
            while (!v15);
LABEL_636:
            v363 = 0;
            goto LABEL_816;
          }
          v543 = 0;
          v544 = 0;
          v363 = 0;
          if (v359 <= v358)
            v359 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v359 == v358)
            {
              v363 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v545 = v358 + 1;
              v546 = *(_BYTE *)(v360 + v358);
              *((_QWORD *)this + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                v358 = v545;
                v15 = v544++ > 8;
                if (v15)
                  goto LABEL_636;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v363 = 0;
            }
            break;
          }
LABEL_816:
          *(_QWORD *)(a1 + 312) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          v366 = *((_QWORD *)this + 1);
          v367 = *((_QWORD *)this + 2);
          v368 = *(_QWORD *)this;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            v369 = 0;
            v370 = 0;
            v371 = 0;
            do
            {
              v372 = v366 + 1;
              *((_QWORD *)this + 1) = v366 + 1;
              v373 = *(_BYTE *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0)
                goto LABEL_820;
              v369 += 7;
              v366 = v372;
              v15 = v370++ > 8;
            }
            while (!v15);
LABEL_643:
            v371 = 0;
            goto LABEL_820;
          }
          v547 = 0;
          v548 = 0;
          v371 = 0;
          if (v367 <= v366)
            v367 = *((_QWORD *)this + 1);
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          v374 = *((_QWORD *)this + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)this + v374);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_821;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_821;
      }
      while (1)
      {
        if (v367 == v366)
        {
          v371 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_820;
        }
        v549 = v366 + 1;
        v550 = *(_BYTE *)(v368 + v366);
        *((_QWORD *)this + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0)
          break;
        v547 += 7;
        v366 = v549;
        v15 = v548++ > 8;
        if (v15)
          goto LABEL_643;
      }
      if (*((_BYTE *)this + 24))
        v371 = 0;
LABEL_820:
      *(_QWORD *)(a1 + 296) = v371;
LABEL_821:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B732344(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = result;
  v4 = (uint64_t *)(result + 364);
  v5 = *(_QWORD *)(result + 364);
  if ((v5 & 0x40000000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 304));
  }
LABEL_90:
  result = PB::Writer::writeVarInt(this);
  if ((*v4 & 0x2000000000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 304));
  return result;
}

_QWORD *sub_21B732864(_QWORD *result)
{
  *result = &off_24DF30D90;
  *(_QWORD *)((char *)result + 156) = 0;
  return result;
}

void sub_21B73287C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B7328A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  int v16;
  char v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  *(_QWORD *)a1 = &off_24DF30D90;
  *(_QWORD *)(a1 + 156) = 0;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 = 4;
    *(_QWORD *)(a1 + 156) = 4;
    *(double *)(a1 + 24) = result;
    v2 = *(_QWORD *)(a2 + 156);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 32);
    v3 |= 8uLL;
    *(_QWORD *)(a1 + 156) = v3;
    *(_QWORD *)(a1 + 32) = v5;
    v2 = *(_QWORD *)(a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2uLL;
    *(_QWORD *)(a1 + 156) = v3;
    *(_QWORD *)(a1 + 16) = v6;
    v2 = *(_QWORD *)(a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0)
        goto LABEL_9;
      goto LABEL_43;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 68) = v7;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v8;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  v9 = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v9;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(result) = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(result) = *(_DWORD *)(a2 + 140);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(result) = *(_DWORD *)(a2 + 132);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  v10 = *(_DWORD *)(a2 + 96);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v10;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v11;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  v12 = *(_BYTE *)(a2 + 154);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 154) = v12;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  v13 = *(_BYTE *)(a2 + 153);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 153) = v13;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 52) = v14;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  v15 = *(_DWORD *)(a2 + 144);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 144) = v15;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  v16 = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v16;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  v17 = *(_BYTE *)(a2 + 155);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 155) = v17;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  v18 = *(_BYTE *)(a2 + 152);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_BYTE *)(a1 + 152) = v18;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  v19 = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v19;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  v20 = *(_DWORD *)(a2 + 108);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 108) = v20;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_29:
    if ((v2 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  v21 = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 112) = v21;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  v22 = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v22;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  v23 = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 84) = v23;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(result) = *(_DWORD *)(a2 + 116);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_68;
  }
LABEL_67:
  v24 = *(_DWORD *)(a2 + 104);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v24;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(result) = *(_DWORD *)(a2 + 128);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0)
      goto LABEL_36;
    goto LABEL_70;
  }
LABEL_69:
  v25 = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v25;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_71;
  }
LABEL_70:
  v26 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v26;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0)
      goto LABEL_39;
    goto LABEL_73;
  }
LABEL_72:
  v27 = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 88) = v27;
  v2 = *(_QWORD *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0)
      return result;
LABEL_74:
    result = *(double *)(a2 + 8);
    *(_QWORD *)(a1 + 156) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_73:
  v28 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v28;
  if ((*(_QWORD *)(a2 + 156) & 1) != 0)
    goto LABEL_74;
  return result;
}

uint64_t sub_21B732CAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "conisderedSOS");
    v5 = *(_QWORD *)(a1 + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "didCancelSOS");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "distanceTraveled", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "fallAlertUndelayedTimestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "fallTime");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "fromState");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isActive");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isStand");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxNumQuiescentBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxNumStaticBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "nominalQuiescentThreshold");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "numActiveBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "numCyclingEpochs");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "numNonzeroStepEpochs");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "numPeaks");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "numQuiescentBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "numSharpPeaks");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "numStandBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "numStaticBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "onBodyFeature", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "quiescentThreshold");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "sensorTime");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "sentFallAlert");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "sharpPeaksDelaySpread", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_36;
LABEL_73:
    PB::TextFormatter::format(this, "toState");
    if ((*(_QWORD *)(a1 + 156) & 0x80000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_37;
  }
LABEL_72:
  PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_73;
LABEL_36:
  if ((v5 & 0x80000000) != 0)
LABEL_37:
    PB::TextFormatter::format(this, "totalNumStaticBins");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B73315C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  char v211;
  unsigned int v212;
  unint64_t v213;
  char v214;
  char v215;
  unsigned int v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  unint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  unint64_t v225;
  char v226;
  char v227;
  unsigned int v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  unint64_t v273;
  char v274;
  char v275;
  unsigned int v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  char v282;
  char v283;
  unsigned int v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  unint64_t v289;
  char v290;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 156) |= 4uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_364;
        case 2u:
          *(_QWORD *)(a1 + 156) |= 8uLL;
          v22 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          v24 = *(_QWORD *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)this + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_368;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_221:
            v27 = 0;
            goto LABEL_368;
          }
          v211 = 0;
          v212 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v213 = v22 + 1;
              v214 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)this + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                v22 = v213;
                v14 = v212++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v27 = 0;
            }
            break;
          }
LABEL_368:
          *(_QWORD *)(a1 + 32) = v27;
          goto LABEL_210;
        case 3u:
          *(_QWORD *)(a1 + 156) |= 2uLL;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          v32 = *(_QWORD *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)this + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_372;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_228:
            v35 = 0;
            goto LABEL_372;
          }
          v215 = 0;
          v216 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v31 == v30)
            {
              v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v217 = v30 + 1;
              v218 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)this + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                v30 = v217;
                v14 = v216++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v35 = 0;
            }
            break;
          }
LABEL_372:
          *(_QWORD *)(a1 + 16) = v35;
          goto LABEL_210;
        case 4u:
          *(_QWORD *)(a1 + 156) |= 0x400uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_191;
        case 5u:
          *(_QWORD *)(a1 + 156) |= 0x200uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_191;
        case 6u:
          *(_QWORD *)(a1 + 156) |= 0x100uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_191;
        case 7u:
          *(_QWORD *)(a1 + 156) |= 0x800uLL;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_376;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }
          v219 = 0;
          v220 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v221 = v41 + 1;
              v222 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                v41 = v221;
                v14 = v220++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 68) = v46;
          goto LABEL_210;
        case 8u:
          *(_QWORD *)(a1 + 156) |= 0x80000000uLL;
          v49 = *((_QWORD *)this + 1);
          v50 = *((_QWORD *)this + 2);
          v51 = *(_QWORD *)this;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            do
            {
              v55 = v49 + 1;
              *((_QWORD *)this + 1) = v49 + 1;
              v56 = *(_BYTE *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0)
                goto LABEL_380;
              v52 += 7;
              v49 = v55;
              v14 = v53++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v54) = 0;
            goto LABEL_380;
          }
          v223 = 0;
          v224 = 0;
          v54 = 0;
          if (v50 <= v49)
            v50 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v225 = v49 + 1;
              v226 = *(_BYTE *)(v51 + v49);
              *((_QWORD *)this + 1) = v225;
              v54 |= (unint64_t)(v226 & 0x7F) << v223;
              if (v226 < 0)
              {
                v223 += 7;
                v49 = v225;
                v14 = v224++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v54) = 0;
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 148) = v54;
          goto LABEL_210;
        case 9u:
          *(_QWORD *)(a1 + 156) |= 0x1000uLL;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          v59 = *(_QWORD *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_384;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }
          v227 = 0;
          v228 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v229 = v57 + 1;
              v230 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)this + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                v57 = v229;
                v14 = v228++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 72) = v62;
          goto LABEL_210;
        case 0xAu:
          *(_QWORD *)(a1 + 156) |= 0x10000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v65);
          goto LABEL_191;
        case 0xBu:
          *(_QWORD *)(a1 + 156) |= 0x20000000uLL;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_191;
        case 0xCu:
          *(_QWORD *)(a1 + 156) |= 0x8000000uLL;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v67);
          goto LABEL_191;
        case 0xDu:
          *(_QWORD *)(a1 + 156) |= 0x40000uLL;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          v70 = *(_QWORD *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)this + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_388;
              v71 += 7;
              v68 = v74;
              v14 = v72++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v73) = 0;
            goto LABEL_388;
          }
          v231 = 0;
          v232 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v233 = v68 + 1;
              v234 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)this + 1) = v233;
              v73 |= (unint64_t)(v234 & 0x7F) << v231;
              if (v234 < 0)
              {
                v231 += 7;
                v68 = v233;
                v14 = v232++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 96) = v73;
          goto LABEL_210;
        case 0xEu:
          *(_QWORD *)(a1 + 156) |= 0x4000uLL;
          v76 = *((_QWORD *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v76);
          goto LABEL_191;
        case 0xFu:
          *(_QWORD *)(a1 + 156) |= 0x20uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_392;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }
          v235 = 0;
          v236 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v237 = v77 + 1;
              v238 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                v77 = v237;
                v14 = v236++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 44) = v82;
          goto LABEL_210;
        case 0x10u:
          *(_QWORD *)(a1 + 156) |= 0x400000000uLL;
          v85 = *((_QWORD *)this + 1);
          if (v85 >= *((_QWORD *)this + 2))
          {
            v88 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v86 = v85 + 1;
            v87 = *(unsigned __int8 *)(*(_QWORD *)this + v85);
            *((_QWORD *)this + 1) = v86;
            v88 = v87 != 0;
          }
          *(_BYTE *)(a1 + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(_QWORD *)(a1 + 156) |= 0x200000000uLL;
          v89 = *((_QWORD *)this + 1);
          if (v89 >= *((_QWORD *)this + 2))
          {
            v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) = v90;
            v92 = v91 != 0;
          }
          *(_BYTE *)(a1 + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(_QWORD *)(a1 + 156) |= 0x80uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_396;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v98) = 0;
            goto LABEL_396;
          }
          v239 = 0;
          v240 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v241 = v93 + 1;
              v242 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                v93 = v241;
                v14 = v240++ > 8;
                if (v14)
                  goto LABEL_274;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 52) = v98;
          goto LABEL_210;
        case 0x13u:
          *(_QWORD *)(a1 + 156) |= 0x40000000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_400;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }
          v243 = 0;
          v244 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v245 = v101 + 1;
              v246 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                v101 = v245;
                v14 = v244++ > 8;
                if (v14)
                  goto LABEL_281;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 144) = v106;
          goto LABEL_210;
        case 0x14u:
          *(_QWORD *)(a1 + 156) |= 0x2000000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_404;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }
          v247 = 0;
          v248 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v249 = v109 + 1;
              v250 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                v109 = v249;
                v14 = v248++ > 8;
                if (v14)
                  goto LABEL_288;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 124) = v114;
          goto LABEL_210;
        case 0x15u:
          *(_QWORD *)(a1 + 156) |= 0x800000000uLL;
          v117 = *((_QWORD *)this + 1);
          if (v117 >= *((_QWORD *)this + 2))
          {
            v120 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v118 = v117 + 1;
            v119 = *(unsigned __int8 *)(*(_QWORD *)this + v117);
            *((_QWORD *)this + 1) = v118;
            v120 = v119 != 0;
          }
          *(_BYTE *)(a1 + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(_QWORD *)(a1 + 156) |= 0x100000000uLL;
          v121 = *((_QWORD *)this + 1);
          if (v121 >= *((_QWORD *)this + 2))
          {
            v124 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v122 = v121 + 1;
            v123 = *(unsigned __int8 *)(*(_QWORD *)this + v121);
            *((_QWORD *)this + 1) = v122;
            v124 = v123 != 0;
          }
          *(_BYTE *)(a1 + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(_QWORD *)(a1 + 156) |= 0x20000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_408;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }
          v251 = 0;
          v252 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v253 = v125 + 1;
              v254 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                v125 = v253;
                v14 = v252++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 92) = v130;
          goto LABEL_210;
        case 0x18u:
          *(_QWORD *)(a1 + 156) |= 0x200000uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_412;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v138) = 0;
            goto LABEL_412;
          }
          v255 = 0;
          v256 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v257 = v133 + 1;
              v258 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                v133 = v257;
                v14 = v256++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 108) = v138;
          goto LABEL_210;
        case 0x19u:
          *(_QWORD *)(a1 + 156) |= 0x400000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_416;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }
          v259 = 0;
          v260 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v261 = v141 + 1;
              v262 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                v141 = v261;
                v14 = v260++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 112) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(_QWORD *)(a1 + 156) |= 0x80000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_420;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }
          v263 = 0;
          v264 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v265 = v149 + 1;
              v266 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                v149 = v265;
                v14 = v264++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 100) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(_QWORD *)(a1 + 156) |= 0x8000uLL;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_424;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }
          v267 = 0;
          v268 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v269 = v157 + 1;
              v270 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                v157 = v269;
                v14 = v268++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 84) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(_QWORD *)(a1 + 156) |= 0x800000uLL;
          v165 = *((_QWORD *)this + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v165);
          goto LABEL_191;
        case 0x1Du:
          *(_QWORD *)(a1 + 156) |= 0x100000uLL;
          v166 = *((_QWORD *)this + 1);
          v167 = *((_QWORD *)this + 2);
          v168 = *(_QWORD *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)this + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_428;
              v169 += 7;
              v166 = v172;
              v14 = v170++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }
          v271 = 0;
          v272 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v273 = v166 + 1;
              v274 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)this + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                v166 = v273;
                v14 = v272++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v171) = 0;
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 104) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(_QWORD *)(a1 + 156) |= 0x4000000uLL;
          v174 = *((_QWORD *)this + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(_QWORD *)(a1 + 156) |= 0x1000000uLL;
          v175 = *((_QWORD *)this + 1);
          v176 = *((_QWORD *)this + 2);
          v177 = *(_QWORD *)this;
          if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
          {
            v178 = 0;
            v179 = 0;
            v180 = 0;
            do
            {
              v181 = v175 + 1;
              *((_QWORD *)this + 1) = v175 + 1;
              v182 = *(_BYTE *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0)
                goto LABEL_432;
              v178 += 7;
              v175 = v181;
              v14 = v179++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }
          v275 = 0;
          v276 = 0;
          v180 = 0;
          if (v176 <= v175)
            v176 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v277 = v175 + 1;
              v278 = *(_BYTE *)(v177 + v175);
              *((_QWORD *)this + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                v175 = v277;
                v14 = v276++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v180) = 0;
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 120) = v180;
          goto LABEL_210;
        case 0x20u:
          *(_QWORD *)(a1 + 156) |= 0x10uLL;
          v183 = *((_QWORD *)this + 1);
          v184 = *((_QWORD *)this + 2);
          v185 = *(_QWORD *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)this + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_436;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_348:
            LODWORD(v188) = 0;
            goto LABEL_436;
          }
          v279 = 0;
          v280 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v188) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v281 = v183 + 1;
              v282 = *(_BYTE *)(v185 + v183);
              *((_QWORD *)this + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                v183 = v281;
                v14 = v280++ > 8;
                if (v14)
                  goto LABEL_348;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v188) = 0;
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 40) = v188;
          goto LABEL_210;
        case 0x21u:
          *(_QWORD *)(a1 + 156) |= 0x40uLL;
          v191 = *((_QWORD *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v191);
LABEL_191:
          v192 = *((_QWORD *)this + 1) + 4;
          goto LABEL_192;
        case 0x22u:
          *(_QWORD *)(a1 + 156) |= 0x10000uLL;
          v193 = *((_QWORD *)this + 1);
          v194 = *((_QWORD *)this + 2);
          v195 = *(_QWORD *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            v196 = 0;
            v197 = 0;
            v198 = 0;
            do
            {
              v199 = v193 + 1;
              *((_QWORD *)this + 1) = v193 + 1;
              v200 = *(_BYTE *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0)
                goto LABEL_440;
              v196 += 7;
              v193 = v199;
              v14 = v197++ > 8;
            }
            while (!v14);
LABEL_355:
            LODWORD(v198) = 0;
            goto LABEL_440;
          }
          v283 = 0;
          v284 = 0;
          v198 = 0;
          if (v194 <= v193)
            v194 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v285 = v193 + 1;
              v286 = *(_BYTE *)(v195 + v193);
              *((_QWORD *)this + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                v193 = v285;
                v14 = v284++ > 8;
                if (v14)
                  goto LABEL_355;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v198) = 0;
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 88) = v198;
          goto LABEL_210;
        case 0x23u:
          *(_QWORD *)(a1 + 156) |= 0x2000uLL;
          v201 = *((_QWORD *)this + 1);
          v202 = *((_QWORD *)this + 2);
          v203 = *(_QWORD *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            v204 = 0;
            v205 = 0;
            v206 = 0;
            do
            {
              v207 = v201 + 1;
              *((_QWORD *)this + 1) = v201 + 1;
              v208 = *(_BYTE *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0)
                goto LABEL_444;
              v204 += 7;
              v201 = v207;
              v14 = v205++ > 8;
            }
            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }
          v287 = 0;
          v288 = 0;
          v206 = 0;
          if (v202 <= v201)
            v202 = *((_QWORD *)this + 1);
          break;
        case 0x24u:
          *(_QWORD *)(a1 + 156) |= 1uLL;
          v209 = *((_QWORD *)this + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v209);
LABEL_364:
            v192 = *((_QWORD *)this + 1) + 8;
LABEL_192:
            *((_QWORD *)this + 1) = v192;
          }
          else
          {
LABEL_209:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_210;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_210;
      }
      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_444;
        }
        v289 = v201 + 1;
        v290 = *(_BYTE *)(v203 + v201);
        *((_QWORD *)this + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0)
          break;
        v287 += 7;
        v201 = v289;
        v14 = v288++ > 8;
        if (v14)
          goto LABEL_362;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v206) = 0;
LABEL_444:
      *(_DWORD *)(a1 + 76) = v206;
LABEL_210:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7348BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 156);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_36:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  if ((*(_QWORD *)(v3 + 156) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

double sub_21B734CD0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF30DC8;
  *(_DWORD *)(a1 + 396) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  return result;
}

void sub_21B734D20(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_24DF30DC8;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 8) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

void sub_21B734DE0(PB::Base *a1)
{
  sub_21B734D20(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B734E04(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = (char *)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  v8 = (char *)(a1 + 200);
  *(_QWORD *)a1 = &off_24DF30DC8;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80000) != 0)
  {
    v11 = *(_QWORD *)(a2 + 376);
    v10 = 0x80000;
    *(_DWORD *)(a1 + 396) = 0x80000;
    *(_QWORD *)(a1 + 376) = v11;
    v9 = *(_DWORD *)(a2 + 396);
    if ((v9 & 0x1000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    v12 = *(_BYTE *)(a2 + 388);
    v10 |= 0x1000000u;
    *(_DWORD *)(a1 + 396) = v10;
    *(_BYTE *)(a1 + 388) = v12;
    v9 = *(_DWORD *)(a2 + 396);
  }
LABEL_6:
  if ((v9 & 1) != 0)
  {
    v15 = *(_QWORD *)(a2 + 224);
    v10 |= 1u;
    *(_DWORD *)(a1 + 396) = v10;
    *(_QWORD *)(a1 + 224) = v15;
    v9 = *(_DWORD *)(a2 + 396);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0)
        goto LABEL_9;
      goto LABEL_42;
    }
  }
  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(a2 + 368);
  v10 |= 0x40000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 368) = v16;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v17 = *(_QWORD *)(a2 + 232);
  v10 |= 2u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 232) = v17;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  v18 = *(_QWORD *)(a2 + 256);
  v10 |= 0x10u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 256) = v18;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v19 = *(_QWORD *)(a2 + 264);
  v10 |= 0x20u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 264) = v19;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  v20 = *(_QWORD *)(a2 + 288);
  v10 |= 0x100u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 288) = v20;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v21 = *(_QWORD *)(a2 + 304);
  v10 |= 0x400u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 304) = v21;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v22 = *(_QWORD *)(a2 + 296);
  v10 |= 0x200u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 296) = v22;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  v23 = *(_QWORD *)(a2 + 280);
  v10 |= 0x80u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 280) = v23;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  v24 = *(_QWORD *)(a2 + 272);
  v10 |= 0x40u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 272) = v24;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  v25 = *(_QWORD *)(a2 + 320);
  v10 |= 0x1000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 320) = v25;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v26 = *(_QWORD *)(a2 + 312);
  v10 |= 0x800u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 312) = v26;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v27 = *(_QWORD *)(a2 + 360);
  v10 |= 0x20000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 360) = v27;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v28 = *(_QWORD *)(a2 + 352);
  v10 |= 0x10000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 352) = v28;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v29 = *(_QWORD *)(a2 + 344);
  v10 |= 0x8000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 344) = v29;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  v30 = *(_QWORD *)(a2 + 336);
  v10 |= 0x4000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 336) = v30;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v31 = *(_QWORD *)(a2 + 328);
  v10 |= 0x2000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 328) = v31;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 4) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v32 = *(_BYTE *)(a2 + 395);
  v10 |= 0x80000000;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 395) = v32;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  v33 = *(_QWORD *)(a2 + 240);
  v10 |= 4u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 240) = v33;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  v34 = *(_QWORD *)(a2 + 248);
  v10 |= 8u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_QWORD *)(a1 + 248) = v34;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  v35 = *(_BYTE *)(a2 + 384);
  v10 |= 0x100000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 384) = v35;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v36 = *(_BYTE *)(a2 + 386);
  v10 |= 0x400000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 386) = v36;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  v37 = *(_BYTE *)(a2 + 394);
  v10 |= 0x40000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 394) = v37;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x200000) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  v38 = *(_BYTE *)(a2 + 385);
  v10 |= 0x200000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 385) = v38;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  v39 = *(_BYTE *)(a2 + 387);
  v10 |= 0x800000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 387) = v39;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  v40 = *(_BYTE *)(a2 + 392);
  v10 |= 0x10000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 392) = v40;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  v41 = *(_BYTE *)(a2 + 391);
  v10 |= 0x8000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 391) = v41;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  v42 = *(_BYTE *)(a2 + 393);
  v10 |= 0x20000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 393) = v42;
  v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_68:
  v43 = *(_BYTE *)(a2 + 389);
  v10 |= 0x2000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(_BYTE *)(a1 + 389) = v43;
  if ((*(_DWORD *)(a2 + 396) & 0x4000000) != 0)
  {
LABEL_36:
    v13 = *(_BYTE *)(a2 + 390);
    *(_DWORD *)(a1 + 396) = v10 | 0x4000000;
    *(_BYTE *)(a1 + 390) = v13;
  }
LABEL_37:
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    sub_21B7968C4(v6, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_21B7968C4((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_21B7968C4((char *)(a1 + 128), *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
    sub_21B7968C4((char *)(a1 + 176), *(char **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 3);
    sub_21B7968C4(v7, *(char **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 3);
    sub_21B7968C4(v8, *(char **)(a2 + 200), *(_QWORD *)(a2 + 208), (uint64_t)(*(_QWORD *)(a2 + 208) - *(_QWORD *)(a2 + 200)) >> 3);
  }
  return a1;
}

uint64_t sub_21B7352E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  int v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  int v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  int v35;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "absoluteTimestampOfImpact", *(double *)(a1 + 224));
    v5 = *(_DWORD *)(a1 + 396);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_60;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "anyOffWristAfterImpact");
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "aopTimestampOfImpact");
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "continuousLockedBeforeImpact");
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_62:
  PB::TextFormatter::format(this, "continuousOffWristBeforeImpact");
  if ((*(_DWORD *)(a1 + 396) & 0x800000) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "continuousStaticAndVerticalBeforeImpact");
LABEL_8:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryState", v14);
  }
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(this, "gatingEnabled");
    v15 = *(_DWORD *)(a1 + 396);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0)
        goto LABEL_17;
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "gatingLockedNoMotionPreImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "gatingMotionPreImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "gatingOffWristPostImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "gatingOffWristPreImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "gatingOnCharger");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "hasMotionBeforeImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "lastChargerState");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "lastChargerStateDuration", *(double *)(a1 + 240));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "lastChargerStateDurationThreshold", *(double *)(a1 + 248));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "lastCoreMotionWristState");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDuration", *(double *)(a1 + 264));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostEnd", *(double *)(a1 + 272));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostStart", *(double *)(a1 + 280));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostThreshold", *(double *)(a1 + 288));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreEnd", *(double *)(a1 + 296));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreStart", *(double *)(a1 + 304));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreEnd", *(double *)(a1 + 312));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreStart", *(double *)(a1 + 320));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "lastMotionState");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_84:
  PB::TextFormatter::format(this, "lastMotionStateEndTime");
  if ((*(_DWORD *)(a1 + 396) & 0x8000) != 0)
LABEL_36:
    PB::TextFormatter::format(this, "lastMotionStateStartTime");
LABEL_37:
  v16 = *(double **)(a1 + 80);
  v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "lockStateHistoryEndTimestamp", v18);
  }
  v19 = *(double **)(a1 + 104);
  v20 = *(double **)(a1 + 112);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "lockStateHistoryStartTimestamp", v21);
  }
  v22 = *(double **)(a1 + 128);
  v23 = *(double **)(a1 + 136);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(this, "lockStateHistoryState", v24);
  }
  v25 = *(_DWORD *)(a1 + 396);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactEndOfInterval");
    v25 = *(_DWORD *)(a1 + 396);
  }
  if ((v25 & 0x20000) != 0)
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactStartOfInterval");
  v26 = *(double **)(a1 + 152);
  v27 = *(double **)(a1 + 160);
  while (v26 != v27)
  {
    v28 = *v26++;
    PB::TextFormatter::format(this, "motionStateHistoryEndTimestamp", v28);
  }
  v29 = *(double **)(a1 + 176);
  v30 = *(double **)(a1 + 184);
  while (v29 != v30)
  {
    v31 = *v29++;
    PB::TextFormatter::format(this, "motionStateHistoryStartTimestamp", v31);
  }
  v32 = *(double **)(a1 + 200);
  v33 = *(double **)(a1 + 208);
  while (v32 != v33)
  {
    v34 = *v32++;
    PB::TextFormatter::format(this, "motionStateHistoryState", v34);
  }
  v35 = *(_DWORD *)(a1 + 396);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(this, "relativeTimestampToImpact", *(double *)(a1 + 368));
    v35 = *(_DWORD *)(a1 + 396);
  }
  if ((v35 & 0x80000) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7358A4(uint64_t a1, PB::Reader *this)
{
  __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  __int16 *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  _QWORD *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  BOOL v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  char v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  char v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  BOOL v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  BOOL v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  BOOL v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  BOOL v286;
  unint64_t v287;
  char *v288;
  _QWORD *v289;
  unint64_t v290;
  char *v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  char *v297;
  unint64_t v298;
  char *v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  unint64_t v304;
  char *v305;
  char v306;
  unsigned int v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  unint64_t v312;
  char v313;
  char v314;
  unsigned int v315;
  unint64_t v316;
  char v317;
  char v318;
  unsigned int v319;
  unint64_t v320;
  char v321;
  char v322;
  unsigned int v323;
  unint64_t v324;
  char v325;
  char v326;
  unsigned int v327;
  unint64_t v328;
  char v329;
  char v330;
  unsigned int v331;
  unint64_t v332;
  char v333;
  char v334;
  unsigned int v335;
  unint64_t v336;
  char v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void **v422;
  void **v423;
  void **v424;
  void **v425;

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v421 = a1 + 216;
    v424 = (void **)(a1 + 152);
    v425 = (void **)(a1 + 200);
    v423 = (void **)(a1 + 176);
    v419 = a1 + 192;
    v420 = a1 + 168;
    v422 = (void **)(a1 + 128);
    v10 = (void **)(a1 + 80);
    v417 = a1 + 96;
    v418 = a1 + 144;
    v11 = (void **)(a1 + 104);
    v12 = (void **)(a1 + 56);
    v415 = a1 + 72;
    v416 = a1 + 120;
    v13 = (void **)(a1 + 8);
    v14 = (void **)(a1 + 32);
    v413 = a1 + 48;
    v414 = a1 + 24;
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if (v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 396) |= 0x80000u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_542;
              v32 += 7;
              v29 = v35;
              v21 = v33++ > 8;
            }
            while (!v21);
LABEL_385:
            v34 = 0;
            goto LABEL_542;
          }
          v306 = 0;
          v307 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v308 = v29 + 1;
              v309 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v308;
              v34 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                v29 = v308;
                v21 = v307++ > 8;
                if (v21)
                  goto LABEL_385;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_542:
          *(_QWORD *)(a1 + 376) = v34;
          goto LABEL_641;
        case 2u:
          *(_DWORD *)(a1 + 396) |= 0x1000000u;
          v175 = *((_QWORD *)this + 1);
          if (v175 >= *((_QWORD *)this + 2))
          {
            v178 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v176 = v175 + 1;
            v177 = *(unsigned __int8 *)(*(_QWORD *)this + v175);
            *((_QWORD *)this + 1) = v176;
            v178 = v177 != 0;
          }
          *(_BYTE *)(a1 + 388) = v178;
          goto LABEL_641;
        case 3u:
          *(_DWORD *)(a1 + 396) |= 1u;
          v179 = *((_QWORD *)this + 1);
          if (v179 > 0xFFFFFFFFFFFFFFF7 || v179 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(*(_QWORD *)this + v179);
          goto LABEL_640;
        case 4u:
          *(_DWORD *)(a1 + 396) |= 0x40000u;
          v180 = *((_QWORD *)this + 1);
          if (v180 > 0xFFFFFFFFFFFFFFF7 || v180 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 368) = *(_QWORD *)(*(_QWORD *)this + v180);
          goto LABEL_640;
        case 5u:
          *(_DWORD *)(a1 + 396) |= 2u;
          v181 = *((_QWORD *)this + 1);
          v182 = *((_QWORD *)this + 2);
          v183 = *(_QWORD *)this;
          if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
          {
            v184 = 0;
            v185 = 0;
            v186 = 0;
            do
            {
              v187 = v181 + 1;
              *((_QWORD *)this + 1) = v181 + 1;
              v188 = *(_BYTE *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0)
                goto LABEL_545;
              v184 += 7;
              v181 = v187;
              v21 = v185++ > 8;
            }
            while (!v21);
LABEL_394:
            v186 = 0;
            goto LABEL_545;
          }
          v310 = 0;
          v311 = 0;
          v186 = 0;
          if (v182 <= v181)
            v182 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v182 == v181)
            {
              v186 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v312 = v181 + 1;
              v313 = *(_BYTE *)(v183 + v181);
              *((_QWORD *)this + 1) = v312;
              v186 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                v181 = v312;
                v21 = v311++ > 8;
                if (v21)
                  goto LABEL_394;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v186 = 0;
            }
            break;
          }
LABEL_545:
          *(_QWORD *)(a1 + 232) = v186;
          goto LABEL_641;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          v55 = v3;
          v56 = v14;
          v57 = v13;
          v58 = v12;
          v59 = v11;
          v60 = v10;
          v61 = v2;
          v62 = PB::Reader::skip(this);
          v2 = v61;
          v10 = v60;
          v11 = v59;
          v12 = v58;
          v13 = v57;
          v14 = v56;
          v3 = v55;
          if ((v62 & 1) == 0)
            return 0;
          goto LABEL_641;
        case 0x15u:
          *(_DWORD *)(a1 + 396) |= 0x10u;
          v189 = *((_QWORD *)this + 1);
          v190 = *((_QWORD *)this + 2);
          v191 = *(_QWORD *)this;
          if (v189 <= 0xFFFFFFFFFFFFFFF5 && v189 + 10 <= v190)
          {
            v192 = 0;
            v193 = 0;
            v194 = 0;
            do
            {
              v195 = v189 + 1;
              *((_QWORD *)this + 1) = v189 + 1;
              v196 = *(_BYTE *)(v191 + v189);
              v194 |= (unint64_t)(v196 & 0x7F) << v192;
              if ((v196 & 0x80) == 0)
                goto LABEL_548;
              v192 += 7;
              v189 = v195;
              v21 = v193++ > 8;
            }
            while (!v21);
LABEL_401:
            v194 = 0;
            goto LABEL_548;
          }
          v314 = 0;
          v315 = 0;
          v194 = 0;
          if (v190 <= v189)
            v190 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v190 == v189)
            {
              v194 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v316 = v189 + 1;
              v317 = *(_BYTE *)(v191 + v189);
              *((_QWORD *)this + 1) = v316;
              v194 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                v189 = v316;
                v21 = v315++ > 8;
                if (v21)
                  goto LABEL_401;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v194 = 0;
            }
            break;
          }
LABEL_548:
          *(_QWORD *)(a1 + 256) = v194;
          goto LABEL_641;
        case 0x16u:
          *(_DWORD *)(a1 + 396) |= 0x20u;
          v197 = *((_QWORD *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFF7 || v197 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 264) = *(_QWORD *)(*(_QWORD *)this + v197);
          goto LABEL_640;
        case 0x17u:
          *(_DWORD *)(a1 + 396) |= 0x100u;
          v198 = *((_QWORD *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFF7 || v198 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 288) = *(_QWORD *)(*(_QWORD *)this + v198);
          goto LABEL_640;
        case 0x18u:
          *(_DWORD *)(a1 + 396) |= 0x400u;
          v199 = *((_QWORD *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFF7 || v199 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)this + v199);
          goto LABEL_640;
        case 0x19u:
          *(_DWORD *)(a1 + 396) |= 0x200u;
          v200 = *((_QWORD *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFF7 || v200 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)this + v200);
          goto LABEL_640;
        case 0x1Au:
          *(_DWORD *)(a1 + 396) |= 0x80u;
          v201 = *((_QWORD *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFF7 || v201 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 280) = *(_QWORD *)(*(_QWORD *)this + v201);
          goto LABEL_640;
        case 0x1Bu:
          *(_DWORD *)(a1 + 396) |= 0x40u;
          v202 = *((_QWORD *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFF7 || v202 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 272) = *(_QWORD *)(*(_QWORD *)this + v202);
          goto LABEL_640;
        case 0x1Cu:
          *(_DWORD *)(a1 + 396) |= 0x1000u;
          v203 = *((_QWORD *)this + 1);
          if (v203 > 0xFFFFFFFFFFFFFFF7 || v203 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(*(_QWORD *)this + v203);
          goto LABEL_640;
        case 0x1Du:
          *(_DWORD *)(a1 + 396) |= 0x800u;
          v204 = *((_QWORD *)this + 1);
          if (v204 > 0xFFFFFFFFFFFFFFF7 || v204 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 312) = *(_QWORD *)(*(_QWORD *)this + v204);
          goto LABEL_640;
        case 0x1Eu:
          *(_DWORD *)(a1 + 396) |= 0x20000u;
          v205 = *((_QWORD *)this + 1);
          v206 = *((_QWORD *)this + 2);
          v207 = *(_QWORD *)this;
          if (v205 <= 0xFFFFFFFFFFFFFFF5 && v205 + 10 <= v206)
          {
            v208 = 0;
            v209 = 0;
            v210 = 0;
            do
            {
              v211 = v205 + 1;
              *((_QWORD *)this + 1) = v205 + 1;
              v212 = *(_BYTE *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0)
                goto LABEL_551;
              v208 += 7;
              v205 = v211;
              v21 = v209++ > 8;
            }
            while (!v21);
LABEL_408:
            v210 = 0;
            goto LABEL_551;
          }
          v318 = 0;
          v319 = 0;
          v210 = 0;
          if (v206 <= v205)
            v206 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v206 == v205)
            {
              v210 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v320 = v205 + 1;
              v321 = *(_BYTE *)(v207 + v205);
              *((_QWORD *)this + 1) = v320;
              v210 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                v205 = v320;
                v21 = v319++ > 8;
                if (v21)
                  goto LABEL_408;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v210 = 0;
            }
            break;
          }
LABEL_551:
          *(_QWORD *)(a1 + 360) = v210;
          goto LABEL_641;
        case 0x1Fu:
          *(_DWORD *)(a1 + 396) |= 0x10000u;
          v213 = *((_QWORD *)this + 1);
          v214 = *((_QWORD *)this + 2);
          v215 = *(_QWORD *)this;
          if (v213 <= 0xFFFFFFFFFFFFFFF5 && v213 + 10 <= v214)
          {
            v216 = 0;
            v217 = 0;
            v218 = 0;
            do
            {
              v219 = v213 + 1;
              *((_QWORD *)this + 1) = v213 + 1;
              v220 = *(_BYTE *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0)
                goto LABEL_554;
              v216 += 7;
              v213 = v219;
              v21 = v217++ > 8;
            }
            while (!v21);
LABEL_415:
            v218 = 0;
            goto LABEL_554;
          }
          v322 = 0;
          v323 = 0;
          v218 = 0;
          if (v214 <= v213)
            v214 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v214 == v213)
            {
              v218 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v324 = v213 + 1;
              v325 = *(_BYTE *)(v215 + v213);
              *((_QWORD *)this + 1) = v324;
              v218 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                v213 = v324;
                v21 = v323++ > 8;
                if (v21)
                  goto LABEL_415;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v218 = 0;
            }
            break;
          }
LABEL_554:
          *(_QWORD *)(a1 + 352) = v218;
          goto LABEL_641;
        case 0x20u:
          *(_DWORD *)(a1 + 396) |= 0x8000u;
          v221 = *((_QWORD *)this + 1);
          v222 = *((_QWORD *)this + 2);
          v223 = *(_QWORD *)this;
          if (v221 <= 0xFFFFFFFFFFFFFFF5 && v221 + 10 <= v222)
          {
            v224 = 0;
            v225 = 0;
            v226 = 0;
            do
            {
              v227 = v221 + 1;
              *((_QWORD *)this + 1) = v221 + 1;
              v228 = *(_BYTE *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0)
                goto LABEL_557;
              v224 += 7;
              v221 = v227;
              v21 = v225++ > 8;
            }
            while (!v21);
LABEL_422:
            v226 = 0;
            goto LABEL_557;
          }
          v326 = 0;
          v327 = 0;
          v226 = 0;
          if (v222 <= v221)
            v222 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v222 == v221)
            {
              v226 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v328 = v221 + 1;
              v329 = *(_BYTE *)(v223 + v221);
              *((_QWORD *)this + 1) = v328;
              v226 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                v221 = v328;
                v21 = v327++ > 8;
                if (v21)
                  goto LABEL_422;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v226 = 0;
            }
            break;
          }
LABEL_557:
          *(_QWORD *)(a1 + 344) = v226;
          goto LABEL_641;
        case 0x21u:
          *(_DWORD *)(a1 + 396) |= 0x4000u;
          v229 = *((_QWORD *)this + 1);
          v230 = *((_QWORD *)this + 2);
          v231 = *(_QWORD *)this;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            v232 = 0;
            v233 = 0;
            v234 = 0;
            do
            {
              v235 = v229 + 1;
              *((_QWORD *)this + 1) = v229 + 1;
              v236 = *(_BYTE *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0)
                goto LABEL_560;
              v232 += 7;
              v229 = v235;
              v21 = v233++ > 8;
            }
            while (!v21);
LABEL_429:
            v234 = 0;
            goto LABEL_560;
          }
          v330 = 0;
          v331 = 0;
          v234 = 0;
          if (v230 <= v229)
            v230 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v230 == v229)
            {
              v234 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v332 = v229 + 1;
              v333 = *(_BYTE *)(v231 + v229);
              *((_QWORD *)this + 1) = v332;
              v234 |= (unint64_t)(v333 & 0x7F) << v330;
              if (v333 < 0)
              {
                v330 += 7;
                v229 = v332;
                v21 = v331++ > 8;
                if (v21)
                  goto LABEL_429;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v234 = 0;
            }
            break;
          }
LABEL_560:
          *(_QWORD *)(a1 + 336) = v234;
          goto LABEL_641;
        case 0x22u:
          *(_DWORD *)(a1 + 396) |= 0x2000u;
          v237 = *((_QWORD *)this + 1);
          v238 = *((_QWORD *)this + 2);
          v239 = *(_QWORD *)this;
          if (v237 <= 0xFFFFFFFFFFFFFFF5 && v237 + 10 <= v238)
          {
            v240 = 0;
            v241 = 0;
            v242 = 0;
            do
            {
              v243 = v237 + 1;
              *((_QWORD *)this + 1) = v237 + 1;
              v244 = *(_BYTE *)(v239 + v237);
              v242 |= (unint64_t)(v244 & 0x7F) << v240;
              if ((v244 & 0x80) == 0)
                goto LABEL_563;
              v240 += 7;
              v237 = v243;
              v21 = v241++ > 8;
            }
            while (!v21);
LABEL_436:
            v242 = 0;
            goto LABEL_563;
          }
          v334 = 0;
          v335 = 0;
          v242 = 0;
          if (v238 <= v237)
            v238 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v238 == v237)
            {
              v242 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v336 = v237 + 1;
              v337 = *(_BYTE *)(v239 + v237);
              *((_QWORD *)this + 1) = v336;
              v242 |= (unint64_t)(v337 & 0x7F) << v334;
              if (v337 < 0)
              {
                v334 += 7;
                v237 = v336;
                v21 = v335++ > 8;
                if (v21)
                  goto LABEL_436;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v242 = 0;
            }
            break;
          }
LABEL_563:
          *(_QWORD *)(a1 + 328) = v242;
          goto LABEL_641;
        case 0x29u:
          *(_DWORD *)(a1 + 396) |= 0x80000000;
          v245 = *((_QWORD *)this + 1);
          if (v245 >= *((_QWORD *)this + 2))
          {
            v248 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v246 = v245 + 1;
            v247 = *(unsigned __int8 *)(*(_QWORD *)this + v245);
            *((_QWORD *)this + 1) = v246;
            v248 = v247 != 0;
          }
          *(_BYTE *)(a1 + 395) = v248;
          goto LABEL_641;
        case 0x2Au:
          *(_DWORD *)(a1 + 396) |= 4u;
          v249 = *((_QWORD *)this + 1);
          if (v249 > 0xFFFFFFFFFFFFFFF7 || v249 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(*(_QWORD *)this + v249);
          goto LABEL_640;
        case 0x2Bu:
          *(_DWORD *)(a1 + 396) |= 8u;
          v250 = *((_QWORD *)this + 1);
          if (v250 > 0xFFFFFFFFFFFFFFF7 || v250 + 8 > *((_QWORD *)this + 2))
          {
LABEL_342:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_641;
          }
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(*(_QWORD *)this + v250);
          goto LABEL_640;
        case 0x33u:
          *(_DWORD *)(a1 + 396) |= 0x100000u;
          v251 = *((_QWORD *)this + 1);
          if (v251 >= *((_QWORD *)this + 2))
          {
            v254 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v252 = v251 + 1;
            v253 = *(unsigned __int8 *)(*(_QWORD *)this + v251);
            *((_QWORD *)this + 1) = v252;
            v254 = v253 != 0;
          }
          *(_BYTE *)(a1 + 384) = v254;
          goto LABEL_641;
        case 0x34u:
          *(_DWORD *)(a1 + 396) |= 0x400000u;
          v255 = *((_QWORD *)this + 1);
          if (v255 >= *((_QWORD *)this + 2))
          {
            v258 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v256 = v255 + 1;
            v257 = *(unsigned __int8 *)(*(_QWORD *)this + v255);
            *((_QWORD *)this + 1) = v256;
            v258 = v257 != 0;
          }
          *(_BYTE *)(a1 + 386) = v258;
          goto LABEL_641;
        case 0x35u:
          *(_DWORD *)(a1 + 396) |= 0x40000000u;
          v259 = *((_QWORD *)this + 1);
          if (v259 >= *((_QWORD *)this + 2))
          {
            v262 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v260 = v259 + 1;
            v261 = *(unsigned __int8 *)(*(_QWORD *)this + v259);
            *((_QWORD *)this + 1) = v260;
            v262 = v261 != 0;
          }
          *(_BYTE *)(a1 + 394) = v262;
          goto LABEL_641;
        case 0x36u:
          *(_DWORD *)(a1 + 396) |= 0x200000u;
          v263 = *((_QWORD *)this + 1);
          if (v263 >= *((_QWORD *)this + 2))
          {
            v266 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v264 = v263 + 1;
            v265 = *(unsigned __int8 *)(*(_QWORD *)this + v263);
            *((_QWORD *)this + 1) = v264;
            v266 = v265 != 0;
          }
          *(_BYTE *)(a1 + 385) = v266;
          goto LABEL_641;
        case 0x37u:
          *(_DWORD *)(a1 + 396) |= 0x800000u;
          v267 = *((_QWORD *)this + 1);
          if (v267 >= *((_QWORD *)this + 2))
          {
            v270 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v268 = v267 + 1;
            v269 = *(unsigned __int8 *)(*(_QWORD *)this + v267);
            *((_QWORD *)this + 1) = v268;
            v270 = v269 != 0;
          }
          *(_BYTE *)(a1 + 387) = v270;
          goto LABEL_641;
        default:
          switch((int)v28)
          {
            case 151:
              if (v27 != 2)
              {
                v288 = *(char **)(a1 + 40);
                v287 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v288 >= v287)
                {
                  v338 = (char *)*v14;
                  v339 = (v288 - (_BYTE *)*v14) >> 3;
                  v340 = v339 + 1;
                  if ((unint64_t)(v339 + 1) >> 61)
LABEL_651:
                    sub_21B796A0C();
                  v341 = v287 - (_QWORD)v338;
                  if (v341 >> 2 > v340)
                    v340 = v341 >> 2;
                  if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF8)
                    v342 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v342 = v340;
                  if (v342)
                  {
                    v343 = (char *)sub_21B796A20(v413, v342);
                    v338 = *(char **)(a1 + 32);
                    v288 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v392 = &v343[8 * v339];
                  *(_QWORD *)v392 = 0;
                  v289 = v392 + 8;
                  while (v288 != v338)
                  {
                    v393 = *((_QWORD *)v288 - 1);
                    v288 -= 8;
                    *((_QWORD *)v392 - 1) = v393;
                    v392 -= 8;
                  }
                  *(_QWORD *)(a1 + 32) = v392;
                  *(_QWORD *)(a1 + 40) = v289;
                  *(_QWORD *)(a1 + 48) = &v343[8 * v342];
                  if (v338)
                    operator delete(v338);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v288 = 0;
                  v289 = v288 + 8;
                }
                *(_QWORD *)(a1 + 40) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v37 = *((_QWORD *)this + 1);
              v38 = *((_QWORD *)this + 2);
              while (v37 < v38 && !*((_BYTE *)this + 24))
              {
                v40 = *(char **)(a1 + 40);
                v39 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v40 >= v39)
                {
                  v42 = (char *)*v14;
                  v43 = (v40 - (_BYTE *)*v14) >> 3;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 61)
                    goto LABEL_651;
                  v45 = v39 - (_QWORD)v42;
                  if (v45 >> 2 > v44)
                    v44 = v45 >> 2;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                    v46 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    v47 = (char *)sub_21B796A20(v413, v46);
                    v42 = *(char **)(a1 + 32);
                    v40 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = &v47[8 * v43];
                  *(_QWORD *)v48 = 0;
                  v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    v49 = *((_QWORD *)v40 - 1);
                    v40 -= 8;
                    *((_QWORD *)v48 - 1) = v49;
                    v48 -= 8;
                  }
                  *(_QWORD *)(a1 + 32) = v48;
                  *(_QWORD *)(a1 + 40) = v41;
                  *(_QWORD *)(a1 + 48) = &v47[8 * v46];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_QWORD *)v40 = 0;
                  v41 = v40 + 8;
                }
                *(_QWORD *)(a1 + 40) = v41;
                v50 = *((_QWORD *)this + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v41 - 1) = *(_QWORD *)(*(_QWORD *)this + v50);
                v38 = *((_QWORD *)this + 2);
                v37 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v37;
              }
              goto LABEL_253;
            case 152:
              if (v27 != 2)
              {
                v291 = *(char **)(a1 + 16);
                v290 = *(_QWORD *)(a1 + 24);
                if ((unint64_t)v291 >= v290)
                {
                  v344 = (char *)*v13;
                  v345 = (v291 - (_BYTE *)*v13) >> 3;
                  v346 = v345 + 1;
                  if ((unint64_t)(v345 + 1) >> 61)
LABEL_652:
                    sub_21B796A0C();
                  v347 = v290 - (_QWORD)v344;
                  if (v347 >> 2 > v346)
                    v346 = v347 >> 2;
                  if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8)
                    v348 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v348 = v346;
                  if (v348)
                  {
                    v349 = (char *)sub_21B796A20(v414, v348);
                    v344 = *(char **)(a1 + 8);
                    v291 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v349 = 0;
                  }
                  v394 = &v349[8 * v345];
                  *(_QWORD *)v394 = 0;
                  v289 = v394 + 8;
                  while (v291 != v344)
                  {
                    v395 = *((_QWORD *)v291 - 1);
                    v291 -= 8;
                    *((_QWORD *)v394 - 1) = v395;
                    v394 -= 8;
                  }
                  *(_QWORD *)(a1 + 8) = v394;
                  *(_QWORD *)(a1 + 16) = v289;
                  *(_QWORD *)(a1 + 24) = &v349[8 * v348];
                  if (v344)
                    operator delete(v344);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v291 = 0;
                  v289 = v291 + 8;
                }
                *(_QWORD *)(a1 + 16) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v63 = *((_QWORD *)this + 1);
              v64 = *((_QWORD *)this + 2);
              while (v63 < v64 && !*((_BYTE *)this + 24))
              {
                v66 = *(char **)(a1 + 16);
                v65 = *(_QWORD *)(a1 + 24);
                if ((unint64_t)v66 >= v65)
                {
                  v68 = (char *)*v13;
                  v69 = (v66 - (_BYTE *)*v13) >> 3;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 61)
                    goto LABEL_652;
                  v71 = v65 - (_QWORD)v68;
                  if (v71 >> 2 > v70)
                    v70 = v71 >> 2;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                    v72 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_21B796A20(v414, v72);
                    v68 = *(char **)(a1 + 8);
                    v66 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[8 * v69];
                  *(_QWORD *)v74 = 0;
                  v67 = v74 + 8;
                  while (v66 != v68)
                  {
                    v75 = *((_QWORD *)v66 - 1);
                    v66 -= 8;
                    *((_QWORD *)v74 - 1) = v75;
                    v74 -= 8;
                  }
                  *(_QWORD *)(a1 + 8) = v74;
                  *(_QWORD *)(a1 + 16) = v67;
                  *(_QWORD *)(a1 + 24) = &v73[8 * v72];
                  if (v68)
                    operator delete(v68);
                }
                else
                {
                  *(_QWORD *)v66 = 0;
                  v67 = v66 + 8;
                }
                *(_QWORD *)(a1 + 16) = v67;
                v76 = *((_QWORD *)this + 1);
                if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v67 - 1) = *(_QWORD *)(*(_QWORD *)this + v76);
                v64 = *((_QWORD *)this + 2);
                v63 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v63;
              }
              goto LABEL_253;
            case 153:
              if (v27 != 2)
              {
                v293 = *(char **)(a1 + 64);
                v292 = *(_QWORD *)(a1 + 72);
                if ((unint64_t)v293 >= v292)
                {
                  v350 = (char *)*v12;
                  v351 = (v293 - (_BYTE *)*v12) >> 3;
                  v352 = v351 + 1;
                  if ((unint64_t)(v351 + 1) >> 61)
LABEL_653:
                    sub_21B796A0C();
                  v353 = v292 - (_QWORD)v350;
                  if (v353 >> 2 > v352)
                    v352 = v353 >> 2;
                  if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
                    v354 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v354 = v352;
                  if (v354)
                  {
                    v355 = (char *)sub_21B796A20(v415, v354);
                    v350 = *(char **)(a1 + 56);
                    v293 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v355 = 0;
                  }
                  v396 = &v355[8 * v351];
                  *(_QWORD *)v396 = 0;
                  v289 = v396 + 8;
                  while (v293 != v350)
                  {
                    v397 = *((_QWORD *)v293 - 1);
                    v293 -= 8;
                    *((_QWORD *)v396 - 1) = v397;
                    v396 -= 8;
                  }
                  *(_QWORD *)(a1 + 56) = v396;
                  *(_QWORD *)(a1 + 64) = v289;
                  *(_QWORD *)(a1 + 72) = &v355[8 * v354];
                  if (v350)
                    operator delete(v350);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v293 = 0;
                  v289 = v293 + 8;
                }
                *(_QWORD *)(a1 + 64) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v77 = *((_QWORD *)this + 1);
              v78 = *((_QWORD *)this + 2);
              while (v77 < v78 && !*((_BYTE *)this + 24))
              {
                v80 = *(char **)(a1 + 64);
                v79 = *(_QWORD *)(a1 + 72);
                if ((unint64_t)v80 >= v79)
                {
                  v82 = (char *)*v12;
                  v83 = (v80 - (_BYTE *)*v12) >> 3;
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 61)
                    goto LABEL_653;
                  v85 = v79 - (_QWORD)v82;
                  if (v85 >> 2 > v84)
                    v84 = v85 >> 2;
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                    v86 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v86 = v84;
                  if (v86)
                  {
                    v87 = (char *)sub_21B796A20(v415, v86);
                    v82 = *(char **)(a1 + 56);
                    v80 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v88 = &v87[8 * v83];
                  *(_QWORD *)v88 = 0;
                  v81 = v88 + 8;
                  while (v80 != v82)
                  {
                    v89 = *((_QWORD *)v80 - 1);
                    v80 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  *(_QWORD *)(a1 + 56) = v88;
                  *(_QWORD *)(a1 + 64) = v81;
                  *(_QWORD *)(a1 + 72) = &v87[8 * v86];
                  if (v82)
                    operator delete(v82);
                }
                else
                {
                  *(_QWORD *)v80 = 0;
                  v81 = v80 + 8;
                }
                *(_QWORD *)(a1 + 64) = v81;
                v90 = *((_QWORD *)this + 1);
                if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v81 - 1) = *(_QWORD *)(*(_QWORD *)this + v90);
                v78 = *((_QWORD *)this + 2);
                v77 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v77;
              }
              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if (v27 != 2)
              {
                v295 = *(char **)(a1 + 112);
                v294 = *(_QWORD *)(a1 + 120);
                if ((unint64_t)v295 >= v294)
                {
                  v356 = (char *)*v11;
                  v357 = (v295 - (_BYTE *)*v11) >> 3;
                  v358 = v357 + 1;
                  if ((unint64_t)(v357 + 1) >> 61)
LABEL_654:
                    sub_21B796A0C();
                  v359 = v294 - (_QWORD)v356;
                  if (v359 >> 2 > v358)
                    v358 = v359 >> 2;
                  if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFF8)
                    v360 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v360 = v358;
                  if (v360)
                  {
                    v361 = (char *)sub_21B796A20(v416, v360);
                    v356 = *(char **)(a1 + 104);
                    v295 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v361 = 0;
                  }
                  v398 = &v361[8 * v357];
                  *(_QWORD *)v398 = 0;
                  v289 = v398 + 8;
                  while (v295 != v356)
                  {
                    v399 = *((_QWORD *)v295 - 1);
                    v295 -= 8;
                    *((_QWORD *)v398 - 1) = v399;
                    v398 -= 8;
                  }
                  *(_QWORD *)(a1 + 104) = v398;
                  *(_QWORD *)(a1 + 112) = v289;
                  *(_QWORD *)(a1 + 120) = &v361[8 * v360];
                  if (v356)
                    operator delete(v356);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v295 = 0;
                  v289 = v295 + 8;
                }
                *(_QWORD *)(a1 + 112) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v91 = *((_QWORD *)this + 1);
              v92 = *((_QWORD *)this + 2);
              while (v91 < v92 && !*((_BYTE *)this + 24))
              {
                v94 = *(char **)(a1 + 112);
                v93 = *(_QWORD *)(a1 + 120);
                if ((unint64_t)v94 >= v93)
                {
                  v96 = (char *)*v11;
                  v97 = (v94 - (_BYTE *)*v11) >> 3;
                  v98 = v97 + 1;
                  if ((unint64_t)(v97 + 1) >> 61)
                    goto LABEL_654;
                  v99 = v93 - (_QWORD)v96;
                  if (v99 >> 2 > v98)
                    v98 = v99 >> 2;
                  if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
                    v100 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v100 = v98;
                  if (v100)
                  {
                    v101 = (char *)sub_21B796A20(v416, v100);
                    v96 = *(char **)(a1 + 104);
                    v94 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v101 = 0;
                  }
                  v102 = &v101[8 * v97];
                  *(_QWORD *)v102 = 0;
                  v95 = v102 + 8;
                  while (v94 != v96)
                  {
                    v103 = *((_QWORD *)v94 - 1);
                    v94 -= 8;
                    *((_QWORD *)v102 - 1) = v103;
                    v102 -= 8;
                  }
                  *(_QWORD *)(a1 + 104) = v102;
                  *(_QWORD *)(a1 + 112) = v95;
                  *(_QWORD *)(a1 + 120) = &v101[8 * v100];
                  if (v96)
                    operator delete(v96);
                }
                else
                {
                  *(_QWORD *)v94 = 0;
                  v95 = v94 + 8;
                }
                *(_QWORD *)(a1 + 112) = v95;
                v104 = *((_QWORD *)this + 1);
                if (v104 > 0xFFFFFFFFFFFFFFF7 || v104 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v95 - 1) = *(_QWORD *)(*(_QWORD *)this + v104);
                v92 = *((_QWORD *)this + 2);
                v91 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v91;
              }
              goto LABEL_253;
            case 162:
              if (v27 != 2)
              {
                v297 = *(char **)(a1 + 88);
                v296 = *(_QWORD *)(a1 + 96);
                if ((unint64_t)v297 >= v296)
                {
                  v362 = (char *)*v10;
                  v363 = (v297 - (_BYTE *)*v10) >> 3;
                  v364 = v363 + 1;
                  if ((unint64_t)(v363 + 1) >> 61)
LABEL_655:
                    sub_21B796A0C();
                  v365 = v296 - (_QWORD)v362;
                  if (v365 >> 2 > v364)
                    v364 = v365 >> 2;
                  if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
                    v366 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v366 = v364;
                  if (v366)
                  {
                    v367 = (char *)sub_21B796A20(v417, v366);
                    v362 = *(char **)(a1 + 80);
                    v297 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v367 = 0;
                  }
                  v400 = &v367[8 * v363];
                  *(_QWORD *)v400 = 0;
                  v289 = v400 + 8;
                  while (v297 != v362)
                  {
                    v401 = *((_QWORD *)v297 - 1);
                    v297 -= 8;
                    *((_QWORD *)v400 - 1) = v401;
                    v400 -= 8;
                  }
                  *(_QWORD *)(a1 + 80) = v400;
                  *(_QWORD *)(a1 + 88) = v289;
                  *(_QWORD *)(a1 + 96) = &v367[8 * v366];
                  if (v362)
                    operator delete(v362);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v297 = 0;
                  v289 = v297 + 8;
                }
                *(_QWORD *)(a1 + 88) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v105 = *((_QWORD *)this + 1);
              v106 = *((_QWORD *)this + 2);
              while (v105 < v106 && !*((_BYTE *)this + 24))
              {
                v108 = *(char **)(a1 + 88);
                v107 = *(_QWORD *)(a1 + 96);
                if ((unint64_t)v108 >= v107)
                {
                  v110 = (char *)*v10;
                  v111 = (v108 - (_BYTE *)*v10) >> 3;
                  v112 = v111 + 1;
                  if ((unint64_t)(v111 + 1) >> 61)
                    goto LABEL_655;
                  v113 = v107 - (_QWORD)v110;
                  if (v113 >> 2 > v112)
                    v112 = v113 >> 2;
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                    v114 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v114 = v112;
                  if (v114)
                  {
                    v115 = (char *)sub_21B796A20(v417, v114);
                    v110 = *(char **)(a1 + 80);
                    v108 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v116 = &v115[8 * v111];
                  *(_QWORD *)v116 = 0;
                  v109 = v116 + 8;
                  while (v108 != v110)
                  {
                    v117 = *((_QWORD *)v108 - 1);
                    v108 -= 8;
                    *((_QWORD *)v116 - 1) = v117;
                    v116 -= 8;
                  }
                  *(_QWORD *)(a1 + 80) = v116;
                  *(_QWORD *)(a1 + 88) = v109;
                  *(_QWORD *)(a1 + 96) = &v115[8 * v114];
                  if (v110)
                    operator delete(v110);
                }
                else
                {
                  *(_QWORD *)v108 = 0;
                  v109 = v108 + 8;
                }
                *(_QWORD *)(a1 + 88) = v109;
                v118 = *((_QWORD *)this + 1);
                if (v118 > 0xFFFFFFFFFFFFFFF7 || v118 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v109 - 1) = *(_QWORD *)(*(_QWORD *)this + v118);
                v106 = *((_QWORD *)this + 2);
                v105 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v105;
              }
              goto LABEL_253;
            case 163:
              if (v27 != 2)
              {
                v299 = *(char **)(a1 + 136);
                v298 = *(_QWORD *)(a1 + 144);
                if ((unint64_t)v299 >= v298)
                {
                  v368 = (char *)*v422;
                  v369 = (v299 - (_BYTE *)*v422) >> 3;
                  v370 = v369 + 1;
                  if ((unint64_t)(v369 + 1) >> 61)
LABEL_656:
                    sub_21B796A0C();
                  v371 = v298 - (_QWORD)v368;
                  if (v371 >> 2 > v370)
                    v370 = v371 >> 2;
                  if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8)
                    v372 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v372 = v370;
                  if (v372)
                  {
                    v373 = (char *)sub_21B796A20(v418, v372);
                    v368 = *(char **)(a1 + 128);
                    v299 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    v373 = 0;
                  }
                  v402 = &v373[8 * v369];
                  *(_QWORD *)v402 = 0;
                  v289 = v402 + 8;
                  while (v299 != v368)
                  {
                    v403 = *((_QWORD *)v299 - 1);
                    v299 -= 8;
                    *((_QWORD *)v402 - 1) = v403;
                    v402 -= 8;
                  }
                  *(_QWORD *)(a1 + 128) = v402;
                  *(_QWORD *)(a1 + 136) = v289;
                  *(_QWORD *)(a1 + 144) = &v373[8 * v372];
                  if (v368)
                    operator delete(v368);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v299 = 0;
                  v289 = v299 + 8;
                }
                *(_QWORD *)(a1 + 136) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v119 = *((_QWORD *)this + 1);
              v120 = *((_QWORD *)this + 2);
              while (v119 < v120 && !*((_BYTE *)this + 24))
              {
                v122 = *(char **)(a1 + 136);
                v121 = *(_QWORD *)(a1 + 144);
                if ((unint64_t)v122 >= v121)
                {
                  v124 = (char *)*v422;
                  v125 = (v122 - (_BYTE *)*v422) >> 3;
                  v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61)
                    goto LABEL_656;
                  v127 = v121 - (_QWORD)v124;
                  if (v127 >> 2 > v126)
                    v126 = v127 >> 2;
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
                    v128 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v126;
                  if (v128)
                  {
                    v129 = (char *)sub_21B796A20(v418, v128);
                    v124 = *(char **)(a1 + 128);
                    v122 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    v129 = 0;
                  }
                  v130 = &v129[8 * v125];
                  *(_QWORD *)v130 = 0;
                  v123 = v130 + 8;
                  while (v122 != v124)
                  {
                    v131 = *((_QWORD *)v122 - 1);
                    v122 -= 8;
                    *((_QWORD *)v130 - 1) = v131;
                    v130 -= 8;
                  }
                  *(_QWORD *)(a1 + 128) = v130;
                  *(_QWORD *)(a1 + 136) = v123;
                  *(_QWORD *)(a1 + 144) = &v129[8 * v128];
                  if (v124)
                    operator delete(v124);
                }
                else
                {
                  *(_QWORD *)v122 = 0;
                  v123 = v122 + 8;
                }
                *(_QWORD *)(a1 + 136) = v123;
                v132 = *((_QWORD *)this + 1);
                if (v132 > 0xFFFFFFFFFFFFFFF7 || v132 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v123 - 1) = *(_QWORD *)(*(_QWORD *)this + v132);
                v120 = *((_QWORD *)this + 2);
                v119 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v119;
              }
              goto LABEL_253;
            case 164:
              if (v27 != 2)
              {
                v301 = *(char **)(a1 + 184);
                v300 = *(_QWORD *)(a1 + 192);
                if ((unint64_t)v301 >= v300)
                {
                  v374 = (char *)*v423;
                  v375 = (v301 - (_BYTE *)*v423) >> 3;
                  v376 = v375 + 1;
                  if ((unint64_t)(v375 + 1) >> 61)
LABEL_657:
                    sub_21B796A0C();
                  v377 = v300 - (_QWORD)v374;
                  if (v377 >> 2 > v376)
                    v376 = v377 >> 2;
                  if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF8)
                    v378 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v378 = v376;
                  if (v378)
                  {
                    v379 = (char *)sub_21B796A20(v419, v378);
                    v374 = *(char **)(a1 + 176);
                    v301 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    v379 = 0;
                  }
                  v404 = &v379[8 * v375];
                  *(_QWORD *)v404 = 0;
                  v289 = v404 + 8;
                  while (v301 != v374)
                  {
                    v405 = *((_QWORD *)v301 - 1);
                    v301 -= 8;
                    *((_QWORD *)v404 - 1) = v405;
                    v404 -= 8;
                  }
                  *(_QWORD *)(a1 + 176) = v404;
                  *(_QWORD *)(a1 + 184) = v289;
                  *(_QWORD *)(a1 + 192) = &v379[8 * v378];
                  if (v374)
                    operator delete(v374);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v301 = 0;
                  v289 = v301 + 8;
                }
                *(_QWORD *)(a1 + 184) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v133 = *((_QWORD *)this + 1);
              v134 = *((_QWORD *)this + 2);
              while (v133 < v134 && !*((_BYTE *)this + 24))
              {
                v136 = *(char **)(a1 + 184);
                v135 = *(_QWORD *)(a1 + 192);
                if ((unint64_t)v136 >= v135)
                {
                  v138 = (char *)*v423;
                  v139 = (v136 - (_BYTE *)*v423) >> 3;
                  v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 61)
                    goto LABEL_657;
                  v141 = v135 - (_QWORD)v138;
                  if (v141 >> 2 > v140)
                    v140 = v141 >> 2;
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
                    v142 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v142 = v140;
                  if (v142)
                  {
                    v143 = (char *)sub_21B796A20(v419, v142);
                    v138 = *(char **)(a1 + 176);
                    v136 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    v143 = 0;
                  }
                  v144 = &v143[8 * v139];
                  *(_QWORD *)v144 = 0;
                  v137 = v144 + 8;
                  while (v136 != v138)
                  {
                    v145 = *((_QWORD *)v136 - 1);
                    v136 -= 8;
                    *((_QWORD *)v144 - 1) = v145;
                    v144 -= 8;
                  }
                  *(_QWORD *)(a1 + 176) = v144;
                  *(_QWORD *)(a1 + 184) = v137;
                  *(_QWORD *)(a1 + 192) = &v143[8 * v142];
                  if (v138)
                    operator delete(v138);
                }
                else
                {
                  *(_QWORD *)v136 = 0;
                  v137 = v136 + 8;
                }
                *(_QWORD *)(a1 + 184) = v137;
                v146 = *((_QWORD *)this + 1);
                if (v146 > 0xFFFFFFFFFFFFFFF7 || v146 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v137 - 1) = *(_QWORD *)(*(_QWORD *)this + v146);
                v134 = *((_QWORD *)this + 2);
                v133 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v133;
              }
              goto LABEL_253;
            case 165:
              if (v27 != 2)
              {
                v303 = *(char **)(a1 + 160);
                v302 = *(_QWORD *)(a1 + 168);
                if ((unint64_t)v303 >= v302)
                {
                  v380 = (char *)*v424;
                  v381 = (v303 - (_BYTE *)*v424) >> 3;
                  v382 = v381 + 1;
                  if ((unint64_t)(v381 + 1) >> 61)
LABEL_658:
                    sub_21B796A0C();
                  v383 = v302 - (_QWORD)v380;
                  if (v383 >> 2 > v382)
                    v382 = v383 >> 2;
                  if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFF8)
                    v384 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v384 = v382;
                  if (v384)
                  {
                    v385 = (char *)sub_21B796A20(v420, v384);
                    v380 = *(char **)(a1 + 152);
                    v303 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    v385 = 0;
                  }
                  v406 = &v385[8 * v381];
                  *(_QWORD *)v406 = 0;
                  v289 = v406 + 8;
                  while (v303 != v380)
                  {
                    v407 = *((_QWORD *)v303 - 1);
                    v303 -= 8;
                    *((_QWORD *)v406 - 1) = v407;
                    v406 -= 8;
                  }
                  *(_QWORD *)(a1 + 152) = v406;
                  *(_QWORD *)(a1 + 160) = v289;
                  *(_QWORD *)(a1 + 168) = &v385[8 * v384];
                  if (v380)
                    operator delete(v380);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v303 = 0;
                  v289 = v303 + 8;
                }
                *(_QWORD *)(a1 + 160) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v147 = *((_QWORD *)this + 1);
              v148 = *((_QWORD *)this + 2);
              while (v147 < v148 && !*((_BYTE *)this + 24))
              {
                v150 = *(char **)(a1 + 160);
                v149 = *(_QWORD *)(a1 + 168);
                if ((unint64_t)v150 >= v149)
                {
                  v152 = (char *)*v424;
                  v153 = (v150 - (_BYTE *)*v424) >> 3;
                  v154 = v153 + 1;
                  if ((unint64_t)(v153 + 1) >> 61)
                    goto LABEL_658;
                  v155 = v149 - (_QWORD)v152;
                  if (v155 >> 2 > v154)
                    v154 = v155 >> 2;
                  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
                    v156 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v156 = v154;
                  if (v156)
                  {
                    v157 = (char *)sub_21B796A20(v420, v156);
                    v152 = *(char **)(a1 + 152);
                    v150 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    v157 = 0;
                  }
                  v158 = &v157[8 * v153];
                  *(_QWORD *)v158 = 0;
                  v151 = v158 + 8;
                  while (v150 != v152)
                  {
                    v159 = *((_QWORD *)v150 - 1);
                    v150 -= 8;
                    *((_QWORD *)v158 - 1) = v159;
                    v158 -= 8;
                  }
                  *(_QWORD *)(a1 + 152) = v158;
                  *(_QWORD *)(a1 + 160) = v151;
                  *(_QWORD *)(a1 + 168) = &v157[8 * v156];
                  if (v152)
                    operator delete(v152);
                }
                else
                {
                  *(_QWORD *)v150 = 0;
                  v151 = v150 + 8;
                }
                *(_QWORD *)(a1 + 160) = v151;
                v160 = *((_QWORD *)this + 1);
                if (v160 > 0xFFFFFFFFFFFFFFF7 || v160 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v151 - 1) = *(_QWORD *)(*(_QWORD *)this + v160);
                v148 = *((_QWORD *)this + 2);
                v147 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v147;
              }
              goto LABEL_253;
            case 166:
              if (v27 == 2)
              {
                if ((PB::Reader::placeMark() & 1) != 0)
                  return 0;
                v161 = *((_QWORD *)this + 1);
                v162 = *((_QWORD *)this + 2);
                while (v161 < v162 && !*((_BYTE *)this + 24))
                {
                  v164 = *(char **)(a1 + 208);
                  v163 = *(_QWORD *)(a1 + 216);
                  if ((unint64_t)v164 >= v163)
                  {
                    v166 = (char *)*v425;
                    v167 = (v164 - (_BYTE *)*v425) >> 3;
                    v168 = v167 + 1;
                    if ((unint64_t)(v167 + 1) >> 61)
                      goto LABEL_659;
                    v169 = v163 - (_QWORD)v166;
                    if (v169 >> 2 > v168)
                      v168 = v169 >> 2;
                    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
                      v170 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v170 = v168;
                    if (v170)
                    {
                      v171 = (char *)sub_21B796A20(v421, v170);
                      v166 = *(char **)(a1 + 200);
                      v164 = *(char **)(a1 + 208);
                    }
                    else
                    {
                      v171 = 0;
                    }
                    v172 = &v171[8 * v167];
                    *(_QWORD *)v172 = 0;
                    v165 = v172 + 8;
                    while (v164 != v166)
                    {
                      v173 = *((_QWORD *)v164 - 1);
                      v164 -= 8;
                      *((_QWORD *)v172 - 1) = v173;
                      v172 -= 8;
                    }
                    *(_QWORD *)(a1 + 200) = v172;
                    *(_QWORD *)(a1 + 208) = v165;
                    *(_QWORD *)(a1 + 216) = &v171[8 * v170];
                    if (v166)
                      operator delete(v166);
                  }
                  else
                  {
                    *(_QWORD *)v164 = 0;
                    v165 = v164 + 8;
                  }
                  *(_QWORD *)(a1 + 208) = v165;
                  v174 = *((_QWORD *)this + 1);
                  if (v174 > 0xFFFFFFFFFFFFFFF7 || v174 + 8 > *((_QWORD *)this + 2))
                  {
LABEL_252:
                    *((_BYTE *)this + 24) = 1;
                    break;
                  }
                  *(v165 - 1) = *(_QWORD *)(*(_QWORD *)this + v174);
                  v162 = *((_QWORD *)this + 2);
                  v161 = *((_QWORD *)this + 1) + 8;
                  *((_QWORD *)this + 1) = v161;
                }
LABEL_253:
                PB::Reader::recallMark();
                v2 = &jpt_21B735A3C;
              }
              else
              {
                v305 = *(char **)(a1 + 208);
                v304 = *(_QWORD *)(a1 + 216);
                if ((unint64_t)v305 >= v304)
                {
                  v386 = (char *)*v425;
                  v387 = (v305 - (_BYTE *)*v425) >> 3;
                  v388 = v387 + 1;
                  if ((unint64_t)(v387 + 1) >> 61)
LABEL_659:
                    sub_21B796A0C();
                  v389 = v304 - (_QWORD)v386;
                  if (v389 >> 2 > v388)
                    v388 = v389 >> 2;
                  if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
                    v390 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v390 = v388;
                  if (v390)
                  {
                    v391 = (char *)sub_21B796A20(v421, v390);
                    v386 = *(char **)(a1 + 200);
                    v305 = *(char **)(a1 + 208);
                  }
                  else
                  {
                    v391 = 0;
                  }
                  v408 = &v391[8 * v387];
                  *(_QWORD *)v408 = 0;
                  v289 = v408 + 8;
                  while (v305 != v386)
                  {
                    v409 = *((_QWORD *)v305 - 1);
                    v305 -= 8;
                    *((_QWORD *)v408 - 1) = v409;
                    v408 -= 8;
                  }
                  *(_QWORD *)(a1 + 200) = v408;
                  *(_QWORD *)(a1 + 208) = v289;
                  *(_QWORD *)(a1 + 216) = &v391[8 * v390];
                  if (v386)
                    operator delete(v386);
                  v2 = &jpt_21B735A3C;
                }
                else
                {
                  *(_QWORD *)v305 = 0;
                  v289 = v305 + 8;
                }
                *(_QWORD *)(a1 + 208) = v289;
LABEL_636:
                v410 = *((_QWORD *)this + 1);
                if (v410 <= 0xFFFFFFFFFFFFFFF7 && v410 + 8 <= *((_QWORD *)this + 2))
                {
                  *(v289 - 1) = *(_QWORD *)(*(_QWORD *)this + v410);
LABEL_640:
                  *((_QWORD *)this + 1) += 8;
                }
                else
                {
                  *((_BYTE *)this + 24) = 1;
                }
              }
LABEL_641:
              v4 = *((_QWORD *)this + 1);
              v5 = *((_QWORD *)this + 2);
              v6 = *((unsigned __int8 *)this + 24);
              if (v4 >= v5 || v6 != 0)
                return v6 == 0;
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *(_DWORD *)(a1 + 396) |= 0x10000000u;
                  v51 = *((_QWORD *)this + 1);
                  if (v51 >= *((_QWORD *)this + 2))
                  {
                    v54 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v52 = v51 + 1;
                    v53 = *(unsigned __int8 *)(*(_QWORD *)this + v51);
                    *((_QWORD *)this + 1) = v52;
                    v54 = v53 != 0;
                  }
                  *(_BYTE *)(a1 + 392) = v54;
                  goto LABEL_641;
                case 'f':
                  *(_DWORD *)(a1 + 396) |= 0x8000000u;
                  v271 = *((_QWORD *)this + 1);
                  if (v271 >= *((_QWORD *)this + 2))
                  {
                    v274 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v272 = v271 + 1;
                    v273 = *(unsigned __int8 *)(*(_QWORD *)this + v271);
                    *((_QWORD *)this + 1) = v272;
                    v274 = v273 != 0;
                  }
                  *(_BYTE *)(a1 + 391) = v274;
                  goto LABEL_641;
                case 'g':
                  *(_DWORD *)(a1 + 396) |= 0x20000000u;
                  v275 = *((_QWORD *)this + 1);
                  if (v275 >= *((_QWORD *)this + 2))
                  {
                    v278 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v276 = v275 + 1;
                    v277 = *(unsigned __int8 *)(*(_QWORD *)this + v275);
                    *((_QWORD *)this + 1) = v276;
                    v278 = v277 != 0;
                  }
                  *(_BYTE *)(a1 + 393) = v278;
                  goto LABEL_641;
                case 'h':
                  *(_DWORD *)(a1 + 396) |= 0x2000000u;
                  v279 = *((_QWORD *)this + 1);
                  if (v279 >= *((_QWORD *)this + 2))
                  {
                    v282 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v280 = v279 + 1;
                    v281 = *(unsigned __int8 *)(*(_QWORD *)this + v279);
                    *((_QWORD *)this + 1) = v280;
                    v282 = v281 != 0;
                  }
                  *(_BYTE *)(a1 + 389) = v282;
                  goto LABEL_641;
                case 'i':
                  *(_DWORD *)(a1 + 396) |= 0x4000000u;
                  v283 = *((_QWORD *)this + 1);
                  if (v283 >= *((_QWORD *)this + 2))
                  {
                    v286 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v284 = v283 + 1;
                    v285 = *(unsigned __int8 *)(*(_QWORD *)this + v283);
                    *((_QWORD *)this + 1) = v284;
                    v286 = v285 != 0;
                  }
                  *(_BYTE *)(a1 + 390) = v286;
                  goto LABEL_641;
                default:
                  goto LABEL_58;
              }
          }
          break;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_21B7378B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;

  v3 = result;
  v4 = *(_DWORD *)(result + 396);
  if ((v4 & 0x80000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0)
      goto LABEL_5;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 224));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(double *)(v3 + 368));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(double *)(v3 + 264));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(double *)(v3 + 288));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(double *)(v3 + 304));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(double *)(v3 + 296));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(double *)(v3 + 280));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(double *)(v3 + 272));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(double *)(v3 + 320));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(double *)(v3 + 312));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(double *)(v3 + 240));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(double *)(v3 + 248));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_32;
LABEL_92:
    result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_91:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0)
    goto LABEL_92;
LABEL_32:
  if ((v4 & 0x4000000) != 0)
LABEL_33:
    result = PB::Writer::write(this);
LABEL_34:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(double **)(v3 + 104);
  v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16);
  }
  v17 = *(double **)(v3 + 80);
  v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19);
  }
  v20 = *(double **)(v3 + 128);
  v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    result = PB::Writer::write(this, v22);
  }
  v23 = *(double **)(v3 + 176);
  v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    v25 = *v23++;
    result = PB::Writer::write(this, v25);
  }
  v26 = *(double **)(v3 + 152);
  v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    v28 = *v26++;
    result = PB::Writer::write(this, v28);
  }
  v30 = *(double **)(v3 + 200);
  v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    v31 = *v30++;
    result = PB::Writer::write(this, v31);
  }
  return result;
}

uint64_t sub_21B737D80(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30E00;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_21B737D98(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B737DBC(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24DF30E00;
  *(_DWORD *)(a1 + 72) = 0;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_WORD *)(a1 + 72) = 4;
    *(_QWORD *)(a1 + 24) = v4;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(a1 + 72) = v3;
    *(_QWORD *)(a1 + 32) = v5;
    v2 = *(_WORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 72) = v3;
    *(_QWORD *)(a1 + 16) = v6;
    v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 68) = v7;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 40) = v8;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 48) = v9;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 8) = v10;
  v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  if ((*(_WORD *)(a2 + 72) & 0x40) == 0)
    return *(float *)&v4;
LABEL_22:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = v3 | 0x40;
  *(_DWORD *)(a1 + 56) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B737EF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "afterElevationMedian", *(float *)(a1 + 56));
    v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "beforeElevationMedian", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "endTimestampOfWindow");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "impactTimestamp");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pressureTimestamp");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "rangeOfElevationInWindow", *(float *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "startTimestampOfWindow");
    if ((*(_WORD *)(a1 + 72) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "startTimestampOfLastInspectedWindow");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B738060(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_122;
            case 2u:
              *(_WORD *)(a1 + 72) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v59 = v20++;
                  v60 = *(_BYTE *)(v21 + v59);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    v24 = 0;
LABEL_126:
                    v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
                goto LABEL_126;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_127;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              v24 = 0;
LABEL_127:
              *(_QWORD *)(a1 + 32) = v24;
              goto LABEL_153;
            case 3u:
              *(_WORD *)(a1 + 72) |= 2u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    v30 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v63 = v26++;
                  v64 = *(_BYTE *)(v27 + v63);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    v30 = 0;
LABEL_131:
                    v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v30 = 0;
                goto LABEL_131;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_132;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              v30 = 0;
LABEL_132:
              *(_QWORD *)(a1 + 16) = v30;
              goto LABEL_153;
            case 4u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              v32 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v33 = *(_QWORD *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v36 = 0;
                if (v2 <= v32)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v32++;
                  v68 = *(_BYTE *)(v33 + v67);
                  *((_QWORD *)this + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v36) = 0;
                goto LABEL_136;
              }
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v2 = v32 + 1;
                *((_QWORD *)this + 1) = v32 + 1;
                v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0)
                  goto LABEL_137;
                v34 += 7;
                v32 = v2;
                v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 68) = v36;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_141:
                    v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_141;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_142;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_142:
              *(_QWORD *)(a1 + 40) = v43;
              goto LABEL_153;
            case 0xCu:
              *(_WORD *)(a1 + 72) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_146:
                    v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_146;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_147;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_147:
              *(_QWORD *)(a1 + 48) = v49;
              goto LABEL_153;
            case 0xDu:
              *(_WORD *)(a1 + 72) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_151:
                    v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_151;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_152;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_152:
              *(_QWORD *)(a1 + 8) = v55;
LABEL_153:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x14u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 0x15u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_121:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_122:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_153;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_153;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B73884C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 72);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 56));
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  if ((*(_WORD *)(v3 + 72) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 56));
  return result;
}

uint64_t sub_21B738988(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30E38;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_21B7389A0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7389C4(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)result = &off_24DF30E38;
  *(_DWORD *)(result + 80) = 0;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_WORD *)(result + 80) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 80) = v3;
    *(_QWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 80) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 64) = v7;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  v8 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 72) = v8;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 76) = v9;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_23;
  }
LABEL_22:
  v10 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 68) = v10;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_24;
  }
LABEL_23:
  v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 48) = v11;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_25;
  }
LABEL_24:
  v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 52) = v12;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_26;
  }
LABEL_25:
  v13 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 60) = v13;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_27;
  }
LABEL_26:
  v14 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 80) = v3;
  *(_QWORD *)(result + 40) = v14;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_28:
    v16 = *(_DWORD *)(a2 + 56);
    *(_WORD *)(result + 80) = v3 | 0x80;
    *(_DWORD *)(result + 56) = v16;
    return result;
  }
LABEL_27:
  v15 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 80) = v3;
  *(_QWORD *)(result + 32) = v15;
  if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
    goto LABEL_28;
  return result;
}

uint64_t sub_21B738B4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aopTsImpact");
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsNow");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "aopTsSensor");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "nPeaks");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "repetitiveMotion");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "repetitiveMotionEndTs");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "repetitiveMotionStartTs");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "seq");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 72));
    if ((*(_WORD *)(a1 + 80) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 68));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 76));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B738D1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 4u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  v77 = v20++;
                  v78 = *(_BYTE *)(v21 + v77);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_167:
                v2 = v77 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_168;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_168:
              *(_QWORD *)(a1 + 24) = v24;
              goto LABEL_209;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  v81 = v27++;
                  v82 = *(_BYTE *)(v28 + v81);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_172:
                    v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_172;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_173;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_173:
              *(_QWORD *)(a1 + 16) = v31;
              goto LABEL_209;
            case 3u:
              *(_WORD *)(a1 + 80) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_177:
                    v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_177;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_178;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_178:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_209;
            case 4u:
              *(_WORD *)(a1 + 80) |= 0x200u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_182;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_183;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 64) = v43;
              goto LABEL_209;
            case 5u:
              *(_WORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_163;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_163;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_163;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_187;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_188;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_209;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_163:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0xAu:
              *(_WORD *)(a1 + 80) |= 0x100u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_192;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_193;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_209;
            case 0xBu:
              *(_WORD *)(a1 + 80) |= 0x10u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    v61 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    v61 = 0;
LABEL_197:
                    v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v61 = 0;
                goto LABEL_197;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_198;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              v61 = 0;
LABEL_198:
              *(_QWORD *)(a1 + 40) = v61;
              goto LABEL_209;
            case 0xCu:
              *(_WORD *)(a1 + 80) |= 8u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    v67 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0)
                    break;
                  v103 += 7;
                  v14 = v104++ > 8;
                  if (v14)
                  {
                    v67 = 0;
LABEL_202:
                    v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v67 = 0;
                goto LABEL_202;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_203;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              v67 = 0;
LABEL_203:
              *(_QWORD *)(a1 + 32) = v67;
              goto LABEL_209;
            case 0xDu:
              *(_WORD *)(a1 + 80) |= 0x80u;
              v69 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v70 = *(_QWORD *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v107 = 0;
                v108 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((_QWORD *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0)
                    break;
                  v107 += 7;
                  v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v73) = 0;
                goto LABEL_207;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)this + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_208;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *(_DWORD *)(a1 + 56) = v73;
LABEL_209:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_209;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7397C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 80) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_21B739958(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B73997C(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;

  *(_QWORD *)result = &off_24DF30E70;
  *(_DWORD *)(result + 72) = 0;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(result + 72) = 1;
    *(_DWORD *)(result + 8) = v4;
    v2 = *(_DWORD *)(a2 + 72);
    if ((v2 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(result + 72) = v3;
    *(_BYTE *)(result + 70) = v5;
    v2 = *(_DWORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    v3 |= 2u;
    *(_DWORD *)(result + 72) = v3;
    *(_DWORD *)(result + 12) = v6;
    v2 = *(_DWORD *)(a2 + 72);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 60) = v7;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  v8 = *(_DWORD *)(a2 + 64);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 64) = v8;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  v9 = *(_DWORD *)(a2 + 16);
  v3 |= 4u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 16) = v9;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = *(_DWORD *)(a2 + 28);
  v3 |= 0x20u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 28) = v10;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = *(_DWORD *)(a2 + 20);
  v3 |= 8u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 20) = v11;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  v12 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 24) = v12;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 56) = v13;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x800u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 52) = v14;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  v15 = *(_DWORD *)(a2 + 48);
  v3 |= 0x400u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 48) = v15;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  v16 = *(_DWORD *)(a2 + 44);
  v3 |= 0x200u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 44) = v16;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  v17 = *(_DWORD *)(a2 + 32);
  v3 |= 0x40u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 32) = v17;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x80u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 36) = v18;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x100u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 40) = v19;
  v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      return result;
LABEL_38:
    v21 = *(_BYTE *)(a2 + 68);
    *(_DWORD *)(result + 72) = v3 | 0x8000;
    *(_BYTE *)(result + 68) = v21;
    return result;
  }
LABEL_37:
  v20 = *(_BYTE *)(a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 72) = v3;
  *(_BYTE *)(result + 69) = v20;
  if ((*(_DWORD *)(a2 + 72) & 0x8000) != 0)
    goto LABEL_38;
  return result;
}

uint64_t sub_21B739B8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "crownUpDown");
    v5 = *(_DWORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fallType");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "impactMaxAccelNormAlertThreshold", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHeartRateThreshold", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingStatsThreshold", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isADLImpact");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isFallDetectionFeatureEnabled");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isNearFall");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "metMinutePercentile90", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "metMinutePercentile95", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "metMinutePercentile98", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "metMinutePercentileActual", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "otherFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "slipFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "userAgeBucket");
    if ((*(_DWORD *)(a1 + 72) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "tripFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x2000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x4000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B739DFC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 72) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  v53 = v20++;
                  v54 = *(_BYTE *)(v21 + v53);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_130:
                v2 = v53 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_131;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_131:
              *(_DWORD *)(a1 + 8) = v24;
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 72) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 70) = v28;
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 72) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  v57 = v29++;
                  v58 = *(_BYTE *)(v30 + v57);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_135:
                    v2 = v57 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_135;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_136;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 12) = v33;
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 72) |= 0x2000u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  v61 = v35++;
                  v62 = *(_BYTE *)(v36 + v61);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_140:
                    v2 = v61 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_140;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_141;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_147;
            case 5u:
              *(_DWORD *)(a1 + 72) |= 0x4000u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v65 = v41++;
                  v66 = *(_BYTE *)(v42 + v65);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_145:
                    v2 = v65 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_145;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_146;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 64) = v45;
LABEL_147:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_DWORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 7u:
              *(_DWORD *)(a1 + 72) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_DWORD *)(a1 + 72) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 9u:
              *(_DWORD *)(a1 + 72) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xAu:
              *(_DWORD *)(a1 + 72) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xBu:
              *(_DWORD *)(a1 + 72) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xCu:
              *(_DWORD *)(a1 + 72) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xDu:
              *(_DWORD *)(a1 + 72) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xEu:
              *(_DWORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xFu:
              *(_DWORD *)(a1 + 72) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0x10u:
              *(_DWORD *)(a1 + 72) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_126:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_86:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 72) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 69) = v48;
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 72) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 68) = v50;
              goto LABEL_147;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_147;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B73A65C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 72);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_36:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 72) & 0x8000) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_21B73A878(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_24DF30EA8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

void sub_21B73A8A0(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_24DF30EA8;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  PB::Base::~Base(this);
}

void sub_21B73AA20(PB::Base *a1)
{
  sub_21B73A8A0(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B73AA44(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)a1 = &off_24DF30EA8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  if ((*(_BYTE *)(a2 + 128) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 128) = 1;
    *(_QWORD *)(a1 + 24) = v6;
  }
  if (*(_QWORD *)(a2 + 88))
  {
    v7 = operator new();
    v8 = sub_21B73997C(v7, *(_QWORD *)(a2 + 88));
    v9 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v10 = operator new();
    v11 = sub_21B799F04(v10, *(_QWORD *)(a2 + 8));
    v12 = *v4;
    *v4 = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = operator new();
    v14 = sub_21B799F04(v13, *(_QWORD *)(a2 + 16));
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (*(_QWORD *)(a2 + 64))
  {
    v16 = operator new();
    v17 = sub_21B748908(v16, *(_QWORD *)(a2 + 64));
    v18 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (*(_QWORD *)(a2 + 72))
  {
    v19 = operator new();
    v20 = sub_21B748908(v19, *(_QWORD *)(a2 + 72));
    v21 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (*(_QWORD *)(a2 + 32))
  {
    v22 = operator new();
    v23 = sub_21B79EC94(v22, *(_QWORD *)(a2 + 32));
    v24 = *v5;
    *v5 = v25;
    if (v24)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v24 + 8))(v24, v23);
  }
  if (*(_QWORD *)(a2 + 104))
  {
    v26 = operator new();
    v27 = sub_21B861D64(v26, *(_QWORD *)(a2 + 104));
    v28 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = v29;
    if (v28)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v28 + 8))(v28, v27);
  }
  if (*(_QWORD *)(a2 + 80))
  {
    v30 = operator new();
    v31 = sub_21B8117D4(v30, *(_QWORD *)(a2 + 80));
    v32 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v31;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  }
  if (*(_QWORD *)(a2 + 120))
  {
    v33 = operator new();
    v34 = sub_21B82A394(v33, *(_QWORD *)(a2 + 120));
    v35 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v34;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  }
  if (*(_QWORD *)(a2 + 48))
  {
    v36 = operator new();
    v37 = sub_21B73B89C(v36, *(_QWORD *)(a2 + 48));
    v38 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v37;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    v39 = operator new();
    v40 = sub_21B73C40C(v39, *(_QWORD *)(a2 + 56));
    v41 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v42;
    if (v41)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v41 + 8))(v41, v40);
  }
  if (*(_QWORD *)(a2 + 112))
  {
    v43 = operator new();
    v44 = sub_21B7389C4(v43, *(_QWORD *)(a2 + 112));
    v45 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v44;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  if (*(_QWORD *)(a2 + 40))
  {
    v46 = operator new();
    v47 = sub_21B79EC94(v46, *(_QWORD *)(a2 + 40));
    v48 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v49;
    if (v48)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v48 + 8))(v48, v47);
  }
  if (*(_QWORD *)(a2 + 96))
  {
    v50 = operator new();
    v51 = sub_21B84B33C(v50, *(_QWORD *)(a2 + 96));
    v52 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v51;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  }
  return a1;
}

uint64_t sub_21B73AE84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "accel100");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "accel800");
  if ((*(_BYTE *)(a1 + 128) & 1) != 0)
    PB::TextFormatter::format(this, "aopTimestamp");
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "dm");
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "dmAlwaysOn");
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "fallState");
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "fallStats");
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "gyro100");
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, this, "gyro200");
  v13 = *(_QWORD *)(a1 + 80);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "heartRate");
  v14 = *(_QWORD *)(a1 + 88);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "meta");
  v15 = *(_QWORD *)(a1 + 96);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, this, "odometerEntry");
  v16 = *(_QWORD *)(a1 + 104);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, this, "pressure");
  v17 = *(_QWORD *)(a1 + 112);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "suppressionFeatures");
  v18 = *(_QWORD *)(a1 + 120);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, this, "wristState");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B73B090(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 2u:
        *(_BYTE *)(a1 + 128) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          do
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_77;
            }
            v47 = v20 + 1;
            v48 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v47;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                v25 = 0;
              goto LABEL_77;
            }
            v45 += 7;
            v20 = v47;
            v14 = v46++ > 8;
          }
          while (!v14);
LABEL_73:
          v25 = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_73;
          }
        }
LABEL_77:
        *(_QWORD *)(a1 + 24) = v25;
        goto LABEL_62;
      case 3u:
        v29 = operator new();
        *(_QWORD *)v29 = &off_24DF30E70;
        *(_DWORD *)(v29 + 72) = 0;
        v30 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v29;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v29 = *(_QWORD *)(a1 + 88);
        }
        goto LABEL_59;
      case 4u:
        v29 = operator new();
        sub_21B799E24(v29);
        v31 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v29;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v29 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_59;
      case 5u:
        v29 = operator new();
        sub_21B799E24(v29);
        v32 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v29;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v29 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_59;
      case 6u:
        v29 = operator new();
        *(_QWORD *)v29 = &off_24DF312D0;
        *(_DWORD *)(v29 + 44) = 0;
        v33 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v29;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v29 = *(_QWORD *)(a1 + 64);
        }
        goto LABEL_59;
      case 7u:
        v29 = operator new();
        *(_QWORD *)v29 = &off_24DF312D0;
        *(_DWORD *)(v29 + 44) = 0;
        v34 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v29;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v29 = *(_QWORD *)(a1 + 72);
        }
        goto LABEL_59;
      case 8u:
        v29 = operator new();
        sub_21B79F0DC(v29);
        v35 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v29;
        if (v35)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          v29 = *(_QWORD *)(a1 + 32);
        }
        goto LABEL_59;
      case 9u:
        v29 = operator new();
        sub_21B861CBC(v29);
        v36 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 104) = v29;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          v29 = *(_QWORD *)(a1 + 104);
        }
        goto LABEL_59;
      case 0xAu:
        v29 = operator new();
        sub_21B8116B8((_QWORD *)v29);
        v37 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v29;
        if (v37)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          v29 = *(_QWORD *)(a1 + 80);
        }
        goto LABEL_59;
      case 0xBu:
        v29 = operator new();
        sub_21B82A260(v29);
        v38 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v29;
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          v29 = *(_QWORD *)(a1 + 120);
        }
        goto LABEL_59;
      case 0xCu:
        v29 = operator new();
        *(_QWORD *)v29 = &off_24DF30EE0;
        *(_DWORD *)(v29 + 48) = 0;
        v39 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v29;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v29 = *(_QWORD *)(a1 + 48);
        }
        goto LABEL_59;
      case 0xDu:
        v29 = operator new();
        *(_QWORD *)v29 = &off_24DF30F18;
        *(_QWORD *)(v29 + 216) = 0;
        v40 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v29;
        if (v40)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          v29 = *(_QWORD *)(a1 + 56);
        }
        goto LABEL_59;
      case 0xEu:
        v29 = operator new();
        *(_QWORD *)v29 = &off_24DF30E38;
        *(_DWORD *)(v29 + 80) = 0;
        v41 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v29;
        if (v41)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          v29 = *(_QWORD *)(a1 + 112);
        }
        goto LABEL_59;
      case 0xFu:
        v29 = operator new();
        sub_21B79F0DC(v29);
        v42 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v29;
        if (v42)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v29 = *(_QWORD *)(a1 + 40);
        }
        goto LABEL_59;
      case 0x10u:
        v29 = operator new();
        sub_21B84B108(v29);
        v43 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v29;
        if (v43)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          v29 = *(_QWORD *)(a1 + 96);
        }
LABEL_59:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_62:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

uint64_t sub_21B73B6F4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF312D0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

_QWORD *sub_21B73B708(_QWORD *result)
{
  *result = &off_24DF30F18;
  result[27] = 0;
  return result;
}

uint64_t sub_21B73B71C(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 128) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = (const PB::Base *)v3[11];
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = (const PB::Base *)v3[1];
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = (const PB::Base *)v3[2];
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = (const PB::Base *)v3[8];
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7);
  v8 = (const PB::Base *)v3[9];
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  v9 = (const PB::Base *)v3[4];
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9);
  v10 = (const PB::Base *)v3[13];
  if (v10)
    result = PB::Writer::writeSubmessage(this, v10);
  v11 = (const PB::Base *)v3[10];
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11);
  v12 = (const PB::Base *)v3[15];
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12);
  v13 = (const PB::Base *)v3[6];
  if (v13)
    result = PB::Writer::writeSubmessage(this, v13);
  v14 = (const PB::Base *)v3[7];
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14);
  v15 = (const PB::Base *)v3[14];
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15);
  v16 = (const PB::Base *)v3[5];
  if (v16)
    result = PB::Writer::writeSubmessage(this, v16);
  v17 = (const PB::Base *)v3[12];
  if (v17)
    return PB::Writer::writeSubmessage(this, v17);
  return result;
}

void sub_21B73B878(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B73B89C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;

  *(_QWORD *)result = &off_24DF30EE0;
  *(_DWORD *)(result + 48) = 0;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 48) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 48) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v7;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v8;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v9;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_18:
    v11 = *(_BYTE *)(a2 + 44);
    *(_BYTE *)(result + 48) = v3 | 0x80;
    *(_BYTE *)(result + 44) = v11;
    return result;
  }
LABEL_17:
  v10 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_BYTE *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v10;
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_21B73B994(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aopTsNow");
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsSensor");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "fallAlertSentFromReferee");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isFall");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "response");
    if ((*(_BYTE *)(a1 + 48) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "resolution");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B73BAC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 2u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v20++;
                  v68 = *(_BYTE *)(v21 + v67);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_136:
                v3 = v67 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_137;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_137:
              *(_QWORD *)(a1 + 16) = v24;
              goto LABEL_168;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v27++;
                  v72 = *(_BYTE *)(v28 + v71);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_141:
                    v3 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_141;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_142;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_142:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_168;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v33++;
                  v76 = *(_BYTE *)(v34 + v75);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    v3 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_146;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_147;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_168;
            case 4u:
              *(_BYTE *)(a1 + 48) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v39++;
                  v80 = *(_BYTE *)(v40 + v79);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    v3 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_151;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_152;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_168;
            case 5u:
              *(_BYTE *)(a1 + 48) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  v83 = v45++;
                  v84 = *(_BYTE *)(v46 + v83);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_156:
                    v3 = v83 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_156;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_157;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 36) = v49;
              goto LABEL_168;
            case 6u:
              *(_BYTE *)(a1 + 48) |= 0x10u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v85 = 0;
                v86 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  v87 = v51++;
                  v88 = *(_BYTE *)(v52 + v87);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_161:
                    v3 = v87 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_161;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_162;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 32) = v55;
              goto LABEL_168;
            case 7u:
              *(_BYTE *)(a1 + 48) |= 8u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v89 = 0;
                v90 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  v91 = v57++;
                  v92 = *(_BYTE *)(v58 + v91);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0)
                    break;
                  v89 += 7;
                  v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_166:
                    v3 = v91 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_166;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v3 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_167;
                v59 += 7;
                v57 = v3;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_168:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            case 8u:
              *(_BYTE *)(a1 + 48) |= 0x80u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v64 = v63 != 0;
              }
              *(_BYTE *)(a1 + 44) = v64;
              goto LABEL_168;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_168;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B73C2E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 48) & 0x80) != 0)
    return PB::Writer::write(this);
  return result;
}

void sub_21B73C3E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B73C40C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)a1 = &off_24DF30F18;
  *(_QWORD *)(a1 + 216) = 0;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    v4 = *(_DWORD *)(a2 + 144);
    v3 = 0x80000000;
    *(_QWORD *)(a1 + 216) = 0x80000000;
    *(_DWORD *)(a1 + 144) = v4;
    v2 = *(_QWORD *)(a2 + 216);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1uLL;
    *(_QWORD *)(a1 + 216) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v2 = *(_QWORD *)(a2 + 216);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2uLL;
    *(_QWORD *)(a1 + 216) = v3;
    *(_QWORD *)(a1 + 16) = v6;
    v2 = *(_QWORD *)(a2 + 216);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000) == 0)
        goto LABEL_9;
      goto LABEL_56;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 88) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  result = *(float *)(a2 + 176);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 176) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  result = *(float *)(a2 + 172);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 172) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  result = *(float *)(a2 + 192);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 192) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  result = *(float *)(a2 + 188);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 188) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  result = *(float *)(a2 + 208);
  v3 |= 0x800000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 208) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  result = *(float *)(a2 + 204);
  v3 |= 0x400000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 204) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  result = *(float *)(a2 + 180);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 180) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  result = *(float *)(a2 + 196);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 196) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  result = *(float *)(a2 + 212);
  v3 |= 0x1000000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 212) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  result = *(float *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 84) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  result = *(float *)(a2 + 168);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 168) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  result = *(float *)(a2 + 184);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 184) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  result = *(float *)(a2 + 200);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 200) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  v8 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_QWORD *)(a1 + 24) = v8;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  result = *(float *)(a2 + 36);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  result = *(float *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 112) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  result = *(float *)(a2 + 48);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  result = *(float *)(a2 + 44);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  result = *(float *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 100) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  result = *(float *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 96) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  result = *(float *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 140) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  v9 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 68) = v9;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 76) = v10;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  v11 = *(_DWORD *)(a2 + 148);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 148) = v11;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  v12 = *(_DWORD *)(a2 + 164);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 164) = v12;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 52) = v13;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  result = *(float *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 152) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  result = *(float *)(a2 + 64);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  result = *(float *)(a2 + 60);
  v3 |= 0x400uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  result = *(float *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 104) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  result = *(float *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 92) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  result = *(float *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 136) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  result = *(float *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 160) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  result = *(float *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 156) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  v14 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 80) = v14;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  result = *(float *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 132) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_46;
    goto LABEL_93;
  }
LABEL_92:
  result = *(float *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 124) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_94;
  }
LABEL_93:
  result = *(float *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 128) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_48;
    goto LABEL_95;
  }
LABEL_94:
  result = *(float *)(a2 + 40);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_96;
  }
LABEL_95:
  result = *(float *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 116) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0)
      goto LABEL_50;
    goto LABEL_97;
  }
LABEL_96:
  v15 = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 120) = v15;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x2000) == 0)
  {
LABEL_50:
    if ((v2 & 0x200) == 0)
      goto LABEL_51;
    goto LABEL_98;
  }
LABEL_97:
  result = *(float *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 72) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0)
      goto LABEL_52;
    goto LABEL_99;
  }
LABEL_98:
  result = *(float *)(a2 + 56);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_QWORD *)(a2 + 216);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0)
      return result;
LABEL_100:
    result = *(float *)(a2 + 32);
    *(_QWORD *)(a1 + 216) = v3 | 8;
    *(float *)(a1 + 32) = result;
    return result;
  }
LABEL_99:
  result = *(float *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 216) = v3;
  *(float *)(a1 + 108) = result;
  if ((*(_QWORD *)(a2 + 216) & 8) != 0)
    goto LABEL_100;
  return result;
}

uint64_t sub_21B73C980(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 216);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "accelPathLengthWithPeak", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "aopTsNow");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "aopTsSensor");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "crown");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "extrapolatedMaxAccelNorm", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "extrapolatedMaxMinusMin", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "fallType");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "isFall");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "isNearFall");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "jerkVectorMagMax", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "magMax", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "pathLengthDecorrelation", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "pathLengthDelaySpread", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "pathLengthHarmonicMean", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "seq");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "simulated");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "trialCount");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "xJerkScalarMagMax", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "xMax", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "xMin", *(float *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "xZCTime", *(float *)(a1 + 180));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "yJerkScalarMagMax", *(float *)(a1 + 184));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "yMax", *(float *)(a1 + 188));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "yMin", *(float *)(a1 + 192));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "yZCTime", *(float *)(a1 + 196));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "zJerkScalarMagMax", *(float *)(a1 + 200));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_49;
LABEL_99:
    PB::TextFormatter::format(this, "zMin", *(float *)(a1 + 208));
    if ((*(_QWORD *)(a1 + 216) & 0x1000000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_50;
  }
LABEL_98:
  PB::TextFormatter::format(this, "zMax", *(float *)(a1 + 204));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800000000000) != 0)
    goto LABEL_99;
LABEL_49:
  if ((v5 & 0x1000000000000) != 0)
LABEL_50:
    PB::TextFormatter::format(this, "zZCTime", *(float *)(a1 + 212));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B73CFD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 216) |= 0x80000000uLL;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v147 = 0;
            v148 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_302;
              }
              v149 = v20 + 1;
              v150 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_302;
              }
              v147 += 7;
              v20 = v149;
              v14 = v148++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_221;
            }
          }
LABEL_302:
          *(_DWORD *)(a1 + 144) = v25;
          goto LABEL_294;
        case 2u:
          *(_QWORD *)(a1 + 216) |= 1uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_306;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            v34 = 0;
            goto LABEL_306;
          }
          v151 = 0;
          v152 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v153 = v29 + 1;
              v154 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v153;
              v34 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                v29 = v153;
                v14 = v152++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_306:
          *(_QWORD *)(a1 + 8) = v34;
          goto LABEL_294;
        case 3u:
          *(_QWORD *)(a1 + 216) |= 2uLL;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_310;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            v42 = 0;
            goto LABEL_310;
          }
          v155 = 0;
          v156 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              v42 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v157 = v37 + 1;
              v158 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                v37 = v157;
                v14 = v156++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v42 = 0;
            }
            break;
          }
LABEL_310:
          *(_QWORD *)(a1 + 16) = v42;
          goto LABEL_294;
        case 4u:
          *(_QWORD *)(a1 + 216) |= 0x20000uLL;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_293;
        case 5u:
          *(_QWORD *)(a1 + 216) |= 0x8000000000uLL;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v46);
          goto LABEL_293;
        case 6u:
          *(_QWORD *)(a1 + 216) |= 0x4000000000uLL;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_293;
        case 7u:
          *(_QWORD *)(a1 + 216) |= 0x80000000000uLL;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v48);
          goto LABEL_293;
        case 8u:
          *(_QWORD *)(a1 + 216) |= 0x40000000000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_293;
        case 9u:
          *(_QWORD *)(a1 + 216) |= 0x800000000000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_293;
        case 0xAu:
          *(_QWORD *)(a1 + 216) |= 0x400000000000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_293;
        case 0xBu:
          *(_QWORD *)(a1 + 216) |= 0x10000000000uLL;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_293;
        case 0xCu:
          *(_QWORD *)(a1 + 216) |= 0x100000000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_293;
        case 0xDu:
          *(_QWORD *)(a1 + 216) |= 0x1000000000000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_293;
        case 0xEu:
          *(_QWORD *)(a1 + 216) |= 0x10000uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_293;
        case 0xFu:
          *(_QWORD *)(a1 + 216) |= 0x2000000000uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_293;
        case 0x10u:
          *(_QWORD *)(a1 + 216) |= 0x20000000000uLL;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_293;
        case 0x11u:
          *(_QWORD *)(a1 + 216) |= 0x200000000000uLL;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v58);
          goto LABEL_293;
        case 0x12u:
          *(_QWORD *)(a1 + 216) |= 4uLL;
          v59 = *((_QWORD *)this + 1);
          v60 = *((_QWORD *)this + 2);
          v61 = *(_QWORD *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v65 = v59 + 1;
              *((_QWORD *)this + 1) = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                goto LABEL_314;
              v62 += 7;
              v59 = v65;
              v14 = v63++ > 8;
            }
            while (!v14);
LABEL_242:
            v64 = 0;
            goto LABEL_314;
          }
          v159 = 0;
          v160 = 0;
          v64 = 0;
          if (v60 <= v59)
            v60 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v60 == v59)
            {
              v64 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v161 = v59 + 1;
              v162 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)this + 1) = v161;
              v64 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                v59 = v161;
                v14 = v160++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v64 = 0;
            }
            break;
          }
LABEL_314:
          *(_QWORD *)(a1 + 24) = v64;
          goto LABEL_294;
        case 0x13u:
          *(_QWORD *)(a1 + 216) |= 0x10uLL;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v67);
          goto LABEL_293;
        case 0x14u:
          *(_QWORD *)(a1 + 216) |= 0x800000uLL;
          v68 = *((_QWORD *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v68);
          goto LABEL_293;
        case 0x15u:
          *(_QWORD *)(a1 + 216) |= 0x80uLL;
          v69 = *((_QWORD *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v69);
          goto LABEL_293;
        case 0x16u:
          *(_QWORD *)(a1 + 216) |= 0x40uLL;
          v70 = *((_QWORD *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v70);
          goto LABEL_293;
        case 0x17u:
          *(_QWORD *)(a1 + 216) |= 0x100000uLL;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v71);
          goto LABEL_293;
        case 0x18u:
          *(_QWORD *)(a1 + 216) |= 0x80000uLL;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v72);
          goto LABEL_293;
        case 0x19u:
          *(_QWORD *)(a1 + 216) |= 0x40000000uLL;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_293;
        case 0x1Au:
          *(_QWORD *)(a1 + 216) |= 0x1000uLL;
          v74 = *((_QWORD *)this + 1);
          v75 = *((_QWORD *)this + 2);
          v76 = *(_QWORD *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)this + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_318;
              v77 += 7;
              v74 = v80;
              v14 = v78++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v79) = 0;
            goto LABEL_318;
          }
          v163 = 0;
          v164 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v165 = v74 + 1;
              v166 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)this + 1) = v165;
              v79 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                v74 = v165;
                v14 = v164++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v79) = 0;
            }
            break;
          }
LABEL_318:
          *(_DWORD *)(a1 + 68) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *(_QWORD *)(a1 + 216) |= 0x4000uLL;
          v82 = *((_QWORD *)this + 1);
          v83 = *((_QWORD *)this + 2);
          v84 = *(_QWORD *)this;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            v85 = 0;
            v86 = 0;
            v87 = 0;
            do
            {
              v88 = v82 + 1;
              *((_QWORD *)this + 1) = v82 + 1;
              v89 = *(_BYTE *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0)
                goto LABEL_322;
              v85 += 7;
              v82 = v88;
              v14 = v86++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }
          v167 = 0;
          v168 = 0;
          v87 = 0;
          if (v83 <= v82)
            v83 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v169 = v82 + 1;
              v170 = *(_BYTE *)(v84 + v82);
              *((_QWORD *)this + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                v82 = v169;
                v14 = v168++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v87) = 0;
            }
            break;
          }
LABEL_322:
          *(_DWORD *)(a1 + 76) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *(_QWORD *)(a1 + 216) |= 0x100000000uLL;
          v90 = *((_QWORD *)this + 1);
          v91 = *((_QWORD *)this + 2);
          v92 = *(_QWORD *)this;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            do
            {
              v96 = v90 + 1;
              *((_QWORD *)this + 1) = v90 + 1;
              v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0)
                goto LABEL_326;
              v93 += 7;
              v90 = v96;
              v14 = v94++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }
          v171 = 0;
          v172 = 0;
          v95 = 0;
          if (v91 <= v90)
            v91 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v173 = v90 + 1;
              v174 = *(_BYTE *)(v92 + v90);
              *((_QWORD *)this + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                v90 = v173;
                v14 = v172++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v95) = 0;
            }
            break;
          }
LABEL_326:
          *(_DWORD *)(a1 + 148) = v95;
          goto LABEL_294;
        case 0x1Du:
          *(_QWORD *)(a1 + 216) |= 0x1000000000uLL;
          v98 = *((_QWORD *)this + 1);
          v99 = *((_QWORD *)this + 2);
          v100 = *(_QWORD *)this;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            v101 = 0;
            v102 = 0;
            v103 = 0;
            do
            {
              v104 = v98 + 1;
              *((_QWORD *)this + 1) = v98 + 1;
              v105 = *(_BYTE *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0)
                goto LABEL_330;
              v101 += 7;
              v98 = v104;
              v14 = v102++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v103) = 0;
            goto LABEL_330;
          }
          v175 = 0;
          v176 = 0;
          v103 = 0;
          if (v99 <= v98)
            v99 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v177 = v98 + 1;
              v178 = *(_BYTE *)(v100 + v98);
              *((_QWORD *)this + 1) = v177;
              v103 |= (unint64_t)(v178 & 0x7F) << v175;
              if (v178 < 0)
              {
                v175 += 7;
                v98 = v177;
                v14 = v176++ > 8;
                if (v14)
                  goto LABEL_270;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v103) = 0;
            }
            break;
          }
LABEL_330:
          *(_DWORD *)(a1 + 164) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *(_QWORD *)(a1 + 216) |= 0x100uLL;
          v106 = *((_QWORD *)this + 1);
          v107 = *((_QWORD *)this + 2);
          v108 = *(_QWORD *)this;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            v109 = 0;
            v110 = 0;
            v111 = 0;
            do
            {
              v112 = v106 + 1;
              *((_QWORD *)this + 1) = v106 + 1;
              v113 = *(_BYTE *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0)
                goto LABEL_334;
              v109 += 7;
              v106 = v112;
              v14 = v110++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }
          v179 = 0;
          v180 = 0;
          v111 = 0;
          if (v107 <= v106)
            v107 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v181 = v106 + 1;
              v182 = *(_BYTE *)(v108 + v106);
              *((_QWORD *)this + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                v106 = v181;
                v14 = v180++ > 8;
                if (v14)
                  goto LABEL_277;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v111) = 0;
            }
            break;
          }
LABEL_334:
          *(_DWORD *)(a1 + 52) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *(_QWORD *)(a1 + 216) |= 0x200000000uLL;
          v114 = *((_QWORD *)this + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v114);
          goto LABEL_293;
        case 0x20u:
          *(_QWORD *)(a1 + 216) |= 0x800uLL;
          v115 = *((_QWORD *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v115);
          goto LABEL_293;
        case 0x21u:
          *(_QWORD *)(a1 + 216) |= 0x400uLL;
          v116 = *((_QWORD *)this + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v116);
          goto LABEL_293;
        case 0x22u:
          *(_QWORD *)(a1 + 216) |= 0x200000uLL;
          v117 = *((_QWORD *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v117);
          goto LABEL_293;
        case 0x23u:
          *(_QWORD *)(a1 + 216) |= 0x40000uLL;
          v118 = *((_QWORD *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v118);
          goto LABEL_293;
        case 0x24u:
          *(_QWORD *)(a1 + 216) |= 0x20000000uLL;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v119);
          goto LABEL_293;
        case 0x25u:
          *(_QWORD *)(a1 + 216) |= 0x800000000uLL;
          v120 = *((_QWORD *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v120);
          goto LABEL_293;
        case 0x26u:
          *(_QWORD *)(a1 + 216) |= 0x400000000uLL;
          v121 = *((_QWORD *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v121);
          goto LABEL_293;
        case 0x27u:
          *(_QWORD *)(a1 + 216) |= 0x8000uLL;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          v124 = *(_QWORD *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)this + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_338;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }
          v183 = 0;
          v184 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v185 = v122 + 1;
              v186 = *(_BYTE *)(v124 + v122);
              *((_QWORD *)this + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                v122 = v185;
                v14 = v184++ > 8;
                if (v14)
                  goto LABEL_284;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v127) = 0;
            }
            break;
          }
LABEL_338:
          *(_DWORD *)(a1 + 80) = v127;
          goto LABEL_294;
        case 0x28u:
          *(_QWORD *)(a1 + 216) |= 0x10000000uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_293;
        case 0x29u:
          *(_QWORD *)(a1 + 216) |= 0x4000000uLL;
          v131 = *((_QWORD *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v131);
          goto LABEL_293;
        case 0x2Au:
          *(_QWORD *)(a1 + 216) |= 0x8000000uLL;
          v132 = *((_QWORD *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v132);
          goto LABEL_293;
        case 0x2Bu:
          *(_QWORD *)(a1 + 216) |= 0x20uLL;
          v133 = *((_QWORD *)this + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v133);
          goto LABEL_293;
        case 0x2Cu:
          *(_QWORD *)(a1 + 216) |= 0x1000000uLL;
          v134 = *((_QWORD *)this + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v134);
          goto LABEL_293;
        case 0x2Du:
          *(_QWORD *)(a1 + 216) |= 0x2000000uLL;
          v135 = *((_QWORD *)this + 1);
          v136 = *((_QWORD *)this + 2);
          v137 = *(_QWORD *)this;
          if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
          {
            v138 = 0;
            v139 = 0;
            v140 = 0;
            do
            {
              v141 = v135 + 1;
              *((_QWORD *)this + 1) = v135 + 1;
              v142 = *(_BYTE *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0)
                goto LABEL_342;
              v138 += 7;
              v135 = v141;
              v14 = v139++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }
          v187 = 0;
          v188 = 0;
          v140 = 0;
          if (v136 <= v135)
            v136 = *((_QWORD *)this + 1);
          break;
        case 0x2Eu:
          *(_QWORD *)(a1 + 216) |= 0x2000uLL;
          v143 = *((_QWORD *)this + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v143);
          goto LABEL_293;
        case 0x2Fu:
          *(_QWORD *)(a1 + 216) |= 0x200uLL;
          v144 = *((_QWORD *)this + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v144);
          goto LABEL_293;
        case 0x30u:
          *(_QWORD *)(a1 + 216) |= 0x400000uLL;
          v145 = *((_QWORD *)this + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v145);
          goto LABEL_293;
        case 0x31u:
          *(_QWORD *)(a1 + 216) |= 8uLL;
          v146 = *((_QWORD *)this + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v146);
LABEL_293:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_214:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_294;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_294;
      }
      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_342;
        }
        v189 = v135 + 1;
        v190 = *(_BYTE *)(v137 + v135);
        *((_QWORD *)this + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0)
          break;
        v187 += 7;
        v135 = v189;
        v14 = v188++ > 8;
        if (v14)
          goto LABEL_291;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v140) = 0;
LABEL_342:
      *(_DWORD *)(a1 + 120) = v140;
LABEL_294:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B73E390(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 216);
  if ((v4 & 0x80000000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_QWORD *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_6;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_7;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_8;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_9;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 192));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_10;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 188));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 208));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 204));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_13;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 180));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_14;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 196));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 212));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_16;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_17;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 184));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 200));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_42;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_43;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_45;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_46;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0)
      goto LABEL_48;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0)
      goto LABEL_49;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_49:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 32));
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  if ((*(_QWORD *)(v3 + 216) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 32));
  return result;
}

uint64_t sub_21B73E910(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30F50;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B73E928(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B73E94C(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)result = &off_24DF30F50;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(result + 44) = 2;
    *(_QWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 32) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 40);
      *(_BYTE *)(result + 44) = v3 | 0x10;
      *(_DWORD *)(result + 40) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_BYTE *)(result + 44) = v3;
  *(_QWORD *)(result + 8) = v7;
  if ((*(_BYTE *)(a2 + 44) & 0x10) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B73E9F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aggAccelZDelta", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "arcLength", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "firstLoftAngleDeg", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 44) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "curveDistance", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "stepResult");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B73EAC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B73EE0C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B73EEBC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30F88;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_21B73EED4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B73EEF8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)a1 = &off_24DF30F88;
  *(_DWORD *)(a1 + 176) = 0;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 = 8;
    *(_DWORD *)(a1 + 176) = 8;
    *(double *)(a1 + 32) = result;
    v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 40) = result;
    v2 = *(_DWORD *)(a2 + 176);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 48) = result;
    v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 104) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 112) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v5 = *(_QWORD *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(_QWORD *)(a1 + 136) = v5;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v6 = *(_QWORD *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(_QWORD *)(a1 + 144) = v6;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v7 = *(_QWORD *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(_QWORD *)(a1 + 152) = v7;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 160) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v8 = *(_DWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(_DWORD *)(a1 + 168) = v8;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 16) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = v3;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0)
      return result;
LABEL_46:
    result = *(double *)(a2 + 96);
    *(_DWORD *)(a1 + 176) = v3 | 0x800;
    *(double *)(a1 + 96) = result;
    return result;
  }
LABEL_45:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_DWORD *)(a2 + 176) & 0x800) != 0)
    goto LABEL_46;
  return result;
}

uint64_t sub_21B73F178(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadenceDeviceIdentification", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadenceUpdateTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "externalMachineType");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "inclination", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "instantaneousCadence", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "instantaneousPower", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "powerMeterIdentification");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "powerUpdateTime", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "resistanceLevel", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "speedDeviceIdentification", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "speedUpdateTime", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "totalDistance", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "totalElevationAscended", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "totalEnergy", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "totalFloorsClimbed");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(this, "totalStrokeCount");
    if ((*(_DWORD *)(a1 + 176) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(this, "totalStrideCount");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x80000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B73F468(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 176) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 2u:
              *(_DWORD *)(a1 + 176) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 3u:
              *(_DWORD *)(a1 + 176) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 4u:
              *(_DWORD *)(a1 + 176) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 5u:
              *(_DWORD *)(a1 + 176) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 6u:
              *(_DWORD *)(a1 + 176) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 7u:
              *(_DWORD *)(a1 + 176) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 8u:
              *(_DWORD *)(a1 + 176) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 9u:
              *(_DWORD *)(a1 + 176) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0xAu:
              *(_DWORD *)(a1 + 176) |= 0x10000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_155:
                    v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_155;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_156;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_156:
              *(_QWORD *)(a1 + 136) = v25;
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 176) |= 0x20000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_160:
                    v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_160;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_161;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_161:
              *(_QWORD *)(a1 + 144) = v31;
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 176) |= 0x40000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_165:
                    v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_165;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_166;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_166:
              *(_QWORD *)(a1 + 152) = v37;
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 176) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0xEu:
              *(_DWORD *)(a1 + 176) |= 0x100000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_170;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_171;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 168) = v43;
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 176) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x10u:
              *(_DWORD *)(a1 + 176) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x11u:
              *(_DWORD *)(a1 + 176) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x12u:
              *(_DWORD *)(a1 + 176) |= 0x200000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_175;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_176;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 172) = v49;
LABEL_147:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 176) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x14u:
              *(_DWORD *)(a1 + 176) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x15u:
              *(_DWORD *)(a1 + 176) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x16u:
              *(_DWORD *)(a1 + 176) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_146:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_109:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_147;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_147;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B73FE38(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 176);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 1) == 0)
  {
LABEL_22:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 96));
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_DWORD *)(v3 + 176) & 0x800) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 96));
  return result;
}

uint64_t sub_21B7400C4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF30FC0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_21B7400DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B740100(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;

  *(_QWORD *)a1 = &off_24DF30FC0;
  *(_DWORD *)(a1 + 112) = 0;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_DWORD *)(a1 + 112) = 4;
    *(_QWORD *)(a1 + 24) = v4;
    v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 112) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    v2 = *(_DWORD *)(a2 + 112);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(a1 + 112) = v3;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0)
        goto LABEL_9;
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  v5 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 64) = v5;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  v6 = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 100) = v6;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0)
      return *(float *)&v4;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  if ((*(_DWORD *)(a2 + 112) & 0x10) == 0)
    return *(float *)&v4;
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = v3 | 0x10;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7403A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "averageCadence", *(float *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageHeartRate", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "averagePace", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "averagePower", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "averageSpeed", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "crossTrainerDistance", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "elevationGain", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "energy", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "floors");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "indoorBikeDistance", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "instantaneousCadence", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "instantaneousHeartRate", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "instantaneousPace", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "instantaneousPower", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "resistanceLevel", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(this, "strideCount", *(float *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 112) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(this, "stepCount");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "treadmillDistance", *(float *)(a1 + 108));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7406B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_33:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_118;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_128;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_127;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_128;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *(_DWORD *)(a1 + 64) = v25;
              goto LABEL_119;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x100000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_133;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_132;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_133;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *(_DWORD *)(a1 + 100) = v31;
LABEL_119:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x14u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x15u:
              *(_DWORD *)(a1 + 112) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x16u:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x17u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_117:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_118:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_101:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B740EA4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 112);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 112) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_21B74114C(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24DF30FF8;
  return result;
}

void sub_21B741164(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24DF30FF8;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_21B796830((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

void sub_21B7411B8(PB::Base *a1)
{
  sub_21B741164(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7411DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_24DF30FF8;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v6 = operator new();
    v7 = v6;
    v8 = *(__int128 **)(a2 + 8);
    if (*((char *)v8 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v6, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v6 = v9;
    }
    v10 = *v4;
    *v4 = v7;
    if (v10)
      sub_21B796830((uint64_t)v4, v10);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v11 = operator new();
    v12 = v11;
    v13 = *(__int128 **)(a2 + 16);
    if (*((char *)v13 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v11, *(void **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)v13 + 2);
      *(_OWORD *)v11 = v14;
    }
    v15 = *v5;
    *v5 = v12;
    if (v15)
      sub_21B796830((uint64_t)v5, v15);
  }
  v16 = *(_BYTE *)(a2 + 48);
  if ((v16 & 4) != 0)
  {
    v19 = *(_DWORD *)(a2 + 36);
    *(_BYTE *)(a1 + 48) |= 4u;
    *(_DWORD *)(a1 + 36) = v19;
    v16 = *(_BYTE *)(a2 + 48);
    if ((v16 & 2) == 0)
    {
LABEL_15:
      if ((v16 & 8) == 0)
        goto LABEL_16;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_15;
  }
  v20 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) |= 2u;
  *(_DWORD *)(a1 + 32) = v20;
  v16 = *(_BYTE *)(a2 + 48);
  if ((v16 & 8) == 0)
  {
LABEL_16:
    if ((v16 & 0x10) == 0)
      goto LABEL_17;
LABEL_23:
    v22 = *(_BYTE *)(a2 + 44);
    *(_BYTE *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 44) = v22;
    if ((*(_BYTE *)(a2 + 48) & 1) == 0)
      return a1;
    goto LABEL_18;
  }
LABEL_22:
  v21 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) |= 8u;
  *(_DWORD *)(a1 + 40) = v21;
  v16 = *(_BYTE *)(a2 + 48);
  if ((v16 & 0x10) != 0)
    goto LABEL_23;
LABEL_17:
  if ((v16 & 1) != 0)
  {
LABEL_18:
    v17 = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 48) |= 1u;
    *(_QWORD *)(a1 + 24) = v17;
  }
  return a1;
}

uint64_t sub_21B7413A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "modeSemanticType");
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "modeUpdateReason");
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "modeUpdateSource");
LABEL_7:
  if (*(_QWORD *)(a1 + 16))
    PB::TextFormatter::format();
  v6 = *(_BYTE *)(a1 + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "starting");
    v6 = *(_BYTE *)(a1 + 48);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B741498(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  uint64_t v71;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 16);
    v9 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          v71 = 0;
          v23 = *v9;
          *v9 = (uint64_t)v22;
          if (v23)
          {
            sub_21B796830((uint64_t)v9, v23);
            v24 = v71;
            v71 = 0;
            if (v24)
              sub_21B796830((uint64_t)&v71, v24);
          }
          goto LABEL_32;
        case 2u:
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          v71 = 0;
          v27 = *v8;
          *v8 = (uint64_t)v26;
          if (v27)
          {
            sub_21B796830((uint64_t)v8, v27);
            v28 = v71;
            v71 = 0;
            if (v28)
              sub_21B796830((uint64_t)&v71, v28);
          }
LABEL_32:
          PB::Reader::read();
          goto LABEL_95;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_86;
              v32 += 7;
              v29 = v35;
              v16 = v33++ > 8;
            }
            while (!v16);
LABEL_65:
            LODWORD(v34) = 0;
            goto LABEL_86;
          }
          v58 = 0;
          v59 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v60 = v29 + 1;
              v61 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v60;
              v34 |= (unint64_t)(v61 & 0x7F) << v58;
              if (v61 < 0)
              {
                v58 += 7;
                v29 = v60;
                v16 = v59++ > 8;
                if (v16)
                  goto LABEL_65;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_86:
          *(_DWORD *)(a1 + 36) = v34;
          goto LABEL_95;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_90;
              v40 += 7;
              v37 = v43;
              v16 = v41++ > 8;
            }
            while (!v16);
LABEL_72:
            LODWORD(v42) = 0;
            goto LABEL_90;
          }
          v62 = 0;
          v63 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v64 = v37 + 1;
              v65 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v64;
              v42 |= (unint64_t)(v65 & 0x7F) << v62;
              if (v65 < 0)
              {
                v62 += 7;
                v37 = v64;
                v16 = v63++ > 8;
                if (v16)
                  goto LABEL_72;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_90:
          *(_DWORD *)(a1 + 32) = v42;
          goto LABEL_95;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_94;
              v48 += 7;
              v45 = v51;
              v16 = v49++ > 8;
            }
            while (!v16);
LABEL_79:
            LODWORD(v50) = 0;
            goto LABEL_94;
          }
          v66 = 0;
          v67 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          break;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v53 = *((_QWORD *)this + 1);
          if (v53 >= *((_QWORD *)this + 2))
          {
            v56 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
            *((_QWORD *)this + 1) = v54;
            v56 = v55 != 0;
          }
          *(_BYTE *)(a1 + 44) = v56;
          goto LABEL_95;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v57 = *((_QWORD *)this + 1);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v57);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_95;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_95;
      }
      while (1)
      {
        if (v46 == v45)
        {
          LODWORD(v50) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_94;
        }
        v68 = v45 + 1;
        v69 = *(_BYTE *)(v47 + v45);
        *((_QWORD *)this + 1) = v68;
        v50 |= (unint64_t)(v69 & 0x7F) << v66;
        if ((v69 & 0x80) == 0)
          break;
        v66 += 7;
        v45 = v68;
        v16 = v67++ > 8;
        if (v16)
          goto LABEL_79;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v50) = 0;
LABEL_94:
      *(_DWORD *)(a1 + 40) = v50;
LABEL_95:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B741A00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  if (*(_QWORD *)(result + 8))
    result = PB::Writer::write();
  if (*(_QWORD *)(v3 + 16))
    result = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

double sub_21B741AD8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31030;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B741AFC(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF31030;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B741B4C(PB::Base *a1)
{
  sub_21B741AFC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B741B70(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24DF31030;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_21B741C00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "freq", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "mag", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B741CB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  unint64_t v77;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 16);
            v44 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v10;
              v48 = (v45 - (_BYTE *)*v10) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_128;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_21B796CD8(v11, v51);
                v47 = *(char **)(a1 + 8);
                v45 = *(char **)(a1 + 16);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v53;
              *(_QWORD *)(a1 + 16) = v46;
              *(_QWORD *)(a1 + 24) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *(_QWORD *)(a1 + 16) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_83;
        }
        v60 = *(char **)(a1 + 16);
        v59 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v60 >= v59)
        {
          v67 = (char *)*v10;
          v68 = (v60 - (_BYTE *)*v10) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
LABEL_128:
            sub_21B796A0C();
          v70 = v59 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)sub_21B796CD8(v11, v71);
            v67 = *(char **)(a1 + 8);
            v60 = *(char **)(a1 + 16);
          }
          else
          {
            v72 = 0;
          }
          v75 = &v72[4 * v68];
          *(_DWORD *)v75 = 0;
          v58 = v75 + 4;
          while (v60 != v67)
          {
            v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v75;
          *(_QWORD *)(a1 + 16) = v58;
          *(_QWORD *)(a1 + 24) = &v72[4 * v71];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v60 = 0;
          v58 = v60 + 4;
        }
        *(_QWORD *)(a1 + 16) = v58;
LABEL_114:
        v77 = *((_QWORD *)this + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v77);
        v27 = *((_QWORD *)this + 1) + 4;
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v26);
        v27 = *((_QWORD *)this + 1) + 8;
LABEL_118:
        *((_QWORD *)this + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v28 = *((_QWORD *)this + 1);
      v29 = *((_QWORD *)this + 2);
      while (v28 < v29 && !*((_BYTE *)this + 24))
      {
        v31 = *(char **)(a1 + 40);
        v30 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v8;
          v34 = (v31 - (_BYTE *)*v8) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            goto LABEL_127;
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)sub_21B796CD8(v9, v37);
            v33 = *(char **)(a1 + 32);
            v31 = *(char **)(a1 + 40);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 0;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v39;
          *(_QWORD *)(a1 + 40) = v32;
          *(_QWORD *)(a1 + 48) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = 0;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a1 + 40) = v32;
        v41 = *((_QWORD *)this + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(_QWORD *)this + v41);
        v29 = *((_QWORD *)this + 2);
        v28 = *((_QWORD *)this + 1) + 4;
        *((_QWORD *)this + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    v57 = *(char **)(a1 + 40);
    v56 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v57 >= v56)
    {
      v61 = (char *)*v8;
      v62 = (v57 - (_BYTE *)*v8) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
LABEL_127:
        sub_21B796A0C();
      v64 = v56 - (_QWORD)v61;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)sub_21B796CD8(v9, v65);
        v61 = *(char **)(a1 + 32);
        v57 = *(char **)(a1 + 40);
      }
      else
      {
        v66 = 0;
      }
      v73 = &v66[4 * v62];
      *(_DWORD *)v73 = 0;
      v58 = v73 + 4;
      while (v57 != v61)
      {
        v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *(_QWORD *)(a1 + 32) = v73;
      *(_QWORD *)(a1 + 40) = v58;
      *(_QWORD *)(a1 + 48) = &v66[4 * v65];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v57 = 0;
      v58 = v57 + 4;
    }
    *(_QWORD *)(a1 + 40) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_21B74222C(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

_QWORD *sub_21B7422AC(_QWORD *result)
{
  *result = &off_24DF31068;
  result[1] = 0;
  return result;
}

void sub_21B7422BC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31068;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B7422FC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31068;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B742350(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_24DF31068;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B3598(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v7;
    if (v6)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  return a1;
}

uint64_t sub_21B7423CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74241C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7B34B8(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7425E4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B742600(uint64_t result)
{
  *(_QWORD *)result = &off_24DF310A0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_21B742618(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B74263C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_24DF310A0;
  *(_DWORD *)(a1 + 100) = 0;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 100) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 100) = v3;
    *(_QWORD *)(a1 + 24) = v5;
    v2 = *(_DWORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 100) = v3;
    *(_QWORD *)(a1 + 16) = v6;
    v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0)
        goto LABEL_9;
      goto LABEL_31;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 60);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = *(float *)(a2 + 88);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = *(float *)(a2 + 48);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = *(float *)(a2 + 80);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = *(float *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = *(float *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = *(float *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 84) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = *(float *)(a2 + 64);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  v8 = *(_BYTE *)(a2 + 98);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 98) = v8;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = *(float *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  v9 = *(_BYTE *)(a2 + 97);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 97) = v9;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  v10 = *(_BYTE *)(a2 + 94);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 94) = v10;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_45;
  }
LABEL_44:
  v11 = *(_BYTE *)(a2 + 93);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 93) = v11;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_46;
  }
LABEL_45:
  v12 = *(_BYTE *)(a2 + 95);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 95) = v12;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_47;
  }
LABEL_46:
  result = *(float *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_48;
  }
LABEL_47:
  v13 = *(_BYTE *)(a2 + 96);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 96) = v13;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_49;
  }
LABEL_48:
  v14 = *(_BYTE *)(a2 + 92);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_BYTE *)(a1 + 92) = v14;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      return result;
LABEL_50:
    result = *(float *)(a2 + 72);
    *(_DWORD *)(a1 + 100) = v3 | 0x1000;
    *(float *)(a1 + 72) = result;
    return result;
  }
LABEL_49:
  v15 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 100) = v3;
  *(_QWORD *)(a1 + 32) = v15;
  if ((*(_DWORD *)(a2 + 100) & 0x1000) != 0)
    goto LABEL_50;
  return result;
}

uint64_t sub_21B7428F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 40));
    v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "horizontalRotationRateMax", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "impulseMagnitude", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "impulseStartTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "isCadenceConcordant");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "isFeasibleWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isNotRunning");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isPendular");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isSufficientVerticalTwist");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isSwingStanceCycle");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isValid");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "loftEndTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "loftMagnitude", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "loftStartTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "pendulumResidual", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "previousImpulseStartTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "rawLoftSpeed", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "sqrtMaxAbsLoftAccel", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "stanceProbability", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(this, "verticalRotationRateMean", *(float *)(a1 + 84));
    if ((*(_DWORD *)(a1 + 100) & 0x10000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x10000) != 0)
LABEL_25:
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B742C28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_153;
                  }
                  v61 = v20++;
                  v62 = *(_BYTE *)(v21 + v61);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_152:
                v2 = v61 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_153;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_153:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_169;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_158;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_157:
                    v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_157;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_158;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_158:
              *(_QWORD *)(a1 + 24) = v31;
              goto LABEL_169;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_163;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_162:
                    v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_162;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_163;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_163:
              *(_QWORD *)(a1 + 16) = v37;
              goto LABEL_169;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 100) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *(_DWORD *)(a1 + 100) |= 8u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  v73 = v53++;
                  v74 = *(_BYTE *)(v54 + v73);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_167:
                    v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_167;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_168;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_168:
              *(_QWORD *)(a1 + 32) = v57;
LABEL_169:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x18u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_148:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_104:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_169;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_169;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B743608(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 100);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 72));
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 100) & 0x1000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 72));
  return result;
}

uint64_t sub_21B7438CC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF310D8;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_21B7438E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B743908(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)result = &off_24DF310D8;
  *(_DWORD *)(result + 116) = 0;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    v4 = *(_QWORD *)(a2 + 64);
    v3 = 128;
    *(_DWORD *)(result + 116) = 128;
    *(_QWORD *)(result + 64) = v4;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 116) = v3;
    *(_BYTE *)(result + 114) = v5;
    v2 = *(_DWORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *(_BYTE *)(a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(result + 116) = v3;
    *(_BYTE *)(result + 113) = v6;
    v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_BYTE *)(a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 115) = v7;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v8 = *(_BYTE *)(a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 116) = v3;
  *(_BYTE *)(result + 112) = v8;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 24) = v9;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v10 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 16) = v10;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 8) = v11;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v12 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 48) = v12;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v13 = *(_QWORD *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 56) = v13;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v14 = *(_DWORD *)(a2 + 92);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 92) = v14;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v15 = *(_DWORD *)(a2 + 104);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 104) = v15;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v16 = *(_DWORD *)(a2 + 88);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 88) = v16;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  v17 = *(_DWORD *)(a2 + 84);
  v3 |= 0x800u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 84) = v17;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 100) = v18;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  v19 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 76) = v19;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  v20 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 80) = v20;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  v21 = *(_DWORD *)(a2 + 96);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 96) = v21;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  v22 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 72) = v22;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0)
      goto LABEL_25;
    goto LABEL_45;
  }
LABEL_44:
  v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 108) = v23;
  v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_46:
    v25 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(result + 116) = v3 | 0x10;
    *(_QWORD *)(result + 40) = v25;
    return result;
  }
LABEL_45:
  v24 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 116) = v3;
  *(_QWORD *)(result + 32) = v24;
  if ((*(_DWORD *)(a2 + 116) & 0x10) != 0)
    goto LABEL_46;
  return result;
}

uint64_t sub_21B743B8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "curImpulseStartTime");
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "curLoftEndTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "curLoftStartTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "currentHorzRotRateMax", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "currentImpulseMagnitude", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "currentLoftMagnitude", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "currentMax", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "currentMin", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "currentWalkSpeedEstimate", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "firstLoft");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "impulseStartTimeWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "impulseStopTimeWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "lastZeroTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "loftEndDetected");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "loftStartDetected");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "prevLoftStartTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "previousHorzRotRateMax", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "previousMax", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(this, "vertRotationRateMean", *(float *)(a1 + 108));
    if ((*(_DWORD *)(a1 + 116) & 0x200000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x200000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "waitingToConfirmLoft");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B743E7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_173;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 114) = v22;
              goto LABEL_209;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 113) = v24;
              goto LABEL_209;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 115) = v26;
              goto LABEL_209;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 112) = v28;
              goto LABEL_209;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  v73 = v29++;
                  v74 = *(_BYTE *)(v30 + v73);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_177:
                    v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v33 = 0;
                goto LABEL_177;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_178;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_178:
              *(_QWORD *)(a1 + 24) = v33;
              goto LABEL_209;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 2u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    v39 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  v77 = v35++;
                  v78 = *(_BYTE *)(v36 + v77);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v39 = 0;
LABEL_182:
                    v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v39 = 0;
                goto LABEL_182;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_183;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              v39 = 0;
LABEL_183:
              *(_QWORD *)(a1 + 16) = v39;
              goto LABEL_209;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 1u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  v81 = v41++;
                  v82 = *(_BYTE *)(v42 + v81);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_187:
                    v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_187;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_188;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_188:
              *(_QWORD *)(a1 + 8) = v45;
              goto LABEL_209;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  v85 = v47++;
                  v86 = *(_BYTE *)(v48 + v85);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_192:
                    v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
                goto LABEL_192;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_193;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_193:
              *(_QWORD *)(a1 + 48) = v51;
              goto LABEL_209;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  v89 = v53++;
                  v90 = *(_BYTE *)(v54 + v89);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_197:
                    v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_197;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_198;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_198:
              *(_QWORD *)(a1 + 56) = v57;
              goto LABEL_209;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_172:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_173:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_99:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 8u;
              v59 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v60 = *(_QWORD *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    v63 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  v93 = v59++;
                  v94 = *(_BYTE *)(v60 + v93);
                  *((_QWORD *)this + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    v63 = 0;
LABEL_202:
                    v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v63 = 0;
                goto LABEL_202;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_203;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              v63 = 0;
LABEL_203:
              *(_QWORD *)(a1 + 32) = v63;
              goto LABEL_209;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              v65 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v66 = *(_QWORD *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v69 = 0;
                if (v2 <= v65)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v65)
                  {
                    v69 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  v97 = v65++;
                  v98 = *(_BYTE *)(v66 + v97);
                  *((_QWORD *)this + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    v69 = 0;
LABEL_207:
                    v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v69 = 0;
                goto LABEL_207;
              }
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v2 = v65 + 1;
                *((_QWORD *)this + 1) = v65 + 1;
                v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0)
                  goto LABEL_208;
                v67 += 7;
                v65 = v2;
                v14 = v68++ > 8;
              }
              while (!v14);
              v69 = 0;
LABEL_208:
              *(_QWORD *)(a1 + 40) = v69;
LABEL_209:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_209;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7449EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 116) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B744C78(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31110;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_21B744C90(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B744CB4(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  char v6;

  *(_QWORD *)a1 = &off_24DF31110;
  *(_DWORD *)(a1 + 76) = 0;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 = 4;
    *(_WORD *)(a1 + 76) = 4;
    *(double *)(a1 + 24) = result;
    v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 76) = v3;
    *(double *)(a1 + 40) = result;
    v2 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(a1 + 76) = v3;
    *(double *)(a1 + 32) = result;
    v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  v5 = *(_BYTE *)(a2 + 73);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 76) = v3;
  *(_BYTE *)(a1 + 73) = v5;
  v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0)
      return result;
LABEL_22:
    result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 76) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_21:
  v6 = *(_BYTE *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 76) = v3;
  *(_BYTE *)(a1 + 72) = v6;
  if ((*(_WORD *)(a2 + 76) & 2) != 0)
    goto LABEL_22;
  return result;
}

uint64_t sub_21B744DE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "emptyField2", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(a1 + 76) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField3");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "hasValidGroundContactTime");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "leftGroundContactTime", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "leftGroundContactTimePercentage", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "rightGroundContactTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rightGroundContactTimePercentage", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x80) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B744F58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 2u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 3u:
          *(_WORD *)(a1 + 76) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 5u:
          *(_WORD *)(a1 + 76) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 73) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 72) = v24;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_49:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_57:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74531C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_20:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 76) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B745458(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31148;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_21B745470(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B745494(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  double result;
  int v6;
  char v7;
  char v8;
  int v9;
  int v10;

  *(_QWORD *)a1 = &off_24DF31148;
  *(_DWORD *)(a1 + 88) = 0;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    v4 = *(_BYTE *)(a2 + 84);
    v3 = 2048;
    *(_WORD *)(a1 + 88) = 2048;
    *(_BYTE *)(a1 + 84) = v4;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v6 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 76) = v6;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v7 = *(_BYTE *)(a2 + 85);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 85) = v7;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *(_BYTE *)(a2 + 86);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 88) = v3;
  *(_BYTE *)(a1 + 86) = v8;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v9;
  v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0)
      return result;
LABEL_30:
    result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 88) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }
LABEL_29:
  v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 72) = v10;
  if ((*(_WORD *)(a2 + 88) & 4) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_21B745638(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "crownOrientation");
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isSuccessful");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isValidSide");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isValidToeOff");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "meanRotationZ", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "relativeInitialContactTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "relativeToeOffTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "stepSide");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "wristOrientation");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B745828(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 84) = v21;
              goto LABEL_119;
            case 2u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v47 = v23++;
                  v48 = *(_BYTE *)(v24 + v47);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_107;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_108;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v27;
              goto LABEL_119;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v51 = v33++;
                  v52 = *(_BYTE *)(v34 + v51);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_112;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_113;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 80) = v37;
              goto LABEL_119;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v55 = v39++;
                  v56 = *(_BYTE *)(v40 + v55);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_117;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_118;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 72) = v43;
LABEL_119:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_103:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B745EF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 88) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_21B7460A0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31180;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_21B7460B8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B7460DC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  double result;
  int v6;

  *(_QWORD *)a1 = &off_24DF31180;
  *(_DWORD *)(a1 + 48) = 0;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    v4 = *(_BYTE *)(a2 + 44);
    v3 = 32;
    *(_BYTE *)(a1 + 48) = 32;
    *(_BYTE *)(a1 + 44) = v4;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 48) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 48) = v3;
  *(double *)(a1 + 24) = result;
  v2 = *(_BYTE *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      return result;
LABEL_14:
    result = *(double *)(a2 + 32);
    *(_BYTE *)(a1 + 48) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
LABEL_13:
  v6 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 40) = v6;
  if ((*(_BYTE *)(a2 + 48) & 8) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B7461A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "isSuccessful");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 48) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "stepSide");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B746290(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 44) = v21;
              goto LABEL_61;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 5u:
              *(_BYTE *)(a1 + 48) |= 0x10u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_59;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_60;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 40) = v27;
LABEL_61:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_61;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B74661C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32));
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 48) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_21B7466E8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF311B8;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B746700(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B746724(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  float result;

  *(_QWORD *)a1 = &off_24DF311B8;
  *(_DWORD *)(a1 + 52) = 0;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    result = *(float *)(a2 + 28);
    v3 = 32;
    *(_WORD *)(a1 + 52) = 32;
    *(float *)(a1 + 28) = result;
    v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 32);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 52) = v3;
    *(float *)(a1 + 32) = result;
    v2 = *(_WORD *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 52) = v3;
    *(float *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 12) = result;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  result = *(float *)(a2 + 40);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  result = *(float *)(a2 + 44);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = *(float *)(a2 + 36);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 36) = result;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = *(float *)(a2 + 20);
  v3 |= 8u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_24:
    result = *(float *)(a2 + 24);
    *(_WORD *)(a1 + 52) = v3 | 0x10;
    *(float *)(a1 + 24) = result;
    return result;
  }
LABEL_23:
  result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 52) & 0x10) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B746874(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(float *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "decimalYear", *(float *)(a1 + 12));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "declination", *(float *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "latitude", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "longitude", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 44));
    if ((*(_WORD *)(a1 + 52) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B746A04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 52) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 52) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 52) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_58:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B746DE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_WORD *)(v3 + 52) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_21B746F40(uint64_t result)
{
  *(_QWORD *)result = &off_24DF311F0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B746F5C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B746F80(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  double result;
  int v5;
  int v6;

  *(_QWORD *)a1 = &off_24DF311F0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    v3 = 2;
    *(_BYTE *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *(double *)(a2 + 8);
    *(_BYTE *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if ((*(_BYTE *)(a2 + 32) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B747010(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "measSource");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "stateProbability", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "state");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B7470C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_59;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_63;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_64;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_70;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_68;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_69;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = v31;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_59:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B747484(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

double sub_21B747518(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31228;
  *(_DWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

void sub_21B747550(void **a1)
{
  void **v2;
  void **v3;

  *a1 = &off_24DF31228;
  v2 = a1 + 3;
  v3 = a1 + 15;
  sub_21B7967B4(&v3);
  v3 = a1 + 12;
  sub_21B7967B4(&v3);
  v3 = a1 + 9;
  sub_21B7967B4(&v3);
  v3 = a1 + 6;
  sub_21B7967B4(&v3);
  v3 = v2;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_21B7475DC(void **a1)
{
  sub_21B747550(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B747600(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *j;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)a1 = &off_24DF31228;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = (uint64_t **)(a1 + 24);
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = (uint64_t **)(a1 + 72);
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = (uint64_t **)(a1 + 120);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  if ((*(_BYTE *)(a2 + 152) & 4) != 0)
  {
    v7 = *(_QWORD *)(a2 + 144);
    *(_BYTE *)(a1 + 152) = 4;
    *(_QWORD *)(a1 + 144) = v7;
  }
  v8 = *(uint64_t **)(a2 + 96);
  for (i = *(uint64_t **)(a2 + 104); v8 != i; ++v8)
    sub_21B747790((uint64_t **)(a1 + 96), *v8);
  v10 = *(uint64_t **)(a2 + 72);
  v11 = *(uint64_t **)(a2 + 80);
  while (v10 != v11)
    sub_21B747790(v5, *v10++);
  v12 = *(uint64_t **)(a2 + 120);
  v13 = *(uint64_t **)(a2 + 128);
  while (v12 != v13)
    sub_21B747790(v6, *v12++);
  v14 = *(uint64_t **)(a2 + 48);
  for (j = *(uint64_t **)(a2 + 56); v14 != j; ++v14)
    sub_21B747790((uint64_t **)(a1 + 48), *v14);
  v16 = *(uint64_t **)(a2 + 24);
  v17 = *(uint64_t **)(a2 + 32);
  while (v16 != v17)
    sub_21B747790(v4, *v16++);
  v18 = *(_BYTE *)(a2 + 152);
  if ((v18 & 2) != 0)
  {
    v19 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 152) |= 2u;
    *(_QWORD *)(a1 + 16) = v19;
    v18 = *(_BYTE *)(a2 + 152);
  }
  if ((v18 & 1) != 0)
  {
    v20 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(a1 + 152) |= 1u;
    *(_QWORD *)(a1 + 8) = v20;
  }
  return a1;
}

uint64_t sub_21B747790(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B801FEC(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B7478C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7478E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 152);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lifespan", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 152);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "machTime", *(double *)(a1 + 16));
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "satInfoBeidou");
  }
  v9 = *(uint64_t **)(a1 + 48);
  v10 = *(uint64_t **)(a1 + 56);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "satInfoGalileo");
  }
  v12 = *(uint64_t **)(a1 + 72);
  v13 = *(uint64_t **)(a1 + 80);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "satInfoGlonass");
  }
  v15 = *(uint64_t **)(a1 + 96);
  v16 = *(uint64_t **)(a1 + 104);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "satInfoGps");
  }
  v18 = *(uint64_t **)(a1 + 120);
  v19 = *(uint64_t **)(a1 + 128);
  while (v18 != v19)
  {
    v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, this, "satInfoQzss");
  }
  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 144));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B747A7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)(a1 + 24);
  v9 = (uint64_t **)(a1 + 48);
  v10 = (uint64_t **)(a1 + 120);
  v11 = (uint64_t **)(a1 + 72);
  v12 = (uint64_t **)(a1 + 96);
  while (2)
  {
    v13 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v20 = 0;
      v21 = 0;
      v16 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v22 = v2 + 1;
        v23 = *(_BYTE *)(v13 + v2);
        *((_QWORD *)this + 1) = v22;
        v16 |= (unint64_t)(v23 & 0x7F) << v20;
        if ((v23 & 0x80) == 0)
          goto LABEL_21;
        v20 += 7;
        v2 = v22;
        if (v21++ >= 9)
        {
LABEL_20:
          v16 = 0;
          goto LABEL_21;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v18 = *(_BYTE *)(v13 + v2);
      v16 |= (unint64_t)(v18 & 0x7F) << v14;
      if ((v18 & 0x80) == 0)
        break;
      v14 += 7;
      v2 = v17;
      if (v15++ > 8)
        goto LABEL_20;
    }
LABEL_21:
    if ((v16 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v16 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 152) |= 4u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_43;
      case 2u:
        sub_21B747D60(v12);
        v26 = *(_QWORD *)(a1 + 104);
        goto LABEL_31;
      case 3u:
        sub_21B747D60(v11);
        v26 = *(_QWORD *)(a1 + 80);
        goto LABEL_31;
      case 4u:
        sub_21B747D60(v10);
        v26 = *(_QWORD *)(a1 + 128);
        goto LABEL_31;
      case 5u:
        sub_21B747D60(v9);
        v26 = *(_QWORD *)(a1 + 56);
        goto LABEL_31;
      case 6u:
        sub_21B747D60(v8);
        v26 = *(_QWORD *)(a1 + 32);
LABEL_31:
        v27 = *(_QWORD *)(v26 - 8);
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v27 + 16))(v27, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_44:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          continue;
        }
        return 0;
      case 7u:
        *(_BYTE *)(a1 + 152) |= 2u;
        v30 = *((_QWORD *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v30);
        goto LABEL_43;
      case 8u:
        *(_BYTE *)(a1 + 152) |= 1u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
        {
LABEL_41:
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v28);
LABEL_43:
          *((_QWORD *)this + 1) += 8;
        }
        goto LABEL_44;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

uint64_t sub_21B747D60(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_21B801F44(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B747E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B747EA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base **v10;
  const PB::Base **v11;
  const PB::Base *v12;
  const PB::Base **v13;
  const PB::Base **v14;
  const PB::Base *v15;
  const PB::Base **v16;
  const PB::Base **v17;
  const PB::Base *v18;
  char v19;

  v3 = result;
  if ((*(_BYTE *)(result + 152) & 4) != 0)
    result = PB::Writer::write(this, *(double *)(result + 144));
  v4 = *(const PB::Base ***)(v3 + 96);
  v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  v7 = *(const PB::Base ***)(v3 + 72);
  v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::writeSubmessage(this, v9);
  }
  v10 = *(const PB::Base ***)(v3 + 120);
  v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::writeSubmessage(this, v12);
  }
  v13 = *(const PB::Base ***)(v3 + 48);
  v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::writeSubmessage(this, v15);
  }
  v16 = *(const PB::Base ***)(v3 + 24);
  v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::writeSubmessage(this, v18);
  }
  v19 = *(_BYTE *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 16));
    v19 = *(_BYTE *)(v3 + 152);
  }
  if ((v19 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_21B747FC4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31260;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B747FDC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B748000(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF31260;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        return *(float *)&v4;
      goto LABEL_12;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  if ((*(_BYTE *)(a2 + 32) & 8) == 0)
    return *(float *)&v4;
LABEL_12:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B7480A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "magnitudeVar", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B748178(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_40:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_41:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B748414(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_21B7484C4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31298;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B7484D8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31298;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B748518(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31298;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74856C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)a1 = &off_24DF31298;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7AC098(v4, *(_QWORD *)(a2 + 8));
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v7 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_BYTE *)(a1 + 16) = v7;
  }
  return a1;
}

uint64_t sub_21B748608(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "isAvgGrav");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B748674(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v23 = *((_QWORD *)this + 1);
        if (v23 >= *((_QWORD *)this + 2))
        {
          v26 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v24 = v23 + 1;
          v25 = *(unsigned __int8 *)(*(_QWORD *)this + v23);
          *((_QWORD *)this + 1) = v24;
          v26 = v25 != 0;
        }
        *(_BYTE *)(a1 + 16) = v26;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_21B7AC368(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74888C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

void sub_21B7488E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B748908(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;

  *(_QWORD *)result = &off_24DF312D0;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 44) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 44) = v3;
    *(_DWORD *)(result + 28) = v5;
    v2 = *(_WORD *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 44) = v3;
    *(_DWORD *)(result + 32) = v6;
    v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v7;
  v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 24) = v8;
  v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  v9 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 20) = v9;
  v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  v10 = *(_BYTE *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 44) = v3;
  *(_BYTE *)(result + 40) = v10;
  v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      return result;
LABEL_20:
    v12 = *(_DWORD *)(a2 + 16);
    *(_WORD *)(result + 44) = v3 | 2;
    *(_DWORD *)(result + 16) = v12;
    return result;
  }
LABEL_19:
  v11 = *(_BYTE *)(a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(result + 44) = v3;
  *(_BYTE *)(result + 41) = v11;
  if ((*(_WORD *)(a2 + 44) & 2) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B748A1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_WORD *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNumMod3");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "subType");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "triggerEnabled");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "triggerOn");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 32));
    if ((*(_WORD *)(a1 + 44) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x40) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B748B6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_88;
            case 2u:
              *(_WORD *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_87;
            case 3u:
              *(_WORD *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_87;
            case 4u:
              *(_WORD *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_87:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_88:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 44) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v45 = v21++;
                  v46 = *(_BYTE *)(v22 + v45);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_92;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_93;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 6u:
              *(_WORD *)(a1 + 44) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v49 = v27++;
                  v50 = *(_BYTE *)(v28 + v49);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_97;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_98;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 7u:
              *(_WORD *)(a1 + 44) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 40) = v34;
              goto LABEL_104;
            case 8u:
              *(_WORD *)(a1 + 44) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 41) = v36;
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 44) |= 2u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_102;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_103;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v41;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B74911C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 44) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B74923C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31308;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_21B749254(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B749278(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  *(_QWORD *)result = &off_24DF31308;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(_DWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 12) = v5;
    v2 = *(_BYTE *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 24) = v7;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_15;
  }
LABEL_14:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x20u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 28) = v8;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0)
      return result;
LABEL_16:
    v10 = *(_DWORD *)(a2 + 20);
    *(_BYTE *)(result + 36) = v3 | 8;
    *(_DWORD *)(result + 20) = v10;
    return result;
  }
LABEL_15:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x40u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 32) = v9;
  if ((*(_BYTE *)(a2 + 36) & 8) != 0)
    goto LABEL_16;
  return result;
}

uint64_t sub_21B749358(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "doingBiasEstimation");
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "varianceY", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "varianceX", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "varianceZ", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B749468(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_57:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_41:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_63;
            case 7u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_62;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_61;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_62;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_63:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_63;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B749820(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B749908(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31340;
  *(_DWORD *)(a1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_21B749938(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24DF31340;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_21B7499A8(PB::Base *a1)
{
  sub_21B749938(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7499CC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_24DF31340;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_DWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v6 = *(_BYTE *)(a2 + 116);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 104);
    v7 = 1;
    *(_BYTE *)(a1 + 116) = 1;
    *(_QWORD *)(a1 + 104) = v8;
    v6 = *(_BYTE *)(a2 + 116);
    if ((v6 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = 0;
  if ((*(_BYTE *)(a2 + 116) & 4) != 0)
  {
LABEL_5:
    v9 = *(_BYTE *)(a2 + 113);
    v7 |= 4u;
    *(_BYTE *)(a1 + 116) = v7;
    *(_BYTE *)(a1 + 113) = v9;
    v6 = *(_BYTE *)(a2 + 116);
  }
LABEL_6:
  if ((v6 & 2) != 0)
  {
    v10 = *(_BYTE *)(a2 + 112);
    *(_BYTE *)(a1 + 116) = v7 | 2;
    *(_BYTE *)(a1 + 112) = v10;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_21B749AE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accelVariance", v7);
  }
  if ((*(_BYTE *)(a1 + 116) & 2) != 0)
    PB::TextFormatter::format(this, "allowRelaxedGyroMean");
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "gyroMean", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "gyroVariance", v13);
  }
  if ((*(_BYTE *)(a1 + 116) & 4) != 0)
    PB::TextFormatter::format(this, "stillOnAll");
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "temperatureBias", v16);
  }
  if ((*(_BYTE *)(a1 + 116) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B749C24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (void **)(a1 + 80);
    v136 = a1 + 96;
    v137 = a1 + 24;
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 32);
    v134 = a1 + 48;
    v135 = a1 + 72;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 116) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_204;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(_BYTE *)(a1 + 116) |= 4u;
          v27 = *((_QWORD *)this + 1);
          if (v27 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v28 = v27 + 1;
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v27);
            *((_QWORD *)this + 1) = v28;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 113) = v30;
          goto LABEL_207;
        case 3u:
          *(_BYTE *)(a1 + 116) |= 2u;
          v31 = *((_QWORD *)this + 1);
          if (v31 >= *((_QWORD *)this + 2))
          {
            v34 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v32 = v31 + 1;
            v33 = *(unsigned __int8 *)(*(_QWORD *)this + v31);
            *((_QWORD *)this + 1) = v32;
            v34 = v33 != 0;
          }
          *(_BYTE *)(a1 + 112) = v34;
          goto LABEL_207;
        case 4u:
          if (v24 != 2)
          {
            v92 = *(char **)(a1 + 40);
            v91 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v92 >= v91)
            {
              v100 = (char *)*v11;
              v101 = (v92 - (_BYTE *)*v11) >> 2;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62)
LABEL_215:
                sub_21B796A0C();
              v103 = v91 - (_QWORD)v100;
              if (v103 >> 1 > v102)
                v102 = v103 >> 1;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
              {
                v105 = (char *)sub_21B796CD8(v134, v104);
                v100 = *(char **)(a1 + 32);
                v92 = *(char **)(a1 + 40);
              }
              else
              {
                v105 = 0;
              }
              v124 = &v105[4 * v101];
              *(_DWORD *)v124 = 0;
              v93 = v124 + 4;
              while (v92 != v100)
              {
                v125 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v124;
              *(_QWORD *)(a1 + 40) = v93;
              *(_QWORD *)(a1 + 48) = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *(_DWORD *)v92 = 0;
              v93 = v92 + 4;
            }
            *(_QWORD *)(a1 + 40) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          while (v35 < v36 && !*((_BYTE *)this + 24))
          {
            v38 = *(char **)(a1 + 40);
            v37 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v38 >= v37)
            {
              v40 = (char *)*v11;
              v41 = (v38 - (_BYTE *)*v11) >> 2;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62)
                goto LABEL_215;
              v43 = v37 - (_QWORD)v40;
              if (v43 >> 1 > v42)
                v42 = v43 >> 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                v44 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                v45 = (char *)sub_21B796CD8(v134, v44);
                v40 = *(char **)(a1 + 32);
                v38 = *(char **)(a1 + 40);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[4 * v41];
              *(_DWORD *)v46 = 0;
              v39 = v46 + 4;
              while (v38 != v40)
              {
                v47 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v46;
              *(_QWORD *)(a1 + 40) = v39;
              *(_QWORD *)(a1 + 48) = &v45[4 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_DWORD *)v38 = 0;
              v39 = v38 + 4;
            }
            *(_QWORD *)(a1 + 40) = v39;
            v48 = *((_QWORD *)this + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v39 - 1) = *(_DWORD *)(*(_QWORD *)this + v48);
            v36 = *((_QWORD *)this + 2);
            v35 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v35;
          }
          goto LABEL_129;
        case 5u:
          if (v24 != 2)
          {
            v95 = *(char **)(a1 + 64);
            v94 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v95 >= v94)
            {
              v106 = (char *)*v10;
              v107 = (v95 - (_BYTE *)*v10) >> 2;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62)
LABEL_216:
                sub_21B796A0C();
              v109 = v94 - (_QWORD)v106;
              if (v109 >> 1 > v108)
                v108 = v109 >> 1;
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                v110 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v110 = v108;
              if (v110)
              {
                v111 = (char *)sub_21B796CD8(v135, v110);
                v106 = *(char **)(a1 + 56);
                v95 = *(char **)(a1 + 64);
              }
              else
              {
                v111 = 0;
              }
              v126 = &v111[4 * v107];
              *(_DWORD *)v126 = 0;
              v93 = v126 + 4;
              while (v95 != v106)
              {
                v127 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v126;
              *(_QWORD *)(a1 + 64) = v93;
              *(_QWORD *)(a1 + 72) = &v111[4 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_DWORD *)v95 = 0;
              v93 = v95 + 4;
            }
            *(_QWORD *)(a1 + 64) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v49 = *((_QWORD *)this + 1);
          v50 = *((_QWORD *)this + 2);
          while (v49 < v50 && !*((_BYTE *)this + 24))
          {
            v52 = *(char **)(a1 + 64);
            v51 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v10;
              v55 = (v52 - (_BYTE *)*v10) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
                goto LABEL_216;
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_21B796CD8(v135, v58);
                v54 = *(char **)(a1 + 56);
                v52 = *(char **)(a1 + 64);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v60;
              *(_QWORD *)(a1 + 64) = v53;
              *(_QWORD *)(a1 + 72) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 64) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
            v50 = *((_QWORD *)this + 2);
            v49 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v49;
          }
          goto LABEL_129;
        case 6u:
          if (v24 != 2)
          {
            v97 = *(char **)(a1 + 88);
            v96 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v97 >= v96)
            {
              v112 = (char *)*v9;
              v113 = (v97 - (_BYTE *)*v9) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
LABEL_217:
                sub_21B796A0C();
              v115 = v96 - (_QWORD)v112;
              if (v115 >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)sub_21B796CD8(v136, v116);
                v112 = *(char **)(a1 + 80);
                v97 = *(char **)(a1 + 88);
              }
              else
              {
                v117 = 0;
              }
              v128 = &v117[4 * v113];
              *(_DWORD *)v128 = 0;
              v93 = v128 + 4;
              while (v97 != v112)
              {
                v129 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v128;
              *(_QWORD *)(a1 + 88) = v93;
              *(_QWORD *)(a1 + 96) = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *(_DWORD *)v97 = 0;
              v93 = v97 + 4;
            }
            *(_QWORD *)(a1 + 88) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          while (v63 < v64 && !*((_BYTE *)this + 24))
          {
            v66 = *(char **)(a1 + 88);
            v65 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v66 >= v65)
            {
              v68 = (char *)*v9;
              v69 = (v66 - (_BYTE *)*v9) >> 2;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 62)
                goto LABEL_217;
              v71 = v65 - (_QWORD)v68;
              if (v71 >> 1 > v70)
                v70 = v71 >> 1;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                v72 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v72 = v70;
              if (v72)
              {
                v73 = (char *)sub_21B796CD8(v136, v72);
                v68 = *(char **)(a1 + 80);
                v66 = *(char **)(a1 + 88);
              }
              else
              {
                v73 = 0;
              }
              v74 = &v73[4 * v69];
              *(_DWORD *)v74 = 0;
              v67 = v74 + 4;
              while (v66 != v68)
              {
                v75 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *((_DWORD *)v74 - 1) = v75;
                v74 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v74;
              *(_QWORD *)(a1 + 88) = v67;
              *(_QWORD *)(a1 + 96) = &v73[4 * v72];
              if (v68)
                operator delete(v68);
            }
            else
            {
              *(_DWORD *)v66 = 0;
              v67 = v66 + 4;
            }
            *(_QWORD *)(a1 + 88) = v67;
            v76 = *((_QWORD *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v67 - 1) = *(_DWORD *)(*(_QWORD *)this + v76);
            v64 = *((_QWORD *)this + 2);
            v63 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v63;
          }
          goto LABEL_129;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v77 = *((_QWORD *)this + 1);
            v78 = *((_QWORD *)this + 2);
            while (v77 < v78 && !*((_BYTE *)this + 24))
            {
              v80 = *(char **)(a1 + 16);
              v79 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v80 >= v79)
              {
                v82 = (char *)*v8;
                v83 = (v80 - (_BYTE *)*v8) >> 2;
                v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 62)
                  goto LABEL_218;
                v85 = v79 - (_QWORD)v82;
                if (v85 >> 1 > v84)
                  v84 = v85 >> 1;
                if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
                  v86 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v86 = v84;
                if (v86)
                {
                  v87 = (char *)sub_21B796CD8(v137, v86);
                  v82 = *(char **)(a1 + 8);
                  v80 = *(char **)(a1 + 16);
                }
                else
                {
                  v87 = 0;
                }
                v88 = &v87[4 * v83];
                *(_DWORD *)v88 = 0;
                v81 = v88 + 4;
                while (v80 != v82)
                {
                  v89 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v88 - 1) = v89;
                  v88 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v88;
                *(_QWORD *)(a1 + 16) = v81;
                *(_QWORD *)(a1 + 24) = &v87[4 * v86];
                if (v82)
                  operator delete(v82);
              }
              else
              {
                *(_DWORD *)v80 = 0;
                v81 = v80 + 4;
              }
              *(_QWORD *)(a1 + 16) = v81;
              v90 = *((_QWORD *)this + 1);
              if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)this + 2))
              {
LABEL_128:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v81 - 1) = *(_DWORD *)(*(_QWORD *)this + v90);
              v78 = *((_QWORD *)this + 2);
              v77 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v77;
            }
LABEL_129:
            PB::Reader::recallMark();
          }
          else
          {
            v99 = *(char **)(a1 + 16);
            v98 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v99 >= v98)
            {
              v118 = (char *)*v8;
              v119 = (v99 - (_BYTE *)*v8) >> 2;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
LABEL_218:
                sub_21B796A0C();
              v121 = v98 - (_QWORD)v118;
              if (v121 >> 1 > v120)
                v120 = v121 >> 1;
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                v122 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v122 = v120;
              if (v122)
              {
                v123 = (char *)sub_21B796CD8(v137, v122);
                v118 = *(char **)(a1 + 8);
                v99 = *(char **)(a1 + 16);
              }
              else
              {
                v123 = 0;
              }
              v130 = &v123[4 * v119];
              *(_DWORD *)v130 = 0;
              v93 = v130 + 4;
              while (v99 != v118)
              {
                v131 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v130;
              *(_QWORD *)(a1 + 16) = v93;
              *(_QWORD *)(a1 + 24) = &v123[4 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_DWORD *)v99 = 0;
              v93 = v99 + 4;
            }
            *(_QWORD *)(a1 + 16) = v93;
LABEL_202:
            v132 = *((_QWORD *)this + 1);
            if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *((_QWORD *)this + 2))
            {
              *(v93 - 1) = *(_DWORD *)(*(_QWORD *)this + v132);
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_206:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_204:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_207:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_207;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74A5A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  v3 = result;
  v4 = *(_BYTE *)(result + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(result + 116) & 4) == 0)
      goto LABEL_3;
LABEL_19:
    result = PB::Writer::write(this);
    if ((*(_BYTE *)(v3 + 116) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::write(this, *(double *)(result + 104));
  v4 = *(_BYTE *)(v3 + 116);
  if ((v4 & 4) != 0)
    goto LABEL_19;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    result = PB::Writer::write(this);
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 80);
  v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v15 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    v16 = *v15++;
    result = PB::Writer::write(this, v16);
  }
  return result;
}

uint64_t sub_21B74A6A0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31378;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B74A6B4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31378;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B74A6F4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31378;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74A748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  *(_QWORD *)a1 = &off_24DF31378;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7AC098(v4, *(_QWORD *)(a2 + 8));
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 20) |= 1u;
    *(_DWORD *)(a1 + 16) = v7;
  }
  return a1;
}

uint64_t sub_21B74A7E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "axis");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74A850(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
        {
          v32 = 0;
          v33 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v34 = v23 + 1;
            v35 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v34;
            v28 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v23 = v34;
            v14 = v33++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v28) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v28) = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              break;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v28;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_21B7AC368(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74AB08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B74AB5C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF313B0;
  *(_DWORD *)(a1 + 92) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_21B74AB88(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24DF313B0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_21B74ABE8(PB::Base *a1)
{
  sub_21B74AB88(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74AC0C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_24DF313B0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 92) = 1;
    *(_QWORD *)(a1 + 80) = v5;
  }
  if (a1 != a2)
  {
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 92) & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 92) |= 2u;
    *(_DWORD *)(a1 + 88) = v6;
  }
  return a1;
}

uint64_t sub_21B74ACE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dynamicBiasEstimate", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "estimateErrorMetric", v10);
  }
  if ((*(_BYTE *)(a1 + 92) & 2) != 0)
    PB::TextFormatter::format(this, "rawGyroTemperature", *(float *)(a1 + 88));
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "subFitError", v13);
  }
  if ((*(_BYTE *)(a1 + 92) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B74ADDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  char *v99;
  int v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 32);
    v103 = a1 + 48;
    v104 = a1 + 72;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 92) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_158;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_161;
        case 2u:
          if (v24 != 2)
          {
            v71 = *(char **)(a1 + 16);
            v70 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v71 >= v70)
            {
              v77 = (char *)*v10;
              v78 = (v71 - (_BYTE *)*v10) >> 2;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 62)
LABEL_170:
                sub_21B796A0C();
              v80 = v70 - (_QWORD)v77;
              if (v80 >> 1 > v79)
                v79 = v80 >> 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                v81 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_21B796CD8(v11, v81);
                v77 = *(char **)(a1 + 8);
                v71 = *(char **)(a1 + 16);
              }
              else
              {
                v82 = 0;
              }
              v95 = &v82[4 * v78];
              *(_DWORD *)v95 = 0;
              v72 = v95 + 4;
              while (v71 != v77)
              {
                v96 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v95 - 1) = v96;
                v95 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v95;
              *(_QWORD *)(a1 + 16) = v72;
              *(_QWORD *)(a1 + 24) = &v82[4 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v72 = v71 + 4;
            }
            *(_QWORD *)(a1 + 16) = v72;
            goto LABEL_156;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_170;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_21B796CD8(v11, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_109;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_110;
        case 3u:
          if (v24 != 2)
          {
            v74 = *(char **)(a1 + 40);
            v73 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v74 >= v73)
            {
              v83 = (char *)*v9;
              v84 = (v74 - (_BYTE *)*v9) >> 2;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 62)
LABEL_171:
                sub_21B796A0C();
              v86 = v73 - (_QWORD)v83;
              if (v86 >> 1 > v85)
                v85 = v86 >> 1;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
                v87 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87)
              {
                v88 = (char *)sub_21B796CD8(v103, v87);
                v83 = *(char **)(a1 + 32);
                v74 = *(char **)(a1 + 40);
              }
              else
              {
                v88 = 0;
              }
              v97 = &v88[4 * v84];
              *(_DWORD *)v97 = 0;
              v72 = v97 + 4;
              while (v74 != v83)
              {
                v98 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v97 - 1) = v98;
                v97 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v97;
              *(_QWORD *)(a1 + 40) = v72;
              *(_QWORD *)(a1 + 48) = &v88[4 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v72 = v74 + 4;
            }
            *(_QWORD *)(a1 + 40) = v72;
            goto LABEL_156;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 40);
            v43 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v9;
              v47 = (v44 - (_BYTE *)*v9) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_171;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796CD8(v103, v50);
                v46 = *(char **)(a1 + 32);
                v44 = *(char **)(a1 + 40);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v52;
              *(_QWORD *)(a1 + 40) = v45;
              *(_QWORD *)(a1 + 48) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 40) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_109;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_110;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v55 = *((_QWORD *)this + 1);
            v56 = *((_QWORD *)this + 2);
            while (v55 < v56 && !*((_BYTE *)this + 24))
            {
              v58 = *(char **)(a1 + 64);
              v57 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v58 >= v57)
              {
                v60 = (char *)*v8;
                v61 = (v58 - (_BYTE *)*v8) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  goto LABEL_172;
                v63 = v57 - (_QWORD)v60;
                if (v63 >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)sub_21B796CD8(v104, v64);
                  v60 = *(char **)(a1 + 56);
                  v58 = *(char **)(a1 + 64);
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(_DWORD *)v66 = 0;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v66;
                *(_QWORD *)(a1 + 64) = v59;
                *(_QWORD *)(a1 + 72) = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_DWORD *)v58 = 0;
                v59 = v58 + 4;
              }
              *(_QWORD *)(a1 + 64) = v59;
              v68 = *((_QWORD *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              {
LABEL_109:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
              v56 = *((_QWORD *)this + 2);
              v55 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v55;
            }
LABEL_110:
            PB::Reader::recallMark();
          }
          else
          {
            v76 = *(char **)(a1 + 64);
            v75 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v76 >= v75)
            {
              v89 = (char *)*v8;
              v90 = (v76 - (_BYTE *)*v8) >> 2;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62)
LABEL_172:
                sub_21B796A0C();
              v92 = v75 - (_QWORD)v89;
              if (v92 >> 1 > v91)
                v91 = v92 >> 1;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                v93 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                v94 = (char *)sub_21B796CD8(v104, v93);
                v89 = *(char **)(a1 + 56);
                v76 = *(char **)(a1 + 64);
              }
              else
              {
                v94 = 0;
              }
              v99 = &v94[4 * v90];
              *(_DWORD *)v99 = 0;
              v72 = v99 + 4;
              while (v76 != v89)
              {
                v100 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v99;
              *(_QWORD *)(a1 + 64) = v72;
              *(_QWORD *)(a1 + 72) = &v94[4 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v72 = v76 + 4;
            }
            *(_QWORD *)(a1 + 64) = v72;
LABEL_156:
            v101 = *((_QWORD *)this + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *((_QWORD *)this + 2))
            {
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)this + v101);
LABEL_160:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_161:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_158:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_162:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 5u:
          *(_BYTE *)(a1 + 92) |= 2u;
          v69 = *((_QWORD *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
            goto LABEL_158;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v69);
          goto LABEL_160;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_162;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74B550(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;

  v3 = result;
  if ((*(_BYTE *)(result + 92) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 80));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 56);
  v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  if ((*(_BYTE *)(v3 + 92) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 88));
  return result;
}

double sub_21B74B614(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF313E8;
  *(_DWORD *)(a1 + 60) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B74B638(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF313E8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B74B688(PB::Base *a1)
{
  sub_21B74B638(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74B6AC(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;

  *(_QWORD *)a1 = &off_24DF313E8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  if ((*(_BYTE *)(a2 + 60) & 1) != 0)
  {
    v5 = *(_DWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 1u;
    *(_DWORD *)(a1 + 56) = v5;
  }
  return a1;
}

uint64_t sub_21B74B750(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "intercept", v7);
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "lastMiniCal", *(float *)(a1 + 56));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "slope", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B74B804(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  unint64_t v76;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v8;
              v47 = (v44 - (_BYTE *)*v8) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_21B796CD8(v9, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            {
LABEL_82:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_83;
            }
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = *(char **)(a1 + 16);
        v58 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v8;
          v67 = (v59 - (_BYTE *)*v8) >> 2;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62)
LABEL_128:
            sub_21B796A0C();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 1 > v68)
            v68 = v69 >> 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
            v70 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_21B796CD8(v9, v70);
            v66 = *(char **)(a1 + 8);
            v59 = *(char **)(a1 + 16);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[4 * v67];
          *(_DWORD *)v74 = 0;
          v57 = v74 + 4;
          while (v59 != v66)
          {
            v75 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v74;
          *(_QWORD *)(a1 + 16) = v57;
          *(_QWORD *)(a1 + 24) = &v71[4 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_DWORD *)v59 = 0;
          v57 = v59 + 4;
        }
        *(_QWORD *)(a1 + 16) = v57;
LABEL_114:
        v76 = *((_QWORD *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(v57 - 1) = *(_DWORD *)(*(_QWORD *)this + v76);
LABEL_118:
        *((_QWORD *)this + 1) += 4;
        goto LABEL_119;
      }
      if ((_DWORD)v25 == 1)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 40);
            v28 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_127;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_21B796CD8(v11, v35);
                v31 = *(char **)(a1 + 32);
                v29 = *(char **)(a1 + 40);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v37;
              *(_QWORD *)(a1 + 40) = v30;
              *(_QWORD *)(a1 + 48) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *(_QWORD *)(a1 + 40) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v26;
          }
LABEL_83:
          PB::Reader::recallMark();
          goto LABEL_119;
        }
        v56 = *(char **)(a1 + 40);
        v55 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v56 >= v55)
        {
          v60 = (char *)*v10;
          v61 = (v56 - (_BYTE *)*v10) >> 2;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62)
LABEL_127:
            sub_21B796A0C();
          v63 = v55 - (_QWORD)v60;
          if (v63 >> 1 > v62)
            v62 = v63 >> 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
            v64 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v65 = (char *)sub_21B796CD8(v11, v64);
            v60 = *(char **)(a1 + 32);
            v56 = *(char **)(a1 + 40);
          }
          else
          {
            v65 = 0;
          }
          v72 = &v65[4 * v61];
          *(_DWORD *)v72 = 0;
          v57 = v72 + 4;
          while (v56 != v60)
          {
            v73 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v72;
          *(_QWORD *)(a1 + 40) = v57;
          *(_QWORD *)(a1 + 48) = &v65[4 * v64];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_DWORD *)v56 = 0;
          v57 = v56 + 4;
        }
        *(_QWORD *)(a1 + 40) = v57;
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 60) |= 1u;
    v40 = *((_QWORD *)this + 1);
    if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
    {
LABEL_116:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_119;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v40);
    goto LABEL_118;
  }
  return v4 == 0;
}

uint64_t sub_21B74BD74(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = result;
  v4 = *(float **)(result + 32);
  v5 = *(float **)(result + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 56));
  return result;
}

_QWORD *sub_21B74BE00(_QWORD *result)
{
  *result = off_24DF31420;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B74BE14(void **a1)
{
  void **v2;

  *a1 = off_24DF31420;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B74BE5C(void **a1)
{
  void **v3;

  *a1 = off_24DF31420;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

_QWORD *sub_21B74BEB8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  a1[1] = 0;
  v3 = (uint64_t **)(a1 + 1);
  *a1 = off_24DF31420;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_21B74BF1C(v3, *v4++);
  return a1;
}

uint64_t sub_21B74BF1C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B74CA6C(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B74C050(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B74C070(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "sample");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74C0DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_21B74C27C(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74C27C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF31490;
  *(_DWORD *)(v2 + 24) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B74C3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B74C3D0(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

_QWORD *sub_21B74C418(_QWORD *result)
{
  *result = off_24DF31458;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B74C42C(void **a1)
{
  void **v2;

  *a1 = off_24DF31458;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B74C474(void **a1)
{
  void **v3;

  *a1 = off_24DF31458;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

_QWORD *sub_21B74C4D0(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;

  a1[1] = 0;
  v3 = (uint64_t **)(a1 + 1);
  *a1 = off_24DF31458;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(uint64_t **)(a2 + 8);
  v5 = *(uint64_t **)(a2 + 16);
  while (v4 != v5)
    sub_21B74C534(v3, *v4++);
  return a1;
}

uint64_t sub_21B74C534(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B74CF40(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B74C668(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B74C688(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "sample");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74C6F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_21B74C894(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74C894(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_24DF314C8;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B74C9CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B74C9E8(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_21B74CA30(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31490;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B74CA48(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B74CA6C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)a1 = &off_24DF31490;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(float *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(float *)(a1 + 12) = result;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *(float *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 8;
    *(float *)(a1 + 20) = result;
    return result;
  }
  result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_BYTE *)(a1 + 24) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 24) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B74CAF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 24) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74CBA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 24) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 24) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 24) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 24) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74CE04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_21B74CE98(uint64_t result)
{
  *(_QWORD *)result = &off_24DF314C8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B74CEAC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF314C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B74CEEC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF314C8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74CF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24DF314C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B74CA6C(v4, *(_QWORD *)(a2 + 8));
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v6 + 8))(v6, v5);
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) |= 1u;
    *(_QWORD *)(a1 + 16) = v8;
  }
  return a1;
}

uint64_t sub_21B74CFDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74D048(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v22 = *((_QWORD *)this + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v22);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_24DF31490;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74D27C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_21B74D2D0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31500;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_21B74D2E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74D30C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)result = &off_24DF31500;
  *(_DWORD *)(result + 60) = 0;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 60) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_WORD *)(a2 + 60) & 0x100) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 44);
    v3 |= 0x100u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 44) = v5;
    v2 = *(_WORD *)(a2 + 60);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x200u;
    *(_WORD *)(result + 60) = v3;
    *(_DWORD *)(result + 48) = v6;
    v2 = *(_WORD *)(a2 + 60);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 52) = v7;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x80) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 36) = v9;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 56) = v10;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 16) = v11;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 24) = v12;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 28) = v13;
  v2 = *(_WORD *)(a2 + 60);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      return result;
LABEL_26:
    v15 = *(_DWORD *)(a2 + 20);
    *(_WORD *)(result + 60) = v3 | 4;
    *(_DWORD *)(result + 20) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 60) = v3;
  *(_DWORD *)(result + 32) = v14;
  if ((*(_WORD *)(a2 + 60) & 4) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_21B74D478(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "calibrationLevel");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 60) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74D628(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_73;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_72:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_73:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_56:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_79;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_78;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_77:
                    v2 = v29 + 1;
                    goto LABEL_78;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_77;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_78;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_78:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_79:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_79;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B74DB00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_WORD *)(v3 + 60) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B74DC74(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31538;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_21B74DC8C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B74DCB0(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_24DF31538;
  *(_DWORD *)(a1 + 12) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    *(_BYTE *)(a1 + 12) = 1;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_21B74DCDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "dt", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74DD28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74DEC0(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8));
  return result;
}

uint64_t sub_21B74DEDC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31570;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_21B74DEF4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B74DF18(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)a1 = &off_24DF31570;
  *(_DWORD *)(a1 + 24) = 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((v2 & 1) != 0)
  {
    result = *(float *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 24) = 1;
    *(float *)(a1 + 8) = result;
    v2 = *(_BYTE *)(a2 + 24);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 12);
    v3 |= 2u;
    *(_BYTE *)(a1 + 24) = v3;
    *(float *)(a1 + 12) = result;
    v2 = *(_BYTE *)(a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0)
      return result;
LABEL_10:
    result = *(float *)(a2 + 20);
    *(_BYTE *)(a1 + 24) = v3 | 8;
    *(float *)(a1 + 20) = result;
    return result;
  }
  result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_BYTE *)(a1 + 24) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_BYTE *)(a2 + 24) & 8) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B74DFA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 24) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74E054(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 24) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 24) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 24) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 24) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74E2B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_21B74E344(uint64_t result)
{
  *(_QWORD *)result = &off_24DF315A8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B74E35C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B74E380(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_24DF315A8;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 16) = v4;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(a1 + 28) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    if ((*(_BYTE *)(a2 + 28) & 8) == 0)
      return *(float *)&v4;
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B74E40C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74E4BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74E720(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_21B74E7B4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF315E0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_21B74E7CC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74E7F0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;

  *(_QWORD *)result = &off_24DF315E0;
  *(_DWORD *)(result + 36) = 0;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 36) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 36) & 4) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 36) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 28) = v7;
  v2 = *(_BYTE *)(a2 + 36);
  if ((v2 & 2) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    v9 = *(_BYTE *)(a2 + 32);
    *(_BYTE *)(result + 36) = v3 | 0x20;
    *(_BYTE *)(result + 32) = v9;
    return result;
  }
LABEL_13:
  v8 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 36) = v3;
  *(_DWORD *)(result + 16) = v8;
  if ((*(_BYTE *)(a2 + 36) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t sub_21B74E8B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "fsync");
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNum");
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x10) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74E9A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_56;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_55:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_56:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_62;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_61;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_60:
                    v2 = v31 + 1;
                    goto LABEL_61;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_60;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_61;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_61:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_62:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 32) = v28;
              goto LABEL_62;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_62;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B74ED38(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 36) & 0x20) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B74EE04(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31618;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_21B74EE1C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74EE40(uint64_t result, uint64_t a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)result = &off_24DF31618;
  *(_DWORD *)(result + 16) = 0;
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v3 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 16) = 2;
    *(_DWORD *)(result + 12) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 1;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 16) = v2;
    *(_DWORD *)(result + 8) = v4;
  }
  return result;
}

uint64_t sub_21B74EE90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74EEF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74F184(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 12));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B74F1DC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31650;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B74F1F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74F218(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF31650;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B74F268(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "inShower");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74F2D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74F4B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B74F50C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31688;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B74F524(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B74F548(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)result = &off_24DF31688;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_BYTE *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_BYTE *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B74F598(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hapticOn");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74F600(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B74F7E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B74F83C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF316C0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B74F854(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B74F878(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  float result;

  *(_QWORD *)a1 = &off_24DF316C0;
  *(_DWORD *)(a1 + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 44) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
  }
  else
  {
    v3 = 0;
    if ((*(_BYTE *)(a2 + 44) & 0x80) == 0)
      goto LABEL_6;
  }
  result = *(float *)(a2 + 40);
  v3 |= 0x80u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_BYTE *)(a2 + 44);
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(float *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(a1 + 44) = v3;
    *(float *)(a1 + 16) = result;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  result = *(float *)(a2 + 24);
  v3 |= 8u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_17;
  }
LABEL_16:
  result = *(float *)(a2 + 28);
  v3 |= 0x10u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0)
      return result;
LABEL_18:
    result = *(float *)(a2 + 36);
    *(_BYTE *)(a1 + 44) = v3 | 0x40;
    *(float *)(a1 + 36) = result;
    return result;
  }
LABEL_17:
  result = *(float *)(a2 + 32);
  v3 |= 0x20u;
  *(_BYTE *)(a1 + 44) = v3;
  *(float *)(a1 + 32) = result;
  if ((*(_BYTE *)(a2 + 44) & 0x40) != 0)
    goto LABEL_18;
  return result;
}

uint64_t sub_21B74F974(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "thetaAPDirRad", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 1) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B74FAA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_65;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_64:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_65;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_65:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_66;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 8u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_60:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_66;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_66:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B74FE94(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

double sub_21B74FF98(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF316F8;
  *(_QWORD *)(a1 + 168) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_21B74FFC8(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24DF316F8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_21B750038(PB::Base *a1)
{
  sub_21B74FFC8(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75005C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = &off_24DF316F8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if ((*(_WORD *)(a2 + 172) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(a2 + 136);
    *(_WORD *)(a1 + 172) = 16;
    *(_QWORD *)(a1 + 136) = v7;
    v6 = 272;
    if ((*(_WORD *)(a2 + 172) & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 256;
  if ((*(_WORD *)(a2 + 172) & 0x100) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 168);
    *(_WORD *)(a1 + 172) = v6;
    *(_DWORD *)(a1 + 168) = v8;
  }
LABEL_6:
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_21B7968C4(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  v9 = *(_WORD *)(a2 + 172);
  if ((v9 & 2) != 0)
  {
    v10 = *(_QWORD *)(a2 + 112);
    *(_WORD *)(a1 + 172) |= 2u;
    *(_QWORD *)(a1 + 112) = v10;
    v9 = *(_WORD *)(a2 + 172);
  }
  if ((v9 & 1) != 0)
  {
    v11 = *(_QWORD *)(a2 + 104);
    *(_WORD *)(a1 + 172) |= 1u;
    *(_QWORD *)(a1 + 104) = v11;
  }
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  }
  v12 = *(_WORD *)(a2 + 172);
  if ((v12 & 0x80) != 0)
  {
    v15 = *(_QWORD *)(a2 + 160);
    *(_WORD *)(a1 + 172) |= 0x80u;
    *(_QWORD *)(a1 + 160) = v15;
    v12 = *(_WORD *)(a2 + 172);
    if ((v12 & 0x20) == 0)
    {
LABEL_16:
      if ((v12 & 0x40) == 0)
        goto LABEL_17;
      goto LABEL_23;
    }
  }
  else if ((v12 & 0x20) == 0)
  {
    goto LABEL_16;
  }
  v16 = *(_QWORD *)(a2 + 144);
  *(_WORD *)(a1 + 172) |= 0x20u;
  *(_QWORD *)(a1 + 144) = v16;
  v12 = *(_WORD *)(a2 + 172);
  if ((v12 & 0x40) == 0)
  {
LABEL_17:
    if ((v12 & 8) == 0)
      goto LABEL_18;
LABEL_24:
    v18 = *(_QWORD *)(a2 + 128);
    *(_WORD *)(a1 + 172) |= 8u;
    *(_QWORD *)(a1 + 128) = v18;
    if ((*(_WORD *)(a2 + 172) & 4) == 0)
      return a1;
    goto LABEL_19;
  }
LABEL_23:
  v17 = *(_QWORD *)(a2 + 152);
  *(_WORD *)(a1 + 172) |= 0x40u;
  *(_QWORD *)(a1 + 152) = v17;
  v12 = *(_WORD *)(a2 + 172);
  if ((v12 & 8) != 0)
    goto LABEL_24;
LABEL_18:
  if ((v12 & 4) != 0)
  {
LABEL_19:
    v13 = *(_QWORD *)(a2 + 120);
    *(_WORD *)(a1 + 172) |= 4u;
    *(_QWORD *)(a1 + 120) = v13;
  }
  return a1;
}

uint64_t sub_21B750238(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  __int16 v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 172);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "covTraceAfterCorrection", *(double *)(a1 + 104));
    v5 = *(_WORD *)(a1 + 172);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "covTraceBeforeCorrection", *(double *)(a1 + 112));
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "dX", v8);
  }
  v9 = *(_WORD *)(a1 + 172);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 120));
    v9 = *(_WORD *)(a1 + 172);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "lidAngleDeg", *(double *)(a1 + 128));
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "measurementUpdateType");
LABEL_11:
  v10 = *(double **)(a1 + 32);
  v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "residual", v12);
  }
  v13 = *(double **)(a1 + 56);
  v14 = *(double **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "stateQfbAfterCorrection", v15);
  }
  v16 = *(double **)(a1 + 80);
  v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "stateQfbBeforeCorrection", v18);
  }
  v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
    v19 = *(_WORD *)(a1 + 172);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0)
        goto LABEL_20;
LABEL_28:
      PB::TextFormatter::format(this, "wAuxFaceNormMeanDps", *(double *)(a1 + 152));
      if ((*(_WORD *)(a1 + 172) & 0x80) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_21;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(this, "wAuxBudNormMeanDps", *(double *)(a1 + 144));
  v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x40) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v19 & 0x80) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "wSrcNormMeanDps", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B750440(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (void **)(a1 + 32);
    v147 = a1 + 48;
    v148 = a1 + 24;
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 80);
    v145 = a1 + 96;
    v146 = a1 + 72;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 172) |= 0x10u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_237;
        case 2u:
          *(_WORD *)(a1 + 172) |= 0x100u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_204;
              v29 += 7;
              v26 = v32;
              v18 = v30++ > 8;
            }
            while (!v18);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_204;
          }
          v97 = 0;
          v98 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v99 = v26 + 1;
              v100 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v99;
              v31 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v26 = v99;
                v18 = v98++ > 8;
                if (v18)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_204:
          *(_DWORD *)(a1 + 168) = v31;
          goto LABEL_238;
        case 3u:
          if (v24 != 2)
          {
            v102 = *(char **)(a1 + 88);
            v101 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v102 >= v101)
            {
              v110 = (char *)*v11;
              v111 = (v102 - (_BYTE *)*v11) >> 3;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61)
LABEL_248:
                sub_21B796A0C();
              v113 = v101 - (_QWORD)v110;
              if (v113 >> 2 > v112)
                v112 = v113 >> 2;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_21B796A20(v145, v114);
                v110 = *(char **)(a1 + 80);
                v102 = *(char **)(a1 + 88);
              }
              else
              {
                v115 = 0;
              }
              v134 = &v115[8 * v111];
              *(_QWORD *)v134 = 0;
              v103 = v134 + 8;
              while (v102 != v110)
              {
                v135 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v134;
              *(_QWORD *)(a1 + 88) = v103;
              *(_QWORD *)(a1 + 96) = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v102 = 0;
              v103 = v102 + 8;
            }
            *(_QWORD *)(a1 + 88) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          while (v34 < v35 && !*((_BYTE *)this + 24))
          {
            v37 = *(char **)(a1 + 88);
            v36 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v11;
              v40 = (v37 - (_BYTE *)*v11) >> 3;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
                goto LABEL_248;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 2 > v41)
                v41 = v42 >> 2;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_21B796A20(v145, v43);
                v39 = *(char **)(a1 + 80);
                v37 = *(char **)(a1 + 88);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[8 * v40];
              *(_QWORD *)v45 = 0;
              v38 = v45 + 8;
              while (v37 != v39)
              {
                v46 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v45 - 1) = v46;
                v45 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v45;
              *(_QWORD *)(a1 + 88) = v38;
              *(_QWORD *)(a1 + 96) = &v44[8 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_QWORD *)v37 = 0;
              v38 = v37 + 8;
            }
            *(_QWORD *)(a1 + 88) = v38;
            v47 = *((_QWORD *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v38 - 1) = *(_QWORD *)(*(_QWORD *)this + v47);
            v35 = *((_QWORD *)this + 2);
            v34 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v34;
          }
          goto LABEL_153;
        case 4u:
          if (v24 != 2)
          {
            v105 = *(char **)(a1 + 64);
            v104 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v105 >= v104)
            {
              v116 = (char *)*v10;
              v117 = (v105 - (_BYTE *)*v10) >> 3;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 61)
LABEL_249:
                sub_21B796A0C();
              v119 = v104 - (_QWORD)v116;
              if (v119 >> 2 > v118)
                v118 = v119 >> 2;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_21B796A20(v146, v120);
                v116 = *(char **)(a1 + 56);
                v105 = *(char **)(a1 + 64);
              }
              else
              {
                v121 = 0;
              }
              v136 = &v121[8 * v117];
              *(_QWORD *)v136 = 0;
              v103 = v136 + 8;
              while (v105 != v116)
              {
                v137 = *((_QWORD *)v105 - 1);
                v105 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v136;
              *(_QWORD *)(a1 + 64) = v103;
              *(_QWORD *)(a1 + 72) = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_QWORD *)v105 = 0;
              v103 = v105 + 8;
            }
            *(_QWORD *)(a1 + 64) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          while (v48 < v49 && !*((_BYTE *)this + 24))
          {
            v51 = *(char **)(a1 + 64);
            v50 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v51 >= v50)
            {
              v53 = (char *)*v10;
              v54 = (v51 - (_BYTE *)*v10) >> 3;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61)
                goto LABEL_249;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 2 > v55)
                v55 = v56 >> 2;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)sub_21B796A20(v146, v57);
                v53 = *(char **)(a1 + 56);
                v51 = *(char **)(a1 + 64);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[8 * v54];
              *(_QWORD *)v59 = 0;
              v52 = v59 + 8;
              while (v51 != v53)
              {
                v60 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *((_QWORD *)v59 - 1) = v60;
                v59 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v59;
              *(_QWORD *)(a1 + 64) = v52;
              *(_QWORD *)(a1 + 72) = &v58[8 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_QWORD *)v51 = 0;
              v52 = v51 + 8;
            }
            *(_QWORD *)(a1 + 64) = v52;
            v61 = *((_QWORD *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v52 - 1) = *(_QWORD *)(*(_QWORD *)this + v61);
            v49 = *((_QWORD *)this + 2);
            v48 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v48;
          }
          goto LABEL_153;
        case 5u:
          *(_WORD *)(a1 + 172) |= 2u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v62);
          goto LABEL_237;
        case 6u:
          *(_WORD *)(a1 + 172) |= 1u;
          v63 = *((_QWORD *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v63);
          goto LABEL_237;
        case 7u:
          if (v24 != 2)
          {
            v107 = *(char **)(a1 + 40);
            v106 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v107 >= v106)
            {
              v122 = (char *)*v9;
              v123 = (v107 - (_BYTE *)*v9) >> 3;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61)
LABEL_250:
                sub_21B796A0C();
              v125 = v106 - (_QWORD)v122;
              if (v125 >> 2 > v124)
                v124 = v125 >> 2;
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v124;
              if (v126)
              {
                v127 = (char *)sub_21B796A20(v147, v126);
                v122 = *(char **)(a1 + 32);
                v107 = *(char **)(a1 + 40);
              }
              else
              {
                v127 = 0;
              }
              v138 = &v127[8 * v123];
              *(_QWORD *)v138 = 0;
              v103 = v138 + 8;
              while (v107 != v122)
              {
                v139 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v138;
              *(_QWORD *)(a1 + 40) = v103;
              *(_QWORD *)(a1 + 48) = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v107 = 0;
              v103 = v107 + 8;
            }
            *(_QWORD *)(a1 + 40) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v64 = *((_QWORD *)this + 1);
          v65 = *((_QWORD *)this + 2);
          while (v64 < v65 && !*((_BYTE *)this + 24))
          {
            v67 = *(char **)(a1 + 40);
            v66 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v67 >= v66)
            {
              v69 = (char *)*v9;
              v70 = (v67 - (_BYTE *)*v9) >> 3;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_250;
              v72 = v66 - (_QWORD)v69;
              if (v72 >> 2 > v71)
                v71 = v72 >> 2;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_21B796A20(v147, v73);
                v69 = *(char **)(a1 + 32);
                v67 = *(char **)(a1 + 40);
              }
              else
              {
                v74 = 0;
              }
              v75 = &v74[8 * v70];
              *(_QWORD *)v75 = 0;
              v68 = v75 + 8;
              while (v67 != v69)
              {
                v76 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v75;
              *(_QWORD *)(a1 + 40) = v68;
              *(_QWORD *)(a1 + 48) = &v74[8 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *(_QWORD *)(a1 + 40) = v68;
            v77 = *((_QWORD *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v68 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
            v65 = *((_QWORD *)this + 2);
            v64 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v64;
          }
          goto LABEL_153;
        case 8u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v78 = *((_QWORD *)this + 1);
            v79 = *((_QWORD *)this + 2);
            while (v78 < v79 && !*((_BYTE *)this + 24))
            {
              v81 = *(char **)(a1 + 16);
              v80 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v81 >= v80)
              {
                v83 = (char *)*v8;
                v84 = (v81 - (_BYTE *)*v8) >> 3;
                v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61)
                  goto LABEL_251;
                v86 = v80 - (_QWORD)v83;
                if (v86 >> 2 > v85)
                  v85 = v86 >> 2;
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v87 = v85;
                if (v87)
                {
                  v88 = (char *)sub_21B796A20(v148, v87);
                  v83 = *(char **)(a1 + 8);
                  v81 = *(char **)(a1 + 16);
                }
                else
                {
                  v88 = 0;
                }
                v89 = &v88[8 * v84];
                *(_QWORD *)v89 = 0;
                v82 = v89 + 8;
                while (v81 != v83)
                {
                  v90 = *((_QWORD *)v81 - 1);
                  v81 -= 8;
                  *((_QWORD *)v89 - 1) = v90;
                  v89 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v89;
                *(_QWORD *)(a1 + 16) = v82;
                *(_QWORD *)(a1 + 24) = &v88[8 * v87];
                if (v83)
                  operator delete(v83);
              }
              else
              {
                *(_QWORD *)v81 = 0;
                v82 = v81 + 8;
              }
              *(_QWORD *)(a1 + 16) = v82;
              v91 = *((_QWORD *)this + 1);
              if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)this + 2))
              {
LABEL_152:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v82 - 1) = *(_QWORD *)(*(_QWORD *)this + v91);
              v79 = *((_QWORD *)this + 2);
              v78 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v78;
            }
LABEL_153:
            PB::Reader::recallMark();
          }
          else
          {
            v109 = *(char **)(a1 + 16);
            v108 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v109 >= v108)
            {
              v128 = (char *)*v8;
              v129 = (v109 - (_BYTE *)*v8) >> 3;
              v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61)
LABEL_251:
                sub_21B796A0C();
              v131 = v108 - (_QWORD)v128;
              if (v131 >> 2 > v130)
                v130 = v131 >> 2;
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v130;
              if (v132)
              {
                v133 = (char *)sub_21B796A20(v148, v132);
                v128 = *(char **)(a1 + 8);
                v109 = *(char **)(a1 + 16);
              }
              else
              {
                v133 = 0;
              }
              v140 = &v133[8 * v129];
              *(_QWORD *)v140 = 0;
              v103 = v140 + 8;
              while (v109 != v128)
              {
                v141 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v140 - 1) = v141;
                v140 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v140;
              *(_QWORD *)(a1 + 16) = v103;
              *(_QWORD *)(a1 + 24) = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v103 = v109 + 8;
            }
            *(_QWORD *)(a1 + 16) = v103;
LABEL_233:
            v142 = *((_QWORD *)this + 1);
            if (v142 <= 0xFFFFFFFFFFFFFFF7 && v142 + 8 <= *((_QWORD *)this + 2))
            {
              *(v103 - 1) = *(_QWORD *)(*(_QWORD *)this + v142);
LABEL_237:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_235:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_238:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 9u:
          *(_WORD *)(a1 + 172) |= 0x80u;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v92);
          goto LABEL_237;
        case 0xAu:
          *(_WORD *)(a1 + 172) |= 0x20u;
          v93 = *((_QWORD *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v93);
          goto LABEL_237;
        case 0xBu:
          *(_WORD *)(a1 + 172) |= 0x40u;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v94);
          goto LABEL_237;
        case 0xCu:
          *(_WORD *)(a1 + 172) |= 8u;
          v95 = *((_QWORD *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v95);
          goto LABEL_237;
        case 0xDu:
          *(_WORD *)(a1 + 172) |= 4u;
          v96 = *((_QWORD *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v96);
          goto LABEL_237;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_238;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B750FAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  __int16 v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  __int16 v18;

  v3 = result;
  v4 = *(_WORD *)(result + 172);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 136));
    v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(double **)(v3 + 80);
  v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(double **)(v3 + 56);
  v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 112));
    v11 = *(_WORD *)(v3 + 172);
  }
  if ((v11 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 104));
  v12 = *(double **)(v3 + 32);
  v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    v14 = *v12++;
    result = PB::Writer::write(this, v14);
  }
  v15 = *(double **)(v3 + 8);
  v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    v17 = *v15++;
    result = PB::Writer::write(this, v17);
  }
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 160));
    v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0)
        goto LABEL_24;
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0)
      goto LABEL_25;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) == 0)
  {
LABEL_25:
    if ((v18 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 120));
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  if ((*(_WORD *)(v3 + 172) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 120));
  return result;
}

double sub_21B751148(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31730;
  *(_DWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B75116C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF31730;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B7511BC(PB::Base *a1)
{
  sub_21B75116C(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7511E0(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24DF31730;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_BYTE *)(a2 + 80) & 4) != 0)
  {
    v5 = *(_QWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 80) = 4;
    *(_QWORD *)(a1 + 72) = v5;
  }
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  }
  v6 = *(_BYTE *)(a2 + 80);
  if ((v6 & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 80) |= 2u;
    *(_QWORD *)(a1 + 64) = v7;
    v6 = *(_BYTE *)(a2 + 80);
  }
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 80) |= 1u;
    *(_QWORD *)(a1 + 56) = v8;
  }
  return a1;
}

uint64_t sub_21B7512B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 56));
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "stateCov", v7);
  }
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
    PB::TextFormatter::format(this, "stateCovTrace", *(double *)(a1 + 64));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "stateQfb", v10);
  }
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7513A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 80) |= 4u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_120;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_122;
        case 2u:
          if (v24 != 2)
          {
            v57 = *(char **)(a1 + 40);
            v56 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v57 >= v56)
            {
              v61 = (char *)*v10;
              v62 = (v57 - (_BYTE *)*v10) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
LABEL_131:
                sub_21B796A0C();
              v64 = v56 - (_QWORD)v61;
              if (v64 >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_21B796A20(v11, v65);
                v61 = *(char **)(a1 + 32);
                v57 = *(char **)(a1 + 40);
              }
              else
              {
                v66 = 0;
              }
              v73 = &v66[8 * v62];
              *(_QWORD *)v73 = 0;
              v58 = v73 + 8;
              while (v57 != v61)
              {
                v74 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v73;
              *(_QWORD *)(a1 + 40) = v58;
              *(_QWORD *)(a1 + 48) = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v57 = 0;
              v58 = v57 + 8;
            }
            *(_QWORD *)(a1 + 40) = v58;
            goto LABEL_118;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 40);
            v28 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_131;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_21B796A20(v11, v35);
                v31 = *(char **)(a1 + 32);
                v29 = *(char **)(a1 + 40);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v37;
              *(_QWORD *)(a1 + 40) = v30;
              *(_QWORD *)(a1 + 48) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 40) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
              goto LABEL_86;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_87;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v40 = *((_QWORD *)this + 1);
            v41 = *((_QWORD *)this + 2);
            while (v40 < v41 && !*((_BYTE *)this + 24))
            {
              v43 = *(char **)(a1 + 16);
              v42 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v8;
                v46 = (v43 - (_BYTE *)*v8) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_132;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_21B796A20(v9, v49);
                  v45 = *(char **)(a1 + 8);
                  v43 = *(char **)(a1 + 16);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v51;
                *(_QWORD *)(a1 + 16) = v44;
                *(_QWORD *)(a1 + 24) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *(_QWORD *)(a1 + 16) = v44;
              v53 = *((_QWORD *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
              {
LABEL_86:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
              v41 = *((_QWORD *)this + 2);
              v40 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v40;
            }
LABEL_87:
            PB::Reader::recallMark();
          }
          else
          {
            v60 = *(char **)(a1 + 16);
            v59 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v60 >= v59)
            {
              v67 = (char *)*v8;
              v68 = (v60 - (_BYTE *)*v8) >> 3;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61)
LABEL_132:
                sub_21B796A0C();
              v70 = v59 - (_QWORD)v67;
              if (v70 >> 2 > v69)
                v69 = v70 >> 2;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71)
              {
                v72 = (char *)sub_21B796A20(v9, v71);
                v67 = *(char **)(a1 + 8);
                v60 = *(char **)(a1 + 16);
              }
              else
              {
                v72 = 0;
              }
              v75 = &v72[8 * v68];
              *(_QWORD *)v75 = 0;
              v58 = v75 + 8;
              while (v60 != v67)
              {
                v76 = *((_QWORD *)v60 - 1);
                v60 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v75;
              *(_QWORD *)(a1 + 16) = v58;
              *(_QWORD *)(a1 + 24) = &v72[8 * v71];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *(_QWORD *)v60 = 0;
              v58 = v60 + 8;
            }
            *(_QWORD *)(a1 + 16) = v58;
LABEL_118:
            v77 = *((_QWORD *)this + 1);
            if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *((_QWORD *)this + 2))
            {
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
LABEL_122:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_120:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_123:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 80) |= 2u;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_120;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v54);
          goto LABEL_122;
        case 5u:
          *(_BYTE *)(a1 + 80) |= 1u;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
            goto LABEL_120;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v55);
          goto LABEL_122;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_123;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75199C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 80) & 4) != 0)
    result = PB::Writer::write(this, *(double *)(result + 72));
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 80);
  }
  if ((v10 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56));
  return result;
}

_QWORD *sub_21B751A58(_QWORD *result)
{
  *result = &off_24DF31768;
  result[1] = 0;
  return result;
}

void sub_21B751A6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B751A90(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_24DF31768;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B751AB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "trackingBehavior");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B751B04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B751D38(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B751D58(_QWORD *result)
{
  *result = &off_24DF317A0;
  result[1] = 0;
  return result;
}

void sub_21B751D6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B751D90(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)result = &off_24DF317A0;
  *(_QWORD *)(result + 8) = 0;
  if ((*(_BYTE *)(a2 + 12) & 1) != 0)
  {
    v2 = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(result + 12) = 1;
    *(_DWORD *)(result + 8) = v2;
  }
  return result;
}

uint64_t sub_21B751DB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "clientMode");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B751E04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B752038(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B752058(uint64_t result)
{
  *(_QWORD *)result = &off_24DF317D8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_21B752070(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B752094(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  double result;

  *(_QWORD *)a1 = &off_24DF317D8;
  *(_DWORD *)(a1 + 32) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 32) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_BYTE *)(a1 + 32) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    result = *(double *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = v3 | 2;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_21B752104(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "bpm");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B752194(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 32) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                v25 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                v25 = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)this + 24))
              v25 = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                v25 = 0;
                break;
              }
            }
          }
LABEL_52:
          *(_QWORD *)(a1 + 8) = v25;
        }
        else
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
        }
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 32) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_21B752460(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_21B7524D8(_QWORD *result)
{
  *result = &off_24DF31810;
  result[1] = 0;
  return result;
}

void sub_21B7524E8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31810;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B752528(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31810;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B75257C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF31810;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B799F04(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B7525F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B752648(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B799E24(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B752810(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B75282C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31848;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_21B752844(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B752868(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)a1 = &off_24DF31848;
  *(_DWORD *)(a1 + 128) = 0;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_DWORD *)(a1 + 128) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 104);
    v3 |= 0x100000u;
    *(_DWORD *)(a1 + 128) = v3;
    *(_DWORD *)(a1 + 104) = v4;
    v2 = *(_DWORD *)(a2 + 128);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 108);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 128) = v3;
    *(_DWORD *)(a1 + 108) = v4;
    v2 = *(_DWORD *)(a2 + 128);
    if ((v2 & 0x400000) == 0)
    {
LABEL_8:
      if ((v2 & 0x80000) == 0)
        goto LABEL_9;
      goto LABEL_33;
    }
  }
  else if ((v2 & 0x400000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80000) == 0)
  {
LABEL_9:
    if ((v2 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10000) == 0)
  {
LABEL_10:
    if ((v2 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x40000) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x8000) == 0)
  {
LABEL_13:
    if ((v2 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 8) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 8) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v4 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 2) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v5 = *(_DWORD *)(a2 + 64);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 64) = v5;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 2) == 0)
  {
LABEL_19:
    if ((v2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v4 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x80) == 0)
  {
LABEL_20:
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x100) == 0)
  {
LABEL_21:
    if ((v2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x200) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 120) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v2 & 4) == 0)
      goto LABEL_27;
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 4) == 0)
  {
LABEL_27:
    if ((v2 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_52;
  }
LABEL_51:
  v4 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x10) == 0)
  {
LABEL_28:
    if ((v2 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  v2 = *(_DWORD *)(a2 + 128);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0)
      return *(float *)&v4;
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 128) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  if ((*(_DWORD *)(a2 + 128) & 0x40) == 0)
    return *(float *)&v4;
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 128) = v3 | 0x40;
  *(_DWORD *)(a1 + 48) = v4;
  return *(float *)&v4;
}

uint64_t sub_21B752B5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "accelUnfilteredX", *(float *)(a1 + 40));
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelUnfilteredY", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "accelUnfilteredZ", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "accelX", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "accelY", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "flags");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "gravityX", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "gravityY", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gyroBiasErrorEstimate", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "quaternionPredictedW", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "quaternionPredictedX", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "quaternionPredictedY", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "quaternionPredictedZ", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 124));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "timestampAccelUnfiltered", *(double *)(a1 + 24));
    if ((*(_DWORD *)(a1 + 128) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "timestampAccel", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 8) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "timestampPrediction", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B752ECC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_125:
                    v2 = v29 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_125;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_126;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x17u:
              *(_DWORD *)(a1 + 128) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_116;
            case 0x18u:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x19u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x1Au:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_115:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_116:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7536B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 128);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_26:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48));
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 128) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48));
  return result;
}

uint64_t sub_21B7539B4(uint64_t result)
{
  *(_QWORD *)result = off_24DF31880;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_21B7539CC(void **a1)
{
  void **v2;

  *a1 = off_24DF31880;
  v2 = a1 + 1;
  sub_21B7967B4(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_21B753A14(void **a1)
{
  void **v3;

  *a1 = off_24DF31880;
  v3 = a1 + 1;
  sub_21B7967B4(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x220766390]();
}

uint64_t sub_21B753A70(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;

  *(_QWORD *)a1 = off_24DF31880;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  v5 = *(uint64_t **)(a2 + 8);
  v6 = *(uint64_t **)(a2 + 16);
  while (v5 != v6)
    sub_21B753B00(v4, *v5++);
  if ((*(_BYTE *)(a2 + 36) & 1) != 0)
  {
    v7 = *(_DWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 36) |= 1u;
    *(_DWORD *)(a1 + 32) = v7;
  }
  return a1;
}

uint64_t sub_21B753B00(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B7BE9F0(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B753C34(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B753C54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    PB::TextFormatter::format(this, "lastSampleId");
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "slowOptical");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B753CDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 36) |= 1u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v31 = 0;
          v32 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_46;
            }
            v33 = v22 + 1;
            v34 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v33;
            v27 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v22 = v33;
            v15 = v32++ > 8;
            if (v15)
            {
LABEL_42:
              LODWORD(v27) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v15 = v26++ > 8;
            if (v15)
              goto LABEL_42;
          }
        }
LABEL_46:
        *(_DWORD *)(a1 + 32) = v27;
      }
      else if ((v12 >> 3) == 1)
      {
        sub_21B753F74(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B753F74(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_21B7BE9B4(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B7540A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7540BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 8);
  v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B754128(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF318B8;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_21B754150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)a1 = &off_24DF318B8;
  v4 = (void **)(a1 + 24);
  sub_21B7967B4(&v4);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_21B7541CC(uint64_t a1)
{
  sub_21B754150(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7541F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  char v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  *(_QWORD *)a1 = &off_24DF318B8;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = (uint64_t **)(a1 + 24);
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if ((*(_BYTE *)(a2 + 60) & 1) == 0)
  {
    v6 = 2;
    if ((*(_BYTE *)(a2 + 60) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 60) = 1;
  *(_DWORD *)(a1 + 48) = v7;
  v6 = 3;
  if ((*(_BYTE *)(a2 + 60) & 2) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 60) = v6;
    *(_DWORD *)(a1 + 52) = v8;
  }
LABEL_6:
  v9 = *(uint64_t **)(a2 + 24);
  v10 = *(uint64_t **)(a2 + 32);
  while (v9 != v10)
    sub_21B753B00(v5, *v9++);
  if (*(_QWORD *)(a2 + 16))
  {
    v11 = operator new();
    v12 = sub_21B7BE9F0(v11, *(_QWORD *)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;
    if (v13)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v13 + 8))(v13, v12);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v15 = operator new();
    v16 = sub_21B7BE9F0(v15, *(_QWORD *)(a2 + 8));
    v17 = *v4;
    *v4 = v18;
    if (v17)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v17 + 8))(v17, v16);
  }
  v19 = *(_BYTE *)(a2 + 60);
  if ((v19 & 4) != 0)
  {
    v20 = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 56) = v20;
    v19 = *(_BYTE *)(a2 + 60);
  }
  if ((v19 & 8) != 0)
  {
    v21 = *(_BYTE *)(a2 + 57);
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 57) = v21;
  }
  return a1;
}

uint64_t sub_21B754378(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "conchaMinAccepted");
    v5 = *(_BYTE *)(a1 + 60);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "location");
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "newOpenLid");
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "oldOpenLid");
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(uint64_t **)(a1 + 32);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "optical");
  }
  v11 = *(_BYTE *)(a1 + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v11 = *(_BYTE *)(a1 + 60);
  }
  if ((v11 & 8) != 0)
    PB::TextFormatter::format(this, "tragusMinAccepted");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75449C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)(a1 + 24);
  while (2)
  {
    v9 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v16 = 0;
      v17 = 0;
      v12 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v18 = v2 + 1;
        v19 = *(_BYTE *)(v9 + v2);
        *((_QWORD *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0)
          goto LABEL_21;
        v16 += 7;
        v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          v12 = 0;
          goto LABEL_21;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_21:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 60) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v49 = 0;
          v50 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          do
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_72;
            }
            v51 = v21 + 1;
            v52 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v51;
            v26 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
              goto LABEL_72;
            }
            v49 += 7;
            v21 = v51;
            v15 = v50++ > 8;
          }
          while (!v15);
LABEL_57:
          LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v15 = v25++ > 8;
            if (v15)
              goto LABEL_57;
          }
        }
LABEL_72:
        *(_DWORD *)(a1 + 48) = v26;
        goto LABEL_77;
      case 2u:
        *(_BYTE *)(a1 + 60) |= 2u;
        v30 = *((_QWORD *)this + 1);
        v31 = *((_QWORD *)this + 2);
        v32 = *(_QWORD *)this;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)this + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_76;
            v33 += 7;
            v30 = v36;
            v15 = v34++ > 8;
          }
          while (!v15);
LABEL_64:
          LODWORD(v35) = 0;
          goto LABEL_76;
        }
        v53 = 0;
        v54 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v55 = v30 + 1;
            v56 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)this + 1) = v55;
            v35 |= (unint64_t)(v56 & 0x7F) << v53;
            if (v56 < 0)
            {
              v53 += 7;
              v30 = v55;
              v15 = v54++ > 8;
              if (v15)
                goto LABEL_64;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v35) = 0;
          }
          break;
        }
LABEL_76:
        *(_DWORD *)(a1 + 52) = v35;
        goto LABEL_77;
      case 3u:
        sub_21B753F74(v8);
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
        goto LABEL_44;
      case 4u:
        v38 = operator new();
        sub_21B7BE9B4(v38);
        v39 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v38 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_44;
      case 5u:
        v38 = operator new();
        sub_21B7BE9B4(v38);
        v40 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v38;
        if (v40)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          v38 = *(_QWORD *)(a1 + 8);
        }
LABEL_44:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v38 + 16))(v38, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_77:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 6u:
        *(_BYTE *)(a1 + 60) |= 4u;
        v41 = *((_QWORD *)this + 1);
        if (v41 >= *((_QWORD *)this + 2))
        {
          v44 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v42 = v41 + 1;
          v43 = *(unsigned __int8 *)(*(_QWORD *)this + v41);
          *((_QWORD *)this + 1) = v42;
          v44 = v43 != 0;
        }
        *(_BYTE *)(a1 + 56) = v44;
        goto LABEL_77;
      case 7u:
        *(_BYTE *)(a1 + 60) |= 8u;
        v45 = *((_QWORD *)this + 1);
        if (v45 >= *((_QWORD *)this + 2))
        {
          v48 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
          *((_QWORD *)this + 1) = v46;
          v48 = v47 != 0;
        }
        *(_BYTE *)(a1 + 57) = v48;
        goto LABEL_77;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_77;
    }
  }
}

uint64_t sub_21B754934(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  char v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 60);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 60);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base ***)(v3 + 24);
  v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeSubmessage(this, v7);
  }
  v8 = *(const PB::Base **)(v3 + 16);
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  v9 = *(const PB::Base **)(v3 + 8);
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9);
  v10 = *(_BYTE *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    result = PB::Writer::write(this);
    v10 = *(_BYTE *)(v3 + 60);
  }
  if ((v10 & 8) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B754A10(uint64_t result)
{
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)result = &off_24DF318F0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_21B754A28(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24DF318F0;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

void sub_21B754AA0(PB::Base *a1)
{
  sub_21B754A28(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B754AC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  int v23;
  int v24;

  *(_QWORD *)a1 = &off_24DF318F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 56) & 1) == 0)
  {
    v5 = 8;
    if ((*(_BYTE *)(a2 + 56) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 32) = v6;
  v5 = 9;
  if ((*(_BYTE *)(a2 + 56) & 8) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = v5;
    *(_DWORD *)(a1 + 48) = v7;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
  {
    v8 = operator new();
    v9 = sub_21B7BE9F0(v8, *(_QWORD *)(a2 + 24));
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    if (v10)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 8))(v10, v9);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v12 = operator new();
    v13 = sub_21B7BE9F0(v12, *(_QWORD *)(a2 + 8));
    v14 = *v4;
    *v4 = v15;
    if (v14)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 8))(v14, v13);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v16 = operator new();
    v17 = sub_21B7BE9F0(v16, *(_QWORD *)(a2 + 16));
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19;
    if (v18)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v18 + 8))(v18, v17);
  }
  v20 = *(_BYTE *)(a2 + 56);
  if ((v20 & 2) == 0)
  {
    if ((*(_BYTE *)(a2 + 56) & 0x10) == 0)
      goto LABEL_17;
LABEL_21:
    v24 = *(_DWORD *)(a2 + 52);
    *(_BYTE *)(a1 + 56) |= 0x10u;
    *(_DWORD *)(a1 + 52) = v24;
    if ((*(_BYTE *)(a2 + 56) & 4) == 0)
      return a1;
    goto LABEL_18;
  }
  v23 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) |= 2u;
  *(_DWORD *)(a1 + 40) = v23;
  v20 = *(_BYTE *)(a2 + 56);
  if ((v20 & 0x10) != 0)
    goto LABEL_21;
LABEL_17:
  if ((v20 & 4) != 0)
  {
LABEL_18:
    v21 = *(_DWORD *)(a2 + 44);
    *(_BYTE *)(a1 + 56) |= 4u;
    *(_DWORD *)(a1 + 44) = v21;
  }
  return a1;
}

uint64_t sub_21B754C7C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "baseline");
  v6 = *(_BYTE *)(a1 + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaOpenResponse", *(float *)(a1 + 40));
    v6 = *(_BYTE *)(a1 + 56);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(this, "filter", *(float *)(a1 + 44));
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "lastBaseline");
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
    PB::TextFormatter::format(this, "location");
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "minimum");
  v9 = *(_BYTE *)(a1 + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "rho", *(float *)(a1 + 52));
    v9 = *(_BYTE *)(a1 + 56);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B754D98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 56) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_51;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v20);
        v21 = *((_QWORD *)this + 1) + 8;
        goto LABEL_61;
      case 2u:
        *(_BYTE *)(a1 + 56) |= 8u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_65;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_58:
          LODWORD(v28) = 0;
          goto LABEL_65;
        }
        v38 = 0;
        v39 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v40 = v23 + 1;
            v41 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v40;
            v28 |= (unint64_t)(v41 & 0x7F) << v38;
            if (v41 < 0)
            {
              v38 += 7;
              v23 = v40;
              v14 = v39++ > 8;
              if (v14)
                goto LABEL_58;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_65:
        *(_DWORD *)(a1 + 48) = v28;
        goto LABEL_66;
      case 3u:
        v31 = operator new();
        sub_21B7BE9B4(v31);
        v32 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v31;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v31 = *(_QWORD *)(a1 + 24);
        }
        goto LABEL_40;
      case 4u:
        v31 = operator new();
        sub_21B7BE9B4(v31);
        v33 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v31;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v31 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_40;
      case 5u:
        v31 = operator new();
        sub_21B7BE9B4(v31);
        v34 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v31;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v31 = *(_QWORD *)(a1 + 16);
        }
LABEL_40:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v31 + 16))(v31, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_66:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 6u:
        *(_BYTE *)(a1 + 56) |= 2u;
        v35 = *((_QWORD *)this + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
          goto LABEL_51;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v35);
        goto LABEL_60;
      case 7u:
        *(_BYTE *)(a1 + 56) |= 0x10u;
        v36 = *((_QWORD *)this + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
          goto LABEL_51;
        *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v36);
        goto LABEL_60;
      case 8u:
        *(_BYTE *)(a1 + 56) |= 4u;
        v37 = *((_QWORD *)this + 1);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v37);
LABEL_60:
          v21 = *((_QWORD *)this + 1) + 4;
LABEL_61:
          *((_QWORD *)this + 1) = v21;
        }
        else
        {
LABEL_51:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_66;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

uint64_t sub_21B7551E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  char v8;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 56);
  }
  if ((v4 & 8) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7);
  v8 = *(_BYTE *)(v3 + 56);
  if ((v8 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 40));
    v8 = *(_BYTE *)(v3 + 56);
    if ((v8 & 0x10) == 0)
    {
LABEL_13:
      if ((v8 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 44));
    }
  }
  else if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  if ((*(_BYTE *)(v3 + 56) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44));
  return result;
}

uint64_t sub_21B7552CC(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24DF31928;
  return result;
}

void sub_21B7552E4(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24DF31928;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_21B755344(PB::Base *a1)
{
  sub_21B7552E4(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B755368(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  *(_QWORD *)a1 = &off_24DF31928;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(_WORD *)(a2 + 48);
  if ((v5 & 1) == 0)
  {
    v6 = 2;
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 24) = v7;
  v6 = 3;
  if ((*(_WORD *)(a2 + 48) & 2) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 32);
    *(_WORD *)(a1 + 48) = v6;
    *(_DWORD *)(a1 + 32) = v8;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 8))
  {
    v9 = operator new();
    v10 = sub_21B7BE9F0(v9, *(_QWORD *)(a2 + 8));
    v11 = *v4;
    *v4 = v12;
    if (v11)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v11 + 8))(v11, v10);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = operator new();
    v14 = sub_21B7BE9F0(v13, *(_QWORD *)(a2 + 16));
    v15 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16;
    if (v15)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v15 + 8))(v15, v14);
  }
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 0x80) != 0)
  {
    v20 = *(_BYTE *)(a2 + 41);
    *(_WORD *)(a1 + 48) |= 0x80u;
    *(_BYTE *)(a1 + 41) = v20;
    v17 = *(_WORD *)(a2 + 48);
    if ((v17 & 0x20) == 0)
    {
LABEL_14:
      if ((v17 & 4) == 0)
        goto LABEL_15;
      goto LABEL_25;
    }
  }
  else if ((v17 & 0x20) == 0)
  {
    goto LABEL_14;
  }
  v21 = *(_BYTE *)(a2 + 39);
  *(_WORD *)(a1 + 48) |= 0x20u;
  *(_BYTE *)(a1 + 39) = v21;
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 4) == 0)
  {
LABEL_15:
    if ((v17 & 8) == 0)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_25:
  v22 = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 48) |= 4u;
  *(_BYTE *)(a1 + 36) = v22;
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 8) == 0)
  {
LABEL_16:
    if ((v17 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  v23 = *(_BYTE *)(a2 + 37);
  *(_WORD *)(a1 + 48) |= 8u;
  *(_BYTE *)(a1 + 37) = v23;
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 0x40) == 0)
  {
LABEL_17:
    if ((v17 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  v24 = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 48) |= 0x40u;
  *(_BYTE *)(a1 + 40) = v24;
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 0x200) == 0)
  {
LABEL_18:
    if ((v17 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  v25 = *(_BYTE *)(a2 + 43);
  *(_WORD *)(a1 + 48) |= 0x200u;
  *(_BYTE *)(a1 + 43) = v25;
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 0x100) == 0)
  {
LABEL_19:
    if ((v17 & 0x10) == 0)
      goto LABEL_20;
LABEL_30:
    v27 = *(_BYTE *)(a2 + 38);
    *(_WORD *)(a1 + 48) |= 0x10u;
    *(_BYTE *)(a1 + 38) = v27;
    if ((*(_WORD *)(a2 + 48) & 0x400) == 0)
      return a1;
    goto LABEL_21;
  }
LABEL_29:
  v26 = *(_BYTE *)(a2 + 42);
  *(_WORD *)(a1 + 48) |= 0x100u;
  *(_BYTE *)(a1 + 42) = v26;
  v17 = *(_WORD *)(a2 + 48);
  if ((v17 & 0x10) != 0)
    goto LABEL_30;
LABEL_20:
  if ((v17 & 0x400) != 0)
  {
LABEL_21:
    v18 = *(_BYTE *)(a2 + 44);
    *(_WORD *)(a1 + 48) |= 0x400u;
    *(_BYTE *)(a1 + 44) = v18;
  }
  return a1;
}

uint64_t sub_21B75559C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "above");
    v5 = *(_WORD *)(a1 + 48);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(this, "below");
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "current");
  v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v7 = *(_WORD *)(a1 + 48);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_23;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "moving");
  v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "partialin");
  if ((*(_WORD *)(a1 + 48) & 0x40) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "stable");
LABEL_12:
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "threshold");
  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    v9 = *(_WORD *)(a1 + 48);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "upright");
  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
LABEL_28:
    PB::TextFormatter::format(this, "vertical");
    if ((*(_WORD *)(a1 + 48) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_27:
  PB::TextFormatter::format(this, "upsidedown");
  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x200) != 0)
    goto LABEL_28;
LABEL_18:
  if ((v9 & 0x400) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "walking");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B755764(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_WORD *)(a1 + 48) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_89;
      case 2u:
        *(_WORD *)(a1 + 48) |= 2u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_88;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_65:
          LODWORD(v27) = 0;
          goto LABEL_88;
        }
        v69 = 0;
        v70 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v71 = v22 + 1;
            v72 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v71;
            v27 |= (unint64_t)(v72 & 0x7F) << v69;
            if (v72 < 0)
            {
              v69 += 7;
              v22 = v71;
              v14 = v70++ > 8;
              if (v14)
                goto LABEL_65;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_88:
        *(_DWORD *)(a1 + 32) = v27;
        goto LABEL_89;
      case 3u:
        v30 = operator new();
        sub_21B7BE9B4(v30);
        v31 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_38;
      case 4u:
        v30 = operator new();
        sub_21B7BE9B4(v30);
        v32 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v30;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v30 = *(_QWORD *)(a1 + 16);
        }
LABEL_38:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_89:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 5u:
        *(_WORD *)(a1 + 48) |= 0x80u;
        v33 = *((_QWORD *)this + 1);
        if (v33 >= *((_QWORD *)this + 2))
        {
          v36 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v34 = v33 + 1;
          v35 = *(unsigned __int8 *)(*(_QWORD *)this + v33);
          *((_QWORD *)this + 1) = v34;
          v36 = v35 != 0;
        }
        *(_BYTE *)(a1 + 41) = v36;
        goto LABEL_89;
      case 6u:
        *(_WORD *)(a1 + 48) |= 0x20u;
        v37 = *((_QWORD *)this + 1);
        if (v37 >= *((_QWORD *)this + 2))
        {
          v40 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v38 = v37 + 1;
          v39 = *(unsigned __int8 *)(*(_QWORD *)this + v37);
          *((_QWORD *)this + 1) = v38;
          v40 = v39 != 0;
        }
        *(_BYTE *)(a1 + 39) = v40;
        goto LABEL_89;
      case 7u:
        *(_WORD *)(a1 + 48) |= 4u;
        v41 = *((_QWORD *)this + 1);
        if (v41 >= *((_QWORD *)this + 2))
        {
          v44 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v42 = v41 + 1;
          v43 = *(unsigned __int8 *)(*(_QWORD *)this + v41);
          *((_QWORD *)this + 1) = v42;
          v44 = v43 != 0;
        }
        *(_BYTE *)(a1 + 36) = v44;
        goto LABEL_89;
      case 8u:
        *(_WORD *)(a1 + 48) |= 8u;
        v45 = *((_QWORD *)this + 1);
        if (v45 >= *((_QWORD *)this + 2))
        {
          v48 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
          *((_QWORD *)this + 1) = v46;
          v48 = v47 != 0;
        }
        *(_BYTE *)(a1 + 37) = v48;
        goto LABEL_89;
      case 9u:
        *(_WORD *)(a1 + 48) |= 0x40u;
        v49 = *((_QWORD *)this + 1);
        if (v49 >= *((_QWORD *)this + 2))
        {
          v52 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v50 = v49 + 1;
          v51 = *(unsigned __int8 *)(*(_QWORD *)this + v49);
          *((_QWORD *)this + 1) = v50;
          v52 = v51 != 0;
        }
        *(_BYTE *)(a1 + 40) = v52;
        goto LABEL_89;
      case 0xAu:
        *(_WORD *)(a1 + 48) |= 0x200u;
        v53 = *((_QWORD *)this + 1);
        if (v53 >= *((_QWORD *)this + 2))
        {
          v56 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v54 = v53 + 1;
          v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
          *((_QWORD *)this + 1) = v54;
          v56 = v55 != 0;
        }
        *(_BYTE *)(a1 + 43) = v56;
        goto LABEL_89;
      case 0xBu:
        *(_WORD *)(a1 + 48) |= 0x100u;
        v57 = *((_QWORD *)this + 1);
        if (v57 >= *((_QWORD *)this + 2))
        {
          v60 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v58 = v57 + 1;
          v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
          *((_QWORD *)this + 1) = v58;
          v60 = v59 != 0;
        }
        *(_BYTE *)(a1 + 42) = v60;
        goto LABEL_89;
      case 0xCu:
        *(_WORD *)(a1 + 48) |= 0x10u;
        v61 = *((_QWORD *)this + 1);
        if (v61 >= *((_QWORD *)this + 2))
        {
          v64 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v62 = v61 + 1;
          v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
          *((_QWORD *)this + 1) = v62;
          v64 = v63 != 0;
        }
        *(_BYTE *)(a1 + 38) = v64;
        goto LABEL_89;
      case 0xDu:
        *(_WORD *)(a1 + 48) |= 0x400u;
        v65 = *((_QWORD *)this + 1);
        if (v65 >= *((_QWORD *)this + 2))
        {
          v68 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v66 = v65 + 1;
          v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
          *((_QWORD *)this + 1) = v66;
          v68 = v67 != 0;
        }
        *(_BYTE *)(a1 + 44) = v68;
        goto LABEL_89;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_89;
    }
  }
}

uint64_t sub_21B755D28(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  const PB::Base *v5;
  const PB::Base *v6;
  __int16 v7;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_WORD *)(v3 + 48);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 16);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    result = PB::Writer::write(this);
    v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_26:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 48) & 0x400) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B755EA0(uint64_t result)
{
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)result = &off_24DF31960;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_21B755EB8(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24DF31960;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

void sub_21B755F30(PB::Base *a1)
{
  sub_21B755EB8(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B755F54(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_24DF31960;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a2 + 44) & 1) == 0)
  {
    v5 = 2;
    if ((*(_BYTE *)(a2 + 44) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 44) = 1;
  *(_QWORD *)(a1 + 32) = v6;
  v5 = 3;
  if ((*(_BYTE *)(a2 + 44) & 2) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 44) = v5;
    *(_DWORD *)(a1 + 40) = v7;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 24))
  {
    v8 = operator new();
    v9 = sub_21B7BE9F0(v8, *(_QWORD *)(a2 + 24));
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v11;
    if (v10)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 8))(v10, v9);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v12 = operator new();
    v13 = sub_21B7BE9F0(v12, *(_QWORD *)(a2 + 8));
    v14 = *v4;
    *v4 = v15;
    if (v14)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 8))(v14, v13);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v16 = operator new();
    v17 = sub_21B7BE9F0(v16, *(_QWORD *)(a2 + 16));
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19;
    if (v18)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v18 + 8))(v18, v17);
  }
  return a1;
}

uint64_t sub_21B7560AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "current");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "last");
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
    PB::TextFormatter::format(this, "location");
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "minimum");
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B756174(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 44) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v20);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_55;
      case 2u:
        *(_BYTE *)(a1 + 44) |= 2u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_54;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_49:
          LODWORD(v27) = 0;
          goto LABEL_54;
        }
        v34 = 0;
        v35 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v36 = v22 + 1;
            v37 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v36;
            v27 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              v22 = v36;
              v14 = v35++ > 8;
              if (v14)
                goto LABEL_49;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_54:
        *(_DWORD *)(a1 + 40) = v27;
        goto LABEL_55;
      case 3u:
        v30 = operator new();
        sub_21B7BE9B4(v30);
        v31 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *(_QWORD *)(a1 + 24);
        }
        goto LABEL_40;
      case 4u:
        v30 = operator new();
        sub_21B7BE9B4(v30);
        v32 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v30;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v30 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_40;
      case 5u:
        v30 = operator new();
        sub_21B7BE9B4(v30);
        v33 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v30;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v30 = *(_QWORD *)(a1 + 16);
        }
LABEL_40:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_55:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t sub_21B756514(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 44);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    return PB::Writer::writeSubmessage(this, v7);
  return result;
}

double sub_21B7565A8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31998;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void sub_21B7565D4(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24DF31998;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_21B756654(PB::Base *a1)
{
  sub_21B7565D4(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B756678(uint64_t a1, uint64_t a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v22;
  int v23;
  char v24;

  *(_QWORD *)a1 = &off_24DF31998;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if ((*(_BYTE *)(a2 + 108) & 1) == 0)
  {
    v5 = 8;
    if ((*(_BYTE *)(a2 + 108) & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 108) = 1;
  *(_QWORD *)(a1 + 72) = v6;
  v5 = 9;
  if ((*(_BYTE *)(a2 + 108) & 8) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 108) = v5;
    *(_DWORD *)(a1 + 88) = v7;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 56))
  {
    v8 = operator new();
    v9 = sub_21B7BE9F0(v8, *(_QWORD *)(a2 + 56));
    v10 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v11;
    if (v10)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 8))(v10, v9);
  }
  if (*(_QWORD *)(a2 + 64))
  {
    v12 = operator new();
    v13 = sub_21B7BE9F0(v12, *(_QWORD *)(a2 + 64));
    v14 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v15;
    if (v14)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 8))(v14, v13);
  }
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v16 = *(_BYTE *)(a2 + 108);
  if ((v16 & 0x40) != 0)
  {
    v22 = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 108) |= 0x40u;
    *(_DWORD *)(a1 + 100) = v22;
    v16 = *(_BYTE *)(a2 + 108);
    if ((v16 & 0x20) == 0)
    {
LABEL_16:
      if ((v16 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_28;
    }
  }
  else if ((*(_BYTE *)(a2 + 108) & 0x20) == 0)
  {
    goto LABEL_16;
  }
  v23 = *(_DWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 108) |= 0x20u;
  *(_DWORD *)(a1 + 96) = v23;
  v16 = *(_BYTE *)(a2 + 108);
  if ((v16 & 0x80) == 0)
  {
LABEL_17:
    if ((v16 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
LABEL_28:
  v24 = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 108) |= 0x80u;
  *(_BYTE *)(a1 + 104) = v24;
  if ((*(_BYTE *)(a2 + 108) & 0x10) != 0)
  {
LABEL_18:
    v17 = *(_DWORD *)(a2 + 92);
    *(_BYTE *)(a1 + 108) |= 0x10u;
    *(_DWORD *)(a1 + 92) = v17;
  }
LABEL_19:
  if (a1 != a2)
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  v18 = *(_BYTE *)(a2 + 108);
  if ((v18 & 2) != 0)
  {
    v19 = *(_DWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 108) |= 2u;
    *(_DWORD *)(a1 + 80) = v19;
    v18 = *(_BYTE *)(a2 + 108);
  }
  if ((v18 & 4) != 0)
  {
    v20 = *(_DWORD *)(a2 + 84);
    *(_BYTE *)(a1 + 108) |= 4u;
    *(_DWORD *)(a1 + 84) = v20;
  }
  return a1;
}

uint64_t sub_21B75688C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }
  if ((*(_BYTE *)(a1 + 108) & 2) != 0)
    PB::TextFormatter::format(this, "correlation", *(float *)(a1 + 80));
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "current");
  if ((*(_BYTE *)(a1 + 108) & 4) != 0)
    PB::TextFormatter::format(this, "deltatip", *(float *)(a1 + 84));
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "instability");
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v10 = *(_BYTE *)(a1 + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0)
        goto LABEL_14;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(a1 + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(this, "state");
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 96));
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0)
      goto LABEL_16;
LABEL_24:
    PB::TextFormatter::format(this, "tip", *(float *)(a1 + 100));
    if ((*(_BYTE *)(a1 + 108) & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_23:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 0x40) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x80) == 0)
    goto LABEL_17;
LABEL_25:
  PB::TextFormatter::format(this, "upright");
LABEL_17:
  v11 = *(float **)(a1 + 32);
  v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "variance", v13);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B756A5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  char *v109;
  int v110;
  unint64_t v111;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 108) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_175;
        case 2u:
          *(_BYTE *)(a1 + 108) |= 8u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_152;
              v30 += 7;
              v27 = v33;
              v18 = v31++ > 8;
            }
            while (!v18);
LABEL_117:
            LODWORD(v32) = 0;
            goto LABEL_152;
          }
          v82 = 0;
          v83 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v84 = v27 + 1;
              v85 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v84;
              v32 |= (unint64_t)(v85 & 0x7F) << v82;
              if (v85 < 0)
              {
                v82 += 7;
                v27 = v84;
                v18 = v83++ > 8;
                if (v18)
                  goto LABEL_117;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_152:
          *(_DWORD *)(a1 + 88) = v32;
          goto LABEL_176;
        case 3u:
          v35 = operator new();
          sub_21B7BE9B4(v35);
          v36 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v35;
          if (v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            v35 = *(_QWORD *)(a1 + 56);
          }
          goto LABEL_39;
        case 4u:
          v35 = operator new();
          sub_21B7BE9B4(v35);
          v37 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v35;
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            v35 = *(_QWORD *)(a1 + 64);
          }
LABEL_39:
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v35 + 16))(v35, this) & 1) != 0)
          {
            goto LABEL_41;
          }
          return 0;
        case 5u:
          if (v24 != 2)
          {
            v87 = *(char **)(a1 + 16);
            v86 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v87 >= v86)
            {
              v95 = (char *)*v10;
              v96 = (v87 - (_BYTE *)*v10) >> 2;
              v97 = v96 + 1;
              if ((unint64_t)(v96 + 1) >> 62)
LABEL_187:
                sub_21B796A0C();
              v98 = v86 - (_QWORD)v95;
              if (v98 >> 1 > v97)
                v97 = v98 >> 1;
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
                v99 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v99 = v97;
              if (v99)
              {
                v100 = (char *)sub_21B796CD8(v11, v99);
                v95 = *(char **)(a1 + 8);
                v87 = *(char **)(a1 + 16);
              }
              else
              {
                v100 = 0;
              }
              v107 = &v100[4 * v96];
              *(_DWORD *)v107 = 0;
              v88 = v107 + 4;
              while (v87 != v95)
              {
                v108 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v107 - 1) = v108;
                v107 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v107;
              *(_QWORD *)(a1 + 16) = v88;
              *(_QWORD *)(a1 + 24) = &v100[4 * v99];
              if (v95)
                operator delete(v95);
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v88 = v87 + 4;
            }
            *(_QWORD *)(a1 + 16) = v88;
            goto LABEL_170;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 16);
            v40 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v10;
              v44 = (v41 - (_BYTE *)*v10) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_187;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_21B796CD8(v11, v47);
                v43 = *(char **)(a1 + 8);
                v41 = *(char **)(a1 + 16);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v49;
              *(_QWORD *)(a1 + 16) = v42;
              *(_QWORD *)(a1 + 24) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *(_QWORD *)(a1 + 16) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
              goto LABEL_131;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_41;
        case 6u:
          *(_BYTE *)(a1 + 108) |= 0x40u;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_174;
        case 7u:
          *(_BYTE *)(a1 + 108) |= 0x20u;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_174;
        case 8u:
          *(_BYTE *)(a1 + 108) |= 0x80u;
          v54 = *((_QWORD *)this + 1);
          if (v54 >= *((_QWORD *)this + 2))
          {
            v57 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v55 = v54 + 1;
            v56 = *(unsigned __int8 *)(*(_QWORD *)this + v54);
            *((_QWORD *)this + 1) = v55;
            v57 = v56 != 0;
          }
          *(_BYTE *)(a1 + 104) = v57;
          goto LABEL_176;
        case 9u:
          *(_BYTE *)(a1 + 108) |= 0x10u;
          v58 = *((_QWORD *)this + 1);
          v59 = *((_QWORD *)this + 2);
          v60 = *(_QWORD *)this;
          if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
          {
            v61 = 0;
            v62 = 0;
            v63 = 0;
            do
            {
              v64 = v58 + 1;
              *((_QWORD *)this + 1) = v58 + 1;
              v65 = *(_BYTE *)(v60 + v58);
              v63 |= (unint64_t)(v65 & 0x7F) << v61;
              if ((v65 & 0x80) == 0)
                goto LABEL_155;
              v61 += 7;
              v58 = v64;
              v18 = v62++ > 8;
            }
            while (!v18);
LABEL_128:
            LODWORD(v63) = 0;
            goto LABEL_155;
          }
          v89 = 0;
          v90 = 0;
          v63 = 0;
          if (v59 <= v58)
            v59 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v59 == v58)
            {
              LODWORD(v63) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v91 = v58 + 1;
              v92 = *(_BYTE *)(v60 + v58);
              *((_QWORD *)this + 1) = v91;
              v63 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                v58 = v91;
                v18 = v90++ > 8;
                if (v18)
                  goto LABEL_128;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v63) = 0;
            }
            break;
          }
LABEL_155:
          *(_DWORD *)(a1 + 92) = v63;
          goto LABEL_176;
        case 0xAu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v66 = *((_QWORD *)this + 1);
            v67 = *((_QWORD *)this + 2);
            while (v66 < v67 && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 40);
              v68 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v69 >= v68)
              {
                v71 = (char *)*v8;
                v72 = (v69 - (_BYTE *)*v8) >> 2;
                v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62)
                  goto LABEL_186;
                v74 = v68 - (_QWORD)v71;
                if (v74 >> 1 > v73)
                  v73 = v74 >> 1;
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                  v75 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v75 = v73;
                if (v75)
                {
                  v76 = (char *)sub_21B796CD8(v9, v75);
                  v71 = *(char **)(a1 + 32);
                  v69 = *(char **)(a1 + 40);
                }
                else
                {
                  v76 = 0;
                }
                v77 = &v76[4 * v72];
                *(_DWORD *)v77 = 0;
                v70 = v77 + 4;
                while (v69 != v71)
                {
                  v78 = *((_DWORD *)v69 - 1);
                  v69 -= 4;
                  *((_DWORD *)v77 - 1) = v78;
                  v77 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v77;
                *(_QWORD *)(a1 + 40) = v70;
                *(_QWORD *)(a1 + 48) = &v76[4 * v75];
                if (v71)
                  operator delete(v71);
              }
              else
              {
                *(_DWORD *)v69 = 0;
                v70 = v69 + 4;
              }
              *(_QWORD *)(a1 + 40) = v70;
              v79 = *((_QWORD *)this + 1);
              if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              {
LABEL_131:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v70 - 1) = *(_DWORD *)(*(_QWORD *)this + v79);
              v67 = *((_QWORD *)this + 2);
              v66 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v66;
            }
LABEL_41:
            PB::Reader::recallMark();
          }
          else
          {
            v94 = *(char **)(a1 + 40);
            v93 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v94 >= v93)
            {
              v101 = (char *)*v8;
              v102 = (v94 - (_BYTE *)*v8) >> 2;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 62)
LABEL_186:
                sub_21B796A0C();
              v104 = v93 - (_QWORD)v101;
              if (v104 >> 1 > v103)
                v103 = v104 >> 1;
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                v105 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v105 = v103;
              if (v105)
              {
                v106 = (char *)sub_21B796CD8(v9, v105);
                v101 = *(char **)(a1 + 32);
                v94 = *(char **)(a1 + 40);
              }
              else
              {
                v106 = 0;
              }
              v109 = &v106[4 * v102];
              *(_DWORD *)v109 = 0;
              v88 = v109 + 4;
              while (v94 != v101)
              {
                v110 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v109;
              *(_QWORD *)(a1 + 40) = v88;
              *(_QWORD *)(a1 + 48) = &v106[4 * v105];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *(_DWORD *)v94 = 0;
              v88 = v94 + 4;
            }
            *(_QWORD *)(a1 + 40) = v88;
LABEL_170:
            v111 = *((_QWORD *)this + 1);
            if (v111 <= 0xFFFFFFFFFFFFFFFBLL && v111 + 4 <= *((_QWORD *)this + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(_QWORD *)this + v111);
LABEL_174:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_175:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_172:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_176:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xBu:
          *(_BYTE *)(a1 + 108) |= 2u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v80);
          goto LABEL_174;
        case 0xCu:
          *(_BYTE *)(a1 + 108) |= 4u;
          v81 = *((_QWORD *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v81);
          goto LABEL_174;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_176;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B757380(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  float *v7;
  float *v8;
  float v9;
  char v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = result;
  v4 = *(_BYTE *)(result + 108);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72));
    v4 = *(_BYTE *)(v3 + 108);
  }
  if ((v4 & 8) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 56);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 64);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 100));
    v10 = *(_BYTE *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0)
        goto LABEL_15;
LABEL_26:
      result = PB::Writer::write(this);
      if ((*(_BYTE *)(v3 + 108) & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v10 = *(_BYTE *)(v3 + 108);
  if (v10 < 0)
    goto LABEL_26;
LABEL_15:
  if ((v10 & 0x10) != 0)
LABEL_16:
    result = PB::Writer::writeVarInt(this);
LABEL_17:
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(_BYTE *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 80));
    v14 = *(_BYTE *)(v3 + 108);
  }
  if ((v14 & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 84));
  return result;
}

uint64_t sub_21B7574EC(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_24DF319D0;
  return result;
}

void sub_21B757504(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24DF319D0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_21B757564(PB::Base *a1)
{
  sub_21B757504(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B757588(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_24DF319D0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
  {
    v5 = 2;
    if ((*(_BYTE *)(a2 + 32) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 24) = v6;
  v5 = 3;
  if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28);
    *(_BYTE *)(a1 + 32) = v5;
    *(_DWORD *)(a1 + 28) = v7;
  }
LABEL_6:
  if (*(_QWORD *)(a2 + 16))
  {
    v8 = operator new();
    v9 = sub_21B7BE9F0(v8, *(_QWORD *)(a2 + 16));
    v10 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v11;
    if (v10)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 8))(v10, v9);
  }
  if (*(_QWORD *)(a2 + 8))
  {
    v12 = operator new();
    v13 = sub_21B7BE9F0(v12, *(_QWORD *)(a2 + 8));
    v14 = *v4;
    *v4 = v15;
    if (v14)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v14 + 8))(v14, v13);
  }
  return a1;
}

uint64_t sub_21B75769C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    PB::TextFormatter::format(this, "location");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "maximum");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "minimum");
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B757744(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 32) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          do
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v42 = v20 + 1;
            v43 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v42;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
              goto LABEL_62;
            }
            v40 += 7;
            v20 = v42;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_51:
          LODWORD(v25) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_51;
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_67;
      case 2u:
        *(_BYTE *)(a1 + 32) |= 2u;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_66;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_58:
          LODWORD(v34) = 0;
          goto LABEL_66;
        }
        v44 = 0;
        v45 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v46 = v29 + 1;
            v47 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v46;
            v34 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              v29 = v46;
              v14 = v45++ > 8;
              if (v14)
                goto LABEL_58;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_66:
        *(_DWORD *)(a1 + 28) = v34;
        goto LABEL_67;
      case 3u:
        v37 = operator new();
        sub_21B7BE9B4(v37);
        v38 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v37;
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          v37 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_42;
      case 4u:
        v37 = operator new();
        sub_21B7BE9B4(v37);
        v39 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v37;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v37 = *(_QWORD *)(a1 + 8);
        }
LABEL_42:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v37 + 16))(v37, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_67:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_67;
    }
  }
}

uint64_t sub_21B757B3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(this, v6);
  return result;
}

double sub_21B757BBC(_QWORD *a1)
{
  double result;

  *a1 = &off_24DF31A08;
  result = 0.0;
  a1[2] = 0;
  *(_QWORD *)((char *)a1 + 28) = 0;
  return result;
}

void sub_21B757BDC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B757C00(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_24DF31A08;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 32) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 24) = v5;
    v2 = *(_BYTE *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_BYTE *)(result + 32) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_BYTE *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 28);
      *(_BYTE *)(result + 32) = v3 | 0x10;
      *(_DWORD *)(result + 28) = v8;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(_BYTE *)(result + 32) = v3;
  *(_DWORD *)(result + 16) = v7;
  if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B757CB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "eventTag");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "from");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "location");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "to");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B757D80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_87:
                    v2 = v47 + 1;
                    goto LABEL_88;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_87;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_88;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_88:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7582E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B758394(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31A40;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_21B7583CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_24DF31A40;
  v6 = (void **)(a1 + 96);
  sub_21B7967B4(&v6);
  v6 = (void **)(a1 + 72);
  sub_21B7967B4(&v6);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_21B758478(uint64_t a1)
{
  sub_21B7583CC(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75849C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t **v5;
  char v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t *v22;
  uint64_t *i;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_QWORD *)a1 = &off_24DF31A40;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = (uint64_t **)(a1 + 72);
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if ((*(_BYTE *)(a2 + 132) & 1) == 0)
  {
    v6 = 2;
    if ((*(_BYTE *)(a2 + 132) & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(_DWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 132) = 1;
  *(_DWORD *)(a1 + 120) = v7;
  v6 = 3;
  if ((*(_BYTE *)(a2 + 132) & 2) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 124);
    *(_BYTE *)(a1 + 132) = v6;
    *(_DWORD *)(a1 + 124) = v8;
  }
LABEL_6:
  v9 = *(uint64_t **)(a2 + 72);
  v10 = *(uint64_t **)(a2 + 80);
  while (v9 != v10)
    sub_21B753B00(v5, *v9++);
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  if (*(_QWORD *)(a2 + 64))
  {
    v11 = operator new();
    v12 = sub_21B7BE9F0(v11, *(_QWORD *)(a2 + 64));
    v13 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v14;
    if (v13)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v13 + 8))(v13, v12);
  }
  if (*(_QWORD *)(a2 + 56))
  {
    v15 = operator new();
    v16 = sub_21B7BE9F0(v15, *(_QWORD *)(a2 + 56));
    v17 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v18;
    if (v17)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v17 + 8))(v17, v16);
  }
  v19 = *(_BYTE *)(a2 + 132);
  if ((v19 & 8) != 0)
  {
    v20 = *(_BYTE *)(a2 + 129);
    *(_BYTE *)(a1 + 132) |= 8u;
    *(_BYTE *)(a1 + 129) = v20;
    v19 = *(_BYTE *)(a2 + 132);
  }
  if ((v19 & 4) != 0)
  {
    v21 = *(_BYTE *)(a2 + 128);
    *(_BYTE *)(a1 + 132) |= 4u;
    *(_BYTE *)(a1 + 128) = v21;
  }
  v22 = *(uint64_t **)(a2 + 96);
  for (i = *(uint64_t **)(a2 + 104); v22 != i; ++v22)
    sub_21B75868C((uint64_t **)(a1 + 96), *v22);
  return a1;
}

uint64_t sub_21B75868C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;

  v4 = operator new();
  sub_21B7BED14(v4, a2);
  result = (uint64_t)(a1 + 2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_21B796A0C();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v13 = (char *)sub_21B796A20(result, v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (char *)v20;
    v21 = v19.i64[0];
    result = sub_21B796D0C((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_21B7587C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B7587E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "baseline");
  if ((*(_BYTE *)(a1 + 132) & 1) != 0)
    PB::TextFormatter::format(this, "location");
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "minimum");
  v7 = *(uint64_t **)(a1 + 72);
  v8 = *(uint64_t **)(a1 + 80);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "optical");
  }
  v10 = *(_BYTE *)(a1 + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(this, "ringBufferUpdated");
    v10 = *(_BYTE *)(a1 + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 132) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "runningMinAccepted");
  if ((*(_BYTE *)(a1 + 132) & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "state");
LABEL_13:
  v11 = *(uint64_t **)(a1 + 96);
  v12 = *(uint64_t **)(a1 + 104);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "temp");
  }
  v14 = *(float **)(a1 + 8);
  v15 = *(float **)(a1 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "tilt", v16);
  }
  v17 = *(float **)(a1 + 32);
  v18 = *(float **)(a1 + 40);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(this, "tip", v19);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B75899C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  char *v93;
  _DWORD *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  char *v111;
  int v112;
  unint64_t v113;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 96);
    v9 = (void **)(a1 + 8);
    v10 = a1 + 24;
    v11 = (void **)(a1 + 32);
    v12 = a1 + 48;
    v13 = (uint64_t **)(a1 + 72);
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if (v26 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 132) |= 1u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_149;
              v30 += 7;
              v27 = v33;
              v20 = v31++ > 8;
            }
            while (!v20);
LABEL_112:
            LODWORD(v32) = 0;
            goto LABEL_149;
          }
          v84 = 0;
          v85 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v86 = v27 + 1;
              v87 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v86;
              v32 |= (unint64_t)(v87 & 0x7F) << v84;
              if (v87 < 0)
              {
                v84 += 7;
                v27 = v86;
                v20 = v85++ > 8;
                if (v20)
                  goto LABEL_112;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_149:
          *(_DWORD *)(a1 + 120) = v32;
          goto LABEL_101;
        case 2u:
          *(_BYTE *)(a1 + 132) |= 2u;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          v37 = *(_QWORD *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)this + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_152;
              v38 += 7;
              v35 = v41;
              v20 = v39++ > 8;
            }
            while (!v20);
LABEL_119:
            LODWORD(v40) = 0;
            goto LABEL_152;
          }
          v88 = 0;
          v89 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v90 = v35 + 1;
              v91 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)this + 1) = v90;
              v40 |= (unint64_t)(v91 & 0x7F) << v88;
              if (v91 < 0)
              {
                v88 += 7;
                v35 = v90;
                v20 = v89++ > 8;
                if (v20)
                  goto LABEL_119;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_152:
          *(_DWORD *)(a1 + 124) = v40;
          goto LABEL_101;
        case 3u:
          sub_21B753F74(v13);
          v43 = *(_QWORD *)(a1 + 80);
          goto LABEL_97;
        case 4u:
          if (v26 != 2)
          {
            v93 = *(char **)(a1 + 40);
            v92 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v93 >= v92)
            {
              v97 = (char *)*v11;
              v98 = (v93 - (_BYTE *)*v11) >> 2;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 62)
LABEL_176:
                sub_21B796A0C();
              v100 = v92 - (_QWORD)v97;
              if (v100 >> 1 > v99)
                v99 = v100 >> 1;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
                v101 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_21B796CD8(v12, v101);
                v97 = *(char **)(a1 + 32);
                v93 = *(char **)(a1 + 40);
              }
              else
              {
                v102 = 0;
              }
              v109 = &v102[4 * v98];
              *(_DWORD *)v109 = 0;
              v94 = v109 + 4;
              while (v93 != v97)
              {
                v110 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v109;
              *(_QWORD *)(a1 + 40) = v94;
              *(_QWORD *)(a1 + 48) = &v102[4 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_DWORD *)v93 = 0;
              v94 = v93 + 4;
            }
            *(_QWORD *)(a1 + 40) = v94;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          while (v44 < v45 && !*((_BYTE *)this + 24))
          {
            v47 = *(char **)(a1 + 40);
            v46 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v47 >= v46)
            {
              v49 = (char *)*v11;
              v50 = (v47 - (_BYTE *)*v11) >> 2;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62)
                goto LABEL_176;
              v52 = v46 - (_QWORD)v49;
              if (v52 >> 1 > v51)
                v51 = v52 >> 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                v53 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (char *)sub_21B796CD8(v12, v53);
                v49 = *(char **)(a1 + 32);
                v47 = *(char **)(a1 + 40);
              }
              else
              {
                v54 = 0;
              }
              v55 = &v54[4 * v50];
              *(_DWORD *)v55 = 0;
              v48 = v55 + 4;
              while (v47 != v49)
              {
                v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v55;
              *(_QWORD *)(a1 + 40) = v48;
              *(_QWORD *)(a1 + 48) = &v54[4 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(_DWORD *)v47 = 0;
              v48 = v47 + 4;
            }
            *(_QWORD *)(a1 + 40) = v48;
            v57 = *((_QWORD *)this + 1);
            if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v48 - 1) = *(_DWORD *)(*(_QWORD *)this + v57);
            v45 = *((_QWORD *)this + 2);
            v44 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v44;
          }
          goto LABEL_100;
        case 5u:
          if (v26 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v58 = *((_QWORD *)this + 1);
            v59 = *((_QWORD *)this + 2);
            while (v58 < v59 && !*((_BYTE *)this + 24))
            {
              v61 = *(char **)(a1 + 16);
              v60 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v61 >= v60)
              {
                v63 = (char *)*v9;
                v64 = (v61 - (_BYTE *)*v9) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  goto LABEL_177;
                v66 = v60 - (_QWORD)v63;
                if (v66 >> 1 > v65)
                  v65 = v66 >> 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v68 = (char *)sub_21B796CD8(v10, v67);
                  v63 = *(char **)(a1 + 8);
                  v61 = *(char **)(a1 + 16);
                }
                else
                {
                  v68 = 0;
                }
                v69 = &v68[4 * v64];
                *(_DWORD *)v69 = 0;
                v62 = v69 + 4;
                while (v61 != v63)
                {
                  v70 = *((_DWORD *)v61 - 1);
                  v61 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v69;
                *(_QWORD *)(a1 + 16) = v62;
                *(_QWORD *)(a1 + 24) = &v68[4 * v67];
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *(_DWORD *)v61 = 0;
                v62 = v61 + 4;
              }
              *(_QWORD *)(a1 + 16) = v62;
              v71 = *((_QWORD *)this + 1);
              if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              {
LABEL_128:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v62 - 1) = *(_DWORD *)(*(_QWORD *)this + v71);
              v59 = *((_QWORD *)this + 2);
              v58 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v58;
            }
LABEL_100:
            PB::Reader::recallMark();
          }
          else
          {
            v96 = *(char **)(a1 + 16);
            v95 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v96 >= v95)
            {
              v103 = (char *)*v9;
              v104 = (v96 - (_BYTE *)*v9) >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
LABEL_177:
                sub_21B796A0C();
              v106 = v95 - (_QWORD)v103;
              if (v106 >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_21B796CD8(v10, v107);
                v103 = *(char **)(a1 + 8);
                v96 = *(char **)(a1 + 16);
              }
              else
              {
                v108 = 0;
              }
              v111 = &v108[4 * v104];
              *(_DWORD *)v111 = 0;
              v94 = v111 + 4;
              while (v96 != v103)
              {
                v112 = *((_DWORD *)v96 - 1);
                v96 -= 4;
                *((_DWORD *)v111 - 1) = v112;
                v111 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v111;
              *(_QWORD *)(a1 + 16) = v94;
              *(_QWORD *)(a1 + 24) = &v108[4 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_DWORD *)v96 = 0;
              v94 = v96 + 4;
            }
            *(_QWORD *)(a1 + 16) = v94;
LABEL_167:
            v113 = *((_QWORD *)this + 1);
            if (v113 <= 0xFFFFFFFFFFFFFFFBLL && v113 + 4 <= *((_QWORD *)this + 2))
            {
              *(v94 - 1) = *(_DWORD *)(*(_QWORD *)this + v113);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_101:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          v72 = operator new();
          sub_21B7BE9B4(v72);
          v73 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v72;
          if (v73)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            v72 = *(_QWORD *)(a1 + 64);
          }
          goto LABEL_98;
        case 7u:
          v72 = operator new();
          sub_21B7BE9B4(v72);
          v74 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v72;
          if (v74)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
            v72 = *(_QWORD *)(a1 + 56);
          }
          goto LABEL_98;
        case 8u:
          *(_BYTE *)(a1 + 132) |= 8u;
          v75 = *((_QWORD *)this + 1);
          if (v75 >= *((_QWORD *)this + 2))
          {
            v78 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
            *((_QWORD *)this + 1) = v76;
            v78 = v77 != 0;
          }
          *(_BYTE *)(a1 + 129) = v78;
          goto LABEL_101;
        case 9u:
          *(_BYTE *)(a1 + 132) |= 4u;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 128) = v82;
          goto LABEL_101;
        case 0xAu:
          sub_21B759230(v8);
          v43 = *(_QWORD *)(a1 + 104);
LABEL_97:
          v72 = *(_QWORD *)(v43 - 8);
LABEL_98:
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v72 + 16))(v72, this) & 1) != 0)
          {
            goto LABEL_100;
          }
          return 0;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_101;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v23 = v2 + 1;
      v24 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B759230(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_21B7BECD8(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_21B796A0C();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_21B796A20(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_21B796D0C((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_21B75935C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21B759378(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  const PB::Base *v14;
  const PB::Base *v15;
  char v16;
  const PB::Base **v17;
  const PB::Base **v18;
  const PB::Base *v19;

  v3 = result;
  v4 = *(_BYTE *)(result + 132);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 132);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base ***)(v3 + 72);
  v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeSubmessage(this, v7);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 8);
  v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(const PB::Base **)(v3 + 64);
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14);
  v15 = *(const PB::Base **)(v3 + 56);
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15);
  v16 = *(_BYTE *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    result = PB::Writer::write(this);
    v16 = *(_BYTE *)(v3 + 132);
  }
  if ((v16 & 4) != 0)
    result = PB::Writer::write(this);
  v18 = *(const PB::Base ***)(v3 + 96);
  v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    v19 = *v18++;
    result = PB::Writer::writeSubmessage(this, v19);
  }
  return result;
}

uint64_t sub_21B7594A8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31A78;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_21B7594C0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7594E4(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;

  *(_QWORD *)result = &off_24DF31A78;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(result + 68) = 1;
    *(_QWORD *)(result + 8) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 20) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_21;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 24) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  v10 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_25;
  }
LABEL_24:
  v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_26;
  }
LABEL_25:
  v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v12;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_27;
  }
LABEL_26:
  v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 52) = v13;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x80) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_28;
  }
LABEL_27:
  v14 = *(_DWORD *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v14;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  v15 = *(_DWORD *)(a2 + 56);
  v3 |= 0x800u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 56) = v15;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0)
      return result;
LABEL_30:
    v17 = *(_BYTE *)(a2 + 64);
    *(_WORD *)(result + 68) = v3 | 0x2000;
    *(_BYTE *)(result + 64) = v17;
    return result;
  }
LABEL_29:
  v16 = *(_DWORD *)(a2 + 60);
  v3 |= 0x1000u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v16;
  if ((*(_WORD *)(a2 + 68) & 0x2000) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_21B759688(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "deltaPositionX", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaPositionY", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "deltaPositionZ", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "deltaVelocityX", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "deltaVelocityY", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "deltaVelocityZ", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isBIO");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "staticFlag");
    if ((*(_WORD *)(a1 + 68) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "referenceFrame");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 1) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B759878(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_91;
            case 2u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 3u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 4u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_90:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_91:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_56:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_102;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_95:
                    v2 = v37 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_95;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_96;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_102;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_100:
                    v2 = v41 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_100;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_101;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 60) = v31;
LABEL_102:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_102;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_102;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B759E80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 68) & 0x2000) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_21B75A02C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31AB0;
  *(_DWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_21B75A058(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_24DF31AB0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_21B75A0B8(PB::Base *a1)
{
  sub_21B75A058(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75A0DC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = (char *)(a1 + 56);
  *(_QWORD *)a1 = &off_24DF31AB0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  if (a1 != a2)
  {
    sub_21B7968C4((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B7968C4(v5, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  }
  if ((*(_BYTE *)(a2 + 88) & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) |= 1u;
    *(_QWORD *)(a1 + 80) = v6;
  }
  return a1;
}

uint64_t sub_21B75A1A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "historicalMeanSeaLevelPressure", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "historicalTimestamp", v10);
  }
  v11 = *(double **)(a1 + 56);
  v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "historicalUncertainty", v13);
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    PB::TextFormatter::format(this, "refreshTime", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B75A280(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 8);
    v101 = a1 + 24;
    v102 = a1 + 72;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            v69 = *(char **)(a1 + 40);
            v68 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              v75 = (char *)*v10;
              v76 = (v69 - (_BYTE *)*v10) >> 3;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61)
LABEL_166:
                sub_21B796A0C();
              v78 = v68 - (_QWORD)v75;
              if (v78 >> 2 > v77)
                v77 = v78 >> 2;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_21B796A20(v11, v79);
                v75 = *(char **)(a1 + 32);
                v69 = *(char **)(a1 + 40);
              }
              else
              {
                v80 = 0;
              }
              v93 = &v80[8 * v76];
              *(_QWORD *)v93 = 0;
              v70 = v93 + 8;
              while (v69 != v75)
              {
                v94 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v93 - 1) = v94;
                v93 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v93;
              *(_QWORD *)(a1 + 40) = v70;
              *(_QWORD *)(a1 + 48) = &v80[8 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v70 = v69 + 8;
            }
            *(_QWORD *)(a1 + 40) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          while (v25 < v26 && !*((_BYTE *)this + 24))
          {
            v28 = *(char **)(a1 + 40);
            v27 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v10;
              v31 = (v28 - (_BYTE *)*v10) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_166;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_21B796A20(v11, v34);
                v30 = *(char **)(a1 + 32);
                v28 = *(char **)(a1 + 40);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[8 * v31];
              *(_QWORD *)v36 = 0;
              v29 = v36 + 8;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v36;
              *(_QWORD *)(a1 + 40) = v29;
              *(_QWORD *)(a1 + 48) = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v28 = 0;
              v29 = v28 + 8;
            }
            *(_QWORD *)(a1 + 40) = v29;
            v38 = *((_QWORD *)this + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
            v26 = *((_QWORD *)this + 2);
            v25 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v25;
          }
          goto LABEL_107;
        case 2u:
          if (v24 != 2)
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v81 = (char *)*v9;
              v82 = (v72 - (_BYTE *)*v9) >> 3;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
LABEL_167:
                sub_21B796A0C();
              v84 = v71 - (_QWORD)v81;
              if (v84 >> 2 > v83)
                v83 = v84 >> 2;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)sub_21B796A20(v101, v85);
                v81 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }
              else
              {
                v86 = 0;
              }
              v95 = &v86[8 * v82];
              *(_QWORD *)v95 = 0;
              v70 = v95 + 8;
              while (v72 != v81)
              {
                v96 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v95;
              *(_QWORD *)(a1 + 16) = v70;
              *(_QWORD *)(a1 + 24) = &v86[8 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_QWORD *)v72 = 0;
              v70 = v72 + 8;
            }
            *(_QWORD *)(a1 + 16) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v39 = *((_QWORD *)this + 1);
          v40 = *((_QWORD *)this + 2);
          while (v39 < v40 && !*((_BYTE *)this + 24))
          {
            v42 = *(char **)(a1 + 16);
            v41 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v9;
              v45 = (v42 - (_BYTE *)*v9) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                goto LABEL_167;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_21B796A20(v101, v48);
                v44 = *(char **)(a1 + 8);
                v42 = *(char **)(a1 + 16);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[8 * v45];
              *(_QWORD *)v50 = 0;
              v43 = v50 + 8;
              while (v42 != v44)
              {
                v51 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v50 - 1) = v51;
                v50 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v50;
              *(_QWORD *)(a1 + 16) = v43;
              *(_QWORD *)(a1 + 24) = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v42 = 0;
              v43 = v42 + 8;
            }
            *(_QWORD *)(a1 + 16) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
            v40 = *((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v39;
          }
          goto LABEL_107;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v53 = *((_QWORD *)this + 1);
            v54 = *((_QWORD *)this + 2);
            while (v53 < v54 && !*((_BYTE *)this + 24))
            {
              v56 = *(char **)(a1 + 64);
              v55 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v56 >= v55)
              {
                v58 = (char *)*v8;
                v59 = (v56 - (_BYTE *)*v8) >> 3;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 61)
                  goto LABEL_168;
                v61 = v55 - (_QWORD)v58;
                if (v61 >> 2 > v60)
                  v60 = v61 >> 2;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                  v62 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  v63 = (char *)sub_21B796A20(v102, v62);
                  v58 = *(char **)(a1 + 56);
                  v56 = *(char **)(a1 + 64);
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[8 * v59];
                *(_QWORD *)v64 = 0;
                v57 = v64 + 8;
                while (v56 != v58)
                {
                  v65 = *((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *((_QWORD *)v64 - 1) = v65;
                  v64 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v64;
                *(_QWORD *)(a1 + 64) = v57;
                *(_QWORD *)(a1 + 72) = &v63[8 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_QWORD *)v56 = 0;
                v57 = v56 + 8;
              }
              *(_QWORD *)(a1 + 64) = v57;
              v66 = *((_QWORD *)this + 1);
              if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)this + 2))
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v66);
              v54 = *((_QWORD *)this + 2);
              v53 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v53;
            }
LABEL_107:
            PB::Reader::recallMark();
          }
          else
          {
            v74 = *(char **)(a1 + 64);
            v73 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v74 >= v73)
            {
              v87 = (char *)*v8;
              v88 = (v74 - (_BYTE *)*v8) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
LABEL_168:
                sub_21B796A0C();
              v90 = v73 - (_QWORD)v87;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_21B796A20(v102, v91);
                v87 = *(char **)(a1 + 56);
                v74 = *(char **)(a1 + 64);
              }
              else
              {
                v92 = 0;
              }
              v97 = &v92[8 * v88];
              *(_QWORD *)v97 = 0;
              v70 = v97 + 8;
              while (v74 != v87)
              {
                v98 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v97 - 1) = v98;
                v97 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v97;
              *(_QWORD *)(a1 + 64) = v70;
              *(_QWORD *)(a1 + 72) = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v74 = 0;
              v70 = v74 + 8;
            }
            *(_QWORD *)(a1 + 64) = v70;
LABEL_153:
            v99 = *((_QWORD *)this + 1);
            if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *((_QWORD *)this + 2))
            {
              *(v70 - 1) = *(_QWORD *)(*(_QWORD *)this + v99);
LABEL_157:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_155:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_158:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 88) |= 1u;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)this + 2))
            goto LABEL_155;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v67);
          goto LABEL_157;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_158;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75A9B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = result;
  v4 = *(double **)(result + 32);
  v5 = *(double **)(result + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  if ((*(_BYTE *)(v3 + 88) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 80));
  return result;
}

_QWORD *sub_21B75AA60(_QWORD *result)
{
  *result = &off_24DF31AE8;
  result[1] = 0;
  return result;
}

void sub_21B75AA70(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31AE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B75AAB0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31AE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B75AB04(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF31AE8;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B79CA08(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B75AB80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75ABD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B79C884(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75AD98(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B75ADB4(_QWORD *result)
{
  *result = &off_24DF31B20;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_21B75ADC8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24DF31B20;
  v4 = *(_QWORD *)(a1 + 24);
  v2 = (_QWORD *)(a1 + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_21B796830((uint64_t)v2, v3);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    sub_21B796830(a1 + 16, v5);
  sub_21B796878((void ***)(a1 + 8), 0);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_21B75AE28(uint64_t a1)
{
  sub_21B75ADC8(a1);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B75AE4C(_QWORD *a1, _QWORD *a2)
{
  void ***v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  void **v19;

  *a1 = &off_24DF31B20;
  a1[1] = 0;
  v4 = (void ***)(a1 + 1);
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  v6 = a1 + 3;
  if (a2[2])
  {
    v7 = operator new();
    v8 = v7;
    v9 = (__int128 *)a2[2];
    if (*((char *)v9 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v7, *(void **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v9 + 2);
      *(_OWORD *)v7 = v10;
    }
    v11 = *v5;
    *v5 = v8;
    if (v11)
      sub_21B796830((uint64_t)v5, v11);
  }
  if (a2[3])
  {
    v12 = operator new();
    v13 = v12;
    v14 = (__int128 *)a2[3];
    if (*((char *)v14 + 23) < 0)
    {
      sub_21B796AF0((_BYTE *)v12, *(void **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      *(_QWORD *)(v12 + 16) = *((_QWORD *)v14 + 2);
      *(_OWORD *)v12 = v15;
    }
    v16 = *v6;
    *v6 = v13;
    if (v16)
      sub_21B796830((uint64_t)v6, v16);
  }
  if (a2[1])
  {
    v17 = (void **)operator new();
    PB::Data::Data();
    v19 = 0;
    sub_21B796878(v4, v17);
    sub_21B796878(&v19, 0);
  }
  return a1;
}

uint64_t sub_21B75AFC4(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (a1[1])
    PB::TextFormatter::format();
  if (a1[2])
    PB::TextFormatter::format();
  if (a1[3])
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75B03C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t result;
  void **v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (void ***)(a1 + 8);
    v8 = (uint64_t *)(a1 + 24);
    v9 = (uint64_t *)(a1 + 16);
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 4)
      {
        v26 = operator new();
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        v31 = 0;
        sub_21B796878(v7, (void **)v26);
        sub_21B796878(&v31, 0);
        PB::Reader::read();
      }
      else
      {
        if ((_DWORD)v22 == 3)
        {
          v27 = (_QWORD *)operator new();
          v27[1] = 0;
          v27[2] = 0;
          *v27 = 0;
          v31 = 0;
          v28 = *v8;
          *v8 = (uint64_t)v27;
          if (v28)
          {
            sub_21B796830((uint64_t)v8, v28);
            v29 = v31;
            v31 = 0;
            if (v29)
              sub_21B796830((uint64_t)&v31, (uint64_t)v29);
          }
        }
        else
        {
          if ((_DWORD)v22 != 2)
          {
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            goto LABEL_35;
          }
          v23 = (_QWORD *)operator new();
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          v31 = 0;
          v24 = *v9;
          *v9 = (uint64_t)v23;
          if (v24)
          {
            sub_21B796830((uint64_t)v9, v24);
            v25 = v31;
            v31 = 0;
            if (v25)
              sub_21B796830((uint64_t)&v31, (uint64_t)v25);
          }
        }
        PB::Reader::read();
      }
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_21B75B298(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 16))
    result = PB::Writer::write();
  if (*(_QWORD *)(v1 + 24))
    result = PB::Writer::write();
  if (*(_QWORD *)(v1 + 8))
    return PB::Writer::write();
  return result;
}

uint64_t sub_21B75B2FC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31B58;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B75B314(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75B338(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)result = &off_24DF31B58;
  *(_DWORD *)(result + 20) = 0;
  v2 = *(_BYTE *)(a2 + 20);
  if ((v2 & 4) != 0)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v3 = 4;
    *(_BYTE *)(result + 20) = 4;
    *(_DWORD *)(result + 16) = v4;
    v2 = *(_BYTE *)(a2 + 20);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 20) = v3;
    *(_DWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(result + 20) = v3 | 2;
    *(_DWORD *)(result + 12) = v6;
  }
  return result;
}

uint64_t sub_21B75B3A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "threshold");
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "level");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75B438(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 12) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 8) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75B7B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 16));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_21B75B830(_QWORD *result)
{
  *result = &off_24DF31B90;
  result[1] = 0;
  return result;
}

void sub_21B75B840(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31B90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B75B880(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31B90;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B75B8D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF31B90;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B4EF8(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B75B950(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75B9A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_21B7B4CE8(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75BB68(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_21B75BB84(_QWORD *result)
{
  *result = &off_24DF31BC8;
  result[1] = 0;
  return result;
}

void sub_21B75BB94(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31BC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_21B75BBD4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24DF31BC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x220766390);
}

_QWORD *sub_21B75BC28(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_24DF31BC8;
  a1[1] = 0;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = operator new();
    v5 = sub_21B7B5F60(v4, *(_QWORD *)(a2 + 8));
    v6 = a1[1];
    a1[1] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

uint64_t sub_21B75BCA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75BCF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_21B7B5E04(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75BEBC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_21B75BED8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31C00;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_21B75BEF0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75BF14(uint64_t result, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;

  *(_QWORD *)result = &off_24DF31C00;
  *(_DWORD *)(result + 20) = 0;
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_BYTE *)(result + 20) = 1;
    *(_QWORD *)(result + 8) = v3;
    v2 = 3;
    if ((*(_BYTE *)(a2 + 20) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    v4 = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(result + 20) = v2;
    *(_DWORD *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_21B75BF64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75BFCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75C2F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B75C34C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31C38;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_21B75C364(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75C388(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;

  *(_QWORD *)result = &off_24DF31C38;
  *(_DWORD *)(result + 100) = 0;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v3 = 4;
    *(_DWORD *)(result + 100) = 4;
    *(_QWORD *)(result + 24) = v4;
    v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 32);
    v3 |= 8u;
    *(_DWORD *)(result + 100) = v3;
    *(_DWORD *)(result + 32) = v5;
    v2 = *(_DWORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 60);
    v3 |= 0x400u;
    *(_DWORD *)(result + 100) = v3;
    *(_DWORD *)(result + 60) = v6;
    v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 100) = v3;
  *(_QWORD *)(result + 16) = v7;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 40) = v8;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  v9 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 100) = v3;
  *(_QWORD *)(result + 8) = v9;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  v10 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 68) = v10;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  v11 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 64) = v11;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  v12 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 48) = v12;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  v13 = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 44) = v13;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 72) = v14;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  v15 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 52) = v15;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  v16 = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 92) = v16;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  v17 = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 88) = v17;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  v18 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 56) = v18;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  v19 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 36) = v19;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  v20 = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 84) = v20;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_41;
  }
LABEL_40:
  v21 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 80) = v21;
  v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x4000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80000) == 0)
      return result;
LABEL_42:
    v23 = *(_BYTE *)(a2 + 96);
    *(_DWORD *)(result + 100) = v3 | 0x80000;
    *(_BYTE *)(result + 96) = v23;
    return result;
  }
LABEL_41:
  v22 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 100) = v3;
  *(_DWORD *)(result + 76) = v22;
  if ((*(_DWORD *)(a2 + 100) & 0x80000) != 0)
    goto LABEL_42;
  return result;
}

uint64_t sub_21B75C5D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "dataBufferSize");
    v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gestureLengthSeconds", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isWristLooselyLevel");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "negPeakHeight", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "negPeakLeftHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "negPeakRightHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "negPeakTimestampUs");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "negPeakTotalAngleDegrees", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "pauseBtwPeaksSeconds", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "posPeakHeight", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "posPeakLeftHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "posPeakRightHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "posPeakTimestampUs");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "posPeakTotalAngleDegrees", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotZRangeDuringGestureRad", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "screenTiltAtEndDegrees", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "screenTiltAtStartDegrees", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(this, "wristAngleDiffBtwPeaksDegrees", *(float *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 100) & 0x40000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(this, "timestampUs");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x40000) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "wristAngleToHorizontalDegrees", *(float *)(a1 + 92));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75C884(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 4u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_179;
                  }
                  v73 = v20++;
                  v74 = *(_BYTE *)(v21 + v73);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_178:
                v2 = v73 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_179;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_179:
              *(_QWORD *)(a1 + 24) = v24;
              goto LABEL_215;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_184;
                  }
                  v77 = v27++;
                  v78 = *(_BYTE *)(v28 + v77);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_183:
                    v2 = v77 + 1;
                    goto LABEL_184;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_183;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_184;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_184:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_215;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_189;
                  }
                  v81 = v33++;
                  v82 = *(_BYTE *)(v34 + v81);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_188:
                    v2 = v81 + 1;
                    goto LABEL_189;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_188;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_189;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_189:
              *(_QWORD *)(a1 + 16) = v37;
              goto LABEL_215;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 1u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_194;
                  }
                  v85 = v39++;
                  v86 = *(_BYTE *)(v40 + v85);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_193:
                    v2 = v85 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_193;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_194;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_194:
              *(_QWORD *)(a1 + 8) = v43;
              goto LABEL_215;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_199;
                  }
                  v89 = v45++;
                  v90 = *(_BYTE *)(v46 + v89);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_198:
                    v2 = v89 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_198;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_199;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_199:
              *(_DWORD *)(a1 + 68) = v49;
              goto LABEL_215;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_204;
                  }
                  v93 = v51++;
                  v94 = *(_BYTE *)(v52 + v93);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_203:
                    v2 = v93 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_203;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_204;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_204:
              *(_DWORD *)(a1 + 64) = v55;
              goto LABEL_215;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_209;
                  }
                  v97 = v57++;
                  v98 = *(_BYTE *)(v58 + v97);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_208:
                    v2 = v97 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_208;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_209;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_209:
              *(_DWORD *)(a1 + 48) = v61;
              goto LABEL_215;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_214;
                  }
                  v101 = v63++;
                  v102 = *(_BYTE *)(v64 + v101);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_213:
                    v2 = v101 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
                goto LABEL_213;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_214;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_214:
              *(_DWORD *)(a1 + 44) = v67;
LABEL_215:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_174:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_215;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v70 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v69 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v70 = v69 != 0;
              }
              *(_BYTE *)(a1 + 96) = v70;
              goto LABEL_215;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_215;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B75D40C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 100);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  if ((*(_DWORD *)(v3 + 100) & 0x80000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B75D660(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31C70;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B75D678(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B75D69C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  float result;

  *(_QWORD *)a1 = &off_24DF31C70;
  *(_DWORD *)(a1 + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 24);
    v3 |= 8u;
    *(_BYTE *)(a1 + 28) = v3;
    *(float *)(a1 + 24) = result;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 2) == 0)
      return result;
LABEL_10:
    result = *(float *)(a2 + 16);
    *(_BYTE *)(a1 + 28) = v3 | 2;
    *(float *)(a1 + 16) = result;
    return result;
  }
  result = *(float *)(a2 + 20);
  v3 |= 4u;
  *(_BYTE *)(a1 + 28) = v3;
  *(float *)(a1 + 20) = result;
  if ((*(_BYTE *)(a2 + 28) & 2) != 0)
    goto LABEL_10;
  return result;
}

uint64_t sub_21B75D728(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxSymmetryAllowanceFactor", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "minTwistAngleThresholdDeg", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "minPeakRotationRateThresholdRps", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampUs");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75D7D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_52;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_52:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_53;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_53:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_54;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_48:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_54;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_54:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B75DAE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_21B75DB7C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31CA8;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_21B75DB94(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B75DBB8(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  double result;
  char v5;
  char v6;
  char v7;

  *(_QWORD *)a1 = &off_24DF31CA8;
  *(_DWORD *)(a1 + 52) = 0;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 1) != 0)
  {
    result = *(double *)(a2 + 8);
    v3 = 1;
    *(_WORD *)(a1 + 52) = 1;
    *(double *)(a1 + 8) = result;
    v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    LODWORD(result) = *(_DWORD *)(a2 + 36);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 52) = v3;
    *(_DWORD *)(a1 + 36) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 52);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(result) = *(_DWORD *)(a2 + 40);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 52) = v3;
    *(_DWORD *)(a1 + 40) = LODWORD(result);
    v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 44);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 44) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  LODWORD(result) = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 24) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  LODWORD(result) = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 28) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  LODWORD(result) = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 52) = v3;
  *(_DWORD *)(a1 + 32) = LODWORD(result);
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v5 = *(_BYTE *)(a2 + 48);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 52) = v3;
  *(_BYTE *)(a1 + 48) = v5;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v6 = *(_BYTE *)(a2 + 49);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 52) = v3;
  *(_BYTE *)(a1 + 49) = v6;
  v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      return result;
LABEL_24:
    result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 52) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_23:
  v7 = *(_BYTE *)(a2 + 50);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 52) = v3;
  *(_BYTE *)(a1 + 50) = v7;
  if ((*(_WORD *)(a2 + 52) & 2) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B75DD08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "validX");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "validY");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "validZ");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 52) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B75DE98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  uint64_t result;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_62;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_WORD *)(a1 + 52) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_WORD *)(a1 + 52) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_43:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_63;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 48) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 49) = v26;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v23 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v22 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v23 = v22 != 0;
          }
          *(_BYTE *)(a1 + 50) = v23;
          break;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_63:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_50:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75E2A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_22:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

double sub_21B75E400(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31CE0;
  *(_DWORD *)(a1 + 140) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_21B75E430(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_24DF31CE0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_21B75E4A0(PB::Base *a1)
{
  sub_21B75E430(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75E4C4(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)a1 = &off_24DF31CE0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 140) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  if ((*(_BYTE *)(a2 + 140) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 140) = 1;
    *(_QWORD *)(a1 + 104) = v5;
  }
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  if ((*(_BYTE *)(a2 + 140) & 4) != 0)
  {
    v6 = *(_DWORD *)(a2 + 120);
    *(_BYTE *)(a1 + 140) |= 4u;
    *(_DWORD *)(a1 + 120) = v6;
  }
  if (a1 != a2)
    sub_21B796B90((char *)(a1 + 80), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  if ((*(_BYTE *)(a2 + 140) & 2) != 0)
  {
    v7 = *(_QWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 140) |= 2u;
    *(_QWORD *)(a1 + 112) = v7;
  }
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90((char *)(a1 + 56), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  }
  v8 = *(_BYTE *)(a2 + 140);
  if ((v8 & 0x20) != 0)
  {
    v11 = *(_DWORD *)(a2 + 132);
    *(_BYTE *)(a1 + 140) |= 0x20u;
    *(_DWORD *)(a1 + 132) = v11;
    v8 = *(_BYTE *)(a2 + 140);
    if ((v8 & 8) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) == 0)
        goto LABEL_16;
LABEL_21:
      v13 = *(_DWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 140) |= 0x10u;
      *(_DWORD *)(a1 + 128) = v13;
      if ((*(_BYTE *)(a2 + 140) & 0x40) == 0)
        return a1;
      goto LABEL_17;
    }
  }
  else if ((*(_BYTE *)(a2 + 140) & 8) == 0)
  {
    goto LABEL_15;
  }
  v12 = *(_DWORD *)(a2 + 124);
  *(_BYTE *)(a1 + 140) |= 8u;
  *(_DWORD *)(a1 + 124) = v12;
  v8 = *(_BYTE *)(a2 + 140);
  if ((v8 & 0x10) != 0)
    goto LABEL_21;
LABEL_16:
  if ((v8 & 0x40) != 0)
  {
LABEL_17:
    v9 = *(_DWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 140) |= 0x40u;
    *(_DWORD *)(a1 + 136) = v9;
  }
  return a1;
}

uint64_t sub_21B75E65C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 140) & 4) != 0)
    PB::TextFormatter::format(this, "armTimeActivityHints");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "armTimeImuConfidences", v7);
  }
  v8 = *(_BYTE *)(a1 + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionBtHintPercentage", *(float *)(a1 + 124));
    v8 = *(_BYTE *)(a1 + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a1 + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "sessionGpsHintPercentage", *(float *)(a1 + 128));
  if ((*(_BYTE *)(a1 + 140) & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "sessionImuHintPercentage", *(float *)(a1 + 132));
LABEL_9:
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "sessionSwivelAngleDegHistogram");
  }
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "sessionTiltAngleDegHistogram");
  }
  v13 = *(_BYTE *)(a1 + 140);
  if ((v13 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "sessionWifiHintPercentage", *(float *)(a1 + 136));
    v13 = *(_BYTE *)(a1 + 140);
    if ((v13 & 1) == 0)
    {
LABEL_15:
      if ((v13 & 2) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a1 + 140) & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "timestamp");
  if ((*(_BYTE *)(a1 + 140) & 2) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
LABEL_17:
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "windowAfterArmImuConfidences", v16);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B75E828(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  BOOL v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  char *v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  char *v147;
  _DWORD *v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  char *v177;
  int v178;
  unint64_t v179;
  char *v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char v198;
  unsigned int v199;
  unint64_t v201;
  char v202;
  unint64_t v203;
  char v204;
  void **v207;
  void **v208;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)(a1 + 72);
    v207 = (void **)(a1 + 32);
    v208 = (void **)(a1 + 56);
    v9 = (_QWORD *)(a1 + 48);
    v10 = (void **)(a1 + 80);
    v11 = a1 + 96;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v91 = v16++ > 8;
        if (v91)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v17 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 140) |= 1u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_265;
              v29 += 7;
              v26 = v32;
              v91 = v30++ > 8;
            }
            while (!v91);
LABEL_202:
            v31 = 0;
            goto LABEL_265;
          }
          v129 = 0;
          v130 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v26 + 1;
              v132 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v131;
              v31 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v26 = v131;
                v91 = v130++ > 8;
                if (v91)
                  goto LABEL_202;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
            }
            break;
          }
LABEL_265:
          *(_QWORD *)(a1 + 104) = v31;
          goto LABEL_339;
        case 2u:
          if (v25 != 2)
          {
            v134 = *(char **)(a1 + 16);
            v133 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v134 >= v133)
            {
              v151 = (char *)*v12;
              v152 = (v134 - (_BYTE *)*v12) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
LABEL_349:
                sub_21B796A0C();
              v154 = v133 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_21B796CD8(v13, v155);
                v151 = *(char **)(a1 + 8);
                v134 = *(char **)(a1 + 16);
              }
              else
              {
                v156 = 0;
              }
              v175 = &v156[4 * v152];
              *(_DWORD *)v175 = 0;
              v135 = v175 + 4;
              while (v134 != v151)
              {
                v176 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v175;
              *(_QWORD *)(a1 + 16) = v135;
              *(_QWORD *)(a1 + 24) = &v156[4 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v135 = v134 + 4;
            }
            *(_QWORD *)(a1 + 16) = v135;
            goto LABEL_286;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          while (v34 < v35 && !*((_BYTE *)this + 24))
          {
            v37 = *(char **)(a1 + 16);
            v36 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v12;
              v40 = (v37 - (_BYTE *)*v12) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                goto LABEL_349;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_21B796CD8(v13, v43);
                v39 = *(char **)(a1 + 8);
                v37 = *(char **)(a1 + 16);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = 0;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = v38;
              *(_QWORD *)(a1 + 24) = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v38 = v37 + 4;
            }
            *(_QWORD *)(a1 + 16) = v38;
            v47 = *((_QWORD *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
              goto LABEL_226;
            *(v38 - 1) = *(_DWORD *)(*(_QWORD *)this + v47);
            v35 = *((_QWORD *)this + 2);
            v34 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v34;
          }
          goto LABEL_227;
        case 3u:
          *(_BYTE *)(a1 + 140) |= 4u;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          v50 = *(_QWORD *)this;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)this + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_268;
              v51 += 7;
              v48 = v54;
              v91 = v52++ > 8;
            }
            while (!v91);
LABEL_211:
            LODWORD(v53) = 0;
            goto LABEL_268;
          }
          v136 = 0;
          v137 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v138 = v48 + 1;
              v139 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)this + 1) = v138;
              v53 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v48 = v138;
                v91 = v137++ > 8;
                if (v91)
                  goto LABEL_211;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_268:
          *(_DWORD *)(a1 + 120) = v53;
          goto LABEL_339;
        case 4u:
          if (v25 != 2)
          {
            v141 = *(char **)(a1 + 88);
            v140 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v141 >= v140)
            {
              v157 = (char *)*v10;
              v158 = (v141 - (_BYTE *)*v10) >> 2;
              v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62)
LABEL_350:
                sub_21B796A0C();
              v160 = v140 - (_QWORD)v157;
              if (v160 >> 1 > v159)
                v159 = v160 >> 1;
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                v161 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v161 = v159;
              if (v161)
              {
                v162 = (char *)sub_21B796CD8(v11, v161);
                v157 = *(char **)(a1 + 80);
                v141 = *(char **)(a1 + 88);
              }
              else
              {
                v162 = 0;
              }
              v177 = &v162[4 * v158];
              *(_DWORD *)v177 = 0;
              v135 = v177 + 4;
              while (v141 != v157)
              {
                v178 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v177;
              *(_QWORD *)(a1 + 88) = v135;
              *(_QWORD *)(a1 + 96) = &v162[4 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v135 = v141 + 4;
            }
            *(_QWORD *)(a1 + 88) = v135;
LABEL_286:
            v179 = *((_QWORD *)this + 1);
            if (v179 <= 0xFFFFFFFFFFFFFFFBLL && v179 + 4 <= *((_QWORD *)this + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(_QWORD *)this + v179);
LABEL_290:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_288:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_339;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            v59 = *(char **)(a1 + 88);
            v58 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v10;
              v62 = (v59 - (_BYTE *)*v10) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_350;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_21B796CD8(v11, v65);
                v61 = *(char **)(a1 + 80);
                v59 = *(char **)(a1 + 88);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v67;
              *(_QWORD *)(a1 + 88) = v60;
              *(_QWORD *)(a1 + 96) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *(_QWORD *)(a1 + 88) = v60;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
            {
LABEL_226:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_227;
            }
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)this + v69);
            v57 = *((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v56;
          }
          goto LABEL_227;
        case 5u:
          *(_BYTE *)(a1 + 140) |= 2u;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          v72 = *(_QWORD *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)this + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_271;
              v73 += 7;
              v70 = v76;
              v91 = v74++ > 8;
            }
            while (!v91);
LABEL_220:
            v75 = 0;
            goto LABEL_271;
          }
          v142 = 0;
          v143 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v71 == v70)
            {
              v75 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v144 = v70 + 1;
              v145 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)this + 1) = v144;
              v75 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v70 = v144;
                v91 = v143++ > 8;
                if (v91)
                  goto LABEL_220;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v75 = 0;
            }
            break;
          }
LABEL_271:
          *(_QWORD *)(a1 + 112) = v75;
          goto LABEL_339;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v78 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v78 >= *v9)
                {
                  v79 = (char *)*v207;
                  v80 = (v78 - (_BYTE *)*v207) >> 2;
                  v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 62)
                    goto LABEL_351;
                  v82 = *v9 - (_QWORD)v79;
                  if (v82 >> 1 > v81)
                    v81 = v82 >> 1;
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                    v83 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v83 = v81;
                  if (v83)
                  {
                    v84 = (char *)sub_21B796CD8((uint64_t)v9, v83);
                    v79 = *(char **)(a1 + 32);
                    v78 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v84 = 0;
                  }
                  v85 = &v84[4 * v80];
                  *(_DWORD *)v85 = 0;
                  v86 = v85 + 4;
                  while (v78 != v79)
                  {
                    v87 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v85 - 1) = v87;
                    v85 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v85;
                  *(_QWORD *)(a1 + 40) = v86;
                  *(_QWORD *)(a1 + 48) = &v84[4 * v83];
                  if (v79)
                    operator delete(v79);
                  v78 = v86;
                }
                else
                {
                  *(_DWORD *)v78 = 0;
                  v78 += 4;
                }
                *(_QWORD *)(a1 + 40) = v78;
                v89 = *((_QWORD *)this + 1);
                v88 = *((_QWORD *)this + 2);
                v90 = *(_QWORD *)this;
                v91 = v89 > 0xFFFFFFFFFFFFFFF5 || v89 + 10 > v88;
                if (v91)
                {
                  v92 = 0;
                  v93 = 0;
                  v99 = 0;
                  if (v88 <= v89)
                    v94 = *((_QWORD *)this + 1);
                  else
                    v94 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v94 == v89)
                      goto LABEL_225;
                    v95 = v89++;
                    v96 = *(_BYTE *)(v90 + v95);
                    *((_QWORD *)this + 1) = v89;
                    v99 |= (unint64_t)(v96 & 0x7F) << v92;
                    if ((v96 & 0x80) == 0)
                      break;
                    v92 += 7;
                    v91 = v93++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v99) = 0;
LABEL_135:
                  v100 = v95 + 1;
                }
                else
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  while (1)
                  {
                    v100 = v89 + 1;
                    *((_QWORD *)this + 1) = v89 + 1;
                    v101 = *(_BYTE *)(v90 + v89);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0)
                      break;
                    v97 += 7;
                    v89 = v100;
                    v91 = v98++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v78 - 1) = v99;
              }
              while (v100 < v88 && !*((_BYTE *)this + 24));
            }
            goto LABEL_227;
          }
          v147 = *(char **)(a1 + 40);
          v146 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v147 >= v146)
          {
            v163 = (char *)*v207;
            v164 = (v147 - (_BYTE *)*v207) >> 2;
            v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62)
LABEL_351:
              sub_21B796A0C();
            v166 = v146 - (_QWORD)v163;
            if (v166 >> 1 > v165)
              v165 = v166 >> 1;
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
              v167 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v167 = v165;
            if (v167)
            {
              v168 = (char *)sub_21B796CD8((uint64_t)v9, v167);
              v163 = *(char **)(a1 + 32);
              v147 = *(char **)(a1 + 40);
            }
            else
            {
              v168 = 0;
            }
            v180 = &v168[4 * v164];
            *(_DWORD *)v180 = 0;
            v148 = v180 + 4;
            while (v147 != v163)
            {
              v181 = *((_DWORD *)v147 - 1);
              v147 -= 4;
              *((_DWORD *)v180 - 1) = v181;
              v180 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v180;
            *(_QWORD *)(a1 + 40) = v148;
            *(_QWORD *)(a1 + 48) = &v168[4 * v167];
            if (v163)
              operator delete(v163);
          }
          else
          {
            *(_DWORD *)v147 = 0;
            v148 = v147 + 4;
          }
          *(_QWORD *)(a1 + 40) = v148;
          v182 = *((_QWORD *)this + 1);
          v183 = *((_QWORD *)this + 2);
          v184 = *(_QWORD *)this;
          v185 = 0;
          v186 = 0;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v190 = 0;
            while (1)
            {
              v191 = v182 + 1;
              *((_QWORD *)this + 1) = v182 + 1;
              v192 = *(_BYTE *)(v184 + v182);
              v190 |= (unint64_t)(v192 & 0x7F) << v185;
              if ((v192 & 0x80) == 0)
                goto LABEL_338;
              v185 += 7;
              v182 = v191;
              v91 = v186++ > 8;
              if (v91)
                goto LABEL_334;
            }
          }
          v190 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)this + 1);
          while (v183 != v182)
          {
            v188 = v182 + 1;
            v189 = *(_BYTE *)(v184 + v182);
            *((_QWORD *)this + 1) = v188;
            v190 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0)
              goto LABEL_336;
            v185 += 7;
            v182 = v188;
            v91 = v186++ > 8;
            if (v91)
              goto LABEL_334;
          }
          goto LABEL_335;
        case 7u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v78 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v78 >= *v8)
                {
                  v102 = (char *)*v208;
                  v103 = (v78 - (_BYTE *)*v208) >> 2;
                  v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62)
                    goto LABEL_352;
                  v105 = *v8 - (_QWORD)v102;
                  if (v105 >> 1 > v104)
                    v104 = v105 >> 1;
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v106 = v104;
                  if (v106)
                  {
                    v107 = (char *)sub_21B796CD8((uint64_t)v8, v106);
                    v102 = *(char **)(a1 + 56);
                    v78 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v108 = &v107[4 * v103];
                  *(_DWORD *)v108 = 0;
                  v109 = v108 + 4;
                  while (v78 != v102)
                  {
                    v110 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v108 - 1) = v110;
                    v108 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v108;
                  *(_QWORD *)(a1 + 64) = v109;
                  *(_QWORD *)(a1 + 72) = &v107[4 * v106];
                  if (v102)
                    operator delete(v102);
                  v78 = v109;
                }
                else
                {
                  *(_DWORD *)v78 = 0;
                  v78 += 4;
                }
                *(_QWORD *)(a1 + 64) = v78;
                v112 = *((_QWORD *)this + 1);
                v111 = *((_QWORD *)this + 2);
                v113 = *(_QWORD *)this;
                if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v111)
                {
                  v120 = 0;
                  v121 = 0;
                  v122 = 0;
                  while (1)
                  {
                    v123 = v112 + 1;
                    *((_QWORD *)this + 1) = v112 + 1;
                    v124 = *(_BYTE *)(v113 + v112);
                    v122 |= (unint64_t)(v124 & 0x7F) << v120;
                    if ((v124 & 0x80) == 0)
                      goto LABEL_181;
                    v120 += 7;
                    v112 = v123;
                    v91 = v121++ > 8;
                    if (v91)
                    {
                      LODWORD(v122) = 0;
                      goto LABEL_181;
                    }
                  }
                }
                v115 = 0;
                v116 = 0;
                v122 = 0;
                if (v111 <= v112)
                  v117 = *((_QWORD *)this + 1);
                else
                  v117 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v117 == v112)
                  {
LABEL_225:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v78 - 1) = 0;
                    goto LABEL_227;
                  }
                  v118 = v112++;
                  v119 = *(_BYTE *)(v113 + v118);
                  *((_QWORD *)this + 1) = v112;
                  v122 |= (unint64_t)(v119 & 0x7F) << v115;
                  if ((v119 & 0x80) == 0)
                    break;
                  v115 += 7;
                  v91 = v116++ > 8;
                  if (v91)
                  {
                    LODWORD(v122) = 0;
                    goto LABEL_180;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v122) = 0;
LABEL_180:
                v123 = v118 + 1;
LABEL_181:
                *((_DWORD *)v78 - 1) = v122;
              }
              while (v123 < v111 && !*((_BYTE *)this + 24));
            }
LABEL_227:
            PB::Reader::recallMark();
          }
          else
          {
            v150 = *(char **)(a1 + 64);
            v149 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v150 >= v149)
            {
              v169 = (char *)*v208;
              v170 = (v150 - (_BYTE *)*v208) >> 2;
              v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62)
LABEL_352:
                sub_21B796A0C();
              v172 = v149 - (_QWORD)v169;
              if (v172 >> 1 > v171)
                v171 = v172 >> 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                v173 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v173 = v171;
              if (v173)
              {
                v174 = (char *)sub_21B796CD8((uint64_t)v8, v173);
                v169 = *(char **)(a1 + 56);
                v150 = *(char **)(a1 + 64);
              }
              else
              {
                v174 = 0;
              }
              v193 = &v174[4 * v170];
              *(_DWORD *)v193 = 0;
              v148 = v193 + 4;
              while (v150 != v169)
              {
                v194 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v193 - 1) = v194;
                v193 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v193;
              *(_QWORD *)(a1 + 64) = v148;
              *(_QWORD *)(a1 + 72) = &v174[4 * v173];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *(_DWORD *)v150 = 0;
              v148 = v150 + 4;
            }
            *(_QWORD *)(a1 + 64) = v148;
            v195 = *((_QWORD *)this + 1);
            v196 = *((_QWORD *)this + 2);
            v197 = *(_QWORD *)this;
            v198 = 0;
            v199 = 0;
            if (v195 > 0xFFFFFFFFFFFFFFF5 || v195 + 10 > v196)
            {
              v190 = 0;
              if (v196 <= v195)
                v196 = *((_QWORD *)this + 1);
              while (v196 != v195)
              {
                v201 = v195 + 1;
                v202 = *(_BYTE *)(v197 + v195);
                *((_QWORD *)this + 1) = v201;
                v190 |= (unint64_t)(v202 & 0x7F) << v198;
                if ((v202 & 0x80) == 0)
                {
LABEL_336:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v190) = 0;
                  goto LABEL_338;
                }
                v198 += 7;
                v195 = v201;
                v91 = v199++ > 8;
                if (v91)
                {
LABEL_334:
                  LODWORD(v190) = 0;
                  goto LABEL_338;
                }
              }
LABEL_335:
              LODWORD(v190) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v190 = 0;
              while (1)
              {
                v203 = v195 + 1;
                *((_QWORD *)this + 1) = v195 + 1;
                v204 = *(_BYTE *)(v197 + v195);
                v190 |= (unint64_t)(v204 & 0x7F) << v198;
                if ((v204 & 0x80) == 0)
                  break;
                v198 += 7;
                v195 = v203;
                v91 = v199++ > 8;
                if (v91)
                  goto LABEL_334;
              }
            }
LABEL_338:
            *(v148 - 1) = v190;
          }
LABEL_339:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 8u:
          *(_BYTE *)(a1 + 140) |= 0x20u;
          v125 = *((_QWORD *)this + 1);
          if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v125);
          goto LABEL_290;
        case 9u:
          *(_BYTE *)(a1 + 140) |= 8u;
          v126 = *((_QWORD *)this + 1);
          if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v126);
          goto LABEL_290;
        case 0xAu:
          *(_BYTE *)(a1 + 140) |= 0x10u;
          v127 = *((_QWORD *)this + 1);
          if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v127);
          goto LABEL_290;
        case 0xBu:
          *(_BYTE *)(a1 + 140) |= 0x40u;
          v128 = *((_QWORD *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v128);
          goto LABEL_290;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_339;
      }
    }
    v20 = 0;
    v21 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B75F78C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = result;
  if ((*(_BYTE *)(result + 140) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  if ((*(_BYTE *)(v3 + 140) & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 140) & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 40);
  while (v10 != v11)
  {
    v10 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v12 = *(_QWORD *)(v3 + 56);
  v13 = *(_QWORD *)(v3 + 64);
  while (v12 != v13)
  {
    v12 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v14 = *(_BYTE *)(v3 + 140);
  if ((v14 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 132));
    v14 = *(_BYTE *)(v3 + 140);
    if ((v14 & 8) == 0)
    {
LABEL_21:
      if ((v14 & 0x10) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((*(_BYTE *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v14 = *(_BYTE *)(v3 + 140);
  if ((v14 & 0x10) == 0)
  {
LABEL_22:
    if ((v14 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 136));
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 140) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 136));
  return result;
}

double sub_21B75F8F4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31D18;
  *(_DWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B75F918(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF31D18;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B75F968(PB::Base *a1)
{
  sub_21B75F918(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B75F98C(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24DF31D18;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if ((*(_WORD *)(a2 + 104) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 56);
    *(_WORD *)(a1 + 104) = 1;
    *(_QWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 0x100) != 0)
  {
    v12 = *(_DWORD *)(a2 + 100);
    *(_WORD *)(a1 + 104) |= 0x100u;
    *(_DWORD *)(a1 + 100) = v12;
    v6 = *(_WORD *)(a2 + 104);
    if ((v6 & 0x40) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0)
        goto LABEL_8;
      goto LABEL_21;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_7;
  }
  v13 = *(_DWORD *)(a2 + 92);
  *(_WORD *)(a1 + 104) |= 0x40u;
  *(_DWORD *)(a1 + 92) = v13;
  v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  v14 = *(_DWORD *)(a2 + 96);
  *(_WORD *)(a1 + 104) |= 0x80u;
  *(_DWORD *)(a1 + 96) = v14;
  v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  v15 = *(_DWORD *)(a2 + 88);
  *(_WORD *)(a1 + 104) |= 0x20u;
  *(_DWORD *)(a1 + 88) = v15;
  v6 = *(_WORD *)(a2 + 104);
  if ((v6 & 2) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  v16 = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 104) |= 2u;
  *(_QWORD *)(a1 + 64) = v16;
  if ((*(_WORD *)(a2 + 104) & 4) != 0)
  {
LABEL_11:
    v7 = *(_QWORD *)(a2 + 72);
    *(_WORD *)(a1 + 104) |= 4u;
    *(_QWORD *)(a1 + 72) = v7;
  }
LABEL_12:
  if (a1 != a2)
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v8 = *(_WORD *)(a2 + 104);
  if ((v8 & 0x10) != 0)
  {
    v9 = *(_DWORD *)(a2 + 84);
    *(_WORD *)(a1 + 104) |= 0x10u;
    *(_DWORD *)(a1 + 84) = v9;
    v8 = *(_WORD *)(a2 + 104);
  }
  if ((v8 & 8) != 0)
  {
    v10 = *(_DWORD *)(a2 + 80);
    *(_WORD *)(a1 + 104) |= 8u;
    *(_DWORD *)(a1 + 80) = v10;
  }
  return a1;
}

uint64_t sub_21B75FB2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionGreenFieldPercentage", *(float *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 104);
  }
  if ((v5 & 0x10) != 0)
    PB::TextFormatter::format(this, "sessionHighRotationPercentage", *(float *)(a1 + 84));
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(this, "sessionMeanPoseAngleXHistogram");
  }
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp");
    v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x20) == 0)
    {
LABEL_9:
      if ((v8 & 2) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "triggerTimeInternalDrivingState");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_10:
    if ((v8 & 4) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "triggerTimeLastHighElevationGainTimestamp");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_11:
    if ((v8 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "windowAfterArmGreenFieldPercentage", *(float *)(a1 + 92));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_23:
  PB::TextFormatter::format(this, "windowAfterArmHighImuDrivingConfidencePercentage", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "windowAfterArmHighRotationPercentage", *(float *)(a1 + 100));
LABEL_15:
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "windowAfterArmMeanPoseAngleXHistogram");
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B75FCDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  unint64_t v149;
  char v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  unint64_t v162;
  char v163;
  unint64_t v164;
  char v165;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (_QWORD *)(a1 + 24);
    v10 = (void **)(a1 + 32);
    v11 = (_QWORD *)(a1 + 48);
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v45 = v14++ > 8;
        if (v45)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 104) |= 1u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_216;
              v27 += 7;
              v24 = v30;
              v45 = v28++ > 8;
            }
            while (!v45);
LABEL_164:
            v29 = 0;
            goto LABEL_216;
          }
          v108 = 0;
          v109 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              v29 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v110 = v24 + 1;
              v111 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v110;
              v29 |= (unint64_t)(v111 & 0x7F) << v108;
              if (v111 < 0)
              {
                v108 += 7;
                v24 = v110;
                v45 = v109++ > 8;
                if (v45)
                  goto LABEL_164;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v29 = 0;
            }
            break;
          }
LABEL_216:
          *(_QWORD *)(a1 + 56) = v29;
          goto LABEL_274;
        case 2u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v32 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v32 >= *v11)
                {
                  v33 = (char *)*v10;
                  v34 = (v32 - (_BYTE *)*v10) >> 2;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62)
                    goto LABEL_284;
                  v36 = *v11 - (_QWORD)v33;
                  if (v36 >> 1 > v35)
                    v35 = v36 >> 1;
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                    v37 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v35;
                  if (v37)
                  {
                    v38 = (char *)sub_21B796CD8((uint64_t)v11, v37);
                    v33 = *(char **)(a1 + 32);
                    v32 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = &v38[4 * v34];
                  *(_DWORD *)v39 = 0;
                  v40 = v39 + 4;
                  while (v32 != v33)
                  {
                    v41 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    v39 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v39;
                  *(_QWORD *)(a1 + 40) = v40;
                  *(_QWORD *)(a1 + 48) = &v38[4 * v37];
                  if (v33)
                    operator delete(v33);
                  v32 = v40;
                }
                else
                {
                  *(_DWORD *)v32 = 0;
                  v32 += 4;
                }
                *(_QWORD *)(a1 + 40) = v32;
                v43 = *((_QWORD *)this + 1);
                v42 = *((_QWORD *)this + 2);
                v44 = *(_QWORD *)this;
                v45 = v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v42;
                if (v45)
                {
                  v46 = 0;
                  v47 = 0;
                  v53 = 0;
                  if (v42 <= v43)
                    v48 = *((_QWORD *)this + 1);
                  else
                    v48 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v48 == v43)
                      goto LABEL_190;
                    v49 = v43++;
                    v50 = *(_BYTE *)(v44 + v49);
                    *((_QWORD *)this + 1) = v43;
                    v53 |= (unint64_t)(v50 & 0x7F) << v46;
                    if ((v50 & 0x80) == 0)
                      break;
                    v46 += 7;
                    v45 = v47++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      goto LABEL_71;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v53) = 0;
LABEL_71:
                  v54 = v49 + 1;
                }
                else
                {
                  v51 = 0;
                  v52 = 0;
                  v53 = 0;
                  while (1)
                  {
                    v54 = v43 + 1;
                    *((_QWORD *)this + 1) = v43 + 1;
                    v55 = *(_BYTE *)(v44 + v43);
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0)
                      break;
                    v51 += 7;
                    v43 = v54;
                    v45 = v52++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v32 - 1) = v53;
              }
              while (v54 < v42 && !*((_BYTE *)this + 24));
            }
            goto LABEL_191;
          }
          v113 = *(char **)(a1 + 40);
          v112 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v113 >= v112)
          {
            v129 = (char *)*v10;
            v130 = (v113 - (_BYTE *)*v10) >> 2;
            v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 62)
LABEL_284:
              sub_21B796A0C();
            v132 = v112 - (_QWORD)v129;
            if (v132 >> 1 > v131)
              v131 = v132 >> 1;
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
              v133 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v133 = v131;
            if (v133)
            {
              v134 = (char *)sub_21B796CD8((uint64_t)v11, v133);
              v129 = *(char **)(a1 + 32);
              v113 = *(char **)(a1 + 40);
            }
            else
            {
              v134 = 0;
            }
            v141 = &v134[4 * v130];
            *(_DWORD *)v141 = 0;
            v114 = v141 + 4;
            while (v113 != v129)
            {
              v142 = *((_DWORD *)v113 - 1);
              v113 -= 4;
              *((_DWORD *)v141 - 1) = v142;
              v141 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v141;
            *(_QWORD *)(a1 + 40) = v114;
            *(_QWORD *)(a1 + 48) = &v134[4 * v133];
            if (v129)
              operator delete(v129);
          }
          else
          {
            *(_DWORD *)v113 = 0;
            v114 = v113 + 4;
          }
          *(_QWORD *)(a1 + 40) = v114;
          v143 = *((_QWORD *)this + 1);
          v144 = *((_QWORD *)this + 2);
          v145 = *(_QWORD *)this;
          v146 = 0;
          v147 = 0;
          if (v143 <= 0xFFFFFFFFFFFFFFF5 && v143 + 10 <= v144)
          {
            v151 = 0;
            while (1)
            {
              v152 = v143 + 1;
              *((_QWORD *)this + 1) = v143 + 1;
              v153 = *(_BYTE *)(v145 + v143);
              v151 |= (unint64_t)(v153 & 0x7F) << v146;
              if ((v153 & 0x80) == 0)
                goto LABEL_273;
              v146 += 7;
              v143 = v152;
              v45 = v147++ > 8;
              if (v45)
                goto LABEL_269;
            }
          }
          v151 = 0;
          if (v144 <= v143)
            v144 = *((_QWORD *)this + 1);
          while (v144 != v143)
          {
            v149 = v143 + 1;
            v150 = *(_BYTE *)(v145 + v143);
            *((_QWORD *)this + 1) = v149;
            v151 |= (unint64_t)(v150 & 0x7F) << v146;
            if ((v150 & 0x80) == 0)
              goto LABEL_271;
            v146 += 7;
            v143 = v149;
            v45 = v147++ > 8;
            if (v45)
              goto LABEL_269;
          }
          goto LABEL_270;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_193;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_193;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v58);
          goto LABEL_193;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x20u;
          v59 = *((_QWORD *)this + 1);
          v60 = *((_QWORD *)this + 2);
          v61 = *(_QWORD *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v65 = v59 + 1;
              *((_QWORD *)this + 1) = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                goto LABEL_219;
              v62 += 7;
              v59 = v65;
              v45 = v63++ > 8;
            }
            while (!v45);
LABEL_173:
            LODWORD(v64) = 0;
            goto LABEL_219;
          }
          v115 = 0;
          v116 = 0;
          v64 = 0;
          if (v60 <= v59)
            v60 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v60 == v59)
            {
              LODWORD(v64) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v59 + 1;
              v118 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)this + 1) = v117;
              v64 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v59 = v117;
                v45 = v116++ > 8;
                if (v45)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v64) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 88) = v64;
          goto LABEL_274;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          v67 = *((_QWORD *)this + 1);
          v68 = *((_QWORD *)this + 2);
          v69 = *(_QWORD *)this;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            v70 = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              v73 = v67 + 1;
              *((_QWORD *)this + 1) = v67 + 1;
              v74 = *(_BYTE *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0)
                goto LABEL_222;
              v70 += 7;
              v67 = v73;
              v45 = v71++ > 8;
            }
            while (!v45);
LABEL_180:
            v72 = 0;
            goto LABEL_222;
          }
          v119 = 0;
          v120 = 0;
          v72 = 0;
          if (v68 <= v67)
            v68 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v68 == v67)
            {
              v72 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v121 = v67 + 1;
              v122 = *(_BYTE *)(v69 + v67);
              *((_QWORD *)this + 1) = v121;
              v72 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v67 = v121;
                v45 = v120++ > 8;
                if (v45)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v72 = 0;
            }
            break;
          }
LABEL_222:
          *(_QWORD *)(a1 + 64) = v72;
          goto LABEL_274;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          v75 = *((_QWORD *)this + 1);
          v76 = *((_QWORD *)this + 2);
          v77 = *(_QWORD *)this;
          if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
          {
            v78 = 0;
            v79 = 0;
            v80 = 0;
            do
            {
              v81 = v75 + 1;
              *((_QWORD *)this + 1) = v75 + 1;
              v82 = *(_BYTE *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0)
                goto LABEL_225;
              v78 += 7;
              v75 = v81;
              v45 = v79++ > 8;
            }
            while (!v45);
LABEL_187:
            v80 = 0;
            goto LABEL_225;
          }
          v123 = 0;
          v124 = 0;
          v80 = 0;
          if (v76 <= v75)
            v76 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v76 == v75)
            {
              v80 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v125 = v75 + 1;
              v126 = *(_BYTE *)(v77 + v75);
              *((_QWORD *)this + 1) = v125;
              v80 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v75 = v125;
                v45 = v124++ > 8;
                if (v45)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v80 = 0;
            }
            break;
          }
LABEL_225:
          *(_QWORD *)(a1 + 72) = v80;
          goto LABEL_274;
        case 9u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v32 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v32 >= *v9)
                {
                  v84 = (char *)*v8;
                  v85 = (v32 - (_BYTE *)*v8) >> 2;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 62)
                    goto LABEL_285;
                  v87 = *v9 - (_QWORD)v84;
                  if (v87 >> 1 > v86)
                    v86 = v87 >> 1;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                    v88 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                  {
                    v89 = (char *)sub_21B796CD8((uint64_t)v9, v88);
                    v84 = *(char **)(a1 + 8);
                    v32 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v89 = 0;
                  }
                  v90 = &v89[4 * v85];
                  *(_DWORD *)v90 = 0;
                  v91 = v90 + 4;
                  while (v32 != v84)
                  {
                    v92 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v90 - 1) = v92;
                    v90 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v90;
                  *(_QWORD *)(a1 + 16) = v91;
                  *(_QWORD *)(a1 + 24) = &v89[4 * v88];
                  if (v84)
                    operator delete(v84);
                  v32 = v91;
                }
                else
                {
                  *(_DWORD *)v32 = 0;
                  v32 += 4;
                }
                *(_QWORD *)(a1 + 16) = v32;
                v94 = *((_QWORD *)this + 1);
                v93 = *((_QWORD *)this + 2);
                v95 = *(_QWORD *)this;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v93)
                {
                  v102 = 0;
                  v103 = 0;
                  v104 = 0;
                  while (1)
                  {
                    v105 = v94 + 1;
                    *((_QWORD *)this + 1) = v94 + 1;
                    v106 = *(_BYTE *)(v95 + v94);
                    v104 |= (unint64_t)(v106 & 0x7F) << v102;
                    if ((v106 & 0x80) == 0)
                      goto LABEL_152;
                    v102 += 7;
                    v94 = v105;
                    v45 = v103++ > 8;
                    if (v45)
                    {
                      LODWORD(v104) = 0;
                      goto LABEL_152;
                    }
                  }
                }
                v97 = 0;
                v98 = 0;
                v104 = 0;
                if (v93 <= v94)
                  v99 = *((_QWORD *)this + 1);
                else
                  v99 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v99 == v94)
                  {
LABEL_190:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v32 - 1) = 0;
                    goto LABEL_191;
                  }
                  v100 = v94++;
                  v101 = *(_BYTE *)(v95 + v100);
                  *((_QWORD *)this + 1) = v94;
                  v104 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    break;
                  v97 += 7;
                  v45 = v98++ > 8;
                  if (v45)
                  {
                    LODWORD(v104) = 0;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v104) = 0;
LABEL_151:
                v105 = v100 + 1;
LABEL_152:
                *((_DWORD *)v32 - 1) = v104;
              }
              while (v105 < v93 && !*((_BYTE *)this + 24));
            }
LABEL_191:
            PB::Reader::recallMark();
          }
          else
          {
            v128 = *(char **)(a1 + 16);
            v127 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v128 >= v127)
            {
              v135 = (char *)*v8;
              v136 = (v128 - (_BYTE *)*v8) >> 2;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62)
LABEL_285:
                sub_21B796A0C();
              v138 = v127 - (_QWORD)v135;
              if (v138 >> 1 > v137)
                v137 = v138 >> 1;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
                v139 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_21B796CD8((uint64_t)v9, v139);
                v135 = *(char **)(a1 + 8);
                v128 = *(char **)(a1 + 16);
              }
              else
              {
                v140 = 0;
              }
              v154 = &v140[4 * v136];
              *(_DWORD *)v154 = 0;
              v114 = v154 + 4;
              while (v128 != v135)
              {
                v155 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v154;
              *(_QWORD *)(a1 + 16) = v114;
              *(_QWORD *)(a1 + 24) = &v140[4 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_DWORD *)v128 = 0;
              v114 = v128 + 4;
            }
            *(_QWORD *)(a1 + 16) = v114;
            v156 = *((_QWORD *)this + 1);
            v157 = *((_QWORD *)this + 2);
            v158 = *(_QWORD *)this;
            v159 = 0;
            v160 = 0;
            if (v156 > 0xFFFFFFFFFFFFFFF5 || v156 + 10 > v157)
            {
              v151 = 0;
              if (v157 <= v156)
                v157 = *((_QWORD *)this + 1);
              while (v157 != v156)
              {
                v162 = v156 + 1;
                v163 = *(_BYTE *)(v158 + v156);
                *((_QWORD *)this + 1) = v162;
                v151 |= (unint64_t)(v163 & 0x7F) << v159;
                if ((v163 & 0x80) == 0)
                {
LABEL_271:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v151) = 0;
                  goto LABEL_273;
                }
                v159 += 7;
                v156 = v162;
                v45 = v160++ > 8;
                if (v45)
                {
LABEL_269:
                  LODWORD(v151) = 0;
                  goto LABEL_273;
                }
              }
LABEL_270:
              LODWORD(v151) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v151 = 0;
              while (1)
              {
                v164 = v156 + 1;
                *((_QWORD *)this + 1) = v156 + 1;
                v165 = *(_BYTE *)(v158 + v156);
                v151 |= (unint64_t)(v165 & 0x7F) << v159;
                if ((v165 & 0x80) == 0)
                  break;
                v159 += 7;
                v156 = v164;
                v45 = v160++ > 8;
                if (v45)
                  goto LABEL_269;
              }
            }
LABEL_273:
            *(v114 - 1) = v151;
          }
LABEL_274:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x10u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_193;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 8u;
          v107 = *((_QWORD *)this + 1);
          if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v107);
LABEL_193:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_157:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_274;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_274;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B760974(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;

  v3 = result;
  if ((*(_WORD *)(result + 104) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  while (v4 != v5)
  {
    v4 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 100));
    v6 = *(_WORD *)(v3 + 104);
    if ((v6 & 0x40) == 0)
    {
LABEL_8:
      if ((v6 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
LABEL_24:
    result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 104) & 4) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 2) != 0)
    goto LABEL_24;
LABEL_11:
  if ((v6 & 4) != 0)
LABEL_12:
    result = PB::Writer::writeVarInt(this);
LABEL_13:
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v9 = *(_WORD *)(v3 + 104);
  if ((v9 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 84));
    v9 = *(_WORD *)(v3 + 104);
  }
  if ((v9 & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 80));
  return result;
}

uint64_t sub_21B760AD8(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31D50;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_21B760AF0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B760B14(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  char v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)result = &off_24DF31D50;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x400) != 0)
  {
    v4 = *(_BYTE *)(a2 + 64);
    v3 = 1024;
    *(_WORD *)(result + 68) = 1024;
    *(_BYTE *)(result + 64) = v4;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 52);
    v3 |= 0x80u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 52) = v5;
    v2 = *(_WORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    v6 = *(_DWORD *)(a2 + 48);
    v3 |= 0x40u;
    *(_WORD *)(result + 68) = v3;
    *(_DWORD *)(result + 48) = v6;
    v2 = *(_WORD *)(a2 + 68);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0)
        goto LABEL_9;
      goto LABEL_18;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x200u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 60) = v7;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v8 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 56) = v8;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v9 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 24) = v9;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_21;
  }
LABEL_20:
  v10 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 40) = v10;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 8) = v11;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 68) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_WORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      return result;
LABEL_24:
    v14 = *(_QWORD *)(a2 + 32);
    *(_WORD *)(result + 68) = v3 | 8;
    *(_QWORD *)(result + 32) = v14;
    return result;
  }
LABEL_23:
  v13 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_WORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v13;
  if ((*(_WORD *)(a2 + 68) & 8) != 0)
    goto LABEL_24;
  return result;
}

uint64_t sub_21B760C64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "diffPeakTimestampTrigger");
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pass");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pressureODR");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_WORD *)(a1 + 68) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x200) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B760DF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 64) = v21;
              goto LABEL_156;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v61 = v23++;
                  v62 = *(_BYTE *)(v24 + v61);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_129:
                    v2 = v61 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_129;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_130;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 52) = v27;
              goto LABEL_156;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_72;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_72;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_125;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_72;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v65 = v29++;
                  v66 = *(_BYTE *)(v30 + v65);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_134:
                    v2 = v65 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v33 = 0;
                goto LABEL_134;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_135;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_135:
              *(_QWORD *)(a1 + 24) = v33;
              goto LABEL_156;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  v69 = v35++;
                  v70 = *(_BYTE *)(v36 + v69);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_139:
                    v2 = v69 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_139;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_140;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 40) = v39;
              goto LABEL_156;
            case 8u:
              *(_WORD *)(a1 + 68) |= 1u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_144:
                    v2 = v73 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_144;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_145;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_145:
              *(_QWORD *)(a1 + 8) = v45;
              goto LABEL_156;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v77 = v47++;
                  v78 = *(_BYTE *)(v48 + v77);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_149:
                    v2 = v77 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
                goto LABEL_149;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_150;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_150:
              *(_QWORD *)(a1 + 16) = v51;
              goto LABEL_156;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_125:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_72:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_156;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 8u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_154:
                    v2 = v81 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_154;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_155;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_155:
              *(_QWORD *)(a1 + 32) = v57;
LABEL_156:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_156;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B76161C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x400) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_WORD *)(v3 + 68) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B761774(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31D88;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_21B76178C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B7617B0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v4;
  int v5;
  float result;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)a1 = &off_24DF31D88;
  *(_DWORD *)(a1 + 108) = 0;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800000) != 0)
  {
    v4 = *(_BYTE *)(a2 + 100);
    v3 = 0x800000;
    *(_DWORD *)(a1 + 108) = 0x800000;
    *(_BYTE *)(a1 + 100) = v4;
    v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x80000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 84);
    v3 |= 0x80000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(_DWORD *)(a1 + 84) = v5;
    v2 = *(_DWORD *)(a2 + 108);
  }
LABEL_6:
  if ((v2 & 0x20000) != 0)
  {
    result = *(float *)(a2 + 76);
    v3 |= 0x20000u;
    *(_DWORD *)(a1 + 108) = v3;
    *(float *)(a1 + 76) = result;
    v2 = *(_DWORD *)(a2 + 108);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0)
        goto LABEL_9;
      goto LABEL_35;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 72);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = *(float *)(a2 + 68);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x200000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = *(float *)(a2 + 92);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 92) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 80);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = *(float *)(a2 + 96);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = *(float *)(a2 + 56);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = *(float *)(a2 + 88);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 88) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = *(float *)(a2 + 64);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = *(float *)(a2 + 60);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 60) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  v7 = *(_BYTE *)(a2 + 103);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 103) = v7;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  v8 = *(_BYTE *)(a2 + 102);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 102) = v8;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  v9 = *(_BYTE *)(a2 + 101);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 101) = v9;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_20:
    if ((v2 & 2) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  v10 = *(_BYTE *)(a2 + 104);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_BYTE *)(a1 + 104) = v10;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 2) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  v11 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 12) = v11;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = *(float *)(a2 + 52);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  v12 = *(_DWORD *)(a2 + 40);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 40) = v12;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  v13 = *(_DWORD *)(a2 + 36);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 108) = v3;
  *(_DWORD *)(a1 + 36) = v13;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = *(float *)(a2 + 32);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 32) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x20) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0)
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  result = *(float *)(a2 + 28);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 28) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 4) == 0)
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  result = *(float *)(a2 + 20);
  v3 |= 8u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 20) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 4) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 16) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x10) == 0)
      goto LABEL_30;
    goto LABEL_56;
  }
LABEL_55:
  result = *(float *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 8) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x10) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_57;
  }
LABEL_56:
  result = *(float *)(a2 + 24);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 24) = result;
  v2 = *(_DWORD *)(a2 + 108);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x200) == 0)
      return result;
LABEL_58:
    result = *(float *)(a2 + 44);
    *(_DWORD *)(a1 + 108) = v3 | 0x200;
    *(float *)(a1 + 44) = result;
    return result;
  }
LABEL_57:
  result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 108) = v3;
  *(float *)(a1 + 48) = result;
  if ((*(_DWORD *)(a2 + 108) & 0x200) != 0)
    goto LABEL_58;
  return result;
}

uint64_t sub_21B761ADC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configDelaySpreadFpThreshold", *(float *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configFeatureSamples");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "configNonPlanarDelaySpreadThreshold", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "configNonPlanarPaprThreshold", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "configPeakEnergyFpThreshold", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "configPlanarDelaySpreadThreshold", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "configPlanarPaprThreshold", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configPostTriggerLimitTime");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configPreTriggerLimitTime");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configRawRmsMaxFpThreshold", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configRawRmsMeanFpThreshold", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "configRmsClipMinAmp", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "delaySpread", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isAudioTPQ");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isFpThresholdsMet");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isNonPlanarTp");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isPlanarTp");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isTauBarWithinRange");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "papr", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "peakEnergy", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "rawRmsMax", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "rawRmsMean", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "rawRmsSum", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rmsClipSum", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "sampleCount");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(this, "tTimesRmsClipSum", *(float *)(a1 + 92));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(this, "t2TimesRmsClipSum", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x400000) != 0)
LABEL_29:
    PB::TextFormatter::format(this, "tauBar", *(float *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B761E8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 108) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 100) = v21;
              goto LABEL_159;
            case 2u:
              *(_DWORD *)(a1 + 108) |= 0x80000u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  v57 = v23++;
                  v58 = *(_BYTE *)(v24 + v57);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_167:
                    v2 = v57 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_167;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_168;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_168:
              *(_DWORD *)(a1 + 84) = v27;
              goto LABEL_159;
            case 3u:
              *(_DWORD *)(a1 + 108) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 4u:
              *(_DWORD *)(a1 + 108) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 5u:
              *(_DWORD *)(a1 + 108) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 6u:
              *(_DWORD *)(a1 + 108) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 7u:
              *(_DWORD *)(a1 + 108) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 8u:
              *(_DWORD *)(a1 + 108) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 9u:
              *(_DWORD *)(a1 + 108) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xAu:
              *(_DWORD *)(a1 + 108) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xBu:
              *(_DWORD *)(a1 + 108) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xCu:
              *(_DWORD *)(a1 + 108) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xDu:
              *(_DWORD *)(a1 + 108) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 103) = v30;
              goto LABEL_159;
            case 0xEu:
              *(_DWORD *)(a1 + 108) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 102) = v32;
              goto LABEL_159;
            case 0xFu:
              *(_DWORD *)(a1 + 108) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 101) = v34;
              goto LABEL_159;
            case 0x10u:
              *(_DWORD *)(a1 + 108) |= 0x8000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 104) = v36;
              goto LABEL_159;
            case 0x11u:
              *(_DWORD *)(a1 + 108) |= 2u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  v61 = v37++;
                  v62 = *(_BYTE *)(v38 + v61);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_172:
                    v2 = v61 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_172;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_173;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_173:
              *(_DWORD *)(a1 + 12) = v41;
              goto LABEL_159;
            case 0x12u:
              *(_DWORD *)(a1 + 108) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x13u:
              *(_DWORD *)(a1 + 108) |= 0x100u;
              v43 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v44 = *(_QWORD *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v47 = 0;
                if (v2 <= v43)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  v65 = v43++;
                  v66 = *(_BYTE *)(v44 + v65);
                  *((_QWORD *)this + 1) = v43;
                  v47 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_177:
                    v2 = v65 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v47) = 0;
                goto LABEL_177;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              do
              {
                v2 = v43 + 1;
                *((_QWORD *)this + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0)
                  goto LABEL_178;
                v45 += 7;
                v43 = v2;
                v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_178:
              *(_DWORD *)(a1 + 40) = v47;
              goto LABEL_159;
            case 0x14u:
              *(_DWORD *)(a1 + 108) |= 0x80u;
              v49 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v50 = *(_QWORD *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v53 = 0;
                if (v2 <= v49)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  v69 = v49++;
                  v70 = *(_BYTE *)(v50 + v69);
                  *((_QWORD *)this + 1) = v49;
                  v53 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_182:
                    v2 = v69 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v53) = 0;
                goto LABEL_182;
              }
              v51 = 0;
              v52 = 0;
              v53 = 0;
              do
              {
                v2 = v49 + 1;
                *((_QWORD *)this + 1) = v49 + 1;
                v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0)
                  goto LABEL_183;
                v51 += 7;
                v49 = v2;
                v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 36) = v53;
LABEL_159:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x15u:
              *(_DWORD *)(a1 + 108) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x16u:
              *(_DWORD *)(a1 + 108) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x17u:
              *(_DWORD *)(a1 + 108) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x18u:
              *(_DWORD *)(a1 + 108) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x19u:
              *(_DWORD *)(a1 + 108) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x1Au:
              *(_DWORD *)(a1 + 108) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x1Bu:
              *(_DWORD *)(a1 + 108) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x1Cu:
              *(_DWORD *)(a1 + 108) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_158:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_118:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_159;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_159;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B762958(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 108);
  if ((v4 & 0x800000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 44));
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  if ((*(_DWORD *)(v3 + 108) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44));
  return result;
}

uint64_t sub_21B762C8C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31DC0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_21B762CA4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B762CC8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v4;
  float result;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24DF31DC0;
  *(_DWORD *)(a1 + 152) = 0;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000000) != 0)
  {
    v4 = *(_BYTE *)(a2 + 148);
    v3 = 0x20000000;
    *(_DWORD *)(a1 + 152) = 0x20000000;
    *(_BYTE *)(a1 + 148) = v4;
    v2 = *(_DWORD *)(a2 + 152);
    if ((v2 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x200000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 116);
    v3 |= 0x200000u;
    *(_DWORD *)(a1 + 152) = v3;
    *(float *)(a1 + 116) = result;
    v2 = *(_DWORD *)(a2 + 152);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *(_QWORD *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 152) = v3;
    *(_QWORD *)(a1 + 24) = v6;
    v2 = *(_DWORD *)(a2 + 152);
    if ((v2 & 0x10000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000000) == 0)
        goto LABEL_9;
      goto LABEL_37;
    }
  }
  else if ((v2 & 0x10000000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 144);
  v3 |= 0x10000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 144) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = *(float *)(a2 + 136);
  v3 |= 0x4000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 136) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x100000) == 0)
  {
LABEL_10:
    if ((v2 & 0x40000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  v7 = *(_DWORD *)(a2 + 112);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 112) = v7;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x40000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  v8 = *(_DWORD *)(a2 + 104);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 104) = v8;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x10) == 0)
  {
LABEL_12:
    if ((v2 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  v9 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 40) = v9;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = *(float *)(a2 + 140);
  v3 |= 0x8000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 140) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  v10 = *(_DWORD *)(a2 + 92);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 92) = v10;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  v11 = *(_DWORD *)(a2 + 88);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 88) = v11;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x800000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = *(float *)(a2 + 124);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 124) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = *(float *)(a2 + 120);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 120) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = *(float *)(a2 + 128);
  v3 |= 0x1000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 128) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x2000) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = *(float *)(a2 + 84);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 84) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x800) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = *(float *)(a2 + 80);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x800) == 0)
  {
LABEL_21:
    if ((v2 & 0x400) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = *(float *)(a2 + 76);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x400) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = *(float *)(a2 + 72);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 72) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 1) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = *(float *)(a2 + 68);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 1) == 0)
  {
LABEL_24:
    if ((v2 & 2) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  v12 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 8) = v12;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 2) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  v13 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 16) = v13;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = *(float *)(a2 + 96);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 96) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  v14 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 48) = v14;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_57;
  }
LABEL_56:
  result = *(float *)(a2 + 132);
  v3 |= 0x2000000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 132) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x20000) == 0)
  {
LABEL_29:
    if ((v2 & 0x100) == 0)
      goto LABEL_30;
    goto LABEL_58;
  }
LABEL_57:
  result = *(float *)(a2 + 100);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 100) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x100) == 0)
  {
LABEL_30:
    if ((v2 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_59;
  }
LABEL_58:
  result = *(float *)(a2 + 64);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 64) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x80000) == 0)
  {
LABEL_31:
    if ((v2 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_60;
  }
LABEL_59:
  v15 = *(_DWORD *)(a2 + 108);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_DWORD *)(a1 + 108) = v15;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 0x40) == 0)
  {
LABEL_32:
    if ((v2 & 8) == 0)
      goto LABEL_33;
    goto LABEL_61;
  }
LABEL_60:
  result = *(float *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 152) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_DWORD *)(a2 + 152);
  if ((v2 & 8) == 0)
  {
LABEL_33:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_62:
    result = *(float *)(a2 + 60);
    *(_DWORD *)(a1 + 152) = v3 | 0x80;
    *(float *)(a1 + 60) = result;
    return result;
  }
LABEL_61:
  v16 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 152) = v3;
  *(_QWORD *)(a1 + 32) = v16;
  if ((*(_DWORD *)(a2 + 152) & 0x80) != 0)
    goto LABEL_62;
  return result;
}

uint64_t sub_21B76302C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000000) != 0)
  {
    PB::TextFormatter::format(this, "airbagDetected");
    v5 = *(_DWORD *)(a1 + 152);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configMaximumAccelBaroTimeDifferenceThreshold", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "configMinimumAccelNormInWindowThreshold", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "configMinimumAccelNormOverEpochThreshold", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "configMinimumAccelNormThreshold", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configMinimumWidthThreshold", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configPeakPressureThreshold", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configRiseTimeThreshold", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configWidthThreshold", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "diffPeakTimeTrigger");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "diffTimeTrigger");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "eventStartTime");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "maxAccelNormOverEpoch", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 8) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "maxAccelNormOverEpochTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "numAirbags");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "numBarosInEpoch");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "odr");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "postEventPressureMedian", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "preEventPressureMedian", *(float *)(a1 + 124));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "prePostEventPressureMedian", *(float *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "pressureMedian", *(float *)(a1 + 132));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_DWORD *)(a1 + 152) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(this, "riseTimeTo80", *(float *)(a1 + 140));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x10000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 144));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B76341C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 152) |= 0x20000000u;
          v20 = *((_QWORD *)this + 1);
          if (v20 >= *((_QWORD *)this + 2))
          {
            v23 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = v20 + 1;
            v22 = *(unsigned __int8 *)(*(_QWORD *)this + v20);
            *((_QWORD *)this + 1) = v21;
            v23 = v22 != 0;
          }
          *(_BYTE *)(a1 + 148) = v23;
          goto LABEL_238;
        case 2u:
          *(_DWORD *)(a1 + 152) |= 0x200000u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_237;
        case 3u:
          *(_DWORD *)(a1 + 152) |= 4u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_246;
              v29 += 7;
              v26 = v32;
              v14 = v30++ > 8;
            }
            while (!v14);
LABEL_165:
            v31 = 0;
            goto LABEL_246;
          }
          v131 = 0;
          v132 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v133 = v26 + 1;
              v134 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v133;
              v31 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v26 = v133;
                v14 = v132++ > 8;
                if (v14)
                  goto LABEL_165;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
            }
            break;
          }
LABEL_246:
          *(_QWORD *)(a1 + 24) = v31;
          goto LABEL_238;
        case 4u:
          *(_DWORD *)(a1 + 152) |= 0x10000000u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_237;
        case 5u:
          *(_DWORD *)(a1 + 152) |= 0x4000000u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_237;
        case 6u:
          *(_DWORD *)(a1 + 152) |= 0x100000u;
          v36 = *((_QWORD *)this + 1);
          v37 = *((_QWORD *)this + 2);
          v38 = *(_QWORD *)this;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v36 + 1;
              *((_QWORD *)this + 1) = v36 + 1;
              v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0)
                goto LABEL_250;
              v39 += 7;
              v36 = v42;
              v14 = v40++ > 8;
            }
            while (!v14);
LABEL_172:
            LODWORD(v41) = 0;
            goto LABEL_250;
          }
          v135 = 0;
          v136 = 0;
          v41 = 0;
          if (v37 <= v36)
            v37 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v137 = v36 + 1;
              v138 = *(_BYTE *)(v38 + v36);
              *((_QWORD *)this + 1) = v137;
              v41 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v36 = v137;
                v14 = v136++ > 8;
                if (v14)
                  goto LABEL_172;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v41) = 0;
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 112) = v41;
          goto LABEL_238;
        case 7u:
          *(_DWORD *)(a1 + 152) |= 0x40000u;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          v46 = *(_QWORD *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v50 = v44 + 1;
              *((_QWORD *)this + 1) = v44 + 1;
              v51 = *(_BYTE *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0)
                goto LABEL_254;
              v47 += 7;
              v44 = v50;
              v14 = v48++ > 8;
            }
            while (!v14);
LABEL_179:
            LODWORD(v49) = 0;
            goto LABEL_254;
          }
          v139 = 0;
          v140 = 0;
          v49 = 0;
          if (v45 <= v44)
            v45 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v141 = v44 + 1;
              v142 = *(_BYTE *)(v46 + v44);
              *((_QWORD *)this + 1) = v141;
              v49 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                v44 = v141;
                v14 = v140++ > 8;
                if (v14)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v49) = 0;
            }
            break;
          }
LABEL_254:
          *(_DWORD *)(a1 + 104) = v49;
          goto LABEL_238;
        case 8u:
          *(_DWORD *)(a1 + 152) |= 0x10u;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          v54 = *(_QWORD *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)this + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_258;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_186:
            v57 = 0;
            goto LABEL_258;
          }
          v143 = 0;
          v144 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v145 = v52 + 1;
              v146 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)this + 1) = v145;
              v57 |= (unint64_t)(v146 & 0x7F) << v143;
              if (v146 < 0)
              {
                v143 += 7;
                v52 = v145;
                v14 = v144++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v57 = 0;
            }
            break;
          }
LABEL_258:
          *(_QWORD *)(a1 + 40) = v57;
          goto LABEL_238;
        case 9u:
          *(_DWORD *)(a1 + 152) |= 0x8000000u;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_237;
        case 0xAu:
          *(_DWORD *)(a1 + 152) |= 0x8000u;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_262;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v66) = 0;
            goto LABEL_262;
          }
          v147 = 0;
          v148 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v149 = v61 + 1;
              v150 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v149;
              v66 |= (unint64_t)(v150 & 0x7F) << v147;
              if (v150 < 0)
              {
                v147 += 7;
                v61 = v149;
                v14 = v148++ > 8;
                if (v14)
                  goto LABEL_193;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_262:
          *(_DWORD *)(a1 + 92) = v66;
          goto LABEL_238;
        case 0xBu:
          *(_DWORD *)(a1 + 152) |= 0x4000u;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_266;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v74) = 0;
            goto LABEL_266;
          }
          v151 = 0;
          v152 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v153 = v69 + 1;
              v154 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v153;
              v74 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                v69 = v153;
                v14 = v152++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_266:
          *(_DWORD *)(a1 + 88) = v74;
          goto LABEL_238;
        case 0xCu:
          *(_DWORD *)(a1 + 152) |= 0x800000u;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_237;
        case 0xDu:
          *(_DWORD *)(a1 + 152) |= 0x400000u;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v78);
          goto LABEL_237;
        case 0xEu:
          *(_DWORD *)(a1 + 152) |= 0x1000000u;
          v79 = *((_QWORD *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v79);
          goto LABEL_237;
        case 0xFu:
          *(_DWORD *)(a1 + 152) |= 0x2000u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v80);
          goto LABEL_237;
        case 0x10u:
          *(_DWORD *)(a1 + 152) |= 0x1000u;
          v81 = *((_QWORD *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v81);
          goto LABEL_237;
        case 0x11u:
          *(_DWORD *)(a1 + 152) |= 0x800u;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v82);
          goto LABEL_237;
        case 0x12u:
          *(_DWORD *)(a1 + 152) |= 0x400u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_237;
        case 0x13u:
          *(_DWORD *)(a1 + 152) |= 0x200u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_237;
        case 0x14u:
          *(_DWORD *)(a1 + 152) |= 1u;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_270;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_207:
            v90 = 0;
            goto LABEL_270;
          }
          v155 = 0;
          v156 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              v90 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v157 = v85 + 1;
              v158 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v157;
              v90 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                v85 = v157;
                v14 = v156++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v90 = 0;
            }
            break;
          }
LABEL_270:
          *(_QWORD *)(a1 + 8) = v90;
          goto LABEL_238;
        case 0x15u:
          *(_DWORD *)(a1 + 152) |= 2u;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_274;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_214:
            v98 = 0;
            goto LABEL_274;
          }
          v159 = 0;
          v160 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              v98 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v161 = v93 + 1;
              v162 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v161;
              v98 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                v93 = v161;
                v14 = v160++ > 8;
                if (v14)
                  goto LABEL_214;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v98 = 0;
            }
            break;
          }
LABEL_274:
          *(_QWORD *)(a1 + 16) = v98;
          goto LABEL_238;
        case 0x16u:
          *(_DWORD *)(a1 + 152) |= 0x10000u;
          v101 = *((_QWORD *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v101);
          goto LABEL_237;
        case 0x17u:
          *(_DWORD *)(a1 + 152) |= 0x20u;
          v102 = *((_QWORD *)this + 1);
          v103 = *((_QWORD *)this + 2);
          v104 = *(_QWORD *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)this + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_278;
              v105 += 7;
              v102 = v108;
              v14 = v106++ > 8;
            }
            while (!v14);
LABEL_221:
            v107 = 0;
            goto LABEL_278;
          }
          v163 = 0;
          v164 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v103 == v102)
            {
              v107 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v165 = v102 + 1;
              v166 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)this + 1) = v165;
              v107 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                v102 = v165;
                v14 = v164++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v107 = 0;
            }
            break;
          }
LABEL_278:
          *(_QWORD *)(a1 + 48) = v107;
          goto LABEL_238;
        case 0x18u:
          *(_DWORD *)(a1 + 152) |= 0x2000000u;
          v110 = *((_QWORD *)this + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v110);
          goto LABEL_237;
        case 0x19u:
          *(_DWORD *)(a1 + 152) |= 0x20000u;
          v111 = *((_QWORD *)this + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v111);
          goto LABEL_237;
        case 0x1Au:
          *(_DWORD *)(a1 + 152) |= 0x100u;
          v112 = *((_QWORD *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v112);
          goto LABEL_237;
        case 0x1Bu:
          *(_DWORD *)(a1 + 152) |= 0x80000u;
          v113 = *((_QWORD *)this + 1);
          v114 = *((_QWORD *)this + 2);
          v115 = *(_QWORD *)this;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            do
            {
              v119 = v113 + 1;
              *((_QWORD *)this + 1) = v113 + 1;
              v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0)
                goto LABEL_282;
              v116 += 7;
              v113 = v119;
              v14 = v117++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v118) = 0;
            goto LABEL_282;
          }
          v167 = 0;
          v168 = 0;
          v118 = 0;
          if (v114 <= v113)
            v114 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v169 = v113 + 1;
              v170 = *(_BYTE *)(v115 + v113);
              *((_QWORD *)this + 1) = v169;
              v118 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                v113 = v169;
                v14 = v168++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v118) = 0;
            }
            break;
          }
LABEL_282:
          *(_DWORD *)(a1 + 108) = v118;
          goto LABEL_238;
        case 0x1Cu:
          *(_DWORD *)(a1 + 152) |= 0x40u;
          v121 = *((_QWORD *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v121);
          goto LABEL_237;
        case 0x1Du:
          *(_DWORD *)(a1 + 152) |= 8u;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          v124 = *(_QWORD *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)this + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_286;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_235:
            v127 = 0;
            goto LABEL_286;
          }
          v171 = 0;
          v172 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)this + 1);
          break;
        case 0x1Eu:
          *(_DWORD *)(a1 + 152) |= 0x80u;
          v130 = *((_QWORD *)this + 1);
          if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v130);
LABEL_237:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_156:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_238;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_238;
      }
      while (1)
      {
        if (v123 == v122)
        {
          v127 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_286;
        }
        v173 = v122 + 1;
        v174 = *(_BYTE *)(v124 + v122);
        *((_QWORD *)this + 1) = v173;
        v127 |= (unint64_t)(v174 & 0x7F) << v171;
        if ((v174 & 0x80) == 0)
          break;
        v171 += 7;
        v122 = v173;
        v14 = v172++ > 8;
        if (v14)
          goto LABEL_235;
      }
      if (*((_BYTE *)this + 24))
        v127 = 0;
LABEL_286:
      *(_QWORD *)(a1 + 32) = v127;
LABEL_238:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B7643C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x20000000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_27:
    if ((v4 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_30:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 60));
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 152) & 0x80) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 60));
  return result;
}

uint64_t sub_21B764730(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31DF8;
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  return result;
}

void sub_21B76474C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B764770(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  float result;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  char v23;

  *(_QWORD *)a1 = &off_24DF31DF8;
  v2 = (uint64_t *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  v3 = (uint64_t *)(a2 + 280);
  v4 = *(_QWORD *)(a2 + 280);
  if ((v4 & 1) != 0)
  {
    v6 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    *(_WORD *)(a1 + 288) = 0;
    v5 = 1;
    *v2 = 1;
    *(_QWORD *)(a1 + 8) = v8;
    v4 = *v3;
    v7 = *(_WORD *)(a2 + 288);
    if ((*v3 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 0;
  v6 = 0;
  v7 = *(_WORD *)(a2 + 288);
  if ((v4 & 0x2000000000000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 208);
    v5 |= 0x2000000000000uLL;
    *v2 = v5;
    *(_WORD *)(a1 + 288) = 0;
    *(float *)(a1 + 208) = result;
    v4 = *v3;
    v7 = *(_WORD *)(a2 + 288);
  }
LABEL_6:
  if ((v7 & 0x100) != 0)
  {
    v10 = *(_BYTE *)(a2 + 276);
    v6 = 256;
    *v2 = v5;
    *(_WORD *)(a1 + 288) = 256;
    *(_BYTE *)(a1 + 276) = v10;
    v4 = *v3;
    v7 = *(_WORD *)(a2 + 288);
    if ((v7 & 0x80) == 0)
    {
LABEL_8:
      if ((v7 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_83;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v11 = *(_BYTE *)(a2 + 275);
  v6 |= 0x80u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 275) = v11;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x20) == 0)
  {
LABEL_9:
    if ((v7 & 4) == 0)
      goto LABEL_10;
    goto LABEL_84;
  }
LABEL_83:
  v12 = *(_BYTE *)(a2 + 273);
  v6 |= 0x20u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 273) = v12;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 4) == 0)
  {
LABEL_10:
    if ((v7 & 2) == 0)
      goto LABEL_11;
    goto LABEL_85;
  }
LABEL_84:
  v13 = *(_BYTE *)(a2 + 270);
  v6 |= 4u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 270) = v13;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_86;
  }
LABEL_85:
  v14 = *(_BYTE *)(a2 + 269);
  v6 |= 2u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 269) = v14;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_12:
    if ((v7 & 1) == 0)
      goto LABEL_13;
    goto LABEL_87;
  }
LABEL_86:
  v15 = *(_DWORD *)(a2 + 84);
  v5 |= 0x40000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_DWORD *)(a1 + 84) = v15;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 1) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_88;
  }
LABEL_87:
  v16 = *(_BYTE *)(a2 + 268);
  v6 |= 1u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 268) = v16;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_89;
  }
LABEL_88:
  v17 = *(_BYTE *)(a2 + 272);
  v6 |= 0x10u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 272) = v17;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_90;
  }
LABEL_89:
  result = *(float *)(a2 + 80);
  v5 |= 0x20000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 80) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_91;
  }
LABEL_90:
  result = *(float *)(a2 + 76);
  v5 |= 0x10000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 76) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_92;
  }
LABEL_91:
  result = *(float *)(a2 + 100);
  v5 |= 0x400000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 100) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_93;
  }
LABEL_92:
  result = *(float *)(a2 + 120);
  v5 |= 0x8000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 120) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_94;
  }
LABEL_93:
  result = *(float *)(a2 + 140);
  v5 |= 0x100000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 140) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_95;
  }
LABEL_94:
  result = *(float *)(a2 + 212);
  v5 |= 0x4000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 212) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_96;
  }
LABEL_95:
  result = *(float *)(a2 + 104);
  v5 |= 0x800000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 104) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_97;
  }
LABEL_96:
  result = *(float *)(a2 + 124);
  v5 |= 0x10000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 124) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_98;
  }
LABEL_97:
  result = *(float *)(a2 + 144);
  v5 |= 0x200000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 144) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_99;
  }
LABEL_98:
  result = *(float *)(a2 + 216);
  v5 |= 0x8000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 216) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_100;
  }
LABEL_99:
  result = *(float *)(a2 + 108);
  v5 |= 0x1000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 108) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_101;
  }
LABEL_100:
  result = *(float *)(a2 + 128);
  v5 |= 0x20000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 128) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_102;
  }
LABEL_101:
  result = *(float *)(a2 + 148);
  v5 |= 0x400000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 148) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_103;
  }
LABEL_102:
  result = *(float *)(a2 + 220);
  v5 |= 0x10000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 220) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_104;
  }
LABEL_103:
  result = *(float *)(a2 + 88);
  v5 |= 0x80000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 88) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000) == 0)
      goto LABEL_31;
    goto LABEL_105;
  }
LABEL_104:
  result = *(float *)(a2 + 92);
  v5 |= 0x100000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 92) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_32;
    goto LABEL_106;
  }
LABEL_105:
  result = *(float *)(a2 + 96);
  v5 |= 0x200000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 96) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_33;
    goto LABEL_107;
  }
LABEL_106:
  result = *(float *)(a2 + 236);
  v5 |= 0x100000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 236) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_34;
    goto LABEL_108;
  }
LABEL_107:
  result = *(float *)(a2 + 232);
  v5 |= 0x80000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 232) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x40) == 0)
      goto LABEL_35;
    goto LABEL_109;
  }
LABEL_108:
  result = *(float *)(a2 + 240);
  v5 |= 0x200000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 240) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40) == 0)
  {
LABEL_35:
    if ((v4 & 2) == 0)
      goto LABEL_36;
    goto LABEL_110;
  }
LABEL_109:
  result = *(float *)(a2 + 36);
  v5 |= 0x40uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 36) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 2) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_111;
  }
LABEL_110:
  result = *(float *)(a2 + 16);
  v5 |= 2uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 16) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_37:
    if ((v7 & 0x800) == 0)
      goto LABEL_38;
    goto LABEL_112;
  }
LABEL_111:
  result = *(float *)(a2 + 72);
  v5 |= 0x8000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 72) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x800) == 0)
  {
LABEL_38:
    if ((v7 & 8) == 0)
      goto LABEL_39;
    goto LABEL_113;
  }
LABEL_112:
  v18 = *(_BYTE *)(a2 + 279);
  v6 |= 0x800u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 279) = v18;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 8) == 0)
  {
LABEL_39:
    if ((v4 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_114;
  }
LABEL_113:
  v19 = *(_BYTE *)(a2 + 271);
  v6 |= 8u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 271) = v19;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80) == 0)
  {
LABEL_40:
    if ((v4 & 0x400) == 0)
      goto LABEL_41;
    goto LABEL_115;
  }
LABEL_114:
  result = *(float *)(a2 + 40);
  v5 |= 0x80uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 40) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400) == 0)
  {
LABEL_41:
    if ((v4 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_116;
  }
LABEL_115:
  result = *(float *)(a2 + 52);
  v5 |= 0x400uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 52) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200) == 0)
  {
LABEL_42:
    if ((v4 & 0x100) == 0)
      goto LABEL_43;
    goto LABEL_117;
  }
LABEL_116:
  result = *(float *)(a2 + 48);
  v5 |= 0x200uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 48) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100) == 0)
  {
LABEL_43:
    if ((v4 & 4) == 0)
      goto LABEL_44;
    goto LABEL_118;
  }
LABEL_117:
  result = *(float *)(a2 + 44);
  v5 |= 0x100uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 44) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 4) == 0)
  {
LABEL_44:
    if ((v4 & 0x20) == 0)
      goto LABEL_45;
    goto LABEL_119;
  }
LABEL_118:
  result = *(float *)(a2 + 20);
  v5 |= 4uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 20) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20) == 0)
  {
LABEL_45:
    if ((v4 & 0x10) == 0)
      goto LABEL_46;
    goto LABEL_120;
  }
LABEL_119:
  result = *(float *)(a2 + 32);
  v5 |= 0x20uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 32) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10) == 0)
  {
LABEL_46:
    if ((v4 & 8) == 0)
      goto LABEL_47;
    goto LABEL_121;
  }
LABEL_120:
  result = *(float *)(a2 + 28);
  v5 |= 0x10uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 28) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 8) == 0)
  {
LABEL_47:
    if ((v4 & 0x800) == 0)
      goto LABEL_48;
    goto LABEL_122;
  }
LABEL_121:
  result = *(float *)(a2 + 24);
  v5 |= 8uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 24) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800) == 0)
  {
LABEL_48:
    if ((v4 & 0x4000) == 0)
      goto LABEL_49;
    goto LABEL_123;
  }
LABEL_122:
  result = *(float *)(a2 + 56);
  v5 |= 0x800uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 56) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_49:
    if ((v4 & 0x2000) == 0)
      goto LABEL_50;
    goto LABEL_124;
  }
LABEL_123:
  result = *(float *)(a2 + 68);
  v5 |= 0x4000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 68) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x2000) == 0)
  {
LABEL_50:
    if ((v4 & 0x1000) == 0)
      goto LABEL_51;
    goto LABEL_125;
  }
LABEL_124:
  result = *(float *)(a2 + 64);
  v5 |= 0x2000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 64) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_51:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_52;
    goto LABEL_126;
  }
LABEL_125:
  result = *(float *)(a2 + 60);
  v5 |= 0x1000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 60) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_53;
    goto LABEL_127;
  }
LABEL_126:
  result = *(float *)(a2 + 112);
  v5 |= 0x2000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 112) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_53:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_54;
    goto LABEL_128;
  }
LABEL_127:
  result = *(float *)(a2 + 132);
  v5 |= 0x40000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 132) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_55;
    goto LABEL_129;
  }
LABEL_128:
  result = *(float *)(a2 + 152);
  v5 |= 0x800000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 152) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_56;
    goto LABEL_130;
  }
LABEL_129:
  result = *(float *)(a2 + 224);
  v5 |= 0x20000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 224) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_131;
  }
LABEL_130:
  result = *(float *)(a2 + 116);
  v5 |= 0x4000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 116) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_58;
    goto LABEL_132;
  }
LABEL_131:
  result = *(float *)(a2 + 136);
  v5 |= 0x80000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 136) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_59;
    goto LABEL_133;
  }
LABEL_132:
  result = *(float *)(a2 + 156);
  v5 |= 0x1000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 156) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x40) == 0)
      goto LABEL_60;
    goto LABEL_134;
  }
LABEL_133:
  result = *(float *)(a2 + 228);
  v5 |= 0x40000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 228) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x40) == 0)
  {
LABEL_60:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_61;
    goto LABEL_135;
  }
LABEL_134:
  v20 = *(_BYTE *)(a2 + 274);
  v6 |= 0x40u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 274) = v20;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_62;
    goto LABEL_136;
  }
LABEL_135:
  result = *(float *)(a2 + 252);
  v5 |= 0x1000000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 252) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x200) == 0)
      goto LABEL_63;
    goto LABEL_137;
  }
LABEL_136:
  result = *(float *)(a2 + 244);
  v5 |= 0x400000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 244) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((v7 & 0x200) == 0)
  {
LABEL_63:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_64;
    goto LABEL_138;
  }
LABEL_137:
  v21 = *(_BYTE *)(a2 + 277);
  v6 |= 0x200u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 277) = v21;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_65;
    goto LABEL_139;
  }
LABEL_138:
  result = *(float *)(a2 + 160);
  v5 |= 0x2000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 160) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_66;
    goto LABEL_140;
  }
LABEL_139:
  result = *(float *)(a2 + 164);
  v5 |= 0x4000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 164) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_66:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_141;
  }
LABEL_140:
  result = *(float *)(a2 + 168);
  v5 |= 0x8000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 168) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_68;
    goto LABEL_142;
  }
LABEL_141:
  result = *(float *)(a2 + 176);
  v5 |= 0x20000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 176) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_69;
    goto LABEL_143;
  }
LABEL_142:
  result = *(float *)(a2 + 172);
  v5 |= 0x10000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 172) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_70;
    goto LABEL_144;
  }
LABEL_143:
  result = *(float *)(a2 + 180);
  v5 |= 0x40000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 180) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_71;
    goto LABEL_145;
  }
LABEL_144:
  result = *(float *)(a2 + 184);
  v5 |= 0x80000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 184) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_72;
    goto LABEL_146;
  }
LABEL_145:
  result = *(float *)(a2 + 188);
  v5 |= 0x100000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 188) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_147;
  }
LABEL_146:
  result = *(float *)(a2 + 192);
  v5 |= 0x200000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 192) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_74;
    goto LABEL_148;
  }
LABEL_147:
  result = *(float *)(a2 + 200);
  v5 |= 0x800000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 200) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_75;
    goto LABEL_149;
  }
LABEL_148:
  result = *(float *)(a2 + 196);
  v5 |= 0x400000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 196) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_76;
    goto LABEL_150;
  }
LABEL_149:
  result = *(float *)(a2 + 204);
  v5 |= 0x1000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 204) = result;
  v4 = *v3;
  v7 = *(_WORD *)(a2 + 288);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_76:
    if ((v7 & 0x400) == 0)
      goto LABEL_77;
    goto LABEL_151;
  }
LABEL_150:
  v22 = *(_DWORD *)(a2 + 248);
  v5 |= 0x800000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_DWORD *)(a1 + 248) = v22;
  v4 = *v3;
  if ((*(_WORD *)(a2 + 288) & 0x400) == 0)
  {
LABEL_77:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_152;
  }
LABEL_151:
  v23 = *(_BYTE *)(a2 + 278);
  v6 |= 0x400u;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(_BYTE *)(a1 + 278) = v23;
  v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_79;
    goto LABEL_153;
  }
LABEL_152:
  result = *(float *)(a2 + 260);
  v5 |= 0x4000000000000000uLL;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 260) = result;
  v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x2000000000000000) == 0)
      return result;
LABEL_154:
    result = *(float *)(a2 + 256);
    *v2 = v5 | 0x2000000000000000;
    *(_WORD *)(a1 + 288) = v6;
    *(float *)(a1 + 256) = result;
    return result;
  }
LABEL_153:
  result = *(float *)(a2 + 264);
  v5 |= 0x8000000000000000;
  *v2 = v5;
  *(_WORD *)(a1 + 288) = v6;
  *(float *)(a1 + 264) = result;
  if ((*v3 & 0x2000000000000000) != 0)
    goto LABEL_154;
  return result;
}

uint64_t sub_21B765244(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 280);
  v6 = *(_QWORD *)(a1 + 280);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThreshold", *(float *)(a1 + 16));
    v6 = *v5;
    v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(_WORD *)(a1 + 288);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "audioDvChaosThresholdCenter", *(float *)(a1 + 20));
    v6 = *v5;
    v7 = *(_WORD *)(a1 + 288);
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThresholdMax", *(float *)(a1 + 24));
    v6 = *v5;
    v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "audioDvChaosThresholdMin", *(float *)(a1 + 28));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "audioDvChaosThresholdStretch", *(float *)(a1 + 32));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "audioDvEnergyThreshold", *(float *)(a1 + 36));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdCenter", *(float *)(a1 + 40));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdMax", *(float *)(a1 + 44));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdMin", *(float *)(a1 + 48));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdStretch", *(float *)(a1 + 52));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdCenter", *(float *)(a1 + 56));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMax", *(float *)(a1 + 60));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMin", *(float *)(a1 + 64));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdStretch", *(float *)(a1 + 68));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v7 & 1) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "audioDvRmsThreshold", *(float *)(a1 + 72));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 1) == 0)
  {
LABEL_20:
    if ((v6 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "crashDetectorDecision");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v6 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "deltaVXYBiggestImpact", *(float *)(a1 + 76));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v6 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 80));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v6 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "detectorRegime");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v6 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold1", *(float *)(a1 + 88));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold2", *(float *)(a1 + 92));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v6 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold3", *(float *)(a1 + 96));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v6 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1", *(float *)(a1 + 100));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithAudio", *(float *)(a1 + 104));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudio", *(float *)(a1 + 108));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 112));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *(float *)(a1 + 116));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2", *(float *)(a1 + 120));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithAudio", *(float *)(a1 + 124));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudio", *(float *)(a1 + 128));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 132));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *(float *)(a1 + 136));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3", *(float *)(a1 + 140));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithAudio", *(float *)(a1 + 144));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudio", *(float *)(a1 + 148));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 152));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *(float *)(a1 + 156));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 2) == 0)
  {
LABEL_42:
    if ((v7 & 4) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "hasAudioInEpoch");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 4) == 0)
  {
LABEL_43:
    if ((v7 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "isAudio");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "isAudioDv");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "isAudioSupported");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x20) == 0)
  {
LABEL_46:
    if ((v7 & 0x40) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "isBaro");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "isCompanionConnected");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x80) == 0)
  {
LABEL_48:
    if ((v7 & 0x100) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "isFreeFall");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v7 & 0x200) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "isPulse");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x200) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "lowSenseCrashDetectorDecision");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold1", *(float *)(a1 + 160));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold2", *(float *)(a1 + 164));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold3", *(float *)(a1 + 168));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxPulseThreshold", *(float *)(a1 + 172));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxaccelnormThreshold", *(float *)(a1 + 176));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 180));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold1", *(float *)(a1 + 184));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold2", *(float *)(a1 + 188));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold3", *(float *)(a1 + 192));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxPulseThreshold", *(float *)(a1 + 196));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxaccelnormThreshold", *(float *)(a1 + 200));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioPeakPressureThreshold", *(float *)(a1 + 204));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 208));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "maxAccelNormThreshold", *(float *)(a1 + 212));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithAudio", *(float *)(a1 + 216));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 220));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 224));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 228));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "maxAudioChaos", *(float *)(a1 + 232));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "maxAudioEnergy", *(float *)(a1 + 236));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "maxAudioRms", *(float *)(a1 + 240));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 244));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "numShortAudio");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 252));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x400) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "shortAudioMaxPulseThreshold", *(float *)(a1 + 256));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "shortAudioMet");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "shortAudioNumThreshold", *(float *)(a1 + 260));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_78:
    if ((v7 & 0x800) == 0)
      goto LABEL_79;
LABEL_154:
    PB::TextFormatter::format(this, "strongerAudio");
    if ((*v5 & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_80;
  }
LABEL_153:
  PB::TextFormatter::format(this, "shortAudioPeakPressureThreshold", *(float *)(a1 + 264));
  v6 = *v5;
  if ((*(_WORD *)(a1 + 288) & 0x800) != 0)
    goto LABEL_154;
LABEL_79:
  if ((v6 & 1) != 0)
LABEL_80:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B765D2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  BOOL v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t result;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 280;
    do
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)this + 1);
            v23 = *((_QWORD *)this + 2);
            v24 = *(_QWORD *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)this + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_313;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_263:
              v27 = 0;
              goto LABEL_313;
            }
            v156 = 0;
            v157 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v158 = v22 + 1;
                v159 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)this + 1) = v158;
                v27 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  v22 = v158;
                  v15 = v157++ > 8;
                  if (v15)
                    goto LABEL_263;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_313:
            *(_QWORD *)(a1 + 8) = v27;
            goto LABEL_305;
          case 2:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v31 = *((_QWORD *)this + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v31);
            goto LABEL_304;
          case 3:
            *(_WORD *)(v8 + 8) |= 0x100u;
            v32 = *((_QWORD *)this + 1);
            if (v32 >= *((_QWORD *)this + 2))
            {
              v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v33 = v32 + 1;
              v34 = *(unsigned __int8 *)(*(_QWORD *)this + v32);
              *((_QWORD *)this + 1) = v33;
              v35 = v34 != 0;
            }
            *(_BYTE *)(a1 + 276) = v35;
            goto LABEL_305;
          case 4:
            *(_WORD *)(v8 + 8) |= 0x80u;
            v36 = *((_QWORD *)this + 1);
            if (v36 >= *((_QWORD *)this + 2))
            {
              v39 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v37 = v36 + 1;
              v38 = *(unsigned __int8 *)(*(_QWORD *)this + v36);
              *((_QWORD *)this + 1) = v37;
              v39 = v38 != 0;
            }
            *(_BYTE *)(a1 + 275) = v39;
            goto LABEL_305;
          case 5:
            *(_WORD *)(v8 + 8) |= 0x20u;
            v40 = *((_QWORD *)this + 1);
            if (v40 >= *((_QWORD *)this + 2))
            {
              v43 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v41 = v40 + 1;
              v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
              *((_QWORD *)this + 1) = v41;
              v43 = v42 != 0;
            }
            *(_BYTE *)(a1 + 273) = v43;
            goto LABEL_305;
          case 6:
            *(_WORD *)(v8 + 8) |= 4u;
            v44 = *((_QWORD *)this + 1);
            if (v44 >= *((_QWORD *)this + 2))
            {
              v47 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v45 = v44 + 1;
              v46 = *(unsigned __int8 *)(*(_QWORD *)this + v44);
              *((_QWORD *)this + 1) = v45;
              v47 = v46 != 0;
            }
            *(_BYTE *)(a1 + 270) = v47;
            goto LABEL_305;
          case 7:
            *(_WORD *)(v8 + 8) |= 2u;
            v48 = *((_QWORD *)this + 1);
            if (v48 >= *((_QWORD *)this + 2))
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v48 + 1;
              v50 = *(unsigned __int8 *)(*(_QWORD *)this + v48);
              *((_QWORD *)this + 1) = v49;
              v51 = v50 != 0;
            }
            *(_BYTE *)(a1 + 269) = v51;
            goto LABEL_305;
          case 8:
            *(_QWORD *)v8 |= 0x40000uLL;
            v52 = *((_QWORD *)this + 1);
            v53 = *((_QWORD *)this + 2);
            v54 = *(_QWORD *)this;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)this + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_317;
                v55 += 7;
                v52 = v58;
                v15 = v56++ > 8;
              }
              while (!v15);
LABEL_280:
              LODWORD(v57) = 0;
              goto LABEL_317;
            }
            v160 = 0;
            v161 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v162 = v52 + 1;
                v163 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)this + 1) = v162;
                v57 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  v52 = v162;
                  v15 = v161++ > 8;
                  if (v15)
                    goto LABEL_280;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
              }
              break;
            }
LABEL_317:
            *(_DWORD *)(a1 + 84) = v57;
            goto LABEL_305;
          case 9:
            *(_WORD *)(v8 + 8) |= 1u;
            v60 = *((_QWORD *)this + 1);
            if (v60 >= *((_QWORD *)this + 2))
            {
              v63 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v61 = v60 + 1;
              v62 = *(unsigned __int8 *)(*(_QWORD *)this + v60);
              *((_QWORD *)this + 1) = v61;
              v63 = v62 != 0;
            }
            *(_BYTE *)(a1 + 268) = v63;
            goto LABEL_305;
          case 10:
            *(_WORD *)(v8 + 8) |= 0x10u;
            v64 = *((_QWORD *)this + 1);
            if (v64 >= *((_QWORD *)this + 2))
            {
              v67 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v65 = v64 + 1;
              v66 = *(unsigned __int8 *)(*(_QWORD *)this + v64);
              *((_QWORD *)this + 1) = v65;
              v67 = v66 != 0;
            }
            *(_BYTE *)(a1 + 272) = v67;
            goto LABEL_305;
          case 11:
            *(_QWORD *)v8 |= 0x20000uLL;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_304;
          case 12:
            *(_QWORD *)v8 |= 0x10000uLL;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_304;
          case 13:
            *(_QWORD *)v8 |= 0x400000uLL;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_304;
          case 14:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v71 = *((_QWORD *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v71);
            goto LABEL_304;
          case 15:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v72 = *((_QWORD *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v72);
            goto LABEL_304;
          case 16:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v73 = *((_QWORD *)this + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v73);
            goto LABEL_304;
          case 17:
            *(_QWORD *)v8 |= 0x800000uLL;
            v74 = *((_QWORD *)this + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v74);
            goto LABEL_304;
          case 18:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v75 = *((_QWORD *)this + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v75);
            goto LABEL_304;
          case 19:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v76 = *((_QWORD *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v76);
            goto LABEL_304;
          case 20:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v77 = *((_QWORD *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)this + v77);
            goto LABEL_304;
          case 21:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v78 = *((_QWORD *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v78);
            goto LABEL_304;
          case 22:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v79 = *((_QWORD *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v79);
            goto LABEL_304;
          case 23:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v80 = *((_QWORD *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v80);
            goto LABEL_304;
          case 24:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v81 = *((_QWORD *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 220) = *(_DWORD *)(*(_QWORD *)this + v81);
            goto LABEL_304;
          case 25:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)this + v82);
            goto LABEL_304;
          case 26:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v83);
            goto LABEL_304;
          case 27:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(_QWORD *)this + v84);
            goto LABEL_304;
          case 28:
            *(_QWORD *)v8 |= 0x40uLL;
            v85 = *((_QWORD *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v85);
            goto LABEL_304;
          case 29:
            *(_QWORD *)v8 |= 2uLL;
            v86 = *((_QWORD *)this + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v86);
            goto LABEL_304;
          case 30:
            *(_QWORD *)v8 |= 0x8000uLL;
            v87 = *((_QWORD *)this + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v87);
            goto LABEL_304;
          case 31:
            *(_WORD *)(v8 + 8) |= 0x800u;
            v88 = *((_QWORD *)this + 1);
            if (v88 >= *((_QWORD *)this + 2))
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
              *((_QWORD *)this + 1) = v89;
              v91 = v90 != 0;
            }
            *(_BYTE *)(a1 + 279) = v91;
            goto LABEL_305;
          case 32:
            *(_WORD *)(v8 + 8) |= 8u;
            v92 = *((_QWORD *)this + 1);
            if (v92 >= *((_QWORD *)this + 2))
            {
              v95 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v93 = v92 + 1;
              v94 = *(unsigned __int8 *)(*(_QWORD *)this + v92);
              *((_QWORD *)this + 1) = v93;
              v95 = v94 != 0;
            }
            *(_BYTE *)(a1 + 271) = v95;
            goto LABEL_305;
          case 33:
            *(_QWORD *)v8 |= 0x80uLL;
            v96 = *((_QWORD *)this + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v96);
            goto LABEL_304;
          case 34:
            *(_QWORD *)v8 |= 0x400uLL;
            v97 = *((_QWORD *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v97);
            goto LABEL_304;
          case 35:
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v98);
            goto LABEL_304;
          case 36:
            *(_QWORD *)v8 |= 0x100uLL;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_304;
          case 37:
            *(_QWORD *)v8 |= 4uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v100);
            goto LABEL_304;
          case 38:
            *(_QWORD *)v8 |= 0x20uLL;
            v101 = *((_QWORD *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v101);
            goto LABEL_304;
          case 39:
            *(_QWORD *)v8 |= 0x10uLL;
            v102 = *((_QWORD *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v102);
            goto LABEL_304;
          case 40:
            *(_QWORD *)v8 |= 8uLL;
            v103 = *((_QWORD *)this + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v103);
            goto LABEL_304;
          case 41:
            *(_QWORD *)v8 |= 0x800uLL;
            v104 = *((_QWORD *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v104);
            goto LABEL_304;
          case 42:
            *(_QWORD *)v8 |= 0x4000uLL;
            v105 = *((_QWORD *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v105);
            goto LABEL_304;
          case 43:
            *(_QWORD *)v8 |= 0x2000uLL;
            v106 = *((_QWORD *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v106);
            goto LABEL_304;
          case 44:
            *(_QWORD *)v8 |= 0x1000uLL;
            v107 = *((_QWORD *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v107);
            goto LABEL_304;
          case 45:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v108 = *((_QWORD *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v108);
            goto LABEL_304;
          case 46:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v109 = *((_QWORD *)this + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v109);
            goto LABEL_304;
          case 47:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v110 = *((_QWORD *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v110);
            goto LABEL_304;
          case 48:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v111);
            goto LABEL_304;
          case 49:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v112 = *((_QWORD *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v112);
            goto LABEL_304;
          case 50:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v113);
            goto LABEL_304;
          case 51:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v114 = *((_QWORD *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v114);
            goto LABEL_304;
          case 52:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v115 = *((_QWORD *)this + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v115);
            goto LABEL_304;
          case 53:
            *(_WORD *)(v8 + 8) |= 0x40u;
            v116 = *((_QWORD *)this + 1);
            if (v116 >= *((_QWORD *)this + 2))
            {
              v119 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v116 + 1;
              v118 = *(unsigned __int8 *)(*(_QWORD *)this + v116);
              *((_QWORD *)this + 1) = v117;
              v119 = v118 != 0;
            }
            *(_BYTE *)(a1 + 274) = v119;
            goto LABEL_305;
          case 54:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v120 = *((_QWORD *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(_QWORD *)this + v120);
            goto LABEL_304;
          case 55:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v121 = *((_QWORD *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(_QWORD *)this + v121);
            goto LABEL_304;
          case 56:
            *(_WORD *)(v8 + 8) |= 0x200u;
            v122 = *((_QWORD *)this + 1);
            if (v122 >= *((_QWORD *)this + 2))
            {
              v125 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v123 = v122 + 1;
              v124 = *(unsigned __int8 *)(*(_QWORD *)this + v122);
              *((_QWORD *)this + 1) = v123;
              v125 = v124 != 0;
            }
            *(_BYTE *)(a1 + 277) = v125;
            goto LABEL_305;
          case 57:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v126);
            goto LABEL_304;
          case 58:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v127 = *((_QWORD *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v127);
            goto LABEL_304;
          case 59:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v128 = *((_QWORD *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v128);
            goto LABEL_304;
          case 60:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v129 = *((_QWORD *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v129);
            goto LABEL_304;
          case 61:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v130 = *((_QWORD *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v130);
            goto LABEL_304;
          case 62:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v131 = *((_QWORD *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v131);
            goto LABEL_304;
          case 63:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v132 = *((_QWORD *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v132);
            goto LABEL_304;
          case 64:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v133 = *((_QWORD *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v133);
            goto LABEL_304;
          case 65:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v134 = *((_QWORD *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v134);
            goto LABEL_304;
          case 66:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v135 = *((_QWORD *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v135);
            goto LABEL_304;
          case 67:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v136 = *((_QWORD *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v136);
            goto LABEL_304;
          case 68:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v137 = *((_QWORD *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v137);
            goto LABEL_304;
          case 69:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v138 = *((_QWORD *)this + 1);
            v139 = *((_QWORD *)this + 2);
            v140 = *(_QWORD *)this;
            if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
            {
              v141 = 0;
              v142 = 0;
              v143 = 0;
              do
              {
                v144 = v138 + 1;
                *((_QWORD *)this + 1) = v138 + 1;
                v145 = *(_BYTE *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0)
                  goto LABEL_321;
                v141 += 7;
                v138 = v144;
                v15 = v142++ > 8;
              }
              while (!v15);
LABEL_299:
              LODWORD(v143) = 0;
              goto LABEL_321;
            }
            v164 = 0;
            v165 = 0;
            v143 = 0;
            if (v139 <= v138)
              v139 = *((_QWORD *)this + 1);
            break;
          case 70:
            *(_WORD *)(v8 + 8) |= 0x400u;
            v146 = *((_QWORD *)this + 1);
            if (v146 >= *((_QWORD *)this + 2))
            {
              v149 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v147 = v146 + 1;
              v148 = *(unsigned __int8 *)(*(_QWORD *)this + v146);
              *((_QWORD *)this + 1) = v147;
              v149 = v148 != 0;
            }
            *(_BYTE *)(a1 + 278) = v149;
            goto LABEL_305;
          case 71:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v150 = *((_QWORD *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(_QWORD *)this + v150);
            goto LABEL_304;
          case 72:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v151 = *((_QWORD *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(_QWORD *)this + v151);
            goto LABEL_304;
          case 73:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v152 = *((_QWORD *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
            {
LABEL_248:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_305;
            }
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(_QWORD *)this + v152);
            goto LABEL_304;
          default:
            goto LABEL_255;
        }
        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_321;
          }
          v166 = v138 + 1;
          v167 = *(_BYTE *)(v140 + v138);
          *((_QWORD *)this + 1) = v166;
          v143 |= (unint64_t)(v167 & 0x7F) << v164;
          if ((v167 & 0x80) == 0)
            break;
          v164 += 7;
          v138 = v166;
          v15 = v165++ > 8;
          if (v15)
            goto LABEL_299;
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v143) = 0;
LABEL_321:
        *(_DWORD *)(a1 + 248) = v143;
        goto LABEL_305;
      }
      switch((_DWORD)v21)
      {
        case 0x186A1:
          *(_QWORD *)v8 |= 0x80000uLL;
          v153 = *((_QWORD *)this + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v153);
            goto LABEL_304;
          }
          break;
        case 0x186A2:
          *(_QWORD *)v8 |= 0x100000uLL;
          v154 = *((_QWORD *)this + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v154);
            goto LABEL_304;
          }
          break;
        case 0x186A3:
          *(_QWORD *)v8 |= 0x200000uLL;
          v30 = *((_QWORD *)this + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v30);
LABEL_304:
            *((_QWORD *)this + 1) += 4;
            goto LABEL_305;
          }
          break;
        default:
LABEL_255:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_305;
      }
      *((_BYTE *)this + 24) = 1;
LABEL_305:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t sub_21B76727C(uint64_t result, PB::Writer *this)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  __int16 v6;

  v3 = (float *)result;
  v4 = (uint64_t *)(result + 280);
  v5 = *(_QWORD *)(result + 280);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_WORD *)(result + 288);
  if ((v5 & 0x2000000000000) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this, v3[52]);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
  }
LABEL_6:
  if ((v6 & 0x100) != 0)
  {
    result = PB::Writer::write(this);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x80) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v6 & 1) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, v3[20]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, v3[19]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, v3[25]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, v3[30]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, v3[35]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this, v3[53]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, v3[26]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, v3[31]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, v3[36]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, v3[54]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this, v3[27]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this, v3[32]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this, v3[37]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this, v3[55]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this, v3[59]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::write(this, v3[58]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this, v3[60]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, v3[9]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, v3[4]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x800) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::write(this, v3[18]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 8) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80) == 0)
  {
LABEL_37:
    if ((v5 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this, v3[10]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this, v3[13]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200) == 0)
  {
LABEL_39:
    if ((v5 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this, v3[12]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v5 & 4) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, v3[11]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, v3[5]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20) == 0)
  {
LABEL_42:
    if ((v5 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, v3[8]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10) == 0)
  {
LABEL_43:
    if ((v5 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, v3[7]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, v3[6]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this, v3[14]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_46:
    if ((v5 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this, v3[17]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, v3[16]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_48:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, v3[15]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, v3[28]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::write(this, v3[33]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::write(this, v3[38]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, v3[56]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, v3[29]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, v3[34]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this, v3[39]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this, v3[57]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x40) == 0)
  {
LABEL_57:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, v3[63]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, v3[61]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x200) == 0)
  {
LABEL_60:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, v3[40]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, v3[41]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, v3[42]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this, v3[44]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this, v3[43]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this, v3[45]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this, v3[46]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this, v3[47]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this, v3[48]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::write(this, v3[50]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, v3[49]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, v3[51]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_74:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this, v3[65]);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_151:
  result = PB::Writer::write(this, v3[66]);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) != 0)
  {
LABEL_77:
    result = PB::Writer::write(this, v3[64]);
    v5 = *v4;
  }
LABEL_78:
  if ((v5 & 0x80000) != 0)
  {
    result = PB::Writer::write(this, v3[22]);
    v5 = *v4;
    if ((*v4 & 0x100000) == 0)
    {
LABEL_80:
      if ((v5 & 0x200000) == 0)
        return result;
      return PB::Writer::write(this, v3[24]);
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_80;
  }
  result = PB::Writer::write(this, v3[23]);
  if ((*v4 & 0x200000) != 0)
    return PB::Writer::write(this, v3[24]);
  return result;
}

double sub_21B767C24(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31E30;
  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B767C48(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF31E30;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B767C98(PB::Base *a1)
{
  sub_21B767C48(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B767CBC(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)a1 = &off_24DF31E30;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 8) != 0)
  {
    v7 = *(_QWORD *)(a2 + 80);
    v6 = 8;
    *(_DWORD *)(a1 + 144) = 8;
    *(_QWORD *)(a1 + 80) = v7;
    v5 = *(_DWORD *)(a2 + 144);
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 0x20) != 0)
  {
LABEL_5:
    v8 = *(_DWORD *)(a2 + 92);
    v6 |= 0x20u;
    *(_DWORD *)(a1 + 144) = v6;
    *(_DWORD *)(a1 + 92) = v8;
    v5 = *(_DWORD *)(a2 + 144);
  }
LABEL_6:
  if ((v5 & 0x40) != 0)
  {
    v11 = *(_DWORD *)(a2 + 96);
    v6 |= 0x40u;
    *(_DWORD *)(a1 + 144) = v6;
    *(_DWORD *)(a1 + 96) = v11;
    v5 = *(_DWORD *)(a2 + 144);
    if ((v5 & 0x80) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v12 = *(_DWORD *)(a2 + 100);
  v6 |= 0x80u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 100) = v12;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v13 = *(_DWORD *)(a2 + 88);
  v6 |= 0x10u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 88) = v13;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  v14 = *(_DWORD *)(a2 + 112);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 112) = v14;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  v15 = *(_DWORD *)(a2 + 116);
  v6 |= 0x800u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 116) = v15;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  v16 = *(_DWORD *)(a2 + 120);
  v6 |= 0x1000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 120) = v16;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  v17 = *(_DWORD *)(a2 + 108);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 108) = v17;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  v18 = *(_DWORD *)(a2 + 104);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 104) = v18;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  v19 = *(_DWORD *)(a2 + 128);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 128) = v19;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  v20 = *(_DWORD *)(a2 + 132);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 132) = v20;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  v21 = *(_DWORD *)(a2 + 136);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 136) = v21;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v22 = *(_DWORD *)(a2 + 124);
  v6 |= 0x2000u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_DWORD *)(a1 + 124) = v22;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  v6 |= 0x20000u;
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = v6;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  v23 = *(_QWORD *)(a2 + 72);
  v6 |= 4u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 72) = v23;
  v5 = *(_DWORD *)(a2 + 144);
  if ((v5 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 2) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_40:
  v24 = *(_QWORD *)(a2 + 56);
  v6 |= 1u;
  *(_DWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 56) = v24;
  if ((*(_DWORD *)(a2 + 144) & 2) != 0)
  {
LABEL_22:
    v9 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 144) = v6 | 2;
    *(_QWORD *)(a1 + 64) = v9;
  }
LABEL_23:
  if (a1 != a2)
  {
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_21B796B90(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_21B767F3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "combinedUnc", *(float *)(a1 + 88));
    v5 = *(_DWORD *)(a1 + 144);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "combinedX", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_29:
  PB::TextFormatter::format(this, "combinedY", *(float *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 144) & 0x80) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "combinedZ", *(float *)(a1 + 100));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "inerAccelApproachMx", v8);
  }
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "inerAccelCount");
    v9 = *(_DWORD *)(a1 + 144);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0)
        goto LABEL_11;
      goto LABEL_33;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "inertialApproachUnc", *(float *)(a1 + 108));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "inertialApproachX", *(float *)(a1 + 112));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "inertialApproachY", *(float *)(a1 + 116));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "inertialApproachZ", *(float *)(a1 + 120));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "previousTimeAccel");
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_37:
  PB::TextFormatter::format(this, "previousTimeSag");
  if ((*(_DWORD *)(a1 + 144) & 4) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "previousTimestamp");
LABEL_17:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "sagittalApproachMx", v12);
  }
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(this, "sagittalApproachUnc", *(float *)(a1 + 124));
    v13 = *(_DWORD *)(a1 + 144);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0)
        goto LABEL_22;
      goto LABEL_41;
    }
  }
  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }
  PB::TextFormatter::format(this, "sagittalApproachX", *(float *)(a1 + 128));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "sagittalApproachY", *(float *)(a1 + 132));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0)
      goto LABEL_24;
LABEL_43:
    PB::TextFormatter::format(this, "sagittalCount");
    if ((*(_DWORD *)(a1 + 144) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_25;
  }
LABEL_42:
  PB::TextFormatter::format(this, "sagittalApproachZ", *(float *)(a1 + 136));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x20000) != 0)
    goto LABEL_43;
LABEL_24:
  if ((v13 & 8) != 0)
LABEL_25:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B768214(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  char *v138;
  _DWORD *v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  char *v156;
  int v157;
  unint64_t v158;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 144) |= 8u;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          v27 = *(_QWORD *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)this + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_223;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_157:
            v30 = 0;
            goto LABEL_223;
          }
          v113 = 0;
          v114 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v115 = v25 + 1;
              v116 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)this + 1) = v115;
              v30 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v25 = v115;
                v18 = v114++ > 8;
                if (v18)
                  goto LABEL_157;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v30 = 0;
            }
            break;
          }
LABEL_223:
          *(_QWORD *)(a1 + 80) = v30;
          goto LABEL_258;
        case 2u:
          *(_DWORD *)(a1 + 144) |= 0x20u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_257;
        case 3u:
          *(_DWORD *)(a1 + 144) |= 0x40u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_257;
        case 4u:
          *(_DWORD *)(a1 + 144) |= 0x80u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_257;
        case 5u:
          *(_DWORD *)(a1 + 144) |= 0x10u;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_257;
        case 6u:
          *(_DWORD *)(a1 + 144) |= 0x400u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_257;
        case 7u:
          *(_DWORD *)(a1 + 144) |= 0x800u;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_257;
        case 8u:
          *(_DWORD *)(a1 + 144) |= 0x1000u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_257;
        case 9u:
          *(_DWORD *)(a1 + 144) |= 0x200u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_257;
        case 0xAu:
          *(_DWORD *)(a1 + 144) |= 0x100u;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_226;
              v44 += 7;
              v41 = v47;
              v18 = v45++ > 8;
            }
            while (!v18);
LABEL_164:
            LODWORD(v46) = 0;
            goto LABEL_226;
          }
          v117 = 0;
          v118 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v119 = v41 + 1;
              v120 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v119;
              v46 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v41 = v119;
                v18 = v118++ > 8;
                if (v18)
                  goto LABEL_164;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_226:
          *(_DWORD *)(a1 + 104) = v46;
          goto LABEL_258;
        case 0xBu:
          *(_DWORD *)(a1 + 144) |= 0x4000u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_257;
        case 0xCu:
          *(_DWORD *)(a1 + 144) |= 0x8000u;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_257;
        case 0xDu:
          *(_DWORD *)(a1 + 144) |= 0x10000u;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_257;
        case 0xEu:
          *(_DWORD *)(a1 + 144) |= 0x2000u;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_257;
        case 0xFu:
          *(_DWORD *)(a1 + 144) |= 0x20000u;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          v55 = *(_QWORD *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)this + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_229;
              v56 += 7;
              v53 = v59;
              v18 = v57++ > 8;
            }
            while (!v18);
LABEL_171:
            LODWORD(v58) = 0;
            goto LABEL_229;
          }
          v121 = 0;
          v122 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v123 = v53 + 1;
              v124 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)this + 1) = v123;
              v58 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v53 = v123;
                v18 = v122++ > 8;
                if (v18)
                  goto LABEL_171;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_229:
          *(_DWORD *)(a1 + 140) = v58;
          goto LABEL_258;
        case 0x10u:
          *(_DWORD *)(a1 + 144) |= 4u;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_232;
              v64 += 7;
              v61 = v67;
              v18 = v65++ > 8;
            }
            while (!v18);
LABEL_178:
            v66 = 0;
            goto LABEL_232;
          }
          v125 = 0;
          v126 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              v66 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v127 = v61 + 1;
              v128 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v127;
              v66 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v61 = v127;
                v18 = v126++ > 8;
                if (v18)
                  goto LABEL_178;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v66 = 0;
            }
            break;
          }
LABEL_232:
          *(_QWORD *)(a1 + 72) = v66;
          goto LABEL_258;
        case 0x11u:
          *(_DWORD *)(a1 + 144) |= 1u;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_235;
              v72 += 7;
              v69 = v75;
              v18 = v73++ > 8;
            }
            while (!v18);
LABEL_185:
            v74 = 0;
            goto LABEL_235;
          }
          v129 = 0;
          v130 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              v74 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v69 + 1;
              v132 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v131;
              v74 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v69 = v131;
                v18 = v130++ > 8;
                if (v18)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v74 = 0;
            }
            break;
          }
LABEL_235:
          *(_QWORD *)(a1 + 56) = v74;
          goto LABEL_258;
        case 0x12u:
          *(_DWORD *)(a1 + 144) |= 2u;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_238;
              v80 += 7;
              v77 = v83;
              v18 = v81++ > 8;
            }
            while (!v18);
LABEL_192:
            v82 = 0;
            goto LABEL_238;
          }
          v133 = 0;
          v134 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              v82 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v135 = v77 + 1;
              v136 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v135;
              v82 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                v77 = v135;
                v18 = v134++ > 8;
                if (v18)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v82 = 0;
            }
            break;
          }
LABEL_238:
          *(_QWORD *)(a1 + 64) = v82;
          goto LABEL_258;
        case 0x13u:
          if (v24 != 2)
          {
            v138 = *(char **)(a1 + 40);
            v137 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v138 >= v137)
            {
              v142 = (char *)*v10;
              v143 = (v138 - (_BYTE *)*v10) >> 2;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62)
LABEL_268:
                sub_21B796A0C();
              v145 = v137 - (_QWORD)v142;
              if (v145 >> 1 > v144)
                v144 = v145 >> 1;
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                v146 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v146 = v144;
              if (v146)
              {
                v147 = (char *)sub_21B796CD8(v11, v146);
                v142 = *(char **)(a1 + 32);
                v138 = *(char **)(a1 + 40);
              }
              else
              {
                v147 = 0;
              }
              v154 = &v147[4 * v143];
              *(_DWORD *)v154 = 0;
              v139 = v154 + 4;
              while (v138 != v142)
              {
                v155 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v154;
              *(_QWORD *)(a1 + 40) = v139;
              *(_QWORD *)(a1 + 48) = &v147[4 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_DWORD *)v138 = 0;
              v139 = v138 + 4;
            }
            *(_QWORD *)(a1 + 40) = v139;
            goto LABEL_253;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          while (v85 < v86 && !*((_BYTE *)this + 24))
          {
            v88 = *(char **)(a1 + 40);
            v87 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v88 >= v87)
            {
              v90 = (char *)*v10;
              v91 = (v88 - (_BYTE *)*v10) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
                goto LABEL_268;
              v93 = v87 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_21B796CD8(v11, v94);
                v90 = *(char **)(a1 + 32);
                v88 = *(char **)(a1 + 40);
              }
              else
              {
                v95 = 0;
              }
              v96 = &v95[4 * v91];
              *(_DWORD *)v96 = 0;
              v89 = v96 + 4;
              while (v88 != v90)
              {
                v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v96;
              *(_QWORD *)(a1 + 40) = v89;
              *(_QWORD *)(a1 + 48) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v88 = 0;
              v89 = v88 + 4;
            }
            *(_QWORD *)(a1 + 40) = v89;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_197;
            *(v89 - 1) = *(_DWORD *)(*(_QWORD *)this + v98);
            v86 = *((_QWORD *)this + 2);
            v85 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v85;
          }
          goto LABEL_198;
        case 0x14u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v99 = *((_QWORD *)this + 1);
            v100 = *((_QWORD *)this + 2);
            while (v99 < v100 && !*((_BYTE *)this + 24))
            {
              v102 = *(char **)(a1 + 16);
              v101 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v102 >= v101)
              {
                v104 = (char *)*v8;
                v105 = (v102 - (_BYTE *)*v8) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  goto LABEL_269;
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)sub_21B796CD8(v9, v108);
                  v104 = *(char **)(a1 + 8);
                  v102 = *(char **)(a1 + 16);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = 0;
                v103 = v110 + 4;
                while (v102 != v104)
                {
                  v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v110;
                *(_QWORD *)(a1 + 16) = v103;
                *(_QWORD *)(a1 + 24) = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_DWORD *)v102 = 0;
                v103 = v102 + 4;
              }
              *(_QWORD *)(a1 + 16) = v103;
              v112 = *((_QWORD *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              {
LABEL_197:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)this + v112);
              v100 = *((_QWORD *)this + 2);
              v99 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v99;
            }
LABEL_198:
            PB::Reader::recallMark();
          }
          else
          {
            v141 = *(char **)(a1 + 16);
            v140 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v141 >= v140)
            {
              v148 = (char *)*v8;
              v149 = (v141 - (_BYTE *)*v8) >> 2;
              v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62)
LABEL_269:
                sub_21B796A0C();
              v151 = v140 - (_QWORD)v148;
              if (v151 >> 1 > v150)
                v150 = v151 >> 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                v152 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v152 = v150;
              if (v152)
              {
                v153 = (char *)sub_21B796CD8(v9, v152);
                v148 = *(char **)(a1 + 8);
                v141 = *(char **)(a1 + 16);
              }
              else
              {
                v153 = 0;
              }
              v156 = &v153[4 * v149];
              *(_DWORD *)v156 = 0;
              v139 = v156 + 4;
              while (v141 != v148)
              {
                v157 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v156 - 1) = v157;
                v156 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v156;
              *(_QWORD *)(a1 + 16) = v139;
              *(_QWORD *)(a1 + 24) = &v153[4 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v139 = v141 + 4;
            }
            *(_QWORD *)(a1 + 16) = v139;
LABEL_253:
            v158 = *((_QWORD *)this + 1);
            if (v158 <= 0xFFFFFFFFFFFFFFFBLL && v158 + 4 <= *((_QWORD *)this + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(_QWORD *)this + v158);
LABEL_257:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_255:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_258:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_258;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B768F5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_DWORD *)(result + 144);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0)
      goto LABEL_18;
LABEL_43:
    result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 1) != 0)
    goto LABEL_43;
LABEL_18:
  if ((v4 & 2) != 0)
LABEL_19:
    result = PB::Writer::writeVarInt(this);
LABEL_20:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_21B7691BC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31E68;
  *(_DWORD *)(result + 132) = 0;
  return result;
}

void sub_21B7691D4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7691F8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  char v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  char v32;

  *(_QWORD *)result = &off_24DF31E68;
  *(_DWORD *)(result + 132) = 0;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000000) != 0)
  {
    v4 = *(_BYTE *)(a2 + 126);
    v3 = 0x4000000;
    *(_DWORD *)(result + 132) = 0x4000000;
    *(_BYTE *)(result + 126) = v4;
    v2 = *(_DWORD *)(a2 + 132);
    if ((v2 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    v5 = *(_BYTE *)(a2 + 127);
    v3 |= 0x8000000u;
    *(_DWORD *)(result + 132) = v3;
    *(_BYTE *)(result + 127) = v5;
    v2 = *(_DWORD *)(a2 + 132);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    v6 = *(_DWORD *)(a2 + 104);
    v3 |= 0x80000u;
    *(_DWORD *)(result + 132) = v3;
    *(_DWORD *)(result + 104) = v6;
    v2 = *(_DWORD *)(a2 + 132);
    if ((v2 & 0x800000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_36;
    }
  }
  else if ((v2 & 0x800000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 120);
  v3 |= 0x800000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 120) = v7;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  v8 = *(_DWORD *)(a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 108) = v8;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  v9 = *(_DWORD *)(a2 + 96);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 96) = v9;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  v10 = *(_DWORD *)(a2 + 92);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 92) = v10;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  v11 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 60) = v11;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  v12 = *(_DWORD *)(a2 + 56);
  v3 |= 0x80u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 56) = v12;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 52) = v13;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  v14 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 48) = v14;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  v15 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 72) = v15;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x4000) == 0)
  {
LABEL_17:
    if ((v2 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  v16 = *(_DWORD *)(a2 + 84);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 84) = v16;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x200000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  v17 = *(_DWORD *)(a2 + 112);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 112) = v17;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x40000) == 0)
  {
LABEL_19:
    if ((v2 & 8) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 100) = v18;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 8) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  v19 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 132) = v3;
  *(_QWORD *)(result + 32) = v19;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  v20 = *(_BYTE *)(a2 + 124);
  v3 |= 0x1000000u;
  *(_DWORD *)(result + 132) = v3;
  *(_BYTE *)(result + 124) = v20;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x8000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  v21 = *(_DWORD *)(a2 + 88);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 88) = v21;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  v22 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 132) = v3;
  *(_QWORD *)(result + 40) = v22;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x400000) == 0)
  {
LABEL_24:
    if ((v2 & 4) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  v23 = *(_DWORD *)(a2 + 116);
  v3 |= 0x400000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 116) = v23;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 4) == 0)
  {
LABEL_25:
    if ((v2 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  v24 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 132) = v3;
  *(_QWORD *)(result + 24) = v24;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x2000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  v25 = *(_DWORD *)(a2 + 80);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 80) = v25;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 2) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0)
      goto LABEL_28;
    goto LABEL_55;
  }
LABEL_54:
  v26 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 132) = v3;
  *(_QWORD *)(result + 16) = v26;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 1) == 0)
      goto LABEL_29;
    goto LABEL_56;
  }
LABEL_55:
  v27 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 76) = v27;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 1) == 0)
  {
LABEL_29:
    if ((v2 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_57;
  }
LABEL_56:
  v28 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 132) = v3;
  *(_QWORD *)(result + 8) = v28;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x200) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_58;
  }
LABEL_57:
  v29 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 64) = v29;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_59;
  }
LABEL_58:
  v30 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_DWORD *)(result + 132) = v3;
  *(_DWORD *)(result + 68) = v30;
  v2 = *(_DWORD *)(a2 + 132);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x2000000) == 0)
      return result;
LABEL_60:
    v32 = *(_BYTE *)(a2 + 125);
    *(_DWORD *)(result + 132) = v3 | 0x2000000;
    *(_BYTE *)(result + 125) = v32;
    return result;
  }
LABEL_59:
  v31 = *(_BYTE *)(a2 + 128);
  v3 |= 0x10000000u;
  *(_DWORD *)(result + 132) = v3;
  *(_BYTE *)(result + 128) = v31;
  if ((*(_DWORD *)(a2 + 132) & 0x2000000) != 0)
    goto LABEL_60;
  return result;
}

uint64_t sub_21B769540(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "configSuddenTransitionDurationThreshold", *(float *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 132);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configTransitionEndSpeedThreshold", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "configTransitionStartSpeedThreshold", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "deltaTriggerTime");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "gpsTimestamp");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "highSpeedMetersPerSecondThreshold", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "isGPSDetected");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "isGPSDetectedDebug");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isSuddenTransitionDetected");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "isTransitionDetected");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedEnd", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedStart", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "lastDetectedTransitionTimeEnd");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "lastDetectedTransitionTimeStart");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "loggedAtEpoch");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lowSpeedMetersPerSecondThresold", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "state");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "streamEndSpeed", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "streamStartSpeed", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "timestamp");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "transitionBaseDuration", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "transitionDuration", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "transitionEndSpeed", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "transitionEpsilonDuration", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
LABEL_59:
    PB::TextFormatter::format(this, "transitionStartSpeed", *(float *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 132) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_30;
  }
LABEL_58:
  PB::TextFormatter::format(this, "transitionSpeedStart", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800000) != 0)
    goto LABEL_59;
LABEL_29:
  if ((v5 & 0x10) != 0)
LABEL_30:
    PB::TextFormatter::format(this, "transitionTimeStart");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B769910(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  uint64_t result;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 200)
      {
        switch((int)v20)
        {
          case 201:
            *(_DWORD *)(a1 + 132) |= 8u;
            v23 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v24 = *(_QWORD *)this;
            if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
            {
              v74 = 0;
              v75 = 0;
              v27 = 0;
              if (v2 <= v23)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v23)
                {
                  v27 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_208;
                }
                v76 = v23++;
                v77 = *(_BYTE *)(v24 + v76);
                *((_QWORD *)this + 1) = v23;
                v27 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0)
                  break;
                v74 += 7;
                v14 = v75++ > 8;
                if (v14)
                {
                  v27 = 0;
LABEL_207:
                  v2 = v76 + 1;
                  goto LABEL_208;
                }
              }
              if (*((_BYTE *)this + 24))
                v27 = 0;
              goto LABEL_207;
            }
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v2 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v28 = *(_BYTE *)(v24 + v23);
              v27 |= (unint64_t)(v28 & 0x7F) << v25;
              if ((v28 & 0x80) == 0)
                goto LABEL_208;
              v25 += 7;
              v23 = v2;
              v14 = v26++ > 8;
            }
            while (!v14);
            v27 = 0;
LABEL_208:
            *(_QWORD *)(a1 + 32) = v27;
            break;
          case 202:
            *(_DWORD *)(a1 + 132) |= 0x1000000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v44 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v44 = v43 != 0;
            }
            *(_BYTE *)(a1 + 124) = v44;
            break;
          case 203:
            *(_DWORD *)(a1 + 132) |= 0x8000u;
            v45 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v46 = *(_QWORD *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              v86 = 0;
              v87 = 0;
              v49 = 0;
              if (v2 <= v45)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v45)
                {
                  LODWORD(v49) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_223;
                }
                v88 = v45++;
                v89 = *(_BYTE *)(v46 + v88);
                *((_QWORD *)this + 1) = v45;
                v49 |= (unint64_t)(v89 & 0x7F) << v86;
                if ((v89 & 0x80) == 0)
                  break;
                v86 += 7;
                v14 = v87++ > 8;
                if (v14)
                {
                  LODWORD(v49) = 0;
LABEL_222:
                  v2 = v88 + 1;
                  goto LABEL_223;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v49) = 0;
              goto LABEL_222;
            }
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v2 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
                goto LABEL_223;
              v47 += 7;
              v45 = v2;
              v14 = v48++ > 8;
            }
            while (!v14);
            LODWORD(v49) = 0;
LABEL_223:
            *(_DWORD *)(a1 + 88) = v49;
            break;
          case 204:
            *(_DWORD *)(a1 + 132) |= 0x10u;
            v51 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v52 = *(_QWORD *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              v90 = 0;
              v91 = 0;
              v55 = 0;
              if (v2 <= v51)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v51)
                {
                  v55 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_228;
                }
                v92 = v51++;
                v93 = *(_BYTE *)(v52 + v92);
                *((_QWORD *)this + 1) = v51;
                v55 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0)
                  break;
                v90 += 7;
                v14 = v91++ > 8;
                if (v14)
                {
                  v55 = 0;
LABEL_227:
                  v2 = v92 + 1;
                  goto LABEL_228;
                }
              }
              if (*((_BYTE *)this + 24))
                v55 = 0;
              goto LABEL_227;
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v2 = v51 + 1;
              *((_QWORD *)this + 1) = v51 + 1;
              v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0)
                goto LABEL_228;
              v53 += 7;
              v51 = v2;
              v14 = v54++ > 8;
            }
            while (!v14);
            v55 = 0;
LABEL_228:
            *(_QWORD *)(a1 + 40) = v55;
            break;
          case 205:
            *(_DWORD *)(a1 + 132) |= 0x400000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 206:
            *(_DWORD *)(a1 + 132) |= 4u;
            v57 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v58 = *(_QWORD *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              v94 = 0;
              v95 = 0;
              v61 = 0;
              if (v2 <= v57)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v57)
                {
                  v61 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_233;
                }
                v96 = v57++;
                v97 = *(_BYTE *)(v58 + v96);
                *((_QWORD *)this + 1) = v57;
                v61 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0)
                  break;
                v94 += 7;
                v14 = v95++ > 8;
                if (v14)
                {
                  v61 = 0;
LABEL_232:
                  v2 = v96 + 1;
                  goto LABEL_233;
                }
              }
              if (*((_BYTE *)this + 24))
                v61 = 0;
              goto LABEL_232;
            }
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v2 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0)
                goto LABEL_233;
              v59 += 7;
              v57 = v2;
              v14 = v60++ > 8;
            }
            while (!v14);
            v61 = 0;
LABEL_233:
            *(_QWORD *)(a1 + 24) = v61;
            break;
          case 207:
            *(_DWORD *)(a1 + 132) |= 0x2000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 208:
            *(_DWORD *)(a1 + 132) |= 2u;
            v63 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v64 = *(_QWORD *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              v98 = 0;
              v99 = 0;
              v67 = 0;
              if (v2 <= v63)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v63)
                {
                  v67 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_238;
                }
                v100 = v63++;
                v101 = *(_BYTE *)(v64 + v100);
                *((_QWORD *)this + 1) = v63;
                v67 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0)
                  break;
                v98 += 7;
                v14 = v99++ > 8;
                if (v14)
                {
                  v67 = 0;
LABEL_237:
                  v2 = v100 + 1;
                  goto LABEL_238;
                }
              }
              if (*((_BYTE *)this + 24))
                v67 = 0;
              goto LABEL_237;
            }
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v2 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0)
                goto LABEL_238;
              v65 += 7;
              v63 = v2;
              v14 = v66++ > 8;
            }
            while (!v14);
            v67 = 0;
LABEL_238:
            *(_QWORD *)(a1 + 16) = v67;
            break;
          case 209:
            *(_DWORD *)(a1 + 132) |= 0x1000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            {
LABEL_137:
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_198:
              v2 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v2;
            }
            break;
          default:
            switch((int)v20)
            {
              case 301:
                *(_DWORD *)(a1 + 132) |= 1u;
                v29 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v30 = *(_QWORD *)this;
                if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
                {
                  v78 = 0;
                  v79 = 0;
                  v33 = 0;
                  if (v2 <= v29)
                    v2 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v2 == v29)
                    {
                      v33 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_213;
                    }
                    v80 = v29++;
                    v81 = *(_BYTE *)(v30 + v80);
                    *((_QWORD *)this + 1) = v29;
                    v33 |= (unint64_t)(v81 & 0x7F) << v78;
                    if ((v81 & 0x80) == 0)
                      break;
                    v78 += 7;
                    v14 = v79++ > 8;
                    if (v14)
                    {
                      v33 = 0;
LABEL_212:
                      v2 = v80 + 1;
                      goto LABEL_213;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v33 = 0;
                  goto LABEL_212;
                }
                v31 = 0;
                v32 = 0;
                v33 = 0;
                do
                {
                  v2 = v29 + 1;
                  *((_QWORD *)this + 1) = v29 + 1;
                  v34 = *(_BYTE *)(v30 + v29);
                  v33 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    goto LABEL_213;
                  v31 += 7;
                  v29 = v2;
                  v14 = v32++ > 8;
                }
                while (!v14);
                v33 = 0;
LABEL_213:
                *(_QWORD *)(a1 + 8) = v33;
                break;
              case 302:
                *(_DWORD *)(a1 + 132) |= 0x200u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
                goto LABEL_198;
              case 303:
                *(_DWORD *)(a1 + 132) |= 0x400u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
                goto LABEL_198;
              case 304:
                *(_DWORD *)(a1 + 132) |= 0x10000000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 >= *((_QWORD *)this + 2))
                {
                  v70 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v69 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                  *((_QWORD *)this + 1) = v2;
                  v70 = v69 != 0;
                }
                *(_BYTE *)(a1 + 128) = v70;
                goto LABEL_199;
              case 305:
                *(_DWORD *)(a1 + 132) |= 0x2000000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 >= *((_QWORD *)this + 2))
                {
                  v72 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v71 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                  *((_QWORD *)this + 1) = v2;
                  v72 = v71 != 0;
                }
                *(_BYTE *)(a1 + 125) = v72;
                goto LABEL_199;
              default:
LABEL_127:
                result = PB::Reader::skip(this);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)this + 1);
                goto LABEL_199;
            }
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 1:
            *(_DWORD *)(a1 + 132) |= 0x4000000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v22 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v22 = v21 != 0;
            }
            *(_BYTE *)(a1 + 126) = v22;
            break;
          case 2:
            *(_DWORD *)(a1 + 132) |= 0x8000000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 127) = v36;
            break;
          case 3:
            *(_DWORD *)(a1 + 132) |= 0x80000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 4:
            *(_DWORD *)(a1 + 132) |= 0x800000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 5:
            *(_DWORD *)(a1 + 132) |= 0x100000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 6:
            *(_DWORD *)(a1 + 132) |= 0x20000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 7:
            *(_DWORD *)(a1 + 132) |= 0x10000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 8:
            *(_DWORD *)(a1 + 132) |= 0x100u;
            v37 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v38 = *(_QWORD *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              v82 = 0;
              v83 = 0;
              v41 = 0;
              if (v2 <= v37)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_218;
                }
                v84 = v37++;
                v85 = *(_BYTE *)(v38 + v84);
                *((_QWORD *)this + 1) = v37;
                v41 |= (unint64_t)(v85 & 0x7F) << v82;
                if ((v85 & 0x80) == 0)
                  break;
                v82 += 7;
                v14 = v83++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_217:
                  v2 = v84 + 1;
                  goto LABEL_218;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v41) = 0;
              goto LABEL_217;
            }
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v2 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0)
                goto LABEL_218;
              v39 += 7;
              v37 = v2;
              v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_218:
            *(_DWORD *)(a1 + 60) = v41;
            break;
          case 9:
            *(_DWORD *)(a1 + 132) |= 0x80u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 10:
            *(_DWORD *)(a1 + 132) |= 0x40u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 11:
            *(_DWORD *)(a1 + 132) |= 0x20u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          default:
            switch((int)v20)
            {
              case 'e':
                *(_DWORD *)(a1 + 132) |= 0x800u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              case 'f':
                *(_DWORD *)(a1 + 132) |= 0x4000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              case 'g':
                *(_DWORD *)(a1 + 132) |= 0x200000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              case 'h':
                *(_DWORD *)(a1 + 132) |= 0x40000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              default:
                goto LABEL_127;
            }
            goto LABEL_198;
        }
      }
LABEL_199:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B76A690(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 132);
  if ((v4 & 0x4000000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_DWORD *)(v3 + 132);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x200000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x2000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_58:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 132) & 0x2000000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B76A9E0(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31EA0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_21B76A9F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B76AA1C(uint64_t result, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  *(_QWORD *)result = &off_24DF31EA0;
  *(_DWORD *)(result + 64) = 0;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_DWORD *)(a2 + 44);
    v3 = 64;
    *(_WORD *)(result + 64) = 64;
    *(_DWORD *)(result + 44) = v4;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 36);
    v3 |= 0x10u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 36) = v5;
    v2 = *(_WORD *)(a2 + 64);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v3 |= 0x20u;
    *(_WORD *)(result + 64) = v3;
    *(_DWORD *)(result + 40) = v6;
    v2 = *(_WORD *)(a2 + 64);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 32) = v7;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v8 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 24) = v8;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  v9 = *(_BYTE *)(a2 + 61);
  v3 |= 0x800u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 61) = v9;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v10 = *(_BYTE *)(a2 + 60);
  v3 |= 0x400u;
  *(_WORD *)(result + 64) = v3;
  *(_BYTE *)(result + 60) = v10;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v11 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 8) = v11;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  v12 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(result + 64) = v3;
  *(_QWORD *)(result + 16) = v12;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x200) == 0)
  {
LABEL_14:
    if ((v2 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 56) = v13;
  v2 = *(_WORD *)(a2 + 64);
  if ((v2 & 0x100) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_26:
    v15 = *(_DWORD *)(a2 + 48);
    *(_WORD *)(result + 64) = v3 | 0x80;
    *(_DWORD *)(result + 48) = v15;
    return result;
  }
LABEL_25:
  v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_WORD *)(result + 64) = v3;
  *(_DWORD *)(result + 52) = v14;
  if ((*(_WORD *)(a2 + 64) & 0x80) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_21B76AB88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "autocorrelationRangeValCriticalThreshold", *(float *)(a1 + 32));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "autocorrelationRangeValThreshold", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "autocorrelationTimeVariationCriticalThreshold");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "autocorrelationTimeVariationThreshold");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isCriticalFP");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isPeriodic");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "numDmSamplesEpoch");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timeVariation");
    if ((*(_WORD *)(a1 + 64) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "rangeVal", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 4) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B76AD38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  uint64_t result;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 202)
      {
        switch((int)v20)
        {
          case 301:
            *(_WORD *)(a1 + 64) |= 1u;
            v27 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v28 = *(_QWORD *)this;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              v72 = 0;
              v73 = 0;
              v31 = 0;
              if (v2 <= v27)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v27)
                {
                  v31 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_155;
                }
                v74 = v27++;
                v75 = *(_BYTE *)(v28 + v74);
                *((_QWORD *)this + 1) = v27;
                v31 |= (unint64_t)(v75 & 0x7F) << v72;
                if ((v75 & 0x80) == 0)
                  break;
                v72 += 7;
                v14 = v73++ > 8;
                if (v14)
                {
                  v31 = 0;
LABEL_154:
                  v2 = v74 + 1;
                  goto LABEL_155;
                }
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
              goto LABEL_154;
            }
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v2 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                goto LABEL_155;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
            }
            while (!v14);
            v31 = 0;
LABEL_155:
            *(_QWORD *)(a1 + 8) = v31;
            break;
          case 302:
            *(_WORD *)(a1 + 64) |= 2u;
            v43 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v44 = *(_QWORD *)this;
            if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
            {
              v80 = 0;
              v81 = 0;
              v47 = 0;
              if (v2 <= v43)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v43)
                {
                  v47 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_165;
                }
                v82 = v43++;
                v83 = *(_BYTE *)(v44 + v82);
                *((_QWORD *)this + 1) = v43;
                v47 |= (unint64_t)(v83 & 0x7F) << v80;
                if ((v83 & 0x80) == 0)
                  break;
                v80 += 7;
                v14 = v81++ > 8;
                if (v14)
                {
                  v47 = 0;
LABEL_164:
                  v2 = v82 + 1;
                  goto LABEL_165;
                }
              }
              if (*((_BYTE *)this + 24))
                v47 = 0;
              goto LABEL_164;
            }
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v2 = v43 + 1;
              *((_QWORD *)this + 1) = v43 + 1;
              v48 = *(_BYTE *)(v44 + v43);
              v47 |= (unint64_t)(v48 & 0x7F) << v45;
              if ((v48 & 0x80) == 0)
                goto LABEL_165;
              v45 += 7;
              v43 = v2;
              v14 = v46++ > 8;
            }
            while (!v14);
            v47 = 0;
LABEL_165:
            *(_QWORD *)(a1 + 16) = v47;
            break;
          case 303:
            *(_WORD *)(a1 + 64) |= 0x200u;
            v49 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v50 = *(_QWORD *)this;
            if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
            {
              v84 = 0;
              v85 = 0;
              v53 = 0;
              if (v2 <= v49)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v49)
                {
                  LODWORD(v53) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_170;
                }
                v86 = v49++;
                v87 = *(_BYTE *)(v50 + v86);
                *((_QWORD *)this + 1) = v49;
                v53 |= (unint64_t)(v87 & 0x7F) << v84;
                if ((v87 & 0x80) == 0)
                  break;
                v84 += 7;
                v14 = v85++ > 8;
                if (v14)
                {
                  LODWORD(v53) = 0;
LABEL_169:
                  v2 = v86 + 1;
                  goto LABEL_170;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
              goto LABEL_169;
            }
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v2 = v49 + 1;
              *((_QWORD *)this + 1) = v49 + 1;
              v54 = *(_BYTE *)(v50 + v49);
              v53 |= (unint64_t)(v54 & 0x7F) << v51;
              if ((v54 & 0x80) == 0)
                goto LABEL_170;
              v51 += 7;
              v49 = v2;
              v14 = v52++ > 8;
            }
            while (!v14);
            LODWORD(v53) = 0;
LABEL_170:
            *(_DWORD *)(a1 + 56) = v53;
            break;
          case 304:
            *(_WORD *)(a1 + 64) |= 0x100u;
            v2 = *((_QWORD *)this + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_145:
              v2 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v2;
            }
            else
            {
LABEL_74:
              *((_BYTE *)this + 24) = 1;
            }
            break;
          case 305:
            *(_WORD *)(a1 + 64) |= 0x80u;
            v55 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v56 = *(_QWORD *)this;
            if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
            {
              v88 = 0;
              v89 = 0;
              v59 = 0;
              if (v2 <= v55)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v55)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_175;
                }
                v90 = v55++;
                v91 = *(_BYTE *)(v56 + v90);
                *((_QWORD *)this + 1) = v55;
                v59 |= (unint64_t)(v91 & 0x7F) << v88;
                if ((v91 & 0x80) == 0)
                  break;
                v88 += 7;
                v14 = v89++ > 8;
                if (v14)
                {
                  LODWORD(v59) = 0;
LABEL_174:
                  v2 = v90 + 1;
                  goto LABEL_175;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v59) = 0;
              goto LABEL_174;
            }
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v2 = v55 + 1;
              *((_QWORD *)this + 1) = v55 + 1;
              v60 = *(_BYTE *)(v56 + v55);
              v59 |= (unint64_t)(v60 & 0x7F) << v57;
              if ((v60 & 0x80) == 0)
                goto LABEL_175;
              v57 += 7;
              v55 = v2;
              v14 = v58++ > 8;
            }
            while (!v14);
            LODWORD(v59) = 0;
LABEL_175:
            *(_DWORD *)(a1 + 48) = v59;
            break;
          default:
            if ((_DWORD)v20 != 203)
              goto LABEL_89;
            *(_WORD *)(a1 + 64) |= 0x400u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 60) = v36;
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 'e':
            *(_WORD *)(a1 + 64) |= 0x40u;
            v21 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v22 = *(_QWORD *)this;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v68 = 0;
              v69 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  LODWORD(v25) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_150;
                }
                v70 = v21++;
                v71 = *(_BYTE *)(v22 + v70);
                *((_QWORD *)this + 1) = v21;
                v25 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0)
                  break;
                v68 += 7;
                v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
LABEL_149:
                  v2 = v70 + 1;
                  goto LABEL_150;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
              goto LABEL_149;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_150;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            LODWORD(v25) = 0;
LABEL_150:
            *(_DWORD *)(a1 + 44) = v25;
            break;
          case 'f':
            *(_WORD *)(a1 + 64) |= 0x10u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_74;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_145;
          case 'g':
            *(_WORD *)(a1 + 64) |= 0x20u;
            v37 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v38 = *(_QWORD *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              v76 = 0;
              v77 = 0;
              v41 = 0;
              if (v2 <= v37)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_160;
                }
                v78 = v37++;
                v79 = *(_BYTE *)(v38 + v78);
                *((_QWORD *)this + 1) = v37;
                v41 |= (unint64_t)(v79 & 0x7F) << v76;
                if ((v79 & 0x80) == 0)
                  break;
                v76 += 7;
                v14 = v77++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_159:
                  v2 = v78 + 1;
                  goto LABEL_160;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v41) = 0;
              goto LABEL_159;
            }
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v2 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0)
                goto LABEL_160;
              v39 += 7;
              v37 = v2;
              v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_160:
            *(_DWORD *)(a1 + 40) = v41;
            break;
          case 'h':
            *(_WORD *)(a1 + 64) |= 8u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_74;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_145;
          default:
            if ((_DWORD)v20 == 201)
            {
              *(_WORD *)(a1 + 64) |= 4u;
              v61 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v62 = *(_QWORD *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v65 = 0;
                if (v2 <= v61)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v61)
                  {
                    v65 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_180;
                  }
                  v94 = v61++;
                  v95 = *(_BYTE *)(v62 + v94);
                  *((_QWORD *)this + 1) = v61;
                  v65 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    v65 = 0;
                    goto LABEL_179;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v65 = 0;
LABEL_179:
                v2 = v94 + 1;
              }
              else
              {
                v63 = 0;
                v64 = 0;
                v65 = 0;
                while (1)
                {
                  v2 = v61 + 1;
                  *((_QWORD *)this + 1) = v61 + 1;
                  v66 = *(_BYTE *)(v62 + v61);
                  v65 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v61 = v2;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v65 = 0;
                    break;
                  }
                }
              }
LABEL_180:
              *(_QWORD *)(a1 + 24) = v65;
            }
            else if ((_DWORD)v20 == 202)
            {
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 61) = v34;
            }
            else
            {
LABEL_89:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
            }
            break;
        }
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B76B6A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B76B818(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31ED8;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_21B76B830(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B76B854(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  *(_QWORD *)result = &off_24DF31ED8;
  *(_DWORD *)(result + 68) = 0;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 4) != 0)
  {
    v4 = *(_DWORD *)(a2 + 20);
    v3 = 4;
    *(_DWORD *)(result + 68) = 4;
    *(_DWORD *)(result + 20) = v4;
    v2 = *(_DWORD *)(a2 + 68);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(result + 68) = v3;
    *(_DWORD *)(result + 16) = v5;
    v2 = *(_DWORD *)(a2 + 68);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 8u;
    *(_DWORD *)(result + 68) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_DWORD *)(a2 + 68);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0)
        goto LABEL_9;
      goto LABEL_28;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 68) = v3;
  *(_QWORD *)(result + 8) = v7;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  v8 = *(_BYTE *)(a2 + 56);
  v3 |= 0x800u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 56) = v8;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  v9 = *(_BYTE *)(a2 + 57);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 57) = v9;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  v10 = *(_BYTE *)(a2 + 58);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 58) = v10;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x100000) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  v11 = *(_BYTE *)(a2 + 65);
  v3 |= 0x100000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 65) = v11;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  v12 = *(_BYTE *)(a2 + 63);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 63) = v12;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  v13 = *(_BYTE *)(a2 + 60);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 60) = v13;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x4000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  v14 = *(_BYTE *)(a2 + 59);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 59) = v14;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  v15 = *(_BYTE *)(a2 + 64);
  v3 |= 0x80000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 64) = v15;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  v16 = *(_BYTE *)(a2 + 61);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 61) = v16;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x20000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  v17 = *(_BYTE *)(a2 + 62);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 68) = v3;
  *(_BYTE *)(result + 62) = v17;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_39;
  }
LABEL_38:
  v18 = *(_DWORD *)(a2 + 52);
  v3 |= 0x400u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 52) = v18;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_40;
  }
LABEL_39:
  v19 = *(_DWORD *)(a2 + 44);
  v3 |= 0x100u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 44) = v19;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_41;
  }
LABEL_40:
  v20 = *(_DWORD *)(a2 + 32);
  v3 |= 0x20u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 32) = v20;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 0x200) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  v21 = *(_DWORD *)(a2 + 28);
  v3 |= 0x10u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 28) = v21;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x200) == 0)
  {
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_43;
  }
LABEL_42:
  v22 = *(_DWORD *)(a2 + 48);
  v3 |= 0x200u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 48) = v22;
  v2 = *(_DWORD *)(a2 + 68);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      return result;
LABEL_44:
    v24 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(result + 68) = v3 | 0x80;
    *(_DWORD *)(result + 40) = v24;
    return result;
  }
LABEL_43:
  v23 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_DWORD *)(result + 68) = v3;
  *(_DWORD *)(result + 36) = v23;
  if ((*(_DWORD *)(a2 + 68) & 0x80) != 0)
    goto LABEL_44;
  return result;
}

uint64_t sub_21B76BABC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x800) != 0)
  {
    PB::TextFormatter::format(this, "crashDetectorDecision");
    v5 = *(_DWORD *)(a1 + 68);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "detectorPostTriggerTimeOffsetWindow", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "detectorPreTriggerTimeOffsetWindow", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "earlyCrashDetectorDecision");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "epochLatchingCount", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hasAudioInEpoch");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "isAudio");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isBaro");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x10000) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "isDescalationDecided");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "isDescalationRequired");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "isFreeFall");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isGPS");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x100000) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isPulse");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "latchedIsAudio");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_16:
    if ((v5 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "latchedIsBaro");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "latchedIsDescalationDecided");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_18:
    if ((v5 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "latchedIsDescalationRequired");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "latchedIsFreeFall");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(this, "latchedIsPulse");
    if ((*(_DWORD *)(a1 + 68) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(this, "latchedIsGPS");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x400) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 1) != 0)
LABEL_22:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B76BD8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  char v77;
  int v78;
  BOOL v79;
  int v80;
  BOOL v81;
  int v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int v86;
  BOOL v87;
  int v88;
  BOOL v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      switch((int)v20)
      {
        case 301:
          *(_DWORD *)(a1 + 68) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v28 = v27 != 0;
          }
          *(_BYTE *)(a1 + 65) = v28;
          break;
        case 302:
          *(_DWORD *)(a1 + 68) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v79 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v78 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v79 = v78 != 0;
          }
          *(_BYTE *)(a1 + 63) = v79;
          break;
        case 303:
          *(_DWORD *)(a1 + 68) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v81 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v81 = v80 != 0;
          }
          *(_BYTE *)(a1 + 60) = v81;
          break;
        case 304:
          *(_DWORD *)(a1 + 68) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v83 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v82 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v83 = v82 != 0;
          }
          *(_BYTE *)(a1 + 59) = v83;
          break;
        case 305:
          *(_DWORD *)(a1 + 68) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v85 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v85 = v84 != 0;
          }
          *(_BYTE *)(a1 + 64) = v85;
          break;
        case 306:
          *(_DWORD *)(a1 + 68) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v86 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v87 = v86 != 0;
          }
          *(_BYTE *)(a1 + 61) = v87;
          break;
        case 307:
          *(_DWORD *)(a1 + 68) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v89 = v88 != 0;
          }
          *(_BYTE *)(a1 + 62) = v89;
          break;
        default:
          switch((int)v20)
          {
            case 401:
              *(_DWORD *)(a1 + 68) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v94 = 0;
                v95 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_207;
                  }
                  v96 = v21++;
                  v97 = *(_BYTE *)(v22 + v96);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v97 & 0x7F) << v94;
                  if ((v97 & 0x80) == 0)
                    break;
                  v94 += 7;
                  v14 = v95++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
LABEL_206:
                v2 = v96 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                while (1)
                {
                  v2 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    break;
                  v23 += 7;
                  v21 = v2;
                  v14 = v24++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    break;
                  }
                }
              }
LABEL_207:
              *(_DWORD *)(a1 + 52) = v25;
              break;
            case 402:
              *(_DWORD *)(a1 + 68) |= 0x100u;
              v42 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v43 = *(_QWORD *)this;
              if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
              {
                v98 = 0;
                v99 = 0;
                v46 = 0;
                if (v2 <= v42)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v42)
                  {
                    LODWORD(v46) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_212;
                  }
                  v100 = v42++;
                  v101 = *(_BYTE *)(v43 + v100);
                  *((_QWORD *)this + 1) = v42;
                  v46 |= (unint64_t)(v101 & 0x7F) << v98;
                  if ((v101 & 0x80) == 0)
                    break;
                  v98 += 7;
                  v14 = v99++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v46) = 0;
LABEL_211:
                v2 = v100 + 1;
              }
              else
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                while (1)
                {
                  v2 = v42 + 1;
                  *((_QWORD *)this + 1) = v42 + 1;
                  v47 = *(_BYTE *)(v43 + v42);
                  v46 |= (unint64_t)(v47 & 0x7F) << v44;
                  if ((v47 & 0x80) == 0)
                    break;
                  v44 += 7;
                  v42 = v2;
                  v14 = v45++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    break;
                  }
                }
              }
LABEL_212:
              *(_DWORD *)(a1 + 44) = v46;
              break;
            case 403:
              *(_DWORD *)(a1 + 68) |= 0x20u;
              v48 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v49 = *(_QWORD *)this;
              if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
              {
                v102 = 0;
                v103 = 0;
                v52 = 0;
                if (v2 <= v48)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v48)
                  {
                    LODWORD(v52) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_217;
                  }
                  v104 = v48++;
                  v105 = *(_BYTE *)(v49 + v104);
                  *((_QWORD *)this + 1) = v48;
                  v52 |= (unint64_t)(v105 & 0x7F) << v102;
                  if ((v105 & 0x80) == 0)
                    break;
                  v102 += 7;
                  v14 = v103++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v52) = 0;
LABEL_216:
                v2 = v104 + 1;
              }
              else
              {
                v50 = 0;
                v51 = 0;
                v52 = 0;
                while (1)
                {
                  v2 = v48 + 1;
                  *((_QWORD *)this + 1) = v48 + 1;
                  v53 = *(_BYTE *)(v49 + v48);
                  v52 |= (unint64_t)(v53 & 0x7F) << v50;
                  if ((v53 & 0x80) == 0)
                    break;
                  v50 += 7;
                  v48 = v2;
                  v14 = v51++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    break;
                  }
                }
              }
LABEL_217:
              *(_DWORD *)(a1 + 32) = v52;
              break;
            case 404:
              *(_DWORD *)(a1 + 68) |= 0x10u;
              v54 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v55 = *(_QWORD *)this;
              if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
              {
                v106 = 0;
                v107 = 0;
                v58 = 0;
                if (v2 <= v54)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v54)
                  {
                    LODWORD(v58) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_222;
                  }
                  v108 = v54++;
                  v109 = *(_BYTE *)(v55 + v108);
                  *((_QWORD *)this + 1) = v54;
                  v58 |= (unint64_t)(v109 & 0x7F) << v106;
                  if ((v109 & 0x80) == 0)
                    break;
                  v106 += 7;
                  v14 = v107++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    goto LABEL_221;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v58) = 0;
LABEL_221:
                v2 = v108 + 1;
              }
              else
              {
                v56 = 0;
                v57 = 0;
                v58 = 0;
                while (1)
                {
                  v2 = v54 + 1;
                  *((_QWORD *)this + 1) = v54 + 1;
                  v59 = *(_BYTE *)(v55 + v54);
                  v58 |= (unint64_t)(v59 & 0x7F) << v56;
                  if ((v59 & 0x80) == 0)
                    break;
                  v56 += 7;
                  v54 = v2;
                  v14 = v57++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    break;
                  }
                }
              }
LABEL_222:
              *(_DWORD *)(a1 + 28) = v58;
              break;
            case 405:
              *(_DWORD *)(a1 + 68) |= 0x200u;
              v60 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v61 = *(_QWORD *)this;
              if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
              {
                v110 = 0;
                v111 = 0;
                v64 = 0;
                if (v2 <= v60)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v60)
                  {
                    LODWORD(v64) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_227;
                  }
                  v112 = v60++;
                  v113 = *(_BYTE *)(v61 + v112);
                  *((_QWORD *)this + 1) = v60;
                  v64 |= (unint64_t)(v113 & 0x7F) << v110;
                  if ((v113 & 0x80) == 0)
                    break;
                  v110 += 7;
                  v14 = v111++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    goto LABEL_226;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v64) = 0;
LABEL_226:
                v2 = v112 + 1;
              }
              else
              {
                v62 = 0;
                v63 = 0;
                v64 = 0;
                while (1)
                {
                  v2 = v60 + 1;
                  *((_QWORD *)this + 1) = v60 + 1;
                  v65 = *(_BYTE *)(v61 + v60);
                  v64 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v60 = v2;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    break;
                  }
                }
              }
LABEL_227:
              *(_DWORD *)(a1 + 48) = v64;
              break;
            case 406:
              *(_DWORD *)(a1 + 68) |= 0x40u;
              v66 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v67 = *(_QWORD *)this;
              if (v66 > 0xFFFFFFFFFFFFFFF5 || v66 + 10 > v2)
              {
                v114 = 0;
                v115 = 0;
                v70 = 0;
                if (v2 <= v66)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v66)
                  {
                    LODWORD(v70) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_232;
                  }
                  v116 = v66++;
                  v117 = *(_BYTE *)(v67 + v116);
                  *((_QWORD *)this + 1) = v66;
                  v70 |= (unint64_t)(v117 & 0x7F) << v114;
                  if ((v117 & 0x80) == 0)
                    break;
                  v114 += 7;
                  v14 = v115++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_231;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v70) = 0;
LABEL_231:
                v2 = v116 + 1;
              }
              else
              {
                v68 = 0;
                v69 = 0;
                v70 = 0;
                while (1)
                {
                  v2 = v66 + 1;
                  *((_QWORD *)this + 1) = v66 + 1;
                  v71 = *(_BYTE *)(v67 + v66);
                  v70 |= (unint64_t)(v71 & 0x7F) << v68;
                  if ((v71 & 0x80) == 0)
                    break;
                  v68 += 7;
                  v66 = v2;
                  v14 = v69++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    break;
                  }
                }
              }
LABEL_232:
              *(_DWORD *)(a1 + 36) = v70;
              break;
            case 407:
              *(_DWORD *)(a1 + 68) |= 0x80u;
              v72 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v73 = *(_QWORD *)this;
              if (v72 > 0xFFFFFFFFFFFFFFF5 || v72 + 10 > v2)
              {
                v118 = 0;
                v119 = 0;
                v76 = 0;
                if (v2 <= v72)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v72)
                  {
                    LODWORD(v76) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_237;
                  }
                  v120 = v72++;
                  v121 = *(_BYTE *)(v73 + v120);
                  *((_QWORD *)this + 1) = v72;
                  v76 |= (unint64_t)(v121 & 0x7F) << v118;
                  if ((v121 & 0x80) == 0)
                    break;
                  v118 += 7;
                  v14 = v119++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    goto LABEL_236;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v76) = 0;
LABEL_236:
                v2 = v120 + 1;
              }
              else
              {
                v74 = 0;
                v75 = 0;
                v76 = 0;
                while (1)
                {
                  v2 = v72 + 1;
                  *((_QWORD *)this + 1) = v72 + 1;
                  v77 = *(_BYTE *)(v73 + v72);
                  v76 |= (unint64_t)(v77 & 0x7F) << v74;
                  if ((v77 & 0x80) == 0)
                    break;
                  v74 += 7;
                  v72 = v2;
                  v14 = v75++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    break;
                  }
                }
              }
LABEL_237:
              *(_DWORD *)(a1 + 40) = v76;
              break;
            default:
              if ((_DWORD)v20 != 201)
                goto LABEL_64;
              *(_DWORD *)(a1 + 68) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 58) = v32;
              break;
          }
          break;
      }
      goto LABEL_238;
    }
    if ((int)v20 > 100)
    {
      switch((_DWORD)v20)
      {
        case 'e':
          *(_DWORD *)(a1 + 68) |= 1u;
          v33 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v34 = *(_QWORD *)this;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            v90 = 0;
            v91 = 0;
            v37 = 0;
            if (v2 <= v33)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v33)
              {
                v37 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_202;
              }
              v92 = v33++;
              v93 = *(_BYTE *)(v34 + v92);
              *((_QWORD *)this + 1) = v33;
              v37 |= (unint64_t)(v93 & 0x7F) << v90;
              if ((v93 & 0x80) == 0)
                break;
              v90 += 7;
              v14 = v91++ > 8;
              if (v14)
              {
                v37 = 0;
                goto LABEL_201;
              }
            }
            if (*((_BYTE *)this + 24))
              v37 = 0;
LABEL_201:
            v2 = v92 + 1;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v2 = v33 + 1;
              *((_QWORD *)this + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                break;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
              if (v14)
              {
                v37 = 0;
                break;
              }
            }
          }
LABEL_202:
          *(_QWORD *)(a1 + 8) = v37;
          break;
        case 'f':
          *(_DWORD *)(a1 + 68) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v40 = v39 != 0;
          }
          *(_BYTE *)(a1 + 56) = v40;
          break;
        case 'g':
          *(_DWORD *)(a1 + 68) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 57) = v30;
          break;
        default:
LABEL_64:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
    }
    else
    {
      switch((_DWORD)v20)
      {
        case 1:
          *(_DWORD *)(a1 + 68) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_197;
          }
          break;
        case 2:
          *(_DWORD *)(a1 + 68) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_197;
          }
          break;
        case 3:
          *(_DWORD *)(a1 + 68) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_197:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
            goto LABEL_238;
          }
          break;
        default:
          goto LABEL_64;
      }
      *((_BYTE *)this + 24) = 1;
    }
LABEL_238:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_21B76CA2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 68);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 20));
    v4 = *(_DWORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 68) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B76CC9C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31F10;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_21B76CCB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B76CCD8(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;

  *(_QWORD *)result = &off_24DF31F10;
  *(_DWORD *)(result + 92) = 0;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x200) != 0)
  {
    v4 = *(_DWORD *)(a2 + 60);
    v3 = 512;
    *(_DWORD *)(result + 92) = 512;
    *(_DWORD *)(result + 60) = v4;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x4000) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 80);
    v3 |= 0x4000u;
    *(_DWORD *)(result + 92) = v3;
    *(_DWORD *)(result + 80) = v5;
    v2 = *(_DWORD *)(a2 + 92);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    v6 = *(_DWORD *)(a2 + 64);
    v3 |= 0x400u;
    *(_DWORD *)(result + 92) = v3;
    *(_DWORD *)(result + 64) = v6;
    v2 = *(_DWORD *)(a2 + 92);
    if ((v2 & 0x8000) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x8000) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 84) = v7;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *(_QWORD *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 24) = v8;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 8) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 32) = v9;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 76) = v10;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *(_DWORD *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 56) = v11;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40000) == 0)
  {
LABEL_13:
    if ((v2 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *(_BYTE *)(a2 + 90);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 90) = v12;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20000) == 0)
  {
LABEL_14:
    if ((v2 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *(_BYTE *)(a2 + 89);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 92) = v3;
  *(_BYTE *)(result + 89) = v13;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x1000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 72) = v14;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *(_DWORD *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 68) = v15;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 1) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 16) = v16;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 1) == 0)
  {
LABEL_18:
    if ((v2 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 92) = v3;
  *(_QWORD *)(result + 8) = v17;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 40) = v18;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *(_DWORD *)(a2 + 48);
  v3 |= 0x40u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 48) = v19;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 52) = v20;
  v2 = *(_DWORD *)(a2 + 92);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0)
      return result;
LABEL_40:
    v22 = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(result + 92) = v3 | 0x10000;
    *(_BYTE *)(result + 88) = v22;
    return result;
  }
LABEL_39:
  v21 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(result + 92) = v3;
  *(_DWORD *)(result + 44) = v21;
  if ((*(_DWORD *)(a2 + 92) & 0x10000) != 0)
    goto LABEL_40;
  return result;
}

uint64_t sub_21B76CF08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsDeltaTimestamp");
    v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsDeltaTimestampSeconds", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "gpsIsRealSample", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gpsTimestamp");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "loggedAtEpoch");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "movingGpsCount");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "movingGpsCountResetRequired");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "movingSpeedMetersPerSecondThreshold", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "movingSpeedMetersPerSecondThresholdFromSydneyB", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "numLowOrFakeSamplesInHistory");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "numSamplesInHistory");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "staticGpsCount");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "staticGpsCountResetRequired");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "staticSpeedMetersPerSecondThreshold", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_DWORD *)(a1 + 92) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "staticSpeedMetersPerSecondThresholdFromSydneyB", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 8) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "triggerTimestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B76D198(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  uint64_t result;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *(_DWORD *)(a1 + 92) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  v82 = v27++;
                  v83 = *(_BYTE *)(v28 + v82);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_185:
                    v2 = v82 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_185;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_186;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_186:
              *(_QWORD *)(a1 + 24) = v31;
              goto LABEL_217;
            case 'f':
              *(_DWORD *)(a1 + 92) |= 8u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v88 = 0;
                v89 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_196;
                  }
                  v90 = v41++;
                  v91 = *(_BYTE *)(v42 + v90);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v91 & 0x7F) << v88;
                  if ((v91 & 0x80) == 0)
                    break;
                  v88 += 7;
                  v14 = v89++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_195:
                    v2 = v90 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_195;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_196;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_196:
              *(_QWORD *)(a1 + 32) = v45;
              goto LABEL_217;
            case 'g':
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_201;
                  }
                  v94 = v47++;
                  v95 = *(_BYTE *)(v48 + v94);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_200:
                    v2 = v94 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_200;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_201;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_201:
              *(_DWORD *)(a1 + 76) = v51;
              goto LABEL_217;
            case 'h':
              *(_DWORD *)(a1 + 92) |= 0x100u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v96 = 0;
                v97 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  v98 = v53++;
                  v99 = *(_BYTE *)(v54 + v98);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v99 & 0x7F) << v96;
                  if ((v99 & 0x80) == 0)
                    break;
                  v96 += 7;
                  v14 = v97++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_205:
                    v2 = v98 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_205;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_206;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_206:
              *(_DWORD *)(a1 + 56) = v57;
              goto LABEL_217;
            case 'i':
              *(_DWORD *)(a1 + 92) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v60 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v60 = v59 != 0;
              }
              *(_BYTE *)(a1 + 90) = v60;
              goto LABEL_217;
            case 'j':
              *(_DWORD *)(a1 + 92) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v62 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v61 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v62 = v61 != 0;
              }
              *(_BYTE *)(a1 + 89) = v62;
              goto LABEL_217;
            case 'k':
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v100 = 0;
                v101 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  v102 = v63++;
                  v103 = *(_BYTE *)(v64 + v102);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v103 & 0x7F) << v100;
                  if ((v103 & 0x80) == 0)
                    break;
                  v100 += 7;
                  v14 = v101++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_210:
                    v2 = v102 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
                goto LABEL_210;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_211;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_211:
              *(_DWORD *)(a1 + 72) = v67;
              goto LABEL_217;
            case 'l':
              *(_DWORD *)(a1 + 92) |= 0x800u;
              v69 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v70 = *(_QWORD *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v104 = 0;
                v105 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_216;
                  }
                  v106 = v69++;
                  v107 = *(_BYTE *)(v70 + v106);
                  *((_QWORD *)this + 1) = v69;
                  v73 |= (unint64_t)(v107 & 0x7F) << v104;
                  if ((v107 & 0x80) == 0)
                    break;
                  v104 += 7;
                  v14 = v105++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_215:
                    v2 = v106 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v73) = 0;
                goto LABEL_215;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)this + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_216;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 68) = v73;
              goto LABEL_217;
            default:
              switch((int)v20)
              {
                case 201:
                  *(_DWORD *)(a1 + 92) |= 2u;
                  v21 = *((_QWORD *)this + 1);
                  v2 = *((_QWORD *)this + 2);
                  v22 = *(_QWORD *)this;
                  if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
                  {
                    v76 = 0;
                    v77 = 0;
                    v25 = 0;
                    if (v2 <= v21)
                      v2 = *((_QWORD *)this + 1);
                    while (1)
                    {
                      if (v2 == v21)
                      {
                        v25 = 0;
                        *((_BYTE *)this + 24) = 1;
                        goto LABEL_181;
                      }
                      v78 = v21++;
                      v79 = *(_BYTE *)(v22 + v78);
                      *((_QWORD *)this + 1) = v21;
                      v25 |= (unint64_t)(v79 & 0x7F) << v76;
                      if ((v79 & 0x80) == 0)
                        break;
                      v76 += 7;
                      v14 = v77++ > 8;
                      if (v14)
                      {
                        v25 = 0;
LABEL_180:
                        v2 = v78 + 1;
                        goto LABEL_181;
                      }
                    }
                    if (*((_BYTE *)this + 24))
                      v25 = 0;
                    goto LABEL_180;
                  }
                  v23 = 0;
                  v24 = 0;
                  v25 = 0;
                  do
                  {
                    v2 = v21 + 1;
                    *((_QWORD *)this + 1) = v21 + 1;
                    v26 = *(_BYTE *)(v22 + v21);
                    v25 |= (unint64_t)(v26 & 0x7F) << v23;
                    if ((v26 & 0x80) == 0)
                      goto LABEL_181;
                    v23 += 7;
                    v21 = v2;
                    v14 = v24++ > 8;
                  }
                  while (!v14);
                  v25 = 0;
LABEL_181:
                  *(_QWORD *)(a1 + 16) = v25;
                  goto LABEL_217;
                case 202:
                  *(_DWORD *)(a1 + 92) |= 1u;
                  v33 = *((_QWORD *)this + 1);
                  v2 = *((_QWORD *)this + 2);
                  v34 = *(_QWORD *)this;
                  if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
                  {
                    v84 = 0;
                    v85 = 0;
                    v37 = 0;
                    if (v2 <= v33)
                      v2 = *((_QWORD *)this + 1);
                    while (1)
                    {
                      if (v2 == v33)
                      {
                        v37 = 0;
                        *((_BYTE *)this + 24) = 1;
                        goto LABEL_191;
                      }
                      v86 = v33++;
                      v87 = *(_BYTE *)(v34 + v86);
                      *((_QWORD *)this + 1) = v33;
                      v37 |= (unint64_t)(v87 & 0x7F) << v84;
                      if ((v87 & 0x80) == 0)
                        break;
                      v84 += 7;
                      v14 = v85++ > 8;
                      if (v14)
                      {
                        v37 = 0;
LABEL_190:
                        v2 = v86 + 1;
                        goto LABEL_191;
                      }
                    }
                    if (*((_BYTE *)this + 24))
                      v37 = 0;
                    goto LABEL_190;
                  }
                  v35 = 0;
                  v36 = 0;
                  v37 = 0;
                  do
                  {
                    v2 = v33 + 1;
                    *((_QWORD *)this + 1) = v33 + 1;
                    v38 = *(_BYTE *)(v34 + v33);
                    v37 |= (unint64_t)(v38 & 0x7F) << v35;
                    if ((v38 & 0x80) == 0)
                      goto LABEL_191;
                    v35 += 7;
                    v33 = v2;
                    v14 = v36++ > 8;
                  }
                  while (!v14);
                  v37 = 0;
LABEL_191:
                  *(_QWORD *)(a1 + 8) = v37;
LABEL_217:
                  v3 = *((_QWORD *)this + 2);
                  v4 = *((unsigned __int8 *)this + 24);
                  if (v2 >= v3 || v4 != 0)
                    return v4 == 0;
                  continue;
                case 203:
                  *(_DWORD *)(a1 + 92) |= 0x10u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_112;
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
                  goto LABEL_176;
                case 204:
                  *(_DWORD *)(a1 + 92) |= 0x40u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_112;
                  *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
                  goto LABEL_176;
                case 205:
                  *(_DWORD *)(a1 + 92) |= 0x80u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_112;
                  *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
                  goto LABEL_176;
                case 206:
                  *(_DWORD *)(a1 + 92) |= 0x20u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  {
LABEL_112:
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_176:
                    v2 = *((_QWORD *)this + 1) + 4;
                    *((_QWORD *)this + 1) = v2;
                  }
                  goto LABEL_217;
                case 207:
                  *(_DWORD *)(a1 + 92) |= 0x10000u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 >= *((_QWORD *)this + 2))
                  {
                    v40 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                    *((_QWORD *)this + 1) = v2;
                    v40 = v39 != 0;
                  }
                  *(_BYTE *)(a1 + 88) = v40;
                  goto LABEL_217;
                default:
                  switch((int)v20)
                  {
                    case 1:
                      *(_DWORD *)(a1 + 92) |= 0x200u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    case 2:
                      *(_DWORD *)(a1 + 92) |= 0x4000u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    case 3:
                      *(_DWORD *)(a1 + 92) |= 0x400u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    case 4:
                      *(_DWORD *)(a1 + 92) |= 0x8000u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    default:
                      result = PB::Reader::skip(this);
                      if (!(_DWORD)result)
                        return result;
                      v2 = *((_QWORD *)this + 1);
                      break;
                  }
                  goto LABEL_217;
              }
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B76DD50(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 60));
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_21B76DF88(_QWORD *result)
{
  *result = &off_24DF31F48;
  *(_QWORD *)((char *)result + 172) = 0;
  return result;
}

void sub_21B76DFA0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

float sub_21B76DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  float result;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = &off_24DF31F48;
  *(_QWORD *)(a1 + 172) = 0;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x20000000) != 0)
  {
    result = *(float *)(a2 + 140);
    v3 = 0x20000000;
    *(_QWORD *)(a1 + 172) = 0x20000000;
    *(float *)(a1 + 140) = result;
    v2 = *(_QWORD *)(a2 + 172);
    if ((v2 & 0x8000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_5:
    result = *(float *)(a2 + 132);
    v3 |= 0x8000000uLL;
    *(_QWORD *)(a1 + 172) = v3;
    *(float *)(a1 + 132) = result;
    v2 = *(_QWORD *)(a2 + 172);
  }
LABEL_6:
  if ((v2 & 0x2000000) != 0)
  {
    result = *(float *)(a2 + 124);
    v3 |= 0x2000000uLL;
    *(_QWORD *)(a1 + 172) = v3;
    *(float *)(a1 + 124) = result;
    v2 = *(_QWORD *)(a2 + 172);
    if ((v2 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0)
        goto LABEL_9;
      goto LABEL_53;
    }
  }
  else if ((v2 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  result = *(float *)(a2 + 148);
  v3 |= 0x80000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 148) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_54;
  }
LABEL_53:
  v5 = *(_DWORD *)(a2 + 104);
  v3 |= 0x100000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 104) = v5;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x80000) == 0)
  {
LABEL_10:
    if ((v2 & 0x800000) == 0)
      goto LABEL_11;
    goto LABEL_55;
  }
LABEL_54:
  v6 = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 100) = v6;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x800000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000) == 0)
      goto LABEL_12;
    goto LABEL_56;
  }
LABEL_55:
  result = *(float *)(a2 + 116);
  v3 |= 0x800000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 116) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_57;
  }
LABEL_56:
  result = *(float *)(a2 + 144);
  v3 |= 0x40000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 144) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_58;
  }
LABEL_57:
  result = *(float *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 136) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x100000000) == 0)
      goto LABEL_15;
    goto LABEL_59;
  }
LABEL_58:
  result = *(float *)(a2 + 128);
  v3 |= 0x4000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 128) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_60;
  }
LABEL_59:
  result = *(float *)(a2 + 152);
  v3 |= 0x100000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 152) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x200000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_61;
  }
LABEL_60:
  v7 = *(_DWORD *)(a2 + 108);
  v3 |= 0x200000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 108) = v7;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x400000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000000) == 0)
      goto LABEL_18;
    goto LABEL_62;
  }
LABEL_61:
  v8 = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 112) = v8;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_63;
  }
LABEL_62:
  v9 = *(_BYTE *)(a2 + 165);
  v3 |= 0x40000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 165) = v9;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x10000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_64;
  }
LABEL_63:
  result = *(float *)(a2 + 88);
  v3 |= 0x10000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 88) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x4000) == 0)
  {
LABEL_20:
    if ((v2 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_65;
  }
LABEL_64:
  result = *(float *)(a2 + 80);
  v3 |= 0x4000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 80) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x1000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_66;
  }
LABEL_65:
  result = *(float *)(a2 + 72);
  v3 |= 0x1000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 72) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000000000) == 0)
      goto LABEL_23;
    goto LABEL_67;
  }
LABEL_66:
  result = *(float *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 92) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x200000000) == 0)
      goto LABEL_24;
    goto LABEL_68;
  }
LABEL_67:
  v10 = *(_BYTE *)(a2 + 163);
  v3 |= 0x10000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 163) = v10;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x100000000000) == 0)
      goto LABEL_25;
    goto LABEL_69;
  }
LABEL_68:
  v11 = *(_BYTE *)(a2 + 156);
  v3 |= 0x200000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 156) = v11;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0)
      goto LABEL_26;
    goto LABEL_70;
  }
LABEL_69:
  v12 = *(_BYTE *)(a2 + 167);
  v3 |= 0x100000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 167) = v12;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x4000000000) == 0)
      goto LABEL_27;
    goto LABEL_71;
  }
LABEL_70:
  v13 = *(_BYTE *)(a2 + 158);
  v3 |= 0x800000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 158) = v13;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000000000) == 0)
      goto LABEL_28;
    goto LABEL_72;
  }
LABEL_71:
  v14 = *(_BYTE *)(a2 + 161);
  v3 |= 0x4000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 161) = v14;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x8000) == 0)
      goto LABEL_29;
    goto LABEL_73;
  }
LABEL_72:
  v15 = *(_BYTE *)(a2 + 166);
  v3 |= 0x80000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 166) = v15;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x8000) == 0)
  {
LABEL_29:
    if ((v2 & 0x2000) == 0)
      goto LABEL_30;
    goto LABEL_74;
  }
LABEL_73:
  result = *(float *)(a2 + 84);
  v3 |= 0x8000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 84) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x2000) == 0)
  {
LABEL_30:
    if ((v2 & 0x40000) == 0)
      goto LABEL_31;
    goto LABEL_75;
  }
LABEL_74:
  result = *(float *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 76) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x40000) == 0)
  {
LABEL_31:
    if ((v2 & 0x20000000000) == 0)
      goto LABEL_32;
    goto LABEL_76;
  }
LABEL_75:
  result = *(float *)(a2 + 96);
  v3 |= 0x40000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 96) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_77;
  }
LABEL_76:
  v16 = *(_BYTE *)(a2 + 164);
  v3 |= 0x20000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 164) = v16;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x200000000000) == 0)
      goto LABEL_34;
    goto LABEL_78;
  }
LABEL_77:
  v17 = *(_BYTE *)(a2 + 157);
  v3 |= 0x400000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 157) = v17;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000000) == 0)
      goto LABEL_35;
    goto LABEL_79;
  }
LABEL_78:
  v18 = *(_BYTE *)(a2 + 168);
  v3 |= 0x200000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 168) = v18;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x8000000000) == 0)
      goto LABEL_36;
    goto LABEL_80;
  }
LABEL_79:
  v19 = *(_BYTE *)(a2 + 159);
  v3 |= 0x1000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 159) = v19;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_81;
  }
LABEL_80:
  v20 = *(_BYTE *)(a2 + 162);
  v3 |= 0x8000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 162) = v20;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v2 & 0x1000000) == 0)
      goto LABEL_38;
    goto LABEL_82;
  }
LABEL_81:
  v21 = *(_BYTE *)(a2 + 160);
  v3 |= 0x2000000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_BYTE *)(a1 + 160) = v21;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_38:
    if ((v2 & 4) == 0)
      goto LABEL_39;
    goto LABEL_83;
  }
LABEL_82:
  v22 = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_DWORD *)(a1 + 120) = v22;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 4) == 0)
  {
LABEL_39:
    if ((v2 & 8) == 0)
      goto LABEL_40;
    goto LABEL_84;
  }
LABEL_83:
  v23 = *(_QWORD *)(a2 + 24);
  v3 |= 4uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_QWORD *)(a1 + 24) = v23;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 8) == 0)
  {
LABEL_40:
    if ((v2 & 0x10) == 0)
      goto LABEL_41;
    goto LABEL_85;
  }
LABEL_84:
  v24 = *(_QWORD *)(a2 + 32);
  v3 |= 8uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_QWORD *)(a1 + 32) = v24;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x10) == 0)
  {
LABEL_41:
    if ((v2 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_86;
  }
LABEL_85:
  result = *(float *)(a2 + 40);
  v3 |= 0x10uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 40) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x80) == 0)
  {
LABEL_42:
    if ((v2 & 0x100) == 0)
      goto LABEL_43;
    goto LABEL_87;
  }
LABEL_86:
  result = *(float *)(a2 + 52);
  v3 |= 0x80uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 52) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x100) == 0)
  {
LABEL_43:
    if ((v2 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_88;
  }
LABEL_87:
  result = *(float *)(a2 + 56);
  v3 |= 0x100uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 56) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x800) == 0)
  {
LABEL_44:
    if ((v2 & 1) == 0)
      goto LABEL_45;
    goto LABEL_89;
  }
LABEL_88:
  result = *(float *)(a2 + 68);
  v3 |= 0x800uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 68) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 1) == 0)
  {
LABEL_45:
    if ((v2 & 2) == 0)
      goto LABEL_46;
    goto LABEL_90;
  }
LABEL_89:
  v25 = *(_QWORD *)(a2 + 8);
  v3 |= 1uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_QWORD *)(a1 + 8) = v25;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 2) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0)
      goto LABEL_47;
    goto LABEL_91;
  }
LABEL_90:
  v26 = *(_QWORD *)(a2 + 16);
  v3 |= 2uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(_QWORD *)(a1 + 16) = v26;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x40) == 0)
      goto LABEL_48;
    goto LABEL_92;
  }
LABEL_91:
  result = *(float *)(a2 + 44);
  v3 |= 0x20uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 44) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x40) == 0)
  {
LABEL_48:
    if ((v2 & 0x200) == 0)
      goto LABEL_49;
    goto LABEL_93;
  }
LABEL_92:
  result = *(float *)(a2 + 48);
  v3 |= 0x40uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 48) = result;
  v2 = *(_QWORD *)(a2 + 172);
  if ((v2 & 0x200) == 0)
  {
LABEL_49:
    if ((v2 & 0x400) == 0)
      return result;
LABEL_94:
    result = *(float *)(a2 + 64);
    *(_QWORD *)(a1 + 172) = v3 | 0x400;
    *(float *)(a1 + 64) = result;
    return result;
  }
LABEL_93:
  result = *(float *)(a2 + 60);
  v3 |= 0x200uLL;
  *(_QWORD *)(a1 + 172) = v3;
  *(float *)(a1 + 60) = result;
  if ((*(_QWORD *)(a2 + 172) & 0x400) != 0)
    goto LABEL_94;
  return result;
}

uint64_t sub_21B76E4E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "chaosAtMaxEnergy", *(float *)(a1 + 40));
    v5 = *(_QWORD *)(a1 + 172);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_51;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "chaosAtMaxEnergyRollover", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "chaosAtMaxEnergyRolloverTimestamp", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_6;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "chaosAtMaxEnergyTimestamp", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "chaosMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_8;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "chaosMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "chaosOrSaturationMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "didProcess");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "energyAtMaxChaos", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "energyAtMaxChaosRollover", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "energyAtMaxChaosRolloverTimestamp", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "energyAtMaxChaosTimestamp", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "energyMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "energyMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 1) == 0)
  {
LABEL_19:
    if ((v5 & 2) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 2) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "maxChaos", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "maxChaosRollover", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "maxEnergy", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "maxEnergyRollover", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x20000) == 0)
  {
LABEL_26:
    if ((v5 & 0x40000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "maxSaturation", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "maxSaturationRollover", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "parameterRollingEnergyWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100000) == 0)
  {
LABEL_29:
    if ((v5 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "parameterRollingPercentileWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200000) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "parameterRolloverRollingEnergyWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "parameterRolloverRollingPercentileWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x800000) == 0)
  {
LABEL_32:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "parameterSaturationY", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "passThru");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "passThruRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "rmsSampleCount");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "saturationMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "saturationMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "thresholdChaos", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "thresholdChaosRollover", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "thresholdEnergy", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "thresholdEnergyRollover", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "thresholdMaxRMS", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "thresholdMaxRMSRollover", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "thresholdSaturationTime", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_45:
    if ((v5 & 4) == 0)
      goto LABEL_46;
LABEL_93:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_QWORD *)(a1 + 172) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_47;
  }
LABEL_92:
  PB::TextFormatter::format(this, "thresholdSaturationTimeRollover", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 4) != 0)
    goto LABEL_93;
LABEL_46:
  if ((v5 & 8) != 0)
LABEL_47:
    PB::TextFormatter::format(this, "triggerTimestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B76EAD8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  BOOL v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;
  char v202;
  unsigned int v203;
  unint64_t v204;
  char v205;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      switch((v11 >> 3))
      {
        case 'e':
          *(_QWORD *)(a1 + 172) |= 0x40000000000uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 >= *((_QWORD *)this + 2))
          {
            v25 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = v22 + 1;
            v24 = *(unsigned __int8 *)(*(_QWORD *)this + v22);
            *((_QWORD *)this + 1) = v23;
            v25 = v24 != 0;
          }
          *(_BYTE *)(a1 + 165) = v25;
          goto LABEL_279;
        case 'f':
          *(_QWORD *)(a1 + 172) |= 0x10000uLL;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v71);
          goto LABEL_278;
        case 'g':
          *(_QWORD *)(a1 + 172) |= 0x4000uLL;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v72);
          goto LABEL_278;
        case 'h':
          *(_QWORD *)(a1 + 172) |= 0x1000uLL;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_278;
        case 'i':
          *(_QWORD *)(a1 + 172) |= 0x20000uLL;
          v74 = *((_QWORD *)this + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v74);
          goto LABEL_278;
        case 'j':
          *(_QWORD *)(a1 + 172) |= 0x10000000000uLL;
          v75 = *((_QWORD *)this + 1);
          if (v75 >= *((_QWORD *)this + 2))
          {
            v78 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
            *((_QWORD *)this + 1) = v76;
            v78 = v77 != 0;
          }
          *(_BYTE *)(a1 + 163) = v78;
          goto LABEL_279;
        case 'k':
          *(_QWORD *)(a1 + 172) |= 0x200000000uLL;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 156) = v82;
          goto LABEL_279;
        case 'l':
          *(_QWORD *)(a1 + 172) |= 0x100000000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 167) = v86;
          goto LABEL_279;
        case 'm':
          *(_QWORD *)(a1 + 172) |= 0x800000000uLL;
          v87 = *((_QWORD *)this + 1);
          if (v87 >= *((_QWORD *)this + 2))
          {
            v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) = v88;
            v90 = v89 != 0;
          }
          *(_BYTE *)(a1 + 158) = v90;
          goto LABEL_279;
        case 'n':
          *(_QWORD *)(a1 + 172) |= 0x4000000000uLL;
          v91 = *((_QWORD *)this + 1);
          if (v91 >= *((_QWORD *)this + 2))
          {
            v94 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v92 = v91 + 1;
            v93 = *(unsigned __int8 *)(*(_QWORD *)this + v91);
            *((_QWORD *)this + 1) = v92;
            v94 = v93 != 0;
          }
          *(_BYTE *)(a1 + 161) = v94;
          goto LABEL_279;
        case 'o':
          *(_QWORD *)(a1 + 172) |= 0x80000000000uLL;
          v95 = *((_QWORD *)this + 1);
          if (v95 >= *((_QWORD *)this + 2))
          {
            v98 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v96 = v95 + 1;
            v97 = *(unsigned __int8 *)(*(_QWORD *)this + v95);
            *((_QWORD *)this + 1) = v96;
            v98 = v97 != 0;
          }
          *(_BYTE *)(a1 + 166) = v98;
          goto LABEL_279;
        case 'p':
          *(_QWORD *)(a1 + 172) |= 0x8000uLL;
          v99 = *((_QWORD *)this + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v99);
          goto LABEL_278;
        case 'q':
          *(_QWORD *)(a1 + 172) |= 0x2000uLL;
          v100 = *((_QWORD *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v100);
          goto LABEL_278;
        case 'r':
          *(_QWORD *)(a1 + 172) |= 0x40000uLL;
          v101 = *((_QWORD *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
          {
LABEL_187:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v101);
LABEL_278:
            *((_QWORD *)this + 1) += 4;
          }
          goto LABEL_279;
        case 's':
          *(_QWORD *)(a1 + 172) |= 0x20000000000uLL;
          v102 = *((_QWORD *)this + 1);
          if (v102 >= *((_QWORD *)this + 2))
          {
            v105 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)this + v102);
            *((_QWORD *)this + 1) = v103;
            v105 = v104 != 0;
          }
          *(_BYTE *)(a1 + 164) = v105;
          goto LABEL_279;
        case 't':
          *(_QWORD *)(a1 + 172) |= 0x400000000uLL;
          v106 = *((_QWORD *)this + 1);
          if (v106 >= *((_QWORD *)this + 2))
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)this + v106);
            *((_QWORD *)this + 1) = v107;
            v109 = v108 != 0;
          }
          *(_BYTE *)(a1 + 157) = v109;
          goto LABEL_279;
        case 'u':
          *(_QWORD *)(a1 + 172) |= 0x200000000000uLL;
          v110 = *((_QWORD *)this + 1);
          if (v110 >= *((_QWORD *)this + 2))
          {
            v113 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v111 = v110 + 1;
            v112 = *(unsigned __int8 *)(*(_QWORD *)this + v110);
            *((_QWORD *)this + 1) = v111;
            v113 = v112 != 0;
          }
          *(_BYTE *)(a1 + 168) = v113;
          goto LABEL_279;
        case 'v':
          *(_QWORD *)(a1 + 172) |= 0x1000000000uLL;
          v114 = *((_QWORD *)this + 1);
          if (v114 >= *((_QWORD *)this + 2))
          {
            v117 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v115 = v114 + 1;
            v116 = *(unsigned __int8 *)(*(_QWORD *)this + v114);
            *((_QWORD *)this + 1) = v115;
            v117 = v116 != 0;
          }
          *(_BYTE *)(a1 + 159) = v117;
          goto LABEL_279;
        case 'w':
          *(_QWORD *)(a1 + 172) |= 0x8000000000uLL;
          v118 = *((_QWORD *)this + 1);
          if (v118 >= *((_QWORD *)this + 2))
          {
            v121 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v119 = v118 + 1;
            v120 = *(unsigned __int8 *)(*(_QWORD *)this + v118);
            *((_QWORD *)this + 1) = v119;
            v121 = v120 != 0;
          }
          *(_BYTE *)(a1 + 162) = v121;
          goto LABEL_279;
        default:
          switch((int)v20)
          {
            case 201:
              *(_QWORD *)(a1 + 172) |= 0x2000000000uLL;
              v26 = *((_QWORD *)this + 1);
              if (v26 >= *((_QWORD *)this + 2))
              {
                v29 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = v26 + 1;
                v28 = *(unsigned __int8 *)(*(_QWORD *)this + v26);
                *((_QWORD *)this + 1) = v27;
                v29 = v28 != 0;
              }
              *(_BYTE *)(a1 + 160) = v29;
              goto LABEL_279;
            case 202:
              *(_QWORD *)(a1 + 172) |= 0x1000000uLL;
              v122 = *((_QWORD *)this + 1);
              v123 = *((_QWORD *)this + 2);
              v124 = *(_QWORD *)this;
              if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
              {
                v125 = 0;
                v126 = 0;
                v127 = 0;
                do
                {
                  v128 = v122 + 1;
                  *((_QWORD *)this + 1) = v122 + 1;
                  v129 = *(_BYTE *)(v124 + v122);
                  v127 |= (unint64_t)(v129 & 0x7F) << v125;
                  if ((v129 & 0x80) == 0)
                    goto LABEL_303;
                  v125 += 7;
                  v122 = v128;
                  v14 = v126++ > 8;
                }
                while (!v14);
LABEL_248:
                LODWORD(v127) = 0;
                goto LABEL_303;
              }
              v186 = 0;
              v187 = 0;
              v127 = 0;
              if (v123 <= v122)
                v123 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v123 == v122)
                {
                  LODWORD(v127) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v188 = v122 + 1;
                  v189 = *(_BYTE *)(v124 + v122);
                  *((_QWORD *)this + 1) = v188;
                  v127 |= (unint64_t)(v189 & 0x7F) << v186;
                  if (v189 < 0)
                  {
                    v186 += 7;
                    v122 = v188;
                    v14 = v187++ > 8;
                    if (v14)
                      goto LABEL_248;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v127) = 0;
                }
                break;
              }
LABEL_303:
              *(_DWORD *)(a1 + 120) = v127;
              goto LABEL_279;
            case 203:
              *(_QWORD *)(a1 + 172) |= 4uLL;
              v130 = *((_QWORD *)this + 1);
              v131 = *((_QWORD *)this + 2);
              v132 = *(_QWORD *)this;
              if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
              {
                v133 = 0;
                v134 = 0;
                v135 = 0;
                do
                {
                  v136 = v130 + 1;
                  *((_QWORD *)this + 1) = v130 + 1;
                  v137 = *(_BYTE *)(v132 + v130);
                  v135 |= (unint64_t)(v137 & 0x7F) << v133;
                  if ((v137 & 0x80) == 0)
                    goto LABEL_307;
                  v133 += 7;
                  v130 = v136;
                  v14 = v134++ > 8;
                }
                while (!v14);
LABEL_255:
                v135 = 0;
                goto LABEL_307;
              }
              v190 = 0;
              v191 = 0;
              v135 = 0;
              if (v131 <= v130)
                v131 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v131 == v130)
                {
                  v135 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v192 = v130 + 1;
                  v193 = *(_BYTE *)(v132 + v130);
                  *((_QWORD *)this + 1) = v192;
                  v135 |= (unint64_t)(v193 & 0x7F) << v190;
                  if (v193 < 0)
                  {
                    v190 += 7;
                    v130 = v192;
                    v14 = v191++ > 8;
                    if (v14)
                      goto LABEL_255;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v135 = 0;
                }
                break;
              }
LABEL_307:
              *(_QWORD *)(a1 + 24) = v135;
              goto LABEL_279;
            case 204:
              *(_QWORD *)(a1 + 172) |= 8uLL;
              v138 = *((_QWORD *)this + 1);
              v139 = *((_QWORD *)this + 2);
              v140 = *(_QWORD *)this;
              if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
              {
                v141 = 0;
                v142 = 0;
                v143 = 0;
                do
                {
                  v144 = v138 + 1;
                  *((_QWORD *)this + 1) = v138 + 1;
                  v145 = *(_BYTE *)(v140 + v138);
                  v143 |= (unint64_t)(v145 & 0x7F) << v141;
                  if ((v145 & 0x80) == 0)
                    goto LABEL_311;
                  v141 += 7;
                  v138 = v144;
                  v14 = v142++ > 8;
                }
                while (!v14);
LABEL_262:
                v143 = 0;
                goto LABEL_311;
              }
              v194 = 0;
              v195 = 0;
              v143 = 0;
              if (v139 <= v138)
                v139 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v139 == v138)
                {
                  v143 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v196 = v138 + 1;
                  v197 = *(_BYTE *)(v140 + v138);
                  *((_QWORD *)this + 1) = v196;
                  v143 |= (unint64_t)(v197 & 0x7F) << v194;
                  if (v197 < 0)
                  {
                    v194 += 7;
                    v138 = v196;
                    v14 = v195++ > 8;
                    if (v14)
                      goto LABEL_262;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v143 = 0;
                }
                break;
              }
LABEL_311:
              *(_QWORD *)(a1 + 32) = v143;
              goto LABEL_279;
            case 205:
              *(_QWORD *)(a1 + 172) |= 0x10uLL;
              v146 = *((_QWORD *)this + 1);
              if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v146);
              goto LABEL_278;
            case 206:
              *(_QWORD *)(a1 + 172) |= 0x80uLL;
              v147 = *((_QWORD *)this + 1);
              if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v147);
              goto LABEL_278;
            case 207:
              *(_QWORD *)(a1 + 172) |= 0x100uLL;
              v148 = *((_QWORD *)this + 1);
              if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v148);
              goto LABEL_278;
            case 208:
              *(_QWORD *)(a1 + 172) |= 0x800uLL;
              v149 = *((_QWORD *)this + 1);
              if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v149);
              goto LABEL_278;
            case 209:
              *(_QWORD *)(a1 + 172) |= 1uLL;
              v150 = *((_QWORD *)this + 1);
              v151 = *((_QWORD *)this + 2);
              v152 = *(_QWORD *)this;
              if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
              {
                v153 = 0;
                v154 = 0;
                v155 = 0;
                do
                {
                  v156 = v150 + 1;
                  *((_QWORD *)this + 1) = v150 + 1;
                  v157 = *(_BYTE *)(v152 + v150);
                  v155 |= (unint64_t)(v157 & 0x7F) << v153;
                  if ((v157 & 0x80) == 0)
                    goto LABEL_315;
                  v153 += 7;
                  v150 = v156;
                  v14 = v154++ > 8;
                }
                while (!v14);
LABEL_269:
                v155 = 0;
                goto LABEL_315;
              }
              v198 = 0;
              v199 = 0;
              v155 = 0;
              if (v151 <= v150)
                v151 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v151 == v150)
                {
                  v155 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v200 = v150 + 1;
                  v201 = *(_BYTE *)(v152 + v150);
                  *((_QWORD *)this + 1) = v200;
                  v155 |= (unint64_t)(v201 & 0x7F) << v198;
                  if (v201 < 0)
                  {
                    v198 += 7;
                    v150 = v200;
                    v14 = v199++ > 8;
                    if (v14)
                      goto LABEL_269;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v155 = 0;
                }
                break;
              }
LABEL_315:
              *(_QWORD *)(a1 + 8) = v155;
              goto LABEL_279;
            case 210:
              *(_QWORD *)(a1 + 172) |= 2uLL;
              v158 = *((_QWORD *)this + 1);
              v159 = *((_QWORD *)this + 2);
              v160 = *(_QWORD *)this;
              if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
              {
                v161 = 0;
                v162 = 0;
                v163 = 0;
                do
                {
                  v164 = v158 + 1;
                  *((_QWORD *)this + 1) = v158 + 1;
                  v165 = *(_BYTE *)(v160 + v158);
                  v163 |= (unint64_t)(v165 & 0x7F) << v161;
                  if ((v165 & 0x80) == 0)
                    goto LABEL_319;
                  v161 += 7;
                  v158 = v164;
                  v14 = v162++ > 8;
                }
                while (!v14);
LABEL_276:
                v163 = 0;
                goto LABEL_319;
              }
              v202 = 0;
              v203 = 0;
              v163 = 0;
              if (v159 <= v158)
                v159 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v159 == v158)
                {
                  v163 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v204 = v158 + 1;
                  v205 = *(_BYTE *)(v160 + v158);
                  *((_QWORD *)this + 1) = v204;
                  v163 |= (unint64_t)(v205 & 0x7F) << v202;
                  if (v205 < 0)
                  {
                    v202 += 7;
                    v158 = v204;
                    v14 = v203++ > 8;
                    if (v14)
                      goto LABEL_276;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v163 = 0;
                }
                break;
              }
LABEL_319:
              *(_QWORD *)(a1 + 16) = v163;
              goto LABEL_279;
            case 211:
              *(_QWORD *)(a1 + 172) |= 0x20uLL;
              v166 = *((_QWORD *)this + 1);
              if (v166 > 0xFFFFFFFFFFFFFFFBLL || v166 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v166);
              goto LABEL_278;
            case 212:
              *(_QWORD *)(a1 + 172) |= 0x40uLL;
              v167 = *((_QWORD *)this + 1);
              if (v167 > 0xFFFFFFFFFFFFFFFBLL || v167 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v167);
              goto LABEL_278;
            case 213:
              *(_QWORD *)(a1 + 172) |= 0x200uLL;
              v168 = *((_QWORD *)this + 1);
              if (v168 > 0xFFFFFFFFFFFFFFFBLL || v168 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v168);
              goto LABEL_278;
            case 214:
              *(_QWORD *)(a1 + 172) |= 0x400uLL;
              v169 = *((_QWORD *)this + 1);
              if (v169 > 0xFFFFFFFFFFFFFFFBLL || v169 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v169);
              goto LABEL_278;
            default:
              switch((int)v20)
              {
                case 1:
                  *(_QWORD *)(a1 + 172) |= 0x20000000uLL;
                  v21 = *((_QWORD *)this + 1);
                  if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v21);
                  goto LABEL_278;
                case 2:
                  *(_QWORD *)(a1 + 172) |= 0x8000000uLL;
                  v31 = *((_QWORD *)this + 1);
                  if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v31);
                  goto LABEL_278;
                case 3:
                  *(_QWORD *)(a1 + 172) |= 0x2000000uLL;
                  v32 = *((_QWORD *)this + 1);
                  if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v32);
                  goto LABEL_278;
                case 4:
                  *(_QWORD *)(a1 + 172) |= 0x80000000uLL;
                  v33 = *((_QWORD *)this + 1);
                  if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v33);
                  goto LABEL_278;
                case 5:
                  *(_QWORD *)(a1 + 172) |= 0x100000uLL;
                  v34 = *((_QWORD *)this + 1);
                  v35 = *((_QWORD *)this + 2);
                  v36 = *(_QWORD *)this;
                  if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
                  {
                    v37 = 0;
                    v38 = 0;
                    v39 = 0;
                    do
                    {
                      v40 = v34 + 1;
                      *((_QWORD *)this + 1) = v34 + 1;
                      v41 = *(_BYTE *)(v36 + v34);
                      v39 |= (unint64_t)(v41 & 0x7F) << v37;
                      if ((v41 & 0x80) == 0)
                        goto LABEL_287;
                      v37 += 7;
                      v34 = v40;
                      v14 = v38++ > 8;
                    }
                    while (!v14);
LABEL_198:
                    LODWORD(v39) = 0;
                    goto LABEL_287;
                  }
                  v170 = 0;
                  v171 = 0;
                  v39 = 0;
                  if (v35 <= v34)
                    v35 = *((_QWORD *)this + 1);
                  while (2)
                  {
                    if (v35 == v34)
                    {
                      LODWORD(v39) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }
                    else
                    {
                      v172 = v34 + 1;
                      v173 = *(_BYTE *)(v36 + v34);
                      *((_QWORD *)this + 1) = v172;
                      v39 |= (unint64_t)(v173 & 0x7F) << v170;
                      if (v173 < 0)
                      {
                        v170 += 7;
                        v34 = v172;
                        v14 = v171++ > 8;
                        if (v14)
                          goto LABEL_198;
                        continue;
                      }
                      if (*((_BYTE *)this + 24))
                        LODWORD(v39) = 0;
                    }
                    break;
                  }
LABEL_287:
                  *(_DWORD *)(a1 + 104) = v39;
                  goto LABEL_279;
                case 6:
                  *(_QWORD *)(a1 + 172) |= 0x80000uLL;
                  v42 = *((_QWORD *)this + 1);
                  v43 = *((_QWORD *)this + 2);
                  v44 = *(_QWORD *)this;
                  if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
                  {
                    v45 = 0;
                    v46 = 0;
                    v47 = 0;
                    do
                    {
                      v48 = v42 + 1;
                      *((_QWORD *)this + 1) = v42 + 1;
                      v49 = *(_BYTE *)(v44 + v42);
                      v47 |= (unint64_t)(v49 & 0x7F) << v45;
                      if ((v49 & 0x80) == 0)
                        goto LABEL_291;
                      v45 += 7;
                      v42 = v48;
                      v14 = v46++ > 8;
                    }
                    while (!v14);
LABEL_205:
                    LODWORD(v47) = 0;
                    goto LABEL_291;
                  }
                  v174 = 0;
                  v175 = 0;
                  v47 = 0;
                  if (v43 <= v42)
                    v43 = *((_QWORD *)this + 1);
                  while (2)
                  {
                    if (v43 == v42)
                    {
                      LODWORD(v47) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }
                    else
                    {
                      v176 = v42 + 1;
                      v177 = *(_BYTE *)(v44 + v42);
                      *((_QWORD *)this + 1) = v176;
                      v47 |= (unint64_t)(v177 & 0x7F) << v174;
                      if (v177 < 0)
                      {
                        v174 += 7;
                        v42 = v176;
                        v14 = v175++ > 8;
                        if (v14)
                          goto LABEL_205;
                        continue;
                      }
                      if (*((_BYTE *)this + 24))
                        LODWORD(v47) = 0;
                    }
                    break;
                  }
LABEL_291:
                  *(_DWORD *)(a1 + 100) = v47;
                  goto LABEL_279;
                case 7:
                  *(_QWORD *)(a1 + 172) |= 0x800000uLL;
                  v50 = *((_QWORD *)this + 1);
                  if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v50);
                  goto LABEL_278;
                case 8:
                  *(_QWORD *)(a1 + 172) |= 0x40000000uLL;
                  v51 = *((_QWORD *)this + 1);
                  if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v51);
                  goto LABEL_278;
                case 9:
                  *(_QWORD *)(a1 + 172) |= 0x10000000uLL;
                  v52 = *((_QWORD *)this + 1);
                  if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v52);
                  goto LABEL_278;
                case 10:
                  *(_QWORD *)(a1 + 172) |= 0x4000000uLL;
                  v53 = *((_QWORD *)this + 1);
                  if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v53);
                  goto LABEL_278;
                case 11:
                  *(_QWORD *)(a1 + 172) |= 0x100000000uLL;
                  v54 = *((_QWORD *)this + 1);
                  if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v54);
                  goto LABEL_278;
                case 12:
                  *(_QWORD *)(a1 + 172) |= 0x200000uLL;
                  v55 = *((_QWORD *)this + 1);
                  v56 = *((_QWORD *)this + 2);
                  v57 = *(_QWORD *)this;
                  if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
                  {
                    v58 = 0;
                    v59 = 0;
                    v60 = 0;
                    do
                    {
                      v61 = v55 + 1;
                      *((_QWORD *)this + 1) = v55 + 1;
                      v62 = *(_BYTE *)(v57 + v55);
                      v60 |= (unint64_t)(v62 & 0x7F) << v58;
                      if ((v62 & 0x80) == 0)
                        goto LABEL_295;
                      v58 += 7;
                      v55 = v61;
                      v14 = v59++ > 8;
                    }
                    while (!v14);
LABEL_212:
                    LODWORD(v60) = 0;
                    goto LABEL_295;
                  }
                  v178 = 0;
                  v179 = 0;
                  v60 = 0;
                  if (v56 <= v55)
                    v56 = *((_QWORD *)this + 1);
                  while (2)
                  {
                    if (v56 == v55)
                    {
                      LODWORD(v60) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }
                    else
                    {
                      v180 = v55 + 1;
                      v181 = *(_BYTE *)(v57 + v55);
                      *((_QWORD *)this + 1) = v180;
                      v60 |= (unint64_t)(v181 & 0x7F) << v178;
                      if (v181 < 0)
                      {
                        v178 += 7;
                        v55 = v180;
                        v14 = v179++ > 8;
                        if (v14)
                          goto LABEL_212;
                        continue;
                      }
                      if (*((_BYTE *)this + 24))
                        LODWORD(v60) = 0;
                    }
                    break;
                  }
LABEL_295:
                  *(_DWORD *)(a1 + 108) = v60;
                  goto LABEL_279;
                case 13:
                  *(_QWORD *)(a1 + 172) |= 0x400000uLL;
                  v63 = *((_QWORD *)this + 1);
                  v64 = *((_QWORD *)this + 2);
                  v65 = *(_QWORD *)this;
                  if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
                  {
                    v66 = 0;
                    v67 = 0;
                    v68 = 0;
                    do
                    {
                      v69 = v63 + 1;
                      *((_QWORD *)this + 1) = v63 + 1;
                      v70 = *(_BYTE *)(v65 + v63);
                      v68 |= (unint64_t)(v70 & 0x7F) << v66;
                      if ((v70 & 0x80) == 0)
                        goto LABEL_299;
                      v66 += 7;
                      v63 = v69;
                      v14 = v67++ > 8;
                    }
                    while (!v14);
LABEL_219:
                    LODWORD(v68) = 0;
                    goto LABEL_299;
                  }
                  v182 = 0;
                  v183 = 0;
                  v68 = 0;
                  if (v64 <= v63)
                    v64 = *((_QWORD *)this + 1);
                  break;
                default:
                  result = PB::Reader::skip(this);
                  if ((_DWORD)result)
                    goto LABEL_279;
                  return result;
              }
              break;
          }
          break;
      }
      while (1)
      {
        if (v64 == v63)
        {
          LODWORD(v68) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_299;
        }
        v184 = v63 + 1;
        v185 = *(_BYTE *)(v65 + v63);
        *((_QWORD *)this + 1) = v184;
        v68 |= (unint64_t)(v185 & 0x7F) << v182;
        if ((v185 & 0x80) == 0)
          break;
        v182 += 7;
        v63 = v184;
        v14 = v183++ > 8;
        if (v14)
          goto LABEL_219;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v68) = 0;
LABEL_299:
      *(_DWORD *)(a1 + 112) = v68;
LABEL_279:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_21B76FD58(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 172);
  if ((v4 & 0x20000000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 140));
    v4 = *(_QWORD *)(v3 + 172);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000000) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v4 & 4) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 4) == 0)
  {
LABEL_36:
    if ((v4 & 8) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 8) == 0)
  {
LABEL_37:
    if ((v4 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10) == 0)
  {
LABEL_38:
    if ((v4 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80) == 0)
  {
LABEL_39:
    if ((v4 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v4 & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800) == 0)
  {
LABEL_41:
    if ((v4 & 1) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 1) == 0)
  {
LABEL_42:
    if ((v4 & 2) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 2) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 0x200) == 0)
      goto LABEL_46;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200) == 0)
  {
LABEL_46:
    if ((v4 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 64));
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  if ((*(_QWORD *)(v3 + 172) & 0x400) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 64));
  return result;
}

uint64_t sub_21B770284(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31F80;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_21B77029C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B7702C0(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)result = &off_24DF31F80;
  *(_DWORD *)(result + 28) = 0;
  v2 = *(_BYTE *)(a2 + 28);
  if ((v2 & 1) != 0)
  {
    v4 = *(_DWORD *)(a2 + 8);
    v3 = 1;
    *(_BYTE *)(result + 28) = 1;
    *(_DWORD *)(result + 8) = v4;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 28) & 8) != 0)
  {
LABEL_5:
    v5 = *(_DWORD *)(a2 + 20);
    v3 |= 8u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 20) = v5;
    v2 = *(_BYTE *)(a2 + 28);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    v6 = *(_DWORD *)(a2 + 24);
    v3 |= 0x10u;
    *(_BYTE *)(result + 28) = v3;
    *(_DWORD *)(result + 24) = v6;
    v2 = *(_BYTE *)(a2 + 28);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      v8 = *(_DWORD *)(a2 + 16);
      *(_BYTE *)(result + 28) = v3 | 4;
      *(_DWORD *)(result + 16) = v8;
      return result;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 12);
  v3 |= 2u;
  *(_BYTE *)(result + 28) = v3;
  *(_DWORD *)(result + 12) = v7;
  if ((*(_BYTE *)(a2 + 28) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B770368(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "debugY");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "outputB");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B770438(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B770844(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B77090C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF31FB8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_21B770924(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B770948(uint64_t result, uint64_t a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)result = &off_24DF31FB8;
  *(_DWORD *)(result + 44) = 0;
  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 8) != 0)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v3 = 8;
    *(_BYTE *)(result + 44) = 8;
    *(_QWORD *)(result + 32) = v4;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*(_BYTE *)(a2 + 44) & 1) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 8) = v5;
    v2 = *(_BYTE *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v3 |= 2u;
    *(_BYTE *)(result + 44) = v3;
    *(_QWORD *)(result + 16) = v6;
    v2 = *(_BYTE *)(a2 + 44);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0)
        return result;
LABEL_12:
      v8 = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(result + 44) = v3 | 4;
      *(_QWORD *)(result + 24) = v8;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_BYTE *)(result + 44) = v3;
  *(_DWORD *)(result + 40) = v7;
  if ((*(_BYTE *)(a2 + 44) & 4) != 0)
    goto LABEL_12;
  return result;
}

uint64_t sub_21B7709F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochFirstTimestamp");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "maxNormValue", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "maxNormTimestamp");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B770AC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 32) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_93:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_98:
              *(_QWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_103:
              *(_QWORD *)(a1 + 24) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B771024(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  if ((*(_BYTE *)(v3 + 44) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_21B7710D4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24DF31FF0;
  *(_DWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_21B7710F8(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24DF31FF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_21B771148(PB::Base *a1)
{
  sub_21B7710F8(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B77116C(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = &off_24DF31FF0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x80) != 0)
  {
    v7 = *(_DWORD *)(a2 + 112);
    v6 = 128;
    *(_DWORD *)(a1 + 152) = 128;
    *(_DWORD *)(a1 + 112) = v7;
    v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  if ((v5 & 8) != 0)
  {
LABEL_5:
    v8 = *(_QWORD *)(a2 + 80);
    v6 |= 8u;
    *(_DWORD *)(a1 + 152) = v6;
    *(_QWORD *)(a1 + 80) = v8;
    v5 = *(_DWORD *)(a2 + 152);
  }
LABEL_6:
  if ((v5 & 0x800) != 0)
  {
    v13 = *(_DWORD *)(a2 + 128);
    v6 |= 0x800u;
    *(_DWORD *)(a1 + 152) = v6;
    *(_DWORD *)(a1 + 128) = v13;
    v5 = *(_DWORD *)(a2 + 152);
    if ((v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v5 & 0x4000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  v14 = *(_QWORD *)(a2 + 88);
  v6 |= 0x10u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 88) = v14;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  v15 = *(_DWORD *)(a2 + 140);
  v6 |= 0x4000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 140) = v15;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  v16 = *(_DWORD *)(a2 + 144);
  v6 |= 0x8000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 144) = v16;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  v17 = *(_DWORD *)(a2 + 120);
  v6 |= 0x200u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 120) = v17;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  v18 = *(_DWORD *)(a2 + 124);
  v6 |= 0x400u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 124) = v18;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  v19 = *(_QWORD *)(a2 + 96);
  v6 |= 0x20u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 96) = v19;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  v20 = *(_DWORD *)(a2 + 116);
  v6 |= 0x100u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 116) = v20;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x10000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  v21 = *(_BYTE *)(a2 + 148);
  v6 |= 0x10000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_BYTE *)(a1 + 148) = v21;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x40) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  v22 = *(_QWORD *)(a2 + 104);
  v6 |= 0x40u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 104) = v22;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 4) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  v23 = *(_DWORD *)(a2 + 132);
  v6 |= 0x1000u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_DWORD *)(a1 + 132) = v23;
  v5 = *(_DWORD *)(a2 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_38:
  v24 = *(_QWORD *)(a2 + 72);
  v6 |= 4u;
  *(_DWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 72) = v24;
  if ((*(_DWORD *)(a2 + 152) & 0x2000) != 0)
  {
LABEL_19:
    v9 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)(a1 + 152) = v6 | 0x2000;
    *(_DWORD *)(a1 + 136) = v9;
  }
LABEL_20:
  if (a1 != a2)
  {
    sub_21B7968C4(v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_21B796B90((char *)(a1 + 32), *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
  }
  v10 = *(_DWORD *)(a2 + 152);
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_24;
LABEL_41:
    v26 = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 152) |= 2u;
    *(_QWORD *)(a1 + 64) = v26;
    if ((*(_DWORD *)(a2 + 152) & 0x20000) == 0)
      return a1;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 152) |= 1u;
  *(_QWORD *)(a1 + 56) = v25;
  v10 = *(_DWORD *)(a2 + 152);
  if ((v10 & 2) != 0)
    goto LABEL_41;
LABEL_24:
  if ((v10 & 0x20000) != 0)
  {
LABEL_25:
    v11 = *(_BYTE *)(a2 + 149);
    *(_DWORD *)(a1 + 152) |= 0x20000u;
    *(_BYTE *)(a1 + 149) = v11;
  }
  return a1;
}

uint64_t sub_21B7713EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  int v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 152) & 0x80) != 0)
    PB::TextFormatter::format(this, "accelPeakThreshold", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  while (v5 != v6)
  {
    v5 += 8;
    PB::TextFormatter::format(this, "allMaxNormTimestamps");
  }
  v7 = *(float **)(a1 + 32);
  v8 = *(float **)(a1 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    PB::TextFormatter::format(this, "allMaxNormValues", v9);
  }
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochFirstTimestamp");
    v10 = *(_DWORD *)(a1 + 152);
    if ((v10 & 2) == 0)
    {
LABEL_9:
      if ((v10 & 0x10000) == 0)
        goto LABEL_10;
      goto LABEL_28;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x10000) == 0)
  {
LABEL_10:
    if ((v10 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isMAPDetected");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x100) == 0)
  {
LABEL_11:
    if ((v10 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "magnitudePercentileThreshold", *(float *)(a1 + 116));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x200) == 0)
  {
LABEL_12:
    if ((v10 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "magnitudePeriodicityLowerPercentile", *(float *)(a1 + 120));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x400) == 0)
  {
LABEL_13:
    if ((v10 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "magnitudePeriodicityUpperPercentile", *(float *)(a1 + 124));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x800) == 0)
  {
LABEL_14:
    if ((v10 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "minNumPeaks");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x1000) == 0)
  {
LABEL_15:
    if ((v10 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "numPeaks");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x2000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "peakMagnitudePercentileDiff", *(float *)(a1 + 136));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "peakSeparation");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 4) == 0)
  {
LABEL_18:
    if ((v10 & 8) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "peakTimeDeltaPercentileDiff");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 8) == 0)
  {
LABEL_19:
    if ((v10 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "peakToPeakMinimumSeparation");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x10) == 0)
  {
LABEL_20:
    if ((v10 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "peakToPeakSeparationThreshold");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x20) == 0)
  {
LABEL_21:
    if ((v10 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timePercentileDiffThreshold");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x4000) == 0)
  {
LABEL_22:
    if ((v10 & 0x8000) == 0)
      goto LABEL_23;
LABEL_41:
    PB::TextFormatter::format(this, "timePeriodicityUpperPercentile", *(float *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 152) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_40:
  PB::TextFormatter::format(this, "timePeriodicityLowerPercentile", *(float *)(a1 + 140));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x8000) != 0)
    goto LABEL_41;
LABEL_23:
  if ((v10 & 0x40) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_21B7716C0(uint64_t a1, PB::Reader *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  void **v9;
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  BOOL v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  BOOL v152;
  char v153;
  unsigned int v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  void **v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  _QWORD *v185;
  unint64_t v186;
  char *v187;
  _DWORD *v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char v214;
  unsigned int v215;
  unint64_t v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  char *v222;
  int v223;
  unint64_t v224;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = *((unsigned __int8 *)this + 24);
  if (v3 < v4 && v5 == 0)
  {
    v9 = (void **)(a1 + 32);
    v10 = a1 + 48;
    v11 = (void **)(a1 + 8);
    v12 = (_QWORD *)(a1 + 24);
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v18 = *(_BYTE *)(v13 + v3);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v3 = v17;
        v103 = v15++ > 8;
        if (v103)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v16 & 7;
      if (v24 == 4)
      {
        v5 = 0;
        return v5 == 0;
      }
      v25 = v16 >> 3;
      if ((int)(v16 >> 3) > 100)
      {
        switch((int)v25)
        {
          case 201:
            *(_DWORD *)(a1 + 152) |= 0x1000u;
            v27 = *((_QWORD *)this + 1);
            v28 = *((_QWORD *)this + 2);
            v29 = *(_QWORD *)this;
            if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
            {
              v30 = 0;
              v31 = 0;
              v32 = 0;
              do
              {
                v33 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v34 = *(_BYTE *)(v29 + v27);
                v32 |= (unint64_t)(v34 & 0x7F) << v30;
                if ((v34 & 0x80) == 0)
                  goto LABEL_288;
                v30 += 7;
                v27 = v33;
                v103 = v31++ > 8;
              }
              while (!v103);
LABEL_192:
              LODWORD(v32) = 0;
              goto LABEL_288;
            }
            v153 = 0;
            v154 = 0;
            v32 = 0;
            if (v28 <= v27)
              v28 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v28 == v27)
              {
                LODWORD(v32) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v155 = v27 + 1;
                v156 = *(_BYTE *)(v29 + v27);
                *((_QWORD *)this + 1) = v155;
                v32 |= (unint64_t)(v156 & 0x7F) << v153;
                if (v156 < 0)
                {
                  v153 += 7;
                  v27 = v155;
                  v103 = v154++ > 8;
                  if (v103)
                    goto LABEL_192;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v32) = 0;
              }
              break;
            }
LABEL_288:
            *(_DWORD *)(a1 + 132) = v32;
            break;
          case 202:
            *(_DWORD *)(a1 + 152) |= 4u;
            v80 = *((_QWORD *)this + 1);
            v81 = *((_QWORD *)this + 2);
            v82 = *(_QWORD *)this;
            if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
            {
              v83 = 0;
              v84 = 0;
              v85 = 0;
              do
              {
                v86 = v80 + 1;
                *((_QWORD *)this + 1) = v80 + 1;
                v87 = *(_BYTE *)(v82 + v80);
                v85 |= (unint64_t)(v87 & 0x7F) << v83;
                if ((v87 & 0x80) == 0)
                  goto LABEL_306;
                v83 += 7;
                v80 = v86;
                v103 = v84++ > 8;
              }
              while (!v103);
LABEL_234:
              v85 = 0;
              goto LABEL_306;
            }
            v177 = 0;
            v178 = 0;
            v85 = 0;
            if (v81 <= v80)
              v81 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v81 == v80)
              {
                v85 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v179 = v80 + 1;
                v180 = *(_BYTE *)(v82 + v80);
                *((_QWORD *)this + 1) = v179;
                v85 |= (unint64_t)(v180 & 0x7F) << v177;
                if (v180 < 0)
                {
                  v177 += 7;
                  v80 = v179;
                  v103 = v178++ > 8;
                  if (v103)
                    goto LABEL_234;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v85 = 0;
              }
              break;
            }
LABEL_306:
            *(_QWORD *)(a1 + 72) = v85;
            break;
          case 203:
            *(_DWORD *)(a1 + 152) |= 0x2000u;
            v88 = *((_QWORD *)this + 1);
            if (v88 <= 0xFFFFFFFFFFFFFFFBLL && v88 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v88);
LABEL_258:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_96:
              *((_BYTE *)this + 24) = 1;
            }
            break;
          case 204:
            if (v24 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
              {
                v89 = *(char **)(a1 + 16);
                do
                {
                  if ((unint64_t)v89 >= *v12)
                  {
                    v90 = v2;
                    v91 = (char *)*v11;
                    v92 = (v89 - (_BYTE *)*v11) >> 3;
                    v93 = v92 + 1;
                    if ((unint64_t)(v92 + 1) >> 61)
                      goto LABEL_363;
                    v94 = *v12 - (_QWORD)v91;
                    if (v94 >> 2 > v93)
                      v93 = v94 >> 2;
                    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                      v95 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v95 = v93;
                    if (v95)
                    {
                      v96 = (char *)sub_21B796A20((uint64_t)v12, v95);
                      v91 = *(char **)(a1 + 8);
                      v89 = *(char **)(a1 + 16);
                    }
                    else
                    {
                      v96 = 0;
                    }
                    v97 = &v96[8 * v92];
                    *(_QWORD *)v97 = 0;
                    v98 = v97 + 8;
                    while (v89 != v91)
                    {
                      v99 = *((_QWORD *)v89 - 1);
                      v89 -= 8;
                      *((_QWORD *)v97 - 1) = v99;
                      v97 -= 8;
                    }
                    *(_QWORD *)(a1 + 8) = v97;
                    *(_QWORD *)(a1 + 16) = v98;
                    *(_QWORD *)(a1 + 24) = &v96[8 * v95];
                    if (v91)
                      operator delete(v91);
                    v89 = v98;
                    v2 = v90;
                  }
                  else
                  {
                    *(_QWORD *)v89 = 0;
                    v89 += 8;
                  }
                  *(_QWORD *)(a1 + 16) = v89;
                  v101 = *((_QWORD *)this + 1);
                  v100 = *((_QWORD *)this + 2);
                  v102 = *(_QWORD *)this;
                  v103 = v101 > 0xFFFFFFFFFFFFFFF5 || v101 + 10 > v100;
                  if (!v103)
                  {
                    v109 = 0;
                    v110 = 0;
                    v111 = 0;
                    while (1)
                    {
                      v112 = v101 + 1;
                      *((_QWORD *)this + 1) = v101 + 1;
                      v113 = *(_BYTE *)(v102 + v101);
                      v111 |= (unint64_t)(v113 & 0x7F) << v109;
                      if ((v113 & 0x80) == 0)
                        goto LABEL_139;
                      v109 += 7;
                      v101 = v112;
                      v103 = v110++ > 8;
                      if (v103)
                      {
                        v111 = 0;
                        goto LABEL_139;
                      }
                    }
                  }
                  v104 = 0;
                  v105 = 0;
                  v111 = 0;
                  if (v100 <= v101)
                    v106 = *((_QWORD *)this + 1);
                  else
                    v106 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v106 == v101)
                    {
                      *((_BYTE *)this + 24) = 1;
                      *((_QWORD *)v89 - 1) = 0;
                      goto LABEL_276;
                    }
                    v107 = v101++;
                    v108 = *(_BYTE *)(v102 + v107);
                    *((_QWORD *)this + 1) = v101;
                    v111 |= (unint64_t)(v108 & 0x7F) << v104;
                    if ((v108 & 0x80) == 0)
                      break;
                    v104 += 7;
                    v103 = v105++ > 8;
                    if (v103)
                    {
                      v111 = 0;
                      goto LABEL_138;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v111 = 0;
LABEL_138:
                  v112 = v107 + 1;
LABEL_139:
                  *((_QWORD *)v89 - 1) = v111;
                }
                while (v112 < v100 && !*((_BYTE *)this + 24));
              }
LABEL_276:
              PB::Reader::recallMark();
            }
            else
            {
              v181 = v9;
              v182 = v2;
              v184 = *(char **)(a1 + 16);
              v183 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v184 >= v183)
              {
                v197 = (char *)*v11;
                v198 = (v184 - (_BYTE *)*v11) >> 3;
                v199 = v198 + 1;
                if ((unint64_t)(v198 + 1) >> 61)
LABEL_363:
                  sub_21B796A0C();
                v200 = v183 - (_QWORD)v197;
                if (v200 >> 2 > v199)
                  v199 = v200 >> 2;
                if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
                  v201 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v201 = v199;
                if (v201)
                {
                  v202 = (char *)sub_21B796A20((uint64_t)v12, v201);
                  v197 = *(char **)(a1 + 8);
                  v184 = *(char **)(a1 + 16);
                }
                else
                {
                  v202 = 0;
                }
                v209 = &v202[8 * v198];
                *(_QWORD *)v209 = 0;
                v185 = v209 + 8;
                while (v184 != v197)
                {
                  v210 = *((_QWORD *)v184 - 1);
                  v184 -= 8;
                  *((_QWORD *)v209 - 1) = v210;
                  v209 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v209;
                *(_QWORD *)(a1 + 16) = v185;
                *(_QWORD *)(a1 + 24) = &v202[8 * v201];
                if (v197)
                  operator delete(v197);
              }
              else
              {
                *(_QWORD *)v184 = 0;
                v185 = v184 + 8;
              }
              *(_QWORD *)(a1 + 16) = v185;
              v211 = *((_QWORD *)this + 1);
              v212 = *((_QWORD *)this + 2);
              v213 = *(_QWORD *)this;
              v214 = 0;
              v215 = 0;
              if (v211 > 0xFFFFFFFFFFFFFFF5 || v211 + 10 > v212)
              {
                v219 = 0;
                if (v212 <= v211)
                  v212 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v212 == v211)
                  {
                    v219 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_351;
                  }
                  v217 = v211 + 1;
                  v218 = *(_BYTE *)(v213 + v211);
                  *((_QWORD *)this + 1) = v217;
                  v219 |= (unint64_t)(v218 & 0x7F) << v214;
                  if ((v218 & 0x80) == 0)
                    break;
                  v214 += 7;
                  v211 = v217;
                  v103 = v215++ > 8;
                  if (v103)
                  {
LABEL_336:
                    v219 = 0;
                    goto LABEL_351;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v219 = 0;
              }
              else
              {
                v219 = 0;
                while (1)
                {
                  v220 = v211 + 1;
                  *((_QWORD *)this + 1) = v211 + 1;
                  v221 = *(_BYTE *)(v213 + v211);
                  v219 |= (unint64_t)(v221 & 0x7F) << v214;
                  if ((v221 & 0x80) == 0)
                    break;
                  v214 += 7;
                  v211 = v220;
                  v103 = v215++ > 8;
                  if (v103)
                    goto LABEL_336;
                }
              }
LABEL_351:
              *(v185 - 1) = v219;
              v2 = v182;
              v9 = v181;
            }
            break;
          case 205:
            if (v24 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v114 = v2;
              v115 = *((_QWORD *)this + 1);
              v116 = *((_QWORD *)this + 2);
              while (v115 < v116 && !*((_BYTE *)this + 24))
              {
                v118 = *(char **)(a1 + 40);
                v117 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v118 >= v117)
                {
                  v120 = (char *)*v9;
                  v121 = (v118 - (_BYTE *)*v9) >> 2;
                  v122 = v121 + 1;
                  if ((unint64_t)(v121 + 1) >> 62)
                    goto LABEL_362;
                  v123 = v117 - (_QWORD)v120;
                  if (v123 >> 1 > v122)
                    v122 = v123 >> 1;
                  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                    v124 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                  {
                    v125 = (char *)sub_21B796CD8(v10, v124);
                    v120 = *(char **)(a1 + 32);
                    v118 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v125 = 0;
                  }
                  v126 = &v125[4 * v121];
                  *(_DWORD *)v126 = 0;
                  v119 = v126 + 4;
                  while (v118 != v120)
                  {
                    v127 = *((_DWORD *)v118 - 1);
                    v118 -= 4;
                    *((_DWORD *)v126 - 1) = v127;
                    v126 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v126;
                  *(_QWORD *)(a1 + 40) = v119;
                  *(_QWORD *)(a1 + 48) = &v125[4 * v124];
                  if (v120)
                    operator delete(v120);
                }
                else
                {
                  *(_DWORD *)v118 = 0;
                  v119 = v118 + 4;
                }
                *(_QWORD *)(a1 + 40) = v119;
                v128 = *((_QWORD *)this + 1);
                if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
                {
                  *((_BYTE *)this + 24) = 1;
                  break;
                }
                *(v119 - 1) = *(_DWORD *)(*(_QWORD *)this + v128);
                v116 = *((_QWORD *)this + 2);
                v115 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v115;
              }
              PB::Reader::recallMark();
            }
            else
            {
              v114 = v2;
              v187 = *(char **)(a1 + 40);
              v186 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v187 >= v186)
              {
                v203 = (char *)*v9;
                v204 = (v187 - (_BYTE *)*v9) >> 2;
                v205 = v204 + 1;
                if ((unint64_t)(v204 + 1) >> 62)
LABEL_362:
                  sub_21B796A0C();
                v206 = v186 - (_QWORD)v203;
                if (v206 >> 1 > v205)
                  v205 = v206 >> 1;
                if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL)
                  v207 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v207 = v205;
                if (v207)
                {
                  v208 = (char *)sub_21B796CD8(v10, v207);
                  v203 = *(char **)(a1 + 32);
                  v187 = *(char **)(a1 + 40);
                }
                else
                {
                  v208 = 0;
                }
                v222 = &v208[4 * v204];
                *(_DWORD *)v222 = 0;
                v188 = v222 + 4;
                while (v187 != v203)
                {
                  v223 = *((_DWORD *)v187 - 1);
                  v187 -= 4;
                  *((_DWORD *)v222 - 1) = v223;
                  v222 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v222;
                *(_QWORD *)(a1 + 40) = v188;
                *(_QWORD *)(a1 + 48) = &v208[4 * v207];
                if (v203)
                  operator delete(v203);
              }
              else
              {
                *(_DWORD *)v187 = 0;
                v188 = v187 + 4;
              }
              *(_QWORD *)(a1 + 40) = v188;
              v224 = *((_QWORD *)this + 1);
              if (v224 <= 0xFFFFFFFFFFFFFFFBLL && v224 + 4 <= *((_QWORD *)this + 2))
              {
                *(v188 - 1) = *(_DWORD *)(*(_QWORD *)this + v224);
                *((_QWORD *)this + 1) += 4;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
            }
            v2 = v114;
            break;
          case 206:
            *(_DWORD *)(a1 + 152) |= 1u;
            v129 = *((_QWORD *)this + 1);
            v130 = *((_QWORD *)this + 2);
            v131 = *(_QWORD *)this;
            if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
            {
              v132 = 0;
              v133 = 0;
              v134 = 0;
              do
              {
                v135 = v129 + 1;
                *((_QWORD *)this + 1) = v129 + 1;
                v136 = *(_BYTE *)(v131 + v129);
                v134 |= (unint64_t)(v136 & 0x7F) << v132;
                if ((v136 & 0x80) == 0)
                  goto LABEL_309;
                v132 += 7;
                v129 = v135;
                v103 = v133++ > 8;
              }
              while (!v103);
LABEL_245:
              v134 = 0;
              goto LABEL_309;
            }
            v189 = 0;
            v190 = 0;
            v134 = 0;
            if (v130 <= v129)
              v130 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v130 == v129)
              {
                v134 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v191 = v129 + 1;
                v192 = *(_BYTE *)(v131 + v129);
                *((_QWORD *)this + 1) = v191;
                v134 |= (unint64_t)(v192 & 0x7F) << v189;
                if (v192 < 0)
                {
                  v189 += 7;
                  v129 = v191;
                  v103 = v190++ > 8;
                  if (v103)
                    goto LABEL_245;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v134 = 0;
              }
              break;
            }
LABEL_309:
            *(_QWORD *)(a1 + 56) = v134;
            break;
          case 207:
            *(_DWORD *)(a1 + 152) |= 2u;
            v137 = *((_QWORD *)this + 1);
            v138 = *((_QWORD *)this + 2);
            v139 = *(_QWORD *)this;
            if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
            {
              v140 = 0;
              v141 = 0;
              v142 = 0;
              do
              {
                v143 = v137 + 1;
                *((_QWORD *)this + 1) = v137 + 1;
                v144 = *(_BYTE *)(v139 + v137);
                v142 |= (unint64_t)(v144 & 0x7F) << v140;
                if ((v144 & 0x80) == 0)
                  goto LABEL_312;
                v140 += 7;
                v137 = v143;
                v103 = v141++ > 8;
              }
              while (!v103);
LABEL_252:
              v142 = 0;
              goto LABEL_312;
            }
            v193 = 0;
            v194 = 0;
            v142 = 0;
            if (v138 <= v137)
              v138 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v138 == v137)
              {
                v142 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v195 = v137 + 1;
                v196 = *(_BYTE *)(v139 + v137);
                *((_QWORD *)this + 1) = v195;
                v142 |= (unint64_t)(v196 & 0x7F) << v193;
                if (v196 < 0)
                {
                  v193 += 7;
                  v137 = v195;
                  v103 = v194++ > 8;
                  if (v103)
                    goto LABEL_252;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v142 = 0;
              }
              break;
            }
LABEL_312:
            *(_QWORD *)(a1 + 64) = v142;
            break;
          case 208:
            *(_DWORD *)(a1 + 152) |= 0x20000u;
            v145 = *((_QWORD *)this + 1);
            if (v145 >= *((_QWORD *)this + 2))
            {
              v148 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v146 = v145 + 1;
              v147 = *(unsigned __int8 *)(*(_QWORD *)this + v145);
              *((_QWORD *)this + 1) = v146;
              v148 = v147 != 0;
            }
            *(_BYTE *)(a1 + 149) = v148;
            break;
          default:
            if ((_DWORD)v25 == 101)
            {
              *(_DWORD *)(a1 + 152) |= 0x10000u;
              v149 = *((_QWORD *)this + 1);
              if (v149 >= *((_QWORD *)this + 2))
              {
                v152 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v150 = v149 + 1;
                v151 = *(unsigned __int8 *)(*(_QWORD *)this + v149);
                *((_QWORD *)this + 1) = v150;
                v152 = v151 != 0;
              }
              *(_BYTE *)(a1 + 148) = v152;
            }
            else if ((_DWORD)v25 == 102)
            {
              *(_DWORD *)(a1 + 152) |= 0x40u;
              v35 = *((_QWORD *)this + 1);
              v36 = *((_QWORD *)this + 2);
              v37 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v36)
              {
                v157 = 0;
                v158 = 0;
                v40 = 0;
                if (v36 <= v35)
                  v36 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v36 == v35)
                  {
                    v40 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_291;
                  }
                  v159 = v35 + 1;
                  v160 = *(_BYTE *)(v37 + v35);
                  *((_QWORD *)this + 1) = v159;
                  v40 |= (unint64_t)(v160 & 0x7F) << v157;
                  if ((v160 & 0x80) == 0)
                    break;
                  v157 += 7;
                  v35 = v159;
                  v103 = v158++ > 8;
                  if (v103)
                  {
LABEL_199:
                    v40 = 0;
                    goto LABEL_291;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v40 = 0;
              }
              else
              {
                v38 = 0;
                v39 = 0;
                v40 = 0;
                while (1)
                {
                  v41 = v35 + 1;
                  *((_QWORD *)this + 1) = v35 + 1;
                  v42 = *(_BYTE *)(v37 + v35);
                  v40 |= (unint64_t)(v42 & 0x7F) << v38;
                  if ((v42 & 0x80) == 0)
                    break;
                  v38 += 7;
                  v35 = v41;
                  v103 = v39++ > 8;
                  if (v103)
                    goto LABEL_199;
                }
              }
LABEL_291:
              *(_QWORD *)(a1 + 104) = v40;
            }
            else
            {
LABEL_184:
              if ((PB::Reader::skip(this) & 1) == 0)
                return 0;
            }
            break;
        }
      }
      else
      {
        switch((int)v25)
        {
          case 1:
            *(_DWORD *)(a1 + 152) |= 0x80u;
            v26 = *((_QWORD *)this + 1);
            if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v26);
            goto LABEL_258;
          case 2:
            *(_DWORD *)(a1 + 152) |= 8u;
            v43 = *((_QWORD *)this + 1);
            v44 = *((_QWORD *)this + 2);
            v45 = *(_QWORD *)this;
            if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
            {
              v46 = 0;
              v47 = 0;
              v48 = 0;
              do
              {
                v49 = v43 + 1;
                *((_QWORD *)this + 1) = v43 + 1;
                v50 = *(_BYTE *)(v45 + v43);
                v48 |= (unint64_t)(v50 & 0x7F) << v46;
                if ((v50 & 0x80) == 0)
                  goto LABEL_294;
                v46 += 7;
                v43 = v49;
                v103 = v47++ > 8;
              }
              while (!v103);
LABEL_206:
              v48 = 0;
              goto LABEL_294;
            }
            v161 = 0;
            v162 = 0;
            v48 = 0;
            if (v44 <= v43)
              v44 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v44 == v43)
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v163 = v43 + 1;
                v164 = *(_BYTE *)(v45 + v43);
                *((_QWORD *)this + 1) = v163;
                v48 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  v43 = v163;
                  v103 = v162++ > 8;
                  if (v103)
                    goto LABEL_206;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v48 = 0;
              }
              break;
            }
LABEL_294:
            *(_QWORD *)(a1 + 80) = v48;
            goto LABEL_352;
          case 3:
            *(_DWORD *)(a1 + 152) |= 0x800u;
            v51 = *((_QWORD *)this + 1);
            v52 = *((_QWORD *)this + 2);
            v53 = *(_QWORD *)this;
            if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
            {
              v54 = 0;
              v55 = 0;
              v56 = 0;
              do
              {
                v57 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v58 = *(_BYTE *)(v53 + v51);
                v56 |= (unint64_t)(v58 & 0x7F) << v54;
                if ((v58 & 0x80) == 0)
                  goto LABEL_297;
                v54 += 7;
                v51 = v57;
                v103 = v55++ > 8;
              }
              while (!v103);
LABEL_213:
              LODWORD(v56) = 0;
              goto LABEL_297;
            }
            v165 = 0;
            v166 = 0;
            v56 = 0;
            if (v52 <= v51)
              v52 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v52 == v51)
              {
                LODWORD(v56) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v167 = v51 + 1;
                v168 = *(_BYTE *)(v53 + v51);
                *((_QWORD *)this + 1) = v167;
                v56 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  v51 = v167;
                  v103 = v166++ > 8;
                  if (v103)
                    goto LABEL_213;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v56) = 0;
              }
              break;
            }
LABEL_297:
            *(_DWORD *)(a1 + 128) = v56;
            goto LABEL_352;
          case 4:
            *(_DWORD *)(a1 + 152) |= 0x10u;
            v59 = *((_QWORD *)this + 1);
            v60 = *((_QWORD *)this + 2);
            v61 = *(_QWORD *)this;
            if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
            {
              v62 = 0;
              v63 = 0;
              v64 = 0;
              do
              {
                v65 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v66 = *(_BYTE *)(v61 + v59);
                v64 |= (unint64_t)(v66 & 0x7F) << v62;
                if ((v66 & 0x80) == 0)
                  goto LABEL_300;
                v62 += 7;
                v59 = v65;
                v103 = v63++ > 8;
              }
              while (!v103);
LABEL_220:
              v64 = 0;
              goto LABEL_300;
            }
            v169 = 0;
            v170 = 0;
            v64 = 0;
            if (v60 <= v59)
              v60 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v60 == v59)
              {
                v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v171 = v59 + 1;
                v172 = *(_BYTE *)(v61 + v59);
                *((_QWORD *)this + 1) = v171;
                v64 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  v59 = v171;
                  v103 = v170++ > 8;
                  if (v103)
                    goto LABEL_220;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v64 = 0;
              }
              break;
            }
LABEL_300:
            *(_QWORD *)(a1 + 88) = v64;
            goto LABEL_352;
          case 5:
            *(_DWORD *)(a1 + 152) |= 0x4000u;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v67);
            goto LABEL_258;
          case 6:
            *(_DWORD *)(a1 + 152) |= 0x8000u;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_258;
          case 7:
            *(_DWORD *)(a1 + 152) |= 0x200u;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_258;
          case 8:
            *(_DWORD *)(a1 + 152) |= 0x400u;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_258;
          case 9:
            *(_DWORD *)(a1 + 152) |= 0x20u;
            v71 = *((_QWORD *)this + 1);
            v72 = *((_QWORD *)this + 2);
            v73 = *(_QWORD *)this;
            if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
            {
              v74 = 0;
              v75 = 0;
              v76 = 0;
              do
              {
                v77 = v71 + 1;
                *((_QWORD *)this + 1) = v71 + 1;
                v78 = *(_BYTE *)(v73 + v71);
                v76 |= (unint64_t)(v78 & 0x7F) << v74;
                if ((v78 & 0x80) == 0)
                  goto LABEL_303;
                v74 += 7;
                v71 = v77;
                v103 = v75++ > 8;
              }
              while (!v103);
LABEL_227:
              v76 = 0;
              goto LABEL_303;
            }
            v173 = 0;
            v174 = 0;
            v76 = 0;
            if (v72 <= v71)
              v72 = *((_QWORD *)this + 1);
            break;
          case 10:
            *(_DWORD *)(a1 + 152) |= 0x100u;
            v79 = *((_QWORD *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v79);
            goto LABEL_258;
          default:
            goto LABEL_184;
        }
        while (1)
        {
          if (v72 == v71)
          {
            v76 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_303;
          }
          v175 = v71 + 1;
          v176 = *(_BYTE *)(v73 + v71);
          *((_QWORD *)this + 1) = v175;
          v76 |= (unint64_t)(v176 & 0x7F) << v173;
          if ((v176 & 0x80) == 0)
            break;
          v173 += 7;
          v71 = v175;
          v103 = v174++ > 8;
          if (v103)
            goto LABEL_227;
        }
        if (*((_BYTE *)this + 24))
          v76 = 0;
LABEL_303:
        *(_QWORD *)(a1 + 96) = v76;
      }
LABEL_352:
      v3 = *((_QWORD *)this + 1);
      v4 = *((_QWORD *)this + 2);
      v5 = *((unsigned __int8 *)this + 24);
      if (v3 >= v4 || v5 != 0)
        return v5 == 0;
    }
    v19 = 0;
    v20 = 0;
    v16 = 0;
    if (v3 > v4)
      v4 = v3;
    while (v4 != v3)
    {
      v21 = v3 + 1;
      v22 = *(_BYTE *)(v13 + v3);
      *((_QWORD *)this + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v3 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v5 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v5 == 0;
}

uint64_t sub_21B77284C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  int v10;

  v3 = result;
  v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 112));
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
LABEL_40:
    result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 152) & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) != 0)
    goto LABEL_40;
LABEL_15:
  if ((v4 & 0x2000) != 0)
LABEL_16:
    result = PB::Writer::write(this, *(float *)(v3 + 136));
LABEL_17:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v5 != v6)
  {
    v5 += 8;
    result = PB::Writer::writeVarInt(this);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_DWORD *)(v3 + 152);
  if ((v10 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v10 = *(_DWORD *)(v3 + 152);
    if ((v10 & 2) == 0)
    {
LABEL_25:
      if ((v10 & 0x20000) == 0)
        return result;
      return PB::Writer::write(this);
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_25;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 152) & 0x20000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_21B772AB4(uint64_t result)
{
  *(_QWORD *)result = &off_24DF32028;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_21B772AD0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

uint64_t sub_21B772AF4(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)result = &off_24DF32028;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 112) = 0;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56);
    v3 = 64;
    *(_DWORD *)(result + 112) = 64;
    *(_QWORD *)(result + 56) = v4;
    v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    v5 = *(_QWORD *)(a2 + 32);
    v3 |= 8u;
    *(_DWORD *)(result + 112) = v3;
    *(_QWORD *)(result + 32) = v5;
    v2 = *(_DWORD *)(a2 + 112);
  }
LABEL_6:
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(result + 112) = v3;
    *(_QWORD *)(result + 8) = v6;
    v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0)
        goto LABEL_9;
      goto LABEL_26;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 64) = v7;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v8 = *(_DWORD *)(a2 + 84);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 84) = v8;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v9 = *(_DWORD *)(a2 + 92);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 92) = v9;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10000) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v10 = *(_DWORD *)(a2 + 100);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 100) = v10;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v11 = *(_DWORD *)(a2 + 76);
  v3 |= 0x400u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 76) = v11;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x8000) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v12 = *(_DWORD *)(a2 + 88);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 88) = v12;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x8000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v13 = *(_DWORD *)(a2 + 96);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 96) = v13;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v14 = *(_DWORD *)(a2 + 104);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 104) = v14;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x800) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v15 = *(_DWORD *)(a2 + 80);
  v3 |= 0x800u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 80) = v15;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_35;
  }
LABEL_34:
  v16 = *(_DWORD *)(a2 + 68);
  v3 |= 0x100u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 68) = v16;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_36;
  }
LABEL_35:
  v17 = *(_BYTE *)(a2 + 108);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 112) = v3;
  *(_BYTE *)(result + 108) = v17;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_36:
  v18 = *(_DWORD *)(a2 + 72);
  v3 |= 0x200u;
  *(_DWORD *)(result + 112) = v3;
  *(_DWORD *)(result + 72) = v18;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_38;
  }
LABEL_37:
  v19 = *(_QWORD *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 112) = v3;
  *(_QWORD *)(result + 16) = v19;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20) == 0)
  {
LABEL_21:
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_38:
  v20 = *(_QWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 112) = v3;
  *(_QWORD *)(result + 48) = v20;
  v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10) == 0)
  {
LABEL_22:
    if ((v2 & 4) == 0)
      return result;
LABEL_40:
    v22 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(result + 112) = v3 | 4;
    *(_QWORD *)(result + 24) = v22;
    return result;
  }
LABEL_39:
  v21 = *(_QWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(result + 112) = v3;
  *(_QWORD *)(result + 40) = v21;
  if ((*(_DWORD *)(a2 + 112) & 4) != 0)
    goto LABEL_40;
  return result;
}

uint64_t sub_21B772D28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "accelMagnitude", *(float *)(a1 + 64));
    v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaVThisImpact", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "dimensions");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "epochCounter");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "jHG");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "jImpactStart");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "jLG");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "nextTimestamp");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "partOfHgPath");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "pointType");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "runningArclengthOverEpoch", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "runningArclengthThisImpact", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "runningDeltaVXOverEpoch", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "runningDeltaVXThisImpact", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "runningDeltaVYOverEpoch", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "runningDeltaVYThisImpact", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "runningDeltaVZThisImpact", *(float *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 112) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "runningDeltaVZOverEpoch", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 0x40) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B772FB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v73 = v20++;
                  v74 = *(_BYTE *)(v21 + v73);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_175:
                v2 = v73 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_176;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_176:
              *(_QWORD *)(a1 + 56) = v24;
              goto LABEL_212;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_181;
                  }
                  v77 = v27++;
                  v78 = *(_BYTE *)(v28 + v77);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_180:
                    v2 = v77 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_180;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_181;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_181:
              *(_QWORD *)(a1 + 32) = -(v31 & 1) ^ (v31 >> 1);
              goto LABEL_212;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  v81 = v33++;
                  v82 = *(_BYTE *)(v34 + v81);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_185:
                    v2 = v81 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_185;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_186;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_186:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_212;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_171:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_212;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 108) = v40;
              goto LABEL_212;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_191;
                  }
                  v85 = v41++;
                  v86 = *(_BYTE *)(v42 + v85);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_190:
                    v2 = v85 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_190;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_191;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 72) = v45;
              goto LABEL_212;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_196;
                  }
                  v89 = v47++;
                  v90 = *(_BYTE *)(v48 + v89);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_195:
                    v2 = v89 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
                goto LABEL_195;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_196;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_196:
              *(_QWORD *)(a1 + 16) = v51;
              goto LABEL_212;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_201;
                  }
                  v93 = v53++;
                  v94 = *(_BYTE *)(v54 + v93);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_200:
                    v2 = v93 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_200;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_201;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_201:
              *(_QWORD *)(a1 + 48) = v57;
              goto LABEL_212;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              v59 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v60 = *(_QWORD *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    v63 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  v97 = v59++;
                  v98 = *(_BYTE *)(v60 + v97);
                  *((_QWORD *)this + 1) = v59;
                  v63 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    v63 = 0;
LABEL_205:
                    v2 = v97 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v63 = 0;
                goto LABEL_205;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_206;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              v63 = 0;
LABEL_206:
              *(_QWORD *)(a1 + 40) = v63;
              goto LABEL_212;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 4u;
              v65 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v66 = *(_QWORD *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v69 = 0;
                if (v2 <= v65)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v65)
                  {
                    v69 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  v101 = v65++;
                  v102 = *(_BYTE *)(v66 + v101);
                  *((_QWORD *)this + 1) = v65;
                  v69 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    v69 = 0;
LABEL_210:
                    v2 = v101 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v69 = 0;
                goto LABEL_210;
              }
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v2 = v65 + 1;
                *((_QWORD *)this + 1) = v65 + 1;
                v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0)
                  goto LABEL_211;
                v67 += 7;
                v65 = v2;
                v14 = v68++ > 8;
              }
              while (!v14);
              v69 = 0;
LABEL_211:
              *(_QWORD *)(a1 + 24) = v69;
LABEL_212:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_212;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B773B14(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 112);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeSInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 112) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_21B773D4C(uint64_t result)
{
  *(_QWORD *)result = &off_24DF32060;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_21B773D64(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B773D88(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24DF32060;
  *(_DWORD *)(a1 + 80) = 0;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) != 0)
  {
    v4 = *(_QWORD *)(a2 + 72);
    v3 = 256;
    *(_WORD *)(a1 + 80) = 256;
    *(_QWORD *)(a1 + 72) = v4;
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 80) = v3;
    *(double *)(a1 + 16) = result;
    v2 = *(_WORD *)(a2 + 80);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *(double *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(a1 + 80) = v3;
    *(double *)(a1 + 24) = result;
    v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 32) = result;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_17;
  }
LABEL_16:
  v6 = *(_QWORD *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 8) = v6;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
LABEL_17:
  result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 48) = result;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_18:
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0)
      return result;
LABEL_20:
    result = *(double *)(a2 + 40);
    *(_WORD *)(a1 + 80) = v3 | 0x10;
    *(double *)(a1 + 40) = result;
    return result;
  }
LABEL_19:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 80) = v3;
  *(double *)(a1 + 64) = result;
  if ((*(_WORD *)(a2 + 80) & 0x10) != 0)
    goto LABEL_20;
  return result;
}

uint64_t sub_21B773EA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochCounter");
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialAccelX", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "inertialAccelY", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "inertialAccelZ", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 80) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B773FF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 0x100u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_78;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_78:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_79;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_79:
              *(_QWORD *)(a1 + 72) = v24;
              goto LABEL_85;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 4u:
              *(_WORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 80) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_83:
                    v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_83;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_84;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_84:
              *(_QWORD *)(a1 + 8) = v31;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_58:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B7744CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  if ((*(_WORD *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_21B7745EC(uint64_t result)
{
  *(_QWORD *)result = &off_24DF32098;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_21B774604(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x220766390);
}

double sub_21B774628(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24DF32098;
  *(_DWORD *)(a1 + 104) = 0;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x800) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    v3 = 2048;
    *(_WORD *)(a1 + 104) = 2048;
    *(_QWORD *)(a1 + 96) = v4;
    v2 = *(_WORD *)(a2 + 104);
    if ((v2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 104) = v3;
    *(double *)(a1 + 40) = result;
    v2 = *(_WORD *)(a2 + 104);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_WORD *)(a1 + 104) = v3;
    *(double *)(a1 + 48) = result;
    v2 = *(_WORD *)(a2 + 104);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0)
        goto LABEL_9;
      goto LABEL_19;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 56) = result;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  v6 = *(_QWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 104) = v3;
  *(_QWORD *)(a1 + 32) = v6;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 72) = result;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x200) == 0)
  {
LABEL_11:
    if ((v2 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 80) = result;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x400) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 88) = result;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0)
      goto LABEL_14;
    goto LABEL_24;
  }
LABEL_23:
  result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 64) = result;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_24:
  result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 8) = result;
  v2 = *(_WORD *)(a2 + 104);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0)
      return result;
LABEL_26:
    result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 104) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }
LABEL_25:
  result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_WORD *)(a1 + 104) = v3;
  *(double *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 104) & 4) != 0)
    goto LABEL_26;
  return result;
}

uint64_t sub_21B774794(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bodyAccelX", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bodyAccelY", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "bodyAccelZ", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "epochCounter");
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "inertialAccelX", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inertialAccelY", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "inertialAccelZ", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 104) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x400) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_21B774944(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 104) |= 0x800u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 96) = v24;
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 104) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 3u:
              *(_WORD *)(a1 + 104) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 4u:
              *(_WORD *)(a1 + 104) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 5u:
              *(_WORD *)(a1 + 104) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_92:
                    v2 = v39 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_93:
              *(_QWORD *)(a1 + 32) = v31;
LABEL_94:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_WORD *)(a1 + 104) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 7u:
              *(_WORD *)(a1 + 104) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 8u:
              *(_WORD *)(a1 + 104) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 9u:
              *(_WORD *)(a1 + 104) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xAu:
              *(_WORD *)(a1 + 104) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xBu:
              *(_WORD *)(a1 + 104) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xCu:
              *(_WORD *)(a1 + 104) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_83:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_67:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_94;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_94;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_21B774EC8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 104);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 104);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 104) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

